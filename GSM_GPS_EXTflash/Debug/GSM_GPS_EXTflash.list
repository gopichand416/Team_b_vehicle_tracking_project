
GSM_GPS_EXTflash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0800cc78  0800cc78  0001cc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d704  0800d704  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d704  0800d704  0001d704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d70c  0800d70c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d70c  0800d70c  0001d70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d710  0800d710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200001e8  0800d8f8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000cec  0800d8f8  00020cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b40  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b71  00000000  00000000  00030d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00033908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9e  00000000  00000000  000346f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027932  00000000  00000000  0003518e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011beb  00000000  00000000  0005cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf02  00000000  00000000  0006e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005058  00000000  00000000  0015a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc60 	.word	0x0800cc60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800cc60 	.word	0x0800cc60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <gsm_init>:
uint8_t response[20];
char *data1;
uint8_t var=0;
char *str;
int gsm_init()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	uint8_t state=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
	uint8_t substate=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
	int count=20;
 8000ffe:	2314      	movs	r3, #20
 8001000:	60bb      	str	r3, [r7, #8]
	while(count--)
 8001002:	e2a0      	b.n	8001546 <gsm_init+0x556>
	{
	switch(state)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b07      	cmp	r3, #7
 8001008:	f200 8298 	bhi.w	800153c <gsm_init+0x54c>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <gsm_init+0x24>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001035 	.word	0x08001035
 8001018:	080010af 	.word	0x080010af
 800101c:	0800111b 	.word	0x0800111b
 8001020:	080011a1 	.word	0x080011a1
 8001024:	08001229 	.word	0x08001229
 8001028:	080012bd 	.word	0x080012bd
 800102c:	080013af 	.word	0x080013af
 8001030:	0800148b 	.word	0x0800148b
	{
			  	  case 0:
			  	  {
			  		  switch(substate)
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 8285 	bne.w	8001546 <gsm_init+0x556>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 800103c:	48a2      	ldr	r0, [pc, #648]	; (80012c8 <gsm_init+0x2d8>)
 800103e:	f000 fcc9 	bl	80019d4 <send_to_gsm>
 8001042:	4603      	mov	r3, r0
 8001044:	4aa1      	ldr	r2, [pc, #644]	; (80012cc <gsm_init+0x2dc>)
 8001046:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("ATE0 \n");
 8001048:	48a1      	ldr	r0, [pc, #644]	; (80012d0 <gsm_init+0x2e0>)
 800104a:	f007 fd19 	bl	8008a80 <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 800104e:	4b9f      	ldr	r3, [pc, #636]	; (80012cc <gsm_init+0x2dc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	49a0      	ldr	r1, [pc, #640]	; (80012d4 <gsm_init+0x2e4>)
 8001054:	4618      	mov	r0, r3
 8001056:	f007 fe5b 	bl	8008d10 <strstr>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00d      	beq.n	800107c <gsm_init+0x8c>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	7bba      	ldrb	r2, [r7, #14]
 8001064:	4619      	mov	r1, r3
 8001066:	489c      	ldr	r0, [pc, #624]	; (80012d8 <gsm_init+0x2e8>)
 8001068:	f007 fca4 	bl	80089b4 <iprintf>
			  				printf("ATE0 OK \n");
 800106c:	489b      	ldr	r0, [pc, #620]	; (80012dc <gsm_init+0x2ec>)
 800106e:	f007 fd07 	bl	8008a80 <puts>
			  				  state=1;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 800107a:	e016      	b.n	80010aa <gsm_init+0xba>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 800107c:	4b93      	ldr	r3, [pc, #588]	; (80012cc <gsm_init+0x2dc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2206      	movs	r2, #6
 8001082:	4997      	ldr	r1, [pc, #604]	; (80012e0 <gsm_init+0x2f0>)
 8001084:	4618      	mov	r0, r3
 8001086:	f007 fe31 	bl	8008cec <strncmp>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <gsm_init+0xba>
			  				printf("state = %d substate = %d \n",state,substate);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	7bba      	ldrb	r2, [r7, #14]
 8001094:	4619      	mov	r1, r3
 8001096:	4890      	ldr	r0, [pc, #576]	; (80012d8 <gsm_init+0x2e8>)
 8001098:	f007 fc8c 	bl	80089b4 <iprintf>
			  				printf("ATE0 ERROR \n");
 800109c:	4891      	ldr	r0, [pc, #580]	; (80012e4 <gsm_init+0x2f4>)
 800109e:	f007 fcef 	bl	8008a80 <puts>
			  				  state=0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
			  			  break;
 80010aa:	bf00      	nop
			  		  }
			  		  break;
 80010ac:	e24b      	b.n	8001546 <gsm_init+0x556>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d132      	bne.n	800111a <gsm_init+0x12a>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 80010b4:	488c      	ldr	r0, [pc, #560]	; (80012e8 <gsm_init+0x2f8>)
 80010b6:	f000 fc8d 	bl	80019d4 <send_to_gsm>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a83      	ldr	r2, [pc, #524]	; (80012cc <gsm_init+0x2dc>)
 80010be:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 80010c0:	488a      	ldr	r0, [pc, #552]	; (80012ec <gsm_init+0x2fc>)
 80010c2:	f007 fcdd 	bl	8008a80 <puts>
			  			  HAL_Delay(1000);
 80010c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ca:	f002 faa9 	bl	8003620 <HAL_Delay>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <gsm_init+0x2dc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2206      	movs	r2, #6
 80010d4:	497f      	ldr	r1, [pc, #508]	; (80012d4 <gsm_init+0x2e4>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f007 fe08 	bl	8008cec <strncmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10d      	bne.n	80010fe <gsm_init+0x10e>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	7bba      	ldrb	r2, [r7, #14]
 80010e6:	4619      	mov	r1, r3
 80010e8:	487b      	ldr	r0, [pc, #492]	; (80012d8 <gsm_init+0x2e8>)
 80010ea:	f007 fc63 	bl	80089b4 <iprintf>
			  				printf("CMEE=2 OK \n");
 80010ee:	4880      	ldr	r0, [pc, #512]	; (80012f0 <gsm_init+0x300>)
 80010f0:	f007 fcc6 	bl	8008a80 <puts>
			  				  state=2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73bb      	strb	r3, [r7, #14]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 80010fc:	e00c      	b.n	8001118 <gsm_init+0x128>
			  				printf("state = %d substate = %d \n",state,substate);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	7bba      	ldrb	r2, [r7, #14]
 8001102:	4619      	mov	r1, r3
 8001104:	4874      	ldr	r0, [pc, #464]	; (80012d8 <gsm_init+0x2e8>)
 8001106:	f007 fc55 	bl	80089b4 <iprintf>
			  				printf("CMEE=2 OK \n");
 800110a:	4879      	ldr	r0, [pc, #484]	; (80012f0 <gsm_init+0x300>)
 800110c:	f007 fcb8 	bl	8008a80 <puts>
			  				  state=0;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 8001114:	2300      	movs	r3, #0
 8001116:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001118:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d13f      	bne.n	80011a0 <gsm_init+0x1b0>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 8001120:	4874      	ldr	r0, [pc, #464]	; (80012f4 <gsm_init+0x304>)
 8001122:	f000 fc57 	bl	80019d4 <send_to_gsm>
 8001126:	4603      	mov	r3, r0
 8001128:	4a68      	ldr	r2, [pc, #416]	; (80012cc <gsm_init+0x2dc>)
 800112a:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("CPIN \n");
 800112c:	4872      	ldr	r0, [pc, #456]	; (80012f8 <gsm_init+0x308>)
 800112e:	f007 fca7 	bl	8008a80 <puts>
			  			  if((strstr(str,"READY")!=NULL))
 8001132:	4b66      	ldr	r3, [pc, #408]	; (80012cc <gsm_init+0x2dc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4971      	ldr	r1, [pc, #452]	; (80012fc <gsm_init+0x30c>)
 8001138:	4618      	mov	r0, r3
 800113a:	f007 fde9 	bl	8008d10 <strstr>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <gsm_init+0x170>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	7bba      	ldrb	r2, [r7, #14]
 8001148:	4619      	mov	r1, r3
 800114a:	4863      	ldr	r0, [pc, #396]	; (80012d8 <gsm_init+0x2e8>)
 800114c:	f007 fc32 	bl	80089b4 <iprintf>
			  				printf("CPIN READY \n");
 8001150:	486b      	ldr	r0, [pc, #428]	; (8001300 <gsm_init+0x310>)
 8001152:	f007 fc95 	bl	8008a80 <puts>
			  			      state=3;
 8001156:	2303      	movs	r3, #3
 8001158:	73fb      	strb	r3, [r7, #15]
			  			      substate=0;
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=0;
			 	  			substate=0;
			  			  }
			  			  break;
 800115e:	e01e      	b.n	800119e <gsm_init+0x1ae>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001160:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <gsm_init+0x2dc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2206      	movs	r2, #6
 8001166:	495e      	ldr	r1, [pc, #376]	; (80012e0 <gsm_init+0x2f0>)
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fdbf 	bl	8008cec <strncmp>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10a      	bne.n	800118a <gsm_init+0x19a>
			  				printf("state = %d substate = %d \n",state,substate);
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	7bba      	ldrb	r2, [r7, #14]
 8001178:	4619      	mov	r1, r3
 800117a:	4857      	ldr	r0, [pc, #348]	; (80012d8 <gsm_init+0x2e8>)
 800117c:	f007 fc1a 	bl	80089b4 <iprintf>
			  				state=0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 8001184:	2300      	movs	r3, #0
 8001186:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001188:	e009      	b.n	800119e <gsm_init+0x1ae>
			  				printf("state = %d substate = %d \n",state,substate);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	7bba      	ldrb	r2, [r7, #14]
 800118e:	4619      	mov	r1, r3
 8001190:	4851      	ldr	r0, [pc, #324]	; (80012d8 <gsm_init+0x2e8>)
 8001192:	f007 fc0f 	bl	80089b4 <iprintf>
			  	  			state=0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
			 	  			substate=0;
 800119a:	2300      	movs	r3, #0
 800119c:	73bb      	strb	r3, [r7, #14]
			  			  break;
 800119e:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 81cf 	bne.w	8001546 <gsm_init+0x556>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 80011a8:	4856      	ldr	r0, [pc, #344]	; (8001304 <gsm_init+0x314>)
 80011aa:	f000 fc13 	bl	80019d4 <send_to_gsm>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a46      	ldr	r2, [pc, #280]	; (80012cc <gsm_init+0x2dc>)
 80011b2:	6013      	str	r3, [r2, #0]
			  				  //HAL_Delay(1000);
			  				  printf("CAQ \n");
 80011b4:	4854      	ldr	r0, [pc, #336]	; (8001308 <gsm_init+0x318>)
 80011b6:	f007 fc63 	bl	8008a80 <puts>
			  				  int e=check_signal(str);
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <gsm_init+0x2dc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fa3e 	bl	8001640 <check_signal>
 80011c4:	6078      	str	r0, [r7, #4]
			  				  if((strstr(str,"OK")!=NULL))
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <gsm_init+0x2dc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4950      	ldr	r1, [pc, #320]	; (800130c <gsm_init+0x31c>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fd9f 	bl	8008d10 <strstr>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01b      	beq.n	8001210 <gsm_init+0x220>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	7bba      	ldrb	r2, [r7, #14]
 80011dc:	4619      	mov	r1, r3
 80011de:	483e      	ldr	r0, [pc, #248]	; (80012d8 <gsm_init+0x2e8>)
 80011e0:	f007 fbe8 	bl	80089b4 <iprintf>
			  					  printf("CAQ OK\n");
 80011e4:	484a      	ldr	r0, [pc, #296]	; (8001310 <gsm_init+0x320>)
 80011e6:	f007 fc4b 	bl	8008a80 <puts>
			  					  if(e==0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <gsm_init+0x210>
			  					  {
			  						  printf("signal OK\n");
 80011f0:	4848      	ldr	r0, [pc, #288]	; (8001314 <gsm_init+0x324>)
 80011f2:	f007 fc45 	bl	8008a80 <puts>
			  						  state=4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73bb      	strb	r3, [r7, #14]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=0;
			  					  substate=0;
			  				  }
			  				  break;
 80011fe:	e011      	b.n	8001224 <gsm_init+0x234>
			  						  printf("signal NOT OK\n");
 8001200:	4845      	ldr	r0, [pc, #276]	; (8001318 <gsm_init+0x328>)
 8001202:	f007 fc3d 	bl	8008a80 <puts>
			  						  state=3;
 8001206:	2303      	movs	r3, #3
 8001208:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 800120a:	2300      	movs	r3, #0
 800120c:	73bb      	strb	r3, [r7, #14]
			  				  break;
 800120e:	e009      	b.n	8001224 <gsm_init+0x234>
			  					  printf("state = %d substate = %d \n",state,substate);
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	4619      	mov	r1, r3
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <gsm_init+0x2e8>)
 8001218:	f007 fbcc 	bl	80089b4 <iprintf>
			  					  state=0;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
			  					  substate=0;
 8001220:	2300      	movs	r3, #0
 8001222:	73bb      	strb	r3, [r7, #14]
			  				  break;
 8001224:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 8001226:	e18e      	b.n	8001546 <gsm_init+0x556>
				  	case 4:
				  	{
				  		switch(substate)
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <gsm_init+0x244>
 800122e:	2b01      	cmp	r3, #1
 8001230:	d02f      	beq.n	8001292 <gsm_init+0x2a2>
				  				 state=0;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 8001232:	e042      	b.n	80012ba <gsm_init+0x2ca>
				  			  str =send_to_gsm("AT+CREG?\r");
 8001234:	4839      	ldr	r0, [pc, #228]	; (800131c <gsm_init+0x32c>)
 8001236:	f000 fbcd 	bl	80019d4 <send_to_gsm>
 800123a:	4603      	mov	r3, r0
 800123c:	4a23      	ldr	r2, [pc, #140]	; (80012cc <gsm_init+0x2dc>)
 800123e:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 8001240:	4837      	ldr	r0, [pc, #220]	; (8001320 <gsm_init+0x330>)
 8001242:	f007 fc1d 	bl	8008a80 <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <gsm_init+0x2dc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4936      	ldr	r1, [pc, #216]	; (8001324 <gsm_init+0x334>)
 800124c:	4618      	mov	r0, r3
 800124e:	f007 fd5f 	bl	8008d10 <strstr>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <gsm_init+0x28c>
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <gsm_init+0x2dc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4932      	ldr	r1, [pc, #200]	; (8001328 <gsm_init+0x338>)
 800125e:	4618      	mov	r0, r3
 8001260:	f007 fd56 	bl	8008d10 <strstr>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <gsm_init+0x28c>
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <gsm_init+0x2dc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	492f      	ldr	r1, [pc, #188]	; (800132c <gsm_init+0x33c>)
 8001270:	4618      	mov	r0, r3
 8001272:	f007 fd4d 	bl	8008d10 <strstr>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <gsm_init+0x29c>
				  				  state=5;
 800127c:	2305      	movs	r3, #5
 800127e:	73fb      	strb	r3, [r7, #15]
				  				  substate=0;
 8001280:	2300      	movs	r3, #0
 8001282:	73bb      	strb	r3, [r7, #14]
				  				  printf("match found\n");
 8001284:	482a      	ldr	r0, [pc, #168]	; (8001330 <gsm_init+0x340>)
 8001286:	f007 fbfb 	bl	8008a80 <puts>
				  			  break;
 800128a:	e016      	b.n	80012ba <gsm_init+0x2ca>
				  				  substate=1;
 800128c:	2301      	movs	r3, #1
 800128e:	73bb      	strb	r3, [r7, #14]
				  			  break;
 8001290:	e013      	b.n	80012ba <gsm_init+0x2ca>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <gsm_init+0x2dc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2206      	movs	r2, #6
 8001298:	4911      	ldr	r1, [pc, #68]	; (80012e0 <gsm_init+0x2f0>)
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fd26 	bl	8008cec <strncmp>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <gsm_init+0x2c0>
				  				 state=0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012ae:	e003      	b.n	80012b8 <gsm_init+0x2c8>
				  				 state=0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012b8:	bf00      	nop
				  		}
				  		break;
 80012ba:	e144      	b.n	8001546 <gsm_init+0x556>
				  	}

				  	case 5:
				  		switch(substate)
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d038      	beq.n	8001334 <gsm_init+0x344>
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d059      	beq.n	800137a <gsm_init+0x38a>
				  				state=0;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 80012c6:	e071      	b.n	80013ac <gsm_init+0x3bc>
 80012c8:	0800cc78 	.word	0x0800cc78
 80012cc:	200002cc 	.word	0x200002cc
 80012d0:	0800cc80 	.word	0x0800cc80
 80012d4:	0800cc88 	.word	0x0800cc88
 80012d8:	0800cc90 	.word	0x0800cc90
 80012dc:	0800ccac 	.word	0x0800ccac
 80012e0:	0800ccb8 	.word	0x0800ccb8
 80012e4:	0800ccc4 	.word	0x0800ccc4
 80012e8:	0800ccd0 	.word	0x0800ccd0
 80012ec:	0800ccdc 	.word	0x0800ccdc
 80012f0:	0800cce4 	.word	0x0800cce4
 80012f4:	0800ccf0 	.word	0x0800ccf0
 80012f8:	0800ccfc 	.word	0x0800ccfc
 80012fc:	0800cd04 	.word	0x0800cd04
 8001300:	0800cd0c 	.word	0x0800cd0c
 8001304:	0800cd18 	.word	0x0800cd18
 8001308:	0800cd20 	.word	0x0800cd20
 800130c:	0800cd28 	.word	0x0800cd28
 8001310:	0800cd2c 	.word	0x0800cd2c
 8001314:	0800cd34 	.word	0x0800cd34
 8001318:	0800cd40 	.word	0x0800cd40
 800131c:	0800cd50 	.word	0x0800cd50
 8001320:	0800cd5c 	.word	0x0800cd5c
 8001324:	0800cd64 	.word	0x0800cd64
 8001328:	0800cd68 	.word	0x0800cd68
 800132c:	0800cd6c 	.word	0x0800cd6c
 8001330:	0800cd70 	.word	0x0800cd70
				  			str = send_to_gsm("AT+CGREG?\r");
 8001334:	4889      	ldr	r0, [pc, #548]	; (800155c <gsm_init+0x56c>)
 8001336:	f000 fb4d 	bl	80019d4 <send_to_gsm>
 800133a:	4603      	mov	r3, r0
 800133c:	4a88      	ldr	r2, [pc, #544]	; (8001560 <gsm_init+0x570>)
 800133e:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 8001340:	4b87      	ldr	r3, [pc, #540]	; (8001560 <gsm_init+0x570>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4987      	ldr	r1, [pc, #540]	; (8001564 <gsm_init+0x574>)
 8001346:	4618      	mov	r0, r3
 8001348:	f007 fce2 	bl	8008d10 <strstr>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <gsm_init+0x374>
 8001352:	4b83      	ldr	r3, [pc, #524]	; (8001560 <gsm_init+0x570>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4984      	ldr	r1, [pc, #528]	; (8001568 <gsm_init+0x578>)
 8001358:	4618      	mov	r0, r3
 800135a:	f007 fcd9 	bl	8008d10 <strstr>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <gsm_init+0x384>
				  				state=6;
 8001364:	2306      	movs	r3, #6
 8001366:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 8001368:	2300      	movs	r3, #0
 800136a:	73bb      	strb	r3, [r7, #14]
				  				printf("match found\n");
 800136c:	487f      	ldr	r0, [pc, #508]	; (800156c <gsm_init+0x57c>)
 800136e:	f007 fb87 	bl	8008a80 <puts>
				  			break;
 8001372:	e01b      	b.n	80013ac <gsm_init+0x3bc>
				  				substate=1;
 8001374:	2301      	movs	r3, #1
 8001376:	73bb      	strb	r3, [r7, #14]
				  			break;
 8001378:	e018      	b.n	80013ac <gsm_init+0x3bc>
				  			str = send_to_gsm("AT+CGREG=1\r");
 800137a:	487d      	ldr	r0, [pc, #500]	; (8001570 <gsm_init+0x580>)
 800137c:	f000 fb2a 	bl	80019d4 <send_to_gsm>
 8001380:	4603      	mov	r3, r0
 8001382:	4a77      	ldr	r2, [pc, #476]	; (8001560 <gsm_init+0x570>)
 8001384:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <gsm_init+0x570>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	497a      	ldr	r1, [pc, #488]	; (8001574 <gsm_init+0x584>)
 800138c:	4618      	mov	r0, r3
 800138e:	f007 fcbf 	bl	8008d10 <strstr>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <gsm_init+0x3b2>
				  				state=5;
 8001398:	2305      	movs	r3, #5
 800139a:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013a0:	e003      	b.n	80013aa <gsm_init+0x3ba>
				  				state=0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013aa:	bf00      	nop
				  		}
				  		break;
 80013ac:	e0cb      	b.n	8001546 <gsm_init+0x556>

				  	case 6:
				  		{
				  			switch(substate)
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d04a      	beq.n	800144a <gsm_init+0x45a>
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	f300 80c6 	bgt.w	8001546 <gsm_init+0x556>
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <gsm_init+0x3d4>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d026      	beq.n	8001410 <gsm_init+0x420>
 80013c2:	e0c0      	b.n	8001546 <gsm_init+0x556>
				  			{
				  			case 0:
				  				str = send_to_gsm("AT+COPS?\r");
 80013c4:	486c      	ldr	r0, [pc, #432]	; (8001578 <gsm_init+0x588>)
 80013c6:	f000 fb05 	bl	80019d4 <send_to_gsm>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a64      	ldr	r2, [pc, #400]	; (8001560 <gsm_init+0x570>)
 80013ce:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("COPS?\n");
 80013d0:	486a      	ldr	r0, [pc, #424]	; (800157c <gsm_init+0x58c>)
 80013d2:	f007 fb55 	bl	8008a80 <puts>
				  				if((strstr(str,"40449")!=NULL))
 80013d6:	4b62      	ldr	r3, [pc, #392]	; (8001560 <gsm_init+0x570>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4969      	ldr	r1, [pc, #420]	; (8001580 <gsm_init+0x590>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 fc97 	bl	8008d10 <strstr>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00a      	beq.n	80013fe <gsm_init+0x40e>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	7bba      	ldrb	r2, [r7, #14]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4865      	ldr	r0, [pc, #404]	; (8001584 <gsm_init+0x594>)
 80013f0:	f007 fae0 	bl	80089b4 <iprintf>
				  					state=7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	73fb      	strb	r3, [r7, #15]
				  					substate=1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=1;
				  				}
				  				break;
 80013fc:	e044      	b.n	8001488 <gsm_init+0x498>
				  					printf("state = %d substate = %d \n",state,substate);
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	7bba      	ldrb	r2, [r7, #14]
 8001402:	4619      	mov	r1, r3
 8001404:	485f      	ldr	r0, [pc, #380]	; (8001584 <gsm_init+0x594>)
 8001406:	f007 fad5 	bl	80089b4 <iprintf>
				  					substate=1;
 800140a:	2301      	movs	r3, #1
 800140c:	73bb      	strb	r3, [r7, #14]
				  				break;
 800140e:	e03b      	b.n	8001488 <gsm_init+0x498>
				  			case 1:
				  				if((strstr(str,"405854")!=NULL))
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <gsm_init+0x570>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	495c      	ldr	r1, [pc, #368]	; (8001588 <gsm_init+0x598>)
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fc7a 	bl	8008d10 <strstr>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00a      	beq.n	8001438 <gsm_init+0x448>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	7bba      	ldrb	r2, [r7, #14]
 8001426:	4619      	mov	r1, r3
 8001428:	4856      	ldr	r0, [pc, #344]	; (8001584 <gsm_init+0x594>)
 800142a:	f007 fac3 	bl	80089b4 <iprintf>
				  					state=7;
 800142e:	2307      	movs	r3, #7
 8001430:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=2;
				  				}
				  				break;
 8001436:	e027      	b.n	8001488 <gsm_init+0x498>
				  					printf("state = %d substate = %d \n",state,substate);
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	7bba      	ldrb	r2, [r7, #14]
 800143c:	4619      	mov	r1, r3
 800143e:	4851      	ldr	r0, [pc, #324]	; (8001584 <gsm_init+0x594>)
 8001440:	f007 fab8 	bl	80089b4 <iprintf>
				  					substate=2;
 8001444:	2302      	movs	r3, #2
 8001446:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001448:	e01e      	b.n	8001488 <gsm_init+0x498>
				  			case 2:
				  				if((strstr(str,"ERROR")!=NULL))
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <gsm_init+0x570>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	494f      	ldr	r1, [pc, #316]	; (800158c <gsm_init+0x59c>)
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fc5d 	bl	8008d10 <strstr>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00a      	beq.n	8001472 <gsm_init+0x482>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	7bba      	ldrb	r2, [r7, #14]
 8001460:	4619      	mov	r1, r3
 8001462:	4848      	ldr	r0, [pc, #288]	; (8001584 <gsm_init+0x594>)
 8001464:	f007 faa6 	bl	80089b4 <iprintf>
				  					state=0;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800146c:	2300      	movs	r3, #0
 800146e:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 8001470:	e009      	b.n	8001486 <gsm_init+0x496>
				  					printf("state = %d substate = %d \n",state,substate);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	7bba      	ldrb	r2, [r7, #14]
 8001476:	4619      	mov	r1, r3
 8001478:	4842      	ldr	r0, [pc, #264]	; (8001584 <gsm_init+0x594>)
 800147a:	f007 fa9b 	bl	80089b4 <iprintf>
				  					state=0;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001482:	2300      	movs	r3, #0
 8001484:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001486:	bf00      	nop

				  			}
				  			break;
 8001488:	e05d      	b.n	8001546 <gsm_init+0x556>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <gsm_init+0x4a6>
 8001490:	2b01      	cmp	r3, #1
 8001492:	d029      	beq.n	80014e8 <gsm_init+0x4f8>
 8001494:	e057      	b.n	8001546 <gsm_init+0x556>
				  			{
				  			case 0:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8001496:	483e      	ldr	r0, [pc, #248]	; (8001590 <gsm_init+0x5a0>)
 8001498:	f000 fa9c 	bl	80019d4 <send_to_gsm>
 800149c:	4603      	mov	r3, r0
 800149e:	4a30      	ldr	r2, [pc, #192]	; (8001560 <gsm_init+0x570>)
 80014a0:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1 jio\n");
 80014a2:	483c      	ldr	r0, [pc, #240]	; (8001594 <gsm_init+0x5a4>)
 80014a4:	f007 faec 	bl	8008a80 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <gsm_init+0x570>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2206      	movs	r2, #6
 80014ae:	493a      	ldr	r1, [pc, #232]	; (8001598 <gsm_init+0x5a8>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fc1b 	bl	8008cec <strncmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10a      	bne.n	80014d2 <gsm_init+0x4e2>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4830      	ldr	r0, [pc, #192]	; (8001584 <gsm_init+0x594>)
 80014c4:	f007 fa76 	bl	80089b4 <iprintf>
				  					state=8;
 80014c8:	2308      	movs	r3, #8
 80014ca:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  				break;
 80014d0:	e033      	b.n	800153a <gsm_init+0x54a>
				  					printf("state = %d substate = %d \n",state,substate);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	7bba      	ldrb	r2, [r7, #14]
 80014d6:	4619      	mov	r1, r3
 80014d8:	482a      	ldr	r0, [pc, #168]	; (8001584 <gsm_init+0x594>)
 80014da:	f007 fa6b 	bl	80089b4 <iprintf>
				  					state=6;
 80014de:	2306      	movs	r3, #6
 80014e0:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73bb      	strb	r3, [r7, #14]
				  				break;
 80014e6:	e028      	b.n	800153a <gsm_init+0x54a>
				  			case 1:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 80014e8:	482c      	ldr	r0, [pc, #176]	; (800159c <gsm_init+0x5ac>)
 80014ea:	f000 fa73 	bl	80019d4 <send_to_gsm>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <gsm_init+0x570>)
 80014f2:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1 airtel\n");
 80014f4:	482a      	ldr	r0, [pc, #168]	; (80015a0 <gsm_init+0x5b0>)
 80014f6:	f007 fac3 	bl	8008a80 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <gsm_init+0x570>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2206      	movs	r2, #6
 8001500:	4925      	ldr	r1, [pc, #148]	; (8001598 <gsm_init+0x5a8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f007 fbf2 	bl	8008cec <strncmp>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10a      	bne.n	8001524 <gsm_init+0x534>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	7bba      	ldrb	r2, [r7, #14]
 8001512:	4619      	mov	r1, r3
 8001514:	481b      	ldr	r0, [pc, #108]	; (8001584 <gsm_init+0x594>)
 8001516:	f007 fa4d 	bl	80089b4 <iprintf>
				  					state=8;
 800151a:	2308      	movs	r3, #8
 800151c:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800151e:	2300      	movs	r3, #0
 8001520:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 8001522:	e009      	b.n	8001538 <gsm_init+0x548>
				  					printf("state = %d substate = %d \n",state,substate);
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	7bba      	ldrb	r2, [r7, #14]
 8001528:	4619      	mov	r1, r3
 800152a:	4816      	ldr	r0, [pc, #88]	; (8001584 <gsm_init+0x594>)
 800152c:	f007 fa42 	bl	80089b4 <iprintf>
				  					state=0;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001534:	2300      	movs	r3, #0
 8001536:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001538:	bf00      	nop
				  			}

				  			break;
 800153a:	e004      	b.n	8001546 <gsm_init+0x556>

				  		}


				  		default:
				  			printf("completed work \n");
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <gsm_init+0x5b4>)
 800153e:	f007 fa9f 	bl	8008a80 <puts>
				  			return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e006      	b.n	8001554 <gsm_init+0x564>
	while(count--)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	60ba      	str	r2, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f ad59 	bne.w	8001004 <gsm_init+0x14>
			  	  }
	}
	return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0800cd7c 	.word	0x0800cd7c
 8001560:	200002cc 	.word	0x200002cc
 8001564:	0800cd64 	.word	0x0800cd64
 8001568:	0800cd88 	.word	0x0800cd88
 800156c:	0800cd70 	.word	0x0800cd70
 8001570:	0800cd8c 	.word	0x0800cd8c
 8001574:	0800cd28 	.word	0x0800cd28
 8001578:	0800cd98 	.word	0x0800cd98
 800157c:	0800cda4 	.word	0x0800cda4
 8001580:	0800cdac 	.word	0x0800cdac
 8001584:	0800cc90 	.word	0x0800cc90
 8001588:	0800cdb4 	.word	0x0800cdb4
 800158c:	0800cdbc 	.word	0x0800cdbc
 8001590:	0800cdc4 	.word	0x0800cdc4
 8001594:	0800cde0 	.word	0x0800cde0
 8001598:	0800cc88 	.word	0x0800cc88
 800159c:	0800cdf0 	.word	0x0800cdf0
 80015a0:	0800ce14 	.word	0x0800ce14
 80015a4:	0800ce28 	.word	0x0800ce28

080015a8 <check_server_connection>:
int check_server_connection()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
	int state=0,substate=0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
	int time_out=30;
 80015b6:	231e      	movs	r3, #30
 80015b8:	607b      	str	r3, [r7, #4]
	while(time_out)
 80015ba:	e02d      	b.n	8001618 <check_server_connection+0x70>
	{
		switch(state)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <check_server_connection+0x22>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d014      	beq.n	80015f2 <check_server_connection+0x4a>
 80015c8:	e026      	b.n	8001618 <check_server_connection+0x70>
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN?\r");
 80015ca:	4817      	ldr	r0, [pc, #92]	; (8001628 <check_server_connection+0x80>)
 80015cc:	f000 fa02 	bl	80019d4 <send_to_gsm>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <check_server_connection+0x84>)
 80015d4:	6013      	str	r3, [r2, #0]
			if(strstr(str,"ERROR")!=NULL)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <check_server_connection+0x84>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4915      	ldr	r1, [pc, #84]	; (8001630 <check_server_connection+0x88>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 fb97 	bl	8008d10 <strstr>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <check_server_connection+0x46>
			{
				state=0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e001      	b.n	80015f2 <check_server_connection+0x4a>
			}
			else
			{
				substate=1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
			}
		case 1:
			if(strstr(str,"139.59.78.252")!=NULL)
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <check_server_connection+0x84>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	490f      	ldr	r1, [pc, #60]	; (8001634 <check_server_connection+0x8c>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f007 fb89 	bl	8008d10 <strstr>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <check_server_connection+0x66>
			{
				printf("tcp connection established\n");
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <check_server_connection+0x90>)
 8001606:	f007 fa3b 	bl	8008a80 <puts>
				return 0;
 800160a:	2300      	movs	r3, #0
 800160c:	e008      	b.n	8001620 <check_server_connection+0x78>
			}
			else
			{
				printf("tcp connection NOT established\n");
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <check_server_connection+0x94>)
 8001610:	f007 fa36 	bl	8008a80 <puts>
				return 1;
 8001614:	2301      	movs	r3, #1
 8001616:	e003      	b.n	8001620 <check_server_connection+0x78>
	while(time_out)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ce      	bne.n	80015bc <check_server_connection+0x14>
			}

		}
	}
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800ce38 	.word	0x0800ce38
 800162c:	200002cc 	.word	0x200002cc
 8001630:	0800cdbc 	.word	0x0800cdbc
 8001634:	0800ce48 	.word	0x0800ce48
 8001638:	0800ce58 	.word	0x0800ce58
 800163c:	0800ce74 	.word	0x0800ce74

08001640 <check_signal>:


}

int check_signal(char *str)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 800164c:	e04b      	b.n	80016e6 <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3b01      	subs	r3, #1
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b20      	cmp	r3, #32
 800165a:	d120      	bne.n	800169e <check_signal+0x5e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b02      	subs	r3, #2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b3a      	cmp	r3, #58	; 0x3a
 8001668:	d119      	bne.n	800169e <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b2f      	cmp	r3, #47	; 0x2f
 8001674:	d805      	bhi.n	8001682 <check_signal+0x42>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b39      	cmp	r3, #57	; 0x39
 8001680:	d80d      	bhi.n	800169e <check_signal+0x5e>
		{
			rssi=str+i;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4833      	ldr	r0, [pc, #204]	; (8001768 <check_signal+0x128>)
 800169a:	f007 f98b 	bl	80089b4 <iprintf>
		}
	    }
	    if(str[i-1]==',')
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b2c      	cmp	r3, #44	; 0x2c
 80016aa:	d119      	bne.n	80016e0 <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b2f      	cmp	r3, #47	; 0x2f
 80016b6:	d805      	bhi.n	80016c4 <check_signal+0x84>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b39      	cmp	r3, #57	; 0x39
 80016c2:	d80d      	bhi.n	80016e0 <check_signal+0xa0>
		        {
		        	ber=str+i;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3301      	adds	r3, #1
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4824      	ldr	r0, [pc, #144]	; (800176c <check_signal+0x12c>)
 80016dc:	f007 f96a 	bl	80089b4 <iprintf>
	        	}

	    }
		i++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ad      	bne.n	800164e <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	481b      	ldr	r0, [pc, #108]	; (8001770 <check_signal+0x130>)
 8001702:	f007 f957 	bl	80089b4 <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4817      	ldr	r0, [pc, #92]	; (8001774 <check_signal+0x134>)
 8001716:	f007 f94d 	bl	80089b4 <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b39      	cmp	r3, #57	; 0x39
 8001720:	d11d      	bne.n	800175e <check_signal+0x11e>
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	3301      	adds	r3, #1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b39      	cmp	r3, #57	; 0x39
 800172a:	d118      	bne.n	800175e <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b31      	cmp	r3, #49	; 0x31
 8001732:	d803      	bhi.n	800173c <check_signal+0xfc>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b38      	cmp	r3, #56	; 0x38
 800173a:	d80e      	bhi.n	800175a <check_signal+0x11a>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b2f      	cmp	r3, #47	; 0x2f
 8001744:	d804      	bhi.n	8001750 <check_signal+0x110>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b39      	cmp	r3, #57	; 0x39
 800174e:	d804      	bhi.n	800175a <check_signal+0x11a>
	    {
	    printf("ok");
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <check_signal+0x138>)
 8001752:	f007 f92f 	bl	80089b4 <iprintf>
	    return 0;
 8001756:	2300      	movs	r3, #0
 8001758:	e002      	b.n	8001760 <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 800175e:	2301      	movs	r3, #1
	}
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	0800cea4 	.word	0x0800cea4
 800176c:	0800ceb0 	.word	0x0800ceb0
 8001770:	0800cebc 	.word	0x0800cebc
 8001774:	0800cecc 	.word	0x0800cecc
 8001778:	0800cedc 	.word	0x0800cedc

0800177c <connect_tcp_server>:

int connect_tcp_server()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
	int state=0;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
	int substate=0;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
	int count=10;
 800178a:	230a      	movs	r3, #10
 800178c:	607b      	str	r3, [r7, #4]
	while(count--)
 800178e:	e0f3      	b.n	8001978 <connect_tcp_server+0x1fc>
	{
	switch(state)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b02      	cmp	r3, #2
 8001794:	f000 8086 	beq.w	80018a4 <connect_tcp_server+0x128>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b02      	cmp	r3, #2
 800179c:	f300 80e7 	bgt.w	800196e <connect_tcp_server+0x1f2>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <connect_tcp_server+0x32>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d036      	beq.n	800181a <connect_tcp_server+0x9e>
 80017ac:	e0df      	b.n	800196e <connect_tcp_server+0x1f2>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <connect_tcp_server+0x40>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d017      	beq.n	80017ea <connect_tcp_server+0x6e>
 80017ba:	e0dd      	b.n	8001978 <connect_tcp_server+0x1fc>
	case 0:
	{
		switch(substate)
		{
		case 0:
			str=send_to_gsm("AT+CIPMODE?\r\n");
 80017bc:	4875      	ldr	r0, [pc, #468]	; (8001994 <connect_tcp_server+0x218>)
 80017be:	f000 f909 	bl	80019d4 <send_to_gsm>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a74      	ldr	r2, [pc, #464]	; (8001998 <connect_tcp_server+0x21c>)
 80017c6:	6013      	str	r3, [r2, #0]
			if(strstr(str,"+CIPMODE: 0"))
 80017c8:	4b73      	ldr	r3, [pc, #460]	; (8001998 <connect_tcp_server+0x21c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4973      	ldr	r1, [pc, #460]	; (800199c <connect_tcp_server+0x220>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fa9e 	bl	8008d10 <strstr>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d004      	beq.n	80017e4 <connect_tcp_server+0x68>
			{
				state=1;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
				substate=0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=1;
			}
			break;
 80017e2:	e019      	b.n	8001818 <connect_tcp_server+0x9c>
				substate=1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
			break;
 80017e8:	e016      	b.n	8001818 <connect_tcp_server+0x9c>
		case 1:
			str=send_to_gsm("AT+CIPMODE=0\r\n");
 80017ea:	486d      	ldr	r0, [pc, #436]	; (80019a0 <connect_tcp_server+0x224>)
 80017ec:	f000 f8f2 	bl	80019d4 <send_to_gsm>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a69      	ldr	r2, [pc, #420]	; (8001998 <connect_tcp_server+0x21c>)
 80017f4:	6013      	str	r3, [r2, #0]
			if(strstr(str,"OK"))
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <connect_tcp_server+0x21c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	496a      	ldr	r1, [pc, #424]	; (80019a4 <connect_tcp_server+0x228>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fa87 	bl	8008d10 <strstr>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <connect_tcp_server+0x96>
			{
				state=0;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
				substate=0;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=0;
			}
			break;
 8001810:	e001      	b.n	8001816 <connect_tcp_server+0x9a>
				substate=0;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
			break;
 8001816:	bf00      	nop
		}
		break;
 8001818:	e0ae      	b.n	8001978 <connect_tcp_server+0x1fc>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <connect_tcp_server+0xac>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d025      	beq.n	8001872 <connect_tcp_server+0xf6>
 8001826:	e0a7      	b.n	8001978 <connect_tcp_server+0x1fc>
	case 1:
	{
		switch(substate)
		{
		case 0:
			str = send_to_gsm("AT+NETOPEN\r\n");
 8001828:	485f      	ldr	r0, [pc, #380]	; (80019a8 <connect_tcp_server+0x22c>)
 800182a:	f000 f8d3 	bl	80019d4 <send_to_gsm>
 800182e:	4603      	mov	r3, r0
 8001830:	4a59      	ldr	r2, [pc, #356]	; (8001998 <connect_tcp_server+0x21c>)
 8001832:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("NETOPEN\n");
 8001834:	485d      	ldr	r0, [pc, #372]	; (80019ac <connect_tcp_server+0x230>)
 8001836:	f007 f923 	bl	8008a80 <puts>
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 800183a:	4b57      	ldr	r3, [pc, #348]	; (8001998 <connect_tcp_server+0x21c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2206      	movs	r2, #6
 8001840:	495b      	ldr	r1, [pc, #364]	; (80019b0 <connect_tcp_server+0x234>)
 8001842:	4618      	mov	r0, r3
 8001844:	f007 fa52 	bl	8008cec <strncmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <connect_tcp_server+0xe6>
			{
				printf("state = %d substate = %d \n",state,substate);
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4858      	ldr	r0, [pc, #352]	; (80019b4 <connect_tcp_server+0x238>)
 8001854:	f007 f8ae 	bl	80089b4 <iprintf>
				state=2;
 8001858:	2302      	movs	r3, #2
 800185a:	60fb      	str	r3, [r7, #12]
				substate=0;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
			else
			{
				printf("state = %d substate = %d \n",state,substate);
				substate=1;
			}
			break;
 8001860:	e01f      	b.n	80018a2 <connect_tcp_server+0x126>
				printf("state = %d substate = %d \n",state,substate);
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	4853      	ldr	r0, [pc, #332]	; (80019b4 <connect_tcp_server+0x238>)
 8001868:	f007 f8a4 	bl	80089b4 <iprintf>
				substate=1;
 800186c:	2301      	movs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
			break;
 8001870:	e017      	b.n	80018a2 <connect_tcp_server+0x126>
		case 1:
			if((strstr(str,"Network is already opened")!=NULL))
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <connect_tcp_server+0x21c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4950      	ldr	r1, [pc, #320]	; (80019b8 <connect_tcp_server+0x23c>)
 8001878:	4618      	mov	r0, r3
 800187a:	f007 fa49 	bl	8008d10 <strstr>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <connect_tcp_server+0x11c>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	68f9      	ldr	r1, [r7, #12]
 8001888:	484a      	ldr	r0, [pc, #296]	; (80019b4 <connect_tcp_server+0x238>)
 800188a:	f007 f893 	bl	80089b4 <iprintf>
				state=2;
 800188e:	2302      	movs	r3, #2
 8001890:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
			else
			{
				state=0;
				substate=0;
			}
			break;
 8001896:	e003      	b.n	80018a0 <connect_tcp_server+0x124>
				state=0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
				substate=0;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
			break;
 80018a0:	bf00      	nop

		}
		break;
 80018a2:	e069      	b.n	8001978 <connect_tcp_server+0x1fc>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d044      	beq.n	8001934 <connect_tcp_server+0x1b8>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	dc63      	bgt.n	8001978 <connect_tcp_server+0x1fc>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <connect_tcp_server+0x142>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d024      	beq.n	8001906 <connect_tcp_server+0x18a>
 80018bc:	e05c      	b.n	8001978 <connect_tcp_server+0x1fc>
	case 2:
	{
		switch(substate)
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",52102\r");
 80018be:	483f      	ldr	r0, [pc, #252]	; (80019bc <connect_tcp_server+0x240>)
 80018c0:	f000 f888 	bl	80019d4 <send_to_gsm>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <connect_tcp_server+0x21c>)
 80018c8:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("CIPOPEN\n");
 80018ca:	483d      	ldr	r0, [pc, #244]	; (80019c0 <connect_tcp_server+0x244>)
 80018cc:	f007 f8d8 	bl	8008a80 <puts>
			if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <connect_tcp_server+0x21c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	493b      	ldr	r1, [pc, #236]	; (80019c4 <connect_tcp_server+0x248>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f007 fa1a 	bl	8008d10 <strstr>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <connect_tcp_server+0x17a>
				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
			{
				printf("state = %d substate = %d \n",state,substate);
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	4833      	ldr	r0, [pc, #204]	; (80019b4 <connect_tcp_server+0x238>)
 80018e8:	f007 f864 	bl	80089b4 <iprintf>
				state=3;
 80018ec:	2303      	movs	r3, #3
 80018ee:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=1;
			}
			break;
 80018f4:	e03a      	b.n	800196c <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	482e      	ldr	r0, [pc, #184]	; (80019b4 <connect_tcp_server+0x238>)
 80018fc:	f007 f85a 	bl	80089b4 <iprintf>
				substate=1;
 8001900:	2301      	movs	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
			break;
 8001904:	e032      	b.n	800196c <connect_tcp_server+0x1f0>
		case 1:
			if(check_server_connection()==0)
 8001906:	f7ff fe4f 	bl	80015a8 <check_server_connection>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <connect_tcp_server+0x1a8>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	68f9      	ldr	r1, [r7, #12]
 8001914:	4827      	ldr	r0, [pc, #156]	; (80019b4 <connect_tcp_server+0x238>)
 8001916:	f007 f84d 	bl	80089b4 <iprintf>
				state=3;
 800191a:	2303      	movs	r3, #3
 800191c:	60fb      	str	r3, [r7, #12]
				substate=0;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=2;
			}
			break;
 8001922:	e023      	b.n	800196c <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <connect_tcp_server+0x238>)
 800192a:	f007 f843 	bl	80089b4 <iprintf>
				substate=2;
 800192e:	2302      	movs	r3, #2
 8001930:	60bb      	str	r3, [r7, #8]
			break;
 8001932:	e01b      	b.n	800196c <connect_tcp_server+0x1f0>
		case 2:
			//if((strstr(str,"ERROR")!=NULL))
			if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <connect_tcp_server+0x21c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2206      	movs	r2, #6
 800193a:	4923      	ldr	r1, [pc, #140]	; (80019c8 <connect_tcp_server+0x24c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f007 f9d5 	bl	8008cec <strncmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <connect_tcp_server+0x1dc>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <connect_tcp_server+0x238>)
 800194e:	f007 f831 	bl	80089b4 <iprintf>
				//state=3;
				substate=0;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				state=0;
				substate=0;
			}
			break;
 8001956:	e008      	b.n	800196a <connect_tcp_server+0x1ee>
				printf("state = %d substate = %d \n",state,substate);
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	4815      	ldr	r0, [pc, #84]	; (80019b4 <connect_tcp_server+0x238>)
 800195e:	f007 f829 	bl	80089b4 <iprintf>
				state=0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
			break;
 800196a:	bf00      	nop


		}
		break;
 800196c:	e004      	b.n	8001978 <connect_tcp_server+0x1fc>
	}
	default:
		printf("opened successfulyy\n");
 800196e:	4817      	ldr	r0, [pc, #92]	; (80019cc <connect_tcp_server+0x250>)
 8001970:	f007 f886 	bl	8008a80 <puts>
		return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e009      	b.n	800198c <connect_tcp_server+0x210>
	while(count--)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f47f af06 	bne.w	8001790 <connect_tcp_server+0x14>
	}
}
	printf("Time out\n");
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <connect_tcp_server+0x254>)
 8001986:	f007 f87b 	bl	8008a80 <puts>

	return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	0800cee0 	.word	0x0800cee0
 8001998:	200002cc 	.word	0x200002cc
 800199c:	0800cef0 	.word	0x0800cef0
 80019a0:	0800cefc 	.word	0x0800cefc
 80019a4:	0800cd28 	.word	0x0800cd28
 80019a8:	0800cf0c 	.word	0x0800cf0c
 80019ac:	0800cf1c 	.word	0x0800cf1c
 80019b0:	0800cc88 	.word	0x0800cc88
 80019b4:	0800cc90 	.word	0x0800cc90
 80019b8:	0800cf24 	.word	0x0800cf24
 80019bc:	0800cf40 	.word	0x0800cf40
 80019c0:	0800cf6c 	.word	0x0800cf6c
 80019c4:	0800cf74 	.word	0x0800cf74
 80019c8:	0800ccb8 	.word	0x0800ccb8
 80019cc:	0800cf84 	.word	0x0800cf84
 80019d0:	0800cf98 	.word	0x0800cf98

080019d4 <send_to_gsm>:
	return -1;
}


char *send_to_gsm(char * command)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 80019dc:	22c8      	movs	r2, #200	; 0xc8
 80019de:	2100      	movs	r1, #0
 80019e0:	480f      	ldr	r0, [pc, #60]	; (8001a20 <send_to_gsm+0x4c>)
 80019e2:	f007 f97b 	bl	8008cdc <memset>
	 printf("tx start\n");
 80019e6:	480f      	ldr	r0, [pc, #60]	; (8001a24 <send_to_gsm+0x50>)
 80019e8:	f007 f84a 	bl	8008a80 <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fc3f 	bl	8000270 <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <send_to_gsm+0x54>)
 80019fc:	f004 fcd6 	bl	80063ac <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8001a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a04:	22c8      	movs	r2, #200	; 0xc8
 8001a06:	4906      	ldr	r1, [pc, #24]	; (8001a20 <send_to_gsm+0x4c>)
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <send_to_gsm+0x54>)
 8001a0a:	f004 fbfd 	bl	8006208 <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8001a0e:	4904      	ldr	r1, [pc, #16]	; (8001a20 <send_to_gsm+0x4c>)
 8001a10:	4806      	ldr	r0, [pc, #24]	; (8001a2c <send_to_gsm+0x58>)
 8001a12:	f006 ffcf 	bl	80089b4 <iprintf>
	 return (char *)rx;
 8001a16:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <send_to_gsm+0x4c>)
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000204 	.word	0x20000204
 8001a24:	0800cfd4 	.word	0x0800cfd4
 8001a28:	20000334 	.word	0x20000334
 8001a2c:	0800cfe0 	.word	0x0800cfe0

08001a30 <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
		char buf[20];
		memset(buf,'\0',sizeof(buf));
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2214      	movs	r2, #20
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 f94a 	bl	8008cdc <memset>
		sprintf(buf, "AT+CIPSEND=0,%d\r", strlen(mes));
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fc11 	bl	8000270 <strlen>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	4922      	ldr	r1, [pc, #136]	; (8001ae0 <send_mesg_to_server+0xb0>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f007 f81a 	bl	8008a90 <siprintf>
		memset(rx,'\0',sizeof(rx));
 8001a5c:	22c8      	movs	r2, #200	; 0xc8
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001a62:	f007 f93b 	bl	8008cdc <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)buf,16);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481e      	ldr	r0, [pc, #120]	; (8001ae8 <send_mesg_to_server+0xb8>)
 8001a70:	f004 fc9c 	bl	80063ac <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001a74:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a78:	22c8      	movs	r2, #200	; 0xc8
 8001a7a:	491a      	ldr	r1, [pc, #104]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001a7c:	481a      	ldr	r0, [pc, #104]	; (8001ae8 <send_mesg_to_server+0xb8>)
 8001a7e:	f004 fbc3 	bl	8006208 <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001a82:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001a84:	4819      	ldr	r0, [pc, #100]	; (8001aec <send_mesg_to_server+0xbc>)
 8001a86:	f006 ff95 	bl	80089b4 <iprintf>
		memset(rx,'\0',sizeof(rx));
 8001a8a:	22c8      	movs	r2, #200	; 0xc8
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001a90:	f007 f924 	bl	8008cdc <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)mes,size);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <send_mesg_to_server+0xb8>)
 8001a9e:	f004 fc85 	bl	80063ac <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001aa2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001aa6:	22c8      	movs	r2, #200	; 0xc8
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001aaa:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <send_mesg_to_server+0xb8>)
 8001aac:	f004 fbac 	bl	8006208 <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <send_mesg_to_server+0xbc>)
 8001ab4:	f006 ff7e 	bl	80089b4 <iprintf>
		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 8001ab8:	490d      	ldr	r1, [pc, #52]	; (8001af0 <send_mesg_to_server+0xc0>)
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <send_mesg_to_server+0xb4>)
 8001abc:	f007 f928 	bl	8008d10 <strstr>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <send_mesg_to_server+0xa0>
		{
			printf("mesg send successfully\n");
 8001ac6:	480b      	ldr	r0, [pc, #44]	; (8001af4 <send_mesg_to_server+0xc4>)
 8001ac8:	f006 ffda 	bl	8008a80 <puts>
			return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e003      	b.n	8001ad8 <send_mesg_to_server+0xa8>
		}
		else
		{
			printf("mesg NOT send\n");
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <send_mesg_to_server+0xc8>)
 8001ad2:	f006 ffd5 	bl	8008a80 <puts>
			return 1;
 8001ad6:	2301      	movs	r3, #1
		}
	return 1;
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800cfec 	.word	0x0800cfec
 8001ae4:	20000204 	.word	0x20000204
 8001ae8:	20000334 	.word	0x20000334
 8001aec:	0800d000 	.word	0x0800d000
 8001af0:	0800cc88 	.word	0x0800cc88
 8001af4:	0800d014 	.word	0x0800d014
 8001af8:	0800d02c 	.word	0x0800d02c

08001afc <W25Q_Delay>:

#define numBLOCK 32  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes
//#define numBLOCK 64
void W25Q_Delay(uint32_t time)

{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

	HAL_Delay(time);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 fd8b 	bl	8003620 <HAL_Delay>

}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <csLOW>:

void csLOW (void)

{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2110      	movs	r1, #16
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f002 f8dd 	bl	8003cdc <HAL_GPIO_WritePin>

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <csHIGH>:

void csHIGH (void)

{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f002 f8d3 	bl	8003cdc <HAL_GPIO_WritePin>

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)

{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <SPI_Write+0x24>)
 8001b54:	f003 fc9d 	bl	8005492 <HAL_SPI_Transmit>

}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200002d0 	.word	0x200002d0

08001b64 <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)

{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]

	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4803      	ldr	r0, [pc, #12]	; (8001b88 <SPI_Read+0x24>)
 8001b7a:	f003 fdf8 	bl	800576e <HAL_SPI_Receive>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002d0 	.word	0x200002d0

08001b8c <W25Q_Reset>:

/**************************************************************************************************/

void W25Q_Reset (void)

{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

	uint8_t tData[2];

	tData[0] = 0x66;  // enable Reset
 8001b92:	2366      	movs	r3, #102	; 0x66
 8001b94:	713b      	strb	r3, [r7, #4]

	tData[1] = 0x99;  // Reset
 8001b96:	2399      	movs	r3, #153	; 0x99
 8001b98:	717b      	strb	r3, [r7, #5]

	csLOW();
 8001b9a:	f7ff ffba 	bl	8001b12 <csLOW>

	SPI_Write(tData, 2);
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ffca 	bl	8001b3c <SPI_Write>

	csHIGH();
 8001ba8:	f7ff ffbd 	bl	8001b26 <csHIGH>

	W25Q_Delay(100);
 8001bac:	2064      	movs	r0, #100	; 0x64
 8001bae:	f7ff ffa5 	bl	8001afc <W25Q_Delay>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <W25Q_ReadID>:

uint32_t W25Q_ReadID (void)

{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0

	uint8_t tData = 0x9F;  // Read JEDEC ID
 8001bc0:	239f      	movs	r3, #159	; 0x9f
 8001bc2:	71fb      	strb	r3, [r7, #7]

	uint8_t rData[3];

	csLOW();
 8001bc4:	f7ff ffa5 	bl	8001b12 <csLOW>

	SPI_Write(&tData, 1);
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffb5 	bl	8001b3c <SPI_Write>

	SPI_Read(rData, 3);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffc4 	bl	8001b64 <SPI_Read>

	csHIGH();
 8001bdc:	f7ff ffa3 	bl	8001b26 <csHIGH>

	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
 8001be0:	793b      	ldrb	r3, [r7, #4]
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	797b      	ldrb	r3, [r7, #5]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	79ba      	ldrb	r2, [r7, #6]
 8001bec:	4313      	orrs	r3, r2

}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <W25Q_Read>:

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)

{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b088      	sub	sp, #32
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	460b      	mov	r3, r1
 8001c04:	72fb      	strb	r3, [r7, #11]

	uint8_t tData[5];

	uint32_t memAddr = (startPage*256) + offset;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	021a      	lsls	r2, r3, #8
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb

	{

		tData[0] = 0x03;  // enable Read
 8001c10:	2303      	movs	r3, #3
 8001c12:	753b      	strb	r3, [r7, #20]

		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	757b      	strb	r3, [r7, #21]

		tData[2] = (memAddr>>8)&0xFF;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	75bb      	strb	r3, [r7, #22]

		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	75fb      	strb	r3, [r7, #23]

		tData[4] = (memAddr)&0xFF; // LSB of the memory Address

	}

	csLOW();  // pull the CS Low
 8001c2a:	f7ff ff72 	bl	8001b12 <csLOW>

	if (numBLOCK<512)

	{

		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	2104      	movs	r1, #4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff81 	bl	8001b3c <SPI_Write>

		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address

	}

	SPI_Read(rData, size);  // Read the data
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f7ff ff91 	bl	8001b64 <SPI_Read>

	csHIGH();  // pull the CS High
 8001c42:	f7ff ff70 	bl	8001b26 <csHIGH>

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)

{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b088      	sub	sp, #32
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	72fb      	strb	r3, [r7, #11]

	uint8_t tData[6];

	uint32_t memAddr = (startPage*256) + offset;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	021a      	lsls	r2, r3, #8
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	4413      	add	r3, r2
 8001c66:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb

	{

		tData[0] = 0x0B;  // enable Fast Read
 8001c68:	230b      	movs	r3, #11
 8001c6a:	753b      	strb	r3, [r7, #20]

		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	757b      	strb	r3, [r7, #21]

		tData[2] = (memAddr>>8)&0xFF;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	75bb      	strb	r3, [r7, #22]

		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	75fb      	strb	r3, [r7, #23]

		tData[4] = 0;  // Dummy clock
 8001c82:	2300      	movs	r3, #0
 8001c84:	763b      	strb	r3, [r7, #24]

		tData[5] = 0;  // Dummy clock

	}

	csLOW();  // pull the CS Low
 8001c86:	f7ff ff44 	bl	8001b12 <csLOW>

	if (numBLOCK<512)

	{

		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2105      	movs	r1, #5
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff53 	bl	8001b3c <SPI_Write>

		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address

	}

	SPI_Read(rData, size);  // Read the data
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f7ff ff63 	bl	8001b64 <SPI_Read>

	csHIGH();  // pull the CS High
 8001c9e:	f7ff ff42 	bl	8001b26 <csHIGH>

}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <write_enable>:

void write_enable (void)

{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0

	uint8_t tData = 0x06;  // enable write
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	71fb      	strb	r3, [r7, #7]

	csLOW();
 8001cb4:	f7ff ff2d 	bl	8001b12 <csLOW>

	SPI_Write(&tData, 1);
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff3d 	bl	8001b3c <SPI_Write>

	csHIGH();
 8001cc2:	f7ff ff30 	bl	8001b26 <csHIGH>

	W25Q_Delay(5);  // 5ms delay
 8001cc6:	2005      	movs	r0, #5
 8001cc8:	f7ff ff18 	bl	8001afc <W25Q_Delay>

}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <write_disable>:

void write_disable(void)

{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0

	uint8_t tData = 0x04;  // disable write
 8001cda:	2304      	movs	r3, #4
 8001cdc:	71fb      	strb	r3, [r7, #7]

	csLOW();
 8001cde:	f7ff ff18 	bl	8001b12 <csLOW>

	SPI_Write(&tData, 1);
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff28 	bl	8001b3c <SPI_Write>

	csHIGH();
 8001cec:	f7ff ff1b 	bl	8001b26 <csHIGH>

	W25Q_Delay(5);  // 5ms delay
 8001cf0:	2005      	movs	r0, #5
 8001cf2:	f7ff ff03 	bl	8001afc <W25Q_Delay>

}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)

{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	807b      	strh	r3, [r7, #2]

	if ((size+offset)<256) return size;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	2bff      	cmp	r3, #255	; 0xff
 8001d12:	d801      	bhi.n	8001d18 <bytestowrite+0x1a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	e002      	b.n	8001d1e <bytestowrite+0x20>

	else return 256-offset;
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100

}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)

{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]

	if ((size+offset)<4096) return size;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d40:	d201      	bcs.n	8001d46 <bytestomodify+0x1c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	e002      	b.n	8001d4c <bytestomodify+0x22>

	else return 4096-offset;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000

}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)

{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]

	uint8_t tData[6];

	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	031b      	lsls	r3, r3, #12
 8001d66:	617b      	str	r3, [r7, #20]

	write_enable();
 8001d68:	f7ff ff9f 	bl	8001caa <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb

	{

		tData[0] = 0x20;  // Erase sector
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	733b      	strb	r3, [r7, #12]

		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	737b      	strb	r3, [r7, #13]

		tData[2] = (memAddr>>8)&0xFF;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	73bb      	strb	r3, [r7, #14]

		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8001d86:	f7ff fec4 	bl	8001b12 <csLOW>

		SPI_Write(tData, 4);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fed3 	bl	8001b3c <SPI_Write>

		csHIGH();
 8001d96:	f7ff fec6 	bl	8001b26 <csHIGH>

		csHIGH();  // pull the HIGH

	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 8001d9a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001d9e:	f7ff fead 	bl	8001afc <W25Q_Delay>

	write_disable();
 8001da2:	f7ff ff97 	bl	8001cd4 <write_disable>

}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)

{
 8001dae:	b590      	push	{r4, r7, lr}
 8001db0:	b0d3      	sub	sp, #332	; 0x14c
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8001db8:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8001dbc:	6020      	str	r0, [r4, #0]
 8001dbe:	4608      	mov	r0, r1
 8001dc0:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001dc4:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8001dc8:	600a      	str	r2, [r1, #0]
 8001dca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001dce:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001dd8:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001ddc:	4602      	mov	r2, r0
 8001dde:	801a      	strh	r2, [r3, #0]

	uint8_t tData[266];

	uint32_t startPage = page;
 8001de0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001de4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8001dee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001df2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001dfc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	3b01      	subs	r3, #1
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t numPages = endPage-startPage+1;
 8001e12:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e16:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint16_t startSector  = startPage/16;
 8001e22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	uint16_t endSector  = endPage/16;
 8001e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

	uint16_t numSectors = endSector-startSector+1;
 8001e36:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8001e3a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

	for (uint16_t i=0; i<numSectors; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8001e4e:	e00c      	b.n	8001e6a <W25Q_Write_Clean+0xbc>

	{

		W25Q_Erase_Sector(startSector++);
 8001e50:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	f8a7 2142 	strh.w	r2, [r7, #322]	; 0x142
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff7c 	bl	8001d58 <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 8001e60:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 8001e64:	3301      	adds	r3, #1
 8001e66:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8001e6a:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8001e6e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3ec      	bcc.n	8001e50 <W25Q_Write_Clean+0xa2>

	}

	uint32_t dataPosition = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// write the data

	for (uint32_t i=0; i<numPages; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001e82:	e0c0      	b.n	8002006 <W25Q_Write_Clean+0x258>

	{

		uint32_t memAddr = (startPage*256)+offset;
 8001e84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e8e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		uint16_t bytesremaining  = bytestowrite(size, offset);
 8001e9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e9e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ea8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eac:	4611      	mov	r1, r2
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f7ff ff25 	bl	8001cfe <bytestowrite>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

		uint32_t indx = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		write_enable();
 8001ec0:	f7ff fef3 	bl	8001caa <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb

		{

			tData[0] = 0x02;  // page program
 8001ec4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ec8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]

			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001ed0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001edc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ee0:	705a      	strb	r2, [r3, #1]

			tData[2] = (memAddr>>8)&0xFF;
 8001ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001eee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ef2:	709a      	strb	r2, [r3, #2]

			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001efe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f02:	70da      	strb	r2, [r3, #3]

			indx = 4;
 8001f04:	2304      	movs	r3, #4
 8001f06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

			indx = 5;

		}

		uint16_t bytestosend  = bytesremaining + indx;
 8001f0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001f14:	4413      	add	r3, r2
 8001f16:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8001f20:	e01a      	b.n	8001f58 <W25Q_Write_Clean+0x1aa>

		{

			tData[indx++] = data[i+dataPosition];
 8001f22:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8001f26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f30:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	441a      	add	r2, r3
 8001f38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f3c:	1c59      	adds	r1, r3, #1
 8001f3e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8001f42:	7811      	ldrb	r1, [r2, #0]
 8001f44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f48:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001f4c:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 8001f4e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8001f52:	3301      	adds	r3, #1
 8001f54:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8001f58:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8001f5c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3de      	bcc.n	8001f22 <W25Q_Write_Clean+0x174>

		}

		if (bytestosend > 250)
 8001f64:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8001f68:	2bfa      	cmp	r3, #250	; 0xfa
 8001f6a:	d916      	bls.n	8001f9a <W25Q_Write_Clean+0x1ec>

		{

			csLOW();
 8001f6c:	f7ff fdd1 	bl	8001b12 <csLOW>

			SPI_Write(tData, 100);
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	2164      	movs	r1, #100	; 0x64
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fde0 	bl	8001b3c <SPI_Write>

			SPI_Write(tData+100, bytestosend-100);
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	3364      	adds	r3, #100	; 0x64
 8001f82:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	3a64      	subs	r2, #100	; 0x64
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fdd4 	bl	8001b3c <SPI_Write>

			csHIGH();
 8001f94:	f7ff fdc7 	bl	8001b26 <csHIGH>
 8001f98:	e00c      	b.n	8001fb4 <W25Q_Write_Clean+0x206>

		else

		{

			csLOW();
 8001f9a:	f7ff fdba 	bl	8001b12 <csLOW>

			SPI_Write(tData, bytestosend);
 8001f9e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fdc6 	bl	8001b3c <SPI_Write>

			csHIGH();
 8001fb0:	f7ff fdb9 	bl	8001b26 <csHIGH>

		}


		startPage++;
 8001fb4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

		offset = 0;
 8001fbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001fc2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]

		size = size-bytesremaining;
 8001fca:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8001fce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001fd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fd6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001fda:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8001fde:	6809      	ldr	r1, [r1, #0]
 8001fe0:	1a8a      	subs	r2, r1, r2
 8001fe2:	601a      	str	r2, [r3, #0]

		dataPosition = dataPosition+bytesremaining;
 8001fe4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001fe8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001fec:	4413      	add	r3, r2
 8001fee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		W25Q_Delay(5);
 8001ff2:	2005      	movs	r0, #5
 8001ff4:	f7ff fd82 	bl	8001afc <W25Q_Delay>

		write_disable();
 8001ff8:	f7ff fe6c 	bl	8001cd4 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 8001ffc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002000:	3301      	adds	r3, #1
 8002002:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002006:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800200a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800200e:	429a      	cmp	r2, r3
 8002010:	f4ff af38 	bcc.w	8001e84 <W25Q_Write_Clean+0xd6>

	}

}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}

08002020 <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)

{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800202e:	f844 0c24 	str.w	r0, [r4, #-36]
 8002032:	4608      	mov	r0, r1
 8002034:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002038:	f841 2c2c 	str.w	r2, [r1, #-44]
 800203c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002040:	f842 3c30 	str.w	r3, [r2, #-48]
 8002044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002048:	4602      	mov	r2, r0
 800204a:	f823 2c26 	strh.w	r2, [r3, #-38]

	uint16_t startSector  = page/16;
 800204e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002052:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800205c:	f102 020e 	add.w	r2, r2, #14
 8002060:	8013      	strh	r3, [r2, #0]

	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 8002062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002066:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 800206a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800206e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002072:	4413      	add	r3, r2
 8002074:	3b01      	subs	r3, #1
 8002076:	0a1a      	lsrs	r2, r3, #8
 8002078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002080:	4413      	add	r3, r2
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002088:	f102 021e 	add.w	r2, r2, #30
 800208c:	8013      	strh	r3, [r2, #0]

	uint16_t numSectors = endSector-startSector+1;
 800208e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002092:	f103 031e 	add.w	r3, r3, #30
 8002096:	881a      	ldrh	r2, [r3, #0]
 8002098:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800209c:	f103 030e 	add.w	r3, r3, #14
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80020ac:	f102 021c 	add.w	r2, r2, #28
 80020b0:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];

	uint32_t sectorOffset = ((page%16)*256)+offset;
 80020b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	021a      	lsls	r2, r3, #8
 80020c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c4:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 80020c8:	4413      	add	r3, r2
 80020ca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020ce:	f102 0208 	add.w	r2, r2, #8
 80020d2:	6013      	str	r3, [r2, #0]

	uint32_t dataindx = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020da:	f102 0204 	add.w	r2, r2, #4
 80020de:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020e6:	f102 0202 	add.w	r2, r2, #2
 80020ea:	8013      	strh	r3, [r2, #0]
 80020ec:	e0a5      	b.n	800223a <W25Q_Write+0x21a>

	{

		uint32_t startPage = startSector*16;
 80020ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80020f2:	f103 030e 	add.w	r3, r3, #14
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80020fe:	f102 0218 	add.w	r2, r2, #24
 8002102:	6013      	str	r3, [r2, #0]

		W25Q_FastRead(startPage, 0, 4096, previousData);
 8002104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002108:	3b1c      	subs	r3, #28
 800210a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800210e:	2100      	movs	r1, #0
 8002110:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8002114:	f100 0018 	add.w	r0, r0, #24
 8002118:	6800      	ldr	r0, [r0, #0]
 800211a:	f7ff fd98 	bl	8001c4e <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 800211e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002122:	f103 0308 	add.w	r3, r3, #8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800212e:	4619      	mov	r1, r3
 8002130:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8002134:	f7ff fdf9 	bl	8001d2a <bytestomodify>
 8002138:	4603      	mov	r3, r0
 800213a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800213e:	f102 0216 	add.w	r2, r2, #22
 8002142:	8013      	strh	r3, [r2, #0]

		for (uint16_t i=0; i<bytesRemaining; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800214a:	8013      	strh	r3, [r2, #0]
 800214c:	e023      	b.n	8002196 <W25Q_Write+0x176>

		{

			previousData[i+sectorOffset] = data[i+dataindx];
 800214e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002158:	f103 0304 	add.w	r3, r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002164:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8002168:	441a      	add	r2, r3
 800216a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800216e:	8819      	ldrh	r1, [r3, #0]
 8002170:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002174:	f103 0308 	add.w	r3, r3, #8
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	440b      	add	r3, r1
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002182:	440b      	add	r3, r1
 8002184:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8002188:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002194:	8013      	strh	r3, [r2, #0]
 8002196:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80021a0:	f103 0316 	add.w	r3, r3, #22
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3d1      	bcc.n	800214e <W25Q_Write+0x12e>

		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 80021aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ae:	3b1c      	subs	r3, #28
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	2100      	movs	r1, #0
 80021b6:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 80021ba:	f100 0018 	add.w	r0, r0, #24
 80021be:	6800      	ldr	r0, [r0, #0]
 80021c0:	f7ff fdf5 	bl	8001dae <W25Q_Write_Clean>

		startSector++;
 80021c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80021c8:	f103 030e 	add.w	r3, r3, #14
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80021d4:	f102 020e 	add.w	r2, r2, #14
 80021d8:	8013      	strh	r3, [r2, #0]

		sectorOffset = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80021e0:	f102 0208 	add.w	r2, r2, #8
 80021e4:	6013      	str	r3, [r2, #0]

		dataindx = dataindx+bytesRemaining;
 80021e6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80021ea:	f103 0316 	add.w	r3, r3, #22
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80021f4:	f102 0204 	add.w	r2, r2, #4
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002200:	f102 0204 	add.w	r2, r2, #4
 8002204:	6013      	str	r3, [r2, #0]

		size = size-bytesRemaining;
 8002206:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800220a:	f103 0316 	add.w	r3, r3, #22
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002214:	4611      	mov	r1, r2
 8002216:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800221a:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 8002224:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002228:	f103 0302 	add.w	r3, r3, #2
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002234:	f102 0202 	add.w	r2, r2, #2
 8002238:	8013      	strh	r3, [r2, #0]
 800223a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800223e:	f103 0302 	add.w	r3, r3, #2
 8002242:	881a      	ldrh	r2, [r3, #0]
 8002244:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002248:	f103 031c 	add.w	r3, r3, #28
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	f4ff af4d 	bcc.w	80020ee <W25Q_Write+0xce>

	}

}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
	...

08002264 <get_gps_data>:
	 {
	gps_status = gpsData(&gps);
	 }
}
int get_gps_data()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
//	memset(gps.Data,'\0',sizeof(gps.Data));
//	char b[1000];
//	memset(b,'\0',sizeof(b));
//	char Rx_buff[750];
//	HAL_UART_Receive(&huart1,(uint8_t*)gps.Data,750,5000);
	int i=HAL_UART_Receive_IT(&huart1,(uint8_t*)gps.Data,750);
 800226a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800226e:	4913      	ldr	r1, [pc, #76]	; (80022bc <get_gps_data+0x58>)
 8002270:	4813      	ldr	r0, [pc, #76]	; (80022c0 <get_gps_data+0x5c>)
 8002272:	f004 f909 	bl	8006488 <HAL_UART_Receive_IT>
 8002276:	4603      	mov	r3, r0
 8002278:	607b      	str	r3, [r7, #4]
	//strcpy(gps.Data,Rx_buff);
	//memset(Rx_buff,'\0',750);
//	HAL_Delay(5000);
		 if(i==0) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d114      	bne.n	80022aa <get_gps_data+0x46>
				printf("status : %d\n",i);
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <get_gps_data+0x60>)
 8002284:	f006 fb96 	bl	80089b4 <iprintf>
				printf("received start from MODULE\n");
 8002288:	480f      	ldr	r0, [pc, #60]	; (80022c8 <get_gps_data+0x64>)
 800228a:	f006 fbf9 	bl	8008a80 <puts>
			    printf("%s\n",gps.Data);
 800228e:	480b      	ldr	r0, [pc, #44]	; (80022bc <get_gps_data+0x58>)
 8002290:	f006 fbf6 	bl	8008a80 <puts>
			    printf("received end  from MODULE\n");
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <get_gps_data+0x68>)
 8002296:	f006 fbf3 	bl	8008a80 <puts>
			    gps_status = gpsData(&gps);
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <get_gps_data+0x6c>)
 800229c:	f000 f81e 	bl	80022dc <gpsData>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <get_gps_data+0x70>)
 80022a4:	6013      	str	r3, [r2, #0]
			    return 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e003      	b.n	80022b2 <get_gps_data+0x4e>
//		 	  		    	gps_output_flag = gpsData(&gps);
//		 	  		    	return gps_output_flag;
		  }
	else
	{
		printf("received NOT from MODULE\n");
 80022aa:	480b      	ldr	r0, [pc, #44]	; (80022d8 <get_gps_data+0x74>)
 80022ac:	f006 fbe8 	bl	8008a80 <puts>
		return 1;
 80022b0:	2301      	movs	r3, #1
	}
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200007e0 	.word	0x200007e0
 80022c0:	2000043c 	.word	0x2000043c
 80022c4:	0800d054 	.word	0x0800d054
 80022c8:	0800d064 	.word	0x0800d064
 80022cc:	0800d080 	.word	0x0800d080
 80022d0:	200007b8 	.word	0x200007b8
 80022d4:	20000004 	.word	0x20000004
 80022d8:	0800d09c 	.word	0x0800d09c

080022dc <gpsData>:

int gpsData(gpsdata* data)
{
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	6078      	str	r0, [r7, #4]
	char *current_flag;
	int counter;
	int comma = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
	printf("in func\n");
 80022e8:	4861      	ldr	r0, [pc, #388]	; (8002470 <gpsData+0x194>)
 80022ea:	f006 fbc9 	bl	8008a80 <puts>
			//HAL_UART_Receive(&GpsData->UartPort,(uint8_t*)GpsData->Data,700,HAL_MAX_DELAY);
	current_flag=strstr(data->Data,"GNGGA");
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3328      	adds	r3, #40	; 0x28
 80022f2:	4960      	ldr	r1, [pc, #384]	; (8002474 <gpsData+0x198>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f006 fd0b 	bl	8008d10 <strstr>
 80022fa:	60b8      	str	r0, [r7, #8]
	//printf("string found\n");
	if(*current_flag=='G')
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b47      	cmp	r3, #71	; 0x47
 8002302:	f040 80ac 	bne.w	800245e <gpsData+0x182>
	{
	   counter=0;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 800230a:	e00d      	b.n	8002328 <gpsData+0x4c>
	   {
		   data->particular_flag_data[counter]=*(current_flag+counter);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4413      	add	r3, r2
 8002312:	7819      	ldrb	r1, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4413      	add	r3, r2
 800231a:	f203 337a 	addw	r3, r3, #890	; 0x37a
 800231e:	460a      	mov	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
		   counter++;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b2a      	cmp	r3, #42	; 0x2a
 8002332:	d1eb      	bne.n	800230c <gpsData+0x30>
	   }
	    printf(" string is %s", data->particular_flag_data);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f203 337a 	addw	r3, r3, #890	; 0x37a
 800233a:	4619      	mov	r1, r3
 800233c:	484e      	ldr	r0, [pc, #312]	; (8002478 <gpsData+0x19c>)
 800233e:	f006 fb39 	bl	80089b4 <iprintf>
		sprintf(data->buffer,"%s",data->particular_flag_data);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f203 3016 	addw	r0, r3, #790	; 0x316
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f203 337a 	addw	r3, r3, #890	; 0x37a
 800234e:	461a      	mov	r2, r3
 8002350:	494a      	ldr	r1, [pc, #296]	; (800247c <gpsData+0x1a0>)
 8002352:	f006 fb9d 	bl	8008a90 <siprintf>
		sscanf(data->buffer,"GNGGA,%lf,%f,%c,%f,%c,%d,",&data->time,&data->latitude,&data->N_OR_S,&data->longitude,&data->E_OR_W,&data->fix);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f203 3416 	addw	r4, r3, #790	; 0x316
 800235c:	687d      	ldr	r5, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f103 0608 	add.w	r6, r3, #8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3321      	adds	r3, #33	; 0x21
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	320c      	adds	r2, #12
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	3122      	adds	r1, #34	; 0x22
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	3024      	adds	r0, #36	; 0x24
 8002374:	9003      	str	r0, [sp, #12]
 8002376:	9102      	str	r1, [sp, #8]
 8002378:	9201      	str	r2, [sp, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4633      	mov	r3, r6
 800237e:	462a      	mov	r2, r5
 8002380:	493f      	ldr	r1, [pc, #252]	; (8002480 <gpsData+0x1a4>)
 8002382:	4620      	mov	r0, r4
 8002384:	f006 fba4 	bl	8008ad0 <siscanf>
        printf("lat:%f\n",data->latitude);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f8db 	bl	8000548 <__aeabi_f2d>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	483b      	ldr	r0, [pc, #236]	; (8002484 <gpsData+0x1a8>)
 8002398:	f006 fb0c 	bl	80089b4 <iprintf>
        printf("lon:%f\n",data->longitude);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4837      	ldr	r0, [pc, #220]	; (8002488 <gpsData+0x1ac>)
 80023ac:	f006 fb02 	bl	80089b4 <iprintf>


		current_flag=strstr(data->Data,"RMC");
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3328      	adds	r3, #40	; 0x28
 80023b4:	4935      	ldr	r1, [pc, #212]	; (800248c <gpsData+0x1b0>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f006 fcaa 	bl	8008d10 <strstr>
 80023bc:	60b8      	str	r0, [r7, #8]
			//printf("string found\n");
			if(*current_flag=='R')
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b52      	cmp	r3, #82	; 0x52
 80023c4:	d132      	bne.n	800242c <gpsData+0x150>
			{
				printf("\nrmc ->%d\n",*current_flag);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4830      	ldr	r0, [pc, #192]	; (8002490 <gpsData+0x1b4>)
 80023ce:	f006 faf1 	bl	80089b4 <iprintf>
				counter=0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

				while(comma < 9) {
 80023d6:	e00e      	b.n	80023f6 <gpsData+0x11a>
					if(*(current_flag + counter) == ',')
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b2c      	cmp	r3, #44	; 0x2c
 80023e2:	d102      	bne.n	80023ea <gpsData+0x10e>
						comma++;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	3301      	adds	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
					counter++;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
					if(comma == 9)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d003      	beq.n	80023fe <gpsData+0x122>
				while(comma < 9) {
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	dded      	ble.n	80023d8 <gpsData+0xfc>
 80023fc:	e000      	b.n	8002400 <gpsData+0x124>
						break;
 80023fe:	bf00      	nop

				}

				for(int i=counter; i < counter+7; i++)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e00d      	b.n	8002422 <gpsData+0x146>
					data->Date[i-counter]= *(current_flag+i);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	441a      	add	r2, r3
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1acb      	subs	r3, r1, r3
 8002412:	7811      	ldrb	r1, [r2, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	460a      	mov	r2, r1
 800241a:	761a      	strb	r2, [r3, #24]
				for(int i=counter; i < counter+7; i++)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3306      	adds	r3, #6
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	ddec      	ble.n	8002406 <gpsData+0x12a>
			}


		if(data->fix==1||data->fix==2||data->fix==6)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b01      	cmp	r3, #1
 8002432:	d007      	beq.n	8002444 <gpsData+0x168>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2b02      	cmp	r3, #2
 800243a:	d003      	beq.n	8002444 <gpsData+0x168>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b06      	cmp	r3, #6
 8002442:	d107      	bne.n	8002454 <gpsData+0x178>
		{
			printf("valid fix\n");
 8002444:	4813      	ldr	r0, [pc, #76]	; (8002494 <gpsData+0x1b8>)
 8002446:	f006 fb1b 	bl	8008a80 <puts>
			gps_data_extraction(data);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f828 	bl	80024a0 <gps_data_extraction>
			return 0;
 8002450:	2300      	movs	r3, #0
 8002452:	e008      	b.n	8002466 <gpsData+0x18a>

		}
		else
		{
			printf("invalid signal no fix\n");
 8002454:	4810      	ldr	r0, [pc, #64]	; (8002498 <gpsData+0x1bc>)
 8002456:	f006 fb13 	bl	8008a80 <puts>
			return 1;
 800245a:	2301      	movs	r3, #1
 800245c:	e003      	b.n	8002466 <gpsData+0x18a>
		}
	 }
	else
	{
		printf("no data\n");
 800245e:	480f      	ldr	r0, [pc, #60]	; (800249c <gpsData+0x1c0>)
 8002460:	f006 fb0e 	bl	8008a80 <puts>
		return 1;
 8002464:	2301      	movs	r3, #1
	}
	return 1;
}
 8002466:	4618      	mov	r0, r3
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246e:	bf00      	nop
 8002470:	0800d0b8 	.word	0x0800d0b8
 8002474:	0800d0c0 	.word	0x0800d0c0
 8002478:	0800d0c8 	.word	0x0800d0c8
 800247c:	0800d0d8 	.word	0x0800d0d8
 8002480:	0800d0dc 	.word	0x0800d0dc
 8002484:	0800d0f8 	.word	0x0800d0f8
 8002488:	0800d100 	.word	0x0800d100
 800248c:	0800d108 	.word	0x0800d108
 8002490:	0800d10c 	.word	0x0800d10c
 8002494:	0800d118 	.word	0x0800d118
 8002498:	0800d124 	.word	0x0800d124
 800249c:	0800d13c 	.word	0x0800d13c

080024a0 <gps_data_extraction>:
void gps_data_extraction(gpsdata* data)
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b0a5      	sub	sp, #148	; 0x94
 80024a4:	af0e      	add	r7, sp, #56	; 0x38
 80024a6:	6178      	str	r0, [r7, #20]
	double Deg_Val=0.0,Min_Val=0.0,Sec_Val=0.0,lon=0.0,lat=0.0;
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int hr,min,sec;
	//int hours, minutes, seconds;

	lon=data->longitude;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f82d 	bl	8000548 <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	lat=data->latitude;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f824 	bl	8000548 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if((data->E_OR_W=='E' && data->N_OR_S=='S')||(data->E_OR_W=='W' && data->N_OR_S=='N'))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800250e:	2b45      	cmp	r3, #69	; 0x45
 8002510:	d104      	bne.n	800251c <gps_data_extraction+0x7c>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002518:	2b53      	cmp	r3, #83	; 0x53
 800251a:	d00b      	beq.n	8002534 <gps_data_extraction+0x94>
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002522:	2b57      	cmp	r3, #87	; 0x57
 8002524:	f040 8115 	bne.w	8002752 <gps_data_extraction+0x2b2>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800252e:	2b4e      	cmp	r3, #78	; 0x4e
 8002530:	f040 810f 	bne.w	8002752 <gps_data_extraction+0x2b2>
	{
		Deg_Val=(int)(lon/100);
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4bbd      	ldr	r3, [pc, #756]	; (8002830 <gps_data_extraction+0x390>)
 800253a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800253e:	f7fe f985 	bl	800084c <__aeabi_ddiv>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fb05 	bl	8000b58 <__aeabi_d2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd ffe7 	bl	8000524 <__aeabi_i2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		Min_Val=(int)(lon-(Deg_Val*100));
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4bb3      	ldr	r3, [pc, #716]	; (8002830 <gps_data_extraction+0x390>)
 8002564:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002568:	f7fe f846 	bl	80005f8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002574:	f7fd fe88 	bl	8000288 <__aeabi_dsub>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe faea 	bl	8000b58 <__aeabi_d2iz>
 8002584:	4603      	mov	r3, r0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffcc 	bl	8000524 <__aeabi_i2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		Sec_Val=((lon-(Deg_Val*100))-Min_Val)*100;
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <gps_data_extraction+0x390>)
 800259a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800259e:	f7fe f82b 	bl	80005f8 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025aa:	f7fd fe6d 	bl	8000288 <__aeabi_dsub>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ba:	f7fd fe65 	bl	8000288 <__aeabi_dsub>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b99      	ldr	r3, [pc, #612]	; (8002830 <gps_data_extraction+0x390>)
 80025cc:	f7fe f814 	bl	80005f8 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		data->longitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree))*-1;
 80025d8:	a38f      	add	r3, pc, #572	; (adr r3, 8002818 <gps_data_extraction+0x378>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80025e2:	f7fe f809 	bl	80005f8 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025f2:	f7fd fe4b 	bl	800028c <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4614      	mov	r4, r2
 80025fc:	461d      	mov	r5, r3
 80025fe:	a388      	add	r3, pc, #544	; (adr r3, 8002820 <gps_data_extraction+0x380>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002608:	f7fd fff6 	bl	80005f8 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4620      	mov	r0, r4
 8002612:	4629      	mov	r1, r5
 8002614:	f7fd fe3a 	bl	800028c <__adddf3>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe fae2 	bl	8000be8 <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef1 7a67 	vneg.f32	s15, s15
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	edc3 7a03 	vstr	s15, [r3, #12]
		printf("longitude : %f\n",data->longitude);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ff85 	bl	8000548 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	487c      	ldr	r0, [pc, #496]	; (8002834 <gps_data_extraction+0x394>)
 8002644:	f006 f9b6 	bl	80089b4 <iprintf>

		Deg_Val=(int)((lat/100));
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b78      	ldr	r3, [pc, #480]	; (8002830 <gps_data_extraction+0x390>)
 800264e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002652:	f7fe f8fb 	bl	800084c <__aeabi_ddiv>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fa7b 	bl	8000b58 <__aeabi_d2iz>
 8002662:	4603      	mov	r3, r0
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff5d 	bl	8000524 <__aeabi_i2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		Min_Val=(int)(lat-(Deg_Val*100));
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	4b6e      	ldr	r3, [pc, #440]	; (8002830 <gps_data_extraction+0x390>)
 8002678:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267c:	f7fd ffbc 	bl	80005f8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002688:	f7fd fdfe 	bl	8000288 <__aeabi_dsub>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fa60 	bl	8000b58 <__aeabi_d2iz>
 8002698:	4603      	mov	r3, r0
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff42 	bl	8000524 <__aeabi_i2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		Sec_Val=((lat-(Deg_Val*100))-Min_Val)*10;
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <gps_data_extraction+0x390>)
 80026ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026b2:	f7fd ffa1 	bl	80005f8 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026be:	f7fd fde3 	bl	8000288 <__aeabi_dsub>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026ce:	f7fd fddb 	bl	8000288 <__aeabi_dsub>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <gps_data_extraction+0x398>)
 80026e0:	f7fd ff8a 	bl	80005f8 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		data->latitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree));
 80026ec:	a34a      	add	r3, pc, #296	; (adr r3, 8002818 <gps_data_extraction+0x378>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026f6:	f7fd ff7f 	bl	80005f8 <__aeabi_dmul>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002706:	f7fd fdc1 	bl	800028c <__adddf3>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4614      	mov	r4, r2
 8002710:	461d      	mov	r5, r3
 8002712:	a343      	add	r3, pc, #268	; (adr r3, 8002820 <gps_data_extraction+0x380>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800271c:	f7fd ff6c 	bl	80005f8 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fd fdb0 	bl	800028c <__adddf3>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe fa58 	bl	8000be8 <__aeabi_d2f>
 8002738:	4602      	mov	r2, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	609a      	str	r2, [r3, #8]
		printf("latitude : %f\n",data->latitude);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd ff00 	bl	8000548 <__aeabi_f2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	483b      	ldr	r0, [pc, #236]	; (800283c <gps_data_extraction+0x39c>)
 800274e:	f006 f931 	bl	80089b4 <iprintf>
	}
    hr=(int)((data->time)/10000);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002758:	a333      	add	r3, pc, #204	; (adr r3, 8002828 <gps_data_extraction+0x388>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fe f875 	bl	800084c <__aeabi_ddiv>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe f9f5 	bl	8000b58 <__aeabi_d2iz>
 800276e:	4603      	mov	r3, r0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
   	min=(int)(data->time-(hr*10000))/100;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f242 7210 	movw	r2, #10000	; 0x2710
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fece 	bl	8000524 <__aeabi_i2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4620      	mov	r0, r4
 800278e:	4629      	mov	r1, r5
 8002790:	f7fd fd7a 	bl	8000288 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe f9dc 	bl	8000b58 <__aeabi_d2iz>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <gps_data_extraction+0x3a0>)
 80027a4:	fb82 1203 	smull	r1, r2, r2, r3
 80027a8:	1152      	asrs	r2, r2, #5
 80027aa:	17db      	asrs	r3, r3, #31
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	623b      	str	r3, [r7, #32]
   	sec=(int)(data->time-((hr*10000)+(min*100)));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80027bc:	fb03 f202 	mul.w	r2, r3, r2
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2164      	movs	r1, #100	; 0x64
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd feaa 	bl	8000524 <__aeabi_i2d>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fd56 	bl	8000288 <__aeabi_dsub>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe f9b8 	bl	8000b58 <__aeabi_d2iz>
 80027e8:	4603      	mov	r3, r0
 80027ea:	61fb      	str	r3, [r7, #28]
   	int ist_hr = hr + 5;  // 5 hours difference
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	3305      	adds	r3, #5
 80027f0:	657b      	str	r3, [r7, #84]	; 0x54
   	int ist_min = min + 30;  // 30 minutes difference
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	331e      	adds	r3, #30
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
    if(ist_hr>=24)
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	2b17      	cmp	r3, #23
 80027fc:	dd02      	ble.n	8002804 <gps_data_extraction+0x364>
    {
    	ist_hr-=24;
 80027fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002800:	3b18      	subs	r3, #24
 8002802:	657b      	str	r3, [r7, #84]	; 0x54
    }
   	// Adjusting for overflow
   	if (ist_min >= 60) {
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	2b3b      	cmp	r3, #59	; 0x3b
 8002808:	dd1c      	ble.n	8002844 <gps_data_extraction+0x3a4>
   	    ist_hr++;
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	3301      	adds	r3, #1
 800280e:	657b      	str	r3, [r7, #84]	; 0x54
   	    ist_min -= 60;
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	3b3c      	subs	r3, #60	; 0x3c
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
 8002816:	e015      	b.n	8002844 <gps_data_extraction+0x3a4>
 8002818:	111fba11 	.word	0x111fba11
 800281c:	3f911111 	.word	0x3f911111
 8002820:	78d949ab 	.word	0x78d949ab
 8002824:	3f323456 	.word	0x3f323456
 8002828:	00000000 	.word	0x00000000
 800282c:	40c38800 	.word	0x40c38800
 8002830:	40590000 	.word	0x40590000
 8002834:	0800d144 	.word	0x0800d144
 8002838:	40240000 	.word	0x40240000
 800283c:	0800d154 	.word	0x0800d154
 8002840:	51eb851f 	.word	0x51eb851f

//	        // Format and store in gpsData
//	     sprintf(data->time, "%02d:%02d:%02d", hours, minutes, seconds);
			//sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":%s,\nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);

		sprintf(json_str,"TEAM-B $latitude:%f %c,longitude:%f %c,time:%d:%d:%d,Date = %c%c/%c%c/%c%c#\n",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date[0],data->Date[1],data->Date[2],data->Date[3],data->Date[4],data->Date[5]);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe7d 	bl	8000548 <__aeabi_f2d>
 800284e:	4604      	mov	r4, r0
 8002850:	460d      	mov	r5, r1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002858:	461e      	mov	r6, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fe72 	bl	8000548 <__aeabi_f2d>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	6979      	ldr	r1, [r7, #20]
 800286a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800286e:	4608      	mov	r0, r1
 8002870:	6979      	ldr	r1, [r7, #20]
 8002872:	7e09      	ldrb	r1, [r1, #24]
 8002874:	6139      	str	r1, [r7, #16]
 8002876:	6979      	ldr	r1, [r7, #20]
 8002878:	7e49      	ldrb	r1, [r1, #25]
 800287a:	60f9      	str	r1, [r7, #12]
 800287c:	6979      	ldr	r1, [r7, #20]
 800287e:	7e89      	ldrb	r1, [r1, #26]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	6979      	ldr	r1, [r7, #20]
 8002884:	7ec9      	ldrb	r1, [r1, #27]
 8002886:	6079      	str	r1, [r7, #4]
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	7f09      	ldrb	r1, [r1, #28]
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	6979      	ldr	r1, [r7, #20]
 8002890:	7f49      	ldrb	r1, [r1, #29]
 8002892:	910d      	str	r1, [sp, #52]	; 0x34
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	910c      	str	r1, [sp, #48]	; 0x30
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	910b      	str	r1, [sp, #44]	; 0x2c
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	910a      	str	r1, [sp, #40]	; 0x28
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	9109      	str	r1, [sp, #36]	; 0x24
 80028a4:	6939      	ldr	r1, [r7, #16]
 80028a6:	9108      	str	r1, [sp, #32]
 80028a8:	69f9      	ldr	r1, [r7, #28]
 80028aa:	9107      	str	r1, [sp, #28]
 80028ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80028ae:	9106      	str	r1, [sp, #24]
 80028b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028b2:	9105      	str	r1, [sp, #20]
 80028b4:	9004      	str	r0, [sp, #16]
 80028b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028ba:	9600      	str	r6, [sp, #0]
 80028bc:	4622      	mov	r2, r4
 80028be:	462b      	mov	r3, r5
 80028c0:	4905      	ldr	r1, [pc, #20]	; (80028d8 <gps_data_extraction+0x438>)
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <gps_data_extraction+0x43c>)
 80028c4:	f006 f8e4 	bl	8008a90 <siprintf>
//		sprintf(json_str,"\n{\n\"lat\":%f %c,\n \"lon\":%f %c,\n \"time\": %d:%d:%d \n \"Date\" = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date);
//	     sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":\"%lf \" \nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);
	     printf("json format is %s\n",json_str);
 80028c8:	4904      	ldr	r1, [pc, #16]	; (80028dc <gps_data_extraction+0x43c>)
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <gps_data_extraction+0x440>)
 80028cc:	f006 f872 	bl	80089b4 <iprintf>

}
 80028d0:	bf00      	nop
 80028d2:	375c      	adds	r7, #92	; 0x5c
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d8:	0800d164 	.word	0x0800d164
 80028dc:	2000074c 	.word	0x2000074c
 80028e0:	0800d1b4 	.word	0x0800d1b4

080028e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80028ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80028f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80028fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002900:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002904:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800290c:	e000      	b.n	8002910 <ITM_SendChar+0x2c>
    {
      __NOP();
 800290e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002910:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f9      	beq.n	800290e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800291a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <_write>:
#include "W25XX.h"
#include "stm32l4xx_hal.h"
#define FLASH_START_ADDRESS 0x08080000
#define START_ADDRESS 0x00000000
int _write(int file,char *ptr,int len)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
    int i=0;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e009      	b.n	800295c <_write+0x2a>
      ITM_SendChar((*ptr++));
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ffc7 	bl	80028e4 <ITM_SendChar>
    for(i=0;i<len;i++)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	dbf1      	blt.n	8002948 <_write+0x16>
    return len;
 8002964:	687b      	ldr	r3, [r7, #4]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <get_gsm_init>:
gpsdata gps;



int get_gsm_init()
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
	if(gsm_init()==0)
 8002972:	f7fe fb3d 	bl	8000ff0 <gsm_init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d108      	bne.n	800298e <get_gsm_init+0x20>
	{
		if(connect_tcp_server()==0)
 800297c:	f7fe fefe 	bl	800177c <connect_tcp_server>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <get_gsm_init+0x1c>
				return 0;
 8002986:	2300      	movs	r3, #0
 8002988:	e002      	b.n	8002990 <get_gsm_init+0x22>
			else
				return 1;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <get_gsm_init+0x22>
	}
	else
	{
		return 1;
 800298e:	2301      	movs	r3, #1
	}
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}

08002994 <gsm_actual_server>:

void gsm_actual_server()
  {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
      int count = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	607b      	str	r3, [r7, #4]
     while(count<2)
 800299e:	e00e      	b.n	80029be <gsm_actual_server+0x2a>
     {
     if(get_gsm_init() == 0)
 80029a0:	f7ff ffe5 	bl	800296e <get_gsm_init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <gsm_actual_server+0x1e>
     {
            gsm_status = 0;
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <gsm_actual_server+0x3c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
            break;
 80029b0:	e009      	b.n	80029c6 <gsm_actual_server+0x32>
        }
        else
        {
            count++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3301      	adds	r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
            gsm_status = 1;
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <gsm_actual_server+0x3c>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
     while(count<2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	dded      	ble.n	80029a0 <gsm_actual_server+0xc>
        }
    }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <main>:

int main(void)
{
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029da:	f000 fda5 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029de:	f000 f909 	bl	8002bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e2:	f000 fa57 	bl	8002e94 <MX_GPIO_Init>
  MX_SPI1_Init();
 80029e6:	f000 f957 	bl	8002c98 <MX_SPI1_Init>
  MX_UART4_Init();
 80029ea:	f000 f993 	bl	8002d14 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80029ee:	f000 f9f1 	bl	8002dd4 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80029f2:	f000 f9bf 	bl	8002d74 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80029f6:	f000 fa1d 	bl	8002e34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
//  eraseFlashPage(FLASH_START_ADDRESS);
  W25Q_Reset();
 80029fa:	f7ff f8c7 	bl	8001b8c <W25Q_Reset>
  HAL_Delay(500);
 80029fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a02:	f000 fe0d 	bl	8003620 <HAL_Delay>

  ID = W25Q_ReadID();
 8002a06:	f7ff f8d8 	bl	8001bba <W25Q_ReadID>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <main+0x1d0>)
 8002a0e:	6013      	str	r3, [r2, #0]
//  HAL_Delay(200);

  /*********Initially read address from internal flash**********/
//  offset_INT_Flash = readValueFromFlash();
  /* Erasing sector 0*/
  W25Q_Erase_Sector (0);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff f9a1 	bl	8001d58 <W25Q_Erase_Sector>

    int inactive_count = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]

            gsm_actual_server();
 8002a1a:	f7ff ffbb 	bl	8002994 <gsm_actual_server>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//        	memset(json_str,'\0',100);
//        	length = 0;
      get_gps_data();
 8002a1e:	f7ff fc21 	bl	8002264 <get_gps_data>

//      strcpy(json_str,"lat:1727.401123 N, lon:7822.510254 E, time:12:48:30");
//      gps_status = 0;
      printf("json data %s\n",json_str);
 8002a22:	4961      	ldr	r1, [pc, #388]	; (8002ba8 <main+0x1d4>)
 8002a24:	4861      	ldr	r0, [pc, #388]	; (8002bac <main+0x1d8>)
 8002a26:	f005 ffc5 	bl	80089b4 <iprintf>
      length = strlen(json_str);
 8002a2a:	485f      	ldr	r0, [pc, #380]	; (8002ba8 <main+0x1d4>)
 8002a2c:	f7fd fc20 	bl	8000270 <strlen>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <main+0x1dc>)
 8002a36:	601a      	str	r2, [r3, #0]
      printf("length of json string %d data %s\n",length,json_str);
 8002a38:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <main+0x1dc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ba8 <main+0x1d4>)
 8002a3e:	4619      	mov	r1, r3
 8002a40:	485c      	ldr	r0, [pc, #368]	; (8002bb4 <main+0x1e0>)
 8002a42:	f005 ffb7 	bl	80089b4 <iprintf>
      printf("gps_status %d\n",gps_status);
 8002a46:	4b5c      	ldr	r3, [pc, #368]	; (8002bb8 <main+0x1e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	485b      	ldr	r0, [pc, #364]	; (8002bbc <main+0x1e8>)
 8002a4e:	f005 ffb1 	bl	80089b4 <iprintf>
      if(gps_status==0)
 8002a52:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <main+0x1e4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 8098 	bne.w	8002b8c <main+0x1b8>
      {
          if(check_server_connection()==0)
 8002a5c:	f7fe fda4 	bl	80015a8 <check_server_connection>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <main+0xc0>
          {
              mesg_status = send_mesg_to_server(json_str,length);
 8002a66:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <main+0x1dc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	484e      	ldr	r0, [pc, #312]	; (8002ba8 <main+0x1d4>)
 8002a6e:	f7fe ffdf 	bl	8001a30 <send_mesg_to_server>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <main+0x1ec>)
 8002a76:	6013      	str	r3, [r2, #0]
              if(mesg_status == 1)
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <main+0x1ec>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d103      	bne.n	8002a88 <main+0xb4>
              {
                      gsm_status = 1;
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <main+0x1f0>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e008      	b.n	8002a9a <main+0xc6>
              }
              else
              {
              	gsm_status = 0;
 8002a88:	4b4e      	ldr	r3, [pc, #312]	; (8002bc4 <main+0x1f0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
                  inactive_count = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	e002      	b.n	8002a9a <main+0xc6>
              }
          }

          else
          {
          		 gsm_status = 1;
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <main+0x1f0>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
          }

          if((gsm_status==1))
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <main+0x1f0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d122      	bne.n	8002ae8 <main+0x114>
          {
          	printf("write to flash\n");
 8002aa2:	4849      	ldr	r0, [pc, #292]	; (8002bc8 <main+0x1f4>)
 8002aa4:	f005 ffec 	bl	8008a80 <puts>
          	 current_offset = (length*i);//+offset_INT_Flash;
 8002aa8:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <main+0x1dc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a47      	ldr	r2, [pc, #284]	; (8002bcc <main+0x1f8>)
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	17da      	asrs	r2, r3, #31
 8002ab6:	461c      	mov	r4, r3
 8002ab8:	4615      	mov	r5, r2
 8002aba:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <main+0x1fc>)
 8002abc:	e9c3 4500 	strd	r4, r5, [r3]

//          		  W25Q_Write(START_ADDRESS,current_offset,86,(uint8_t*)json_str);
     		  W25Q_Write(START_ADDRESS+i,0,86,(uint8_t*)json_str);
 8002ac0:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <main+0x1f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <main+0x1d4>)
 8002ac8:	2256      	movs	r2, #86	; 0x56
 8002aca:	2100      	movs	r1, #0
 8002acc:	f7ff faa8 	bl	8002020 <W25Q_Write>

          		  HAL_Delay(500);
 8002ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad4:	f000 fda4 	bl	8003620 <HAL_Delay>
//          		 printf("read from flash\n");
//          		      W25Q_Read(START_ADDRESS,current_offset , 88, (uint8_t*)rx_buffer);
//          		      printf("read from flash data is %s\n",rx_buffer);
//              writeStringToFlash(FLASH_START_ADDRESS+offset*i,json_str);
              inactive_count++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
              i++;
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <main+0x1f8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a39      	ldr	r2, [pc, #228]	; (8002bcc <main+0x1f8>)
 8002ae6:	6013      	str	r3, [r2, #0]
//              HAL_Delay(500);
          }

          if(inactive_count>=flash_count)
 8002ae8:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <main+0x200>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	db52      	blt.n	8002b98 <main+0x1c4>
          {
              //gsm_actual_server();
          	gsm_status=connect_tcp_server();
 8002af2:	f7fe fe43 	bl	800177c <connect_tcp_server>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <main+0x1f0>)
 8002afa:	6013      	str	r3, [r2, #0]
          	gsm_status = 0;
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <main+0x1f0>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
              if(gsm_status == 0)
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <main+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d13a      	bne.n	8002b80 <main+0x1ac>
              {
              	while(j<=i)
 8002b0a:	e02a      	b.n	8002b62 <main+0x18e>
              	{
              		printf("read from flash\n");
 8002b0c:	4832      	ldr	r0, [pc, #200]	; (8002bd8 <main+0x204>)
 8002b0e:	f005 ffb7 	bl	8008a80 <puts>
              		          		      W25Q_Read(START_ADDRESS+j,0,86, (uint8_t*)rx_buffer);
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <main+0x208>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <main+0x20c>)
 8002b1a:	2256      	movs	r2, #86	; 0x56
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f7ff f86a 	bl	8001bf6 <W25Q_Read>
              		          		      printf("read from flash data is %s\n",rx_buffer);
 8002b22:	492f      	ldr	r1, [pc, #188]	; (8002be0 <main+0x20c>)
 8002b24:	482f      	ldr	r0, [pc, #188]	; (8002be4 <main+0x210>)
 8002b26:	f005 ff45 	bl	80089b4 <iprintf>
//              		readDataFromFlash(FLASH_START_ADDRESS+offset*j, read_json, strlen(json_str)+1);
              		mesg_status = send_mesg_to_server(rx_buffer,strlen(rx_buffer)+1);
 8002b2a:	482d      	ldr	r0, [pc, #180]	; (8002be0 <main+0x20c>)
 8002b2c:	f7fd fba0 	bl	8000270 <strlen>
 8002b30:	4603      	mov	r3, r0
 8002b32:	3301      	adds	r3, #1
 8002b34:	4619      	mov	r1, r3
 8002b36:	482a      	ldr	r0, [pc, #168]	; (8002be0 <main+0x20c>)
 8002b38:	f7fe ff7a 	bl	8001a30 <send_mesg_to_server>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <main+0x1ec>)
 8002b40:	6013      	str	r3, [r2, #0]
              		j++;
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <main+0x208>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <main+0x208>)
 8002b4a:	6013      	str	r3, [r2, #0]
              		printf("sent to server\n");
 8002b4c:	4826      	ldr	r0, [pc, #152]	; (8002be8 <main+0x214>)
 8002b4e:	f005 ff97 	bl	8008a80 <puts>
              		printf("%d %d",i,j);
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <main+0x1f8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <main+0x208>)
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4823      	ldr	r0, [pc, #140]	; (8002bec <main+0x218>)
 8002b5e:	f005 ff29 	bl	80089b4 <iprintf>
              	while(j<=i)
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <main+0x208>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <main+0x1f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	ddce      	ble.n	8002b0c <main+0x138>
              	}
              j=0,i=0;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <main+0x208>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <main+0x1f8>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
              inactive_count = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e00b      	b.n	8002b98 <main+0x1c4>
//              eraseFlashPage(FLASH_START_ADDRESS);
              }
              else
              {
              	flash_count = flash_count+10;;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <main+0x200>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	330a      	adds	r3, #10
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <main+0x200>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e005      	b.n	8002b98 <main+0x1c4>
          }
      }

      else
      {
          printf("gps issue\n");
 8002b8c:	4818      	ldr	r0, [pc, #96]	; (8002bf0 <main+0x21c>)
 8002b8e:	f005 ff77 	bl	8008a80 <puts>
          gps_status = 1;
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <main+0x1e4>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
      }
//      printf("read from flash\n");
//      W25Q_Read(START_ADDRESS, 0, 88, (uint8_t*)rx_buffer);
//      printf("read from flash data is %s\n",rx_buffer);

      HAL_Delay(3000);
 8002b98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b9c:	f000 fd40 	bl	8003620 <HAL_Delay>
      get_gps_data();
 8002ba0:	e73d      	b.n	8002a1e <main+0x4a>
 8002ba2:	bf00      	nop
 8002ba4:	20000738 	.word	0x20000738
 8002ba8:	2000074c 	.word	0x2000074c
 8002bac:	0800d1c8 	.word	0x0800d1c8
 8002bb0:	20000748 	.word	0x20000748
 8002bb4:	0800d1d8 	.word	0x0800d1d8
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	0800d1fc 	.word	0x0800d1fc
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	0800d20c 	.word	0x0800d20c
 8002bcc:	200007b0 	.word	0x200007b0
 8002bd0:	20000740 	.word	0x20000740
 8002bd4:	2000000c 	.word	0x2000000c
 8002bd8:	0800d21c 	.word	0x0800d21c
 8002bdc:	200007b4 	.word	0x200007b4
 8002be0:	20000544 	.word	0x20000544
 8002be4:	0800d22c 	.word	0x0800d22c
 8002be8:	0800d248 	.word	0x0800d248
 8002bec:	0800d258 	.word	0x0800d258
 8002bf0:	0800d260 	.word	0x0800d260

08002bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b096      	sub	sp, #88	; 0x58
 8002bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	2244      	movs	r2, #68	; 0x44
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f006 f86a 	bl	8008cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c08:	463b      	mov	r3, r7
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c1a:	f001 f885 	bl	8003d28 <HAL_PWREx_ControlVoltageScaling>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c24:	f000 f980 	bl	8002f28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c32:	2310      	movs	r3, #16
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c36:	2302      	movs	r3, #2
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c42:	230a      	movs	r3, #10
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c46:	2307      	movs	r3, #7
 8002c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 f8bc 	bl	8003dd4 <HAL_RCC_OscConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c62:	f000 f961 	bl	8002f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c66:	230f      	movs	r3, #15
 8002c68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	2104      	movs	r1, #4
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 fc84 	bl	800458c <HAL_RCC_ClockConfig>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c8a:	f000 f94d 	bl	8002f28 <Error_Handler>
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3758      	adds	r7, #88	; 0x58
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <MX_SPI1_Init+0x78>)
 8002ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cb2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cce:	2220      	movs	r2, #32
 8002cd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <MX_SPI1_Init+0x74>)
 8002cf8:	f002 fb28 	bl	800534c <HAL_SPI_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d02:	f000 f911 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200002d0 	.word	0x200002d0
 8002d10:	40013000 	.word	0x40013000

08002d14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d1a:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <MX_UART4_Init+0x5c>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_UART4_Init+0x58>)
 8002d58:	f003 fa08 	bl	800616c <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002d62:	f000 f8e1 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000334 	.word	0x20000334
 8002d70:	40004c00 	.word	0x40004c00

08002d74 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <MX_UART5_Init+0x58>)
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <MX_UART5_Init+0x5c>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <MX_UART5_Init+0x58>)
 8002d80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_UART5_Init+0x58>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MX_UART5_Init+0x58>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_UART5_Init+0x58>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_UART5_Init+0x58>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <MX_UART5_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <MX_UART5_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <MX_UART5_Init+0x58>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_UART5_Init+0x58>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002db6:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_UART5_Init+0x58>)
 8002db8:	f003 f9d8 	bl	800616c <HAL_UART_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002dc2:	f000 f8b1 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200003b8 	.word	0x200003b8
 8002dd0:	40005000 	.word	0x40005000

08002dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <MX_USART1_UART_Init+0x5c>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002de0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e16:	4805      	ldr	r0, [pc, #20]	; (8002e2c <MX_USART1_UART_Init+0x58>)
 8002e18:	f003 f9a8 	bl	800616c <HAL_UART_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e22:	f000 f881 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000043c 	.word	0x2000043c
 8002e30:	40013800 	.word	0x40013800

08002e34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <MX_USART3_UART_Init+0x5c>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e76:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_USART3_UART_Init+0x58>)
 8002e78:	f003 f978 	bl	800616c <HAL_UART_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002e82:	f000 f851 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200004c0 	.word	0x200004c0
 8002e90:	40004800 	.word	0x40004800

08002e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_GPIO_Init+0x90>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efa:	f000 feef 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002efe:	2310      	movs	r3, #16
 8002f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	4619      	mov	r1, r3
 8002f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f18:	f000 fd36 	bl	8003988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f1c:	bf00      	nop
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <Error_Handler+0x8>
	...

08002f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_MspInit+0x44>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_MspInit+0x44>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6613      	str	r3, [r2, #96]	; 0x60
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_MspInit+0x44>)
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_MspInit+0x44>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_MspInit+0x44>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_MspInit+0x44>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_SPI_MspInit+0x7c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d128      	bne.n	8002ff0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_SPI_MspInit+0x80>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fce:	23e0      	movs	r3, #224	; 0xe0
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fde:	2305      	movs	r3, #5
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fec:	f000 fccc 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b0b2      	sub	sp, #200	; 0xc8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800301c:	2288      	movs	r2, #136	; 0x88
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f005 fe5b 	bl	8008cdc <memset>
  if(huart->Instance==UART4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4aa1      	ldr	r2, [pc, #644]	; (80032b0 <HAL_UART_MspInit+0x2b0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d144      	bne.n	80030ba <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003030:	2308      	movs	r3, #8
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003034:	2300      	movs	r3, #0
 8003036:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303c:	4618      	mov	r0, r3
 800303e:	f001 fcc9 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003048:	f7ff ff6e 	bl	8002f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800304c:	4b99      	ldr	r3, [pc, #612]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a98      	ldr	r2, [pc, #608]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
 8003058:	4b96      	ldr	r3, [pc, #600]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003064:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	4a92      	ldr	r2, [pc, #584]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003070:	4b90      	ldr	r3, [pc, #576]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800307c:	2303      	movs	r3, #3
 800307e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003094:	2308      	movs	r3, #8
 8003096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800309e:	4619      	mov	r1, r3
 80030a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a4:	f000 fc70 	bl	8003988 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	2034      	movs	r0, #52	; 0x34
 80030ae:	f000 fbb6 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80030b2:	2034      	movs	r0, #52	; 0x34
 80030b4:	f000 fbcf 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030b8:	e0f5      	b.n	80032a6 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==UART5)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7e      	ldr	r2, [pc, #504]	; (80032b8 <HAL_UART_MspInit+0x2b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d165      	bne.n	8003190 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80030c4:	2310      	movs	r3, #16
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80030c8:	2300      	movs	r3, #0
 80030ca:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d0:	4618      	mov	r0, r3
 80030d2:	f001 fc7f 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80030dc:	f7ff ff24 	bl	8002f28 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80030e0:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80030e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
 80030ec:	4b71      	ldr	r3, [pc, #452]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f8:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	4a6d      	ldr	r2, [pc, #436]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003104:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800312c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003142:	2308      	movs	r3, #8
 8003144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003148:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800314c:	4619      	mov	r1, r3
 800314e:	485b      	ldr	r0, [pc, #364]	; (80032bc <HAL_UART_MspInit+0x2bc>)
 8003150:	f000 fc1a 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003154:	2304      	movs	r3, #4
 8003156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800316c:	2308      	movs	r3, #8
 800316e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003172:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003176:	4619      	mov	r1, r3
 8003178:	4851      	ldr	r0, [pc, #324]	; (80032c0 <HAL_UART_MspInit+0x2c0>)
 800317a:	f000 fc05 	bl	8003988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2035      	movs	r0, #53	; 0x35
 8003184:	f000 fb4b 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003188:	2035      	movs	r0, #53	; 0x35
 800318a:	f000 fb64 	bl	8003856 <HAL_NVIC_EnableIRQ>
}
 800318e:	e08a      	b.n	80032a6 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <HAL_UART_MspInit+0x2c4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d145      	bne.n	8003226 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800319a:	2301      	movs	r3, #1
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800319e:	2300      	movs	r3, #0
 80031a0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fc14 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 80031b2:	f7ff feb9 	bl	8002f28 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ba:	4a3e      	ldr	r2, [pc, #248]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c0:	6613      	str	r3, [r2, #96]	; 0x60
 80031c2:	4b3c      	ldr	r3, [pc, #240]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	4a38      	ldr	r2, [pc, #224]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031da:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fa:	2303      	movs	r3, #3
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003200:	2307      	movs	r3, #7
 8003202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003206:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800320a:	4619      	mov	r1, r3
 800320c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003210:	f000 fbba 	bl	8003988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	2025      	movs	r0, #37	; 0x25
 800321a:	f000 fb00 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800321e:	2025      	movs	r0, #37	; 0x25
 8003220:	f000 fb19 	bl	8003856 <HAL_NVIC_EnableIRQ>
}
 8003224:	e03f      	b.n	80032a6 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART3)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <HAL_UART_MspInit+0x2c8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d13a      	bne.n	80032a6 <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003230:	2304      	movs	r3, #4
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003234:	2300      	movs	r3, #0
 8003236:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323c:	4618      	mov	r0, r3
 800323e:	f001 fbc9 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8003248:	f7ff fe6e 	bl	8002f28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003256:	6593      	str	r3, [r2, #88]	; 0x58
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800327c:	2330      	movs	r3, #48	; 0x30
 800327e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328e:	2303      	movs	r3, #3
 8003290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003294:	2307      	movs	r3, #7
 8003296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800329e:	4619      	mov	r1, r3
 80032a0:	4806      	ldr	r0, [pc, #24]	; (80032bc <HAL_UART_MspInit+0x2bc>)
 80032a2:	f000 fb71 	bl	8003988 <HAL_GPIO_Init>
}
 80032a6:	bf00      	nop
 80032a8:	37c8      	adds	r7, #200	; 0xc8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40004c00 	.word	0x40004c00
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40005000 	.word	0x40005000
 80032bc:	48000800 	.word	0x48000800
 80032c0:	48000c00 	.word	0x48000c00
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40004800 	.word	0x40004800

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <NMI_Handler+0x4>

080032d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <HardFault_Handler+0x4>

080032d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <MemManage_Handler+0x4>

080032de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <BusFault_Handler+0x4>

080032e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler+0x4>

080032ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003318:	f000 f962 	bl	80035e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}

08003320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <USART1_IRQHandler+0x10>)
 8003326:	f003 f905 	bl	8006534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000043c 	.word	0x2000043c

08003334 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <UART4_IRQHandler+0x10>)
 800333a:	f003 f8fb 	bl	8006534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000334 	.word	0x20000334

08003348 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <UART5_IRQHandler+0x10>)
 800334e:	f003 f8f1 	bl	8006534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200003b8 	.word	0x200003b8

0800335c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return 1;
 8003360:	2301      	movs	r3, #1
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_kill>:

int _kill(int pid, int sig)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003376:	f005 fd2b 	bl	8008dd0 <__errno>
 800337a:	4603      	mov	r3, r0
 800337c:	2216      	movs	r2, #22
 800337e:	601a      	str	r2, [r3, #0]
  return -1;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_exit>:

void _exit (int status)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ffe7 	bl	800336c <_kill>
  while (1) {}    /* Make sure we hang here */
 800339e:	e7fe      	b.n	800339e <_exit+0x12>

080033a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00a      	b.n	80033c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033b2:	f3af 8000 	nop.w
 80033b6:	4601      	mov	r1, r0
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	60ba      	str	r2, [r7, #8]
 80033be:	b2ca      	uxtb	r2, r1
 80033c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dbf0      	blt.n	80033b2 <_read+0x12>
  }

  return len;
 80033d0:	687b      	ldr	r3, [r7, #4]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_close>:
  }
  return len;
}

int _close(int file)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003402:	605a      	str	r2, [r3, #4]
  return 0;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <_isatty>:

int _isatty(int file)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <_sbrk+0x5c>)
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <_sbrk+0x60>)
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <_sbrk+0x64>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <_sbrk+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003474:	f005 fcac 	bl	8008dd0 <__errno>
 8003478:	4603      	mov	r3, r0
 800347a:	220c      	movs	r2, #12
 800347c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e009      	b.n	8003498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <_sbrk+0x64>)
 8003494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20018000 	.word	0x20018000
 80034a4:	00000400 	.word	0x00000400
 80034a8:	20000b98 	.word	0x20000b98
 80034ac:	20000cf0 	.word	0x20000cf0

080034b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <SystemInit+0x20>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <SystemInit+0x20>)
 80034bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034d8:	f7ff ffea 	bl	80034b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034dc:	480c      	ldr	r0, [pc, #48]	; (8003510 <LoopForever+0x6>)
  ldr r1, =_edata
 80034de:	490d      	ldr	r1, [pc, #52]	; (8003514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <LoopForever+0xe>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <LoopForever+0x12>)
  ldr r4, =_ebss
 80034f4:	4c0a      	ldr	r4, [pc, #40]	; (8003520 <LoopForever+0x16>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003502:	f005 fc6b 	bl	8008ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003506:	f7ff fa65 	bl	80029d4 <main>

0800350a <LoopForever>:

LoopForever:
    b LoopForever
 800350a:	e7fe      	b.n	800350a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800350c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003518:	0800d714 	.word	0x0800d714
  ldr r2, =_sbss
 800351c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003520:	20000cec 	.word	0x20000cec

08003524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC1_2_IRQHandler>
	...

08003528 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_Init+0x3c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_Init+0x3c>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353e:	2003      	movs	r0, #3
 8003540:	f000 f962 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003544:	2000      	movs	r0, #0
 8003546:	f000 f80f 	bl	8003568 <HAL_InitTick>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	71fb      	strb	r3, [r7, #7]
 8003554:	e001      	b.n	800355a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003556:	f7ff fced 	bl	8002f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800355a:	79fb      	ldrb	r3, [r7, #7]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40022000 	.word	0x40022000

08003568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_InitTick+0x6c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d023      	beq.n	80035c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_InitTick+0x70>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_InitTick+0x6c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4619      	mov	r1, r3
 8003586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800358a:	fbb3 f3f1 	udiv	r3, r3, r1
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f96d 	bl	8003872 <HAL_SYSTICK_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d809      	bhi.n	80035b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a4:	2200      	movs	r2, #0
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f000 f937 	bl	800381e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_InitTick+0x74>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e004      	b.n	80035c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e001      	b.n	80035c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000018 	.word	0x20000018
 80035d8:	20000010 	.word	0x20000010
 80035dc:	20000014 	.word	0x20000014

080035e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000018 	.word	0x20000018
 8003604:	20000b9c 	.word	0x20000b9c

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000b9c 	.word	0x20000b9c

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffde 	bl	8003608 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000018 	.word	0x20000018

08003668 <__NVIC_SetPriorityGrouping>:
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	60d3      	str	r3, [r2, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_GetPriorityGrouping>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4907      	ldr	r1, [pc, #28]	; (8003704 <__NVIC_EnableIRQ+0x38>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000e100 	.word	0xe000e100

08003708 <__NVIC_SetPriority>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db0a      	blt.n	8003732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	490c      	ldr	r1, [pc, #48]	; (8003754 <__NVIC_SetPriority+0x4c>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	440b      	add	r3, r1
 800372c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003730:	e00a      	b.n	8003748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <__NVIC_SetPriority+0x50>)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3b04      	subs	r3, #4
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	440b      	add	r3, r1
 8003746:	761a      	strb	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <NVIC_EncodePriority>:
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	bf28      	it	cs
 800377a:	2304      	movcs	r3, #4
 800377c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3304      	adds	r3, #4
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <NVIC_EncodePriority+0x30>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3b03      	subs	r3, #3
 800378a:	e000      	b.n	800378e <NVIC_EncodePriority+0x32>
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	401a      	ands	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a4:	f04f 31ff 	mov.w	r1, #4294967295
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	4313      	orrs	r3, r2
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <SysTick_Config>:
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d4:	d301      	bcc.n	80037da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00f      	b.n	80037fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <SysTick_Config+0x40>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e2:	210f      	movs	r1, #15
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f7ff ff8e 	bl	8003708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Config+0x40>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SysTick_Config+0x40>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff29 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff3e 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff8e 	bl	800375c <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5d 	bl	8003708 <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff31 	bl	80036cc <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffa2 	bl	80037c4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d008      	beq.n	80038b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2204      	movs	r2, #4
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e022      	b.n	80038fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 020e 	bic.w	r2, r2, #14
 80038c2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f003 021c 	and.w	r2, r3, #28
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d005      	beq.n	800392a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2204      	movs	r2, #4
 8003922:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e029      	b.n	800397e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 020e 	bic.w	r2, r2, #14
 8003938:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f003 021c 	and.w	r2, r3, #28
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
    }
  }
  return status;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003996:	e17f      	b.n	8003c98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2101      	movs	r1, #1
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	4013      	ands	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8171 	beq.w	8003c92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d005      	beq.n	80039c8 <HAL_GPIO_Init+0x40>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d130      	bne.n	8003a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fe:	2201      	movs	r2, #1
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0201 	and.w	r2, r3, #1
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d118      	bne.n	8003a68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	f003 0201 	and.w	r2, r3, #1
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d017      	beq.n	8003aa4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d123      	bne.n	8003af8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	08da      	lsrs	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3208      	adds	r2, #8
 8003ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	220f      	movs	r2, #15
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	6939      	ldr	r1, [r7, #16]
 8003af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2203      	movs	r2, #3
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0203 	and.w	r2, r3, #3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80ac 	beq.w	8003c92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_GPIO_Init+0x330>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	4a5e      	ldr	r2, [pc, #376]	; (8003cb8 <HAL_GPIO_Init+0x330>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6613      	str	r3, [r2, #96]	; 0x60
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_GPIO_Init+0x330>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b52:	4a5a      	ldr	r2, [pc, #360]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b7c:	d025      	beq.n	8003bca <HAL_GPIO_Init+0x242>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4f      	ldr	r2, [pc, #316]	; (8003cc0 <HAL_GPIO_Init+0x338>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <HAL_GPIO_Init+0x23e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4e      	ldr	r2, [pc, #312]	; (8003cc4 <HAL_GPIO_Init+0x33c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d019      	beq.n	8003bc2 <HAL_GPIO_Init+0x23a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4d      	ldr	r2, [pc, #308]	; (8003cc8 <HAL_GPIO_Init+0x340>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_GPIO_Init+0x236>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a4c      	ldr	r2, [pc, #304]	; (8003ccc <HAL_GPIO_Init+0x344>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00d      	beq.n	8003bba <HAL_GPIO_Init+0x232>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4b      	ldr	r2, [pc, #300]	; (8003cd0 <HAL_GPIO_Init+0x348>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <HAL_GPIO_Init+0x22e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_GPIO_Init+0x34c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_GPIO_Init+0x22a>
 8003bae:	2306      	movs	r3, #6
 8003bb0:	e00c      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bb2:	2307      	movs	r3, #7
 8003bb4:	e00a      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x244>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bdc:	4937      	ldr	r1, [pc, #220]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c0e:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_GPIO_Init+0x350>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f ae78 	bne.w	8003998 <HAL_GPIO_Init+0x10>
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	48000400 	.word	0x48000400
 8003cc4:	48000800 	.word	0x48000800
 8003cc8:	48000c00 	.word	0x48000c00
 8003ccc:	48001000 	.word	0x48001000
 8003cd0:	48001400 	.word	0x48001400
 8003cd4:	48001800 	.word	0x48001800
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cec:	787b      	ldrb	r3, [r7, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cf8:	e002      	b.n	8003d00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d36:	d130      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d44:	d038      	beq.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2232      	movs	r2, #50	; 0x32
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6c:	e002      	b.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d74:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	d102      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f2      	bne.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d110      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d007      	beq.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	20000010 	.word	0x20000010
 8003dd0:	431bde83 	.word	0x431bde83

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e3ca      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de6:	4b97      	ldr	r3, [pc, #604]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df0:	4b94      	ldr	r3, [pc, #592]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80e4 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_RCC_OscConfig+0x4a>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	f040 808b 	bne.w	8003f2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 8087 	bne.w	8003f2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e1e:	4b89      	ldr	r3, [pc, #548]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e3a2      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	4b82      	ldr	r3, [pc, #520]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_RCC_OscConfig+0x7c>
 8003e46:	4b7f      	ldr	r3, [pc, #508]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4e:	e005      	b.n	8003e5c <HAL_RCC_OscConfig+0x88>
 8003e50:	4b7c      	ldr	r3, [pc, #496]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d223      	bcs.n	8003ea8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fd55 	bl	8004914 <RCC_SetFlashLatencyFromMSIRange>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e383      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e74:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a72      	ldr	r2, [pc, #456]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	496d      	ldr	r1, [pc, #436]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e92:	4b6c      	ldr	r3, [pc, #432]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	4968      	ldr	r1, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
 8003ea6:	e025      	b.n	8003ef4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea8:	4b66      	ldr	r3, [pc, #408]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eae:	f043 0308 	orr.w	r3, r3, #8
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4960      	ldr	r1, [pc, #384]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec6:	4b5f      	ldr	r3, [pc, #380]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	495b      	ldr	r1, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fd15 	bl	8004914 <RCC_SetFlashLatencyFromMSIRange>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e343      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef4:	f000 fc4a 	bl	800478c <HAL_RCC_GetSysClockFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b52      	ldr	r3, [pc, #328]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	4950      	ldr	r1, [pc, #320]	; (8004048 <HAL_RCC_OscConfig+0x274>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	4a4e      	ldr	r2, [pc, #312]	; (800404c <HAL_RCC_OscConfig+0x278>)
 8003f12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f14:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fb25 	bl	8003568 <HAL_InitTick>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d052      	beq.n	8003fce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	e327      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d032      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f34:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a42      	ldr	r2, [pc, #264]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f40:	f7ff fb62 	bl	8003608 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f48:	f7ff fb5e 	bl	8003608 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e310      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f66:	4b37      	ldr	r3, [pc, #220]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a36      	ldr	r2, [pc, #216]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4931      	ldr	r1, [pc, #196]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	492c      	ldr	r1, [pc, #176]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e01a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a29      	ldr	r2, [pc, #164]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa6:	f7ff fb2f 	bl	8003608 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fae:	f7ff fb2b 	bl	8003608 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e2dd      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc0:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x1da>
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d074      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x21a>
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	d10e      	bne.n	8004006 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d10b      	bne.n	8004006 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d064      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d160      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e2ba      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x24a>
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e026      	b.n	800406c <HAL_RCC_OscConfig+0x298>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004026:	d115      	bne.n	8004054 <HAL_RCC_OscConfig+0x280>
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a05      	ldr	r2, [pc, #20]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 800402e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a02      	ldr	r2, [pc, #8]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e014      	b.n	800406c <HAL_RCC_OscConfig+0x298>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	0800d278 	.word	0x0800d278
 800404c:	20000010 	.word	0x20000010
 8004050:	20000014 	.word	0x20000014
 8004054:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a9f      	ldr	r2, [pc, #636]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a9c      	ldr	r2, [pc, #624]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7ff fac8 	bl	8003608 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7ff fac4 	bl	8003608 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e276      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408e:	4b92      	ldr	r3, [pc, #584]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x2a8>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7ff fab4 	bl	8003608 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7ff fab0 	bl	8003608 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e262      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2d0>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d060      	beq.n	8004194 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x310>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d116      	bne.n	8004112 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	4b7c      	ldr	r3, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_OscConfig+0x328>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e23f      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	4973      	ldr	r1, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	e040      	b.n	8004194 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d023      	beq.n	8004162 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411a:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6e      	ldr	r2, [pc, #440]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7ff fa6f 	bl	8003608 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7ff fa6b 	bl	8003608 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e21d      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004140:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	495f      	ldr	r1, [pc, #380]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
 8004160:	e018      	b.n	8004194 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004162:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a5c      	ldr	r2, [pc, #368]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7ff fa4b 	bl	8003608 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7ff fa47 	bl	8003608 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1f9      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004188:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03c      	beq.n	800421a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a8:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7ff fa26 	bl	8003608 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7ff fa22 	bl	8003608 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1d4      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d2:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3ec>
 80041e0:	e01b      	b.n	800421a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e8:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7ff fa09 	bl	8003608 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fa:	f7ff fa05 	bl	8003608 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1b7      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ef      	bne.n	80041fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80a6 	beq.w	8004374 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004228:	2300      	movs	r3, #0
 800422a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800423e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d118      	bne.n	8004292 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426c:	f7ff f9cc 	bl	8003608 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004274:	f7ff f9c8 	bl	8003608 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e17a      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <HAL_RCC_OscConfig+0x4d8>
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042aa:	e029      	b.n	8004300 <HAL_RCC_OscConfig+0x52c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d115      	bne.n	80042e0 <HAL_RCC_OscConfig+0x50c>
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a03      	ldr	r2, [pc, #12]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d4:	e014      	b.n	8004300 <HAL_RCC_OscConfig+0x52c>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
 80042e0:	4b9c      	ldr	r3, [pc, #624]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a9b      	ldr	r2, [pc, #620]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f0:	4b98      	ldr	r3, [pc, #608]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a97      	ldr	r2, [pc, #604]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7ff f97e 	bl	8003608 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7ff f97a 	bl	8003608 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e12a      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ed      	beq.n	8004310 <HAL_RCC_OscConfig+0x53c>
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7ff f967 	bl	8003608 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7ff f963 	bl	8003608 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e113      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004354:	4b7f      	ldr	r3, [pc, #508]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ed      	bne.n	800433e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	4a79      	ldr	r2, [pc, #484]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004372:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80fe 	beq.w	800457a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	2b02      	cmp	r3, #2
 8004384:	f040 80d0 	bne.w	8004528 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004388:	4b72      	ldr	r3, [pc, #456]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	429a      	cmp	r2, r3
 800439a:	d130      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	3b01      	subs	r3, #1
 80043a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d127      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11f      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c8:	2a07      	cmp	r2, #7
 80043ca:	bf14      	ite	ne
 80043cc:	2201      	movne	r2, #1
 80043ce:	2200      	moveq	r2, #0
 80043d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d113      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d06e      	beq.n	80044dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b0c      	cmp	r3, #12
 8004402:	d069      	beq.n	80044d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004404:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004410:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0ad      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004420:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a4b      	ldr	r2, [pc, #300]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800442c:	f7ff f8ec 	bl	8003608 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7ff f8e8 	bl	8003608 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e09a      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004446:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004452:	4b40      	ldr	r3, [pc, #256]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	4b40      	ldr	r3, [pc, #256]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004462:	3a01      	subs	r2, #1
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446c:	0212      	lsls	r2, r2, #8
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004474:	0852      	lsrs	r2, r2, #1
 8004476:	3a01      	subs	r2, #1
 8004478:	0552      	lsls	r2, r2, #21
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004480:	0852      	lsrs	r2, r2, #1
 8004482:	3a01      	subs	r2, #1
 8004484:	0652      	lsls	r2, r2, #25
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800448c:	0912      	lsrs	r2, r2, #4
 800448e:	0452      	lsls	r2, r2, #17
 8004490:	430a      	orrs	r2, r1
 8004492:	4930      	ldr	r1, [pc, #192]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004494:	4313      	orrs	r3, r2
 8004496:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004498:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 800449e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044b0:	f7ff f8aa 	bl	8003608 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7ff f8a6 	bl	8003608 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e058      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d6:	e050      	b.n	800457a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e04f      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d148      	bne.n	800457a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a19      	ldr	r2, [pc, #100]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 80044fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004500:	f7ff f882 	bl	8003608 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7ff f87e 	bl	8003608 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e030      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x734>
 8004526:	e028      	b.n	800457a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d023      	beq.n	8004576 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <HAL_RCC_OscConfig+0x780>)
 8004534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7ff f865 	bl	8003608 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	e00c      	b.n	800455c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004542:	f7ff f861 	bl	8003608 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d905      	bls.n	800455c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e013      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
 8004554:	40021000 	.word	0x40021000
 8004558:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_OscConfig+0x7b0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ec      	bne.n	8004542 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x7b0>)
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	4905      	ldr	r1, [pc, #20]	; (8004584 <HAL_RCC_OscConfig+0x7b0>)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x7b4>)
 8004570:	4013      	ands	r3, r2
 8004572:	60cb      	str	r3, [r1, #12]
 8004574:	e001      	b.n	800457a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	feeefffc 	.word	0xfeeefffc

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0e7      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b75      	ldr	r3, [pc, #468]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d910      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b72      	ldr	r3, [pc, #456]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4970      	ldr	r1, [pc, #448]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cf      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d908      	bls.n	80045fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4960      	ldr	r1, [pc, #384]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d04c      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	4b5a      	ldr	r3, [pc, #360]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d121      	bne.n	8004662 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0a6      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462a:	4b54      	ldr	r3, [pc, #336]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d115      	bne.n	8004662 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e09a      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004642:	4b4e      	ldr	r3, [pc, #312]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e08e      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004652:	4b4a      	ldr	r3, [pc, #296]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e086      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004662:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4943      	ldr	r1, [pc, #268]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004674:	f7fe ffc8 	bl	8003608 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	e00a      	b.n	8004692 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467c:	f7fe ffc4 	bl	8003608 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e06e      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 020c 	and.w	r2, r3, #12
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1eb      	bne.n	800467c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046bc:	429a      	cmp	r2, r3
 80046be:	d208      	bcs.n	80046d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b2e      	ldr	r3, [pc, #184]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	492b      	ldr	r1, [pc, #172]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d210      	bcs.n	8004702 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 0207 	bic.w	r2, r3, #7
 80046e8:	4923      	ldr	r1, [pc, #140]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f0:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_RCC_ClockConfig+0x1ec>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e036      	b.n	8004770 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4918      	ldr	r1, [pc, #96]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4910      	ldr	r1, [pc, #64]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	4313      	orrs	r3, r2
 800473e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004740:	f000 f824 	bl	800478c <HAL_RCC_GetSysClockFreq>
 8004744:	4602      	mov	r2, r0
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	490b      	ldr	r1, [pc, #44]	; (8004780 <HAL_RCC_ClockConfig+0x1f4>)
 8004752:	5ccb      	ldrb	r3, [r1, r3]
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1f8>)
 800475e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1fc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe feff 	bl	8003568 <HAL_InitTick>
 800476a:	4603      	mov	r3, r0
 800476c:	72fb      	strb	r3, [r7, #11]

  return status;
 800476e:	7afb      	ldrb	r3, [r7, #11]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
 8004780:	0800d278 	.word	0x0800d278
 8004784:	20000010 	.word	0x20000010
 8004788:	20000014 	.word	0x20000014

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	b089      	sub	sp, #36	; 0x24
 8004790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479a:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a4:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d121      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d11e      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047c0:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047cc:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e005      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047dc:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047e8:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b04      	cmp	r3, #4
 8004802:	d102      	bne.n	800480a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004804:	4b25      	ldr	r3, [pc, #148]	; (800489c <HAL_RCC_GetSysClockFreq+0x110>)
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e004      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d101      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004810:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d134      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d003      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0xa6>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d003      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0xac>
 8004830:	e005      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004832:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_GetSysClockFreq+0x110>)
 8004834:	617b      	str	r3, [r7, #20]
      break;
 8004836:	e005      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800483a:	617b      	str	r3, [r7, #20]
      break;
 800483c:	e002      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	617b      	str	r3, [r7, #20]
      break;
 8004842:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	3301      	adds	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	fb03 f202 	mul.w	r2, r3, r2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_GetSysClockFreq+0x108>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	0e5b      	lsrs	r3, r3, #25
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	3301      	adds	r3, #1
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004884:	69bb      	ldr	r3, [r7, #24]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3724      	adds	r7, #36	; 0x24
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	0800d290 	.word	0x0800d290
 800489c:	00f42400 	.word	0x00f42400
 80048a0:	007a1200 	.word	0x007a1200

080048a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048aa:	681b      	ldr	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000010 	.word	0x20000010

080048bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048c0:	f7ff fff0 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	4904      	ldr	r1, [pc, #16]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048d2:	5ccb      	ldrb	r3, [r1, r3]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	0800d288 	.word	0x0800d288

080048e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048ec:	f7ff ffda 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	0adb      	lsrs	r3, r3, #11
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4904      	ldr	r1, [pc, #16]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	0800d288 	.word	0x0800d288

08004914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004920:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800492c:	f7ff f9ee 	bl	8003d0c <HAL_PWREx_GetVoltageRange>
 8004930:	6178      	str	r0, [r7, #20]
 8004932:	e014      	b.n	800495e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004934:	4b25      	ldr	r3, [pc, #148]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6593      	str	r3, [r2, #88]	; 0x58
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800494c:	f7ff f9de 	bl	8003d0c <HAL_PWREx_GetVoltageRange>
 8004950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d10b      	bne.n	800497e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d919      	bls.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2ba0      	cmp	r3, #160	; 0xa0
 8004970:	d902      	bls.n	8004978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004972:	2302      	movs	r3, #2
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e013      	b.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004978:	2301      	movs	r3, #1
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	e010      	b.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b80      	cmp	r3, #128	; 0x80
 8004982:	d902      	bls.n	800498a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004984:	2303      	movs	r3, #3
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	e00a      	b.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d102      	bne.n	8004996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004990:	2302      	movs	r3, #2
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	e004      	b.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b70      	cmp	r3, #112	; 0x70
 800499a:	d101      	bne.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800499c:	2301      	movs	r3, #1
 800499e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 0207 	bic.w	r2, r3, #7
 80049a8:	4909      	ldr	r1, [pc, #36]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d001      	beq.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40022000 	.word	0x40022000

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049dc:	2300      	movs	r3, #0
 80049de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e0:	2300      	movs	r3, #0
 80049e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d041      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049f8:	d02a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049fe:	d824      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a04:	d008      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a0a:	d81e      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d010      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a16:	e018      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a18:	4b86      	ldr	r3, [pc, #536]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a85      	ldr	r2, [pc, #532]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a24:	e015      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fabb 	bl	8004fa8 <RCCEx_PLLSAI1_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a36:	e00c      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3320      	adds	r3, #32
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fba6 	bl	8005190 <RCCEx_PLLSAI2_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a48:	e003      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a58:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a66:	4973      	ldr	r1, [pc, #460]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a6e:	e001      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d041      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a88:	d02a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a8e:	d824      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a94:	d008      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a9a:	d81e      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aa4:	d010      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004aa6:	e018      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aa8:	4b62      	ldr	r3, [pc, #392]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a61      	ldr	r2, [pc, #388]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab4:	e015      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fa73 	bl	8004fa8 <RCCEx_PLLSAI1_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac6:	e00c      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3320      	adds	r3, #32
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb5e 	bl	8005190 <RCCEx_PLLSAI2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ad8:	e003      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	74fb      	strb	r3, [r7, #19]
      break;
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ae8:	4b52      	ldr	r3, [pc, #328]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af6:	494f      	ldr	r1, [pc, #316]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004afe:	e001      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80a0 	beq.w	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2c:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b30:	4a40      	ldr	r2, [pc, #256]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b36:	6593      	str	r3, [r2, #88]	; 0x58
 8004b38:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b44:	2301      	movs	r3, #1
 8004b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b48:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3a      	ldr	r2, [pc, #232]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b54:	f7fe fd58 	bl	8003608 <HAL_GetTick>
 8004b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b5a:	e009      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5c:	f7fe fd54 	bl	8003608 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d902      	bls.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b6e:	e005      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b70:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ef      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b7c:	7cfb      	ldrb	r3, [r7, #19]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d15c      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b82:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01f      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d019      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ba0:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bac:	4b21      	ldr	r3, [pc, #132]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	4a20      	ldr	r2, [pc, #128]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fe fd13 	bl	8003608 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be4:	e00b      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fe fd0f 	bl	8003608 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d902      	bls.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ec      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c22:	4904      	ldr	r1, [pc, #16]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c2a:	e009      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	74bb      	strb	r3, [r7, #18]
 8004c30:	e006      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c40:	7c7b      	ldrb	r3, [r7, #17]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d105      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c46:	4b9e      	ldr	r3, [pc, #632]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	4a9d      	ldr	r2, [pc, #628]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5e:	4b98      	ldr	r3, [pc, #608]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f023 0203 	bic.w	r2, r3, #3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	4994      	ldr	r1, [pc, #592]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c80:	4b8f      	ldr	r3, [pc, #572]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 020c 	bic.w	r2, r3, #12
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	498c      	ldr	r1, [pc, #560]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ca2:	4b87      	ldr	r3, [pc, #540]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	4983      	ldr	r1, [pc, #524]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc4:	4b7e      	ldr	r3, [pc, #504]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	497b      	ldr	r1, [pc, #492]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ce6:	4b76      	ldr	r3, [pc, #472]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf4:	4972      	ldr	r1, [pc, #456]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d08:	4b6d      	ldr	r3, [pc, #436]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	496a      	ldr	r1, [pc, #424]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d2a:	4b65      	ldr	r3, [pc, #404]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d38:	4961      	ldr	r1, [pc, #388]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d4c:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	4959      	ldr	r1, [pc, #356]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d6e:	4b54      	ldr	r3, [pc, #336]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	4950      	ldr	r1, [pc, #320]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d90:	4b4b      	ldr	r3, [pc, #300]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	4948      	ldr	r1, [pc, #288]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004db2:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	493f      	ldr	r1, [pc, #252]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d028      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de2:	4937      	ldr	r1, [pc, #220]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df2:	d106      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df4:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4a31      	ldr	r2, [pc, #196]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfe:	60d3      	str	r3, [r2, #12]
 8004e00:	e011      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e0a:	d10c      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f8c8 	bl	8004fa8 <RCCEx_PLLSAI1_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d028      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e32:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	491f      	ldr	r1, [pc, #124]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e50:	d106      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4a1a      	ldr	r2, [pc, #104]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5c:	60d3      	str	r3, [r2, #12]
 8004e5e:	e011      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f899 	bl	8004fa8 <RCCEx_PLLSAI1_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02b      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	4908      	ldr	r1, [pc, #32]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eae:	d109      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a02      	ldr	r2, [pc, #8]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eba:	60d3      	str	r3, [r2, #12]
 8004ebc:	e014      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f867 	bl	8004fa8 <RCCEx_PLLSAI1_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02f      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef4:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f02:	4928      	ldr	r1, [pc, #160]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f844 	bl	8004fa8 <RCCEx_PLLSAI1_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d014      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	74bb      	strb	r3, [r7, #18]
 8004f2e:	e011      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f925 	bl	8005190 <RCCEx_PLLSAI2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f60:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6e:	490d      	ldr	r1, [pc, #52]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f92:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fb6:	4b75      	ldr	r3, [pc, #468]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d018      	beq.n	8004ff4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fc2:	4b72      	ldr	r3, [pc, #456]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0203 	and.w	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d10d      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fda:	4b6c      	ldr	r3, [pc, #432]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d047      	beq.n	800507e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e044      	b.n	800507e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d018      	beq.n	800502e <RCCEx_PLLSAI1_Config+0x86>
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d825      	bhi.n	800504c <RCCEx_PLLSAI1_Config+0xa4>
 8005000:	2b01      	cmp	r3, #1
 8005002:	d002      	beq.n	800500a <RCCEx_PLLSAI1_Config+0x62>
 8005004:	2b02      	cmp	r3, #2
 8005006:	d009      	beq.n	800501c <RCCEx_PLLSAI1_Config+0x74>
 8005008:	e020      	b.n	800504c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800500a:	4b60      	ldr	r3, [pc, #384]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11d      	bne.n	8005052 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501a:	e01a      	b.n	8005052 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800501c:	4b5b      	ldr	r3, [pc, #364]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d116      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502c:	e013      	b.n	8005056 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800502e:	4b57      	ldr	r3, [pc, #348]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10f      	bne.n	800505a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800503a:	4b54      	ldr	r3, [pc, #336]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800504a:	e006      	b.n	800505a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      break;
 8005050:	e004      	b.n	800505c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800505a:	bf00      	nop
    }

    if(status == HAL_OK)
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005062:	4b4a      	ldr	r3, [pc, #296]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	3b01      	subs	r3, #1
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	430b      	orrs	r3, r1
 8005078:	4944      	ldr	r1, [pc, #272]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d17d      	bne.n	8005180 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005084:	4b41      	ldr	r3, [pc, #260]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a40      	ldr	r2, [pc, #256]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800508e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005090:	f7fe faba 	bl	8003608 <HAL_GetTick>
 8005094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005096:	e009      	b.n	80050ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005098:	f7fe fab6 	bl	8003608 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	73fb      	strb	r3, [r7, #15]
        break;
 80050aa:	e005      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ac:	4b37      	ldr	r3, [pc, #220]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ef      	bne.n	8005098 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d160      	bne.n	8005180 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d111      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c4:	4b31      	ldr	r3, [pc, #196]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6892      	ldr	r2, [r2, #8]
 80050d4:	0211      	lsls	r1, r2, #8
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68d2      	ldr	r2, [r2, #12]
 80050da:	0912      	lsrs	r2, r2, #4
 80050dc:	0452      	lsls	r2, r2, #17
 80050de:	430a      	orrs	r2, r1
 80050e0:	492a      	ldr	r1, [pc, #168]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	610b      	str	r3, [r1, #16]
 80050e6:	e027      	b.n	8005138 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d112      	bne.n	8005114 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ee:	4b27      	ldr	r3, [pc, #156]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6892      	ldr	r2, [r2, #8]
 80050fe:	0211      	lsls	r1, r2, #8
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6912      	ldr	r2, [r2, #16]
 8005104:	0852      	lsrs	r2, r2, #1
 8005106:	3a01      	subs	r2, #1
 8005108:	0552      	lsls	r2, r2, #21
 800510a:	430a      	orrs	r2, r1
 800510c:	491f      	ldr	r1, [pc, #124]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	610b      	str	r3, [r1, #16]
 8005112:	e011      	b.n	8005138 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800511c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	0211      	lsls	r1, r2, #8
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6952      	ldr	r2, [r2, #20]
 800512a:	0852      	lsrs	r2, r2, #1
 800512c:	3a01      	subs	r2, #1
 800512e:	0652      	lsls	r2, r2, #25
 8005130:	430a      	orrs	r2, r1
 8005132:	4916      	ldr	r1, [pc, #88]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a13      	ldr	r2, [pc, #76]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800513e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005142:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fe fa60 	bl	8003608 <HAL_GetTick>
 8005148:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800514a:	e009      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800514c:	f7fe fa5c 	bl	8003608 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d902      	bls.n	8005160 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	73fb      	strb	r3, [r7, #15]
          break;
 800515e:	e005      	b.n	800516c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	4904      	ldr	r1, [pc, #16]	; (800518c <RCCEx_PLLSAI1_Config+0x1e4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000

08005190 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800519e:	4b6a      	ldr	r3, [pc, #424]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051aa:	4b67      	ldr	r3, [pc, #412]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0203 	and.w	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d10d      	bne.n	80051d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
       ||
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051c2:	4b61      	ldr	r3, [pc, #388]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
       ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d047      	beq.n	8005266 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
 80051da:	e044      	b.n	8005266 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d018      	beq.n	8005216 <RCCEx_PLLSAI2_Config+0x86>
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d825      	bhi.n	8005234 <RCCEx_PLLSAI2_Config+0xa4>
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d002      	beq.n	80051f2 <RCCEx_PLLSAI2_Config+0x62>
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d009      	beq.n	8005204 <RCCEx_PLLSAI2_Config+0x74>
 80051f0:	e020      	b.n	8005234 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051f2:	4b55      	ldr	r3, [pc, #340]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11d      	bne.n	800523a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005202:	e01a      	b.n	800523a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005204:	4b50      	ldr	r3, [pc, #320]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d116      	bne.n	800523e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005214:	e013      	b.n	800523e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005216:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005222:	4b49      	ldr	r3, [pc, #292]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005232:	e006      	b.n	8005242 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e004      	b.n	8005244 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800523a:	bf00      	nop
 800523c:	e002      	b.n	8005244 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005242:	bf00      	nop
    }

    if(status == HAL_OK)
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800524a:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	430b      	orrs	r3, r1
 8005260:	4939      	ldr	r1, [pc, #228]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005262:	4313      	orrs	r3, r2
 8005264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d167      	bne.n	800533c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a35      	ldr	r2, [pc, #212]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005278:	f7fe f9c6 	bl	8003608 <HAL_GetTick>
 800527c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800527e:	e009      	b.n	8005294 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005280:	f7fe f9c2 	bl	8003608 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d902      	bls.n	8005294 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	73fb      	strb	r3, [r7, #15]
        break;
 8005292:	e005      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005294:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1ef      	bne.n	8005280 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d14a      	bne.n	800533c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d111      	bne.n	80052d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6892      	ldr	r2, [r2, #8]
 80052bc:	0211      	lsls	r1, r2, #8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68d2      	ldr	r2, [r2, #12]
 80052c2:	0912      	lsrs	r2, r2, #4
 80052c4:	0452      	lsls	r2, r2, #17
 80052c6:	430a      	orrs	r2, r1
 80052c8:	491f      	ldr	r1, [pc, #124]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	614b      	str	r3, [r1, #20]
 80052ce:	e011      	b.n	80052f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6892      	ldr	r2, [r2, #8]
 80052e0:	0211      	lsls	r1, r2, #8
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6912      	ldr	r2, [r2, #16]
 80052e6:	0852      	lsrs	r2, r2, #1
 80052e8:	3a01      	subs	r2, #1
 80052ea:	0652      	lsls	r2, r2, #25
 80052ec:	430a      	orrs	r2, r1
 80052ee:	4916      	ldr	r1, [pc, #88]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052f4:	4b14      	ldr	r3, [pc, #80]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005300:	f7fe f982 	bl	8003608 <HAL_GetTick>
 8005304:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005306:	e009      	b.n	800531c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005308:	f7fe f97e 	bl	8003608 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d902      	bls.n	800531c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	73fb      	strb	r3, [r7, #15]
          break;
 800531a:	e005      	b.n	8005328 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ef      	beq.n	8005308 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	4904      	ldr	r1, [pc, #16]	; (8005348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005338:	4313      	orrs	r3, r2
 800533a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000

0800534c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e095      	b.n	800548a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	d108      	bne.n	8005378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536e:	d009      	beq.n	8005384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	61da      	str	r2, [r3, #28]
 8005376:	e005      	b.n	8005384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fd fdec 	bl	8002f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c4:	d902      	bls.n	80053cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e002      	b.n	80053d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053da:	d007      	beq.n	80053ec <HAL_SPI_Init+0xa0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	ea42 0103 	orr.w	r1, r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	f003 0204 	and.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005468:	ea42 0103 	orr.w	r1, r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b088      	sub	sp, #32
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	603b      	str	r3, [r7, #0]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_SPI_Transmit+0x22>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e158      	b.n	8005766 <HAL_SPI_Transmit+0x2d4>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054bc:	f7fe f8a4 	bl	8003608 <HAL_GetTick>
 80054c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054d6:	e13d      	b.n	8005754 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_Transmit+0x52>
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054e8:	e134      	b.n	8005754 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2203      	movs	r2, #3
 80054ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	88fa      	ldrh	r2, [r7, #6]
 8005502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005534:	d10f      	bne.n	8005556 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d007      	beq.n	8005574 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800557c:	d94b      	bls.n	8005616 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0xfa>
 8005586:	8afb      	ldrh	r3, [r7, #22]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d13e      	bne.n	800560a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	881a      	ldrh	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	1c9a      	adds	r2, r3, #2
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055b0:	e02b      	b.n	800560a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d112      	bne.n	80055e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e4:	e011      	b.n	800560a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e6:	f7fe f80f 	bl	8003608 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d803      	bhi.n	80055fe <HAL_SPI_Transmit+0x16c>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Transmit+0x172>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005608:	e0a4      	b.n	8005754 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ce      	bne.n	80055b2 <HAL_SPI_Transmit+0x120>
 8005614:	e07c      	b.n	8005710 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x192>
 800561e:	8afb      	ldrh	r3, [r7, #22]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d170      	bne.n	8005706 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d912      	bls.n	8005654 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b02      	subs	r3, #2
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005652:	e058      	b.n	8005706 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800567a:	e044      	b.n	8005706 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d12b      	bne.n	80056e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d912      	bls.n	80056ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b02      	subs	r3, #2
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b8:	e025      	b.n	8005706 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056e0:	e011      	b.n	8005706 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e2:	f7fd ff91 	bl	8003608 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d803      	bhi.n	80056fa <HAL_SPI_Transmit+0x268>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d102      	bne.n	8005700 <HAL_SPI_Transmit+0x26e>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005704:	e026      	b.n	8005754 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1b5      	bne.n	800567c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fce3 	bl	80060e0 <SPI_EndRxTxTransaction>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e000      	b.n	8005754 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005764:	7ffb      	ldrb	r3, [r7, #31]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b088      	sub	sp, #32
 8005772:	af02      	add	r7, sp, #8
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578a:	d112      	bne.n	80057b2 <HAL_SPI_Receive+0x44>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10e      	bne.n	80057b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2204      	movs	r2, #4
 8005798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800579c:	88fa      	ldrh	r2, [r7, #6]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f910 	bl	80059ce <HAL_SPI_TransmitReceive>
 80057ae:	4603      	mov	r3, r0
 80057b0:	e109      	b.n	80059c6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_SPI_Receive+0x52>
 80057bc:	2302      	movs	r3, #2
 80057be:	e102      	b.n	80059c6 <HAL_SPI_Receive+0x258>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c8:	f7fd ff1e 	bl	8003608 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057da:	2302      	movs	r3, #2
 80057dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057de:	e0e9      	b.n	80059b4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_Receive+0x7e>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057f0:	e0e0      	b.n	80059b4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2204      	movs	r2, #4
 80057f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583c:	d908      	bls.n	8005850 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	e007      	b.n	8005860 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	d10f      	bne.n	800588a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005878:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d007      	beq.n	80058a8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b0:	d867      	bhi.n	8005982 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058b2:	e030      	b.n	8005916 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d117      	bne.n	80058f2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f103 020c 	add.w	r2, r3, #12
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058f0:	e011      	b.n	8005916 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f2:	f7fd fe89 	bl	8003608 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d803      	bhi.n	800590a <HAL_SPI_Receive+0x19c>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d102      	bne.n	8005910 <HAL_SPI_Receive+0x1a2>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005914:	e04e      	b.n	80059b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1c8      	bne.n	80058b4 <HAL_SPI_Receive+0x146>
 8005922:	e034      	b.n	800598e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d115      	bne.n	800595e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	b292      	uxth	r2, r2
 800593e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800595c:	e011      	b.n	8005982 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595e:	f7fd fe53 	bl	8003608 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d803      	bhi.n	8005976 <HAL_SPI_Receive+0x208>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d102      	bne.n	800597c <HAL_SPI_Receive+0x20e>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005980:	e018      	b.n	80059b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ca      	bne.n	8005924 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fb4c 	bl	8006030 <SPI_EndRxTransaction>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
 80059b0:	e000      	b.n	80059b4 <HAL_SPI_Receive+0x246>
  }

error :
 80059b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08a      	sub	sp, #40	; 0x28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059dc:	2301      	movs	r3, #1
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x26>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e1fb      	b.n	8005dec <HAL_SPI_TransmitReceive+0x41e>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059fc:	f7fd fe04 	bl	8003608 <HAL_GetTick>
 8005a00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a10:	887b      	ldrh	r3, [r7, #2]
 8005a12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a18:	7efb      	ldrb	r3, [r7, #27]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d00e      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x6e>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a24:	d106      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x66>
 8005a2e:	7efb      	ldrb	r3, [r7, #27]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d003      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a3a:	e1cd      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x80>
 8005a48:	887b      	ldrh	r3, [r7, #2]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a54:	e1c0      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d003      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2205      	movs	r2, #5
 8005a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	887a      	ldrh	r2, [r7, #2]
 8005a7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	887a      	ldrh	r2, [r7, #2]
 8005a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	887a      	ldrh	r2, [r7, #2]
 8005a96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aac:	d802      	bhi.n	8005ab4 <HAL_SPI_TransmitReceive+0xe6>
 8005aae:	8a3b      	ldrh	r3, [r7, #16]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d908      	bls.n	8005ac6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	e007      	b.n	8005ad6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d007      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005afc:	d97c      	bls.n	8005bf8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_SPI_TransmitReceive+0x13e>
 8005b06:	8a7b      	ldrh	r3, [r7, #18]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d169      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	881a      	ldrh	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	1c9a      	adds	r2, r3, #2
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b30:	e056      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11b      	bne.n	8005b78 <HAL_SPI_TransmitReceive+0x1aa>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d016      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0x1aa>
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d113      	bne.n	8005b78 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	1c9a      	adds	r2, r3, #2
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d11c      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x1f2>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bc0:	f7fd fd22 	bl	8003608 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d807      	bhi.n	8005be0 <HAL_SPI_TransmitReceive+0x212>
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d003      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bde:	e0fb      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1a3      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x164>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d19d      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x164>
 8005bf6:	e0df      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x23a>
 8005c00:	8a7b      	ldrh	r3, [r7, #18]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 80cb 	bne.w	8005d9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d912      	bls.n	8005c38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b02      	subs	r3, #2
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c36:	e0b2      	b.n	8005d9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5e:	e09e      	b.n	8005d9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d134      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x30a>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d02f      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x30a>
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d12c      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d912      	bls.n	8005cae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b02      	subs	r3, #2
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cac:	e012      	b.n	8005cd4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d148      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x3aa>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d042      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d923      	bls.n	8005d46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b02      	subs	r3, #2
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d81f      	bhi.n	8005d74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d42:	605a      	str	r2, [r3, #4]
 8005d44:	e016      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f103 020c 	add.w	r2, r3, #12
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	7812      	ldrb	r2, [r2, #0]
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d74:	2301      	movs	r3, #1
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d78:	f7fd fc46 	bl	8003608 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d803      	bhi.n	8005d90 <HAL_SPI_TransmitReceive+0x3c2>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d102      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x3c8>
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d9c:	e01c      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f47f af5b 	bne.w	8005c60 <HAL_SPI_TransmitReceive+0x292>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f47f af54 	bne.w	8005c60 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f98f 	bl	80060e0 <SPI_EndRxTxTransaction>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	661a      	str	r2, [r3, #96]	; 0x60
 8005dd4:	e000      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005dd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3728      	adds	r7, #40	; 0x28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e04:	f7fd fc00 	bl	8003608 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e14:	f7fd fbf8 	bl	8003608 <HAL_GetTick>
 8005e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e1a:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	015b      	lsls	r3, r3, #5
 8005e20:	0d1b      	lsrs	r3, r3, #20
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e2a:	e054      	b.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d050      	beq.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e34:	f7fd fbe8 	bl	8003608 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d902      	bls.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e62:	d111      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	d004      	beq.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e76:	d107      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e90:	d10f      	bne.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e017      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d19b      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000010 	.word	0x20000010

08005f04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f16:	f7fd fb77 	bl	8003608 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f26:	f7fd fb6f 	bl	8003608 <HAL_GetTick>
 8005f2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f34:	4b3d      	ldr	r3, [pc, #244]	; (800602c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00da      	lsls	r2, r3, #3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	0d1b      	lsrs	r3, r3, #20
 8005f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f4c:	e060      	b.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f54:	d107      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d050      	beq.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f6e:	f7fd fb4b 	bl	8003608 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d902      	bls.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d13d      	bne.n	8006000 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f9c:	d111      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa6:	d004      	beq.n	8005fb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d107      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fca:	d10f      	bne.n	8005fec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e010      	b.n	8006022 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	3b01      	subs	r3, #1
 800600e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d196      	bne.n	8005f4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000010 	.word	0x20000010

08006030 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006044:	d111      	bne.n	800606a <SPI_EndRxTransaction+0x3a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604e:	d004      	beq.n	800605a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006058:	d107      	bne.n	800606a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2200      	movs	r2, #0
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff febd 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e023      	b.n	80060d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006098:	d11d      	bne.n	80060d6 <SPI_EndRxTransaction+0xa6>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	d004      	beq.n	80060ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d113      	bne.n	80060d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7ff ff22 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	f043 0220 	orr.w	r2, r3, #32
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e000      	b.n	80060d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff03 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e027      	b.n	8006164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	2180      	movs	r1, #128	; 0x80
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fe68 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e014      	b.n	8006164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff fedc 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	f043 0220 	orr.w	r2, r3, #32
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e000      	b.n	8006164 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e040      	b.n	8006200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fc ff36 	bl	8003000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2224      	movs	r2, #36	; 0x24
 8006198:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fcce 	bl	8006b4c <UART_SetConfig>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e022      	b.n	8006200 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 ff7a 	bl	80070bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f801 	bl	8007200 <UART_CheckIdleState>
 80061fe:	4603      	mov	r3, r0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621c:	2b20      	cmp	r3, #32
 800621e:	f040 80bf 	bne.w	80063a0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_UART_Receive+0x26>
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0b7      	b.n	80063a2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_UART_Receive+0x38>
 800623c:	2302      	movs	r3, #2
 800623e:	e0b0      	b.n	80063a2 <HAL_UART_Receive+0x19a>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2222      	movs	r2, #34	; 0x22
 8006254:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625c:	f7fd f9d4 	bl	8003608 <HAL_GetTick>
 8006260:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	88fa      	ldrh	r2, [r7, #6]
 8006266:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627a:	d10e      	bne.n	800629a <HAL_UART_Receive+0x92>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d105      	bne.n	8006290 <HAL_UART_Receive+0x88>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f240 12ff 	movw	r2, #511	; 0x1ff
 800628a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800628e:	e02d      	b.n	80062ec <HAL_UART_Receive+0xe4>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	22ff      	movs	r2, #255	; 0xff
 8006294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006298:	e028      	b.n	80062ec <HAL_UART_Receive+0xe4>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10d      	bne.n	80062be <HAL_UART_Receive+0xb6>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <HAL_UART_Receive+0xac>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	22ff      	movs	r2, #255	; 0xff
 80062ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062b2:	e01b      	b.n	80062ec <HAL_UART_Receive+0xe4>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	227f      	movs	r2, #127	; 0x7f
 80062b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062bc:	e016      	b.n	80062ec <HAL_UART_Receive+0xe4>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062c6:	d10d      	bne.n	80062e4 <HAL_UART_Receive+0xdc>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_UART_Receive+0xd2>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	227f      	movs	r2, #127	; 0x7f
 80062d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d8:	e008      	b.n	80062ec <HAL_UART_Receive+0xe4>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	223f      	movs	r2, #63	; 0x3f
 80062de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062e2:	e003      	b.n	80062ec <HAL_UART_Receive+0xe4>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062f2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Receive+0x108>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006320:	e033      	b.n	800638a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2120      	movs	r1, #32
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 ffb0 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e032      	b.n	80063a2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10c      	bne.n	800635c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006348:	b29a      	uxth	r2, r3
 800634a:	8a7b      	ldrh	r3, [r7, #18]
 800634c:	4013      	ands	r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	3302      	adds	r3, #2
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e00d      	b.n	8006378 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006362:	b29b      	uxth	r3, r3
 8006364:	b2da      	uxtb	r2, r3
 8006366:	8a7b      	ldrh	r3, [r7, #18]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	4013      	ands	r3, r2
 800636c:	b2da      	uxtb	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1c5      	bne.n	8006322 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b08b      	sub	sp, #44	; 0x2c
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d156      	bne.n	8006470 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_UART_Transmit_IT+0x22>
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e04f      	b.n	8006472 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Transmit_IT+0x34>
 80063dc:	2302      	movs	r3, #2
 80063de:	e048      	b.n	8006472 <HAL_UART_Transmit_IT+0xc6>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2221      	movs	r2, #33	; 0x21
 8006410:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	d107      	bne.n	800642c <HAL_UART_Transmit_IT+0x80>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a16      	ldr	r2, [pc, #88]	; (8006480 <HAL_UART_Transmit_IT+0xd4>)
 8006428:	669a      	str	r2, [r3, #104]	; 0x68
 800642a:	e002      	b.n	8006432 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a15      	ldr	r2, [pc, #84]	; (8006484 <HAL_UART_Transmit_IT+0xd8>)
 8006430:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	613b      	str	r3, [r7, #16]
   return(result);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	623b      	str	r3, [r7, #32]
 800645a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	6a3a      	ldr	r2, [r7, #32]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	61bb      	str	r3, [r7, #24]
   return(result);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e6      	bne.n	800643a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e000      	b.n	8006472 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006470:	2302      	movs	r3, #2
  }
}
 8006472:	4618      	mov	r0, r3
 8006474:	372c      	adds	r7, #44	; 0x2c
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	0800775b 	.word	0x0800775b
 8006484:	080076a3 	.word	0x080076a3

08006488 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649a:	2b20      	cmp	r3, #32
 800649c:	d142      	bne.n	8006524 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_UART_Receive_IT+0x22>
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e03b      	b.n	8006526 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Receive_IT+0x34>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e034      	b.n	8006526 <HAL_UART_Receive_IT+0x9e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a18      	ldr	r2, [pc, #96]	; (8006530 <HAL_UART_Receive_IT+0xa8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01f      	beq.n	8006514 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d018      	beq.n	8006514 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	613b      	str	r3, [r7, #16]
   return(result);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	623b      	str	r3, [r7, #32]
 8006502:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	61bb      	str	r3, [r7, #24]
   return(result);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e6      	bne.n	80064e2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	461a      	mov	r2, r3
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 ff7e 	bl	800741c <UART_Start_Receive_IT>
 8006520:	4603      	mov	r3, r0
 8006522:	e000      	b.n	8006526 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40008000 	.word	0x40008000

08006534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b0ba      	sub	sp, #232	; 0xe8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800655a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800655e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006562:	4013      	ands	r3, r2
 8006564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00f      	beq.n	800659c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 82a6 	beq.w	8006ade <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
      }
      return;
 800659a:	e2a0      	b.n	8006ade <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800659c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8117 	beq.w	80067d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065b6:	4b85      	ldr	r3, [pc, #532]	; (80067cc <HAL_UART_IRQHandler+0x298>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 810a 	beq.w	80067d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <HAL_UART_IRQHandler+0xbc>
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e6:	f043 0201 	orr.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_UART_IRQHandler+0xec>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2202      	movs	r2, #2
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006616:	f043 0204 	orr.w	r2, r3, #4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0x11c>
 800662c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2204      	movs	r2, #4
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006646:	f043 0202 	orr.w	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006694:	2b00      	cmp	r3, #0
 8006696:	d012      	beq.n	80066be <HAL_UART_IRQHandler+0x18a>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 820c 	beq.w	8006ae2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d005      	beq.n	8006716 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800670a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006712:	2b00      	cmp	r3, #0
 8006714:	d04f      	beq.n	80067b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 ff4a 	bl	80075b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d141      	bne.n	80067ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3308      	adds	r3, #8
 8006752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800675a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800676e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1d9      	bne.n	800672a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	2b00      	cmp	r3, #0
 800677c:	d013      	beq.n	80067a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <HAL_UART_IRQHandler+0x29c>)
 8006784:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd f8bb 	bl	8003906 <HAL_DMA_Abort_IT>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d017      	beq.n	80067c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e00f      	b.n	80067c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9ba 	bl	8006b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e00b      	b.n	80067c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f9b6 	bl	8006b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e007      	b.n	80067c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9b2 	bl	8006b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067c4:	e18d      	b.n	8006ae2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c6:	bf00      	nop
    return;
 80067c8:	e18b      	b.n	8006ae2 <HAL_UART_IRQHandler+0x5ae>
 80067ca:	bf00      	nop
 80067cc:	04000120 	.word	0x04000120
 80067d0:	08007677 	.word	0x08007677

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 8146 	bne.w	8006a6a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 813f 	beq.w	8006a6a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8138 	beq.w	8006a6a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2210      	movs	r2, #16
 8006800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	f040 80b4 	bne.w	800697a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800681e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 815f 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800682e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006832:	429a      	cmp	r2, r3
 8006834:	f080 8157 	bcs.w	8006ae6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800683e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 8085 	bne.w	800695e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800686c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800687e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800688a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1da      	bne.n	8006854 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e1      	bne.n	800689e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3308      	adds	r3, #8
 80068fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800690c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e3      	bne.n	80068da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800692c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006940:	65bb      	str	r3, [r7, #88]	; 0x58
 8006942:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800694e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e4      	bne.n	800691e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	4618      	mov	r0, r3
 800695a:	f7fc ff96 	bl	800388a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696a:	b29b      	uxth	r3, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	b29b      	uxth	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f8de 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006978:	e0b5      	b.n	8006ae6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006986:	b29b      	uxth	r3, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80a7 	beq.w	8006aea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800699c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80a2 	beq.w	8006aea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069c8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e4      	bne.n	80069a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	623b      	str	r3, [r7, #32]
   return(result);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a00:	633a      	str	r2, [r7, #48]	; 0x30
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e3      	bne.n	80069dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	617b      	str	r3, [r7, #20]
   return(result);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e4      	bne.n	8006a26 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f866 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a68:	e03f      	b.n	8006aea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00e      	beq.n	8006a94 <HAL_UART_IRQHandler+0x560>
 8006a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f84e 	bl	8007b2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a92:	e02d      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01c      	beq.n	8006aee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
    }
    return;
 8006abc:	e017      	b.n	8006aee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d012      	beq.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
 8006aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fe9f 	bl	800781a <UART_EndTransmit_IT>
    return;
 8006adc:	e008      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ade:	bf00      	nop
 8006ae0:	e006      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006aee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006af0:	37e8      	adds	r7, #232	; 0xe8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b50:	b08a      	sub	sp, #40	; 0x28
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4ba4      	ldr	r3, [pc, #656]	; (8006e0c <UART_SetConfig+0x2c0>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a99      	ldr	r2, [pc, #612]	; (8006e10 <UART_SetConfig+0x2c4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a90      	ldr	r2, [pc, #576]	; (8006e14 <UART_SetConfig+0x2c8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d126      	bne.n	8006c24 <UART_SetConfig+0xd8>
 8006bd6:	4b90      	ldr	r3, [pc, #576]	; (8006e18 <UART_SetConfig+0x2cc>)
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d81b      	bhi.n	8006c1c <UART_SetConfig+0xd0>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0xa0>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	08006c05 	.word	0x08006c05
 8006bf8:	08006c15 	.word	0x08006c15
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c02:	e116      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c04:	2302      	movs	r3, #2
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0a:	e112      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e10e      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c14:	2308      	movs	r3, #8
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e10a      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e106      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a7c      	ldr	r2, [pc, #496]	; (8006e1c <UART_SetConfig+0x2d0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d138      	bne.n	8006ca0 <UART_SetConfig+0x154>
 8006c2e:	4b7a      	ldr	r3, [pc, #488]	; (8006e18 <UART_SetConfig+0x2cc>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f003 030c 	and.w	r3, r3, #12
 8006c38:	2b0c      	cmp	r3, #12
 8006c3a:	d82d      	bhi.n	8006c98 <UART_SetConfig+0x14c>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <UART_SetConfig+0xf8>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006c99 	.word	0x08006c99
 8006c4c:	08006c99 	.word	0x08006c99
 8006c50:	08006c99 	.word	0x08006c99
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006c99 	.word	0x08006c99
 8006c5c:	08006c99 	.word	0x08006c99
 8006c60:	08006c99 	.word	0x08006c99
 8006c64:	08006c81 	.word	0x08006c81
 8006c68:	08006c99 	.word	0x08006c99
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	08006c99 	.word	0x08006c99
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e0d8      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c80:	2302      	movs	r3, #2
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e0d4      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e0d0      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e0cc      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e0c8      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <UART_SetConfig+0x2d4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d125      	bne.n	8006cf6 <UART_SetConfig+0x1aa>
 8006caa:	4b5b      	ldr	r3, [pc, #364]	; (8006e18 <UART_SetConfig+0x2cc>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cb4:	2b30      	cmp	r3, #48	; 0x30
 8006cb6:	d016      	beq.n	8006ce6 <UART_SetConfig+0x19a>
 8006cb8:	2b30      	cmp	r3, #48	; 0x30
 8006cba:	d818      	bhi.n	8006cee <UART_SetConfig+0x1a2>
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d00a      	beq.n	8006cd6 <UART_SetConfig+0x18a>
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d814      	bhi.n	8006cee <UART_SetConfig+0x1a2>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <UART_SetConfig+0x182>
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d008      	beq.n	8006cde <UART_SetConfig+0x192>
 8006ccc:	e00f      	b.n	8006cee <UART_SetConfig+0x1a2>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd4:	e0ad      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cdc:	e0a9      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006cde:	2304      	movs	r3, #4
 8006ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce4:	e0a5      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cec:	e0a1      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006cee:	2310      	movs	r3, #16
 8006cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf4:	e09d      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a4a      	ldr	r2, [pc, #296]	; (8006e24 <UART_SetConfig+0x2d8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d125      	bne.n	8006d4c <UART_SetConfig+0x200>
 8006d00:	4b45      	ldr	r3, [pc, #276]	; (8006e18 <UART_SetConfig+0x2cc>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d0c:	d016      	beq.n	8006d3c <UART_SetConfig+0x1f0>
 8006d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d10:	d818      	bhi.n	8006d44 <UART_SetConfig+0x1f8>
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d00a      	beq.n	8006d2c <UART_SetConfig+0x1e0>
 8006d16:	2b80      	cmp	r3, #128	; 0x80
 8006d18:	d814      	bhi.n	8006d44 <UART_SetConfig+0x1f8>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <UART_SetConfig+0x1d8>
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d008      	beq.n	8006d34 <UART_SetConfig+0x1e8>
 8006d22:	e00f      	b.n	8006d44 <UART_SetConfig+0x1f8>
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2a:	e082      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d32:	e07e      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e07a      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e076      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4a:	e072      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a35      	ldr	r2, [pc, #212]	; (8006e28 <UART_SetConfig+0x2dc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d12a      	bne.n	8006dac <UART_SetConfig+0x260>
 8006d56:	4b30      	ldr	r3, [pc, #192]	; (8006e18 <UART_SetConfig+0x2cc>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d64:	d01a      	beq.n	8006d9c <UART_SetConfig+0x250>
 8006d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6a:	d81b      	bhi.n	8006da4 <UART_SetConfig+0x258>
 8006d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d70:	d00c      	beq.n	8006d8c <UART_SetConfig+0x240>
 8006d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d76:	d815      	bhi.n	8006da4 <UART_SetConfig+0x258>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <UART_SetConfig+0x238>
 8006d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d80:	d008      	beq.n	8006d94 <UART_SetConfig+0x248>
 8006d82:	e00f      	b.n	8006da4 <UART_SetConfig+0x258>
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8a:	e052      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e04e      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e04a      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e046      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006daa:	e042      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <UART_SetConfig+0x2c4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d13a      	bne.n	8006e2c <UART_SetConfig+0x2e0>
 8006db6:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <UART_SetConfig+0x2cc>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc4:	d01a      	beq.n	8006dfc <UART_SetConfig+0x2b0>
 8006dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dca:	d81b      	bhi.n	8006e04 <UART_SetConfig+0x2b8>
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd0:	d00c      	beq.n	8006dec <UART_SetConfig+0x2a0>
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd6:	d815      	bhi.n	8006e04 <UART_SetConfig+0x2b8>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <UART_SetConfig+0x298>
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d008      	beq.n	8006df4 <UART_SetConfig+0x2a8>
 8006de2:	e00f      	b.n	8006e04 <UART_SetConfig+0x2b8>
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dea:	e022      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006dec:	2302      	movs	r3, #2
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df2:	e01e      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e01a      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e02:	e016      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0a:	e012      	b.n	8006e32 <UART_SetConfig+0x2e6>
 8006e0c:	efff69f3 	.word	0xefff69f3
 8006e10:	40008000 	.word	0x40008000
 8006e14:	40013800 	.word	0x40013800
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	40004400 	.word	0x40004400
 8006e20:	40004800 	.word	0x40004800
 8006e24:	40004c00 	.word	0x40004c00
 8006e28:	40005000 	.word	0x40005000
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a9f      	ldr	r2, [pc, #636]	; (80070b4 <UART_SetConfig+0x568>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d17a      	bne.n	8006f32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d824      	bhi.n	8006e8e <UART_SetConfig+0x342>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <UART_SetConfig+0x300>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e8f 	.word	0x08006e8f
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e8f 	.word	0x08006e8f
 8006e5c:	08006e7f 	.word	0x08006e7f
 8006e60:	08006e8f 	.word	0x08006e8f
 8006e64:	08006e8f 	.word	0x08006e8f
 8006e68:	08006e8f 	.word	0x08006e8f
 8006e6c:	08006e87 	.word	0x08006e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e70:	f7fd fd24 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 8006e74:	61f8      	str	r0, [r7, #28]
        break;
 8006e76:	e010      	b.n	8006e9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e78:	4b8f      	ldr	r3, [pc, #572]	; (80070b8 <UART_SetConfig+0x56c>)
 8006e7a:	61fb      	str	r3, [r7, #28]
        break;
 8006e7c:	e00d      	b.n	8006e9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fd fc85 	bl	800478c <HAL_RCC_GetSysClockFreq>
 8006e82:	61f8      	str	r0, [r7, #28]
        break;
 8006e84:	e009      	b.n	8006e9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8a:	61fb      	str	r3, [r7, #28]
        break;
 8006e8c:	e005      	b.n	8006e9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80fb 	beq.w	8007098 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d305      	bcc.n	8006ebe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d903      	bls.n	8006ec6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ec4:	e0e8      	b.n	8007098 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	461c      	mov	r4, r3
 8006ecc:	4615      	mov	r5, r2
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	022b      	lsls	r3, r5, #8
 8006ed8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006edc:	0222      	lsls	r2, r4, #8
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	6849      	ldr	r1, [r1, #4]
 8006ee2:	0849      	lsrs	r1, r1, #1
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	4688      	mov	r8, r1
 8006ee8:	4681      	mov	r9, r0
 8006eea:	eb12 0a08 	adds.w	sl, r2, r8
 8006eee:	eb43 0b09 	adc.w	fp, r3, r9
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	4650      	mov	r0, sl
 8006f02:	4659      	mov	r1, fp
 8006f04:	f7f9 fec0 	bl	8000c88 <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f16:	d308      	bcc.n	8006f2a <UART_SetConfig+0x3de>
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1e:	d204      	bcs.n	8006f2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	60da      	str	r2, [r3, #12]
 8006f28:	e0b6      	b.n	8007098 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f30:	e0b2      	b.n	8007098 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f3a:	d15e      	bne.n	8006ffa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d828      	bhi.n	8006f96 <UART_SetConfig+0x44a>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0x400>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f79 	.word	0x08006f79
 8006f54:	08006f81 	.word	0x08006f81
 8006f58:	08006f97 	.word	0x08006f97
 8006f5c:	08006f87 	.word	0x08006f87
 8006f60:	08006f97 	.word	0x08006f97
 8006f64:	08006f97 	.word	0x08006f97
 8006f68:	08006f97 	.word	0x08006f97
 8006f6c:	08006f8f 	.word	0x08006f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7fd fca4 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 8006f74:	61f8      	str	r0, [r7, #28]
        break;
 8006f76:	e014      	b.n	8006fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f78:	f7fd fcb6 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
 8006f7c:	61f8      	str	r0, [r7, #28]
        break;
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f80:	4b4d      	ldr	r3, [pc, #308]	; (80070b8 <UART_SetConfig+0x56c>)
 8006f82:	61fb      	str	r3, [r7, #28]
        break;
 8006f84:	e00d      	b.n	8006fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f86:	f7fd fc01 	bl	800478c <HAL_RCC_GetSysClockFreq>
 8006f8a:	61f8      	str	r0, [r7, #28]
        break;
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f92:	61fb      	str	r3, [r7, #28]
        break;
 8006f94:	e005      	b.n	8006fa2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d077      	beq.n	8007098 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	005a      	lsls	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b0f      	cmp	r3, #15
 8006fc2:	d916      	bls.n	8006ff2 <UART_SetConfig+0x4a6>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fca:	d212      	bcs.n	8006ff2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f023 030f 	bic.w	r3, r3, #15
 8006fd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	8afb      	ldrh	r3, [r7, #22]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	8afa      	ldrh	r2, [r7, #22]
 8006fee:	60da      	str	r2, [r3, #12]
 8006ff0:	e052      	b.n	8007098 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ff8:	e04e      	b.n	8007098 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d827      	bhi.n	8007052 <UART_SetConfig+0x506>
 8007002:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <UART_SetConfig+0x4bc>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	0800702d 	.word	0x0800702d
 800700c:	08007035 	.word	0x08007035
 8007010:	0800703d 	.word	0x0800703d
 8007014:	08007053 	.word	0x08007053
 8007018:	08007043 	.word	0x08007043
 800701c:	08007053 	.word	0x08007053
 8007020:	08007053 	.word	0x08007053
 8007024:	08007053 	.word	0x08007053
 8007028:	0800704b 	.word	0x0800704b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fd fc46 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 8007030:	61f8      	str	r0, [r7, #28]
        break;
 8007032:	e014      	b.n	800705e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007034:	f7fd fc58 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
 8007038:	61f8      	str	r0, [r7, #28]
        break;
 800703a:	e010      	b.n	800705e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <UART_SetConfig+0x56c>)
 800703e:	61fb      	str	r3, [r7, #28]
        break;
 8007040:	e00d      	b.n	800705e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007042:	f7fd fba3 	bl	800478c <HAL_RCC_GetSysClockFreq>
 8007046:	61f8      	str	r0, [r7, #28]
        break;
 8007048:	e009      	b.n	800705e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	61fb      	str	r3, [r7, #28]
        break;
 8007050:	e005      	b.n	800705e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800705c:	bf00      	nop
    }

    if (pclk != 0U)
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d019      	beq.n	8007098 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	085a      	lsrs	r2, r3, #1
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d909      	bls.n	8007092 <UART_SetConfig+0x546>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007084:	d205      	bcs.n	8007092 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60da      	str	r2, [r3, #12]
 8007090:	e002      	b.n	8007098 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3728      	adds	r7, #40	; 0x28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b2:	bf00      	nop
 80070b4:	40008000 	.word	0x40008000
 80070b8:	00f42400 	.word	0x00f42400

080070bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01a      	beq.n	80071d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ba:	d10a      	bne.n	80071d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
  }
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af02      	add	r7, sp, #8
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007210:	f7fc f9fa 	bl	8003608 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b08      	cmp	r3, #8
 8007222:	d10e      	bne.n	8007242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f82d 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e023      	b.n	800728a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b04      	cmp	r3, #4
 800724e:	d10e      	bne.n	800726e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f817 	bl	8007292 <UART_WaitOnFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e00d      	b.n	800728a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b09c      	sub	sp, #112	; 0x70
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a2:	e0a5      	b.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	f000 80a1 	beq.w	80073f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fc f9ab 	bl	8003608 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80072be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d13e      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072d8:	667b      	str	r3, [r7, #100]	; 0x64
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e6      	bne.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3308      	adds	r3, #8
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	663b      	str	r3, [r7, #96]	; 0x60
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007316:	64ba      	str	r2, [r7, #72]	; 0x48
 8007318:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800731c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e067      	b.n	8007412 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d04f      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735e:	d147      	bne.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007368:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800737e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
 800738a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800738e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e6      	bne.n	800736a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3308      	adds	r3, #8
 80073a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073bc:	623a      	str	r2, [r7, #32]
 80073be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e5      	bne.n	800739c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e010      	b.n	8007412 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69da      	ldr	r2, [r3, #28]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4013      	ands	r3, r2
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	bf0c      	ite	eq
 8007400:	2301      	moveq	r3, #1
 8007402:	2300      	movne	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	429a      	cmp	r2, r3
 800740c:	f43f af4a 	beq.w	80072a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3770      	adds	r7, #112	; 0x70
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800741c:	b480      	push	{r7}
 800741e:	b097      	sub	sp, #92	; 0x5c
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744e:	d10e      	bne.n	800746e <UART_Start_Receive_IT+0x52>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d105      	bne.n	8007464 <UART_Start_Receive_IT+0x48>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800745e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007462:	e02d      	b.n	80074c0 <UART_Start_Receive_IT+0xa4>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	22ff      	movs	r2, #255	; 0xff
 8007468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800746c:	e028      	b.n	80074c0 <UART_Start_Receive_IT+0xa4>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10d      	bne.n	8007492 <UART_Start_Receive_IT+0x76>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d104      	bne.n	8007488 <UART_Start_Receive_IT+0x6c>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	22ff      	movs	r2, #255	; 0xff
 8007482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007486:	e01b      	b.n	80074c0 <UART_Start_Receive_IT+0xa4>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	227f      	movs	r2, #127	; 0x7f
 800748c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007490:	e016      	b.n	80074c0 <UART_Start_Receive_IT+0xa4>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749a:	d10d      	bne.n	80074b8 <UART_Start_Receive_IT+0x9c>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <UART_Start_Receive_IT+0x92>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	227f      	movs	r2, #127	; 0x7f
 80074a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074ac:	e008      	b.n	80074c0 <UART_Start_Receive_IT+0xa4>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	223f      	movs	r2, #63	; 0x3f
 80074b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b6:	e003      	b.n	80074c0 <UART_Start_Receive_IT+0xa4>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2222      	movs	r2, #34	; 0x22
 80074cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	657b      	str	r3, [r7, #84]	; 0x54
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750a:	d107      	bne.n	800751c <UART_Start_Receive_IT+0x100>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <UART_Start_Receive_IT+0x18c>)
 8007518:	665a      	str	r2, [r3, #100]	; 0x64
 800751a:	e002      	b.n	8007522 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4a23      	ldr	r2, [pc, #140]	; (80075ac <UART_Start_Receive_IT+0x190>)
 8007520:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d019      	beq.n	8007566 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
 8007552:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e6      	bne.n	8007532 <UART_Start_Receive_IT+0x116>
 8007564:	e018      	b.n	8007598 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f043 0320 	orr.w	r3, r3, #32
 800757a:	653b      	str	r3, [r7, #80]	; 0x50
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	69f9      	ldr	r1, [r7, #28]
 800758a:	6a3a      	ldr	r2, [r7, #32]
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	61bb      	str	r3, [r7, #24]
   return(result);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	375c      	adds	r7, #92	; 0x5c
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	080079cf 	.word	0x080079cf
 80075ac:	0800786f 	.word	0x0800786f

080075b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b095      	sub	sp, #84	; 0x54
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d6:	643b      	str	r3, [r7, #64]	; 0x40
 80075d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e6      	bne.n	80075b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f023 0301 	bic.w	r3, r3, #1
 8007600:	64bb      	str	r3, [r7, #72]	; 0x48
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007622:	2b01      	cmp	r3, #1
 8007624:	d118      	bne.n	8007658 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60bb      	str	r3, [r7, #8]
   return(result);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6979      	ldr	r1, [r7, #20]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	613b      	str	r3, [r7, #16]
   return(result);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	665a      	str	r2, [r3, #100]	; 0x64
}
 800766a:	bf00      	nop
 800766c:	3754      	adds	r7, #84	; 0x54
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fa43 	bl	8006b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b08f      	sub	sp, #60	; 0x3c
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ae:	2b21      	cmp	r3, #33	; 0x21
 80076b0:	d14d      	bne.n	800774e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d132      	bne.n	8007724 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007704:	633b      	str	r3, [r7, #48]	; 0x30
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	61bb      	str	r3, [r7, #24]
 8007710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6979      	ldr	r1, [r7, #20]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	613b      	str	r3, [r7, #16]
   return(result);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007722:	e014      	b.n	800774e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b292      	uxth	r2, r2
 8007730:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800774e:	bf00      	nop
 8007750:	373c      	adds	r7, #60	; 0x3c
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800775a:	b480      	push	{r7}
 800775c:	b091      	sub	sp, #68	; 0x44
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007766:	2b21      	cmp	r3, #33	; 0x21
 8007768:	d151      	bne.n	800780e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d132      	bne.n	80077dc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	623b      	str	r3, [r7, #32]
   return(result);
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	633b      	str	r3, [r7, #48]	; 0x30
 8007796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e6      	bne.n	8007776 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	61fb      	str	r3, [r7, #28]
 80077c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	69b9      	ldr	r1, [r7, #24]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	617b      	str	r3, [r7, #20]
   return(result);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077da:	e018      	b.n	800780e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e4:	881a      	ldrh	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ee:	b292      	uxth	r2, r2
 80077f0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	1c9a      	adds	r2, r3, #2
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800780e:	bf00      	nop
 8007810:	3744      	adds	r7, #68	; 0x44
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b088      	sub	sp, #32
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6979      	ldr	r1, [r7, #20]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	613b      	str	r3, [r7, #16]
   return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff f949 	bl	8006af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007866:	bf00      	nop
 8007868:	3720      	adds	r7, #32
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b096      	sub	sp, #88	; 0x58
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800787c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007884:	2b22      	cmp	r3, #34	; 0x22
 8007886:	f040 8094 	bne.w	80079b2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007890:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007894:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007898:	b2d9      	uxtb	r1, r3
 800789a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a4:	400a      	ands	r2, r1
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d179      	bne.n	80079c6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078e6:	653b      	str	r3, [r7, #80]	; 0x50
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f0:	647b      	str	r3, [r7, #68]	; 0x44
 80078f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e6      	bne.n	80078d2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	623b      	str	r3, [r7, #32]
   return(result);
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007924:	633a      	str	r2, [r7, #48]	; 0x30
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800792a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007948:	2b01      	cmp	r3, #1
 800794a:	d12e      	bne.n	80079aa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0310 	bic.w	r3, r3, #16
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	69b9      	ldr	r1, [r7, #24]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	617b      	str	r3, [r7, #20]
   return(result);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e6      	bne.n	8007952 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	2b10      	cmp	r3, #16
 8007990:	d103      	bne.n	800799a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2210      	movs	r2, #16
 8007998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff f8c6 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079a8:	e00d      	b.n	80079c6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff f8ae 	bl	8006b0c <HAL_UART_RxCpltCallback>
}
 80079b0:	e009      	b.n	80079c6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	8b1b      	ldrh	r3, [r3, #24]
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0208 	orr.w	r2, r2, #8
 80079c2:	b292      	uxth	r2, r2
 80079c4:	831a      	strh	r2, [r3, #24]
}
 80079c6:	bf00      	nop
 80079c8:	3758      	adds	r7, #88	; 0x58
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b096      	sub	sp, #88	; 0x58
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e4:	2b22      	cmp	r3, #34	; 0x22
 80079e6:	f040 8094 	bne.w	8007b12 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80079fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80079fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a02:	4013      	ands	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0e:	1c9a      	adds	r2, r3, #2
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d179      	bne.n	8007b26 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
 8007a52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e5      	bne.n	8007a64 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d12e      	bne.n	8007b0a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0310 	bic.w	r3, r3, #16
 8007ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6979      	ldr	r1, [r7, #20]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d103      	bne.n	8007afa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2210      	movs	r2, #16
 8007af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff f816 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b08:	e00d      	b.n	8007b26 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fe fffe 	bl	8006b0c <HAL_UART_RxCpltCallback>
}
 8007b10:	e009      	b.n	8007b26 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	8b1b      	ldrh	r3, [r3, #24]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	b292      	uxth	r2, r2
 8007b24:	831a      	strh	r2, [r3, #24]
}
 8007b26:	bf00      	nop
 8007b28:	3758      	adds	r7, #88	; 0x58
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <__cvt>:
 8007b42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b46:	ec55 4b10 	vmov	r4, r5, d0
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	4619      	mov	r1, r3
 8007b50:	462b      	mov	r3, r5
 8007b52:	bfbb      	ittet	lt
 8007b54:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b58:	461d      	movlt	r5, r3
 8007b5a:	2300      	movge	r3, #0
 8007b5c:	232d      	movlt	r3, #45	; 0x2d
 8007b5e:	700b      	strb	r3, [r1, #0]
 8007b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b66:	4691      	mov	r9, r2
 8007b68:	f023 0820 	bic.w	r8, r3, #32
 8007b6c:	bfbc      	itt	lt
 8007b6e:	4622      	movlt	r2, r4
 8007b70:	4614      	movlt	r4, r2
 8007b72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b76:	d005      	beq.n	8007b84 <__cvt+0x42>
 8007b78:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b7c:	d100      	bne.n	8007b80 <__cvt+0x3e>
 8007b7e:	3601      	adds	r6, #1
 8007b80:	2102      	movs	r1, #2
 8007b82:	e000      	b.n	8007b86 <__cvt+0x44>
 8007b84:	2103      	movs	r1, #3
 8007b86:	ab03      	add	r3, sp, #12
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	ab02      	add	r3, sp, #8
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	ec45 4b10 	vmov	d0, r4, r5
 8007b92:	4653      	mov	r3, sl
 8007b94:	4632      	mov	r2, r6
 8007b96:	f001 f9d7 	bl	8008f48 <_dtoa_r>
 8007b9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	d102      	bne.n	8007ba8 <__cvt+0x66>
 8007ba2:	f019 0f01 	tst.w	r9, #1
 8007ba6:	d022      	beq.n	8007bee <__cvt+0xac>
 8007ba8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bac:	eb07 0906 	add.w	r9, r7, r6
 8007bb0:	d110      	bne.n	8007bd4 <__cvt+0x92>
 8007bb2:	783b      	ldrb	r3, [r7, #0]
 8007bb4:	2b30      	cmp	r3, #48	; 0x30
 8007bb6:	d10a      	bne.n	8007bce <__cvt+0x8c>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f7f8 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc4:	b918      	cbnz	r0, 8007bce <__cvt+0x8c>
 8007bc6:	f1c6 0601 	rsb	r6, r6, #1
 8007bca:	f8ca 6000 	str.w	r6, [sl]
 8007bce:	f8da 3000 	ldr.w	r3, [sl]
 8007bd2:	4499      	add	r9, r3
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4620      	mov	r0, r4
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7f8 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be0:	b108      	cbz	r0, 8007be6 <__cvt+0xa4>
 8007be2:	f8cd 900c 	str.w	r9, [sp, #12]
 8007be6:	2230      	movs	r2, #48	; 0x30
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	454b      	cmp	r3, r9
 8007bec:	d307      	bcc.n	8007bfe <__cvt+0xbc>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf2:	1bdb      	subs	r3, r3, r7
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	b004      	add	sp, #16
 8007bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfe:	1c59      	adds	r1, r3, #1
 8007c00:	9103      	str	r1, [sp, #12]
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e7f0      	b.n	8007be8 <__cvt+0xa6>

08007c06 <__exponent>:
 8007c06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	bfb8      	it	lt
 8007c0e:	4249      	neglt	r1, r1
 8007c10:	f803 2b02 	strb.w	r2, [r3], #2
 8007c14:	bfb4      	ite	lt
 8007c16:	222d      	movlt	r2, #45	; 0x2d
 8007c18:	222b      	movge	r2, #43	; 0x2b
 8007c1a:	2909      	cmp	r1, #9
 8007c1c:	7042      	strb	r2, [r0, #1]
 8007c1e:	dd2a      	ble.n	8007c76 <__exponent+0x70>
 8007c20:	f10d 0207 	add.w	r2, sp, #7
 8007c24:	4617      	mov	r7, r2
 8007c26:	260a      	movs	r6, #10
 8007c28:	4694      	mov	ip, r2
 8007c2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c2e:	fb06 1415 	mls	r4, r6, r5, r1
 8007c32:	3430      	adds	r4, #48	; 0x30
 8007c34:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007c38:	460c      	mov	r4, r1
 8007c3a:	2c63      	cmp	r4, #99	; 0x63
 8007c3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007c40:	4629      	mov	r1, r5
 8007c42:	dcf1      	bgt.n	8007c28 <__exponent+0x22>
 8007c44:	3130      	adds	r1, #48	; 0x30
 8007c46:	f1ac 0402 	sub.w	r4, ip, #2
 8007c4a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c4e:	1c41      	adds	r1, r0, #1
 8007c50:	4622      	mov	r2, r4
 8007c52:	42ba      	cmp	r2, r7
 8007c54:	d30a      	bcc.n	8007c6c <__exponent+0x66>
 8007c56:	f10d 0209 	add.w	r2, sp, #9
 8007c5a:	eba2 020c 	sub.w	r2, r2, ip
 8007c5e:	42bc      	cmp	r4, r7
 8007c60:	bf88      	it	hi
 8007c62:	2200      	movhi	r2, #0
 8007c64:	4413      	add	r3, r2
 8007c66:	1a18      	subs	r0, r3, r0
 8007c68:	b003      	add	sp, #12
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c70:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c74:	e7ed      	b.n	8007c52 <__exponent+0x4c>
 8007c76:	2330      	movs	r3, #48	; 0x30
 8007c78:	3130      	adds	r1, #48	; 0x30
 8007c7a:	7083      	strb	r3, [r0, #2]
 8007c7c:	70c1      	strb	r1, [r0, #3]
 8007c7e:	1d03      	adds	r3, r0, #4
 8007c80:	e7f1      	b.n	8007c66 <__exponent+0x60>
	...

08007c84 <_printf_float>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	ed2d 8b02 	vpush	{d8}
 8007c8c:	b08d      	sub	sp, #52	; 0x34
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c94:	4616      	mov	r6, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	4605      	mov	r5, r0
 8007c9a:	f001 f84f 	bl	8008d3c <_localeconv_r>
 8007c9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	f7f8 fae4 	bl	8000270 <strlen>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930a      	str	r3, [sp, #40]	; 0x28
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	f103 0208 	add.w	r2, r3, #8
 8007cc2:	f8c8 2000 	str.w	r2, [r8]
 8007cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cd4:	ee08 0a10 	vmov	s16, r0
 8007cd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007cdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce0:	4b9e      	ldr	r3, [pc, #632]	; (8007f5c <_printf_float+0x2d8>)
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	f7f8 ff21 	bl	8000b2c <__aeabi_dcmpun>
 8007cea:	bb88      	cbnz	r0, 8007d50 <_printf_float+0xcc>
 8007cec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	; (8007f5c <_printf_float+0x2d8>)
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	f7f8 fefb 	bl	8000af0 <__aeabi_dcmple>
 8007cfa:	bb48      	cbnz	r0, 8007d50 <_printf_float+0xcc>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 feea 	bl	8000adc <__aeabi_dcmplt>
 8007d08:	b110      	cbz	r0, 8007d10 <_printf_float+0x8c>
 8007d0a:	232d      	movs	r3, #45	; 0x2d
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d10:	4a93      	ldr	r2, [pc, #588]	; (8007f60 <_printf_float+0x2dc>)
 8007d12:	4b94      	ldr	r3, [pc, #592]	; (8007f64 <_printf_float+0x2e0>)
 8007d14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d18:	bf94      	ite	ls
 8007d1a:	4690      	movls	r8, r2
 8007d1c:	4698      	movhi	r8, r3
 8007d1e:	2303      	movs	r3, #3
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	9b05      	ldr	r3, [sp, #20]
 8007d24:	f023 0304 	bic.w	r3, r3, #4
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	9700      	str	r7, [sp, #0]
 8007d30:	4633      	mov	r3, r6
 8007d32:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f9da 	bl	80080f0 <_printf_common>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f040 8090 	bne.w	8007e62 <_printf_float+0x1de>
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	b00d      	add	sp, #52	; 0x34
 8007d48:	ecbd 8b02 	vpop	{d8}
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 fee8 	bl	8000b2c <__aeabi_dcmpun>
 8007d5c:	b140      	cbz	r0, 8007d70 <_printf_float+0xec>
 8007d5e:	464b      	mov	r3, r9
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfbc      	itt	lt
 8007d64:	232d      	movlt	r3, #45	; 0x2d
 8007d66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d6a:	4a7f      	ldr	r2, [pc, #508]	; (8007f68 <_printf_float+0x2e4>)
 8007d6c:	4b7f      	ldr	r3, [pc, #508]	; (8007f6c <_printf_float+0x2e8>)
 8007d6e:	e7d1      	b.n	8007d14 <_printf_float+0x90>
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d76:	9206      	str	r2, [sp, #24]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	d13f      	bne.n	8007dfc <_printf_float+0x178>
 8007d7c:	2306      	movs	r3, #6
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	6861      	ldr	r1, [r4, #4]
 8007d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d92:	ab09      	add	r3, sp, #36	; 0x24
 8007d94:	ec49 8b10 	vmov	d0, r8, r9
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	6022      	str	r2, [r4, #0]
 8007d9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007da0:	4628      	mov	r0, r5
 8007da2:	f7ff fece 	bl	8007b42 <__cvt>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007daa:	2b47      	cmp	r3, #71	; 0x47
 8007dac:	4680      	mov	r8, r0
 8007dae:	d108      	bne.n	8007dc2 <_printf_float+0x13e>
 8007db0:	1cc8      	adds	r0, r1, #3
 8007db2:	db02      	blt.n	8007dba <_printf_float+0x136>
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	4299      	cmp	r1, r3
 8007db8:	dd41      	ble.n	8007e3e <_printf_float+0x1ba>
 8007dba:	f1ab 0302 	sub.w	r3, fp, #2
 8007dbe:	fa5f fb83 	uxtb.w	fp, r3
 8007dc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc6:	d820      	bhi.n	8007e0a <_printf_float+0x186>
 8007dc8:	3901      	subs	r1, #1
 8007dca:	465a      	mov	r2, fp
 8007dcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8007dd2:	f7ff ff18 	bl	8007c06 <__exponent>
 8007dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd8:	1813      	adds	r3, r2, r0
 8007dda:	2a01      	cmp	r2, #1
 8007ddc:	4681      	mov	r9, r0
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	dc02      	bgt.n	8007de8 <_printf_float+0x164>
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	07d2      	lsls	r2, r2, #31
 8007de6:	d501      	bpl.n	8007dec <_printf_float+0x168>
 8007de8:	3301      	adds	r3, #1
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d09c      	beq.n	8007d2e <_printf_float+0xaa>
 8007df4:	232d      	movs	r3, #45	; 0x2d
 8007df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfa:	e798      	b.n	8007d2e <_printf_float+0xaa>
 8007dfc:	9a06      	ldr	r2, [sp, #24]
 8007dfe:	2a47      	cmp	r2, #71	; 0x47
 8007e00:	d1be      	bne.n	8007d80 <_printf_float+0xfc>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1bc      	bne.n	8007d80 <_printf_float+0xfc>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e7b9      	b.n	8007d7e <_printf_float+0xfa>
 8007e0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e0e:	d118      	bne.n	8007e42 <_printf_float+0x1be>
 8007e10:	2900      	cmp	r1, #0
 8007e12:	6863      	ldr	r3, [r4, #4]
 8007e14:	dd0b      	ble.n	8007e2e <_printf_float+0x1aa>
 8007e16:	6121      	str	r1, [r4, #16]
 8007e18:	b913      	cbnz	r3, 8007e20 <_printf_float+0x19c>
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	07d0      	lsls	r0, r2, #31
 8007e1e:	d502      	bpl.n	8007e26 <_printf_float+0x1a2>
 8007e20:	3301      	adds	r3, #1
 8007e22:	440b      	add	r3, r1
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e28:	f04f 0900 	mov.w	r9, #0
 8007e2c:	e7de      	b.n	8007dec <_printf_float+0x168>
 8007e2e:	b913      	cbnz	r3, 8007e36 <_printf_float+0x1b2>
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	07d2      	lsls	r2, r2, #31
 8007e34:	d501      	bpl.n	8007e3a <_printf_float+0x1b6>
 8007e36:	3302      	adds	r3, #2
 8007e38:	e7f4      	b.n	8007e24 <_printf_float+0x1a0>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e7f2      	b.n	8007e24 <_printf_float+0x1a0>
 8007e3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e44:	4299      	cmp	r1, r3
 8007e46:	db05      	blt.n	8007e54 <_printf_float+0x1d0>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	6121      	str	r1, [r4, #16]
 8007e4c:	07d8      	lsls	r0, r3, #31
 8007e4e:	d5ea      	bpl.n	8007e26 <_printf_float+0x1a2>
 8007e50:	1c4b      	adds	r3, r1, #1
 8007e52:	e7e7      	b.n	8007e24 <_printf_float+0x1a0>
 8007e54:	2900      	cmp	r1, #0
 8007e56:	bfd4      	ite	le
 8007e58:	f1c1 0202 	rsble	r2, r1, #2
 8007e5c:	2201      	movgt	r2, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	e7e0      	b.n	8007e24 <_printf_float+0x1a0>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	055a      	lsls	r2, r3, #21
 8007e66:	d407      	bmi.n	8007e78 <_printf_float+0x1f4>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	d12c      	bne.n	8007ed0 <_printf_float+0x24c>
 8007e76:	e764      	b.n	8007d42 <_printf_float+0xbe>
 8007e78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e7c:	f240 80e0 	bls.w	8008040 <_printf_float+0x3bc>
 8007e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e84:	2200      	movs	r2, #0
 8007e86:	2300      	movs	r3, #0
 8007e88:	f7f8 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d034      	beq.n	8007efa <_printf_float+0x276>
 8007e90:	4a37      	ldr	r2, [pc, #220]	; (8007f70 <_printf_float+0x2ec>)
 8007e92:	2301      	movs	r3, #1
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af51 	beq.w	8007d42 <_printf_float+0xbe>
 8007ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	db02      	blt.n	8007eae <_printf_float+0x22a>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07d8      	lsls	r0, r3, #31
 8007eac:	d510      	bpl.n	8007ed0 <_printf_float+0x24c>
 8007eae:	ee18 3a10 	vmov	r3, s16
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f af41 	beq.w	8007d42 <_printf_float+0xbe>
 8007ec0:	f04f 0800 	mov.w	r8, #0
 8007ec4:	f104 091a 	add.w	r9, r4, #26
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4543      	cmp	r3, r8
 8007ece:	dc09      	bgt.n	8007ee4 <_printf_float+0x260>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	079b      	lsls	r3, r3, #30
 8007ed4:	f100 8107 	bmi.w	80080e6 <_printf_float+0x462>
 8007ed8:	68e0      	ldr	r0, [r4, #12]
 8007eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007edc:	4298      	cmp	r0, r3
 8007ede:	bfb8      	it	lt
 8007ee0:	4618      	movlt	r0, r3
 8007ee2:	e730      	b.n	8007d46 <_printf_float+0xc2>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af27 	beq.w	8007d42 <_printf_float+0xbe>
 8007ef4:	f108 0801 	add.w	r8, r8, #1
 8007ef8:	e7e6      	b.n	8007ec8 <_printf_float+0x244>
 8007efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dc39      	bgt.n	8007f74 <_printf_float+0x2f0>
 8007f00:	4a1b      	ldr	r2, [pc, #108]	; (8007f70 <_printf_float+0x2ec>)
 8007f02:	2301      	movs	r3, #1
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af19 	beq.w	8007d42 <_printf_float+0xbe>
 8007f10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f14:	4313      	orrs	r3, r2
 8007f16:	d102      	bne.n	8007f1e <_printf_float+0x29a>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	07d9      	lsls	r1, r3, #31
 8007f1c:	d5d8      	bpl.n	8007ed0 <_printf_float+0x24c>
 8007f1e:	ee18 3a10 	vmov	r3, s16
 8007f22:	4652      	mov	r2, sl
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f af09 	beq.w	8007d42 <_printf_float+0xbe>
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	f104 0a1a 	add.w	sl, r4, #26
 8007f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3a:	425b      	negs	r3, r3
 8007f3c:	454b      	cmp	r3, r9
 8007f3e:	dc01      	bgt.n	8007f44 <_printf_float+0x2c0>
 8007f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f42:	e792      	b.n	8007e6a <_printf_float+0x1e6>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4652      	mov	r2, sl
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f aef7 	beq.w	8007d42 <_printf_float+0xbe>
 8007f54:	f109 0901 	add.w	r9, r9, #1
 8007f58:	e7ee      	b.n	8007f38 <_printf_float+0x2b4>
 8007f5a:	bf00      	nop
 8007f5c:	7fefffff 	.word	0x7fefffff
 8007f60:	0800d2c0 	.word	0x0800d2c0
 8007f64:	0800d2c4 	.word	0x0800d2c4
 8007f68:	0800d2c8 	.word	0x0800d2c8
 8007f6c:	0800d2cc 	.word	0x0800d2cc
 8007f70:	0800d658 	.word	0x0800d658
 8007f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	bfa8      	it	ge
 8007f7c:	461a      	movge	r2, r3
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	4691      	mov	r9, r2
 8007f82:	dc37      	bgt.n	8007ff4 <_printf_float+0x370>
 8007f84:	f04f 0b00 	mov.w	fp, #0
 8007f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f8c:	f104 021a 	add.w	r2, r4, #26
 8007f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	eba3 0309 	sub.w	r3, r3, r9
 8007f98:	455b      	cmp	r3, fp
 8007f9a:	dc33      	bgt.n	8008004 <_printf_float+0x380>
 8007f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	db3b      	blt.n	800801c <_printf_float+0x398>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	07da      	lsls	r2, r3, #31
 8007fa8:	d438      	bmi.n	800801c <_printf_float+0x398>
 8007faa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fae:	eba2 0903 	sub.w	r9, r2, r3
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	4591      	cmp	r9, r2
 8007fb8:	bfa8      	it	ge
 8007fba:	4691      	movge	r9, r2
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	dc35      	bgt.n	800802e <_printf_float+0x3aa>
 8007fc2:	f04f 0800 	mov.w	r8, #0
 8007fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fca:	f104 0a1a 	add.w	sl, r4, #26
 8007fce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	eba3 0309 	sub.w	r3, r3, r9
 8007fd8:	4543      	cmp	r3, r8
 8007fda:	f77f af79 	ble.w	8007ed0 <_printf_float+0x24c>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f aeaa 	beq.w	8007d42 <_printf_float+0xbe>
 8007fee:	f108 0801 	add.w	r8, r8, #1
 8007ff2:	e7ec      	b.n	8007fce <_printf_float+0x34a>
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	d1c0      	bne.n	8007f84 <_printf_float+0x300>
 8008002:	e69e      	b.n	8007d42 <_printf_float+0xbe>
 8008004:	2301      	movs	r3, #1
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	9205      	str	r2, [sp, #20]
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f ae97 	beq.w	8007d42 <_printf_float+0xbe>
 8008014:	9a05      	ldr	r2, [sp, #20]
 8008016:	f10b 0b01 	add.w	fp, fp, #1
 800801a:	e7b9      	b.n	8007f90 <_printf_float+0x30c>
 800801c:	ee18 3a10 	vmov	r3, s16
 8008020:	4652      	mov	r2, sl
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d1be      	bne.n	8007faa <_printf_float+0x326>
 800802c:	e689      	b.n	8007d42 <_printf_float+0xbe>
 800802e:	9a05      	ldr	r2, [sp, #20]
 8008030:	464b      	mov	r3, r9
 8008032:	4442      	add	r2, r8
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	d1c1      	bne.n	8007fc2 <_printf_float+0x33e>
 800803e:	e680      	b.n	8007d42 <_printf_float+0xbe>
 8008040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008042:	2a01      	cmp	r2, #1
 8008044:	dc01      	bgt.n	800804a <_printf_float+0x3c6>
 8008046:	07db      	lsls	r3, r3, #31
 8008048:	d53a      	bpl.n	80080c0 <_printf_float+0x43c>
 800804a:	2301      	movs	r3, #1
 800804c:	4642      	mov	r2, r8
 800804e:	4631      	mov	r1, r6
 8008050:	4628      	mov	r0, r5
 8008052:	47b8      	blx	r7
 8008054:	3001      	adds	r0, #1
 8008056:	f43f ae74 	beq.w	8007d42 <_printf_float+0xbe>
 800805a:	ee18 3a10 	vmov	r3, s16
 800805e:	4652      	mov	r2, sl
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae6b 	beq.w	8007d42 <_printf_float+0xbe>
 800806c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008070:	2200      	movs	r2, #0
 8008072:	2300      	movs	r3, #0
 8008074:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008078:	f7f8 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800807c:	b9d8      	cbnz	r0, 80080b6 <_printf_float+0x432>
 800807e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008082:	f108 0201 	add.w	r2, r8, #1
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	d10e      	bne.n	80080ae <_printf_float+0x42a>
 8008090:	e657      	b.n	8007d42 <_printf_float+0xbe>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f ae50 	beq.w	8007d42 <_printf_float+0xbe>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4543      	cmp	r3, r8
 80080ac:	dcf1      	bgt.n	8008092 <_printf_float+0x40e>
 80080ae:	464b      	mov	r3, r9
 80080b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080b4:	e6da      	b.n	8007e6c <_printf_float+0x1e8>
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	f104 0a1a 	add.w	sl, r4, #26
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x422>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4642      	mov	r2, r8
 80080c4:	e7df      	b.n	8008086 <_printf_float+0x402>
 80080c6:	2301      	movs	r3, #1
 80080c8:	464a      	mov	r2, r9
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f ae36 	beq.w	8007d42 <_printf_float+0xbe>
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	68e3      	ldr	r3, [r4, #12]
 80080dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080de:	1a5b      	subs	r3, r3, r1
 80080e0:	4543      	cmp	r3, r8
 80080e2:	dcf0      	bgt.n	80080c6 <_printf_float+0x442>
 80080e4:	e6f8      	b.n	8007ed8 <_printf_float+0x254>
 80080e6:	f04f 0800 	mov.w	r8, #0
 80080ea:	f104 0919 	add.w	r9, r4, #25
 80080ee:	e7f4      	b.n	80080da <_printf_float+0x456>

080080f0 <_printf_common>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	4616      	mov	r6, r2
 80080f6:	4699      	mov	r9, r3
 80080f8:	688a      	ldr	r2, [r1, #8]
 80080fa:	690b      	ldr	r3, [r1, #16]
 80080fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008100:	4293      	cmp	r3, r2
 8008102:	bfb8      	it	lt
 8008104:	4613      	movlt	r3, r2
 8008106:	6033      	str	r3, [r6, #0]
 8008108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800810c:	4607      	mov	r7, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b10a      	cbz	r2, 8008116 <_printf_common+0x26>
 8008112:	3301      	adds	r3, #1
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	0699      	lsls	r1, r3, #26
 800811a:	bf42      	ittt	mi
 800811c:	6833      	ldrmi	r3, [r6, #0]
 800811e:	3302      	addmi	r3, #2
 8008120:	6033      	strmi	r3, [r6, #0]
 8008122:	6825      	ldr	r5, [r4, #0]
 8008124:	f015 0506 	ands.w	r5, r5, #6
 8008128:	d106      	bne.n	8008138 <_printf_common+0x48>
 800812a:	f104 0a19 	add.w	sl, r4, #25
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	6832      	ldr	r2, [r6, #0]
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	42ab      	cmp	r3, r5
 8008136:	dc26      	bgt.n	8008186 <_printf_common+0x96>
 8008138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800813c:	1e13      	subs	r3, r2, #0
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	bf18      	it	ne
 8008142:	2301      	movne	r3, #1
 8008144:	0692      	lsls	r2, r2, #26
 8008146:	d42b      	bmi.n	80081a0 <_printf_common+0xb0>
 8008148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800814c:	4649      	mov	r1, r9
 800814e:	4638      	mov	r0, r7
 8008150:	47c0      	blx	r8
 8008152:	3001      	adds	r0, #1
 8008154:	d01e      	beq.n	8008194 <_printf_common+0xa4>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	6922      	ldr	r2, [r4, #16]
 800815a:	f003 0306 	and.w	r3, r3, #6
 800815e:	2b04      	cmp	r3, #4
 8008160:	bf02      	ittt	eq
 8008162:	68e5      	ldreq	r5, [r4, #12]
 8008164:	6833      	ldreq	r3, [r6, #0]
 8008166:	1aed      	subeq	r5, r5, r3
 8008168:	68a3      	ldr	r3, [r4, #8]
 800816a:	bf0c      	ite	eq
 800816c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008170:	2500      	movne	r5, #0
 8008172:	4293      	cmp	r3, r2
 8008174:	bfc4      	itt	gt
 8008176:	1a9b      	subgt	r3, r3, r2
 8008178:	18ed      	addgt	r5, r5, r3
 800817a:	2600      	movs	r6, #0
 800817c:	341a      	adds	r4, #26
 800817e:	42b5      	cmp	r5, r6
 8008180:	d11a      	bne.n	80081b8 <_printf_common+0xc8>
 8008182:	2000      	movs	r0, #0
 8008184:	e008      	b.n	8008198 <_printf_common+0xa8>
 8008186:	2301      	movs	r3, #1
 8008188:	4652      	mov	r2, sl
 800818a:	4649      	mov	r1, r9
 800818c:	4638      	mov	r0, r7
 800818e:	47c0      	blx	r8
 8008190:	3001      	adds	r0, #1
 8008192:	d103      	bne.n	800819c <_printf_common+0xac>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819c:	3501      	adds	r5, #1
 800819e:	e7c6      	b.n	800812e <_printf_common+0x3e>
 80081a0:	18e1      	adds	r1, r4, r3
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	2030      	movs	r0, #48	; 0x30
 80081a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081aa:	4422      	add	r2, r4
 80081ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081b4:	3302      	adds	r3, #2
 80081b6:	e7c7      	b.n	8008148 <_printf_common+0x58>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4622      	mov	r2, r4
 80081bc:	4649      	mov	r1, r9
 80081be:	4638      	mov	r0, r7
 80081c0:	47c0      	blx	r8
 80081c2:	3001      	adds	r0, #1
 80081c4:	d0e6      	beq.n	8008194 <_printf_common+0xa4>
 80081c6:	3601      	adds	r6, #1
 80081c8:	e7d9      	b.n	800817e <_printf_common+0x8e>
	...

080081cc <_printf_i>:
 80081cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d0:	7e0f      	ldrb	r7, [r1, #24]
 80081d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081d4:	2f78      	cmp	r7, #120	; 0x78
 80081d6:	4691      	mov	r9, r2
 80081d8:	4680      	mov	r8, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	469a      	mov	sl, r3
 80081de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081e2:	d807      	bhi.n	80081f4 <_printf_i+0x28>
 80081e4:	2f62      	cmp	r7, #98	; 0x62
 80081e6:	d80a      	bhi.n	80081fe <_printf_i+0x32>
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	f000 80d4 	beq.w	8008396 <_printf_i+0x1ca>
 80081ee:	2f58      	cmp	r7, #88	; 0x58
 80081f0:	f000 80c0 	beq.w	8008374 <_printf_i+0x1a8>
 80081f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081fc:	e03a      	b.n	8008274 <_printf_i+0xa8>
 80081fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008202:	2b15      	cmp	r3, #21
 8008204:	d8f6      	bhi.n	80081f4 <_printf_i+0x28>
 8008206:	a101      	add	r1, pc, #4	; (adr r1, 800820c <_printf_i+0x40>)
 8008208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800820c:	08008265 	.word	0x08008265
 8008210:	08008279 	.word	0x08008279
 8008214:	080081f5 	.word	0x080081f5
 8008218:	080081f5 	.word	0x080081f5
 800821c:	080081f5 	.word	0x080081f5
 8008220:	080081f5 	.word	0x080081f5
 8008224:	08008279 	.word	0x08008279
 8008228:	080081f5 	.word	0x080081f5
 800822c:	080081f5 	.word	0x080081f5
 8008230:	080081f5 	.word	0x080081f5
 8008234:	080081f5 	.word	0x080081f5
 8008238:	0800837d 	.word	0x0800837d
 800823c:	080082a5 	.word	0x080082a5
 8008240:	08008337 	.word	0x08008337
 8008244:	080081f5 	.word	0x080081f5
 8008248:	080081f5 	.word	0x080081f5
 800824c:	0800839f 	.word	0x0800839f
 8008250:	080081f5 	.word	0x080081f5
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080081f5 	.word	0x080081f5
 800825c:	080081f5 	.word	0x080081f5
 8008260:	0800833f 	.word	0x0800833f
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	602a      	str	r2, [r5, #0]
 800826c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008274:	2301      	movs	r3, #1
 8008276:	e09f      	b.n	80083b8 <_printf_i+0x1ec>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	0607      	lsls	r7, r0, #24
 800827e:	f103 0104 	add.w	r1, r3, #4
 8008282:	6029      	str	r1, [r5, #0]
 8008284:	d501      	bpl.n	800828a <_printf_i+0xbe>
 8008286:	681e      	ldr	r6, [r3, #0]
 8008288:	e003      	b.n	8008292 <_printf_i+0xc6>
 800828a:	0646      	lsls	r6, r0, #25
 800828c:	d5fb      	bpl.n	8008286 <_printf_i+0xba>
 800828e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008292:	2e00      	cmp	r6, #0
 8008294:	da03      	bge.n	800829e <_printf_i+0xd2>
 8008296:	232d      	movs	r3, #45	; 0x2d
 8008298:	4276      	negs	r6, r6
 800829a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829e:	485a      	ldr	r0, [pc, #360]	; (8008408 <_printf_i+0x23c>)
 80082a0:	230a      	movs	r3, #10
 80082a2:	e012      	b.n	80082ca <_printf_i+0xfe>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	1d19      	adds	r1, r3, #4
 80082aa:	6029      	str	r1, [r5, #0]
 80082ac:	0605      	lsls	r5, r0, #24
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0xe8>
 80082b0:	681e      	ldr	r6, [r3, #0]
 80082b2:	e002      	b.n	80082ba <_printf_i+0xee>
 80082b4:	0641      	lsls	r1, r0, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0xe4>
 80082b8:	881e      	ldrh	r6, [r3, #0]
 80082ba:	4853      	ldr	r0, [pc, #332]	; (8008408 <_printf_i+0x23c>)
 80082bc:	2f6f      	cmp	r7, #111	; 0x6f
 80082be:	bf0c      	ite	eq
 80082c0:	2308      	moveq	r3, #8
 80082c2:	230a      	movne	r3, #10
 80082c4:	2100      	movs	r1, #0
 80082c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ca:	6865      	ldr	r5, [r4, #4]
 80082cc:	60a5      	str	r5, [r4, #8]
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	bfa2      	ittt	ge
 80082d2:	6821      	ldrge	r1, [r4, #0]
 80082d4:	f021 0104 	bicge.w	r1, r1, #4
 80082d8:	6021      	strge	r1, [r4, #0]
 80082da:	b90e      	cbnz	r6, 80082e0 <_printf_i+0x114>
 80082dc:	2d00      	cmp	r5, #0
 80082de:	d04b      	beq.n	8008378 <_printf_i+0x1ac>
 80082e0:	4615      	mov	r5, r2
 80082e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80082e6:	fb03 6711 	mls	r7, r3, r1, r6
 80082ea:	5dc7      	ldrb	r7, [r0, r7]
 80082ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082f0:	4637      	mov	r7, r6
 80082f2:	42bb      	cmp	r3, r7
 80082f4:	460e      	mov	r6, r1
 80082f6:	d9f4      	bls.n	80082e2 <_printf_i+0x116>
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d10b      	bne.n	8008314 <_printf_i+0x148>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	07de      	lsls	r6, r3, #31
 8008300:	d508      	bpl.n	8008314 <_printf_i+0x148>
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	6861      	ldr	r1, [r4, #4]
 8008306:	4299      	cmp	r1, r3
 8008308:	bfde      	ittt	le
 800830a:	2330      	movle	r3, #48	; 0x30
 800830c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008314:	1b52      	subs	r2, r2, r5
 8008316:	6122      	str	r2, [r4, #16]
 8008318:	f8cd a000 	str.w	sl, [sp]
 800831c:	464b      	mov	r3, r9
 800831e:	aa03      	add	r2, sp, #12
 8008320:	4621      	mov	r1, r4
 8008322:	4640      	mov	r0, r8
 8008324:	f7ff fee4 	bl	80080f0 <_printf_common>
 8008328:	3001      	adds	r0, #1
 800832a:	d14a      	bne.n	80083c2 <_printf_i+0x1f6>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	b004      	add	sp, #16
 8008332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f043 0320 	orr.w	r3, r3, #32
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	4833      	ldr	r0, [pc, #204]	; (800840c <_printf_i+0x240>)
 8008340:	2778      	movs	r7, #120	; 0x78
 8008342:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	6829      	ldr	r1, [r5, #0]
 800834a:	061f      	lsls	r7, r3, #24
 800834c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008350:	d402      	bmi.n	8008358 <_printf_i+0x18c>
 8008352:	065f      	lsls	r7, r3, #25
 8008354:	bf48      	it	mi
 8008356:	b2b6      	uxthmi	r6, r6
 8008358:	07df      	lsls	r7, r3, #31
 800835a:	bf48      	it	mi
 800835c:	f043 0320 	orrmi.w	r3, r3, #32
 8008360:	6029      	str	r1, [r5, #0]
 8008362:	bf48      	it	mi
 8008364:	6023      	strmi	r3, [r4, #0]
 8008366:	b91e      	cbnz	r6, 8008370 <_printf_i+0x1a4>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	f023 0320 	bic.w	r3, r3, #32
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	2310      	movs	r3, #16
 8008372:	e7a7      	b.n	80082c4 <_printf_i+0xf8>
 8008374:	4824      	ldr	r0, [pc, #144]	; (8008408 <_printf_i+0x23c>)
 8008376:	e7e4      	b.n	8008342 <_printf_i+0x176>
 8008378:	4615      	mov	r5, r2
 800837a:	e7bd      	b.n	80082f8 <_printf_i+0x12c>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	6826      	ldr	r6, [r4, #0]
 8008380:	6961      	ldr	r1, [r4, #20]
 8008382:	1d18      	adds	r0, r3, #4
 8008384:	6028      	str	r0, [r5, #0]
 8008386:	0635      	lsls	r5, r6, #24
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	d501      	bpl.n	8008390 <_printf_i+0x1c4>
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	e002      	b.n	8008396 <_printf_i+0x1ca>
 8008390:	0670      	lsls	r0, r6, #25
 8008392:	d5fb      	bpl.n	800838c <_printf_i+0x1c0>
 8008394:	8019      	strh	r1, [r3, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	4615      	mov	r5, r2
 800839c:	e7bc      	b.n	8008318 <_printf_i+0x14c>
 800839e:	682b      	ldr	r3, [r5, #0]
 80083a0:	1d1a      	adds	r2, r3, #4
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	681d      	ldr	r5, [r3, #0]
 80083a6:	6862      	ldr	r2, [r4, #4]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7f7 ff10 	bl	80001d0 <memchr>
 80083b0:	b108      	cbz	r0, 80083b6 <_printf_i+0x1ea>
 80083b2:	1b40      	subs	r0, r0, r5
 80083b4:	6060      	str	r0, [r4, #4]
 80083b6:	6863      	ldr	r3, [r4, #4]
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	2300      	movs	r3, #0
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c0:	e7aa      	b.n	8008318 <_printf_i+0x14c>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	462a      	mov	r2, r5
 80083c6:	4649      	mov	r1, r9
 80083c8:	4640      	mov	r0, r8
 80083ca:	47d0      	blx	sl
 80083cc:	3001      	adds	r0, #1
 80083ce:	d0ad      	beq.n	800832c <_printf_i+0x160>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	079b      	lsls	r3, r3, #30
 80083d4:	d413      	bmi.n	80083fe <_printf_i+0x232>
 80083d6:	68e0      	ldr	r0, [r4, #12]
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	4298      	cmp	r0, r3
 80083dc:	bfb8      	it	lt
 80083de:	4618      	movlt	r0, r3
 80083e0:	e7a6      	b.n	8008330 <_printf_i+0x164>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4632      	mov	r2, r6
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	47d0      	blx	sl
 80083ec:	3001      	adds	r0, #1
 80083ee:	d09d      	beq.n	800832c <_printf_i+0x160>
 80083f0:	3501      	adds	r5, #1
 80083f2:	68e3      	ldr	r3, [r4, #12]
 80083f4:	9903      	ldr	r1, [sp, #12]
 80083f6:	1a5b      	subs	r3, r3, r1
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	dcf2      	bgt.n	80083e2 <_printf_i+0x216>
 80083fc:	e7eb      	b.n	80083d6 <_printf_i+0x20a>
 80083fe:	2500      	movs	r5, #0
 8008400:	f104 0619 	add.w	r6, r4, #25
 8008404:	e7f5      	b.n	80083f2 <_printf_i+0x226>
 8008406:	bf00      	nop
 8008408:	0800d2d0 	.word	0x0800d2d0
 800840c:	0800d2e1 	.word	0x0800d2e1

08008410 <_scanf_float>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	b087      	sub	sp, #28
 8008416:	4617      	mov	r7, r2
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	688b      	ldr	r3, [r1, #8]
 800841c:	1e5a      	subs	r2, r3, #1
 800841e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008422:	bf83      	ittte	hi
 8008424:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008428:	195b      	addhi	r3, r3, r5
 800842a:	9302      	strhi	r3, [sp, #8]
 800842c:	2300      	movls	r3, #0
 800842e:	bf86      	itte	hi
 8008430:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008434:	608b      	strhi	r3, [r1, #8]
 8008436:	9302      	strls	r3, [sp, #8]
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	468b      	mov	fp, r1
 800843c:	2500      	movs	r5, #0
 800843e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008442:	f84b 3b1c 	str.w	r3, [fp], #28
 8008446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800844a:	4680      	mov	r8, r0
 800844c:	460c      	mov	r4, r1
 800844e:	465e      	mov	r6, fp
 8008450:	46aa      	mov	sl, r5
 8008452:	46a9      	mov	r9, r5
 8008454:	9501      	str	r5, [sp, #4]
 8008456:	68a2      	ldr	r2, [r4, #8]
 8008458:	b152      	cbz	r2, 8008470 <_scanf_float+0x60>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b4e      	cmp	r3, #78	; 0x4e
 8008460:	d864      	bhi.n	800852c <_scanf_float+0x11c>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d83c      	bhi.n	80084e0 <_scanf_float+0xd0>
 8008466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800846a:	b2c8      	uxtb	r0, r1
 800846c:	280e      	cmp	r0, #14
 800846e:	d93a      	bls.n	80084e6 <_scanf_float+0xd6>
 8008470:	f1b9 0f00 	cmp.w	r9, #0
 8008474:	d003      	beq.n	800847e <_scanf_float+0x6e>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008482:	f1ba 0f01 	cmp.w	sl, #1
 8008486:	f200 8113 	bhi.w	80086b0 <_scanf_float+0x2a0>
 800848a:	455e      	cmp	r6, fp
 800848c:	f200 8105 	bhi.w	800869a <_scanf_float+0x28a>
 8008490:	2501      	movs	r5, #1
 8008492:	4628      	mov	r0, r5
 8008494:	b007      	add	sp, #28
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800849e:	2a0d      	cmp	r2, #13
 80084a0:	d8e6      	bhi.n	8008470 <_scanf_float+0x60>
 80084a2:	a101      	add	r1, pc, #4	; (adr r1, 80084a8 <_scanf_float+0x98>)
 80084a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084a8:	080085e7 	.word	0x080085e7
 80084ac:	08008471 	.word	0x08008471
 80084b0:	08008471 	.word	0x08008471
 80084b4:	08008471 	.word	0x08008471
 80084b8:	08008647 	.word	0x08008647
 80084bc:	0800861f 	.word	0x0800861f
 80084c0:	08008471 	.word	0x08008471
 80084c4:	08008471 	.word	0x08008471
 80084c8:	080085f5 	.word	0x080085f5
 80084cc:	08008471 	.word	0x08008471
 80084d0:	08008471 	.word	0x08008471
 80084d4:	08008471 	.word	0x08008471
 80084d8:	08008471 	.word	0x08008471
 80084dc:	080085ad 	.word	0x080085ad
 80084e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084e4:	e7db      	b.n	800849e <_scanf_float+0x8e>
 80084e6:	290e      	cmp	r1, #14
 80084e8:	d8c2      	bhi.n	8008470 <_scanf_float+0x60>
 80084ea:	a001      	add	r0, pc, #4	; (adr r0, 80084f0 <_scanf_float+0xe0>)
 80084ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084f0:	0800859f 	.word	0x0800859f
 80084f4:	08008471 	.word	0x08008471
 80084f8:	0800859f 	.word	0x0800859f
 80084fc:	08008633 	.word	0x08008633
 8008500:	08008471 	.word	0x08008471
 8008504:	0800854d 	.word	0x0800854d
 8008508:	08008589 	.word	0x08008589
 800850c:	08008589 	.word	0x08008589
 8008510:	08008589 	.word	0x08008589
 8008514:	08008589 	.word	0x08008589
 8008518:	08008589 	.word	0x08008589
 800851c:	08008589 	.word	0x08008589
 8008520:	08008589 	.word	0x08008589
 8008524:	08008589 	.word	0x08008589
 8008528:	08008589 	.word	0x08008589
 800852c:	2b6e      	cmp	r3, #110	; 0x6e
 800852e:	d809      	bhi.n	8008544 <_scanf_float+0x134>
 8008530:	2b60      	cmp	r3, #96	; 0x60
 8008532:	d8b2      	bhi.n	800849a <_scanf_float+0x8a>
 8008534:	2b54      	cmp	r3, #84	; 0x54
 8008536:	d077      	beq.n	8008628 <_scanf_float+0x218>
 8008538:	2b59      	cmp	r3, #89	; 0x59
 800853a:	d199      	bne.n	8008470 <_scanf_float+0x60>
 800853c:	2d07      	cmp	r5, #7
 800853e:	d197      	bne.n	8008470 <_scanf_float+0x60>
 8008540:	2508      	movs	r5, #8
 8008542:	e029      	b.n	8008598 <_scanf_float+0x188>
 8008544:	2b74      	cmp	r3, #116	; 0x74
 8008546:	d06f      	beq.n	8008628 <_scanf_float+0x218>
 8008548:	2b79      	cmp	r3, #121	; 0x79
 800854a:	e7f6      	b.n	800853a <_scanf_float+0x12a>
 800854c:	6821      	ldr	r1, [r4, #0]
 800854e:	05c8      	lsls	r0, r1, #23
 8008550:	d51a      	bpl.n	8008588 <_scanf_float+0x178>
 8008552:	9b02      	ldr	r3, [sp, #8]
 8008554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008558:	6021      	str	r1, [r4, #0]
 800855a:	f109 0901 	add.w	r9, r9, #1
 800855e:	b11b      	cbz	r3, 8008568 <_scanf_float+0x158>
 8008560:	3b01      	subs	r3, #1
 8008562:	3201      	adds	r2, #1
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	60a2      	str	r2, [r4, #8]
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	3301      	adds	r3, #1
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3b01      	subs	r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	f340 8084 	ble.w	8008688 <_scanf_float+0x278>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	e766      	b.n	8008456 <_scanf_float+0x46>
 8008588:	eb1a 0f05 	cmn.w	sl, r5
 800858c:	f47f af70 	bne.w	8008470 <_scanf_float+0x60>
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008596:	6022      	str	r2, [r4, #0]
 8008598:	f806 3b01 	strb.w	r3, [r6], #1
 800859c:	e7e4      	b.n	8008568 <_scanf_float+0x158>
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	0610      	lsls	r0, r2, #24
 80085a2:	f57f af65 	bpl.w	8008470 <_scanf_float+0x60>
 80085a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085aa:	e7f4      	b.n	8008596 <_scanf_float+0x186>
 80085ac:	f1ba 0f00 	cmp.w	sl, #0
 80085b0:	d10e      	bne.n	80085d0 <_scanf_float+0x1c0>
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	d10e      	bne.n	80085d6 <_scanf_float+0x1c6>
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085c2:	d108      	bne.n	80085d6 <_scanf_float+0x1c6>
 80085c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085c8:	6022      	str	r2, [r4, #0]
 80085ca:	f04f 0a01 	mov.w	sl, #1
 80085ce:	e7e3      	b.n	8008598 <_scanf_float+0x188>
 80085d0:	f1ba 0f02 	cmp.w	sl, #2
 80085d4:	d055      	beq.n	8008682 <_scanf_float+0x272>
 80085d6:	2d01      	cmp	r5, #1
 80085d8:	d002      	beq.n	80085e0 <_scanf_float+0x1d0>
 80085da:	2d04      	cmp	r5, #4
 80085dc:	f47f af48 	bne.w	8008470 <_scanf_float+0x60>
 80085e0:	3501      	adds	r5, #1
 80085e2:	b2ed      	uxtb	r5, r5
 80085e4:	e7d8      	b.n	8008598 <_scanf_float+0x188>
 80085e6:	f1ba 0f01 	cmp.w	sl, #1
 80085ea:	f47f af41 	bne.w	8008470 <_scanf_float+0x60>
 80085ee:	f04f 0a02 	mov.w	sl, #2
 80085f2:	e7d1      	b.n	8008598 <_scanf_float+0x188>
 80085f4:	b97d      	cbnz	r5, 8008616 <_scanf_float+0x206>
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	f47f af3c 	bne.w	8008476 <_scanf_float+0x66>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008608:	f47f af39 	bne.w	800847e <_scanf_float+0x6e>
 800860c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	2501      	movs	r5, #1
 8008614:	e7c0      	b.n	8008598 <_scanf_float+0x188>
 8008616:	2d03      	cmp	r5, #3
 8008618:	d0e2      	beq.n	80085e0 <_scanf_float+0x1d0>
 800861a:	2d05      	cmp	r5, #5
 800861c:	e7de      	b.n	80085dc <_scanf_float+0x1cc>
 800861e:	2d02      	cmp	r5, #2
 8008620:	f47f af26 	bne.w	8008470 <_scanf_float+0x60>
 8008624:	2503      	movs	r5, #3
 8008626:	e7b7      	b.n	8008598 <_scanf_float+0x188>
 8008628:	2d06      	cmp	r5, #6
 800862a:	f47f af21 	bne.w	8008470 <_scanf_float+0x60>
 800862e:	2507      	movs	r5, #7
 8008630:	e7b2      	b.n	8008598 <_scanf_float+0x188>
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	0591      	lsls	r1, r2, #22
 8008636:	f57f af1b 	bpl.w	8008470 <_scanf_float+0x60>
 800863a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	f8cd 9004 	str.w	r9, [sp, #4]
 8008644:	e7a8      	b.n	8008598 <_scanf_float+0x188>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800864c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008650:	d006      	beq.n	8008660 <_scanf_float+0x250>
 8008652:	0550      	lsls	r0, r2, #21
 8008654:	f57f af0c 	bpl.w	8008470 <_scanf_float+0x60>
 8008658:	f1b9 0f00 	cmp.w	r9, #0
 800865c:	f43f af0f 	beq.w	800847e <_scanf_float+0x6e>
 8008660:	0591      	lsls	r1, r2, #22
 8008662:	bf58      	it	pl
 8008664:	9901      	ldrpl	r1, [sp, #4]
 8008666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800866a:	bf58      	it	pl
 800866c:	eba9 0101 	subpl.w	r1, r9, r1
 8008670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008674:	bf58      	it	pl
 8008676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	f04f 0900 	mov.w	r9, #0
 8008680:	e78a      	b.n	8008598 <_scanf_float+0x188>
 8008682:	f04f 0a03 	mov.w	sl, #3
 8008686:	e787      	b.n	8008598 <_scanf_float+0x188>
 8008688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800868c:	4639      	mov	r1, r7
 800868e:	4640      	mov	r0, r8
 8008690:	4798      	blx	r3
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f aedf 	beq.w	8008456 <_scanf_float+0x46>
 8008698:	e6ea      	b.n	8008470 <_scanf_float+0x60>
 800869a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800869e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086a2:	463a      	mov	r2, r7
 80086a4:	4640      	mov	r0, r8
 80086a6:	4798      	blx	r3
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	e6ec      	b.n	800848a <_scanf_float+0x7a>
 80086b0:	1e6b      	subs	r3, r5, #1
 80086b2:	2b06      	cmp	r3, #6
 80086b4:	d825      	bhi.n	8008702 <_scanf_float+0x2f2>
 80086b6:	2d02      	cmp	r5, #2
 80086b8:	d836      	bhi.n	8008728 <_scanf_float+0x318>
 80086ba:	455e      	cmp	r6, fp
 80086bc:	f67f aee8 	bls.w	8008490 <_scanf_float+0x80>
 80086c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c8:	463a      	mov	r2, r7
 80086ca:	4640      	mov	r0, r8
 80086cc:	4798      	blx	r3
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	e7f1      	b.n	80086ba <_scanf_float+0x2aa>
 80086d6:	9802      	ldr	r0, [sp, #8]
 80086d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086e0:	9002      	str	r0, [sp, #8]
 80086e2:	463a      	mov	r2, r7
 80086e4:	4640      	mov	r0, r8
 80086e6:	4798      	blx	r3
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086f2:	fa5f fa8a 	uxtb.w	sl, sl
 80086f6:	f1ba 0f02 	cmp.w	sl, #2
 80086fa:	d1ec      	bne.n	80086d6 <_scanf_float+0x2c6>
 80086fc:	3d03      	subs	r5, #3
 80086fe:	b2ed      	uxtb	r5, r5
 8008700:	1b76      	subs	r6, r6, r5
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	05da      	lsls	r2, r3, #23
 8008706:	d52f      	bpl.n	8008768 <_scanf_float+0x358>
 8008708:	055b      	lsls	r3, r3, #21
 800870a:	d510      	bpl.n	800872e <_scanf_float+0x31e>
 800870c:	455e      	cmp	r6, fp
 800870e:	f67f aebf 	bls.w	8008490 <_scanf_float+0x80>
 8008712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800871a:	463a      	mov	r2, r7
 800871c:	4640      	mov	r0, r8
 800871e:	4798      	blx	r3
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	3b01      	subs	r3, #1
 8008724:	6123      	str	r3, [r4, #16]
 8008726:	e7f1      	b.n	800870c <_scanf_float+0x2fc>
 8008728:	46aa      	mov	sl, r5
 800872a:	9602      	str	r6, [sp, #8]
 800872c:	e7df      	b.n	80086ee <_scanf_float+0x2de>
 800872e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	2965      	cmp	r1, #101	; 0x65
 8008736:	f103 33ff 	add.w	r3, r3, #4294967295
 800873a:	f106 35ff 	add.w	r5, r6, #4294967295
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	d00c      	beq.n	800875c <_scanf_float+0x34c>
 8008742:	2945      	cmp	r1, #69	; 0x45
 8008744:	d00a      	beq.n	800875c <_scanf_float+0x34c>
 8008746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800874a:	463a      	mov	r2, r7
 800874c:	4640      	mov	r0, r8
 800874e:	4798      	blx	r3
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008756:	3b01      	subs	r3, #1
 8008758:	1eb5      	subs	r5, r6, #2
 800875a:	6123      	str	r3, [r4, #16]
 800875c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008760:	463a      	mov	r2, r7
 8008762:	4640      	mov	r0, r8
 8008764:	4798      	blx	r3
 8008766:	462e      	mov	r6, r5
 8008768:	6825      	ldr	r5, [r4, #0]
 800876a:	f015 0510 	ands.w	r5, r5, #16
 800876e:	d158      	bne.n	8008822 <_scanf_float+0x412>
 8008770:	7035      	strb	r5, [r6, #0]
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877c:	d11c      	bne.n	80087b8 <_scanf_float+0x3a8>
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	454b      	cmp	r3, r9
 8008782:	eba3 0209 	sub.w	r2, r3, r9
 8008786:	d124      	bne.n	80087d2 <_scanf_float+0x3c2>
 8008788:	2200      	movs	r2, #0
 800878a:	4659      	mov	r1, fp
 800878c:	4640      	mov	r0, r8
 800878e:	f002 fd87 	bl	800b2a0 <_strtod_r>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f011 0f02 	tst.w	r1, #2
 800879c:	ec57 6b10 	vmov	r6, r7, d0
 80087a0:	f103 0204 	add.w	r2, r3, #4
 80087a4:	d020      	beq.n	80087e8 <_scanf_float+0x3d8>
 80087a6:	9903      	ldr	r1, [sp, #12]
 80087a8:	600a      	str	r2, [r1, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	e9c3 6700 	strd	r6, r7, [r3]
 80087b0:	68e3      	ldr	r3, [r4, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60e3      	str	r3, [r4, #12]
 80087b6:	e66c      	b.n	8008492 <_scanf_float+0x82>
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0e4      	beq.n	8008788 <_scanf_float+0x378>
 80087be:	9905      	ldr	r1, [sp, #20]
 80087c0:	230a      	movs	r3, #10
 80087c2:	462a      	mov	r2, r5
 80087c4:	3101      	adds	r1, #1
 80087c6:	4640      	mov	r0, r8
 80087c8:	f002 fdf2 	bl	800b3b0 <_strtol_r>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	9e05      	ldr	r6, [sp, #20]
 80087d0:	1ac2      	subs	r2, r0, r3
 80087d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087d6:	429e      	cmp	r6, r3
 80087d8:	bf28      	it	cs
 80087da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087de:	4912      	ldr	r1, [pc, #72]	; (8008828 <_scanf_float+0x418>)
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 f955 	bl	8008a90 <siprintf>
 80087e6:	e7cf      	b.n	8008788 <_scanf_float+0x378>
 80087e8:	f011 0f04 	tst.w	r1, #4
 80087ec:	9903      	ldr	r1, [sp, #12]
 80087ee:	600a      	str	r2, [r1, #0]
 80087f0:	d1db      	bne.n	80087aa <_scanf_float+0x39a>
 80087f2:	f8d3 8000 	ldr.w	r8, [r3]
 80087f6:	ee10 2a10 	vmov	r2, s0
 80087fa:	ee10 0a10 	vmov	r0, s0
 80087fe:	463b      	mov	r3, r7
 8008800:	4639      	mov	r1, r7
 8008802:	f7f8 f993 	bl	8000b2c <__aeabi_dcmpun>
 8008806:	b128      	cbz	r0, 8008814 <_scanf_float+0x404>
 8008808:	4808      	ldr	r0, [pc, #32]	; (800882c <_scanf_float+0x41c>)
 800880a:	f000 fb0f 	bl	8008e2c <nanf>
 800880e:	ed88 0a00 	vstr	s0, [r8]
 8008812:	e7cd      	b.n	80087b0 <_scanf_float+0x3a0>
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	f7f8 f9e6 	bl	8000be8 <__aeabi_d2f>
 800881c:	f8c8 0000 	str.w	r0, [r8]
 8008820:	e7c6      	b.n	80087b0 <_scanf_float+0x3a0>
 8008822:	2500      	movs	r5, #0
 8008824:	e635      	b.n	8008492 <_scanf_float+0x82>
 8008826:	bf00      	nop
 8008828:	0800d2f2 	.word	0x0800d2f2
 800882c:	0800d6a0 	.word	0x0800d6a0

08008830 <std>:
 8008830:	2300      	movs	r3, #0
 8008832:	b510      	push	{r4, lr}
 8008834:	4604      	mov	r4, r0
 8008836:	e9c0 3300 	strd	r3, r3, [r0]
 800883a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883e:	6083      	str	r3, [r0, #8]
 8008840:	8181      	strh	r1, [r0, #12]
 8008842:	6643      	str	r3, [r0, #100]	; 0x64
 8008844:	81c2      	strh	r2, [r0, #14]
 8008846:	6183      	str	r3, [r0, #24]
 8008848:	4619      	mov	r1, r3
 800884a:	2208      	movs	r2, #8
 800884c:	305c      	adds	r0, #92	; 0x5c
 800884e:	f000 fa45 	bl	8008cdc <memset>
 8008852:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <std+0x58>)
 8008854:	6263      	str	r3, [r4, #36]	; 0x24
 8008856:	4b0d      	ldr	r3, [pc, #52]	; (800888c <std+0x5c>)
 8008858:	62a3      	str	r3, [r4, #40]	; 0x28
 800885a:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <std+0x60>)
 800885c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800885e:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <std+0x64>)
 8008860:	6323      	str	r3, [r4, #48]	; 0x30
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <std+0x68>)
 8008864:	6224      	str	r4, [r4, #32]
 8008866:	429c      	cmp	r4, r3
 8008868:	d006      	beq.n	8008878 <std+0x48>
 800886a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800886e:	4294      	cmp	r4, r2
 8008870:	d002      	beq.n	8008878 <std+0x48>
 8008872:	33d0      	adds	r3, #208	; 0xd0
 8008874:	429c      	cmp	r4, r3
 8008876:	d105      	bne.n	8008884 <std+0x54>
 8008878:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	f000 bad0 	b.w	8008e24 <__retarget_lock_init_recursive>
 8008884:	bd10      	pop	{r4, pc}
 8008886:	bf00      	nop
 8008888:	08008b29 	.word	0x08008b29
 800888c:	08008b4f 	.word	0x08008b4f
 8008890:	08008b87 	.word	0x08008b87
 8008894:	08008bab 	.word	0x08008bab
 8008898:	20000ba0 	.word	0x20000ba0

0800889c <stdio_exit_handler>:
 800889c:	4a02      	ldr	r2, [pc, #8]	; (80088a8 <stdio_exit_handler+0xc>)
 800889e:	4903      	ldr	r1, [pc, #12]	; (80088ac <stdio_exit_handler+0x10>)
 80088a0:	4803      	ldr	r0, [pc, #12]	; (80088b0 <stdio_exit_handler+0x14>)
 80088a2:	f000 b869 	b.w	8008978 <_fwalk_sglue>
 80088a6:	bf00      	nop
 80088a8:	2000001c 	.word	0x2000001c
 80088ac:	0800c039 	.word	0x0800c039
 80088b0:	20000028 	.word	0x20000028

080088b4 <cleanup_stdio>:
 80088b4:	6841      	ldr	r1, [r0, #4]
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <cleanup_stdio+0x34>)
 80088b8:	4299      	cmp	r1, r3
 80088ba:	b510      	push	{r4, lr}
 80088bc:	4604      	mov	r4, r0
 80088be:	d001      	beq.n	80088c4 <cleanup_stdio+0x10>
 80088c0:	f003 fbba 	bl	800c038 <_fflush_r>
 80088c4:	68a1      	ldr	r1, [r4, #8]
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <cleanup_stdio+0x38>)
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d002      	beq.n	80088d2 <cleanup_stdio+0x1e>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f003 fbb3 	bl	800c038 <_fflush_r>
 80088d2:	68e1      	ldr	r1, [r4, #12]
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <cleanup_stdio+0x3c>)
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d004      	beq.n	80088e4 <cleanup_stdio+0x30>
 80088da:	4620      	mov	r0, r4
 80088dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e0:	f003 bbaa 	b.w	800c038 <_fflush_r>
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	bf00      	nop
 80088e8:	20000ba0 	.word	0x20000ba0
 80088ec:	20000c08 	.word	0x20000c08
 80088f0:	20000c70 	.word	0x20000c70

080088f4 <global_stdio_init.part.0>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <global_stdio_init.part.0+0x30>)
 80088f8:	4c0b      	ldr	r4, [pc, #44]	; (8008928 <global_stdio_init.part.0+0x34>)
 80088fa:	4a0c      	ldr	r2, [pc, #48]	; (800892c <global_stdio_init.part.0+0x38>)
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	4620      	mov	r0, r4
 8008900:	2200      	movs	r2, #0
 8008902:	2104      	movs	r1, #4
 8008904:	f7ff ff94 	bl	8008830 <std>
 8008908:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800890c:	2201      	movs	r2, #1
 800890e:	2109      	movs	r1, #9
 8008910:	f7ff ff8e 	bl	8008830 <std>
 8008914:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008918:	2202      	movs	r2, #2
 800891a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891e:	2112      	movs	r1, #18
 8008920:	f7ff bf86 	b.w	8008830 <std>
 8008924:	20000cd8 	.word	0x20000cd8
 8008928:	20000ba0 	.word	0x20000ba0
 800892c:	0800889d 	.word	0x0800889d

08008930 <__sfp_lock_acquire>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sfp_lock_acquire+0x8>)
 8008932:	f000 ba78 	b.w	8008e26 <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	20000ce1 	.word	0x20000ce1

0800893c <__sfp_lock_release>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__sfp_lock_release+0x8>)
 800893e:	f000 ba73 	b.w	8008e28 <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	20000ce1 	.word	0x20000ce1

08008948 <__sinit>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	f7ff fff0 	bl	8008930 <__sfp_lock_acquire>
 8008950:	6a23      	ldr	r3, [r4, #32]
 8008952:	b11b      	cbz	r3, 800895c <__sinit+0x14>
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008958:	f7ff bff0 	b.w	800893c <__sfp_lock_release>
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <__sinit+0x28>)
 800895e:	6223      	str	r3, [r4, #32]
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <__sinit+0x2c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f5      	bne.n	8008954 <__sinit+0xc>
 8008968:	f7ff ffc4 	bl	80088f4 <global_stdio_init.part.0>
 800896c:	e7f2      	b.n	8008954 <__sinit+0xc>
 800896e:	bf00      	nop
 8008970:	080088b5 	.word	0x080088b5
 8008974:	20000cd8 	.word	0x20000cd8

08008978 <_fwalk_sglue>:
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	4607      	mov	r7, r0
 800897e:	4688      	mov	r8, r1
 8008980:	4614      	mov	r4, r2
 8008982:	2600      	movs	r6, #0
 8008984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008988:	f1b9 0901 	subs.w	r9, r9, #1
 800898c:	d505      	bpl.n	800899a <_fwalk_sglue+0x22>
 800898e:	6824      	ldr	r4, [r4, #0]
 8008990:	2c00      	cmp	r4, #0
 8008992:	d1f7      	bne.n	8008984 <_fwalk_sglue+0xc>
 8008994:	4630      	mov	r0, r6
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d907      	bls.n	80089b0 <_fwalk_sglue+0x38>
 80089a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a4:	3301      	adds	r3, #1
 80089a6:	d003      	beq.n	80089b0 <_fwalk_sglue+0x38>
 80089a8:	4629      	mov	r1, r5
 80089aa:	4638      	mov	r0, r7
 80089ac:	47c0      	blx	r8
 80089ae:	4306      	orrs	r6, r0
 80089b0:	3568      	adds	r5, #104	; 0x68
 80089b2:	e7e9      	b.n	8008988 <_fwalk_sglue+0x10>

080089b4 <iprintf>:
 80089b4:	b40f      	push	{r0, r1, r2, r3}
 80089b6:	b507      	push	{r0, r1, r2, lr}
 80089b8:	4906      	ldr	r1, [pc, #24]	; (80089d4 <iprintf+0x20>)
 80089ba:	ab04      	add	r3, sp, #16
 80089bc:	6808      	ldr	r0, [r1, #0]
 80089be:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c2:	6881      	ldr	r1, [r0, #8]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	f003 f849 	bl	800ba5c <_vfiprintf_r>
 80089ca:	b003      	add	sp, #12
 80089cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d0:	b004      	add	sp, #16
 80089d2:	4770      	bx	lr
 80089d4:	20000074 	.word	0x20000074

080089d8 <_puts_r>:
 80089d8:	6a03      	ldr	r3, [r0, #32]
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	6884      	ldr	r4, [r0, #8]
 80089de:	4605      	mov	r5, r0
 80089e0:	460e      	mov	r6, r1
 80089e2:	b90b      	cbnz	r3, 80089e8 <_puts_r+0x10>
 80089e4:	f7ff ffb0 	bl	8008948 <__sinit>
 80089e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ea:	07db      	lsls	r3, r3, #31
 80089ec:	d405      	bmi.n	80089fa <_puts_r+0x22>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	0598      	lsls	r0, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_puts_r+0x22>
 80089f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f6:	f000 fa16 	bl	8008e26 <__retarget_lock_acquire_recursive>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	0719      	lsls	r1, r3, #28
 80089fe:	d513      	bpl.n	8008a28 <_puts_r+0x50>
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	b18b      	cbz	r3, 8008a28 <_puts_r+0x50>
 8008a04:	3e01      	subs	r6, #1
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	b9e9      	cbnz	r1, 8008a4e <_puts_r+0x76>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da2e      	bge.n	8008a74 <_puts_r+0x9c>
 8008a16:	4622      	mov	r2, r4
 8008a18:	210a      	movs	r1, #10
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 f8c9 	bl	8008bb2 <__swbuf_r>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d007      	beq.n	8008a34 <_puts_r+0x5c>
 8008a24:	250a      	movs	r5, #10
 8008a26:	e007      	b.n	8008a38 <_puts_r+0x60>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 f8fe 	bl	8008c2c <__swsetup_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0e7      	beq.n	8008a04 <_puts_r+0x2c>
 8008a34:	f04f 35ff 	mov.w	r5, #4294967295
 8008a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3a:	07da      	lsls	r2, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <_puts_r+0x72>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <_puts_r+0x72>
 8008a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a46:	f000 f9ef 	bl	8008e28 <__retarget_lock_release_recursive>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da04      	bge.n	8008a5c <_puts_r+0x84>
 8008a52:	69a2      	ldr	r2, [r4, #24]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	dc06      	bgt.n	8008a66 <_puts_r+0x8e>
 8008a58:	290a      	cmp	r1, #10
 8008a5a:	d004      	beq.n	8008a66 <_puts_r+0x8e>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	7019      	strb	r1, [r3, #0]
 8008a64:	e7cf      	b.n	8008a06 <_puts_r+0x2e>
 8008a66:	4622      	mov	r2, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 f8a2 	bl	8008bb2 <__swbuf_r>
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d1c9      	bne.n	8008a06 <_puts_r+0x2e>
 8008a72:	e7df      	b.n	8008a34 <_puts_r+0x5c>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	250a      	movs	r5, #10
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	701d      	strb	r5, [r3, #0]
 8008a7e:	e7db      	b.n	8008a38 <_puts_r+0x60>

08008a80 <puts>:
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <puts+0xc>)
 8008a82:	4601      	mov	r1, r0
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f7ff bfa7 	b.w	80089d8 <_puts_r>
 8008a8a:	bf00      	nop
 8008a8c:	20000074 	.word	0x20000074

08008a90 <siprintf>:
 8008a90:	b40e      	push	{r1, r2, r3}
 8008a92:	b500      	push	{lr}
 8008a94:	b09c      	sub	sp, #112	; 0x70
 8008a96:	ab1d      	add	r3, sp, #116	; 0x74
 8008a98:	9002      	str	r0, [sp, #8]
 8008a9a:	9006      	str	r0, [sp, #24]
 8008a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008aa0:	4809      	ldr	r0, [pc, #36]	; (8008ac8 <siprintf+0x38>)
 8008aa2:	9107      	str	r1, [sp, #28]
 8008aa4:	9104      	str	r1, [sp, #16]
 8008aa6:	4909      	ldr	r1, [pc, #36]	; (8008acc <siprintf+0x3c>)
 8008aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aac:	9105      	str	r1, [sp, #20]
 8008aae:	6800      	ldr	r0, [r0, #0]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	a902      	add	r1, sp, #8
 8008ab4:	f002 fcd8 	bl	800b468 <_svfiprintf_r>
 8008ab8:	9b02      	ldr	r3, [sp, #8]
 8008aba:	2200      	movs	r2, #0
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	b01c      	add	sp, #112	; 0x70
 8008ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac4:	b003      	add	sp, #12
 8008ac6:	4770      	bx	lr
 8008ac8:	20000074 	.word	0x20000074
 8008acc:	ffff0208 	.word	0xffff0208

08008ad0 <siscanf>:
 8008ad0:	b40e      	push	{r1, r2, r3}
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	b09f      	sub	sp, #124	; 0x7c
 8008ad6:	ac21      	add	r4, sp, #132	; 0x84
 8008ad8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008adc:	f854 2b04 	ldr.w	r2, [r4], #4
 8008ae0:	9201      	str	r2, [sp, #4]
 8008ae2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008ae6:	9004      	str	r0, [sp, #16]
 8008ae8:	9008      	str	r0, [sp, #32]
 8008aea:	f7f7 fbc1 	bl	8000270 <strlen>
 8008aee:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <siscanf+0x50>)
 8008af0:	9005      	str	r0, [sp, #20]
 8008af2:	9009      	str	r0, [sp, #36]	; 0x24
 8008af4:	930d      	str	r3, [sp, #52]	; 0x34
 8008af6:	480b      	ldr	r0, [pc, #44]	; (8008b24 <siscanf+0x54>)
 8008af8:	9a01      	ldr	r2, [sp, #4]
 8008afa:	6800      	ldr	r0, [r0, #0]
 8008afc:	9403      	str	r4, [sp, #12]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9311      	str	r3, [sp, #68]	; 0x44
 8008b02:	9316      	str	r3, [sp, #88]	; 0x58
 8008b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b08:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008b0c:	a904      	add	r1, sp, #16
 8008b0e:	4623      	mov	r3, r4
 8008b10:	f002 fe02 	bl	800b718 <__ssvfiscanf_r>
 8008b14:	b01f      	add	sp, #124	; 0x7c
 8008b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1a:	b003      	add	sp, #12
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	08008b4b 	.word	0x08008b4b
 8008b24:	20000074 	.word	0x20000074

08008b28 <__sread>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b30:	f000 f92a 	bl	8008d88 <_read_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	bfab      	itete	ge
 8008b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b3c:	181b      	addge	r3, r3, r0
 8008b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b42:	bfac      	ite	ge
 8008b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b46:	81a3      	strhlt	r3, [r4, #12]
 8008b48:	bd10      	pop	{r4, pc}

08008b4a <__seofread>:
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	4770      	bx	lr

08008b4e <__swrite>:
 8008b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b52:	461f      	mov	r7, r3
 8008b54:	898b      	ldrh	r3, [r1, #12]
 8008b56:	05db      	lsls	r3, r3, #23
 8008b58:	4605      	mov	r5, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	d505      	bpl.n	8008b6c <__swrite+0x1e>
 8008b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b64:	2302      	movs	r3, #2
 8008b66:	2200      	movs	r2, #0
 8008b68:	f000 f8fc 	bl	8008d64 <_lseek_r>
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b76:	81a3      	strh	r3, [r4, #12]
 8008b78:	4632      	mov	r2, r6
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b82:	f000 b913 	b.w	8008dac <_write_r>

08008b86 <__sseek>:
 8008b86:	b510      	push	{r4, lr}
 8008b88:	460c      	mov	r4, r1
 8008b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8e:	f000 f8e9 	bl	8008d64 <_lseek_r>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	bf15      	itete	ne
 8008b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ba2:	81a3      	strheq	r3, [r4, #12]
 8008ba4:	bf18      	it	ne
 8008ba6:	81a3      	strhne	r3, [r4, #12]
 8008ba8:	bd10      	pop	{r4, pc}

08008baa <__sclose>:
 8008baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bae:	f000 b8c9 	b.w	8008d44 <_close_r>

08008bb2 <__swbuf_r>:
 8008bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	4605      	mov	r5, r0
 8008bba:	b118      	cbz	r0, 8008bc4 <__swbuf_r+0x12>
 8008bbc:	6a03      	ldr	r3, [r0, #32]
 8008bbe:	b90b      	cbnz	r3, 8008bc4 <__swbuf_r+0x12>
 8008bc0:	f7ff fec2 	bl	8008948 <__sinit>
 8008bc4:	69a3      	ldr	r3, [r4, #24]
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	071a      	lsls	r2, r3, #28
 8008bcc:	d525      	bpl.n	8008c1a <__swbuf_r+0x68>
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	b31b      	cbz	r3, 8008c1a <__swbuf_r+0x68>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	6922      	ldr	r2, [r4, #16]
 8008bd6:	1a98      	subs	r0, r3, r2
 8008bd8:	6963      	ldr	r3, [r4, #20]
 8008bda:	b2f6      	uxtb	r6, r6
 8008bdc:	4283      	cmp	r3, r0
 8008bde:	4637      	mov	r7, r6
 8008be0:	dc04      	bgt.n	8008bec <__swbuf_r+0x3a>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	f003 fa27 	bl	800c038 <_fflush_r>
 8008bea:	b9e0      	cbnz	r0, 8008c26 <__swbuf_r+0x74>
 8008bec:	68a3      	ldr	r3, [r4, #8]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	60a3      	str	r3, [r4, #8]
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	6022      	str	r2, [r4, #0]
 8008bf8:	701e      	strb	r6, [r3, #0]
 8008bfa:	6962      	ldr	r2, [r4, #20]
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d004      	beq.n	8008c0c <__swbuf_r+0x5a>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	07db      	lsls	r3, r3, #31
 8008c06:	d506      	bpl.n	8008c16 <__swbuf_r+0x64>
 8008c08:	2e0a      	cmp	r6, #10
 8008c0a:	d104      	bne.n	8008c16 <__swbuf_r+0x64>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f003 fa12 	bl	800c038 <_fflush_r>
 8008c14:	b938      	cbnz	r0, 8008c26 <__swbuf_r+0x74>
 8008c16:	4638      	mov	r0, r7
 8008c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 f805 	bl	8008c2c <__swsetup_r>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0d5      	beq.n	8008bd2 <__swbuf_r+0x20>
 8008c26:	f04f 37ff 	mov.w	r7, #4294967295
 8008c2a:	e7f4      	b.n	8008c16 <__swbuf_r+0x64>

08008c2c <__swsetup_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4b2a      	ldr	r3, [pc, #168]	; (8008cd8 <__swsetup_r+0xac>)
 8008c30:	4605      	mov	r5, r0
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	460c      	mov	r4, r1
 8008c36:	b118      	cbz	r0, 8008c40 <__swsetup_r+0x14>
 8008c38:	6a03      	ldr	r3, [r0, #32]
 8008c3a:	b90b      	cbnz	r3, 8008c40 <__swsetup_r+0x14>
 8008c3c:	f7ff fe84 	bl	8008948 <__sinit>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c46:	0718      	lsls	r0, r3, #28
 8008c48:	d422      	bmi.n	8008c90 <__swsetup_r+0x64>
 8008c4a:	06d9      	lsls	r1, r3, #27
 8008c4c:	d407      	bmi.n	8008c5e <__swsetup_r+0x32>
 8008c4e:	2309      	movs	r3, #9
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5c:	e034      	b.n	8008cc8 <__swsetup_r+0x9c>
 8008c5e:	0758      	lsls	r0, r3, #29
 8008c60:	d512      	bpl.n	8008c88 <__swsetup_r+0x5c>
 8008c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c64:	b141      	cbz	r1, 8008c78 <__swsetup_r+0x4c>
 8008c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	d002      	beq.n	8008c74 <__swsetup_r+0x48>
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f000 ff5c 	bl	8009b2c <_free_r>
 8008c74:	2300      	movs	r3, #0
 8008c76:	6363      	str	r3, [r4, #52]	; 0x34
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	2300      	movs	r3, #0
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f043 0308 	orr.w	r3, r3, #8
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	b94b      	cbnz	r3, 8008ca8 <__swsetup_r+0x7c>
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c9e:	d003      	beq.n	8008ca8 <__swsetup_r+0x7c>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f003 fa16 	bl	800c0d4 <__smakebuf_r>
 8008ca8:	89a0      	ldrh	r0, [r4, #12]
 8008caa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cae:	f010 0301 	ands.w	r3, r0, #1
 8008cb2:	d00a      	beq.n	8008cca <__swsetup_r+0x9e>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60a3      	str	r3, [r4, #8]
 8008cb8:	6963      	ldr	r3, [r4, #20]
 8008cba:	425b      	negs	r3, r3
 8008cbc:	61a3      	str	r3, [r4, #24]
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	b943      	cbnz	r3, 8008cd4 <__swsetup_r+0xa8>
 8008cc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cc6:	d1c4      	bne.n	8008c52 <__swsetup_r+0x26>
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	0781      	lsls	r1, r0, #30
 8008ccc:	bf58      	it	pl
 8008cce:	6963      	ldrpl	r3, [r4, #20]
 8008cd0:	60a3      	str	r3, [r4, #8]
 8008cd2:	e7f4      	b.n	8008cbe <__swsetup_r+0x92>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e7f7      	b.n	8008cc8 <__swsetup_r+0x9c>
 8008cd8:	20000074 	.word	0x20000074

08008cdc <memset>:
 8008cdc:	4402      	add	r2, r0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d100      	bne.n	8008ce6 <memset+0xa>
 8008ce4:	4770      	bx	lr
 8008ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cea:	e7f9      	b.n	8008ce0 <memset+0x4>

08008cec <strncmp>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	b16a      	cbz	r2, 8008d0c <strncmp+0x20>
 8008cf0:	3901      	subs	r1, #1
 8008cf2:	1884      	adds	r4, r0, r2
 8008cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d103      	bne.n	8008d08 <strncmp+0x1c>
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d001      	beq.n	8008d08 <strncmp+0x1c>
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d1f5      	bne.n	8008cf4 <strncmp+0x8>
 8008d08:	1ad0      	subs	r0, r2, r3
 8008d0a:	bd10      	pop	{r4, pc}
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	e7fc      	b.n	8008d0a <strncmp+0x1e>

08008d10 <strstr>:
 8008d10:	780a      	ldrb	r2, [r1, #0]
 8008d12:	b570      	push	{r4, r5, r6, lr}
 8008d14:	b96a      	cbnz	r2, 8008d32 <strstr+0x22>
 8008d16:	bd70      	pop	{r4, r5, r6, pc}
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d109      	bne.n	8008d30 <strstr+0x20>
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	4605      	mov	r5, r0
 8008d20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0f6      	beq.n	8008d16 <strstr+0x6>
 8008d28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008d2c:	429e      	cmp	r6, r3
 8008d2e:	d0f7      	beq.n	8008d20 <strstr+0x10>
 8008d30:	3001      	adds	r0, #1
 8008d32:	7803      	ldrb	r3, [r0, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1ef      	bne.n	8008d18 <strstr+0x8>
 8008d38:	4618      	mov	r0, r3
 8008d3a:	e7ec      	b.n	8008d16 <strstr+0x6>

08008d3c <_localeconv_r>:
 8008d3c:	4800      	ldr	r0, [pc, #0]	; (8008d40 <_localeconv_r+0x4>)
 8008d3e:	4770      	bx	lr
 8008d40:	20000168 	.word	0x20000168

08008d44 <_close_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_close_r+0x1c>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7fa fb43 	bl	80033da <_close>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_close_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_close_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20000cdc 	.word	0x20000cdc

08008d64 <_lseek_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	; (8008d84 <_lseek_r+0x20>)
 8008d68:	4604      	mov	r4, r0
 8008d6a:	4608      	mov	r0, r1
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f7fa fb58 	bl	8003428 <_lseek>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_lseek_r+0x1e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_lseek_r+0x1e>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20000cdc 	.word	0x20000cdc

08008d88 <_read_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d07      	ldr	r5, [pc, #28]	; (8008da8 <_read_r+0x20>)
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4608      	mov	r0, r1
 8008d90:	4611      	mov	r1, r2
 8008d92:	2200      	movs	r2, #0
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7fa fb02 	bl	80033a0 <_read>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_read_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_read_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000cdc 	.word	0x20000cdc

08008dac <_write_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d07      	ldr	r5, [pc, #28]	; (8008dcc <_write_r+0x20>)
 8008db0:	4604      	mov	r4, r0
 8008db2:	4608      	mov	r0, r1
 8008db4:	4611      	mov	r1, r2
 8008db6:	2200      	movs	r2, #0
 8008db8:	602a      	str	r2, [r5, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f7f9 fdb9 	bl	8002932 <_write>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_write_r+0x1e>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_write_r+0x1e>
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20000cdc 	.word	0x20000cdc

08008dd0 <__errno>:
 8008dd0:	4b01      	ldr	r3, [pc, #4]	; (8008dd8 <__errno+0x8>)
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000074 	.word	0x20000074

08008ddc <__libc_init_array>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	4d0d      	ldr	r5, [pc, #52]	; (8008e14 <__libc_init_array+0x38>)
 8008de0:	4c0d      	ldr	r4, [pc, #52]	; (8008e18 <__libc_init_array+0x3c>)
 8008de2:	1b64      	subs	r4, r4, r5
 8008de4:	10a4      	asrs	r4, r4, #2
 8008de6:	2600      	movs	r6, #0
 8008de8:	42a6      	cmp	r6, r4
 8008dea:	d109      	bne.n	8008e00 <__libc_init_array+0x24>
 8008dec:	4d0b      	ldr	r5, [pc, #44]	; (8008e1c <__libc_init_array+0x40>)
 8008dee:	4c0c      	ldr	r4, [pc, #48]	; (8008e20 <__libc_init_array+0x44>)
 8008df0:	f003 ff36 	bl	800cc60 <_init>
 8008df4:	1b64      	subs	r4, r4, r5
 8008df6:	10a4      	asrs	r4, r4, #2
 8008df8:	2600      	movs	r6, #0
 8008dfa:	42a6      	cmp	r6, r4
 8008dfc:	d105      	bne.n	8008e0a <__libc_init_array+0x2e>
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e04:	4798      	blx	r3
 8008e06:	3601      	adds	r6, #1
 8008e08:	e7ee      	b.n	8008de8 <__libc_init_array+0xc>
 8008e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0e:	4798      	blx	r3
 8008e10:	3601      	adds	r6, #1
 8008e12:	e7f2      	b.n	8008dfa <__libc_init_array+0x1e>
 8008e14:	0800d70c 	.word	0x0800d70c
 8008e18:	0800d70c 	.word	0x0800d70c
 8008e1c:	0800d70c 	.word	0x0800d70c
 8008e20:	0800d710 	.word	0x0800d710

08008e24 <__retarget_lock_init_recursive>:
 8008e24:	4770      	bx	lr

08008e26 <__retarget_lock_acquire_recursive>:
 8008e26:	4770      	bx	lr

08008e28 <__retarget_lock_release_recursive>:
 8008e28:	4770      	bx	lr
	...

08008e2c <nanf>:
 8008e2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e34 <nanf+0x8>
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	7fc00000 	.word	0x7fc00000

08008e38 <quorem>:
 8008e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	6903      	ldr	r3, [r0, #16]
 8008e3e:	690c      	ldr	r4, [r1, #16]
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	4607      	mov	r7, r0
 8008e44:	db7e      	blt.n	8008f44 <quorem+0x10c>
 8008e46:	3c01      	subs	r4, #1
 8008e48:	f101 0814 	add.w	r8, r1, #20
 8008e4c:	f100 0514 	add.w	r5, r0, #20
 8008e50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	429a      	cmp	r2, r3
 8008e62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e6e:	d331      	bcc.n	8008ed4 <quorem+0x9c>
 8008e70:	f04f 0e00 	mov.w	lr, #0
 8008e74:	4640      	mov	r0, r8
 8008e76:	46ac      	mov	ip, r5
 8008e78:	46f2      	mov	sl, lr
 8008e7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e7e:	b293      	uxth	r3, r2
 8008e80:	fb06 e303 	mla	r3, r6, r3, lr
 8008e84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e88:	0c1a      	lsrs	r2, r3, #16
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e90:	f8dc a000 	ldr.w	sl, [ip]
 8008e94:	fa13 f38a 	uxtah	r3, r3, sl
 8008e98:	fb06 220e 	mla	r2, r6, lr, r2
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ea4:	b292      	uxth	r2, r2
 8008ea6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008eaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eae:	f8bd 3000 	ldrh.w	r3, [sp]
 8008eb2:	4581      	cmp	r9, r0
 8008eb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eb8:	f84c 3b04 	str.w	r3, [ip], #4
 8008ebc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ec0:	d2db      	bcs.n	8008e7a <quorem+0x42>
 8008ec2:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ec6:	b92b      	cbnz	r3, 8008ed4 <quorem+0x9c>
 8008ec8:	9b01      	ldr	r3, [sp, #4]
 8008eca:	3b04      	subs	r3, #4
 8008ecc:	429d      	cmp	r5, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	d32c      	bcc.n	8008f2c <quorem+0xf4>
 8008ed2:	613c      	str	r4, [r7, #16]
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f001 f9ef 	bl	800a2b8 <__mcmp>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	db22      	blt.n	8008f24 <quorem+0xec>
 8008ede:	3601      	adds	r6, #1
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ee8:	f8d1 c000 	ldr.w	ip, [r1]
 8008eec:	b293      	uxth	r3, r2
 8008eee:	1ac3      	subs	r3, r0, r3
 8008ef0:	0c12      	lsrs	r2, r2, #16
 8008ef2:	fa13 f38c 	uxtah	r3, r3, ip
 8008ef6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f04:	45c1      	cmp	r9, r8
 8008f06:	f841 3b04 	str.w	r3, [r1], #4
 8008f0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f0e:	d2e9      	bcs.n	8008ee4 <quorem+0xac>
 8008f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f18:	b922      	cbnz	r2, 8008f24 <quorem+0xec>
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	429d      	cmp	r5, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	d30a      	bcc.n	8008f38 <quorem+0x100>
 8008f22:	613c      	str	r4, [r7, #16]
 8008f24:	4630      	mov	r0, r6
 8008f26:	b003      	add	sp, #12
 8008f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2c:	6812      	ldr	r2, [r2, #0]
 8008f2e:	3b04      	subs	r3, #4
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	d1ce      	bne.n	8008ed2 <quorem+0x9a>
 8008f34:	3c01      	subs	r4, #1
 8008f36:	e7c9      	b.n	8008ecc <quorem+0x94>
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	d1f0      	bne.n	8008f22 <quorem+0xea>
 8008f40:	3c01      	subs	r4, #1
 8008f42:	e7eb      	b.n	8008f1c <quorem+0xe4>
 8008f44:	2000      	movs	r0, #0
 8008f46:	e7ee      	b.n	8008f26 <quorem+0xee>

08008f48 <_dtoa_r>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	ed2d 8b04 	vpush	{d8-d9}
 8008f50:	69c5      	ldr	r5, [r0, #28]
 8008f52:	b093      	sub	sp, #76	; 0x4c
 8008f54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f58:	ec57 6b10 	vmov	r6, r7, d0
 8008f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f60:	9107      	str	r1, [sp, #28]
 8008f62:	4604      	mov	r4, r0
 8008f64:	920a      	str	r2, [sp, #40]	; 0x28
 8008f66:	930d      	str	r3, [sp, #52]	; 0x34
 8008f68:	b975      	cbnz	r5, 8008f88 <_dtoa_r+0x40>
 8008f6a:	2010      	movs	r0, #16
 8008f6c:	f000 fe2a 	bl	8009bc4 <malloc>
 8008f70:	4602      	mov	r2, r0
 8008f72:	61e0      	str	r0, [r4, #28]
 8008f74:	b920      	cbnz	r0, 8008f80 <_dtoa_r+0x38>
 8008f76:	4bae      	ldr	r3, [pc, #696]	; (8009230 <_dtoa_r+0x2e8>)
 8008f78:	21ef      	movs	r1, #239	; 0xef
 8008f7a:	48ae      	ldr	r0, [pc, #696]	; (8009234 <_dtoa_r+0x2ec>)
 8008f7c:	f003 f9bc 	bl	800c2f8 <__assert_func>
 8008f80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f84:	6005      	str	r5, [r0, #0]
 8008f86:	60c5      	str	r5, [r0, #12]
 8008f88:	69e3      	ldr	r3, [r4, #28]
 8008f8a:	6819      	ldr	r1, [r3, #0]
 8008f8c:	b151      	cbz	r1, 8008fa4 <_dtoa_r+0x5c>
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	604a      	str	r2, [r1, #4]
 8008f92:	2301      	movs	r3, #1
 8008f94:	4093      	lsls	r3, r2
 8008f96:	608b      	str	r3, [r1, #8]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 ff07 	bl	8009dac <_Bfree>
 8008f9e:	69e3      	ldr	r3, [r4, #28]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	1e3b      	subs	r3, r7, #0
 8008fa6:	bfbb      	ittet	lt
 8008fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fac:	9303      	strlt	r3, [sp, #12]
 8008fae:	2300      	movge	r3, #0
 8008fb0:	2201      	movlt	r2, #1
 8008fb2:	bfac      	ite	ge
 8008fb4:	f8c8 3000 	strge.w	r3, [r8]
 8008fb8:	f8c8 2000 	strlt.w	r2, [r8]
 8008fbc:	4b9e      	ldr	r3, [pc, #632]	; (8009238 <_dtoa_r+0x2f0>)
 8008fbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008fc2:	ea33 0308 	bics.w	r3, r3, r8
 8008fc6:	d11b      	bne.n	8009000 <_dtoa_r+0xb8>
 8008fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fca:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008fd4:	4333      	orrs	r3, r6
 8008fd6:	f000 8593 	beq.w	8009b00 <_dtoa_r+0xbb8>
 8008fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fdc:	b963      	cbnz	r3, 8008ff8 <_dtoa_r+0xb0>
 8008fde:	4b97      	ldr	r3, [pc, #604]	; (800923c <_dtoa_r+0x2f4>)
 8008fe0:	e027      	b.n	8009032 <_dtoa_r+0xea>
 8008fe2:	4b97      	ldr	r3, [pc, #604]	; (8009240 <_dtoa_r+0x2f8>)
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	9800      	ldr	r0, [sp, #0]
 8008fee:	b013      	add	sp, #76	; 0x4c
 8008ff0:	ecbd 8b04 	vpop	{d8-d9}
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	4b90      	ldr	r3, [pc, #576]	; (800923c <_dtoa_r+0x2f4>)
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	3303      	adds	r3, #3
 8008ffe:	e7f3      	b.n	8008fe8 <_dtoa_r+0xa0>
 8009000:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	ec51 0b17 	vmov	r0, r1, d7
 800900a:	eeb0 8a47 	vmov.f32	s16, s14
 800900e:	eef0 8a67 	vmov.f32	s17, s15
 8009012:	2300      	movs	r3, #0
 8009014:	f7f7 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009018:	4681      	mov	r9, r0
 800901a:	b160      	cbz	r0, 8009036 <_dtoa_r+0xee>
 800901c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800901e:	2301      	movs	r3, #1
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8568 	beq.w	8009afa <_dtoa_r+0xbb2>
 800902a:	4b86      	ldr	r3, [pc, #536]	; (8009244 <_dtoa_r+0x2fc>)
 800902c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	3b01      	subs	r3, #1
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	e7da      	b.n	8008fec <_dtoa_r+0xa4>
 8009036:	aa10      	add	r2, sp, #64	; 0x40
 8009038:	a911      	add	r1, sp, #68	; 0x44
 800903a:	4620      	mov	r0, r4
 800903c:	eeb0 0a48 	vmov.f32	s0, s16
 8009040:	eef0 0a68 	vmov.f32	s1, s17
 8009044:	f001 fa4e 	bl	800a4e4 <__d2b>
 8009048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800904c:	4682      	mov	sl, r0
 800904e:	2d00      	cmp	r5, #0
 8009050:	d07f      	beq.n	8009152 <_dtoa_r+0x20a>
 8009052:	ee18 3a90 	vmov	r3, s17
 8009056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800905a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800905e:	ec51 0b18 	vmov	r0, r1, d8
 8009062:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800906a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800906e:	4619      	mov	r1, r3
 8009070:	2200      	movs	r2, #0
 8009072:	4b75      	ldr	r3, [pc, #468]	; (8009248 <_dtoa_r+0x300>)
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	a367      	add	r3, pc, #412	; (adr r3, 8009218 <_dtoa_r+0x2d0>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 fabb 	bl	80005f8 <__aeabi_dmul>
 8009082:	a367      	add	r3, pc, #412	; (adr r3, 8009220 <_dtoa_r+0x2d8>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f900 	bl	800028c <__adddf3>
 800908c:	4606      	mov	r6, r0
 800908e:	4628      	mov	r0, r5
 8009090:	460f      	mov	r7, r1
 8009092:	f7f7 fa47 	bl	8000524 <__aeabi_i2d>
 8009096:	a364      	add	r3, pc, #400	; (adr r3, 8009228 <_dtoa_r+0x2e0>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f7f7 faac 	bl	80005f8 <__aeabi_dmul>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4630      	mov	r0, r6
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 f8f0 	bl	800028c <__adddf3>
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	f7f7 fd52 	bl	8000b58 <__aeabi_d2iz>
 80090b4:	2200      	movs	r2, #0
 80090b6:	4683      	mov	fp, r0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 fd0d 	bl	8000adc <__aeabi_dcmplt>
 80090c2:	b148      	cbz	r0, 80090d8 <_dtoa_r+0x190>
 80090c4:	4658      	mov	r0, fp
 80090c6:	f7f7 fa2d 	bl	8000524 <__aeabi_i2d>
 80090ca:	4632      	mov	r2, r6
 80090cc:	463b      	mov	r3, r7
 80090ce:	f7f7 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80090d2:	b908      	cbnz	r0, 80090d8 <_dtoa_r+0x190>
 80090d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090d8:	f1bb 0f16 	cmp.w	fp, #22
 80090dc:	d857      	bhi.n	800918e <_dtoa_r+0x246>
 80090de:	4b5b      	ldr	r3, [pc, #364]	; (800924c <_dtoa_r+0x304>)
 80090e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	ec51 0b18 	vmov	r0, r1, d8
 80090ec:	f7f7 fcf6 	bl	8000adc <__aeabi_dcmplt>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d04e      	beq.n	8009192 <_dtoa_r+0x24a>
 80090f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090f8:	2300      	movs	r3, #0
 80090fa:	930c      	str	r3, [sp, #48]	; 0x30
 80090fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090fe:	1b5b      	subs	r3, r3, r5
 8009100:	1e5a      	subs	r2, r3, #1
 8009102:	bf45      	ittet	mi
 8009104:	f1c3 0301 	rsbmi	r3, r3, #1
 8009108:	9305      	strmi	r3, [sp, #20]
 800910a:	2300      	movpl	r3, #0
 800910c:	2300      	movmi	r3, #0
 800910e:	9206      	str	r2, [sp, #24]
 8009110:	bf54      	ite	pl
 8009112:	9305      	strpl	r3, [sp, #20]
 8009114:	9306      	strmi	r3, [sp, #24]
 8009116:	f1bb 0f00 	cmp.w	fp, #0
 800911a:	db3c      	blt.n	8009196 <_dtoa_r+0x24e>
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009122:	445b      	add	r3, fp
 8009124:	9306      	str	r3, [sp, #24]
 8009126:	2300      	movs	r3, #0
 8009128:	9308      	str	r3, [sp, #32]
 800912a:	9b07      	ldr	r3, [sp, #28]
 800912c:	2b09      	cmp	r3, #9
 800912e:	d868      	bhi.n	8009202 <_dtoa_r+0x2ba>
 8009130:	2b05      	cmp	r3, #5
 8009132:	bfc4      	itt	gt
 8009134:	3b04      	subgt	r3, #4
 8009136:	9307      	strgt	r3, [sp, #28]
 8009138:	9b07      	ldr	r3, [sp, #28]
 800913a:	f1a3 0302 	sub.w	r3, r3, #2
 800913e:	bfcc      	ite	gt
 8009140:	2500      	movgt	r5, #0
 8009142:	2501      	movle	r5, #1
 8009144:	2b03      	cmp	r3, #3
 8009146:	f200 8085 	bhi.w	8009254 <_dtoa_r+0x30c>
 800914a:	e8df f003 	tbb	[pc, r3]
 800914e:	3b2e      	.short	0x3b2e
 8009150:	5839      	.short	0x5839
 8009152:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009156:	441d      	add	r5, r3
 8009158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800915c:	2b20      	cmp	r3, #32
 800915e:	bfc1      	itttt	gt
 8009160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009164:	fa08 f803 	lslgt.w	r8, r8, r3
 8009168:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800916c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009170:	bfd6      	itet	le
 8009172:	f1c3 0320 	rsble	r3, r3, #32
 8009176:	ea48 0003 	orrgt.w	r0, r8, r3
 800917a:	fa06 f003 	lslle.w	r0, r6, r3
 800917e:	f7f7 f9c1 	bl	8000504 <__aeabi_ui2d>
 8009182:	2201      	movs	r2, #1
 8009184:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009188:	3d01      	subs	r5, #1
 800918a:	920e      	str	r2, [sp, #56]	; 0x38
 800918c:	e76f      	b.n	800906e <_dtoa_r+0x126>
 800918e:	2301      	movs	r3, #1
 8009190:	e7b3      	b.n	80090fa <_dtoa_r+0x1b2>
 8009192:	900c      	str	r0, [sp, #48]	; 0x30
 8009194:	e7b2      	b.n	80090fc <_dtoa_r+0x1b4>
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	eba3 030b 	sub.w	r3, r3, fp
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	f1cb 0300 	rsb	r3, fp, #0
 80091a2:	9308      	str	r3, [sp, #32]
 80091a4:	2300      	movs	r3, #0
 80091a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a8:	e7bf      	b.n	800912a <_dtoa_r+0x1e2>
 80091aa:	2300      	movs	r3, #0
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dc52      	bgt.n	800925a <_dtoa_r+0x312>
 80091b4:	2301      	movs	r3, #1
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	461a      	mov	r2, r3
 80091bc:	920a      	str	r2, [sp, #40]	; 0x28
 80091be:	e00b      	b.n	80091d8 <_dtoa_r+0x290>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7f3      	b.n	80091ac <_dtoa_r+0x264>
 80091c4:	2300      	movs	r3, #0
 80091c6:	9309      	str	r3, [sp, #36]	; 0x24
 80091c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ca:	445b      	add	r3, fp
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	3301      	adds	r3, #1
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	bfb8      	it	lt
 80091d6:	2301      	movlt	r3, #1
 80091d8:	69e0      	ldr	r0, [r4, #28]
 80091da:	2100      	movs	r1, #0
 80091dc:	2204      	movs	r2, #4
 80091de:	f102 0614 	add.w	r6, r2, #20
 80091e2:	429e      	cmp	r6, r3
 80091e4:	d93d      	bls.n	8009262 <_dtoa_r+0x31a>
 80091e6:	6041      	str	r1, [r0, #4]
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fd9f 	bl	8009d2c <_Balloc>
 80091ee:	9000      	str	r0, [sp, #0]
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d139      	bne.n	8009268 <_dtoa_r+0x320>
 80091f4:	4b16      	ldr	r3, [pc, #88]	; (8009250 <_dtoa_r+0x308>)
 80091f6:	4602      	mov	r2, r0
 80091f8:	f240 11af 	movw	r1, #431	; 0x1af
 80091fc:	e6bd      	b.n	8008f7a <_dtoa_r+0x32>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7e1      	b.n	80091c6 <_dtoa_r+0x27e>
 8009202:	2501      	movs	r5, #1
 8009204:	2300      	movs	r3, #0
 8009206:	9307      	str	r3, [sp, #28]
 8009208:	9509      	str	r5, [sp, #36]	; 0x24
 800920a:	f04f 33ff 	mov.w	r3, #4294967295
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	2200      	movs	r2, #0
 8009214:	2312      	movs	r3, #18
 8009216:	e7d1      	b.n	80091bc <_dtoa_r+0x274>
 8009218:	636f4361 	.word	0x636f4361
 800921c:	3fd287a7 	.word	0x3fd287a7
 8009220:	8b60c8b3 	.word	0x8b60c8b3
 8009224:	3fc68a28 	.word	0x3fc68a28
 8009228:	509f79fb 	.word	0x509f79fb
 800922c:	3fd34413 	.word	0x3fd34413
 8009230:	0800d304 	.word	0x0800d304
 8009234:	0800d31b 	.word	0x0800d31b
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	0800d300 	.word	0x0800d300
 8009240:	0800d2f7 	.word	0x0800d2f7
 8009244:	0800d659 	.word	0x0800d659
 8009248:	3ff80000 	.word	0x3ff80000
 800924c:	0800d408 	.word	0x0800d408
 8009250:	0800d373 	.word	0x0800d373
 8009254:	2301      	movs	r3, #1
 8009256:	9309      	str	r3, [sp, #36]	; 0x24
 8009258:	e7d7      	b.n	800920a <_dtoa_r+0x2c2>
 800925a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	e7ba      	b.n	80091d8 <_dtoa_r+0x290>
 8009262:	3101      	adds	r1, #1
 8009264:	0052      	lsls	r2, r2, #1
 8009266:	e7ba      	b.n	80091de <_dtoa_r+0x296>
 8009268:	69e3      	ldr	r3, [r4, #28]
 800926a:	9a00      	ldr	r2, [sp, #0]
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	2b0e      	cmp	r3, #14
 8009272:	f200 80a8 	bhi.w	80093c6 <_dtoa_r+0x47e>
 8009276:	2d00      	cmp	r5, #0
 8009278:	f000 80a5 	beq.w	80093c6 <_dtoa_r+0x47e>
 800927c:	f1bb 0f00 	cmp.w	fp, #0
 8009280:	dd38      	ble.n	80092f4 <_dtoa_r+0x3ac>
 8009282:	4bc0      	ldr	r3, [pc, #768]	; (8009584 <_dtoa_r+0x63c>)
 8009284:	f00b 020f 	and.w	r2, fp, #15
 8009288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009290:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009294:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009298:	d019      	beq.n	80092ce <_dtoa_r+0x386>
 800929a:	4bbb      	ldr	r3, [pc, #748]	; (8009588 <_dtoa_r+0x640>)
 800929c:	ec51 0b18 	vmov	r0, r1, d8
 80092a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092a4:	f7f7 fad2 	bl	800084c <__aeabi_ddiv>
 80092a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ac:	f008 080f 	and.w	r8, r8, #15
 80092b0:	2503      	movs	r5, #3
 80092b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009588 <_dtoa_r+0x640>
 80092b6:	f1b8 0f00 	cmp.w	r8, #0
 80092ba:	d10a      	bne.n	80092d2 <_dtoa_r+0x38a>
 80092bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c0:	4632      	mov	r2, r6
 80092c2:	463b      	mov	r3, r7
 80092c4:	f7f7 fac2 	bl	800084c <__aeabi_ddiv>
 80092c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092cc:	e02b      	b.n	8009326 <_dtoa_r+0x3de>
 80092ce:	2502      	movs	r5, #2
 80092d0:	e7ef      	b.n	80092b2 <_dtoa_r+0x36a>
 80092d2:	f018 0f01 	tst.w	r8, #1
 80092d6:	d008      	beq.n	80092ea <_dtoa_r+0x3a2>
 80092d8:	4630      	mov	r0, r6
 80092da:	4639      	mov	r1, r7
 80092dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092e0:	f7f7 f98a 	bl	80005f8 <__aeabi_dmul>
 80092e4:	3501      	adds	r5, #1
 80092e6:	4606      	mov	r6, r0
 80092e8:	460f      	mov	r7, r1
 80092ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092ee:	f109 0908 	add.w	r9, r9, #8
 80092f2:	e7e0      	b.n	80092b6 <_dtoa_r+0x36e>
 80092f4:	f000 809f 	beq.w	8009436 <_dtoa_r+0x4ee>
 80092f8:	f1cb 0600 	rsb	r6, fp, #0
 80092fc:	4ba1      	ldr	r3, [pc, #644]	; (8009584 <_dtoa_r+0x63c>)
 80092fe:	4fa2      	ldr	r7, [pc, #648]	; (8009588 <_dtoa_r+0x640>)
 8009300:	f006 020f 	and.w	r2, r6, #15
 8009304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	ec51 0b18 	vmov	r0, r1, d8
 8009310:	f7f7 f972 	bl	80005f8 <__aeabi_dmul>
 8009314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009318:	1136      	asrs	r6, r6, #4
 800931a:	2300      	movs	r3, #0
 800931c:	2502      	movs	r5, #2
 800931e:	2e00      	cmp	r6, #0
 8009320:	d17e      	bne.n	8009420 <_dtoa_r+0x4d8>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1d0      	bne.n	80092c8 <_dtoa_r+0x380>
 8009326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009328:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8084 	beq.w	800943a <_dtoa_r+0x4f2>
 8009332:	4b96      	ldr	r3, [pc, #600]	; (800958c <_dtoa_r+0x644>)
 8009334:	2200      	movs	r2, #0
 8009336:	4640      	mov	r0, r8
 8009338:	4649      	mov	r1, r9
 800933a:	f7f7 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	d07b      	beq.n	800943a <_dtoa_r+0x4f2>
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d078      	beq.n	800943a <_dtoa_r+0x4f2>
 8009348:	9b01      	ldr	r3, [sp, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dd39      	ble.n	80093c2 <_dtoa_r+0x47a>
 800934e:	4b90      	ldr	r3, [pc, #576]	; (8009590 <_dtoa_r+0x648>)
 8009350:	2200      	movs	r2, #0
 8009352:	4640      	mov	r0, r8
 8009354:	4649      	mov	r1, r9
 8009356:	f7f7 f94f 	bl	80005f8 <__aeabi_dmul>
 800935a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935e:	9e01      	ldr	r6, [sp, #4]
 8009360:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009364:	3501      	adds	r5, #1
 8009366:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800936a:	4628      	mov	r0, r5
 800936c:	f7f7 f8da 	bl	8000524 <__aeabi_i2d>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	4b86      	ldr	r3, [pc, #536]	; (8009594 <_dtoa_r+0x64c>)
 800937a:	2200      	movs	r2, #0
 800937c:	f7f6 ff86 	bl	800028c <__adddf3>
 8009380:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	2e00      	cmp	r6, #0
 800938c:	d158      	bne.n	8009440 <_dtoa_r+0x4f8>
 800938e:	4b82      	ldr	r3, [pc, #520]	; (8009598 <_dtoa_r+0x650>)
 8009390:	2200      	movs	r2, #0
 8009392:	4640      	mov	r0, r8
 8009394:	4649      	mov	r1, r9
 8009396:	f7f6 ff77 	bl	8000288 <__aeabi_dsub>
 800939a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939e:	4680      	mov	r8, r0
 80093a0:	4689      	mov	r9, r1
 80093a2:	f7f7 fbb9 	bl	8000b18 <__aeabi_dcmpgt>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f040 8296 	bne.w	80098d8 <_dtoa_r+0x990>
 80093ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80093b0:	4640      	mov	r0, r8
 80093b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093b6:	4649      	mov	r1, r9
 80093b8:	f7f7 fb90 	bl	8000adc <__aeabi_dcmplt>
 80093bc:	2800      	cmp	r0, #0
 80093be:	f040 8289 	bne.w	80098d4 <_dtoa_r+0x98c>
 80093c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f2c0 814e 	blt.w	800966a <_dtoa_r+0x722>
 80093ce:	f1bb 0f0e 	cmp.w	fp, #14
 80093d2:	f300 814a 	bgt.w	800966a <_dtoa_r+0x722>
 80093d6:	4b6b      	ldr	r3, [pc, #428]	; (8009584 <_dtoa_r+0x63c>)
 80093d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f280 80dc 	bge.w	80095a0 <_dtoa_r+0x658>
 80093e8:	9b04      	ldr	r3, [sp, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f300 80d8 	bgt.w	80095a0 <_dtoa_r+0x658>
 80093f0:	f040 826f 	bne.w	80098d2 <_dtoa_r+0x98a>
 80093f4:	4b68      	ldr	r3, [pc, #416]	; (8009598 <_dtoa_r+0x650>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 f8fc 	bl	80005f8 <__aeabi_dmul>
 8009400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009404:	f7f7 fb7e 	bl	8000b04 <__aeabi_dcmpge>
 8009408:	9e04      	ldr	r6, [sp, #16]
 800940a:	4637      	mov	r7, r6
 800940c:	2800      	cmp	r0, #0
 800940e:	f040 8245 	bne.w	800989c <_dtoa_r+0x954>
 8009412:	9d00      	ldr	r5, [sp, #0]
 8009414:	2331      	movs	r3, #49	; 0x31
 8009416:	f805 3b01 	strb.w	r3, [r5], #1
 800941a:	f10b 0b01 	add.w	fp, fp, #1
 800941e:	e241      	b.n	80098a4 <_dtoa_r+0x95c>
 8009420:	07f2      	lsls	r2, r6, #31
 8009422:	d505      	bpl.n	8009430 <_dtoa_r+0x4e8>
 8009424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009428:	f7f7 f8e6 	bl	80005f8 <__aeabi_dmul>
 800942c:	3501      	adds	r5, #1
 800942e:	2301      	movs	r3, #1
 8009430:	1076      	asrs	r6, r6, #1
 8009432:	3708      	adds	r7, #8
 8009434:	e773      	b.n	800931e <_dtoa_r+0x3d6>
 8009436:	2502      	movs	r5, #2
 8009438:	e775      	b.n	8009326 <_dtoa_r+0x3de>
 800943a:	9e04      	ldr	r6, [sp, #16]
 800943c:	465f      	mov	r7, fp
 800943e:	e792      	b.n	8009366 <_dtoa_r+0x41e>
 8009440:	9900      	ldr	r1, [sp, #0]
 8009442:	4b50      	ldr	r3, [pc, #320]	; (8009584 <_dtoa_r+0x63c>)
 8009444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009448:	4431      	add	r1, r6
 800944a:	9102      	str	r1, [sp, #8]
 800944c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800944e:	eeb0 9a47 	vmov.f32	s18, s14
 8009452:	eef0 9a67 	vmov.f32	s19, s15
 8009456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800945a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800945e:	2900      	cmp	r1, #0
 8009460:	d044      	beq.n	80094ec <_dtoa_r+0x5a4>
 8009462:	494e      	ldr	r1, [pc, #312]	; (800959c <_dtoa_r+0x654>)
 8009464:	2000      	movs	r0, #0
 8009466:	f7f7 f9f1 	bl	800084c <__aeabi_ddiv>
 800946a:	ec53 2b19 	vmov	r2, r3, d9
 800946e:	f7f6 ff0b 	bl	8000288 <__aeabi_dsub>
 8009472:	9d00      	ldr	r5, [sp, #0]
 8009474:	ec41 0b19 	vmov	d9, r0, r1
 8009478:	4649      	mov	r1, r9
 800947a:	4640      	mov	r0, r8
 800947c:	f7f7 fb6c 	bl	8000b58 <__aeabi_d2iz>
 8009480:	4606      	mov	r6, r0
 8009482:	f7f7 f84f 	bl	8000524 <__aeabi_i2d>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f6 fefb 	bl	8000288 <__aeabi_dsub>
 8009492:	3630      	adds	r6, #48	; 0x30
 8009494:	f805 6b01 	strb.w	r6, [r5], #1
 8009498:	ec53 2b19 	vmov	r2, r3, d9
 800949c:	4680      	mov	r8, r0
 800949e:	4689      	mov	r9, r1
 80094a0:	f7f7 fb1c 	bl	8000adc <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d164      	bne.n	8009572 <_dtoa_r+0x62a>
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	4937      	ldr	r1, [pc, #220]	; (800958c <_dtoa_r+0x644>)
 80094ae:	2000      	movs	r0, #0
 80094b0:	f7f6 feea 	bl	8000288 <__aeabi_dsub>
 80094b4:	ec53 2b19 	vmov	r2, r3, d9
 80094b8:	f7f7 fb10 	bl	8000adc <__aeabi_dcmplt>
 80094bc:	2800      	cmp	r0, #0
 80094be:	f040 80b6 	bne.w	800962e <_dtoa_r+0x6e6>
 80094c2:	9b02      	ldr	r3, [sp, #8]
 80094c4:	429d      	cmp	r5, r3
 80094c6:	f43f af7c 	beq.w	80093c2 <_dtoa_r+0x47a>
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <_dtoa_r+0x648>)
 80094cc:	ec51 0b19 	vmov	r0, r1, d9
 80094d0:	2200      	movs	r2, #0
 80094d2:	f7f7 f891 	bl	80005f8 <__aeabi_dmul>
 80094d6:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <_dtoa_r+0x648>)
 80094d8:	ec41 0b19 	vmov	d9, r0, r1
 80094dc:	2200      	movs	r2, #0
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f7 f889 	bl	80005f8 <__aeabi_dmul>
 80094e6:	4680      	mov	r8, r0
 80094e8:	4689      	mov	r9, r1
 80094ea:	e7c5      	b.n	8009478 <_dtoa_r+0x530>
 80094ec:	ec51 0b17 	vmov	r0, r1, d7
 80094f0:	f7f7 f882 	bl	80005f8 <__aeabi_dmul>
 80094f4:	9b02      	ldr	r3, [sp, #8]
 80094f6:	9d00      	ldr	r5, [sp, #0]
 80094f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094fa:	ec41 0b19 	vmov	d9, r0, r1
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	f7f7 fb29 	bl	8000b58 <__aeabi_d2iz>
 8009506:	4606      	mov	r6, r0
 8009508:	f7f7 f80c 	bl	8000524 <__aeabi_i2d>
 800950c:	3630      	adds	r6, #48	; 0x30
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f6 feb7 	bl	8000288 <__aeabi_dsub>
 800951a:	f805 6b01 	strb.w	r6, [r5], #1
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	429d      	cmp	r5, r3
 8009522:	4680      	mov	r8, r0
 8009524:	4689      	mov	r9, r1
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	d124      	bne.n	8009576 <_dtoa_r+0x62e>
 800952c:	4b1b      	ldr	r3, [pc, #108]	; (800959c <_dtoa_r+0x654>)
 800952e:	ec51 0b19 	vmov	r0, r1, d9
 8009532:	f7f6 feab 	bl	800028c <__adddf3>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4640      	mov	r0, r8
 800953c:	4649      	mov	r1, r9
 800953e:	f7f7 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8009542:	2800      	cmp	r0, #0
 8009544:	d173      	bne.n	800962e <_dtoa_r+0x6e6>
 8009546:	ec53 2b19 	vmov	r2, r3, d9
 800954a:	4914      	ldr	r1, [pc, #80]	; (800959c <_dtoa_r+0x654>)
 800954c:	2000      	movs	r0, #0
 800954e:	f7f6 fe9b 	bl	8000288 <__aeabi_dsub>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4640      	mov	r0, r8
 8009558:	4649      	mov	r1, r9
 800955a:	f7f7 fabf 	bl	8000adc <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f af2f 	beq.w	80093c2 <_dtoa_r+0x47a>
 8009564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009566:	1e6b      	subs	r3, r5, #1
 8009568:	930f      	str	r3, [sp, #60]	; 0x3c
 800956a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800956e:	2b30      	cmp	r3, #48	; 0x30
 8009570:	d0f8      	beq.n	8009564 <_dtoa_r+0x61c>
 8009572:	46bb      	mov	fp, r7
 8009574:	e04a      	b.n	800960c <_dtoa_r+0x6c4>
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <_dtoa_r+0x648>)
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	4680      	mov	r8, r0
 800957e:	4689      	mov	r9, r1
 8009580:	e7bd      	b.n	80094fe <_dtoa_r+0x5b6>
 8009582:	bf00      	nop
 8009584:	0800d408 	.word	0x0800d408
 8009588:	0800d3e0 	.word	0x0800d3e0
 800958c:	3ff00000 	.word	0x3ff00000
 8009590:	40240000 	.word	0x40240000
 8009594:	401c0000 	.word	0x401c0000
 8009598:	40140000 	.word	0x40140000
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095a4:	9d00      	ldr	r5, [sp, #0]
 80095a6:	4642      	mov	r2, r8
 80095a8:	464b      	mov	r3, r9
 80095aa:	4630      	mov	r0, r6
 80095ac:	4639      	mov	r1, r7
 80095ae:	f7f7 f94d 	bl	800084c <__aeabi_ddiv>
 80095b2:	f7f7 fad1 	bl	8000b58 <__aeabi_d2iz>
 80095b6:	9001      	str	r0, [sp, #4]
 80095b8:	f7f6 ffb4 	bl	8000524 <__aeabi_i2d>
 80095bc:	4642      	mov	r2, r8
 80095be:	464b      	mov	r3, r9
 80095c0:	f7f7 f81a 	bl	80005f8 <__aeabi_dmul>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4630      	mov	r0, r6
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f6 fe5c 	bl	8000288 <__aeabi_dsub>
 80095d0:	9e01      	ldr	r6, [sp, #4]
 80095d2:	9f04      	ldr	r7, [sp, #16]
 80095d4:	3630      	adds	r6, #48	; 0x30
 80095d6:	f805 6b01 	strb.w	r6, [r5], #1
 80095da:	9e00      	ldr	r6, [sp, #0]
 80095dc:	1bae      	subs	r6, r5, r6
 80095de:	42b7      	cmp	r7, r6
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	d134      	bne.n	8009650 <_dtoa_r+0x708>
 80095e6:	f7f6 fe51 	bl	800028c <__adddf3>
 80095ea:	4642      	mov	r2, r8
 80095ec:	464b      	mov	r3, r9
 80095ee:	4606      	mov	r6, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	f7f7 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 80095f6:	b9c8      	cbnz	r0, 800962c <_dtoa_r+0x6e4>
 80095f8:	4642      	mov	r2, r8
 80095fa:	464b      	mov	r3, r9
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f7 fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8009604:	b110      	cbz	r0, 800960c <_dtoa_r+0x6c4>
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	07db      	lsls	r3, r3, #31
 800960a:	d40f      	bmi.n	800962c <_dtoa_r+0x6e4>
 800960c:	4651      	mov	r1, sl
 800960e:	4620      	mov	r0, r4
 8009610:	f000 fbcc 	bl	8009dac <_Bfree>
 8009614:	2300      	movs	r3, #0
 8009616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009618:	702b      	strb	r3, [r5, #0]
 800961a:	f10b 0301 	add.w	r3, fp, #1
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009622:	2b00      	cmp	r3, #0
 8009624:	f43f ace2 	beq.w	8008fec <_dtoa_r+0xa4>
 8009628:	601d      	str	r5, [r3, #0]
 800962a:	e4df      	b.n	8008fec <_dtoa_r+0xa4>
 800962c:	465f      	mov	r7, fp
 800962e:	462b      	mov	r3, r5
 8009630:	461d      	mov	r5, r3
 8009632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009636:	2a39      	cmp	r2, #57	; 0x39
 8009638:	d106      	bne.n	8009648 <_dtoa_r+0x700>
 800963a:	9a00      	ldr	r2, [sp, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d1f7      	bne.n	8009630 <_dtoa_r+0x6e8>
 8009640:	9900      	ldr	r1, [sp, #0]
 8009642:	2230      	movs	r2, #48	; 0x30
 8009644:	3701      	adds	r7, #1
 8009646:	700a      	strb	r2, [r1, #0]
 8009648:	781a      	ldrb	r2, [r3, #0]
 800964a:	3201      	adds	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	e790      	b.n	8009572 <_dtoa_r+0x62a>
 8009650:	4ba3      	ldr	r3, [pc, #652]	; (80098e0 <_dtoa_r+0x998>)
 8009652:	2200      	movs	r2, #0
 8009654:	f7f6 ffd0 	bl	80005f8 <__aeabi_dmul>
 8009658:	2200      	movs	r2, #0
 800965a:	2300      	movs	r3, #0
 800965c:	4606      	mov	r6, r0
 800965e:	460f      	mov	r7, r1
 8009660:	f7f7 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8009664:	2800      	cmp	r0, #0
 8009666:	d09e      	beq.n	80095a6 <_dtoa_r+0x65e>
 8009668:	e7d0      	b.n	800960c <_dtoa_r+0x6c4>
 800966a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800966c:	2a00      	cmp	r2, #0
 800966e:	f000 80ca 	beq.w	8009806 <_dtoa_r+0x8be>
 8009672:	9a07      	ldr	r2, [sp, #28]
 8009674:	2a01      	cmp	r2, #1
 8009676:	f300 80ad 	bgt.w	80097d4 <_dtoa_r+0x88c>
 800967a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800967c:	2a00      	cmp	r2, #0
 800967e:	f000 80a5 	beq.w	80097cc <_dtoa_r+0x884>
 8009682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009686:	9e08      	ldr	r6, [sp, #32]
 8009688:	9d05      	ldr	r5, [sp, #20]
 800968a:	9a05      	ldr	r2, [sp, #20]
 800968c:	441a      	add	r2, r3
 800968e:	9205      	str	r2, [sp, #20]
 8009690:	9a06      	ldr	r2, [sp, #24]
 8009692:	2101      	movs	r1, #1
 8009694:	441a      	add	r2, r3
 8009696:	4620      	mov	r0, r4
 8009698:	9206      	str	r2, [sp, #24]
 800969a:	f000 fc87 	bl	8009fac <__i2b>
 800969e:	4607      	mov	r7, r0
 80096a0:	b165      	cbz	r5, 80096bc <_dtoa_r+0x774>
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd09      	ble.n	80096bc <_dtoa_r+0x774>
 80096a8:	42ab      	cmp	r3, r5
 80096aa:	9a05      	ldr	r2, [sp, #20]
 80096ac:	bfa8      	it	ge
 80096ae:	462b      	movge	r3, r5
 80096b0:	1ad2      	subs	r2, r2, r3
 80096b2:	9205      	str	r2, [sp, #20]
 80096b4:	9a06      	ldr	r2, [sp, #24]
 80096b6:	1aed      	subs	r5, r5, r3
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	b1f3      	cbz	r3, 80096fe <_dtoa_r+0x7b6>
 80096c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 80a3 	beq.w	800980e <_dtoa_r+0x8c6>
 80096c8:	2e00      	cmp	r6, #0
 80096ca:	dd10      	ble.n	80096ee <_dtoa_r+0x7a6>
 80096cc:	4639      	mov	r1, r7
 80096ce:	4632      	mov	r2, r6
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fd2b 	bl	800a12c <__pow5mult>
 80096d6:	4652      	mov	r2, sl
 80096d8:	4601      	mov	r1, r0
 80096da:	4607      	mov	r7, r0
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 fc7b 	bl	8009fd8 <__multiply>
 80096e2:	4651      	mov	r1, sl
 80096e4:	4680      	mov	r8, r0
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fb60 	bl	8009dac <_Bfree>
 80096ec:	46c2      	mov	sl, r8
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	1b9a      	subs	r2, r3, r6
 80096f2:	d004      	beq.n	80096fe <_dtoa_r+0x7b6>
 80096f4:	4651      	mov	r1, sl
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 fd18 	bl	800a12c <__pow5mult>
 80096fc:	4682      	mov	sl, r0
 80096fe:	2101      	movs	r1, #1
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fc53 	bl	8009fac <__i2b>
 8009706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	4606      	mov	r6, r0
 800970c:	f340 8081 	ble.w	8009812 <_dtoa_r+0x8ca>
 8009710:	461a      	mov	r2, r3
 8009712:	4601      	mov	r1, r0
 8009714:	4620      	mov	r0, r4
 8009716:	f000 fd09 	bl	800a12c <__pow5mult>
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	2b01      	cmp	r3, #1
 800971e:	4606      	mov	r6, r0
 8009720:	dd7a      	ble.n	8009818 <_dtoa_r+0x8d0>
 8009722:	f04f 0800 	mov.w	r8, #0
 8009726:	6933      	ldr	r3, [r6, #16]
 8009728:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800972c:	6918      	ldr	r0, [r3, #16]
 800972e:	f000 fbef 	bl	8009f10 <__hi0bits>
 8009732:	f1c0 0020 	rsb	r0, r0, #32
 8009736:	9b06      	ldr	r3, [sp, #24]
 8009738:	4418      	add	r0, r3
 800973a:	f010 001f 	ands.w	r0, r0, #31
 800973e:	f000 8094 	beq.w	800986a <_dtoa_r+0x922>
 8009742:	f1c0 0320 	rsb	r3, r0, #32
 8009746:	2b04      	cmp	r3, #4
 8009748:	f340 8085 	ble.w	8009856 <_dtoa_r+0x90e>
 800974c:	9b05      	ldr	r3, [sp, #20]
 800974e:	f1c0 001c 	rsb	r0, r0, #28
 8009752:	4403      	add	r3, r0
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	9b06      	ldr	r3, [sp, #24]
 8009758:	4403      	add	r3, r0
 800975a:	4405      	add	r5, r0
 800975c:	9306      	str	r3, [sp, #24]
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x828>
 8009764:	4651      	mov	r1, sl
 8009766:	461a      	mov	r2, r3
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fd39 	bl	800a1e0 <__lshift>
 800976e:	4682      	mov	sl, r0
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	dd05      	ble.n	8009782 <_dtoa_r+0x83a>
 8009776:	4631      	mov	r1, r6
 8009778:	461a      	mov	r2, r3
 800977a:	4620      	mov	r0, r4
 800977c:	f000 fd30 	bl	800a1e0 <__lshift>
 8009780:	4606      	mov	r6, r0
 8009782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d072      	beq.n	800986e <_dtoa_r+0x926>
 8009788:	4631      	mov	r1, r6
 800978a:	4650      	mov	r0, sl
 800978c:	f000 fd94 	bl	800a2b8 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	da6c      	bge.n	800986e <_dtoa_r+0x926>
 8009794:	2300      	movs	r3, #0
 8009796:	4651      	mov	r1, sl
 8009798:	220a      	movs	r2, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f000 fb28 	bl	8009df0 <__multadd>
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097a6:	4682      	mov	sl, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 81b0 	beq.w	8009b0e <_dtoa_r+0xbc6>
 80097ae:	2300      	movs	r3, #0
 80097b0:	4639      	mov	r1, r7
 80097b2:	220a      	movs	r2, #10
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 fb1b 	bl	8009df0 <__multadd>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	4607      	mov	r7, r0
 80097c0:	f300 8096 	bgt.w	80098f0 <_dtoa_r+0x9a8>
 80097c4:	9b07      	ldr	r3, [sp, #28]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	dc59      	bgt.n	800987e <_dtoa_r+0x936>
 80097ca:	e091      	b.n	80098f0 <_dtoa_r+0x9a8>
 80097cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097d2:	e758      	b.n	8009686 <_dtoa_r+0x73e>
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	1e5e      	subs	r6, r3, #1
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	42b3      	cmp	r3, r6
 80097dc:	bfbf      	itttt	lt
 80097de:	9b08      	ldrlt	r3, [sp, #32]
 80097e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80097e2:	9608      	strlt	r6, [sp, #32]
 80097e4:	1af3      	sublt	r3, r6, r3
 80097e6:	bfb4      	ite	lt
 80097e8:	18d2      	addlt	r2, r2, r3
 80097ea:	1b9e      	subge	r6, r3, r6
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	bfbc      	itt	lt
 80097f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80097f2:	2600      	movlt	r6, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bfb7      	itett	lt
 80097f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80097fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009800:	1a9d      	sublt	r5, r3, r2
 8009802:	2300      	movlt	r3, #0
 8009804:	e741      	b.n	800968a <_dtoa_r+0x742>
 8009806:	9e08      	ldr	r6, [sp, #32]
 8009808:	9d05      	ldr	r5, [sp, #20]
 800980a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800980c:	e748      	b.n	80096a0 <_dtoa_r+0x758>
 800980e:	9a08      	ldr	r2, [sp, #32]
 8009810:	e770      	b.n	80096f4 <_dtoa_r+0x7ac>
 8009812:	9b07      	ldr	r3, [sp, #28]
 8009814:	2b01      	cmp	r3, #1
 8009816:	dc19      	bgt.n	800984c <_dtoa_r+0x904>
 8009818:	9b02      	ldr	r3, [sp, #8]
 800981a:	b9bb      	cbnz	r3, 800984c <_dtoa_r+0x904>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009822:	b99b      	cbnz	r3, 800984c <_dtoa_r+0x904>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800982a:	0d1b      	lsrs	r3, r3, #20
 800982c:	051b      	lsls	r3, r3, #20
 800982e:	b183      	cbz	r3, 8009852 <_dtoa_r+0x90a>
 8009830:	9b05      	ldr	r3, [sp, #20]
 8009832:	3301      	adds	r3, #1
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	9b06      	ldr	r3, [sp, #24]
 8009838:	3301      	adds	r3, #1
 800983a:	9306      	str	r3, [sp, #24]
 800983c:	f04f 0801 	mov.w	r8, #1
 8009840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009842:	2b00      	cmp	r3, #0
 8009844:	f47f af6f 	bne.w	8009726 <_dtoa_r+0x7de>
 8009848:	2001      	movs	r0, #1
 800984a:	e774      	b.n	8009736 <_dtoa_r+0x7ee>
 800984c:	f04f 0800 	mov.w	r8, #0
 8009850:	e7f6      	b.n	8009840 <_dtoa_r+0x8f8>
 8009852:	4698      	mov	r8, r3
 8009854:	e7f4      	b.n	8009840 <_dtoa_r+0x8f8>
 8009856:	d082      	beq.n	800975e <_dtoa_r+0x816>
 8009858:	9a05      	ldr	r2, [sp, #20]
 800985a:	331c      	adds	r3, #28
 800985c:	441a      	add	r2, r3
 800985e:	9205      	str	r2, [sp, #20]
 8009860:	9a06      	ldr	r2, [sp, #24]
 8009862:	441a      	add	r2, r3
 8009864:	441d      	add	r5, r3
 8009866:	9206      	str	r2, [sp, #24]
 8009868:	e779      	b.n	800975e <_dtoa_r+0x816>
 800986a:	4603      	mov	r3, r0
 800986c:	e7f4      	b.n	8009858 <_dtoa_r+0x910>
 800986e:	9b04      	ldr	r3, [sp, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	dc37      	bgt.n	80098e4 <_dtoa_r+0x99c>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	2b02      	cmp	r3, #2
 8009878:	dd34      	ble.n	80098e4 <_dtoa_r+0x99c>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	b963      	cbnz	r3, 800989c <_dtoa_r+0x954>
 8009882:	4631      	mov	r1, r6
 8009884:	2205      	movs	r2, #5
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fab2 	bl	8009df0 <__multadd>
 800988c:	4601      	mov	r1, r0
 800988e:	4606      	mov	r6, r0
 8009890:	4650      	mov	r0, sl
 8009892:	f000 fd11 	bl	800a2b8 <__mcmp>
 8009896:	2800      	cmp	r0, #0
 8009898:	f73f adbb 	bgt.w	8009412 <_dtoa_r+0x4ca>
 800989c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989e:	9d00      	ldr	r5, [sp, #0]
 80098a0:	ea6f 0b03 	mvn.w	fp, r3
 80098a4:	f04f 0800 	mov.w	r8, #0
 80098a8:	4631      	mov	r1, r6
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fa7e 	bl	8009dac <_Bfree>
 80098b0:	2f00      	cmp	r7, #0
 80098b2:	f43f aeab 	beq.w	800960c <_dtoa_r+0x6c4>
 80098b6:	f1b8 0f00 	cmp.w	r8, #0
 80098ba:	d005      	beq.n	80098c8 <_dtoa_r+0x980>
 80098bc:	45b8      	cmp	r8, r7
 80098be:	d003      	beq.n	80098c8 <_dtoa_r+0x980>
 80098c0:	4641      	mov	r1, r8
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fa72 	bl	8009dac <_Bfree>
 80098c8:	4639      	mov	r1, r7
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fa6e 	bl	8009dac <_Bfree>
 80098d0:	e69c      	b.n	800960c <_dtoa_r+0x6c4>
 80098d2:	2600      	movs	r6, #0
 80098d4:	4637      	mov	r7, r6
 80098d6:	e7e1      	b.n	800989c <_dtoa_r+0x954>
 80098d8:	46bb      	mov	fp, r7
 80098da:	4637      	mov	r7, r6
 80098dc:	e599      	b.n	8009412 <_dtoa_r+0x4ca>
 80098de:	bf00      	nop
 80098e0:	40240000 	.word	0x40240000
 80098e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80c8 	beq.w	8009a7c <_dtoa_r+0xb34>
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	dd05      	ble.n	8009900 <_dtoa_r+0x9b8>
 80098f4:	4639      	mov	r1, r7
 80098f6:	462a      	mov	r2, r5
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 fc71 	bl	800a1e0 <__lshift>
 80098fe:	4607      	mov	r7, r0
 8009900:	f1b8 0f00 	cmp.w	r8, #0
 8009904:	d05b      	beq.n	80099be <_dtoa_r+0xa76>
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	4620      	mov	r0, r4
 800990a:	f000 fa0f 	bl	8009d2c <_Balloc>
 800990e:	4605      	mov	r5, r0
 8009910:	b928      	cbnz	r0, 800991e <_dtoa_r+0x9d6>
 8009912:	4b83      	ldr	r3, [pc, #524]	; (8009b20 <_dtoa_r+0xbd8>)
 8009914:	4602      	mov	r2, r0
 8009916:	f240 21ef 	movw	r1, #751	; 0x2ef
 800991a:	f7ff bb2e 	b.w	8008f7a <_dtoa_r+0x32>
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	3202      	adds	r2, #2
 8009922:	0092      	lsls	r2, r2, #2
 8009924:	f107 010c 	add.w	r1, r7, #12
 8009928:	300c      	adds	r0, #12
 800992a:	f002 fccf 	bl	800c2cc <memcpy>
 800992e:	2201      	movs	r2, #1
 8009930:	4629      	mov	r1, r5
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fc54 	bl	800a1e0 <__lshift>
 8009938:	9b00      	ldr	r3, [sp, #0]
 800993a:	3301      	adds	r3, #1
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009942:	4413      	add	r3, r2
 8009944:	9308      	str	r3, [sp, #32]
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	46b8      	mov	r8, r7
 800994e:	9306      	str	r3, [sp, #24]
 8009950:	4607      	mov	r7, r0
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	4631      	mov	r1, r6
 8009956:	3b01      	subs	r3, #1
 8009958:	4650      	mov	r0, sl
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	f7ff fa6c 	bl	8008e38 <quorem>
 8009960:	4641      	mov	r1, r8
 8009962:	9002      	str	r0, [sp, #8]
 8009964:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009968:	4650      	mov	r0, sl
 800996a:	f000 fca5 	bl	800a2b8 <__mcmp>
 800996e:	463a      	mov	r2, r7
 8009970:	9005      	str	r0, [sp, #20]
 8009972:	4631      	mov	r1, r6
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fcbb 	bl	800a2f0 <__mdiff>
 800997a:	68c2      	ldr	r2, [r0, #12]
 800997c:	4605      	mov	r5, r0
 800997e:	bb02      	cbnz	r2, 80099c2 <_dtoa_r+0xa7a>
 8009980:	4601      	mov	r1, r0
 8009982:	4650      	mov	r0, sl
 8009984:	f000 fc98 	bl	800a2b8 <__mcmp>
 8009988:	4602      	mov	r2, r0
 800998a:	4629      	mov	r1, r5
 800998c:	4620      	mov	r0, r4
 800998e:	9209      	str	r2, [sp, #36]	; 0x24
 8009990:	f000 fa0c 	bl	8009dac <_Bfree>
 8009994:	9b07      	ldr	r3, [sp, #28]
 8009996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009998:	9d04      	ldr	r5, [sp, #16]
 800999a:	ea43 0102 	orr.w	r1, r3, r2
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	4319      	orrs	r1, r3
 80099a2:	d110      	bne.n	80099c6 <_dtoa_r+0xa7e>
 80099a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099a8:	d029      	beq.n	80099fe <_dtoa_r+0xab6>
 80099aa:	9b05      	ldr	r3, [sp, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dd02      	ble.n	80099b6 <_dtoa_r+0xa6e>
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	f883 9000 	strb.w	r9, [r3]
 80099bc:	e774      	b.n	80098a8 <_dtoa_r+0x960>
 80099be:	4638      	mov	r0, r7
 80099c0:	e7ba      	b.n	8009938 <_dtoa_r+0x9f0>
 80099c2:	2201      	movs	r2, #1
 80099c4:	e7e1      	b.n	800998a <_dtoa_r+0xa42>
 80099c6:	9b05      	ldr	r3, [sp, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	db04      	blt.n	80099d6 <_dtoa_r+0xa8e>
 80099cc:	9907      	ldr	r1, [sp, #28]
 80099ce:	430b      	orrs	r3, r1
 80099d0:	9906      	ldr	r1, [sp, #24]
 80099d2:	430b      	orrs	r3, r1
 80099d4:	d120      	bne.n	8009a18 <_dtoa_r+0xad0>
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	dded      	ble.n	80099b6 <_dtoa_r+0xa6e>
 80099da:	4651      	mov	r1, sl
 80099dc:	2201      	movs	r2, #1
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 fbfe 	bl	800a1e0 <__lshift>
 80099e4:	4631      	mov	r1, r6
 80099e6:	4682      	mov	sl, r0
 80099e8:	f000 fc66 	bl	800a2b8 <__mcmp>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	dc03      	bgt.n	80099f8 <_dtoa_r+0xab0>
 80099f0:	d1e1      	bne.n	80099b6 <_dtoa_r+0xa6e>
 80099f2:	f019 0f01 	tst.w	r9, #1
 80099f6:	d0de      	beq.n	80099b6 <_dtoa_r+0xa6e>
 80099f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099fc:	d1d8      	bne.n	80099b0 <_dtoa_r+0xa68>
 80099fe:	9a01      	ldr	r2, [sp, #4]
 8009a00:	2339      	movs	r3, #57	; 0x39
 8009a02:	7013      	strb	r3, [r2, #0]
 8009a04:	462b      	mov	r3, r5
 8009a06:	461d      	mov	r5, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a0e:	2a39      	cmp	r2, #57	; 0x39
 8009a10:	d06c      	beq.n	8009aec <_dtoa_r+0xba4>
 8009a12:	3201      	adds	r2, #1
 8009a14:	701a      	strb	r2, [r3, #0]
 8009a16:	e747      	b.n	80098a8 <_dtoa_r+0x960>
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	dd07      	ble.n	8009a2c <_dtoa_r+0xae4>
 8009a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a20:	d0ed      	beq.n	80099fe <_dtoa_r+0xab6>
 8009a22:	9a01      	ldr	r2, [sp, #4]
 8009a24:	f109 0301 	add.w	r3, r9, #1
 8009a28:	7013      	strb	r3, [r2, #0]
 8009a2a:	e73d      	b.n	80098a8 <_dtoa_r+0x960>
 8009a2c:	9b04      	ldr	r3, [sp, #16]
 8009a2e:	9a08      	ldr	r2, [sp, #32]
 8009a30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d043      	beq.n	8009ac0 <_dtoa_r+0xb78>
 8009a38:	4651      	mov	r1, sl
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	220a      	movs	r2, #10
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 f9d6 	bl	8009df0 <__multadd>
 8009a44:	45b8      	cmp	r8, r7
 8009a46:	4682      	mov	sl, r0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	f04f 020a 	mov.w	r2, #10
 8009a50:	4641      	mov	r1, r8
 8009a52:	4620      	mov	r0, r4
 8009a54:	d107      	bne.n	8009a66 <_dtoa_r+0xb1e>
 8009a56:	f000 f9cb 	bl	8009df0 <__multadd>
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	3301      	adds	r3, #1
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	e775      	b.n	8009952 <_dtoa_r+0xa0a>
 8009a66:	f000 f9c3 	bl	8009df0 <__multadd>
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	220a      	movs	r2, #10
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f9bc 	bl	8009df0 <__multadd>
 8009a78:	4607      	mov	r7, r0
 8009a7a:	e7f0      	b.n	8009a5e <_dtoa_r+0xb16>
 8009a7c:	9b04      	ldr	r3, [sp, #16]
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	9d00      	ldr	r5, [sp, #0]
 8009a82:	4631      	mov	r1, r6
 8009a84:	4650      	mov	r0, sl
 8009a86:	f7ff f9d7 	bl	8008e38 <quorem>
 8009a8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	f805 9b01 	strb.w	r9, [r5], #1
 8009a94:	1aea      	subs	r2, r5, r3
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	dd07      	ble.n	8009aac <_dtoa_r+0xb64>
 8009a9c:	4651      	mov	r1, sl
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	220a      	movs	r2, #10
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f9a4 	bl	8009df0 <__multadd>
 8009aa8:	4682      	mov	sl, r0
 8009aaa:	e7ea      	b.n	8009a82 <_dtoa_r+0xb3a>
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfc8      	it	gt
 8009ab2:	461d      	movgt	r5, r3
 8009ab4:	9b00      	ldr	r3, [sp, #0]
 8009ab6:	bfd8      	it	le
 8009ab8:	2501      	movle	r5, #1
 8009aba:	441d      	add	r5, r3
 8009abc:	f04f 0800 	mov.w	r8, #0
 8009ac0:	4651      	mov	r1, sl
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fb8b 	bl	800a1e0 <__lshift>
 8009aca:	4631      	mov	r1, r6
 8009acc:	4682      	mov	sl, r0
 8009ace:	f000 fbf3 	bl	800a2b8 <__mcmp>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	dc96      	bgt.n	8009a04 <_dtoa_r+0xabc>
 8009ad6:	d102      	bne.n	8009ade <_dtoa_r+0xb96>
 8009ad8:	f019 0f01 	tst.w	r9, #1
 8009adc:	d192      	bne.n	8009a04 <_dtoa_r+0xabc>
 8009ade:	462b      	mov	r3, r5
 8009ae0:	461d      	mov	r5, r3
 8009ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae6:	2a30      	cmp	r2, #48	; 0x30
 8009ae8:	d0fa      	beq.n	8009ae0 <_dtoa_r+0xb98>
 8009aea:	e6dd      	b.n	80098a8 <_dtoa_r+0x960>
 8009aec:	9a00      	ldr	r2, [sp, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d189      	bne.n	8009a06 <_dtoa_r+0xabe>
 8009af2:	f10b 0b01 	add.w	fp, fp, #1
 8009af6:	2331      	movs	r3, #49	; 0x31
 8009af8:	e796      	b.n	8009a28 <_dtoa_r+0xae0>
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <_dtoa_r+0xbdc>)
 8009afc:	f7ff ba99 	b.w	8009032 <_dtoa_r+0xea>
 8009b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f47f aa6d 	bne.w	8008fe2 <_dtoa_r+0x9a>
 8009b08:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <_dtoa_r+0xbe0>)
 8009b0a:	f7ff ba92 	b.w	8009032 <_dtoa_r+0xea>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dcb5      	bgt.n	8009a80 <_dtoa_r+0xb38>
 8009b14:	9b07      	ldr	r3, [sp, #28]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	f73f aeb1 	bgt.w	800987e <_dtoa_r+0x936>
 8009b1c:	e7b0      	b.n	8009a80 <_dtoa_r+0xb38>
 8009b1e:	bf00      	nop
 8009b20:	0800d373 	.word	0x0800d373
 8009b24:	0800d658 	.word	0x0800d658
 8009b28:	0800d2f7 	.word	0x0800d2f7

08009b2c <_free_r>:
 8009b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b2e:	2900      	cmp	r1, #0
 8009b30:	d044      	beq.n	8009bbc <_free_r+0x90>
 8009b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b36:	9001      	str	r0, [sp, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b3e:	bfb8      	it	lt
 8009b40:	18e4      	addlt	r4, r4, r3
 8009b42:	f000 f8e7 	bl	8009d14 <__malloc_lock>
 8009b46:	4a1e      	ldr	r2, [pc, #120]	; (8009bc0 <_free_r+0x94>)
 8009b48:	9801      	ldr	r0, [sp, #4]
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	b933      	cbnz	r3, 8009b5c <_free_r+0x30>
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	6014      	str	r4, [r2, #0]
 8009b52:	b003      	add	sp, #12
 8009b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b58:	f000 b8e2 	b.w	8009d20 <__malloc_unlock>
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d908      	bls.n	8009b72 <_free_r+0x46>
 8009b60:	6825      	ldr	r5, [r4, #0]
 8009b62:	1961      	adds	r1, r4, r5
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf01      	itttt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	1949      	addeq	r1, r1, r5
 8009b6e:	6021      	streq	r1, [r4, #0]
 8009b70:	e7ed      	b.n	8009b4e <_free_r+0x22>
 8009b72:	461a      	mov	r2, r3
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	b10b      	cbz	r3, 8009b7c <_free_r+0x50>
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d9fa      	bls.n	8009b72 <_free_r+0x46>
 8009b7c:	6811      	ldr	r1, [r2, #0]
 8009b7e:	1855      	adds	r5, r2, r1
 8009b80:	42a5      	cmp	r5, r4
 8009b82:	d10b      	bne.n	8009b9c <_free_r+0x70>
 8009b84:	6824      	ldr	r4, [r4, #0]
 8009b86:	4421      	add	r1, r4
 8009b88:	1854      	adds	r4, r2, r1
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	6011      	str	r1, [r2, #0]
 8009b8e:	d1e0      	bne.n	8009b52 <_free_r+0x26>
 8009b90:	681c      	ldr	r4, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	6053      	str	r3, [r2, #4]
 8009b96:	440c      	add	r4, r1
 8009b98:	6014      	str	r4, [r2, #0]
 8009b9a:	e7da      	b.n	8009b52 <_free_r+0x26>
 8009b9c:	d902      	bls.n	8009ba4 <_free_r+0x78>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	6003      	str	r3, [r0, #0]
 8009ba2:	e7d6      	b.n	8009b52 <_free_r+0x26>
 8009ba4:	6825      	ldr	r5, [r4, #0]
 8009ba6:	1961      	adds	r1, r4, r5
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	bf04      	itt	eq
 8009bac:	6819      	ldreq	r1, [r3, #0]
 8009bae:	685b      	ldreq	r3, [r3, #4]
 8009bb0:	6063      	str	r3, [r4, #4]
 8009bb2:	bf04      	itt	eq
 8009bb4:	1949      	addeq	r1, r1, r5
 8009bb6:	6021      	streq	r1, [r4, #0]
 8009bb8:	6054      	str	r4, [r2, #4]
 8009bba:	e7ca      	b.n	8009b52 <_free_r+0x26>
 8009bbc:	b003      	add	sp, #12
 8009bbe:	bd30      	pop	{r4, r5, pc}
 8009bc0:	20000ce4 	.word	0x20000ce4

08009bc4 <malloc>:
 8009bc4:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <malloc+0xc>)
 8009bc6:	4601      	mov	r1, r0
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	f000 b823 	b.w	8009c14 <_malloc_r>
 8009bce:	bf00      	nop
 8009bd0:	20000074 	.word	0x20000074

08009bd4 <sbrk_aligned>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4e0e      	ldr	r6, [pc, #56]	; (8009c10 <sbrk_aligned+0x3c>)
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6831      	ldr	r1, [r6, #0]
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b911      	cbnz	r1, 8009be6 <sbrk_aligned+0x12>
 8009be0:	f002 fb64 	bl	800c2ac <_sbrk_r>
 8009be4:	6030      	str	r0, [r6, #0]
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f002 fb5f 	bl	800c2ac <_sbrk_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d00a      	beq.n	8009c08 <sbrk_aligned+0x34>
 8009bf2:	1cc4      	adds	r4, r0, #3
 8009bf4:	f024 0403 	bic.w	r4, r4, #3
 8009bf8:	42a0      	cmp	r0, r4
 8009bfa:	d007      	beq.n	8009c0c <sbrk_aligned+0x38>
 8009bfc:	1a21      	subs	r1, r4, r0
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f002 fb54 	bl	800c2ac <_sbrk_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	d101      	bne.n	8009c0c <sbrk_aligned+0x38>
 8009c08:	f04f 34ff 	mov.w	r4, #4294967295
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	20000ce8 	.word	0x20000ce8

08009c14 <_malloc_r>:
 8009c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c18:	1ccd      	adds	r5, r1, #3
 8009c1a:	f025 0503 	bic.w	r5, r5, #3
 8009c1e:	3508      	adds	r5, #8
 8009c20:	2d0c      	cmp	r5, #12
 8009c22:	bf38      	it	cc
 8009c24:	250c      	movcc	r5, #12
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	4607      	mov	r7, r0
 8009c2a:	db01      	blt.n	8009c30 <_malloc_r+0x1c>
 8009c2c:	42a9      	cmp	r1, r5
 8009c2e:	d905      	bls.n	8009c3c <_malloc_r+0x28>
 8009c30:	230c      	movs	r3, #12
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	2600      	movs	r6, #0
 8009c36:	4630      	mov	r0, r6
 8009c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d10 <_malloc_r+0xfc>
 8009c40:	f000 f868 	bl	8009d14 <__malloc_lock>
 8009c44:	f8d8 3000 	ldr.w	r3, [r8]
 8009c48:	461c      	mov	r4, r3
 8009c4a:	bb5c      	cbnz	r4, 8009ca4 <_malloc_r+0x90>
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7ff ffc0 	bl	8009bd4 <sbrk_aligned>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	4604      	mov	r4, r0
 8009c58:	d155      	bne.n	8009d06 <_malloc_r+0xf2>
 8009c5a:	f8d8 4000 	ldr.w	r4, [r8]
 8009c5e:	4626      	mov	r6, r4
 8009c60:	2e00      	cmp	r6, #0
 8009c62:	d145      	bne.n	8009cf0 <_malloc_r+0xdc>
 8009c64:	2c00      	cmp	r4, #0
 8009c66:	d048      	beq.n	8009cfa <_malloc_r+0xe6>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	eb04 0903 	add.w	r9, r4, r3
 8009c72:	f002 fb1b 	bl	800c2ac <_sbrk_r>
 8009c76:	4581      	cmp	r9, r0
 8009c78:	d13f      	bne.n	8009cfa <_malloc_r+0xe6>
 8009c7a:	6821      	ldr	r1, [r4, #0]
 8009c7c:	1a6d      	subs	r5, r5, r1
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ffa7 	bl	8009bd4 <sbrk_aligned>
 8009c86:	3001      	adds	r0, #1
 8009c88:	d037      	beq.n	8009cfa <_malloc_r+0xe6>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	442b      	add	r3, r5
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	f8d8 3000 	ldr.w	r3, [r8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d038      	beq.n	8009d0a <_malloc_r+0xf6>
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	42a2      	cmp	r2, r4
 8009c9c:	d12b      	bne.n	8009cf6 <_malloc_r+0xe2>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	e00f      	b.n	8009cc4 <_malloc_r+0xb0>
 8009ca4:	6822      	ldr	r2, [r4, #0]
 8009ca6:	1b52      	subs	r2, r2, r5
 8009ca8:	d41f      	bmi.n	8009cea <_malloc_r+0xd6>
 8009caa:	2a0b      	cmp	r2, #11
 8009cac:	d917      	bls.n	8009cde <_malloc_r+0xca>
 8009cae:	1961      	adds	r1, r4, r5
 8009cb0:	42a3      	cmp	r3, r4
 8009cb2:	6025      	str	r5, [r4, #0]
 8009cb4:	bf18      	it	ne
 8009cb6:	6059      	strne	r1, [r3, #4]
 8009cb8:	6863      	ldr	r3, [r4, #4]
 8009cba:	bf08      	it	eq
 8009cbc:	f8c8 1000 	streq.w	r1, [r8]
 8009cc0:	5162      	str	r2, [r4, r5]
 8009cc2:	604b      	str	r3, [r1, #4]
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f104 060b 	add.w	r6, r4, #11
 8009cca:	f000 f829 	bl	8009d20 <__malloc_unlock>
 8009cce:	f026 0607 	bic.w	r6, r6, #7
 8009cd2:	1d23      	adds	r3, r4, #4
 8009cd4:	1af2      	subs	r2, r6, r3
 8009cd6:	d0ae      	beq.n	8009c36 <_malloc_r+0x22>
 8009cd8:	1b9b      	subs	r3, r3, r6
 8009cda:	50a3      	str	r3, [r4, r2]
 8009cdc:	e7ab      	b.n	8009c36 <_malloc_r+0x22>
 8009cde:	42a3      	cmp	r3, r4
 8009ce0:	6862      	ldr	r2, [r4, #4]
 8009ce2:	d1dd      	bne.n	8009ca0 <_malloc_r+0x8c>
 8009ce4:	f8c8 2000 	str.w	r2, [r8]
 8009ce8:	e7ec      	b.n	8009cc4 <_malloc_r+0xb0>
 8009cea:	4623      	mov	r3, r4
 8009cec:	6864      	ldr	r4, [r4, #4]
 8009cee:	e7ac      	b.n	8009c4a <_malloc_r+0x36>
 8009cf0:	4634      	mov	r4, r6
 8009cf2:	6876      	ldr	r6, [r6, #4]
 8009cf4:	e7b4      	b.n	8009c60 <_malloc_r+0x4c>
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	e7cc      	b.n	8009c94 <_malloc_r+0x80>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	603b      	str	r3, [r7, #0]
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f000 f80e 	bl	8009d20 <__malloc_unlock>
 8009d04:	e797      	b.n	8009c36 <_malloc_r+0x22>
 8009d06:	6025      	str	r5, [r4, #0]
 8009d08:	e7dc      	b.n	8009cc4 <_malloc_r+0xb0>
 8009d0a:	605b      	str	r3, [r3, #4]
 8009d0c:	deff      	udf	#255	; 0xff
 8009d0e:	bf00      	nop
 8009d10:	20000ce4 	.word	0x20000ce4

08009d14 <__malloc_lock>:
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__malloc_lock+0x8>)
 8009d16:	f7ff b886 	b.w	8008e26 <__retarget_lock_acquire_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	20000ce0 	.word	0x20000ce0

08009d20 <__malloc_unlock>:
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__malloc_unlock+0x8>)
 8009d22:	f7ff b881 	b.w	8008e28 <__retarget_lock_release_recursive>
 8009d26:	bf00      	nop
 8009d28:	20000ce0 	.word	0x20000ce0

08009d2c <_Balloc>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	69c6      	ldr	r6, [r0, #28]
 8009d30:	4604      	mov	r4, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	b976      	cbnz	r6, 8009d54 <_Balloc+0x28>
 8009d36:	2010      	movs	r0, #16
 8009d38:	f7ff ff44 	bl	8009bc4 <malloc>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	61e0      	str	r0, [r4, #28]
 8009d40:	b920      	cbnz	r0, 8009d4c <_Balloc+0x20>
 8009d42:	4b18      	ldr	r3, [pc, #96]	; (8009da4 <_Balloc+0x78>)
 8009d44:	4818      	ldr	r0, [pc, #96]	; (8009da8 <_Balloc+0x7c>)
 8009d46:	216b      	movs	r1, #107	; 0x6b
 8009d48:	f002 fad6 	bl	800c2f8 <__assert_func>
 8009d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d50:	6006      	str	r6, [r0, #0]
 8009d52:	60c6      	str	r6, [r0, #12]
 8009d54:	69e6      	ldr	r6, [r4, #28]
 8009d56:	68f3      	ldr	r3, [r6, #12]
 8009d58:	b183      	cbz	r3, 8009d7c <_Balloc+0x50>
 8009d5a:	69e3      	ldr	r3, [r4, #28]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d62:	b9b8      	cbnz	r0, 8009d94 <_Balloc+0x68>
 8009d64:	2101      	movs	r1, #1
 8009d66:	fa01 f605 	lsl.w	r6, r1, r5
 8009d6a:	1d72      	adds	r2, r6, #5
 8009d6c:	0092      	lsls	r2, r2, #2
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f002 fae0 	bl	800c334 <_calloc_r>
 8009d74:	b160      	cbz	r0, 8009d90 <_Balloc+0x64>
 8009d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d7a:	e00e      	b.n	8009d9a <_Balloc+0x6e>
 8009d7c:	2221      	movs	r2, #33	; 0x21
 8009d7e:	2104      	movs	r1, #4
 8009d80:	4620      	mov	r0, r4
 8009d82:	f002 fad7 	bl	800c334 <_calloc_r>
 8009d86:	69e3      	ldr	r3, [r4, #28]
 8009d88:	60f0      	str	r0, [r6, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e4      	bne.n	8009d5a <_Balloc+0x2e>
 8009d90:	2000      	movs	r0, #0
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	6802      	ldr	r2, [r0, #0]
 8009d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009da0:	e7f7      	b.n	8009d92 <_Balloc+0x66>
 8009da2:	bf00      	nop
 8009da4:	0800d304 	.word	0x0800d304
 8009da8:	0800d384 	.word	0x0800d384

08009dac <_Bfree>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	69c6      	ldr	r6, [r0, #28]
 8009db0:	4605      	mov	r5, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	b976      	cbnz	r6, 8009dd4 <_Bfree+0x28>
 8009db6:	2010      	movs	r0, #16
 8009db8:	f7ff ff04 	bl	8009bc4 <malloc>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	61e8      	str	r0, [r5, #28]
 8009dc0:	b920      	cbnz	r0, 8009dcc <_Bfree+0x20>
 8009dc2:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <_Bfree+0x3c>)
 8009dc4:	4809      	ldr	r0, [pc, #36]	; (8009dec <_Bfree+0x40>)
 8009dc6:	218f      	movs	r1, #143	; 0x8f
 8009dc8:	f002 fa96 	bl	800c2f8 <__assert_func>
 8009dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dd0:	6006      	str	r6, [r0, #0]
 8009dd2:	60c6      	str	r6, [r0, #12]
 8009dd4:	b13c      	cbz	r4, 8009de6 <_Bfree+0x3a>
 8009dd6:	69eb      	ldr	r3, [r5, #28]
 8009dd8:	6862      	ldr	r2, [r4, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009de0:	6021      	str	r1, [r4, #0]
 8009de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	0800d304 	.word	0x0800d304
 8009dec:	0800d384 	.word	0x0800d384

08009df0 <__multadd>:
 8009df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df4:	690d      	ldr	r5, [r1, #16]
 8009df6:	4607      	mov	r7, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	461e      	mov	r6, r3
 8009dfc:	f101 0c14 	add.w	ip, r1, #20
 8009e00:	2000      	movs	r0, #0
 8009e02:	f8dc 3000 	ldr.w	r3, [ip]
 8009e06:	b299      	uxth	r1, r3
 8009e08:	fb02 6101 	mla	r1, r2, r1, r6
 8009e0c:	0c1e      	lsrs	r6, r3, #16
 8009e0e:	0c0b      	lsrs	r3, r1, #16
 8009e10:	fb02 3306 	mla	r3, r2, r6, r3
 8009e14:	b289      	uxth	r1, r1
 8009e16:	3001      	adds	r0, #1
 8009e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e1c:	4285      	cmp	r5, r0
 8009e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8009e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e26:	dcec      	bgt.n	8009e02 <__multadd+0x12>
 8009e28:	b30e      	cbz	r6, 8009e6e <__multadd+0x7e>
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dc19      	bgt.n	8009e64 <__multadd+0x74>
 8009e30:	6861      	ldr	r1, [r4, #4]
 8009e32:	4638      	mov	r0, r7
 8009e34:	3101      	adds	r1, #1
 8009e36:	f7ff ff79 	bl	8009d2c <_Balloc>
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	b928      	cbnz	r0, 8009e4a <__multadd+0x5a>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <__multadd+0x84>)
 8009e42:	480d      	ldr	r0, [pc, #52]	; (8009e78 <__multadd+0x88>)
 8009e44:	21ba      	movs	r1, #186	; 0xba
 8009e46:	f002 fa57 	bl	800c2f8 <__assert_func>
 8009e4a:	6922      	ldr	r2, [r4, #16]
 8009e4c:	3202      	adds	r2, #2
 8009e4e:	f104 010c 	add.w	r1, r4, #12
 8009e52:	0092      	lsls	r2, r2, #2
 8009e54:	300c      	adds	r0, #12
 8009e56:	f002 fa39 	bl	800c2cc <memcpy>
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	f7ff ffa5 	bl	8009dac <_Bfree>
 8009e62:	4644      	mov	r4, r8
 8009e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e68:	3501      	adds	r5, #1
 8009e6a:	615e      	str	r6, [r3, #20]
 8009e6c:	6125      	str	r5, [r4, #16]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e74:	0800d373 	.word	0x0800d373
 8009e78:	0800d384 	.word	0x0800d384

08009e7c <__s2b>:
 8009e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e80:	460c      	mov	r4, r1
 8009e82:	4615      	mov	r5, r2
 8009e84:	461f      	mov	r7, r3
 8009e86:	2209      	movs	r2, #9
 8009e88:	3308      	adds	r3, #8
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e90:	2100      	movs	r1, #0
 8009e92:	2201      	movs	r2, #1
 8009e94:	429a      	cmp	r2, r3
 8009e96:	db09      	blt.n	8009eac <__s2b+0x30>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff ff47 	bl	8009d2c <_Balloc>
 8009e9e:	b940      	cbnz	r0, 8009eb2 <__s2b+0x36>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	4b19      	ldr	r3, [pc, #100]	; (8009f08 <__s2b+0x8c>)
 8009ea4:	4819      	ldr	r0, [pc, #100]	; (8009f0c <__s2b+0x90>)
 8009ea6:	21d3      	movs	r1, #211	; 0xd3
 8009ea8:	f002 fa26 	bl	800c2f8 <__assert_func>
 8009eac:	0052      	lsls	r2, r2, #1
 8009eae:	3101      	adds	r1, #1
 8009eb0:	e7f0      	b.n	8009e94 <__s2b+0x18>
 8009eb2:	9b08      	ldr	r3, [sp, #32]
 8009eb4:	6143      	str	r3, [r0, #20]
 8009eb6:	2d09      	cmp	r5, #9
 8009eb8:	f04f 0301 	mov.w	r3, #1
 8009ebc:	6103      	str	r3, [r0, #16]
 8009ebe:	dd16      	ble.n	8009eee <__s2b+0x72>
 8009ec0:	f104 0909 	add.w	r9, r4, #9
 8009ec4:	46c8      	mov	r8, r9
 8009ec6:	442c      	add	r4, r5
 8009ec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ecc:	4601      	mov	r1, r0
 8009ece:	3b30      	subs	r3, #48	; 0x30
 8009ed0:	220a      	movs	r2, #10
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ff8c 	bl	8009df0 <__multadd>
 8009ed8:	45a0      	cmp	r8, r4
 8009eda:	d1f5      	bne.n	8009ec8 <__s2b+0x4c>
 8009edc:	f1a5 0408 	sub.w	r4, r5, #8
 8009ee0:	444c      	add	r4, r9
 8009ee2:	1b2d      	subs	r5, r5, r4
 8009ee4:	1963      	adds	r3, r4, r5
 8009ee6:	42bb      	cmp	r3, r7
 8009ee8:	db04      	blt.n	8009ef4 <__s2b+0x78>
 8009eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eee:	340a      	adds	r4, #10
 8009ef0:	2509      	movs	r5, #9
 8009ef2:	e7f6      	b.n	8009ee2 <__s2b+0x66>
 8009ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ef8:	4601      	mov	r1, r0
 8009efa:	3b30      	subs	r3, #48	; 0x30
 8009efc:	220a      	movs	r2, #10
 8009efe:	4630      	mov	r0, r6
 8009f00:	f7ff ff76 	bl	8009df0 <__multadd>
 8009f04:	e7ee      	b.n	8009ee4 <__s2b+0x68>
 8009f06:	bf00      	nop
 8009f08:	0800d373 	.word	0x0800d373
 8009f0c:	0800d384 	.word	0x0800d384

08009f10 <__hi0bits>:
 8009f10:	0c03      	lsrs	r3, r0, #16
 8009f12:	041b      	lsls	r3, r3, #16
 8009f14:	b9d3      	cbnz	r3, 8009f4c <__hi0bits+0x3c>
 8009f16:	0400      	lsls	r0, r0, #16
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f1e:	bf04      	itt	eq
 8009f20:	0200      	lsleq	r0, r0, #8
 8009f22:	3308      	addeq	r3, #8
 8009f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f28:	bf04      	itt	eq
 8009f2a:	0100      	lsleq	r0, r0, #4
 8009f2c:	3304      	addeq	r3, #4
 8009f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f32:	bf04      	itt	eq
 8009f34:	0080      	lsleq	r0, r0, #2
 8009f36:	3302      	addeq	r3, #2
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	db05      	blt.n	8009f48 <__hi0bits+0x38>
 8009f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f40:	f103 0301 	add.w	r3, r3, #1
 8009f44:	bf08      	it	eq
 8009f46:	2320      	moveq	r3, #32
 8009f48:	4618      	mov	r0, r3
 8009f4a:	4770      	bx	lr
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e7e4      	b.n	8009f1a <__hi0bits+0xa>

08009f50 <__lo0bits>:
 8009f50:	6803      	ldr	r3, [r0, #0]
 8009f52:	f013 0207 	ands.w	r2, r3, #7
 8009f56:	d00c      	beq.n	8009f72 <__lo0bits+0x22>
 8009f58:	07d9      	lsls	r1, r3, #31
 8009f5a:	d422      	bmi.n	8009fa2 <__lo0bits+0x52>
 8009f5c:	079a      	lsls	r2, r3, #30
 8009f5e:	bf49      	itett	mi
 8009f60:	085b      	lsrmi	r3, r3, #1
 8009f62:	089b      	lsrpl	r3, r3, #2
 8009f64:	6003      	strmi	r3, [r0, #0]
 8009f66:	2201      	movmi	r2, #1
 8009f68:	bf5c      	itt	pl
 8009f6a:	6003      	strpl	r3, [r0, #0]
 8009f6c:	2202      	movpl	r2, #2
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4770      	bx	lr
 8009f72:	b299      	uxth	r1, r3
 8009f74:	b909      	cbnz	r1, 8009f7a <__lo0bits+0x2a>
 8009f76:	0c1b      	lsrs	r3, r3, #16
 8009f78:	2210      	movs	r2, #16
 8009f7a:	b2d9      	uxtb	r1, r3
 8009f7c:	b909      	cbnz	r1, 8009f82 <__lo0bits+0x32>
 8009f7e:	3208      	adds	r2, #8
 8009f80:	0a1b      	lsrs	r3, r3, #8
 8009f82:	0719      	lsls	r1, r3, #28
 8009f84:	bf04      	itt	eq
 8009f86:	091b      	lsreq	r3, r3, #4
 8009f88:	3204      	addeq	r2, #4
 8009f8a:	0799      	lsls	r1, r3, #30
 8009f8c:	bf04      	itt	eq
 8009f8e:	089b      	lsreq	r3, r3, #2
 8009f90:	3202      	addeq	r2, #2
 8009f92:	07d9      	lsls	r1, r3, #31
 8009f94:	d403      	bmi.n	8009f9e <__lo0bits+0x4e>
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	f102 0201 	add.w	r2, r2, #1
 8009f9c:	d003      	beq.n	8009fa6 <__lo0bits+0x56>
 8009f9e:	6003      	str	r3, [r0, #0]
 8009fa0:	e7e5      	b.n	8009f6e <__lo0bits+0x1e>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	e7e3      	b.n	8009f6e <__lo0bits+0x1e>
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	e7e1      	b.n	8009f6e <__lo0bits+0x1e>
	...

08009fac <__i2b>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	460c      	mov	r4, r1
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	f7ff febb 	bl	8009d2c <_Balloc>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	b928      	cbnz	r0, 8009fc6 <__i2b+0x1a>
 8009fba:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <__i2b+0x24>)
 8009fbc:	4805      	ldr	r0, [pc, #20]	; (8009fd4 <__i2b+0x28>)
 8009fbe:	f240 1145 	movw	r1, #325	; 0x145
 8009fc2:	f002 f999 	bl	800c2f8 <__assert_func>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	6144      	str	r4, [r0, #20]
 8009fca:	6103      	str	r3, [r0, #16]
 8009fcc:	bd10      	pop	{r4, pc}
 8009fce:	bf00      	nop
 8009fd0:	0800d373 	.word	0x0800d373
 8009fd4:	0800d384 	.word	0x0800d384

08009fd8 <__multiply>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	4691      	mov	r9, r2
 8009fde:	690a      	ldr	r2, [r1, #16]
 8009fe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	bfb8      	it	lt
 8009fe8:	460b      	movlt	r3, r1
 8009fea:	460c      	mov	r4, r1
 8009fec:	bfbc      	itt	lt
 8009fee:	464c      	movlt	r4, r9
 8009ff0:	4699      	movlt	r9, r3
 8009ff2:	6927      	ldr	r7, [r4, #16]
 8009ff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ff8:	68a3      	ldr	r3, [r4, #8]
 8009ffa:	6861      	ldr	r1, [r4, #4]
 8009ffc:	eb07 060a 	add.w	r6, r7, sl
 800a000:	42b3      	cmp	r3, r6
 800a002:	b085      	sub	sp, #20
 800a004:	bfb8      	it	lt
 800a006:	3101      	addlt	r1, #1
 800a008:	f7ff fe90 	bl	8009d2c <_Balloc>
 800a00c:	b930      	cbnz	r0, 800a01c <__multiply+0x44>
 800a00e:	4602      	mov	r2, r0
 800a010:	4b44      	ldr	r3, [pc, #272]	; (800a124 <__multiply+0x14c>)
 800a012:	4845      	ldr	r0, [pc, #276]	; (800a128 <__multiply+0x150>)
 800a014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a018:	f002 f96e 	bl	800c2f8 <__assert_func>
 800a01c:	f100 0514 	add.w	r5, r0, #20
 800a020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a024:	462b      	mov	r3, r5
 800a026:	2200      	movs	r2, #0
 800a028:	4543      	cmp	r3, r8
 800a02a:	d321      	bcc.n	800a070 <__multiply+0x98>
 800a02c:	f104 0314 	add.w	r3, r4, #20
 800a030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a034:	f109 0314 	add.w	r3, r9, #20
 800a038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a03c:	9202      	str	r2, [sp, #8]
 800a03e:	1b3a      	subs	r2, r7, r4
 800a040:	3a15      	subs	r2, #21
 800a042:	f022 0203 	bic.w	r2, r2, #3
 800a046:	3204      	adds	r2, #4
 800a048:	f104 0115 	add.w	r1, r4, #21
 800a04c:	428f      	cmp	r7, r1
 800a04e:	bf38      	it	cc
 800a050:	2204      	movcc	r2, #4
 800a052:	9201      	str	r2, [sp, #4]
 800a054:	9a02      	ldr	r2, [sp, #8]
 800a056:	9303      	str	r3, [sp, #12]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d80c      	bhi.n	800a076 <__multiply+0x9e>
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	dd03      	ble.n	800a068 <__multiply+0x90>
 800a060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a064:	2b00      	cmp	r3, #0
 800a066:	d05b      	beq.n	800a120 <__multiply+0x148>
 800a068:	6106      	str	r6, [r0, #16]
 800a06a:	b005      	add	sp, #20
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	f843 2b04 	str.w	r2, [r3], #4
 800a074:	e7d8      	b.n	800a028 <__multiply+0x50>
 800a076:	f8b3 a000 	ldrh.w	sl, [r3]
 800a07a:	f1ba 0f00 	cmp.w	sl, #0
 800a07e:	d024      	beq.n	800a0ca <__multiply+0xf2>
 800a080:	f104 0e14 	add.w	lr, r4, #20
 800a084:	46a9      	mov	r9, r5
 800a086:	f04f 0c00 	mov.w	ip, #0
 800a08a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a08e:	f8d9 1000 	ldr.w	r1, [r9]
 800a092:	fa1f fb82 	uxth.w	fp, r2
 800a096:	b289      	uxth	r1, r1
 800a098:	fb0a 110b 	mla	r1, sl, fp, r1
 800a09c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a0a4:	4461      	add	r1, ip
 800a0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0b2:	b289      	uxth	r1, r1
 800a0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0b8:	4577      	cmp	r7, lr
 800a0ba:	f849 1b04 	str.w	r1, [r9], #4
 800a0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0c2:	d8e2      	bhi.n	800a08a <__multiply+0xb2>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	f845 c002 	str.w	ip, [r5, r2]
 800a0ca:	9a03      	ldr	r2, [sp, #12]
 800a0cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	f1b9 0f00 	cmp.w	r9, #0
 800a0d6:	d021      	beq.n	800a11c <__multiply+0x144>
 800a0d8:	6829      	ldr	r1, [r5, #0]
 800a0da:	f104 0c14 	add.w	ip, r4, #20
 800a0de:	46ae      	mov	lr, r5
 800a0e0:	f04f 0a00 	mov.w	sl, #0
 800a0e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a0e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a0f0:	4452      	add	r2, sl
 800a0f2:	b289      	uxth	r1, r1
 800a0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a0fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a104:	f8be 1000 	ldrh.w	r1, [lr]
 800a108:	fb09 110a 	mla	r1, r9, sl, r1
 800a10c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a110:	4567      	cmp	r7, ip
 800a112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a116:	d8e5      	bhi.n	800a0e4 <__multiply+0x10c>
 800a118:	9a01      	ldr	r2, [sp, #4]
 800a11a:	50a9      	str	r1, [r5, r2]
 800a11c:	3504      	adds	r5, #4
 800a11e:	e799      	b.n	800a054 <__multiply+0x7c>
 800a120:	3e01      	subs	r6, #1
 800a122:	e79b      	b.n	800a05c <__multiply+0x84>
 800a124:	0800d373 	.word	0x0800d373
 800a128:	0800d384 	.word	0x0800d384

0800a12c <__pow5mult>:
 800a12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a130:	4615      	mov	r5, r2
 800a132:	f012 0203 	ands.w	r2, r2, #3
 800a136:	4606      	mov	r6, r0
 800a138:	460f      	mov	r7, r1
 800a13a:	d007      	beq.n	800a14c <__pow5mult+0x20>
 800a13c:	4c25      	ldr	r4, [pc, #148]	; (800a1d4 <__pow5mult+0xa8>)
 800a13e:	3a01      	subs	r2, #1
 800a140:	2300      	movs	r3, #0
 800a142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a146:	f7ff fe53 	bl	8009df0 <__multadd>
 800a14a:	4607      	mov	r7, r0
 800a14c:	10ad      	asrs	r5, r5, #2
 800a14e:	d03d      	beq.n	800a1cc <__pow5mult+0xa0>
 800a150:	69f4      	ldr	r4, [r6, #28]
 800a152:	b97c      	cbnz	r4, 800a174 <__pow5mult+0x48>
 800a154:	2010      	movs	r0, #16
 800a156:	f7ff fd35 	bl	8009bc4 <malloc>
 800a15a:	4602      	mov	r2, r0
 800a15c:	61f0      	str	r0, [r6, #28]
 800a15e:	b928      	cbnz	r0, 800a16c <__pow5mult+0x40>
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <__pow5mult+0xac>)
 800a162:	481e      	ldr	r0, [pc, #120]	; (800a1dc <__pow5mult+0xb0>)
 800a164:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a168:	f002 f8c6 	bl	800c2f8 <__assert_func>
 800a16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a170:	6004      	str	r4, [r0, #0]
 800a172:	60c4      	str	r4, [r0, #12]
 800a174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a17c:	b94c      	cbnz	r4, 800a192 <__pow5mult+0x66>
 800a17e:	f240 2171 	movw	r1, #625	; 0x271
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ff12 	bl	8009fac <__i2b>
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a18e:	4604      	mov	r4, r0
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	f04f 0900 	mov.w	r9, #0
 800a196:	07eb      	lsls	r3, r5, #31
 800a198:	d50a      	bpl.n	800a1b0 <__pow5mult+0x84>
 800a19a:	4639      	mov	r1, r7
 800a19c:	4622      	mov	r2, r4
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff1a 	bl	8009fd8 <__multiply>
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff fdff 	bl	8009dac <_Bfree>
 800a1ae:	4647      	mov	r7, r8
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	d00b      	beq.n	800a1cc <__pow5mult+0xa0>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	b938      	cbnz	r0, 800a1c8 <__pow5mult+0x9c>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ff0b 	bl	8009fd8 <__multiply>
 800a1c2:	6020      	str	r0, [r4, #0]
 800a1c4:	f8c0 9000 	str.w	r9, [r0]
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e7e4      	b.n	800a196 <__pow5mult+0x6a>
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800d4d0 	.word	0x0800d4d0
 800a1d8:	0800d304 	.word	0x0800d304
 800a1dc:	0800d384 	.word	0x0800d384

0800a1e0 <__lshift>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	6849      	ldr	r1, [r1, #4]
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1f8:	f108 0601 	add.w	r6, r8, #1
 800a1fc:	42b3      	cmp	r3, r6
 800a1fe:	db0b      	blt.n	800a218 <__lshift+0x38>
 800a200:	4638      	mov	r0, r7
 800a202:	f7ff fd93 	bl	8009d2c <_Balloc>
 800a206:	4605      	mov	r5, r0
 800a208:	b948      	cbnz	r0, 800a21e <__lshift+0x3e>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4b28      	ldr	r3, [pc, #160]	; (800a2b0 <__lshift+0xd0>)
 800a20e:	4829      	ldr	r0, [pc, #164]	; (800a2b4 <__lshift+0xd4>)
 800a210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a214:	f002 f870 	bl	800c2f8 <__assert_func>
 800a218:	3101      	adds	r1, #1
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	e7ee      	b.n	800a1fc <__lshift+0x1c>
 800a21e:	2300      	movs	r3, #0
 800a220:	f100 0114 	add.w	r1, r0, #20
 800a224:	f100 0210 	add.w	r2, r0, #16
 800a228:	4618      	mov	r0, r3
 800a22a:	4553      	cmp	r3, sl
 800a22c:	db33      	blt.n	800a296 <__lshift+0xb6>
 800a22e:	6920      	ldr	r0, [r4, #16]
 800a230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a234:	f104 0314 	add.w	r3, r4, #20
 800a238:	f019 091f 	ands.w	r9, r9, #31
 800a23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a244:	d02b      	beq.n	800a29e <__lshift+0xbe>
 800a246:	f1c9 0e20 	rsb	lr, r9, #32
 800a24a:	468a      	mov	sl, r1
 800a24c:	2200      	movs	r2, #0
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	fa00 f009 	lsl.w	r0, r0, r9
 800a254:	4310      	orrs	r0, r2
 800a256:	f84a 0b04 	str.w	r0, [sl], #4
 800a25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25e:	459c      	cmp	ip, r3
 800a260:	fa22 f20e 	lsr.w	r2, r2, lr
 800a264:	d8f3      	bhi.n	800a24e <__lshift+0x6e>
 800a266:	ebac 0304 	sub.w	r3, ip, r4
 800a26a:	3b15      	subs	r3, #21
 800a26c:	f023 0303 	bic.w	r3, r3, #3
 800a270:	3304      	adds	r3, #4
 800a272:	f104 0015 	add.w	r0, r4, #21
 800a276:	4584      	cmp	ip, r0
 800a278:	bf38      	it	cc
 800a27a:	2304      	movcc	r3, #4
 800a27c:	50ca      	str	r2, [r1, r3]
 800a27e:	b10a      	cbz	r2, 800a284 <__lshift+0xa4>
 800a280:	f108 0602 	add.w	r6, r8, #2
 800a284:	3e01      	subs	r6, #1
 800a286:	4638      	mov	r0, r7
 800a288:	612e      	str	r6, [r5, #16]
 800a28a:	4621      	mov	r1, r4
 800a28c:	f7ff fd8e 	bl	8009dac <_Bfree>
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a296:	f842 0f04 	str.w	r0, [r2, #4]!
 800a29a:	3301      	adds	r3, #1
 800a29c:	e7c5      	b.n	800a22a <__lshift+0x4a>
 800a29e:	3904      	subs	r1, #4
 800a2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2a8:	459c      	cmp	ip, r3
 800a2aa:	d8f9      	bhi.n	800a2a0 <__lshift+0xc0>
 800a2ac:	e7ea      	b.n	800a284 <__lshift+0xa4>
 800a2ae:	bf00      	nop
 800a2b0:	0800d373 	.word	0x0800d373
 800a2b4:	0800d384 	.word	0x0800d384

0800a2b8 <__mcmp>:
 800a2b8:	b530      	push	{r4, r5, lr}
 800a2ba:	6902      	ldr	r2, [r0, #16]
 800a2bc:	690c      	ldr	r4, [r1, #16]
 800a2be:	1b12      	subs	r2, r2, r4
 800a2c0:	d10e      	bne.n	800a2e0 <__mcmp+0x28>
 800a2c2:	f100 0314 	add.w	r3, r0, #20
 800a2c6:	3114      	adds	r1, #20
 800a2c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2d8:	42a5      	cmp	r5, r4
 800a2da:	d003      	beq.n	800a2e4 <__mcmp+0x2c>
 800a2dc:	d305      	bcc.n	800a2ea <__mcmp+0x32>
 800a2de:	2201      	movs	r2, #1
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	bd30      	pop	{r4, r5, pc}
 800a2e4:	4283      	cmp	r3, r0
 800a2e6:	d3f3      	bcc.n	800a2d0 <__mcmp+0x18>
 800a2e8:	e7fa      	b.n	800a2e0 <__mcmp+0x28>
 800a2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ee:	e7f7      	b.n	800a2e0 <__mcmp+0x28>

0800a2f0 <__mdiff>:
 800a2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4690      	mov	r8, r2
 800a2fe:	f7ff ffdb 	bl	800a2b8 <__mcmp>
 800a302:	1e05      	subs	r5, r0, #0
 800a304:	d110      	bne.n	800a328 <__mdiff+0x38>
 800a306:	4629      	mov	r1, r5
 800a308:	4630      	mov	r0, r6
 800a30a:	f7ff fd0f 	bl	8009d2c <_Balloc>
 800a30e:	b930      	cbnz	r0, 800a31e <__mdiff+0x2e>
 800a310:	4b3a      	ldr	r3, [pc, #232]	; (800a3fc <__mdiff+0x10c>)
 800a312:	4602      	mov	r2, r0
 800a314:	f240 2137 	movw	r1, #567	; 0x237
 800a318:	4839      	ldr	r0, [pc, #228]	; (800a400 <__mdiff+0x110>)
 800a31a:	f001 ffed 	bl	800c2f8 <__assert_func>
 800a31e:	2301      	movs	r3, #1
 800a320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	bfa4      	itt	ge
 800a32a:	4643      	movge	r3, r8
 800a32c:	46a0      	movge	r8, r4
 800a32e:	4630      	mov	r0, r6
 800a330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a334:	bfa6      	itte	ge
 800a336:	461c      	movge	r4, r3
 800a338:	2500      	movge	r5, #0
 800a33a:	2501      	movlt	r5, #1
 800a33c:	f7ff fcf6 	bl	8009d2c <_Balloc>
 800a340:	b920      	cbnz	r0, 800a34c <__mdiff+0x5c>
 800a342:	4b2e      	ldr	r3, [pc, #184]	; (800a3fc <__mdiff+0x10c>)
 800a344:	4602      	mov	r2, r0
 800a346:	f240 2145 	movw	r1, #581	; 0x245
 800a34a:	e7e5      	b.n	800a318 <__mdiff+0x28>
 800a34c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a350:	6926      	ldr	r6, [r4, #16]
 800a352:	60c5      	str	r5, [r0, #12]
 800a354:	f104 0914 	add.w	r9, r4, #20
 800a358:	f108 0514 	add.w	r5, r8, #20
 800a35c:	f100 0e14 	add.w	lr, r0, #20
 800a360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a368:	f108 0210 	add.w	r2, r8, #16
 800a36c:	46f2      	mov	sl, lr
 800a36e:	2100      	movs	r1, #0
 800a370:	f859 3b04 	ldr.w	r3, [r9], #4
 800a374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a378:	fa11 f88b 	uxtah	r8, r1, fp
 800a37c:	b299      	uxth	r1, r3
 800a37e:	0c1b      	lsrs	r3, r3, #16
 800a380:	eba8 0801 	sub.w	r8, r8, r1
 800a384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a38c:	fa1f f888 	uxth.w	r8, r8
 800a390:	1419      	asrs	r1, r3, #16
 800a392:	454e      	cmp	r6, r9
 800a394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a398:	f84a 3b04 	str.w	r3, [sl], #4
 800a39c:	d8e8      	bhi.n	800a370 <__mdiff+0x80>
 800a39e:	1b33      	subs	r3, r6, r4
 800a3a0:	3b15      	subs	r3, #21
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	3415      	adds	r4, #21
 800a3aa:	42a6      	cmp	r6, r4
 800a3ac:	bf38      	it	cc
 800a3ae:	2304      	movcc	r3, #4
 800a3b0:	441d      	add	r5, r3
 800a3b2:	4473      	add	r3, lr
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	462e      	mov	r6, r5
 800a3b8:	4566      	cmp	r6, ip
 800a3ba:	d30e      	bcc.n	800a3da <__mdiff+0xea>
 800a3bc:	f10c 0203 	add.w	r2, ip, #3
 800a3c0:	1b52      	subs	r2, r2, r5
 800a3c2:	f022 0203 	bic.w	r2, r2, #3
 800a3c6:	3d03      	subs	r5, #3
 800a3c8:	45ac      	cmp	ip, r5
 800a3ca:	bf38      	it	cc
 800a3cc:	2200      	movcc	r2, #0
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a3d4:	b17a      	cbz	r2, 800a3f6 <__mdiff+0x106>
 800a3d6:	6107      	str	r7, [r0, #16]
 800a3d8:	e7a4      	b.n	800a324 <__mdiff+0x34>
 800a3da:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3de:	fa11 f288 	uxtah	r2, r1, r8
 800a3e2:	1414      	asrs	r4, r2, #16
 800a3e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3e8:	b292      	uxth	r2, r2
 800a3ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a3f2:	1421      	asrs	r1, r4, #16
 800a3f4:	e7e0      	b.n	800a3b8 <__mdiff+0xc8>
 800a3f6:	3f01      	subs	r7, #1
 800a3f8:	e7ea      	b.n	800a3d0 <__mdiff+0xe0>
 800a3fa:	bf00      	nop
 800a3fc:	0800d373 	.word	0x0800d373
 800a400:	0800d384 	.word	0x0800d384

0800a404 <__ulp>:
 800a404:	b082      	sub	sp, #8
 800a406:	ed8d 0b00 	vstr	d0, [sp]
 800a40a:	9a01      	ldr	r2, [sp, #4]
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <__ulp+0x48>)
 800a40e:	4013      	ands	r3, r2
 800a410:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a414:	2b00      	cmp	r3, #0
 800a416:	dc08      	bgt.n	800a42a <__ulp+0x26>
 800a418:	425b      	negs	r3, r3
 800a41a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a41e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a422:	da04      	bge.n	800a42e <__ulp+0x2a>
 800a424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a428:	4113      	asrs	r3, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	e008      	b.n	800a440 <__ulp+0x3c>
 800a42e:	f1a2 0314 	sub.w	r3, r2, #20
 800a432:	2b1e      	cmp	r3, #30
 800a434:	bfda      	itte	le
 800a436:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a43a:	40da      	lsrle	r2, r3
 800a43c:	2201      	movgt	r2, #1
 800a43e:	2300      	movs	r3, #0
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	ec41 0b10 	vmov	d0, r0, r1
 800a448:	b002      	add	sp, #8
 800a44a:	4770      	bx	lr
 800a44c:	7ff00000 	.word	0x7ff00000

0800a450 <__b2d>:
 800a450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a454:	6906      	ldr	r6, [r0, #16]
 800a456:	f100 0814 	add.w	r8, r0, #20
 800a45a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a45e:	1f37      	subs	r7, r6, #4
 800a460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a464:	4610      	mov	r0, r2
 800a466:	f7ff fd53 	bl	8009f10 <__hi0bits>
 800a46a:	f1c0 0320 	rsb	r3, r0, #32
 800a46e:	280a      	cmp	r0, #10
 800a470:	600b      	str	r3, [r1, #0]
 800a472:	491b      	ldr	r1, [pc, #108]	; (800a4e0 <__b2d+0x90>)
 800a474:	dc15      	bgt.n	800a4a2 <__b2d+0x52>
 800a476:	f1c0 0c0b 	rsb	ip, r0, #11
 800a47a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a47e:	45b8      	cmp	r8, r7
 800a480:	ea43 0501 	orr.w	r5, r3, r1
 800a484:	bf34      	ite	cc
 800a486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a48a:	2300      	movcs	r3, #0
 800a48c:	3015      	adds	r0, #21
 800a48e:	fa02 f000 	lsl.w	r0, r2, r0
 800a492:	fa23 f30c 	lsr.w	r3, r3, ip
 800a496:	4303      	orrs	r3, r0
 800a498:	461c      	mov	r4, r3
 800a49a:	ec45 4b10 	vmov	d0, r4, r5
 800a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a2:	45b8      	cmp	r8, r7
 800a4a4:	bf3a      	itte	cc
 800a4a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800a4ae:	2300      	movcs	r3, #0
 800a4b0:	380b      	subs	r0, #11
 800a4b2:	d012      	beq.n	800a4da <__b2d+0x8a>
 800a4b4:	f1c0 0120 	rsb	r1, r0, #32
 800a4b8:	fa23 f401 	lsr.w	r4, r3, r1
 800a4bc:	4082      	lsls	r2, r0
 800a4be:	4322      	orrs	r2, r4
 800a4c0:	4547      	cmp	r7, r8
 800a4c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a4c6:	bf8c      	ite	hi
 800a4c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4cc:	2200      	movls	r2, #0
 800a4ce:	4083      	lsls	r3, r0
 800a4d0:	40ca      	lsrs	r2, r1
 800a4d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	e7de      	b.n	800a498 <__b2d+0x48>
 800a4da:	ea42 0501 	orr.w	r5, r2, r1
 800a4de:	e7db      	b.n	800a498 <__b2d+0x48>
 800a4e0:	3ff00000 	.word	0x3ff00000

0800a4e4 <__d2b>:
 800a4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	ec59 8b10 	vmov	r8, r9, d0
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	f7ff fc1b 	bl	8009d2c <_Balloc>
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	b930      	cbnz	r0, 800a508 <__d2b+0x24>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	4b24      	ldr	r3, [pc, #144]	; (800a590 <__d2b+0xac>)
 800a4fe:	4825      	ldr	r0, [pc, #148]	; (800a594 <__d2b+0xb0>)
 800a500:	f240 310f 	movw	r1, #783	; 0x30f
 800a504:	f001 fef8 	bl	800c2f8 <__assert_func>
 800a508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a50c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a510:	bb2d      	cbnz	r5, 800a55e <__d2b+0x7a>
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	f1b8 0300 	subs.w	r3, r8, #0
 800a518:	d026      	beq.n	800a568 <__d2b+0x84>
 800a51a:	4668      	mov	r0, sp
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	f7ff fd17 	bl	8009f50 <__lo0bits>
 800a522:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a526:	b1e8      	cbz	r0, 800a564 <__d2b+0x80>
 800a528:	f1c0 0320 	rsb	r3, r0, #32
 800a52c:	fa02 f303 	lsl.w	r3, r2, r3
 800a530:	430b      	orrs	r3, r1
 800a532:	40c2      	lsrs	r2, r0
 800a534:	6163      	str	r3, [r4, #20]
 800a536:	9201      	str	r2, [sp, #4]
 800a538:	9b01      	ldr	r3, [sp, #4]
 800a53a:	61a3      	str	r3, [r4, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bf14      	ite	ne
 800a540:	2202      	movne	r2, #2
 800a542:	2201      	moveq	r2, #1
 800a544:	6122      	str	r2, [r4, #16]
 800a546:	b1bd      	cbz	r5, 800a578 <__d2b+0x94>
 800a548:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a54c:	4405      	add	r5, r0
 800a54e:	603d      	str	r5, [r7, #0]
 800a550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a554:	6030      	str	r0, [r6, #0]
 800a556:	4620      	mov	r0, r4
 800a558:	b003      	add	sp, #12
 800a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a55e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a562:	e7d6      	b.n	800a512 <__d2b+0x2e>
 800a564:	6161      	str	r1, [r4, #20]
 800a566:	e7e7      	b.n	800a538 <__d2b+0x54>
 800a568:	a801      	add	r0, sp, #4
 800a56a:	f7ff fcf1 	bl	8009f50 <__lo0bits>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	6163      	str	r3, [r4, #20]
 800a572:	3020      	adds	r0, #32
 800a574:	2201      	movs	r2, #1
 800a576:	e7e5      	b.n	800a544 <__d2b+0x60>
 800a578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a57c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a580:	6038      	str	r0, [r7, #0]
 800a582:	6918      	ldr	r0, [r3, #16]
 800a584:	f7ff fcc4 	bl	8009f10 <__hi0bits>
 800a588:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a58c:	e7e2      	b.n	800a554 <__d2b+0x70>
 800a58e:	bf00      	nop
 800a590:	0800d373 	.word	0x0800d373
 800a594:	0800d384 	.word	0x0800d384

0800a598 <__ratio>:
 800a598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	4688      	mov	r8, r1
 800a59e:	4669      	mov	r1, sp
 800a5a0:	4681      	mov	r9, r0
 800a5a2:	f7ff ff55 	bl	800a450 <__b2d>
 800a5a6:	a901      	add	r1, sp, #4
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	ec55 4b10 	vmov	r4, r5, d0
 800a5ae:	f7ff ff4f 	bl	800a450 <__b2d>
 800a5b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a5ba:	eba3 0c02 	sub.w	ip, r3, r2
 800a5be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a5c8:	ec51 0b10 	vmov	r0, r1, d0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bfd6      	itet	le
 800a5d0:	460a      	movle	r2, r1
 800a5d2:	462a      	movgt	r2, r5
 800a5d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5d8:	468b      	mov	fp, r1
 800a5da:	462f      	mov	r7, r5
 800a5dc:	bfd4      	ite	le
 800a5de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a5e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	ee10 2a10 	vmov	r2, s0
 800a5ec:	465b      	mov	r3, fp
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	f7f6 f92c 	bl	800084c <__aeabi_ddiv>
 800a5f4:	ec41 0b10 	vmov	d0, r0, r1
 800a5f8:	b003      	add	sp, #12
 800a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5fe <__copybits>:
 800a5fe:	3901      	subs	r1, #1
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	1149      	asrs	r1, r1, #5
 800a604:	6914      	ldr	r4, [r2, #16]
 800a606:	3101      	adds	r1, #1
 800a608:	f102 0314 	add.w	r3, r2, #20
 800a60c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a614:	1f05      	subs	r5, r0, #4
 800a616:	42a3      	cmp	r3, r4
 800a618:	d30c      	bcc.n	800a634 <__copybits+0x36>
 800a61a:	1aa3      	subs	r3, r4, r2
 800a61c:	3b11      	subs	r3, #17
 800a61e:	f023 0303 	bic.w	r3, r3, #3
 800a622:	3211      	adds	r2, #17
 800a624:	42a2      	cmp	r2, r4
 800a626:	bf88      	it	hi
 800a628:	2300      	movhi	r3, #0
 800a62a:	4418      	add	r0, r3
 800a62c:	2300      	movs	r3, #0
 800a62e:	4288      	cmp	r0, r1
 800a630:	d305      	bcc.n	800a63e <__copybits+0x40>
 800a632:	bd70      	pop	{r4, r5, r6, pc}
 800a634:	f853 6b04 	ldr.w	r6, [r3], #4
 800a638:	f845 6f04 	str.w	r6, [r5, #4]!
 800a63c:	e7eb      	b.n	800a616 <__copybits+0x18>
 800a63e:	f840 3b04 	str.w	r3, [r0], #4
 800a642:	e7f4      	b.n	800a62e <__copybits+0x30>

0800a644 <__any_on>:
 800a644:	f100 0214 	add.w	r2, r0, #20
 800a648:	6900      	ldr	r0, [r0, #16]
 800a64a:	114b      	asrs	r3, r1, #5
 800a64c:	4298      	cmp	r0, r3
 800a64e:	b510      	push	{r4, lr}
 800a650:	db11      	blt.n	800a676 <__any_on+0x32>
 800a652:	dd0a      	ble.n	800a66a <__any_on+0x26>
 800a654:	f011 011f 	ands.w	r1, r1, #31
 800a658:	d007      	beq.n	800a66a <__any_on+0x26>
 800a65a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a65e:	fa24 f001 	lsr.w	r0, r4, r1
 800a662:	fa00 f101 	lsl.w	r1, r0, r1
 800a666:	428c      	cmp	r4, r1
 800a668:	d10b      	bne.n	800a682 <__any_on+0x3e>
 800a66a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a66e:	4293      	cmp	r3, r2
 800a670:	d803      	bhi.n	800a67a <__any_on+0x36>
 800a672:	2000      	movs	r0, #0
 800a674:	bd10      	pop	{r4, pc}
 800a676:	4603      	mov	r3, r0
 800a678:	e7f7      	b.n	800a66a <__any_on+0x26>
 800a67a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a67e:	2900      	cmp	r1, #0
 800a680:	d0f5      	beq.n	800a66e <__any_on+0x2a>
 800a682:	2001      	movs	r0, #1
 800a684:	e7f6      	b.n	800a674 <__any_on+0x30>

0800a686 <sulp>:
 800a686:	b570      	push	{r4, r5, r6, lr}
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	ec45 4b10 	vmov	d0, r4, r5
 800a690:	4616      	mov	r6, r2
 800a692:	f7ff feb7 	bl	800a404 <__ulp>
 800a696:	ec51 0b10 	vmov	r0, r1, d0
 800a69a:	b17e      	cbz	r6, 800a6bc <sulp+0x36>
 800a69c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a6a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd09      	ble.n	800a6bc <sulp+0x36>
 800a6a8:	051b      	lsls	r3, r3, #20
 800a6aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a6ae:	2400      	movs	r4, #0
 800a6b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	462b      	mov	r3, r5
 800a6b8:	f7f5 ff9e 	bl	80005f8 <__aeabi_dmul>
 800a6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6c0 <_strtod_l>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	ed2d 8b02 	vpush	{d8}
 800a6c8:	b09b      	sub	sp, #108	; 0x6c
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	9213      	str	r2, [sp, #76]	; 0x4c
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	9216      	str	r2, [sp, #88]	; 0x58
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	f04f 0800 	mov.w	r8, #0
 800a6d8:	f04f 0900 	mov.w	r9, #0
 800a6dc:	460a      	mov	r2, r1
 800a6de:	9215      	str	r2, [sp, #84]	; 0x54
 800a6e0:	7811      	ldrb	r1, [r2, #0]
 800a6e2:	292b      	cmp	r1, #43	; 0x2b
 800a6e4:	d04c      	beq.n	800a780 <_strtod_l+0xc0>
 800a6e6:	d83a      	bhi.n	800a75e <_strtod_l+0x9e>
 800a6e8:	290d      	cmp	r1, #13
 800a6ea:	d834      	bhi.n	800a756 <_strtod_l+0x96>
 800a6ec:	2908      	cmp	r1, #8
 800a6ee:	d834      	bhi.n	800a75a <_strtod_l+0x9a>
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	d03d      	beq.n	800a770 <_strtod_l+0xb0>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a6f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a6fa:	7832      	ldrb	r2, [r6, #0]
 800a6fc:	2a30      	cmp	r2, #48	; 0x30
 800a6fe:	f040 80b4 	bne.w	800a86a <_strtod_l+0x1aa>
 800a702:	7872      	ldrb	r2, [r6, #1]
 800a704:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a708:	2a58      	cmp	r2, #88	; 0x58
 800a70a:	d170      	bne.n	800a7ee <_strtod_l+0x12e>
 800a70c:	9302      	str	r3, [sp, #8]
 800a70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	ab16      	add	r3, sp, #88	; 0x58
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	4a8e      	ldr	r2, [pc, #568]	; (800a950 <_strtod_l+0x290>)
 800a718:	ab17      	add	r3, sp, #92	; 0x5c
 800a71a:	a915      	add	r1, sp, #84	; 0x54
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 fe87 	bl	800c430 <__gethex>
 800a722:	f010 070f 	ands.w	r7, r0, #15
 800a726:	4605      	mov	r5, r0
 800a728:	d005      	beq.n	800a736 <_strtod_l+0x76>
 800a72a:	2f06      	cmp	r7, #6
 800a72c:	d12a      	bne.n	800a784 <_strtod_l+0xc4>
 800a72e:	3601      	adds	r6, #1
 800a730:	2300      	movs	r3, #0
 800a732:	9615      	str	r6, [sp, #84]	; 0x54
 800a734:	930a      	str	r3, [sp, #40]	; 0x28
 800a736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f040 857f 	bne.w	800b23c <_strtod_l+0xb7c>
 800a73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a740:	b1db      	cbz	r3, 800a77a <_strtod_l+0xba>
 800a742:	4642      	mov	r2, r8
 800a744:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a748:	ec43 2b10 	vmov	d0, r2, r3
 800a74c:	b01b      	add	sp, #108	; 0x6c
 800a74e:	ecbd 8b02 	vpop	{d8}
 800a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a756:	2920      	cmp	r1, #32
 800a758:	d1cc      	bne.n	800a6f4 <_strtod_l+0x34>
 800a75a:	3201      	adds	r2, #1
 800a75c:	e7bf      	b.n	800a6de <_strtod_l+0x1e>
 800a75e:	292d      	cmp	r1, #45	; 0x2d
 800a760:	d1c8      	bne.n	800a6f4 <_strtod_l+0x34>
 800a762:	2101      	movs	r1, #1
 800a764:	910a      	str	r1, [sp, #40]	; 0x28
 800a766:	1c51      	adds	r1, r2, #1
 800a768:	9115      	str	r1, [sp, #84]	; 0x54
 800a76a:	7852      	ldrb	r2, [r2, #1]
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	d1c3      	bne.n	800a6f8 <_strtod_l+0x38>
 800a770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a772:	9515      	str	r5, [sp, #84]	; 0x54
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 855f 	bne.w	800b238 <_strtod_l+0xb78>
 800a77a:	4642      	mov	r2, r8
 800a77c:	464b      	mov	r3, r9
 800a77e:	e7e3      	b.n	800a748 <_strtod_l+0x88>
 800a780:	2100      	movs	r1, #0
 800a782:	e7ef      	b.n	800a764 <_strtod_l+0xa4>
 800a784:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a786:	b13a      	cbz	r2, 800a798 <_strtod_l+0xd8>
 800a788:	2135      	movs	r1, #53	; 0x35
 800a78a:	a818      	add	r0, sp, #96	; 0x60
 800a78c:	f7ff ff37 	bl	800a5fe <__copybits>
 800a790:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a792:	4620      	mov	r0, r4
 800a794:	f7ff fb0a 	bl	8009dac <_Bfree>
 800a798:	3f01      	subs	r7, #1
 800a79a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a79c:	2f04      	cmp	r7, #4
 800a79e:	d806      	bhi.n	800a7ae <_strtod_l+0xee>
 800a7a0:	e8df f007 	tbb	[pc, r7]
 800a7a4:	201d0314 	.word	0x201d0314
 800a7a8:	14          	.byte	0x14
 800a7a9:	00          	.byte	0x00
 800a7aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a7ae:	05e9      	lsls	r1, r5, #23
 800a7b0:	bf48      	it	mi
 800a7b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a7b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7ba:	0d1b      	lsrs	r3, r3, #20
 800a7bc:	051b      	lsls	r3, r3, #20
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1b9      	bne.n	800a736 <_strtod_l+0x76>
 800a7c2:	f7fe fb05 	bl	8008dd0 <__errno>
 800a7c6:	2322      	movs	r3, #34	; 0x22
 800a7c8:	6003      	str	r3, [r0, #0]
 800a7ca:	e7b4      	b.n	800a736 <_strtod_l+0x76>
 800a7cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a7d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a7d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a7d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a7dc:	e7e7      	b.n	800a7ae <_strtod_l+0xee>
 800a7de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a958 <_strtod_l+0x298>
 800a7e2:	e7e4      	b.n	800a7ae <_strtod_l+0xee>
 800a7e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a7e8:	f04f 38ff 	mov.w	r8, #4294967295
 800a7ec:	e7df      	b.n	800a7ae <_strtod_l+0xee>
 800a7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	9215      	str	r2, [sp, #84]	; 0x54
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b30      	cmp	r3, #48	; 0x30
 800a7f8:	d0f9      	beq.n	800a7ee <_strtod_l+0x12e>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d09b      	beq.n	800a736 <_strtod_l+0x76>
 800a7fe:	2301      	movs	r3, #1
 800a800:	f04f 0a00 	mov.w	sl, #0
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a808:	930b      	str	r3, [sp, #44]	; 0x2c
 800a80a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a80e:	46d3      	mov	fp, sl
 800a810:	220a      	movs	r2, #10
 800a812:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a814:	7806      	ldrb	r6, [r0, #0]
 800a816:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a81a:	b2d9      	uxtb	r1, r3
 800a81c:	2909      	cmp	r1, #9
 800a81e:	d926      	bls.n	800a86e <_strtod_l+0x1ae>
 800a820:	494c      	ldr	r1, [pc, #304]	; (800a954 <_strtod_l+0x294>)
 800a822:	2201      	movs	r2, #1
 800a824:	f7fe fa62 	bl	8008cec <strncmp>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d030      	beq.n	800a88e <_strtod_l+0x1ce>
 800a82c:	2000      	movs	r0, #0
 800a82e:	4632      	mov	r2, r6
 800a830:	9005      	str	r0, [sp, #20]
 800a832:	465e      	mov	r6, fp
 800a834:	4603      	mov	r3, r0
 800a836:	2a65      	cmp	r2, #101	; 0x65
 800a838:	d001      	beq.n	800a83e <_strtod_l+0x17e>
 800a83a:	2a45      	cmp	r2, #69	; 0x45
 800a83c:	d113      	bne.n	800a866 <_strtod_l+0x1a6>
 800a83e:	b91e      	cbnz	r6, 800a848 <_strtod_l+0x188>
 800a840:	9a04      	ldr	r2, [sp, #16]
 800a842:	4302      	orrs	r2, r0
 800a844:	d094      	beq.n	800a770 <_strtod_l+0xb0>
 800a846:	2600      	movs	r6, #0
 800a848:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a84a:	1c6a      	adds	r2, r5, #1
 800a84c:	9215      	str	r2, [sp, #84]	; 0x54
 800a84e:	786a      	ldrb	r2, [r5, #1]
 800a850:	2a2b      	cmp	r2, #43	; 0x2b
 800a852:	d074      	beq.n	800a93e <_strtod_l+0x27e>
 800a854:	2a2d      	cmp	r2, #45	; 0x2d
 800a856:	d078      	beq.n	800a94a <_strtod_l+0x28a>
 800a858:	f04f 0c00 	mov.w	ip, #0
 800a85c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a860:	2909      	cmp	r1, #9
 800a862:	d97f      	bls.n	800a964 <_strtod_l+0x2a4>
 800a864:	9515      	str	r5, [sp, #84]	; 0x54
 800a866:	2700      	movs	r7, #0
 800a868:	e09e      	b.n	800a9a8 <_strtod_l+0x2e8>
 800a86a:	2300      	movs	r3, #0
 800a86c:	e7c8      	b.n	800a800 <_strtod_l+0x140>
 800a86e:	f1bb 0f08 	cmp.w	fp, #8
 800a872:	bfd8      	it	le
 800a874:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a876:	f100 0001 	add.w	r0, r0, #1
 800a87a:	bfda      	itte	le
 800a87c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a880:	9309      	strle	r3, [sp, #36]	; 0x24
 800a882:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a886:	f10b 0b01 	add.w	fp, fp, #1
 800a88a:	9015      	str	r0, [sp, #84]	; 0x54
 800a88c:	e7c1      	b.n	800a812 <_strtod_l+0x152>
 800a88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	9215      	str	r2, [sp, #84]	; 0x54
 800a894:	785a      	ldrb	r2, [r3, #1]
 800a896:	f1bb 0f00 	cmp.w	fp, #0
 800a89a:	d037      	beq.n	800a90c <_strtod_l+0x24c>
 800a89c:	9005      	str	r0, [sp, #20]
 800a89e:	465e      	mov	r6, fp
 800a8a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a8a4:	2b09      	cmp	r3, #9
 800a8a6:	d912      	bls.n	800a8ce <_strtod_l+0x20e>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e7c4      	b.n	800a836 <_strtod_l+0x176>
 800a8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	9215      	str	r2, [sp, #84]	; 0x54
 800a8b2:	785a      	ldrb	r2, [r3, #1]
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	2a30      	cmp	r2, #48	; 0x30
 800a8b8:	d0f8      	beq.n	800a8ac <_strtod_l+0x1ec>
 800a8ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	f200 84c1 	bhi.w	800b246 <_strtod_l+0xb86>
 800a8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8c6:	9005      	str	r0, [sp, #20]
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	3a30      	subs	r2, #48	; 0x30
 800a8d0:	f100 0301 	add.w	r3, r0, #1
 800a8d4:	d014      	beq.n	800a900 <_strtod_l+0x240>
 800a8d6:	9905      	ldr	r1, [sp, #20]
 800a8d8:	4419      	add	r1, r3
 800a8da:	9105      	str	r1, [sp, #20]
 800a8dc:	4633      	mov	r3, r6
 800a8de:	eb00 0c06 	add.w	ip, r0, r6
 800a8e2:	210a      	movs	r1, #10
 800a8e4:	4563      	cmp	r3, ip
 800a8e6:	d113      	bne.n	800a910 <_strtod_l+0x250>
 800a8e8:	1833      	adds	r3, r6, r0
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	f106 0601 	add.w	r6, r6, #1
 800a8f0:	4406      	add	r6, r0
 800a8f2:	dc1a      	bgt.n	800a92a <_strtod_l+0x26a>
 800a8f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	fb03 2301 	mla	r3, r3, r1, r2
 800a8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fe:	2300      	movs	r3, #0
 800a900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a902:	1c51      	adds	r1, r2, #1
 800a904:	9115      	str	r1, [sp, #84]	; 0x54
 800a906:	7852      	ldrb	r2, [r2, #1]
 800a908:	4618      	mov	r0, r3
 800a90a:	e7c9      	b.n	800a8a0 <_strtod_l+0x1e0>
 800a90c:	4658      	mov	r0, fp
 800a90e:	e7d2      	b.n	800a8b6 <_strtod_l+0x1f6>
 800a910:	2b08      	cmp	r3, #8
 800a912:	f103 0301 	add.w	r3, r3, #1
 800a916:	dc03      	bgt.n	800a920 <_strtod_l+0x260>
 800a918:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a91a:	434f      	muls	r7, r1
 800a91c:	9709      	str	r7, [sp, #36]	; 0x24
 800a91e:	e7e1      	b.n	800a8e4 <_strtod_l+0x224>
 800a920:	2b10      	cmp	r3, #16
 800a922:	bfd8      	it	le
 800a924:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a928:	e7dc      	b.n	800a8e4 <_strtod_l+0x224>
 800a92a:	2e10      	cmp	r6, #16
 800a92c:	bfdc      	itt	le
 800a92e:	230a      	movle	r3, #10
 800a930:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a934:	e7e3      	b.n	800a8fe <_strtod_l+0x23e>
 800a936:	2300      	movs	r3, #0
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	2301      	movs	r3, #1
 800a93c:	e780      	b.n	800a840 <_strtod_l+0x180>
 800a93e:	f04f 0c00 	mov.w	ip, #0
 800a942:	1caa      	adds	r2, r5, #2
 800a944:	9215      	str	r2, [sp, #84]	; 0x54
 800a946:	78aa      	ldrb	r2, [r5, #2]
 800a948:	e788      	b.n	800a85c <_strtod_l+0x19c>
 800a94a:	f04f 0c01 	mov.w	ip, #1
 800a94e:	e7f8      	b.n	800a942 <_strtod_l+0x282>
 800a950:	0800d4e0 	.word	0x0800d4e0
 800a954:	0800d4dc 	.word	0x0800d4dc
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a95e:	1c51      	adds	r1, r2, #1
 800a960:	9115      	str	r1, [sp, #84]	; 0x54
 800a962:	7852      	ldrb	r2, [r2, #1]
 800a964:	2a30      	cmp	r2, #48	; 0x30
 800a966:	d0f9      	beq.n	800a95c <_strtod_l+0x29c>
 800a968:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a96c:	2908      	cmp	r1, #8
 800a96e:	f63f af7a 	bhi.w	800a866 <_strtod_l+0x1a6>
 800a972:	3a30      	subs	r2, #48	; 0x30
 800a974:	9208      	str	r2, [sp, #32]
 800a976:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a978:	920c      	str	r2, [sp, #48]	; 0x30
 800a97a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a97c:	1c57      	adds	r7, r2, #1
 800a97e:	9715      	str	r7, [sp, #84]	; 0x54
 800a980:	7852      	ldrb	r2, [r2, #1]
 800a982:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a986:	f1be 0f09 	cmp.w	lr, #9
 800a98a:	d938      	bls.n	800a9fe <_strtod_l+0x33e>
 800a98c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a98e:	1a7f      	subs	r7, r7, r1
 800a990:	2f08      	cmp	r7, #8
 800a992:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a996:	dc03      	bgt.n	800a9a0 <_strtod_l+0x2e0>
 800a998:	9908      	ldr	r1, [sp, #32]
 800a99a:	428f      	cmp	r7, r1
 800a99c:	bfa8      	it	ge
 800a99e:	460f      	movge	r7, r1
 800a9a0:	f1bc 0f00 	cmp.w	ip, #0
 800a9a4:	d000      	beq.n	800a9a8 <_strtod_l+0x2e8>
 800a9a6:	427f      	negs	r7, r7
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	d14f      	bne.n	800aa4c <_strtod_l+0x38c>
 800a9ac:	9904      	ldr	r1, [sp, #16]
 800a9ae:	4301      	orrs	r1, r0
 800a9b0:	f47f aec1 	bne.w	800a736 <_strtod_l+0x76>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f47f aedb 	bne.w	800a770 <_strtod_l+0xb0>
 800a9ba:	2a69      	cmp	r2, #105	; 0x69
 800a9bc:	d029      	beq.n	800aa12 <_strtod_l+0x352>
 800a9be:	dc26      	bgt.n	800aa0e <_strtod_l+0x34e>
 800a9c0:	2a49      	cmp	r2, #73	; 0x49
 800a9c2:	d026      	beq.n	800aa12 <_strtod_l+0x352>
 800a9c4:	2a4e      	cmp	r2, #78	; 0x4e
 800a9c6:	f47f aed3 	bne.w	800a770 <_strtod_l+0xb0>
 800a9ca:	499b      	ldr	r1, [pc, #620]	; (800ac38 <_strtod_l+0x578>)
 800a9cc:	a815      	add	r0, sp, #84	; 0x54
 800a9ce:	f001 ff6f 	bl	800c8b0 <__match>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f43f aecc 	beq.w	800a770 <_strtod_l+0xb0>
 800a9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b28      	cmp	r3, #40	; 0x28
 800a9de:	d12f      	bne.n	800aa40 <_strtod_l+0x380>
 800a9e0:	4996      	ldr	r1, [pc, #600]	; (800ac3c <_strtod_l+0x57c>)
 800a9e2:	aa18      	add	r2, sp, #96	; 0x60
 800a9e4:	a815      	add	r0, sp, #84	; 0x54
 800a9e6:	f001 ff77 	bl	800c8d8 <__hexnan>
 800a9ea:	2805      	cmp	r0, #5
 800a9ec:	d128      	bne.n	800aa40 <_strtod_l+0x380>
 800a9ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a9f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a9fc:	e69b      	b.n	800a736 <_strtod_l+0x76>
 800a9fe:	9f08      	ldr	r7, [sp, #32]
 800aa00:	210a      	movs	r1, #10
 800aa02:	fb01 2107 	mla	r1, r1, r7, r2
 800aa06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aa0a:	9208      	str	r2, [sp, #32]
 800aa0c:	e7b5      	b.n	800a97a <_strtod_l+0x2ba>
 800aa0e:	2a6e      	cmp	r2, #110	; 0x6e
 800aa10:	e7d9      	b.n	800a9c6 <_strtod_l+0x306>
 800aa12:	498b      	ldr	r1, [pc, #556]	; (800ac40 <_strtod_l+0x580>)
 800aa14:	a815      	add	r0, sp, #84	; 0x54
 800aa16:	f001 ff4b 	bl	800c8b0 <__match>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f43f aea8 	beq.w	800a770 <_strtod_l+0xb0>
 800aa20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa22:	4988      	ldr	r1, [pc, #544]	; (800ac44 <_strtod_l+0x584>)
 800aa24:	3b01      	subs	r3, #1
 800aa26:	a815      	add	r0, sp, #84	; 0x54
 800aa28:	9315      	str	r3, [sp, #84]	; 0x54
 800aa2a:	f001 ff41 	bl	800c8b0 <__match>
 800aa2e:	b910      	cbnz	r0, 800aa36 <_strtod_l+0x376>
 800aa30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa32:	3301      	adds	r3, #1
 800aa34:	9315      	str	r3, [sp, #84]	; 0x54
 800aa36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ac54 <_strtod_l+0x594>
 800aa3a:	f04f 0800 	mov.w	r8, #0
 800aa3e:	e67a      	b.n	800a736 <_strtod_l+0x76>
 800aa40:	4881      	ldr	r0, [pc, #516]	; (800ac48 <_strtod_l+0x588>)
 800aa42:	f001 fc51 	bl	800c2e8 <nan>
 800aa46:	ec59 8b10 	vmov	r8, r9, d0
 800aa4a:	e674      	b.n	800a736 <_strtod_l+0x76>
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa50:	1afb      	subs	r3, r7, r3
 800aa52:	f1bb 0f00 	cmp.w	fp, #0
 800aa56:	bf08      	it	eq
 800aa58:	46b3      	moveq	fp, r6
 800aa5a:	2e10      	cmp	r6, #16
 800aa5c:	9308      	str	r3, [sp, #32]
 800aa5e:	4635      	mov	r5, r6
 800aa60:	bfa8      	it	ge
 800aa62:	2510      	movge	r5, #16
 800aa64:	f7f5 fd4e 	bl	8000504 <__aeabi_ui2d>
 800aa68:	2e09      	cmp	r6, #9
 800aa6a:	4680      	mov	r8, r0
 800aa6c:	4689      	mov	r9, r1
 800aa6e:	dd13      	ble.n	800aa98 <_strtod_l+0x3d8>
 800aa70:	4b76      	ldr	r3, [pc, #472]	; (800ac4c <_strtod_l+0x58c>)
 800aa72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	4680      	mov	r8, r0
 800aa80:	4650      	mov	r0, sl
 800aa82:	4689      	mov	r9, r1
 800aa84:	f7f5 fd3e 	bl	8000504 <__aeabi_ui2d>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	4649      	mov	r1, r9
 800aa90:	f7f5 fbfc 	bl	800028c <__adddf3>
 800aa94:	4680      	mov	r8, r0
 800aa96:	4689      	mov	r9, r1
 800aa98:	2e0f      	cmp	r6, #15
 800aa9a:	dc38      	bgt.n	800ab0e <_strtod_l+0x44e>
 800aa9c:	9b08      	ldr	r3, [sp, #32]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f43f ae49 	beq.w	800a736 <_strtod_l+0x76>
 800aaa4:	dd24      	ble.n	800aaf0 <_strtod_l+0x430>
 800aaa6:	2b16      	cmp	r3, #22
 800aaa8:	dc0b      	bgt.n	800aac2 <_strtod_l+0x402>
 800aaaa:	4968      	ldr	r1, [pc, #416]	; (800ac4c <_strtod_l+0x58c>)
 800aaac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	4680      	mov	r8, r0
 800aabe:	4689      	mov	r9, r1
 800aac0:	e639      	b.n	800a736 <_strtod_l+0x76>
 800aac2:	9a08      	ldr	r2, [sp, #32]
 800aac4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aac8:	4293      	cmp	r3, r2
 800aaca:	db20      	blt.n	800ab0e <_strtod_l+0x44e>
 800aacc:	4c5f      	ldr	r4, [pc, #380]	; (800ac4c <_strtod_l+0x58c>)
 800aace:	f1c6 060f 	rsb	r6, r6, #15
 800aad2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aad6:	4642      	mov	r2, r8
 800aad8:	464b      	mov	r3, r9
 800aada:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aade:	f7f5 fd8b 	bl	80005f8 <__aeabi_dmul>
 800aae2:	9b08      	ldr	r3, [sp, #32]
 800aae4:	1b9e      	subs	r6, r3, r6
 800aae6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aaea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aaee:	e7e3      	b.n	800aab8 <_strtod_l+0x3f8>
 800aaf0:	9b08      	ldr	r3, [sp, #32]
 800aaf2:	3316      	adds	r3, #22
 800aaf4:	db0b      	blt.n	800ab0e <_strtod_l+0x44e>
 800aaf6:	9b05      	ldr	r3, [sp, #20]
 800aaf8:	1bdf      	subs	r7, r3, r7
 800aafa:	4b54      	ldr	r3, [pc, #336]	; (800ac4c <_strtod_l+0x58c>)
 800aafc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ab00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab04:	4640      	mov	r0, r8
 800ab06:	4649      	mov	r1, r9
 800ab08:	f7f5 fea0 	bl	800084c <__aeabi_ddiv>
 800ab0c:	e7d6      	b.n	800aabc <_strtod_l+0x3fc>
 800ab0e:	9b08      	ldr	r3, [sp, #32]
 800ab10:	1b75      	subs	r5, r6, r5
 800ab12:	441d      	add	r5, r3
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	dd70      	ble.n	800abfa <_strtod_l+0x53a>
 800ab18:	f015 030f 	ands.w	r3, r5, #15
 800ab1c:	d00a      	beq.n	800ab34 <_strtod_l+0x474>
 800ab1e:	494b      	ldr	r1, [pc, #300]	; (800ac4c <_strtod_l+0x58c>)
 800ab20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab24:	4642      	mov	r2, r8
 800ab26:	464b      	mov	r3, r9
 800ab28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab2c:	f7f5 fd64 	bl	80005f8 <__aeabi_dmul>
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	f035 050f 	bics.w	r5, r5, #15
 800ab38:	d04d      	beq.n	800abd6 <_strtod_l+0x516>
 800ab3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ab3e:	dd22      	ble.n	800ab86 <_strtod_l+0x4c6>
 800ab40:	2500      	movs	r5, #0
 800ab42:	46ab      	mov	fp, r5
 800ab44:	9509      	str	r5, [sp, #36]	; 0x24
 800ab46:	9505      	str	r5, [sp, #20]
 800ab48:	2322      	movs	r3, #34	; 0x22
 800ab4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ac54 <_strtod_l+0x594>
 800ab4e:	6023      	str	r3, [r4, #0]
 800ab50:	f04f 0800 	mov.w	r8, #0
 800ab54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f43f aded 	beq.w	800a736 <_strtod_l+0x76>
 800ab5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7ff f924 	bl	8009dac <_Bfree>
 800ab64:	9905      	ldr	r1, [sp, #20]
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff f920 	bl	8009dac <_Bfree>
 800ab6c:	4659      	mov	r1, fp
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff f91c 	bl	8009dac <_Bfree>
 800ab74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff f918 	bl	8009dac <_Bfree>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7ff f914 	bl	8009dac <_Bfree>
 800ab84:	e5d7      	b.n	800a736 <_strtod_l+0x76>
 800ab86:	4b32      	ldr	r3, [pc, #200]	; (800ac50 <_strtod_l+0x590>)
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	112d      	asrs	r5, r5, #4
 800ab8e:	4640      	mov	r0, r8
 800ab90:	4649      	mov	r1, r9
 800ab92:	469a      	mov	sl, r3
 800ab94:	2d01      	cmp	r5, #1
 800ab96:	dc21      	bgt.n	800abdc <_strtod_l+0x51c>
 800ab98:	b10b      	cbz	r3, 800ab9e <_strtod_l+0x4de>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	4689      	mov	r9, r1
 800ab9e:	492c      	ldr	r1, [pc, #176]	; (800ac50 <_strtod_l+0x590>)
 800aba0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aba4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aba8:	4642      	mov	r2, r8
 800abaa:	464b      	mov	r3, r9
 800abac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb0:	f7f5 fd22 	bl	80005f8 <__aeabi_dmul>
 800abb4:	4b27      	ldr	r3, [pc, #156]	; (800ac54 <_strtod_l+0x594>)
 800abb6:	460a      	mov	r2, r1
 800abb8:	400b      	ands	r3, r1
 800abba:	4927      	ldr	r1, [pc, #156]	; (800ac58 <_strtod_l+0x598>)
 800abbc:	428b      	cmp	r3, r1
 800abbe:	4680      	mov	r8, r0
 800abc0:	d8be      	bhi.n	800ab40 <_strtod_l+0x480>
 800abc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800abc6:	428b      	cmp	r3, r1
 800abc8:	bf86      	itte	hi
 800abca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ac5c <_strtod_l+0x59c>
 800abce:	f04f 38ff 	movhi.w	r8, #4294967295
 800abd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800abd6:	2300      	movs	r3, #0
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	e07b      	b.n	800acd4 <_strtod_l+0x614>
 800abdc:	07ea      	lsls	r2, r5, #31
 800abde:	d505      	bpl.n	800abec <_strtod_l+0x52c>
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 fd07 	bl	80005f8 <__aeabi_dmul>
 800abea:	2301      	movs	r3, #1
 800abec:	9a04      	ldr	r2, [sp, #16]
 800abee:	3208      	adds	r2, #8
 800abf0:	f10a 0a01 	add.w	sl, sl, #1
 800abf4:	106d      	asrs	r5, r5, #1
 800abf6:	9204      	str	r2, [sp, #16]
 800abf8:	e7cc      	b.n	800ab94 <_strtod_l+0x4d4>
 800abfa:	d0ec      	beq.n	800abd6 <_strtod_l+0x516>
 800abfc:	426d      	negs	r5, r5
 800abfe:	f015 020f 	ands.w	r2, r5, #15
 800ac02:	d00a      	beq.n	800ac1a <_strtod_l+0x55a>
 800ac04:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <_strtod_l+0x58c>)
 800ac06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f7f5 fe1b 	bl	800084c <__aeabi_ddiv>
 800ac16:	4680      	mov	r8, r0
 800ac18:	4689      	mov	r9, r1
 800ac1a:	112d      	asrs	r5, r5, #4
 800ac1c:	d0db      	beq.n	800abd6 <_strtod_l+0x516>
 800ac1e:	2d1f      	cmp	r5, #31
 800ac20:	dd1e      	ble.n	800ac60 <_strtod_l+0x5a0>
 800ac22:	2500      	movs	r5, #0
 800ac24:	46ab      	mov	fp, r5
 800ac26:	9509      	str	r5, [sp, #36]	; 0x24
 800ac28:	9505      	str	r5, [sp, #20]
 800ac2a:	2322      	movs	r3, #34	; 0x22
 800ac2c:	f04f 0800 	mov.w	r8, #0
 800ac30:	f04f 0900 	mov.w	r9, #0
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	e78d      	b.n	800ab54 <_strtod_l+0x494>
 800ac38:	0800d2cd 	.word	0x0800d2cd
 800ac3c:	0800d4f4 	.word	0x0800d4f4
 800ac40:	0800d2c5 	.word	0x0800d2c5
 800ac44:	0800d2fa 	.word	0x0800d2fa
 800ac48:	0800d6a0 	.word	0x0800d6a0
 800ac4c:	0800d408 	.word	0x0800d408
 800ac50:	0800d3e0 	.word	0x0800d3e0
 800ac54:	7ff00000 	.word	0x7ff00000
 800ac58:	7ca00000 	.word	0x7ca00000
 800ac5c:	7fefffff 	.word	0x7fefffff
 800ac60:	f015 0310 	ands.w	r3, r5, #16
 800ac64:	bf18      	it	ne
 800ac66:	236a      	movne	r3, #106	; 0x6a
 800ac68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b00c <_strtod_l+0x94c>
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	2300      	movs	r3, #0
 800ac74:	07ea      	lsls	r2, r5, #31
 800ac76:	d504      	bpl.n	800ac82 <_strtod_l+0x5c2>
 800ac78:	e9da 2300 	ldrd	r2, r3, [sl]
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	2301      	movs	r3, #1
 800ac82:	106d      	asrs	r5, r5, #1
 800ac84:	f10a 0a08 	add.w	sl, sl, #8
 800ac88:	d1f4      	bne.n	800ac74 <_strtod_l+0x5b4>
 800ac8a:	b10b      	cbz	r3, 800ac90 <_strtod_l+0x5d0>
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	4689      	mov	r9, r1
 800ac90:	9b04      	ldr	r3, [sp, #16]
 800ac92:	b1bb      	cbz	r3, 800acc4 <_strtod_l+0x604>
 800ac94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ac98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	4649      	mov	r1, r9
 800aca0:	dd10      	ble.n	800acc4 <_strtod_l+0x604>
 800aca2:	2b1f      	cmp	r3, #31
 800aca4:	f340 811e 	ble.w	800aee4 <_strtod_l+0x824>
 800aca8:	2b34      	cmp	r3, #52	; 0x34
 800acaa:	bfde      	ittt	le
 800acac:	f04f 33ff 	movle.w	r3, #4294967295
 800acb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800acb4:	4093      	lslle	r3, r2
 800acb6:	f04f 0800 	mov.w	r8, #0
 800acba:	bfcc      	ite	gt
 800acbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800acc0:	ea03 0901 	andle.w	r9, r3, r1
 800acc4:	2200      	movs	r2, #0
 800acc6:	2300      	movs	r3, #0
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1a6      	bne.n	800ac22 <_strtod_l+0x562>
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acda:	4633      	mov	r3, r6
 800acdc:	465a      	mov	r2, fp
 800acde:	4620      	mov	r0, r4
 800ace0:	f7ff f8cc 	bl	8009e7c <__s2b>
 800ace4:	9009      	str	r0, [sp, #36]	; 0x24
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f af2a 	beq.w	800ab40 <_strtod_l+0x480>
 800acec:	9a08      	ldr	r2, [sp, #32]
 800acee:	9b05      	ldr	r3, [sp, #20]
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	eba3 0307 	sub.w	r3, r3, r7
 800acf6:	bfa8      	it	ge
 800acf8:	2300      	movge	r3, #0
 800acfa:	930c      	str	r3, [sp, #48]	; 0x30
 800acfc:	2500      	movs	r5, #0
 800acfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ad02:	9312      	str	r3, [sp, #72]	; 0x48
 800ad04:	46ab      	mov	fp, r5
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	4620      	mov	r0, r4
 800ad0a:	6859      	ldr	r1, [r3, #4]
 800ad0c:	f7ff f80e 	bl	8009d2c <_Balloc>
 800ad10:	9005      	str	r0, [sp, #20]
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f43f af18 	beq.w	800ab48 <_strtod_l+0x488>
 800ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1a:	691a      	ldr	r2, [r3, #16]
 800ad1c:	3202      	adds	r2, #2
 800ad1e:	f103 010c 	add.w	r1, r3, #12
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	300c      	adds	r0, #12
 800ad26:	f001 fad1 	bl	800c2cc <memcpy>
 800ad2a:	ec49 8b10 	vmov	d0, r8, r9
 800ad2e:	aa18      	add	r2, sp, #96	; 0x60
 800ad30:	a917      	add	r1, sp, #92	; 0x5c
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7ff fbd6 	bl	800a4e4 <__d2b>
 800ad38:	ec49 8b18 	vmov	d8, r8, r9
 800ad3c:	9016      	str	r0, [sp, #88]	; 0x58
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f43f af02 	beq.w	800ab48 <_strtod_l+0x488>
 800ad44:	2101      	movs	r1, #1
 800ad46:	4620      	mov	r0, r4
 800ad48:	f7ff f930 	bl	8009fac <__i2b>
 800ad4c:	4683      	mov	fp, r0
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f43f aefa 	beq.w	800ab48 <_strtod_l+0x488>
 800ad54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	bfab      	itete	ge
 800ad5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ad5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ad60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ad62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ad66:	bfac      	ite	ge
 800ad68:	eb06 0a03 	addge.w	sl, r6, r3
 800ad6c:	1b9f      	sublt	r7, r3, r6
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	1af6      	subs	r6, r6, r3
 800ad72:	4416      	add	r6, r2
 800ad74:	4ba0      	ldr	r3, [pc, #640]	; (800aff8 <_strtod_l+0x938>)
 800ad76:	3e01      	subs	r6, #1
 800ad78:	429e      	cmp	r6, r3
 800ad7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad7e:	f280 80c4 	bge.w	800af0a <_strtod_l+0x84a>
 800ad82:	1b9b      	subs	r3, r3, r6
 800ad84:	2b1f      	cmp	r3, #31
 800ad86:	eba2 0203 	sub.w	r2, r2, r3
 800ad8a:	f04f 0101 	mov.w	r1, #1
 800ad8e:	f300 80b0 	bgt.w	800aef2 <_strtod_l+0x832>
 800ad92:	fa01 f303 	lsl.w	r3, r1, r3
 800ad96:	930e      	str	r3, [sp, #56]	; 0x38
 800ad98:	2300      	movs	r3, #0
 800ad9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad9c:	eb0a 0602 	add.w	r6, sl, r2
 800ada0:	9b04      	ldr	r3, [sp, #16]
 800ada2:	45b2      	cmp	sl, r6
 800ada4:	4417      	add	r7, r2
 800ada6:	441f      	add	r7, r3
 800ada8:	4653      	mov	r3, sl
 800adaa:	bfa8      	it	ge
 800adac:	4633      	movge	r3, r6
 800adae:	42bb      	cmp	r3, r7
 800adb0:	bfa8      	it	ge
 800adb2:	463b      	movge	r3, r7
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfc2      	ittt	gt
 800adb8:	1af6      	subgt	r6, r6, r3
 800adba:	1aff      	subgt	r7, r7, r3
 800adbc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800adc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd17      	ble.n	800adf6 <_strtod_l+0x736>
 800adc6:	4659      	mov	r1, fp
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f7ff f9ae 	bl	800a12c <__pow5mult>
 800add0:	4683      	mov	fp, r0
 800add2:	2800      	cmp	r0, #0
 800add4:	f43f aeb8 	beq.w	800ab48 <_strtod_l+0x488>
 800add8:	4601      	mov	r1, r0
 800adda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800addc:	4620      	mov	r0, r4
 800adde:	f7ff f8fb 	bl	8009fd8 <__multiply>
 800ade2:	900b      	str	r0, [sp, #44]	; 0x2c
 800ade4:	2800      	cmp	r0, #0
 800ade6:	f43f aeaf 	beq.w	800ab48 <_strtod_l+0x488>
 800adea:	9916      	ldr	r1, [sp, #88]	; 0x58
 800adec:	4620      	mov	r0, r4
 800adee:	f7fe ffdd 	bl	8009dac <_Bfree>
 800adf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf4:	9316      	str	r3, [sp, #88]	; 0x58
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	f300 808c 	bgt.w	800af14 <_strtod_l+0x854>
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	dd08      	ble.n	800ae14 <_strtod_l+0x754>
 800ae02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae04:	9905      	ldr	r1, [sp, #20]
 800ae06:	4620      	mov	r0, r4
 800ae08:	f7ff f990 	bl	800a12c <__pow5mult>
 800ae0c:	9005      	str	r0, [sp, #20]
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f ae9a 	beq.w	800ab48 <_strtod_l+0x488>
 800ae14:	2f00      	cmp	r7, #0
 800ae16:	dd08      	ble.n	800ae2a <_strtod_l+0x76a>
 800ae18:	9905      	ldr	r1, [sp, #20]
 800ae1a:	463a      	mov	r2, r7
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f7ff f9df 	bl	800a1e0 <__lshift>
 800ae22:	9005      	str	r0, [sp, #20]
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f43f ae8f 	beq.w	800ab48 <_strtod_l+0x488>
 800ae2a:	f1ba 0f00 	cmp.w	sl, #0
 800ae2e:	dd08      	ble.n	800ae42 <_strtod_l+0x782>
 800ae30:	4659      	mov	r1, fp
 800ae32:	4652      	mov	r2, sl
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7ff f9d3 	bl	800a1e0 <__lshift>
 800ae3a:	4683      	mov	fp, r0
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f43f ae83 	beq.w	800ab48 <_strtod_l+0x488>
 800ae42:	9a05      	ldr	r2, [sp, #20]
 800ae44:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae46:	4620      	mov	r0, r4
 800ae48:	f7ff fa52 	bl	800a2f0 <__mdiff>
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f ae7a 	beq.w	800ab48 <_strtod_l+0x488>
 800ae54:	68c3      	ldr	r3, [r0, #12]
 800ae56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60c3      	str	r3, [r0, #12]
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	f7ff fa2b 	bl	800a2b8 <__mcmp>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	da60      	bge.n	800af28 <_strtod_l+0x868>
 800ae66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae68:	ea53 0308 	orrs.w	r3, r3, r8
 800ae6c:	f040 8084 	bne.w	800af78 <_strtod_l+0x8b8>
 800ae70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d17f      	bne.n	800af78 <_strtod_l+0x8b8>
 800ae78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae7c:	0d1b      	lsrs	r3, r3, #20
 800ae7e:	051b      	lsls	r3, r3, #20
 800ae80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae84:	d978      	bls.n	800af78 <_strtod_l+0x8b8>
 800ae86:	696b      	ldr	r3, [r5, #20]
 800ae88:	b913      	cbnz	r3, 800ae90 <_strtod_l+0x7d0>
 800ae8a:	692b      	ldr	r3, [r5, #16]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	dd73      	ble.n	800af78 <_strtod_l+0x8b8>
 800ae90:	4629      	mov	r1, r5
 800ae92:	2201      	movs	r2, #1
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7ff f9a3 	bl	800a1e0 <__lshift>
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	f7ff fa0b 	bl	800a2b8 <__mcmp>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	dd68      	ble.n	800af78 <_strtod_l+0x8b8>
 800aea6:	9904      	ldr	r1, [sp, #16]
 800aea8:	4a54      	ldr	r2, [pc, #336]	; (800affc <_strtod_l+0x93c>)
 800aeaa:	464b      	mov	r3, r9
 800aeac:	2900      	cmp	r1, #0
 800aeae:	f000 8084 	beq.w	800afba <_strtod_l+0x8fa>
 800aeb2:	ea02 0109 	and.w	r1, r2, r9
 800aeb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aeba:	dc7e      	bgt.n	800afba <_strtod_l+0x8fa>
 800aebc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aec0:	f77f aeb3 	ble.w	800ac2a <_strtod_l+0x56a>
 800aec4:	4b4e      	ldr	r3, [pc, #312]	; (800b000 <_strtod_l+0x940>)
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	2200      	movs	r2, #0
 800aecc:	f7f5 fb94 	bl	80005f8 <__aeabi_dmul>
 800aed0:	4b4a      	ldr	r3, [pc, #296]	; (800affc <_strtod_l+0x93c>)
 800aed2:	400b      	ands	r3, r1
 800aed4:	4680      	mov	r8, r0
 800aed6:	4689      	mov	r9, r1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f47f ae3f 	bne.w	800ab5c <_strtod_l+0x49c>
 800aede:	2322      	movs	r3, #34	; 0x22
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	e63b      	b.n	800ab5c <_strtod_l+0x49c>
 800aee4:	f04f 32ff 	mov.w	r2, #4294967295
 800aee8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeec:	ea03 0808 	and.w	r8, r3, r8
 800aef0:	e6e8      	b.n	800acc4 <_strtod_l+0x604>
 800aef2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aef6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aefa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aefe:	36e2      	adds	r6, #226	; 0xe2
 800af00:	fa01 f306 	lsl.w	r3, r1, r6
 800af04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800af08:	e748      	b.n	800ad9c <_strtod_l+0x6dc>
 800af0a:	2100      	movs	r1, #0
 800af0c:	2301      	movs	r3, #1
 800af0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800af12:	e743      	b.n	800ad9c <_strtod_l+0x6dc>
 800af14:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af16:	4632      	mov	r2, r6
 800af18:	4620      	mov	r0, r4
 800af1a:	f7ff f961 	bl	800a1e0 <__lshift>
 800af1e:	9016      	str	r0, [sp, #88]	; 0x58
 800af20:	2800      	cmp	r0, #0
 800af22:	f47f af6b 	bne.w	800adfc <_strtod_l+0x73c>
 800af26:	e60f      	b.n	800ab48 <_strtod_l+0x488>
 800af28:	46ca      	mov	sl, r9
 800af2a:	d171      	bne.n	800b010 <_strtod_l+0x950>
 800af2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af32:	b352      	cbz	r2, 800af8a <_strtod_l+0x8ca>
 800af34:	4a33      	ldr	r2, [pc, #204]	; (800b004 <_strtod_l+0x944>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d12a      	bne.n	800af90 <_strtod_l+0x8d0>
 800af3a:	9b04      	ldr	r3, [sp, #16]
 800af3c:	4641      	mov	r1, r8
 800af3e:	b1fb      	cbz	r3, 800af80 <_strtod_l+0x8c0>
 800af40:	4b2e      	ldr	r3, [pc, #184]	; (800affc <_strtod_l+0x93c>)
 800af42:	ea09 0303 	and.w	r3, r9, r3
 800af46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af4a:	f04f 32ff 	mov.w	r2, #4294967295
 800af4e:	d81a      	bhi.n	800af86 <_strtod_l+0x8c6>
 800af50:	0d1b      	lsrs	r3, r3, #20
 800af52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af56:	fa02 f303 	lsl.w	r3, r2, r3
 800af5a:	4299      	cmp	r1, r3
 800af5c:	d118      	bne.n	800af90 <_strtod_l+0x8d0>
 800af5e:	4b2a      	ldr	r3, [pc, #168]	; (800b008 <_strtod_l+0x948>)
 800af60:	459a      	cmp	sl, r3
 800af62:	d102      	bne.n	800af6a <_strtod_l+0x8aa>
 800af64:	3101      	adds	r1, #1
 800af66:	f43f adef 	beq.w	800ab48 <_strtod_l+0x488>
 800af6a:	4b24      	ldr	r3, [pc, #144]	; (800affc <_strtod_l+0x93c>)
 800af6c:	ea0a 0303 	and.w	r3, sl, r3
 800af70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af74:	f04f 0800 	mov.w	r8, #0
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1a2      	bne.n	800aec4 <_strtod_l+0x804>
 800af7e:	e5ed      	b.n	800ab5c <_strtod_l+0x49c>
 800af80:	f04f 33ff 	mov.w	r3, #4294967295
 800af84:	e7e9      	b.n	800af5a <_strtod_l+0x89a>
 800af86:	4613      	mov	r3, r2
 800af88:	e7e7      	b.n	800af5a <_strtod_l+0x89a>
 800af8a:	ea53 0308 	orrs.w	r3, r3, r8
 800af8e:	d08a      	beq.n	800aea6 <_strtod_l+0x7e6>
 800af90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af92:	b1e3      	cbz	r3, 800afce <_strtod_l+0x90e>
 800af94:	ea13 0f0a 	tst.w	r3, sl
 800af98:	d0ee      	beq.n	800af78 <_strtod_l+0x8b8>
 800af9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af9c:	9a04      	ldr	r2, [sp, #16]
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	b1c3      	cbz	r3, 800afd6 <_strtod_l+0x916>
 800afa4:	f7ff fb6f 	bl	800a686 <sulp>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	ec51 0b18 	vmov	r0, r1, d8
 800afb0:	f7f5 f96c 	bl	800028c <__adddf3>
 800afb4:	4680      	mov	r8, r0
 800afb6:	4689      	mov	r9, r1
 800afb8:	e7de      	b.n	800af78 <_strtod_l+0x8b8>
 800afba:	4013      	ands	r3, r2
 800afbc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800afc0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800afc4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800afc8:	f04f 38ff 	mov.w	r8, #4294967295
 800afcc:	e7d4      	b.n	800af78 <_strtod_l+0x8b8>
 800afce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afd0:	ea13 0f08 	tst.w	r3, r8
 800afd4:	e7e0      	b.n	800af98 <_strtod_l+0x8d8>
 800afd6:	f7ff fb56 	bl	800a686 <sulp>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	ec51 0b18 	vmov	r0, r1, d8
 800afe2:	f7f5 f951 	bl	8000288 <__aeabi_dsub>
 800afe6:	2200      	movs	r2, #0
 800afe8:	2300      	movs	r3, #0
 800afea:	4680      	mov	r8, r0
 800afec:	4689      	mov	r9, r1
 800afee:	f7f5 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d0c0      	beq.n	800af78 <_strtod_l+0x8b8>
 800aff6:	e618      	b.n	800ac2a <_strtod_l+0x56a>
 800aff8:	fffffc02 	.word	0xfffffc02
 800affc:	7ff00000 	.word	0x7ff00000
 800b000:	39500000 	.word	0x39500000
 800b004:	000fffff 	.word	0x000fffff
 800b008:	7fefffff 	.word	0x7fefffff
 800b00c:	0800d508 	.word	0x0800d508
 800b010:	4659      	mov	r1, fp
 800b012:	4628      	mov	r0, r5
 800b014:	f7ff fac0 	bl	800a598 <__ratio>
 800b018:	ec57 6b10 	vmov	r6, r7, d0
 800b01c:	ee10 0a10 	vmov	r0, s0
 800b020:	2200      	movs	r2, #0
 800b022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b026:	4639      	mov	r1, r7
 800b028:	f7f5 fd62 	bl	8000af0 <__aeabi_dcmple>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d071      	beq.n	800b114 <_strtod_l+0xa54>
 800b030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d17c      	bne.n	800b130 <_strtod_l+0xa70>
 800b036:	f1b8 0f00 	cmp.w	r8, #0
 800b03a:	d15a      	bne.n	800b0f2 <_strtod_l+0xa32>
 800b03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b040:	2b00      	cmp	r3, #0
 800b042:	d15d      	bne.n	800b100 <_strtod_l+0xa40>
 800b044:	4b90      	ldr	r3, [pc, #576]	; (800b288 <_strtod_l+0xbc8>)
 800b046:	2200      	movs	r2, #0
 800b048:	4630      	mov	r0, r6
 800b04a:	4639      	mov	r1, r7
 800b04c:	f7f5 fd46 	bl	8000adc <__aeabi_dcmplt>
 800b050:	2800      	cmp	r0, #0
 800b052:	d15c      	bne.n	800b10e <_strtod_l+0xa4e>
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	4b8c      	ldr	r3, [pc, #560]	; (800b28c <_strtod_l+0xbcc>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	4606      	mov	r6, r0
 800b062:	460f      	mov	r7, r1
 800b064:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b068:	9606      	str	r6, [sp, #24]
 800b06a:	9307      	str	r3, [sp, #28]
 800b06c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b070:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b074:	4b86      	ldr	r3, [pc, #536]	; (800b290 <_strtod_l+0xbd0>)
 800b076:	ea0a 0303 	and.w	r3, sl, r3
 800b07a:	930d      	str	r3, [sp, #52]	; 0x34
 800b07c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b07e:	4b85      	ldr	r3, [pc, #532]	; (800b294 <_strtod_l+0xbd4>)
 800b080:	429a      	cmp	r2, r3
 800b082:	f040 8090 	bne.w	800b1a6 <_strtod_l+0xae6>
 800b086:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b08a:	ec49 8b10 	vmov	d0, r8, r9
 800b08e:	f7ff f9b9 	bl	800a404 <__ulp>
 800b092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b096:	ec51 0b10 	vmov	r0, r1, d0
 800b09a:	f7f5 faad 	bl	80005f8 <__aeabi_dmul>
 800b09e:	4642      	mov	r2, r8
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	f7f5 f8f3 	bl	800028c <__adddf3>
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4979      	ldr	r1, [pc, #484]	; (800b290 <_strtod_l+0xbd0>)
 800b0aa:	4a7b      	ldr	r2, [pc, #492]	; (800b298 <_strtod_l+0xbd8>)
 800b0ac:	4019      	ands	r1, r3
 800b0ae:	4291      	cmp	r1, r2
 800b0b0:	4680      	mov	r8, r0
 800b0b2:	d944      	bls.n	800b13e <_strtod_l+0xa7e>
 800b0b4:	ee18 2a90 	vmov	r2, s17
 800b0b8:	4b78      	ldr	r3, [pc, #480]	; (800b29c <_strtod_l+0xbdc>)
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d104      	bne.n	800b0c8 <_strtod_l+0xa08>
 800b0be:	ee18 3a10 	vmov	r3, s16
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	f43f ad40 	beq.w	800ab48 <_strtod_l+0x488>
 800b0c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b29c <_strtod_l+0xbdc>
 800b0cc:	f04f 38ff 	mov.w	r8, #4294967295
 800b0d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7fe fe6a 	bl	8009dac <_Bfree>
 800b0d8:	9905      	ldr	r1, [sp, #20]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7fe fe66 	bl	8009dac <_Bfree>
 800b0e0:	4659      	mov	r1, fp
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f7fe fe62 	bl	8009dac <_Bfree>
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f7fe fe5e 	bl	8009dac <_Bfree>
 800b0f0:	e609      	b.n	800ad06 <_strtod_l+0x646>
 800b0f2:	f1b8 0f01 	cmp.w	r8, #1
 800b0f6:	d103      	bne.n	800b100 <_strtod_l+0xa40>
 800b0f8:	f1b9 0f00 	cmp.w	r9, #0
 800b0fc:	f43f ad95 	beq.w	800ac2a <_strtod_l+0x56a>
 800b100:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b258 <_strtod_l+0xb98>
 800b104:	4f60      	ldr	r7, [pc, #384]	; (800b288 <_strtod_l+0xbc8>)
 800b106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b10a:	2600      	movs	r6, #0
 800b10c:	e7ae      	b.n	800b06c <_strtod_l+0x9ac>
 800b10e:	4f5f      	ldr	r7, [pc, #380]	; (800b28c <_strtod_l+0xbcc>)
 800b110:	2600      	movs	r6, #0
 800b112:	e7a7      	b.n	800b064 <_strtod_l+0x9a4>
 800b114:	4b5d      	ldr	r3, [pc, #372]	; (800b28c <_strtod_l+0xbcc>)
 800b116:	4630      	mov	r0, r6
 800b118:	4639      	mov	r1, r7
 800b11a:	2200      	movs	r2, #0
 800b11c:	f7f5 fa6c 	bl	80005f8 <__aeabi_dmul>
 800b120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b122:	4606      	mov	r6, r0
 800b124:	460f      	mov	r7, r1
 800b126:	2b00      	cmp	r3, #0
 800b128:	d09c      	beq.n	800b064 <_strtod_l+0x9a4>
 800b12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b12e:	e79d      	b.n	800b06c <_strtod_l+0x9ac>
 800b130:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b260 <_strtod_l+0xba0>
 800b134:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b138:	ec57 6b17 	vmov	r6, r7, d7
 800b13c:	e796      	b.n	800b06c <_strtod_l+0x9ac>
 800b13e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	46ca      	mov	sl, r9
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1c2      	bne.n	800b0d0 <_strtod_l+0xa10>
 800b14a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b14e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b150:	0d1b      	lsrs	r3, r3, #20
 800b152:	051b      	lsls	r3, r3, #20
 800b154:	429a      	cmp	r2, r3
 800b156:	d1bb      	bne.n	800b0d0 <_strtod_l+0xa10>
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 fdac 	bl	8000cb8 <__aeabi_d2lz>
 800b160:	f7f5 fa1c 	bl	800059c <__aeabi_l2d>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4630      	mov	r0, r6
 800b16a:	4639      	mov	r1, r7
 800b16c:	f7f5 f88c 	bl	8000288 <__aeabi_dsub>
 800b170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b176:	ea43 0308 	orr.w	r3, r3, r8
 800b17a:	4313      	orrs	r3, r2
 800b17c:	4606      	mov	r6, r0
 800b17e:	460f      	mov	r7, r1
 800b180:	d054      	beq.n	800b22c <_strtod_l+0xb6c>
 800b182:	a339      	add	r3, pc, #228	; (adr r3, 800b268 <_strtod_l+0xba8>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 fca8 	bl	8000adc <__aeabi_dcmplt>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f47f ace5 	bne.w	800ab5c <_strtod_l+0x49c>
 800b192:	a337      	add	r3, pc, #220	; (adr r3, 800b270 <_strtod_l+0xbb0>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	4630      	mov	r0, r6
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d095      	beq.n	800b0d0 <_strtod_l+0xa10>
 800b1a4:	e4da      	b.n	800ab5c <_strtod_l+0x49c>
 800b1a6:	9b04      	ldr	r3, [sp, #16]
 800b1a8:	b333      	cbz	r3, 800b1f8 <_strtod_l+0xb38>
 800b1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1b0:	d822      	bhi.n	800b1f8 <_strtod_l+0xb38>
 800b1b2:	a331      	add	r3, pc, #196	; (adr r3, 800b278 <_strtod_l+0xbb8>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	f7f5 fc98 	bl	8000af0 <__aeabi_dcmple>
 800b1c0:	b1a0      	cbz	r0, 800b1ec <_strtod_l+0xb2c>
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7f5 fcef 	bl	8000ba8 <__aeabi_d2uiz>
 800b1ca:	2801      	cmp	r0, #1
 800b1cc:	bf38      	it	cc
 800b1ce:	2001      	movcc	r0, #1
 800b1d0:	f7f5 f998 	bl	8000504 <__aeabi_ui2d>
 800b1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	460f      	mov	r7, r1
 800b1da:	bb23      	cbnz	r3, 800b226 <_strtod_l+0xb66>
 800b1dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1e0:	9010      	str	r0, [sp, #64]	; 0x40
 800b1e2:	9311      	str	r3, [sp, #68]	; 0x44
 800b1e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1fc:	eeb0 0a48 	vmov.f32	s0, s16
 800b200:	eef0 0a68 	vmov.f32	s1, s17
 800b204:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b208:	f7ff f8fc 	bl	800a404 <__ulp>
 800b20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b210:	ec53 2b10 	vmov	r2, r3, d0
 800b214:	f7f5 f9f0 	bl	80005f8 <__aeabi_dmul>
 800b218:	ec53 2b18 	vmov	r2, r3, d8
 800b21c:	f7f5 f836 	bl	800028c <__adddf3>
 800b220:	4680      	mov	r8, r0
 800b222:	4689      	mov	r9, r1
 800b224:	e78d      	b.n	800b142 <_strtod_l+0xa82>
 800b226:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b22a:	e7db      	b.n	800b1e4 <_strtod_l+0xb24>
 800b22c:	a314      	add	r3, pc, #80	; (adr r3, 800b280 <_strtod_l+0xbc0>)
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f7f5 fc53 	bl	8000adc <__aeabi_dcmplt>
 800b236:	e7b3      	b.n	800b1a0 <_strtod_l+0xae0>
 800b238:	2300      	movs	r3, #0
 800b23a:	930a      	str	r3, [sp, #40]	; 0x28
 800b23c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b23e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	f7ff ba7c 	b.w	800a73e <_strtod_l+0x7e>
 800b246:	2a65      	cmp	r2, #101	; 0x65
 800b248:	f43f ab75 	beq.w	800a936 <_strtod_l+0x276>
 800b24c:	2a45      	cmp	r2, #69	; 0x45
 800b24e:	f43f ab72 	beq.w	800a936 <_strtod_l+0x276>
 800b252:	2301      	movs	r3, #1
 800b254:	f7ff bbaa 	b.w	800a9ac <_strtod_l+0x2ec>
 800b258:	00000000 	.word	0x00000000
 800b25c:	bff00000 	.word	0xbff00000
 800b260:	00000000 	.word	0x00000000
 800b264:	3ff00000 	.word	0x3ff00000
 800b268:	94a03595 	.word	0x94a03595
 800b26c:	3fdfffff 	.word	0x3fdfffff
 800b270:	35afe535 	.word	0x35afe535
 800b274:	3fe00000 	.word	0x3fe00000
 800b278:	ffc00000 	.word	0xffc00000
 800b27c:	41dfffff 	.word	0x41dfffff
 800b280:	94a03595 	.word	0x94a03595
 800b284:	3fcfffff 	.word	0x3fcfffff
 800b288:	3ff00000 	.word	0x3ff00000
 800b28c:	3fe00000 	.word	0x3fe00000
 800b290:	7ff00000 	.word	0x7ff00000
 800b294:	7fe00000 	.word	0x7fe00000
 800b298:	7c9fffff 	.word	0x7c9fffff
 800b29c:	7fefffff 	.word	0x7fefffff

0800b2a0 <_strtod_r>:
 800b2a0:	4b01      	ldr	r3, [pc, #4]	; (800b2a8 <_strtod_r+0x8>)
 800b2a2:	f7ff ba0d 	b.w	800a6c0 <_strtod_l>
 800b2a6:	bf00      	nop
 800b2a8:	20000078 	.word	0x20000078

0800b2ac <_strtol_l.constprop.0>:
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b2:	d001      	beq.n	800b2b8 <_strtol_l.constprop.0+0xc>
 800b2b4:	2b24      	cmp	r3, #36	; 0x24
 800b2b6:	d906      	bls.n	800b2c6 <_strtol_l.constprop.0+0x1a>
 800b2b8:	f7fd fd8a 	bl	8008dd0 <__errno>
 800b2bc:	2316      	movs	r3, #22
 800b2be:	6003      	str	r3, [r0, #0]
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b3ac <_strtol_l.constprop.0+0x100>
 800b2ca:	460d      	mov	r5, r1
 800b2cc:	462e      	mov	r6, r5
 800b2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b2d6:	f017 0708 	ands.w	r7, r7, #8
 800b2da:	d1f7      	bne.n	800b2cc <_strtol_l.constprop.0+0x20>
 800b2dc:	2c2d      	cmp	r4, #45	; 0x2d
 800b2de:	d132      	bne.n	800b346 <_strtol_l.constprop.0+0x9a>
 800b2e0:	782c      	ldrb	r4, [r5, #0]
 800b2e2:	2701      	movs	r7, #1
 800b2e4:	1cb5      	adds	r5, r6, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d05b      	beq.n	800b3a2 <_strtol_l.constprop.0+0xf6>
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d109      	bne.n	800b302 <_strtol_l.constprop.0+0x56>
 800b2ee:	2c30      	cmp	r4, #48	; 0x30
 800b2f0:	d107      	bne.n	800b302 <_strtol_l.constprop.0+0x56>
 800b2f2:	782c      	ldrb	r4, [r5, #0]
 800b2f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2f8:	2c58      	cmp	r4, #88	; 0x58
 800b2fa:	d14d      	bne.n	800b398 <_strtol_l.constprop.0+0xec>
 800b2fc:	786c      	ldrb	r4, [r5, #1]
 800b2fe:	2310      	movs	r3, #16
 800b300:	3502      	adds	r5, #2
 800b302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b306:	f108 38ff 	add.w	r8, r8, #4294967295
 800b30a:	f04f 0e00 	mov.w	lr, #0
 800b30e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b312:	4676      	mov	r6, lr
 800b314:	fb03 8a19 	mls	sl, r3, r9, r8
 800b318:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b31c:	f1bc 0f09 	cmp.w	ip, #9
 800b320:	d816      	bhi.n	800b350 <_strtol_l.constprop.0+0xa4>
 800b322:	4664      	mov	r4, ip
 800b324:	42a3      	cmp	r3, r4
 800b326:	dd24      	ble.n	800b372 <_strtol_l.constprop.0+0xc6>
 800b328:	f1be 3fff 	cmp.w	lr, #4294967295
 800b32c:	d008      	beq.n	800b340 <_strtol_l.constprop.0+0x94>
 800b32e:	45b1      	cmp	r9, r6
 800b330:	d31c      	bcc.n	800b36c <_strtol_l.constprop.0+0xc0>
 800b332:	d101      	bne.n	800b338 <_strtol_l.constprop.0+0x8c>
 800b334:	45a2      	cmp	sl, r4
 800b336:	db19      	blt.n	800b36c <_strtol_l.constprop.0+0xc0>
 800b338:	fb06 4603 	mla	r6, r6, r3, r4
 800b33c:	f04f 0e01 	mov.w	lr, #1
 800b340:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b344:	e7e8      	b.n	800b318 <_strtol_l.constprop.0+0x6c>
 800b346:	2c2b      	cmp	r4, #43	; 0x2b
 800b348:	bf04      	itt	eq
 800b34a:	782c      	ldrbeq	r4, [r5, #0]
 800b34c:	1cb5      	addeq	r5, r6, #2
 800b34e:	e7ca      	b.n	800b2e6 <_strtol_l.constprop.0+0x3a>
 800b350:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b354:	f1bc 0f19 	cmp.w	ip, #25
 800b358:	d801      	bhi.n	800b35e <_strtol_l.constprop.0+0xb2>
 800b35a:	3c37      	subs	r4, #55	; 0x37
 800b35c:	e7e2      	b.n	800b324 <_strtol_l.constprop.0+0x78>
 800b35e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b362:	f1bc 0f19 	cmp.w	ip, #25
 800b366:	d804      	bhi.n	800b372 <_strtol_l.constprop.0+0xc6>
 800b368:	3c57      	subs	r4, #87	; 0x57
 800b36a:	e7db      	b.n	800b324 <_strtol_l.constprop.0+0x78>
 800b36c:	f04f 3eff 	mov.w	lr, #4294967295
 800b370:	e7e6      	b.n	800b340 <_strtol_l.constprop.0+0x94>
 800b372:	f1be 3fff 	cmp.w	lr, #4294967295
 800b376:	d105      	bne.n	800b384 <_strtol_l.constprop.0+0xd8>
 800b378:	2322      	movs	r3, #34	; 0x22
 800b37a:	6003      	str	r3, [r0, #0]
 800b37c:	4646      	mov	r6, r8
 800b37e:	b942      	cbnz	r2, 800b392 <_strtol_l.constprop.0+0xe6>
 800b380:	4630      	mov	r0, r6
 800b382:	e79e      	b.n	800b2c2 <_strtol_l.constprop.0+0x16>
 800b384:	b107      	cbz	r7, 800b388 <_strtol_l.constprop.0+0xdc>
 800b386:	4276      	negs	r6, r6
 800b388:	2a00      	cmp	r2, #0
 800b38a:	d0f9      	beq.n	800b380 <_strtol_l.constprop.0+0xd4>
 800b38c:	f1be 0f00 	cmp.w	lr, #0
 800b390:	d000      	beq.n	800b394 <_strtol_l.constprop.0+0xe8>
 800b392:	1e69      	subs	r1, r5, #1
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	e7f3      	b.n	800b380 <_strtol_l.constprop.0+0xd4>
 800b398:	2430      	movs	r4, #48	; 0x30
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1b1      	bne.n	800b302 <_strtol_l.constprop.0+0x56>
 800b39e:	2308      	movs	r3, #8
 800b3a0:	e7af      	b.n	800b302 <_strtol_l.constprop.0+0x56>
 800b3a2:	2c30      	cmp	r4, #48	; 0x30
 800b3a4:	d0a5      	beq.n	800b2f2 <_strtol_l.constprop.0+0x46>
 800b3a6:	230a      	movs	r3, #10
 800b3a8:	e7ab      	b.n	800b302 <_strtol_l.constprop.0+0x56>
 800b3aa:	bf00      	nop
 800b3ac:	0800d531 	.word	0x0800d531

0800b3b0 <_strtol_r>:
 800b3b0:	f7ff bf7c 	b.w	800b2ac <_strtol_l.constprop.0>

0800b3b4 <__ssputs_r>:
 800b3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b8:	688e      	ldr	r6, [r1, #8]
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	42be      	cmp	r6, r7
 800b3be:	680b      	ldr	r3, [r1, #0]
 800b3c0:	4682      	mov	sl, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4690      	mov	r8, r2
 800b3c6:	d82c      	bhi.n	800b422 <__ssputs_r+0x6e>
 800b3c8:	898a      	ldrh	r2, [r1, #12]
 800b3ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3ce:	d026      	beq.n	800b41e <__ssputs_r+0x6a>
 800b3d0:	6965      	ldr	r5, [r4, #20]
 800b3d2:	6909      	ldr	r1, [r1, #16]
 800b3d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3d8:	eba3 0901 	sub.w	r9, r3, r1
 800b3dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3e0:	1c7b      	adds	r3, r7, #1
 800b3e2:	444b      	add	r3, r9
 800b3e4:	106d      	asrs	r5, r5, #1
 800b3e6:	429d      	cmp	r5, r3
 800b3e8:	bf38      	it	cc
 800b3ea:	461d      	movcc	r5, r3
 800b3ec:	0553      	lsls	r3, r2, #21
 800b3ee:	d527      	bpl.n	800b440 <__ssputs_r+0x8c>
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	f7fe fc0f 	bl	8009c14 <_malloc_r>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	b360      	cbz	r0, 800b454 <__ssputs_r+0xa0>
 800b3fa:	6921      	ldr	r1, [r4, #16]
 800b3fc:	464a      	mov	r2, r9
 800b3fe:	f000 ff65 	bl	800c2cc <memcpy>
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b40c:	81a3      	strh	r3, [r4, #12]
 800b40e:	6126      	str	r6, [r4, #16]
 800b410:	6165      	str	r5, [r4, #20]
 800b412:	444e      	add	r6, r9
 800b414:	eba5 0509 	sub.w	r5, r5, r9
 800b418:	6026      	str	r6, [r4, #0]
 800b41a:	60a5      	str	r5, [r4, #8]
 800b41c:	463e      	mov	r6, r7
 800b41e:	42be      	cmp	r6, r7
 800b420:	d900      	bls.n	800b424 <__ssputs_r+0x70>
 800b422:	463e      	mov	r6, r7
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	4632      	mov	r2, r6
 800b428:	4641      	mov	r1, r8
 800b42a:	f000 ff02 	bl	800c232 <memmove>
 800b42e:	68a3      	ldr	r3, [r4, #8]
 800b430:	1b9b      	subs	r3, r3, r6
 800b432:	60a3      	str	r3, [r4, #8]
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	4433      	add	r3, r6
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	2000      	movs	r0, #0
 800b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b440:	462a      	mov	r2, r5
 800b442:	f001 faf6 	bl	800ca32 <_realloc_r>
 800b446:	4606      	mov	r6, r0
 800b448:	2800      	cmp	r0, #0
 800b44a:	d1e0      	bne.n	800b40e <__ssputs_r+0x5a>
 800b44c:	6921      	ldr	r1, [r4, #16]
 800b44e:	4650      	mov	r0, sl
 800b450:	f7fe fb6c 	bl	8009b2c <_free_r>
 800b454:	230c      	movs	r3, #12
 800b456:	f8ca 3000 	str.w	r3, [sl]
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	f04f 30ff 	mov.w	r0, #4294967295
 800b466:	e7e9      	b.n	800b43c <__ssputs_r+0x88>

0800b468 <_svfiprintf_r>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	4698      	mov	r8, r3
 800b46e:	898b      	ldrh	r3, [r1, #12]
 800b470:	061b      	lsls	r3, r3, #24
 800b472:	b09d      	sub	sp, #116	; 0x74
 800b474:	4607      	mov	r7, r0
 800b476:	460d      	mov	r5, r1
 800b478:	4614      	mov	r4, r2
 800b47a:	d50e      	bpl.n	800b49a <_svfiprintf_r+0x32>
 800b47c:	690b      	ldr	r3, [r1, #16]
 800b47e:	b963      	cbnz	r3, 800b49a <_svfiprintf_r+0x32>
 800b480:	2140      	movs	r1, #64	; 0x40
 800b482:	f7fe fbc7 	bl	8009c14 <_malloc_r>
 800b486:	6028      	str	r0, [r5, #0]
 800b488:	6128      	str	r0, [r5, #16]
 800b48a:	b920      	cbnz	r0, 800b496 <_svfiprintf_r+0x2e>
 800b48c:	230c      	movs	r3, #12
 800b48e:	603b      	str	r3, [r7, #0]
 800b490:	f04f 30ff 	mov.w	r0, #4294967295
 800b494:	e0d0      	b.n	800b638 <_svfiprintf_r+0x1d0>
 800b496:	2340      	movs	r3, #64	; 0x40
 800b498:	616b      	str	r3, [r5, #20]
 800b49a:	2300      	movs	r3, #0
 800b49c:	9309      	str	r3, [sp, #36]	; 0x24
 800b49e:	2320      	movs	r3, #32
 800b4a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a8:	2330      	movs	r3, #48	; 0x30
 800b4aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b650 <_svfiprintf_r+0x1e8>
 800b4ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4b2:	f04f 0901 	mov.w	r9, #1
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	469a      	mov	sl, r3
 800b4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4be:	b10a      	cbz	r2, 800b4c4 <_svfiprintf_r+0x5c>
 800b4c0:	2a25      	cmp	r2, #37	; 0x25
 800b4c2:	d1f9      	bne.n	800b4b8 <_svfiprintf_r+0x50>
 800b4c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c8:	d00b      	beq.n	800b4e2 <_svfiprintf_r+0x7a>
 800b4ca:	465b      	mov	r3, fp
 800b4cc:	4622      	mov	r2, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f7ff ff6f 	bl	800b3b4 <__ssputs_r>
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	f000 80a9 	beq.w	800b62e <_svfiprintf_r+0x1c6>
 800b4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4de:	445a      	add	r2, fp
 800b4e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f000 80a1 	beq.w	800b62e <_svfiprintf_r+0x1c6>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f6:	f10a 0a01 	add.w	sl, sl, #1
 800b4fa:	9304      	str	r3, [sp, #16]
 800b4fc:	9307      	str	r3, [sp, #28]
 800b4fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b502:	931a      	str	r3, [sp, #104]	; 0x68
 800b504:	4654      	mov	r4, sl
 800b506:	2205      	movs	r2, #5
 800b508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50c:	4850      	ldr	r0, [pc, #320]	; (800b650 <_svfiprintf_r+0x1e8>)
 800b50e:	f7f4 fe5f 	bl	80001d0 <memchr>
 800b512:	9a04      	ldr	r2, [sp, #16]
 800b514:	b9d8      	cbnz	r0, 800b54e <_svfiprintf_r+0xe6>
 800b516:	06d0      	lsls	r0, r2, #27
 800b518:	bf44      	itt	mi
 800b51a:	2320      	movmi	r3, #32
 800b51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b520:	0711      	lsls	r1, r2, #28
 800b522:	bf44      	itt	mi
 800b524:	232b      	movmi	r3, #43	; 0x2b
 800b526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b52a:	f89a 3000 	ldrb.w	r3, [sl]
 800b52e:	2b2a      	cmp	r3, #42	; 0x2a
 800b530:	d015      	beq.n	800b55e <_svfiprintf_r+0xf6>
 800b532:	9a07      	ldr	r2, [sp, #28]
 800b534:	4654      	mov	r4, sl
 800b536:	2000      	movs	r0, #0
 800b538:	f04f 0c0a 	mov.w	ip, #10
 800b53c:	4621      	mov	r1, r4
 800b53e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b542:	3b30      	subs	r3, #48	; 0x30
 800b544:	2b09      	cmp	r3, #9
 800b546:	d94d      	bls.n	800b5e4 <_svfiprintf_r+0x17c>
 800b548:	b1b0      	cbz	r0, 800b578 <_svfiprintf_r+0x110>
 800b54a:	9207      	str	r2, [sp, #28]
 800b54c:	e014      	b.n	800b578 <_svfiprintf_r+0x110>
 800b54e:	eba0 0308 	sub.w	r3, r0, r8
 800b552:	fa09 f303 	lsl.w	r3, r9, r3
 800b556:	4313      	orrs	r3, r2
 800b558:	9304      	str	r3, [sp, #16]
 800b55a:	46a2      	mov	sl, r4
 800b55c:	e7d2      	b.n	800b504 <_svfiprintf_r+0x9c>
 800b55e:	9b03      	ldr	r3, [sp, #12]
 800b560:	1d19      	adds	r1, r3, #4
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	9103      	str	r1, [sp, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	bfbb      	ittet	lt
 800b56a:	425b      	neglt	r3, r3
 800b56c:	f042 0202 	orrlt.w	r2, r2, #2
 800b570:	9307      	strge	r3, [sp, #28]
 800b572:	9307      	strlt	r3, [sp, #28]
 800b574:	bfb8      	it	lt
 800b576:	9204      	strlt	r2, [sp, #16]
 800b578:	7823      	ldrb	r3, [r4, #0]
 800b57a:	2b2e      	cmp	r3, #46	; 0x2e
 800b57c:	d10c      	bne.n	800b598 <_svfiprintf_r+0x130>
 800b57e:	7863      	ldrb	r3, [r4, #1]
 800b580:	2b2a      	cmp	r3, #42	; 0x2a
 800b582:	d134      	bne.n	800b5ee <_svfiprintf_r+0x186>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	1d1a      	adds	r2, r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	9203      	str	r2, [sp, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	bfb8      	it	lt
 800b590:	f04f 33ff 	movlt.w	r3, #4294967295
 800b594:	3402      	adds	r4, #2
 800b596:	9305      	str	r3, [sp, #20]
 800b598:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b660 <_svfiprintf_r+0x1f8>
 800b59c:	7821      	ldrb	r1, [r4, #0]
 800b59e:	2203      	movs	r2, #3
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f7f4 fe15 	bl	80001d0 <memchr>
 800b5a6:	b138      	cbz	r0, 800b5b8 <_svfiprintf_r+0x150>
 800b5a8:	9b04      	ldr	r3, [sp, #16]
 800b5aa:	eba0 000a 	sub.w	r0, r0, sl
 800b5ae:	2240      	movs	r2, #64	; 0x40
 800b5b0:	4082      	lsls	r2, r0
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	3401      	adds	r4, #1
 800b5b6:	9304      	str	r3, [sp, #16]
 800b5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5bc:	4825      	ldr	r0, [pc, #148]	; (800b654 <_svfiprintf_r+0x1ec>)
 800b5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5c2:	2206      	movs	r2, #6
 800b5c4:	f7f4 fe04 	bl	80001d0 <memchr>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d038      	beq.n	800b63e <_svfiprintf_r+0x1d6>
 800b5cc:	4b22      	ldr	r3, [pc, #136]	; (800b658 <_svfiprintf_r+0x1f0>)
 800b5ce:	bb1b      	cbnz	r3, 800b618 <_svfiprintf_r+0x1b0>
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	3307      	adds	r3, #7
 800b5d4:	f023 0307 	bic.w	r3, r3, #7
 800b5d8:	3308      	adds	r3, #8
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5de:	4433      	add	r3, r6
 800b5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e2:	e768      	b.n	800b4b6 <_svfiprintf_r+0x4e>
 800b5e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	e7a6      	b.n	800b53c <_svfiprintf_r+0xd4>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	3401      	adds	r4, #1
 800b5f2:	9305      	str	r3, [sp, #20]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f04f 0c0a 	mov.w	ip, #10
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b600:	3a30      	subs	r2, #48	; 0x30
 800b602:	2a09      	cmp	r2, #9
 800b604:	d903      	bls.n	800b60e <_svfiprintf_r+0x1a6>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0c6      	beq.n	800b598 <_svfiprintf_r+0x130>
 800b60a:	9105      	str	r1, [sp, #20]
 800b60c:	e7c4      	b.n	800b598 <_svfiprintf_r+0x130>
 800b60e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b612:	4604      	mov	r4, r0
 800b614:	2301      	movs	r3, #1
 800b616:	e7f0      	b.n	800b5fa <_svfiprintf_r+0x192>
 800b618:	ab03      	add	r3, sp, #12
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	462a      	mov	r2, r5
 800b61e:	4b0f      	ldr	r3, [pc, #60]	; (800b65c <_svfiprintf_r+0x1f4>)
 800b620:	a904      	add	r1, sp, #16
 800b622:	4638      	mov	r0, r7
 800b624:	f7fc fb2e 	bl	8007c84 <_printf_float>
 800b628:	1c42      	adds	r2, r0, #1
 800b62a:	4606      	mov	r6, r0
 800b62c:	d1d6      	bne.n	800b5dc <_svfiprintf_r+0x174>
 800b62e:	89ab      	ldrh	r3, [r5, #12]
 800b630:	065b      	lsls	r3, r3, #25
 800b632:	f53f af2d 	bmi.w	800b490 <_svfiprintf_r+0x28>
 800b636:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b638:	b01d      	add	sp, #116	; 0x74
 800b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	ab03      	add	r3, sp, #12
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	462a      	mov	r2, r5
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <_svfiprintf_r+0x1f4>)
 800b646:	a904      	add	r1, sp, #16
 800b648:	4638      	mov	r0, r7
 800b64a:	f7fc fdbf 	bl	80081cc <_printf_i>
 800b64e:	e7eb      	b.n	800b628 <_svfiprintf_r+0x1c0>
 800b650:	0800d631 	.word	0x0800d631
 800b654:	0800d63b 	.word	0x0800d63b
 800b658:	08007c85 	.word	0x08007c85
 800b65c:	0800b3b5 	.word	0x0800b3b5
 800b660:	0800d637 	.word	0x0800d637

0800b664 <_sungetc_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	1c4b      	adds	r3, r1, #1
 800b668:	4614      	mov	r4, r2
 800b66a:	d103      	bne.n	800b674 <_sungetc_r+0x10>
 800b66c:	f04f 35ff 	mov.w	r5, #4294967295
 800b670:	4628      	mov	r0, r5
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	8993      	ldrh	r3, [r2, #12]
 800b676:	f023 0320 	bic.w	r3, r3, #32
 800b67a:	8193      	strh	r3, [r2, #12]
 800b67c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b67e:	6852      	ldr	r2, [r2, #4]
 800b680:	b2cd      	uxtb	r5, r1
 800b682:	b18b      	cbz	r3, 800b6a8 <_sungetc_r+0x44>
 800b684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b686:	4293      	cmp	r3, r2
 800b688:	dd08      	ble.n	800b69c <_sungetc_r+0x38>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	1e5a      	subs	r2, r3, #1
 800b68e:	6022      	str	r2, [r4, #0]
 800b690:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b694:	6863      	ldr	r3, [r4, #4]
 800b696:	3301      	adds	r3, #1
 800b698:	6063      	str	r3, [r4, #4]
 800b69a:	e7e9      	b.n	800b670 <_sungetc_r+0xc>
 800b69c:	4621      	mov	r1, r4
 800b69e:	f000 fd8e 	bl	800c1be <__submore>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d0f1      	beq.n	800b68a <_sungetc_r+0x26>
 800b6a6:	e7e1      	b.n	800b66c <_sungetc_r+0x8>
 800b6a8:	6921      	ldr	r1, [r4, #16]
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	b151      	cbz	r1, 800b6c4 <_sungetc_r+0x60>
 800b6ae:	4299      	cmp	r1, r3
 800b6b0:	d208      	bcs.n	800b6c4 <_sungetc_r+0x60>
 800b6b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b6b6:	42a9      	cmp	r1, r5
 800b6b8:	d104      	bne.n	800b6c4 <_sungetc_r+0x60>
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	3201      	adds	r2, #1
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	6062      	str	r2, [r4, #4]
 800b6c2:	e7d5      	b.n	800b670 <_sungetc_r+0xc>
 800b6c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6d2:	4623      	mov	r3, r4
 800b6d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e7dc      	b.n	800b698 <_sungetc_r+0x34>

0800b6de <__ssrefill_r>:
 800b6de:	b510      	push	{r4, lr}
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b6e4:	b169      	cbz	r1, 800b702 <__ssrefill_r+0x24>
 800b6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ea:	4299      	cmp	r1, r3
 800b6ec:	d001      	beq.n	800b6f2 <__ssrefill_r+0x14>
 800b6ee:	f7fe fa1d 	bl	8009b2c <_free_r>
 800b6f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b6fa:	b113      	cbz	r3, 800b702 <__ssrefill_r+0x24>
 800b6fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	bd10      	pop	{r4, pc}
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	2300      	movs	r3, #0
 800b708:	6063      	str	r3, [r4, #4]
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f043 0320 	orr.w	r3, r3, #32
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	f04f 30ff 	mov.w	r0, #4294967295
 800b716:	e7f3      	b.n	800b700 <__ssrefill_r+0x22>

0800b718 <__ssvfiscanf_r>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	460c      	mov	r4, r1
 800b71e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b722:	2100      	movs	r1, #0
 800b724:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b728:	49a6      	ldr	r1, [pc, #664]	; (800b9c4 <__ssvfiscanf_r+0x2ac>)
 800b72a:	91a0      	str	r1, [sp, #640]	; 0x280
 800b72c:	f10d 0804 	add.w	r8, sp, #4
 800b730:	49a5      	ldr	r1, [pc, #660]	; (800b9c8 <__ssvfiscanf_r+0x2b0>)
 800b732:	4fa6      	ldr	r7, [pc, #664]	; (800b9cc <__ssvfiscanf_r+0x2b4>)
 800b734:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b9d0 <__ssvfiscanf_r+0x2b8>
 800b738:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b73c:	4606      	mov	r6, r0
 800b73e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	7813      	ldrb	r3, [r2, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 815a 	beq.w	800b9fe <__ssvfiscanf_r+0x2e6>
 800b74a:	5cf9      	ldrb	r1, [r7, r3]
 800b74c:	f011 0108 	ands.w	r1, r1, #8
 800b750:	f102 0501 	add.w	r5, r2, #1
 800b754:	d019      	beq.n	800b78a <__ssvfiscanf_r+0x72>
 800b756:	6863      	ldr	r3, [r4, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dd0f      	ble.n	800b77c <__ssvfiscanf_r+0x64>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	781a      	ldrb	r2, [r3, #0]
 800b760:	5cba      	ldrb	r2, [r7, r2]
 800b762:	0712      	lsls	r2, r2, #28
 800b764:	d401      	bmi.n	800b76a <__ssvfiscanf_r+0x52>
 800b766:	462a      	mov	r2, r5
 800b768:	e7eb      	b.n	800b742 <__ssvfiscanf_r+0x2a>
 800b76a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b76c:	3201      	adds	r2, #1
 800b76e:	9245      	str	r2, [sp, #276]	; 0x114
 800b770:	6862      	ldr	r2, [r4, #4]
 800b772:	3301      	adds	r3, #1
 800b774:	3a01      	subs	r2, #1
 800b776:	6062      	str	r2, [r4, #4]
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	e7ec      	b.n	800b756 <__ssvfiscanf_r+0x3e>
 800b77c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b77e:	4621      	mov	r1, r4
 800b780:	4630      	mov	r0, r6
 800b782:	4798      	blx	r3
 800b784:	2800      	cmp	r0, #0
 800b786:	d0e9      	beq.n	800b75c <__ssvfiscanf_r+0x44>
 800b788:	e7ed      	b.n	800b766 <__ssvfiscanf_r+0x4e>
 800b78a:	2b25      	cmp	r3, #37	; 0x25
 800b78c:	d012      	beq.n	800b7b4 <__ssvfiscanf_r+0x9c>
 800b78e:	469a      	mov	sl, r3
 800b790:	6863      	ldr	r3, [r4, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f340 8091 	ble.w	800b8ba <__ssvfiscanf_r+0x1a2>
 800b798:	6822      	ldr	r2, [r4, #0]
 800b79a:	7813      	ldrb	r3, [r2, #0]
 800b79c:	4553      	cmp	r3, sl
 800b79e:	f040 812e 	bne.w	800b9fe <__ssvfiscanf_r+0x2e6>
 800b7a2:	6863      	ldr	r3, [r4, #4]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	6063      	str	r3, [r4, #4]
 800b7a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b7aa:	3201      	adds	r2, #1
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	6022      	str	r2, [r4, #0]
 800b7b0:	9345      	str	r3, [sp, #276]	; 0x114
 800b7b2:	e7d8      	b.n	800b766 <__ssvfiscanf_r+0x4e>
 800b7b4:	9141      	str	r1, [sp, #260]	; 0x104
 800b7b6:	9143      	str	r1, [sp, #268]	; 0x10c
 800b7b8:	7853      	ldrb	r3, [r2, #1]
 800b7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b7bc:	bf02      	ittt	eq
 800b7be:	2310      	moveq	r3, #16
 800b7c0:	1c95      	addeq	r5, r2, #2
 800b7c2:	9341      	streq	r3, [sp, #260]	; 0x104
 800b7c4:	220a      	movs	r2, #10
 800b7c6:	46aa      	mov	sl, r5
 800b7c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b7cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b7d0:	2b09      	cmp	r3, #9
 800b7d2:	d91c      	bls.n	800b80e <__ssvfiscanf_r+0xf6>
 800b7d4:	487e      	ldr	r0, [pc, #504]	; (800b9d0 <__ssvfiscanf_r+0x2b8>)
 800b7d6:	2203      	movs	r2, #3
 800b7d8:	f7f4 fcfa 	bl	80001d0 <memchr>
 800b7dc:	b138      	cbz	r0, 800b7ee <__ssvfiscanf_r+0xd6>
 800b7de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7e0:	eba0 0009 	sub.w	r0, r0, r9
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	4083      	lsls	r3, r0
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	9341      	str	r3, [sp, #260]	; 0x104
 800b7ec:	4655      	mov	r5, sl
 800b7ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7f2:	2b78      	cmp	r3, #120	; 0x78
 800b7f4:	d806      	bhi.n	800b804 <__ssvfiscanf_r+0xec>
 800b7f6:	2b57      	cmp	r3, #87	; 0x57
 800b7f8:	d810      	bhi.n	800b81c <__ssvfiscanf_r+0x104>
 800b7fa:	2b25      	cmp	r3, #37	; 0x25
 800b7fc:	d0c7      	beq.n	800b78e <__ssvfiscanf_r+0x76>
 800b7fe:	d857      	bhi.n	800b8b0 <__ssvfiscanf_r+0x198>
 800b800:	2b00      	cmp	r3, #0
 800b802:	d065      	beq.n	800b8d0 <__ssvfiscanf_r+0x1b8>
 800b804:	2303      	movs	r3, #3
 800b806:	9347      	str	r3, [sp, #284]	; 0x11c
 800b808:	230a      	movs	r3, #10
 800b80a:	9342      	str	r3, [sp, #264]	; 0x108
 800b80c:	e076      	b.n	800b8fc <__ssvfiscanf_r+0x1e4>
 800b80e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b810:	fb02 1103 	mla	r1, r2, r3, r1
 800b814:	3930      	subs	r1, #48	; 0x30
 800b816:	9143      	str	r1, [sp, #268]	; 0x10c
 800b818:	4655      	mov	r5, sl
 800b81a:	e7d4      	b.n	800b7c6 <__ssvfiscanf_r+0xae>
 800b81c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b820:	2a20      	cmp	r2, #32
 800b822:	d8ef      	bhi.n	800b804 <__ssvfiscanf_r+0xec>
 800b824:	a101      	add	r1, pc, #4	; (adr r1, 800b82c <__ssvfiscanf_r+0x114>)
 800b826:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b8df 	.word	0x0800b8df
 800b830:	0800b805 	.word	0x0800b805
 800b834:	0800b805 	.word	0x0800b805
 800b838:	0800b93d 	.word	0x0800b93d
 800b83c:	0800b805 	.word	0x0800b805
 800b840:	0800b805 	.word	0x0800b805
 800b844:	0800b805 	.word	0x0800b805
 800b848:	0800b805 	.word	0x0800b805
 800b84c:	0800b805 	.word	0x0800b805
 800b850:	0800b805 	.word	0x0800b805
 800b854:	0800b805 	.word	0x0800b805
 800b858:	0800b953 	.word	0x0800b953
 800b85c:	0800b939 	.word	0x0800b939
 800b860:	0800b8b7 	.word	0x0800b8b7
 800b864:	0800b8b7 	.word	0x0800b8b7
 800b868:	0800b8b7 	.word	0x0800b8b7
 800b86c:	0800b805 	.word	0x0800b805
 800b870:	0800b8f5 	.word	0x0800b8f5
 800b874:	0800b805 	.word	0x0800b805
 800b878:	0800b805 	.word	0x0800b805
 800b87c:	0800b805 	.word	0x0800b805
 800b880:	0800b805 	.word	0x0800b805
 800b884:	0800b963 	.word	0x0800b963
 800b888:	0800b931 	.word	0x0800b931
 800b88c:	0800b8d7 	.word	0x0800b8d7
 800b890:	0800b805 	.word	0x0800b805
 800b894:	0800b805 	.word	0x0800b805
 800b898:	0800b95f 	.word	0x0800b95f
 800b89c:	0800b805 	.word	0x0800b805
 800b8a0:	0800b939 	.word	0x0800b939
 800b8a4:	0800b805 	.word	0x0800b805
 800b8a8:	0800b805 	.word	0x0800b805
 800b8ac:	0800b8df 	.word	0x0800b8df
 800b8b0:	3b45      	subs	r3, #69	; 0x45
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d8a6      	bhi.n	800b804 <__ssvfiscanf_r+0xec>
 800b8b6:	2305      	movs	r3, #5
 800b8b8:	e01f      	b.n	800b8fa <__ssvfiscanf_r+0x1e2>
 800b8ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4798      	blx	r3
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f43f af68 	beq.w	800b798 <__ssvfiscanf_r+0x80>
 800b8c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f040 808d 	bne.w	800b9ea <__ssvfiscanf_r+0x2d2>
 800b8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d4:	e08f      	b.n	800b9f6 <__ssvfiscanf_r+0x2de>
 800b8d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8d8:	f042 0220 	orr.w	r2, r2, #32
 800b8dc:	9241      	str	r2, [sp, #260]	; 0x104
 800b8de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8e4:	9241      	str	r2, [sp, #260]	; 0x104
 800b8e6:	2210      	movs	r2, #16
 800b8e8:	2b6f      	cmp	r3, #111	; 0x6f
 800b8ea:	9242      	str	r2, [sp, #264]	; 0x108
 800b8ec:	bf34      	ite	cc
 800b8ee:	2303      	movcc	r3, #3
 800b8f0:	2304      	movcs	r3, #4
 800b8f2:	e002      	b.n	800b8fa <__ssvfiscanf_r+0x1e2>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	9342      	str	r3, [sp, #264]	; 0x108
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dd3d      	ble.n	800b97e <__ssvfiscanf_r+0x266>
 800b902:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b904:	0659      	lsls	r1, r3, #25
 800b906:	d404      	bmi.n	800b912 <__ssvfiscanf_r+0x1fa>
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	781a      	ldrb	r2, [r3, #0]
 800b90c:	5cba      	ldrb	r2, [r7, r2]
 800b90e:	0712      	lsls	r2, r2, #28
 800b910:	d43c      	bmi.n	800b98c <__ssvfiscanf_r+0x274>
 800b912:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b914:	2b02      	cmp	r3, #2
 800b916:	dc4b      	bgt.n	800b9b0 <__ssvfiscanf_r+0x298>
 800b918:	466b      	mov	r3, sp
 800b91a:	4622      	mov	r2, r4
 800b91c:	a941      	add	r1, sp, #260	; 0x104
 800b91e:	4630      	mov	r0, r6
 800b920:	f000 f9b6 	bl	800bc90 <_scanf_chars>
 800b924:	2801      	cmp	r0, #1
 800b926:	d06a      	beq.n	800b9fe <__ssvfiscanf_r+0x2e6>
 800b928:	2802      	cmp	r0, #2
 800b92a:	f47f af1c 	bne.w	800b766 <__ssvfiscanf_r+0x4e>
 800b92e:	e7cb      	b.n	800b8c8 <__ssvfiscanf_r+0x1b0>
 800b930:	2308      	movs	r3, #8
 800b932:	9342      	str	r3, [sp, #264]	; 0x108
 800b934:	2304      	movs	r3, #4
 800b936:	e7e0      	b.n	800b8fa <__ssvfiscanf_r+0x1e2>
 800b938:	220a      	movs	r2, #10
 800b93a:	e7d5      	b.n	800b8e8 <__ssvfiscanf_r+0x1d0>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4640      	mov	r0, r8
 800b940:	f000 fc04 	bl	800c14c <__sccl>
 800b944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b94a:	9341      	str	r3, [sp, #260]	; 0x104
 800b94c:	4605      	mov	r5, r0
 800b94e:	2301      	movs	r3, #1
 800b950:	e7d3      	b.n	800b8fa <__ssvfiscanf_r+0x1e2>
 800b952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b958:	9341      	str	r3, [sp, #260]	; 0x104
 800b95a:	2300      	movs	r3, #0
 800b95c:	e7cd      	b.n	800b8fa <__ssvfiscanf_r+0x1e2>
 800b95e:	2302      	movs	r3, #2
 800b960:	e7cb      	b.n	800b8fa <__ssvfiscanf_r+0x1e2>
 800b962:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b964:	06c3      	lsls	r3, r0, #27
 800b966:	f53f aefe 	bmi.w	800b766 <__ssvfiscanf_r+0x4e>
 800b96a:	9b00      	ldr	r3, [sp, #0]
 800b96c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b96e:	1d19      	adds	r1, r3, #4
 800b970:	9100      	str	r1, [sp, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	07c0      	lsls	r0, r0, #31
 800b976:	bf4c      	ite	mi
 800b978:	801a      	strhmi	r2, [r3, #0]
 800b97a:	601a      	strpl	r2, [r3, #0]
 800b97c:	e6f3      	b.n	800b766 <__ssvfiscanf_r+0x4e>
 800b97e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b980:	4621      	mov	r1, r4
 800b982:	4630      	mov	r0, r6
 800b984:	4798      	blx	r3
 800b986:	2800      	cmp	r0, #0
 800b988:	d0bb      	beq.n	800b902 <__ssvfiscanf_r+0x1ea>
 800b98a:	e79d      	b.n	800b8c8 <__ssvfiscanf_r+0x1b0>
 800b98c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b98e:	3201      	adds	r2, #1
 800b990:	9245      	str	r2, [sp, #276]	; 0x114
 800b992:	6862      	ldr	r2, [r4, #4]
 800b994:	3a01      	subs	r2, #1
 800b996:	2a00      	cmp	r2, #0
 800b998:	6062      	str	r2, [r4, #4]
 800b99a:	dd02      	ble.n	800b9a2 <__ssvfiscanf_r+0x28a>
 800b99c:	3301      	adds	r3, #1
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	e7b2      	b.n	800b908 <__ssvfiscanf_r+0x1f0>
 800b9a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4798      	blx	r3
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d0ac      	beq.n	800b908 <__ssvfiscanf_r+0x1f0>
 800b9ae:	e78b      	b.n	800b8c8 <__ssvfiscanf_r+0x1b0>
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	dc0f      	bgt.n	800b9d4 <__ssvfiscanf_r+0x2bc>
 800b9b4:	466b      	mov	r3, sp
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	a941      	add	r1, sp, #260	; 0x104
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f000 f9c2 	bl	800bd44 <_scanf_i>
 800b9c0:	e7b0      	b.n	800b924 <__ssvfiscanf_r+0x20c>
 800b9c2:	bf00      	nop
 800b9c4:	0800b665 	.word	0x0800b665
 800b9c8:	0800b6df 	.word	0x0800b6df
 800b9cc:	0800d531 	.word	0x0800d531
 800b9d0:	0800d637 	.word	0x0800d637
 800b9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <__ssvfiscanf_r+0x2ec>)
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f43f aec5 	beq.w	800b766 <__ssvfiscanf_r+0x4e>
 800b9dc:	466b      	mov	r3, sp
 800b9de:	4622      	mov	r2, r4
 800b9e0:	a941      	add	r1, sp, #260	; 0x104
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7fc fd14 	bl	8008410 <_scanf_float>
 800b9e8:	e79c      	b.n	800b924 <__ssvfiscanf_r+0x20c>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b9f0:	bf18      	it	ne
 800b9f2:	f04f 30ff 	movne.w	r0, #4294967295
 800b9f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ba00:	e7f9      	b.n	800b9f6 <__ssvfiscanf_r+0x2de>
 800ba02:	bf00      	nop
 800ba04:	08008411 	.word	0x08008411

0800ba08 <__sfputc_r>:
 800ba08:	6893      	ldr	r3, [r2, #8]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	b410      	push	{r4}
 800ba10:	6093      	str	r3, [r2, #8]
 800ba12:	da08      	bge.n	800ba26 <__sfputc_r+0x1e>
 800ba14:	6994      	ldr	r4, [r2, #24]
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	db01      	blt.n	800ba1e <__sfputc_r+0x16>
 800ba1a:	290a      	cmp	r1, #10
 800ba1c:	d103      	bne.n	800ba26 <__sfputc_r+0x1e>
 800ba1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba22:	f7fd b8c6 	b.w	8008bb2 <__swbuf_r>
 800ba26:	6813      	ldr	r3, [r2, #0]
 800ba28:	1c58      	adds	r0, r3, #1
 800ba2a:	6010      	str	r0, [r2, #0]
 800ba2c:	7019      	strb	r1, [r3, #0]
 800ba2e:	4608      	mov	r0, r1
 800ba30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <__sfputs_r>:
 800ba36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba38:	4606      	mov	r6, r0
 800ba3a:	460f      	mov	r7, r1
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	18d5      	adds	r5, r2, r3
 800ba40:	42ac      	cmp	r4, r5
 800ba42:	d101      	bne.n	800ba48 <__sfputs_r+0x12>
 800ba44:	2000      	movs	r0, #0
 800ba46:	e007      	b.n	800ba58 <__sfputs_r+0x22>
 800ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4c:	463a      	mov	r2, r7
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ffda 	bl	800ba08 <__sfputc_r>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d1f3      	bne.n	800ba40 <__sfputs_r+0xa>
 800ba58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba5c <_vfiprintf_r>:
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	460d      	mov	r5, r1
 800ba62:	b09d      	sub	sp, #116	; 0x74
 800ba64:	4614      	mov	r4, r2
 800ba66:	4698      	mov	r8, r3
 800ba68:	4606      	mov	r6, r0
 800ba6a:	b118      	cbz	r0, 800ba74 <_vfiprintf_r+0x18>
 800ba6c:	6a03      	ldr	r3, [r0, #32]
 800ba6e:	b90b      	cbnz	r3, 800ba74 <_vfiprintf_r+0x18>
 800ba70:	f7fc ff6a 	bl	8008948 <__sinit>
 800ba74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba76:	07d9      	lsls	r1, r3, #31
 800ba78:	d405      	bmi.n	800ba86 <_vfiprintf_r+0x2a>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	059a      	lsls	r2, r3, #22
 800ba7e:	d402      	bmi.n	800ba86 <_vfiprintf_r+0x2a>
 800ba80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba82:	f7fd f9d0 	bl	8008e26 <__retarget_lock_acquire_recursive>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	071b      	lsls	r3, r3, #28
 800ba8a:	d501      	bpl.n	800ba90 <_vfiprintf_r+0x34>
 800ba8c:	692b      	ldr	r3, [r5, #16]
 800ba8e:	b99b      	cbnz	r3, 800bab8 <_vfiprintf_r+0x5c>
 800ba90:	4629      	mov	r1, r5
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7fd f8ca 	bl	8008c2c <__swsetup_r>
 800ba98:	b170      	cbz	r0, 800bab8 <_vfiprintf_r+0x5c>
 800ba9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba9c:	07dc      	lsls	r4, r3, #31
 800ba9e:	d504      	bpl.n	800baaa <_vfiprintf_r+0x4e>
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295
 800baa4:	b01d      	add	sp, #116	; 0x74
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	0598      	lsls	r0, r3, #22
 800baae:	d4f7      	bmi.n	800baa0 <_vfiprintf_r+0x44>
 800bab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bab2:	f7fd f9b9 	bl	8008e28 <__retarget_lock_release_recursive>
 800bab6:	e7f3      	b.n	800baa0 <_vfiprintf_r+0x44>
 800bab8:	2300      	movs	r3, #0
 800baba:	9309      	str	r3, [sp, #36]	; 0x24
 800babc:	2320      	movs	r3, #32
 800babe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bac6:	2330      	movs	r3, #48	; 0x30
 800bac8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc7c <_vfiprintf_r+0x220>
 800bacc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bad0:	f04f 0901 	mov.w	r9, #1
 800bad4:	4623      	mov	r3, r4
 800bad6:	469a      	mov	sl, r3
 800bad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800badc:	b10a      	cbz	r2, 800bae2 <_vfiprintf_r+0x86>
 800bade:	2a25      	cmp	r2, #37	; 0x25
 800bae0:	d1f9      	bne.n	800bad6 <_vfiprintf_r+0x7a>
 800bae2:	ebba 0b04 	subs.w	fp, sl, r4
 800bae6:	d00b      	beq.n	800bb00 <_vfiprintf_r+0xa4>
 800bae8:	465b      	mov	r3, fp
 800baea:	4622      	mov	r2, r4
 800baec:	4629      	mov	r1, r5
 800baee:	4630      	mov	r0, r6
 800baf0:	f7ff ffa1 	bl	800ba36 <__sfputs_r>
 800baf4:	3001      	adds	r0, #1
 800baf6:	f000 80a9 	beq.w	800bc4c <_vfiprintf_r+0x1f0>
 800bafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bafc:	445a      	add	r2, fp
 800bafe:	9209      	str	r2, [sp, #36]	; 0x24
 800bb00:	f89a 3000 	ldrb.w	r3, [sl]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 80a1 	beq.w	800bc4c <_vfiprintf_r+0x1f0>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb14:	f10a 0a01 	add.w	sl, sl, #1
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	9307      	str	r3, [sp, #28]
 800bb1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb20:	931a      	str	r3, [sp, #104]	; 0x68
 800bb22:	4654      	mov	r4, sl
 800bb24:	2205      	movs	r2, #5
 800bb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2a:	4854      	ldr	r0, [pc, #336]	; (800bc7c <_vfiprintf_r+0x220>)
 800bb2c:	f7f4 fb50 	bl	80001d0 <memchr>
 800bb30:	9a04      	ldr	r2, [sp, #16]
 800bb32:	b9d8      	cbnz	r0, 800bb6c <_vfiprintf_r+0x110>
 800bb34:	06d1      	lsls	r1, r2, #27
 800bb36:	bf44      	itt	mi
 800bb38:	2320      	movmi	r3, #32
 800bb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb3e:	0713      	lsls	r3, r2, #28
 800bb40:	bf44      	itt	mi
 800bb42:	232b      	movmi	r3, #43	; 0x2b
 800bb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb48:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb4e:	d015      	beq.n	800bb7c <_vfiprintf_r+0x120>
 800bb50:	9a07      	ldr	r2, [sp, #28]
 800bb52:	4654      	mov	r4, sl
 800bb54:	2000      	movs	r0, #0
 800bb56:	f04f 0c0a 	mov.w	ip, #10
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb60:	3b30      	subs	r3, #48	; 0x30
 800bb62:	2b09      	cmp	r3, #9
 800bb64:	d94d      	bls.n	800bc02 <_vfiprintf_r+0x1a6>
 800bb66:	b1b0      	cbz	r0, 800bb96 <_vfiprintf_r+0x13a>
 800bb68:	9207      	str	r2, [sp, #28]
 800bb6a:	e014      	b.n	800bb96 <_vfiprintf_r+0x13a>
 800bb6c:	eba0 0308 	sub.w	r3, r0, r8
 800bb70:	fa09 f303 	lsl.w	r3, r9, r3
 800bb74:	4313      	orrs	r3, r2
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	46a2      	mov	sl, r4
 800bb7a:	e7d2      	b.n	800bb22 <_vfiprintf_r+0xc6>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	1d19      	adds	r1, r3, #4
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	9103      	str	r1, [sp, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfbb      	ittet	lt
 800bb88:	425b      	neglt	r3, r3
 800bb8a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb8e:	9307      	strge	r3, [sp, #28]
 800bb90:	9307      	strlt	r3, [sp, #28]
 800bb92:	bfb8      	it	lt
 800bb94:	9204      	strlt	r2, [sp, #16]
 800bb96:	7823      	ldrb	r3, [r4, #0]
 800bb98:	2b2e      	cmp	r3, #46	; 0x2e
 800bb9a:	d10c      	bne.n	800bbb6 <_vfiprintf_r+0x15a>
 800bb9c:	7863      	ldrb	r3, [r4, #1]
 800bb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bba0:	d134      	bne.n	800bc0c <_vfiprintf_r+0x1b0>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	1d1a      	adds	r2, r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	9203      	str	r2, [sp, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bfb8      	it	lt
 800bbae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbb2:	3402      	adds	r4, #2
 800bbb4:	9305      	str	r3, [sp, #20]
 800bbb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc8c <_vfiprintf_r+0x230>
 800bbba:	7821      	ldrb	r1, [r4, #0]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	f7f4 fb06 	bl	80001d0 <memchr>
 800bbc4:	b138      	cbz	r0, 800bbd6 <_vfiprintf_r+0x17a>
 800bbc6:	9b04      	ldr	r3, [sp, #16]
 800bbc8:	eba0 000a 	sub.w	r0, r0, sl
 800bbcc:	2240      	movs	r2, #64	; 0x40
 800bbce:	4082      	lsls	r2, r0
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	3401      	adds	r4, #1
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbda:	4829      	ldr	r0, [pc, #164]	; (800bc80 <_vfiprintf_r+0x224>)
 800bbdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbe0:	2206      	movs	r2, #6
 800bbe2:	f7f4 faf5 	bl	80001d0 <memchr>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d03f      	beq.n	800bc6a <_vfiprintf_r+0x20e>
 800bbea:	4b26      	ldr	r3, [pc, #152]	; (800bc84 <_vfiprintf_r+0x228>)
 800bbec:	bb1b      	cbnz	r3, 800bc36 <_vfiprintf_r+0x1da>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	3307      	adds	r3, #7
 800bbf2:	f023 0307 	bic.w	r3, r3, #7
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	9303      	str	r3, [sp, #12]
 800bbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbfc:	443b      	add	r3, r7
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	e768      	b.n	800bad4 <_vfiprintf_r+0x78>
 800bc02:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc06:	460c      	mov	r4, r1
 800bc08:	2001      	movs	r0, #1
 800bc0a:	e7a6      	b.n	800bb5a <_vfiprintf_r+0xfe>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	3401      	adds	r4, #1
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	4619      	mov	r1, r3
 800bc14:	f04f 0c0a 	mov.w	ip, #10
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc1e:	3a30      	subs	r2, #48	; 0x30
 800bc20:	2a09      	cmp	r2, #9
 800bc22:	d903      	bls.n	800bc2c <_vfiprintf_r+0x1d0>
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0c6      	beq.n	800bbb6 <_vfiprintf_r+0x15a>
 800bc28:	9105      	str	r1, [sp, #20]
 800bc2a:	e7c4      	b.n	800bbb6 <_vfiprintf_r+0x15a>
 800bc2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc30:	4604      	mov	r4, r0
 800bc32:	2301      	movs	r3, #1
 800bc34:	e7f0      	b.n	800bc18 <_vfiprintf_r+0x1bc>
 800bc36:	ab03      	add	r3, sp, #12
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <_vfiprintf_r+0x22c>)
 800bc3e:	a904      	add	r1, sp, #16
 800bc40:	4630      	mov	r0, r6
 800bc42:	f7fc f81f 	bl	8007c84 <_printf_float>
 800bc46:	4607      	mov	r7, r0
 800bc48:	1c78      	adds	r0, r7, #1
 800bc4a:	d1d6      	bne.n	800bbfa <_vfiprintf_r+0x19e>
 800bc4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc4e:	07d9      	lsls	r1, r3, #31
 800bc50:	d405      	bmi.n	800bc5e <_vfiprintf_r+0x202>
 800bc52:	89ab      	ldrh	r3, [r5, #12]
 800bc54:	059a      	lsls	r2, r3, #22
 800bc56:	d402      	bmi.n	800bc5e <_vfiprintf_r+0x202>
 800bc58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc5a:	f7fd f8e5 	bl	8008e28 <__retarget_lock_release_recursive>
 800bc5e:	89ab      	ldrh	r3, [r5, #12]
 800bc60:	065b      	lsls	r3, r3, #25
 800bc62:	f53f af1d 	bmi.w	800baa0 <_vfiprintf_r+0x44>
 800bc66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc68:	e71c      	b.n	800baa4 <_vfiprintf_r+0x48>
 800bc6a:	ab03      	add	r3, sp, #12
 800bc6c:	9300      	str	r3, [sp, #0]
 800bc6e:	462a      	mov	r2, r5
 800bc70:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <_vfiprintf_r+0x22c>)
 800bc72:	a904      	add	r1, sp, #16
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7fc faa9 	bl	80081cc <_printf_i>
 800bc7a:	e7e4      	b.n	800bc46 <_vfiprintf_r+0x1ea>
 800bc7c:	0800d631 	.word	0x0800d631
 800bc80:	0800d63b 	.word	0x0800d63b
 800bc84:	08007c85 	.word	0x08007c85
 800bc88:	0800ba37 	.word	0x0800ba37
 800bc8c:	0800d637 	.word	0x0800d637

0800bc90 <_scanf_chars>:
 800bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4615      	mov	r5, r2
 800bc96:	688a      	ldr	r2, [r1, #8]
 800bc98:	4680      	mov	r8, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	b932      	cbnz	r2, 800bcac <_scanf_chars+0x1c>
 800bc9e:	698a      	ldr	r2, [r1, #24]
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	bf0c      	ite	eq
 800bca4:	2201      	moveq	r2, #1
 800bca6:	f04f 32ff 	movne.w	r2, #4294967295
 800bcaa:	608a      	str	r2, [r1, #8]
 800bcac:	6822      	ldr	r2, [r4, #0]
 800bcae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bd40 <_scanf_chars+0xb0>
 800bcb2:	06d1      	lsls	r1, r2, #27
 800bcb4:	bf5f      	itttt	pl
 800bcb6:	681a      	ldrpl	r2, [r3, #0]
 800bcb8:	1d11      	addpl	r1, r2, #4
 800bcba:	6019      	strpl	r1, [r3, #0]
 800bcbc:	6816      	ldrpl	r6, [r2, #0]
 800bcbe:	2700      	movs	r7, #0
 800bcc0:	69a0      	ldr	r0, [r4, #24]
 800bcc2:	b188      	cbz	r0, 800bce8 <_scanf_chars+0x58>
 800bcc4:	2801      	cmp	r0, #1
 800bcc6:	d107      	bne.n	800bcd8 <_scanf_chars+0x48>
 800bcc8:	682a      	ldr	r2, [r5, #0]
 800bcca:	7811      	ldrb	r1, [r2, #0]
 800bccc:	6962      	ldr	r2, [r4, #20]
 800bcce:	5c52      	ldrb	r2, [r2, r1]
 800bcd0:	b952      	cbnz	r2, 800bce8 <_scanf_chars+0x58>
 800bcd2:	2f00      	cmp	r7, #0
 800bcd4:	d031      	beq.n	800bd3a <_scanf_chars+0xaa>
 800bcd6:	e022      	b.n	800bd1e <_scanf_chars+0x8e>
 800bcd8:	2802      	cmp	r0, #2
 800bcda:	d120      	bne.n	800bd1e <_scanf_chars+0x8e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bce4:	071b      	lsls	r3, r3, #28
 800bce6:	d41a      	bmi.n	800bd1e <_scanf_chars+0x8e>
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	06da      	lsls	r2, r3, #27
 800bcec:	bf5e      	ittt	pl
 800bcee:	682b      	ldrpl	r3, [r5, #0]
 800bcf0:	781b      	ldrbpl	r3, [r3, #0]
 800bcf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bcf6:	682a      	ldr	r2, [r5, #0]
 800bcf8:	686b      	ldr	r3, [r5, #4]
 800bcfa:	3201      	adds	r2, #1
 800bcfc:	602a      	str	r2, [r5, #0]
 800bcfe:	68a2      	ldr	r2, [r4, #8]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	3a01      	subs	r2, #1
 800bd04:	606b      	str	r3, [r5, #4]
 800bd06:	3701      	adds	r7, #1
 800bd08:	60a2      	str	r2, [r4, #8]
 800bd0a:	b142      	cbz	r2, 800bd1e <_scanf_chars+0x8e>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dcd7      	bgt.n	800bcc0 <_scanf_chars+0x30>
 800bd10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd14:	4629      	mov	r1, r5
 800bd16:	4640      	mov	r0, r8
 800bd18:	4798      	blx	r3
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d0d0      	beq.n	800bcc0 <_scanf_chars+0x30>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	f013 0310 	ands.w	r3, r3, #16
 800bd24:	d105      	bne.n	800bd32 <_scanf_chars+0xa2>
 800bd26:	68e2      	ldr	r2, [r4, #12]
 800bd28:	3201      	adds	r2, #1
 800bd2a:	60e2      	str	r2, [r4, #12]
 800bd2c:	69a2      	ldr	r2, [r4, #24]
 800bd2e:	b102      	cbz	r2, 800bd32 <_scanf_chars+0xa2>
 800bd30:	7033      	strb	r3, [r6, #0]
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	443b      	add	r3, r7
 800bd36:	6123      	str	r3, [r4, #16]
 800bd38:	2000      	movs	r0, #0
 800bd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800d531 	.word	0x0800d531

0800bd44 <_scanf_i>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	4698      	mov	r8, r3
 800bd4a:	4b74      	ldr	r3, [pc, #464]	; (800bf1c <_scanf_i+0x1d8>)
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	4682      	mov	sl, r0
 800bd50:	4616      	mov	r6, r2
 800bd52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd56:	b087      	sub	sp, #28
 800bd58:	ab03      	add	r3, sp, #12
 800bd5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd5e:	4b70      	ldr	r3, [pc, #448]	; (800bf20 <_scanf_i+0x1dc>)
 800bd60:	69a1      	ldr	r1, [r4, #24]
 800bd62:	4a70      	ldr	r2, [pc, #448]	; (800bf24 <_scanf_i+0x1e0>)
 800bd64:	2903      	cmp	r1, #3
 800bd66:	bf18      	it	ne
 800bd68:	461a      	movne	r2, r3
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	9201      	str	r2, [sp, #4]
 800bd6e:	1e5a      	subs	r2, r3, #1
 800bd70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd74:	bf88      	it	hi
 800bd76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd7a:	4627      	mov	r7, r4
 800bd7c:	bf82      	ittt	hi
 800bd7e:	eb03 0905 	addhi.w	r9, r3, r5
 800bd82:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd86:	60a3      	strhi	r3, [r4, #8]
 800bd88:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bd8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bd90:	bf98      	it	ls
 800bd92:	f04f 0900 	movls.w	r9, #0
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	463d      	mov	r5, r7
 800bd9a:	f04f 0b00 	mov.w	fp, #0
 800bd9e:	6831      	ldr	r1, [r6, #0]
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	7809      	ldrb	r1, [r1, #0]
 800bda4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bda8:	2202      	movs	r2, #2
 800bdaa:	f7f4 fa11 	bl	80001d0 <memchr>
 800bdae:	b328      	cbz	r0, 800bdfc <_scanf_i+0xb8>
 800bdb0:	f1bb 0f01 	cmp.w	fp, #1
 800bdb4:	d159      	bne.n	800be6a <_scanf_i+0x126>
 800bdb6:	6862      	ldr	r2, [r4, #4]
 800bdb8:	b92a      	cbnz	r2, 800bdc6 <_scanf_i+0x82>
 800bdba:	6822      	ldr	r2, [r4, #0]
 800bdbc:	2308      	movs	r3, #8
 800bdbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdc2:	6063      	str	r3, [r4, #4]
 800bdc4:	6022      	str	r2, [r4, #0]
 800bdc6:	6822      	ldr	r2, [r4, #0]
 800bdc8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bdcc:	6022      	str	r2, [r4, #0]
 800bdce:	68a2      	ldr	r2, [r4, #8]
 800bdd0:	1e51      	subs	r1, r2, #1
 800bdd2:	60a1      	str	r1, [r4, #8]
 800bdd4:	b192      	cbz	r2, 800bdfc <_scanf_i+0xb8>
 800bdd6:	6832      	ldr	r2, [r6, #0]
 800bdd8:	1c51      	adds	r1, r2, #1
 800bdda:	6031      	str	r1, [r6, #0]
 800bddc:	7812      	ldrb	r2, [r2, #0]
 800bdde:	f805 2b01 	strb.w	r2, [r5], #1
 800bde2:	6872      	ldr	r2, [r6, #4]
 800bde4:	3a01      	subs	r2, #1
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	6072      	str	r2, [r6, #4]
 800bdea:	dc07      	bgt.n	800bdfc <_scanf_i+0xb8>
 800bdec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	4650      	mov	r0, sl
 800bdf4:	4790      	blx	r2
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f040 8085 	bne.w	800bf06 <_scanf_i+0x1c2>
 800bdfc:	f10b 0b01 	add.w	fp, fp, #1
 800be00:	f1bb 0f03 	cmp.w	fp, #3
 800be04:	d1cb      	bne.n	800bd9e <_scanf_i+0x5a>
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	b90b      	cbnz	r3, 800be0e <_scanf_i+0xca>
 800be0a:	230a      	movs	r3, #10
 800be0c:	6063      	str	r3, [r4, #4]
 800be0e:	6863      	ldr	r3, [r4, #4]
 800be10:	4945      	ldr	r1, [pc, #276]	; (800bf28 <_scanf_i+0x1e4>)
 800be12:	6960      	ldr	r0, [r4, #20]
 800be14:	1ac9      	subs	r1, r1, r3
 800be16:	f000 f999 	bl	800c14c <__sccl>
 800be1a:	f04f 0b00 	mov.w	fp, #0
 800be1e:	68a3      	ldr	r3, [r4, #8]
 800be20:	6822      	ldr	r2, [r4, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d03d      	beq.n	800bea2 <_scanf_i+0x15e>
 800be26:	6831      	ldr	r1, [r6, #0]
 800be28:	6960      	ldr	r0, [r4, #20]
 800be2a:	f891 c000 	ldrb.w	ip, [r1]
 800be2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be32:	2800      	cmp	r0, #0
 800be34:	d035      	beq.n	800bea2 <_scanf_i+0x15e>
 800be36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be3a:	d124      	bne.n	800be86 <_scanf_i+0x142>
 800be3c:	0510      	lsls	r0, r2, #20
 800be3e:	d522      	bpl.n	800be86 <_scanf_i+0x142>
 800be40:	f10b 0b01 	add.w	fp, fp, #1
 800be44:	f1b9 0f00 	cmp.w	r9, #0
 800be48:	d003      	beq.n	800be52 <_scanf_i+0x10e>
 800be4a:	3301      	adds	r3, #1
 800be4c:	f109 39ff 	add.w	r9, r9, #4294967295
 800be50:	60a3      	str	r3, [r4, #8]
 800be52:	6873      	ldr	r3, [r6, #4]
 800be54:	3b01      	subs	r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	6073      	str	r3, [r6, #4]
 800be5a:	dd1b      	ble.n	800be94 <_scanf_i+0x150>
 800be5c:	6833      	ldr	r3, [r6, #0]
 800be5e:	3301      	adds	r3, #1
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	3b01      	subs	r3, #1
 800be66:	60a3      	str	r3, [r4, #8]
 800be68:	e7d9      	b.n	800be1e <_scanf_i+0xda>
 800be6a:	f1bb 0f02 	cmp.w	fp, #2
 800be6e:	d1ae      	bne.n	800bdce <_scanf_i+0x8a>
 800be70:	6822      	ldr	r2, [r4, #0]
 800be72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be7a:	d1bf      	bne.n	800bdfc <_scanf_i+0xb8>
 800be7c:	2310      	movs	r3, #16
 800be7e:	6063      	str	r3, [r4, #4]
 800be80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be84:	e7a2      	b.n	800bdcc <_scanf_i+0x88>
 800be86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be8a:	6022      	str	r2, [r4, #0]
 800be8c:	780b      	ldrb	r3, [r1, #0]
 800be8e:	f805 3b01 	strb.w	r3, [r5], #1
 800be92:	e7de      	b.n	800be52 <_scanf_i+0x10e>
 800be94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be98:	4631      	mov	r1, r6
 800be9a:	4650      	mov	r0, sl
 800be9c:	4798      	blx	r3
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d0df      	beq.n	800be62 <_scanf_i+0x11e>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	05d9      	lsls	r1, r3, #23
 800bea6:	d50d      	bpl.n	800bec4 <_scanf_i+0x180>
 800bea8:	42bd      	cmp	r5, r7
 800beaa:	d909      	bls.n	800bec0 <_scanf_i+0x17c>
 800beac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800beb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800beb4:	4632      	mov	r2, r6
 800beb6:	4650      	mov	r0, sl
 800beb8:	4798      	blx	r3
 800beba:	f105 39ff 	add.w	r9, r5, #4294967295
 800bebe:	464d      	mov	r5, r9
 800bec0:	42bd      	cmp	r5, r7
 800bec2:	d028      	beq.n	800bf16 <_scanf_i+0x1d2>
 800bec4:	6822      	ldr	r2, [r4, #0]
 800bec6:	f012 0210 	ands.w	r2, r2, #16
 800beca:	d113      	bne.n	800bef4 <_scanf_i+0x1b0>
 800becc:	702a      	strb	r2, [r5, #0]
 800bece:	6863      	ldr	r3, [r4, #4]
 800bed0:	9e01      	ldr	r6, [sp, #4]
 800bed2:	4639      	mov	r1, r7
 800bed4:	4650      	mov	r0, sl
 800bed6:	47b0      	blx	r6
 800bed8:	f8d8 3000 	ldr.w	r3, [r8]
 800bedc:	6821      	ldr	r1, [r4, #0]
 800bede:	1d1a      	adds	r2, r3, #4
 800bee0:	f8c8 2000 	str.w	r2, [r8]
 800bee4:	f011 0f20 	tst.w	r1, #32
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	d00f      	beq.n	800bf0c <_scanf_i+0x1c8>
 800beec:	6018      	str	r0, [r3, #0]
 800beee:	68e3      	ldr	r3, [r4, #12]
 800bef0:	3301      	adds	r3, #1
 800bef2:	60e3      	str	r3, [r4, #12]
 800bef4:	6923      	ldr	r3, [r4, #16]
 800bef6:	1bed      	subs	r5, r5, r7
 800bef8:	445d      	add	r5, fp
 800befa:	442b      	add	r3, r5
 800befc:	6123      	str	r3, [r4, #16]
 800befe:	2000      	movs	r0, #0
 800bf00:	b007      	add	sp, #28
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	f04f 0b00 	mov.w	fp, #0
 800bf0a:	e7ca      	b.n	800bea2 <_scanf_i+0x15e>
 800bf0c:	07ca      	lsls	r2, r1, #31
 800bf0e:	bf4c      	ite	mi
 800bf10:	8018      	strhmi	r0, [r3, #0]
 800bf12:	6018      	strpl	r0, [r3, #0]
 800bf14:	e7eb      	b.n	800beee <_scanf_i+0x1aa>
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7f2      	b.n	800bf00 <_scanf_i+0x1bc>
 800bf1a:	bf00      	nop
 800bf1c:	0800d26c 	.word	0x0800d26c
 800bf20:	0800cb75 	.word	0x0800cb75
 800bf24:	0800b3b1 	.word	0x0800b3b1
 800bf28:	0800d652 	.word	0x0800d652

0800bf2c <__sflush_r>:
 800bf2c:	898a      	ldrh	r2, [r1, #12]
 800bf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf32:	4605      	mov	r5, r0
 800bf34:	0710      	lsls	r0, r2, #28
 800bf36:	460c      	mov	r4, r1
 800bf38:	d458      	bmi.n	800bfec <__sflush_r+0xc0>
 800bf3a:	684b      	ldr	r3, [r1, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dc05      	bgt.n	800bf4c <__sflush_r+0x20>
 800bf40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dc02      	bgt.n	800bf4c <__sflush_r+0x20>
 800bf46:	2000      	movs	r0, #0
 800bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	d0f9      	beq.n	800bf46 <__sflush_r+0x1a>
 800bf52:	2300      	movs	r3, #0
 800bf54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf58:	682f      	ldr	r7, [r5, #0]
 800bf5a:	6a21      	ldr	r1, [r4, #32]
 800bf5c:	602b      	str	r3, [r5, #0]
 800bf5e:	d032      	beq.n	800bfc6 <__sflush_r+0x9a>
 800bf60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	075a      	lsls	r2, r3, #29
 800bf66:	d505      	bpl.n	800bf74 <__sflush_r+0x48>
 800bf68:	6863      	ldr	r3, [r4, #4]
 800bf6a:	1ac0      	subs	r0, r0, r3
 800bf6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf6e:	b10b      	cbz	r3, 800bf74 <__sflush_r+0x48>
 800bf70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf72:	1ac0      	subs	r0, r0, r3
 800bf74:	2300      	movs	r3, #0
 800bf76:	4602      	mov	r2, r0
 800bf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf7a:	6a21      	ldr	r1, [r4, #32]
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	47b0      	blx	r6
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	d106      	bne.n	800bf94 <__sflush_r+0x68>
 800bf86:	6829      	ldr	r1, [r5, #0]
 800bf88:	291d      	cmp	r1, #29
 800bf8a:	d82b      	bhi.n	800bfe4 <__sflush_r+0xb8>
 800bf8c:	4a29      	ldr	r2, [pc, #164]	; (800c034 <__sflush_r+0x108>)
 800bf8e:	410a      	asrs	r2, r1
 800bf90:	07d6      	lsls	r6, r2, #31
 800bf92:	d427      	bmi.n	800bfe4 <__sflush_r+0xb8>
 800bf94:	2200      	movs	r2, #0
 800bf96:	6062      	str	r2, [r4, #4]
 800bf98:	04d9      	lsls	r1, r3, #19
 800bf9a:	6922      	ldr	r2, [r4, #16]
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	d504      	bpl.n	800bfaa <__sflush_r+0x7e>
 800bfa0:	1c42      	adds	r2, r0, #1
 800bfa2:	d101      	bne.n	800bfa8 <__sflush_r+0x7c>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b903      	cbnz	r3, 800bfaa <__sflush_r+0x7e>
 800bfa8:	6560      	str	r0, [r4, #84]	; 0x54
 800bfaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfac:	602f      	str	r7, [r5, #0]
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d0c9      	beq.n	800bf46 <__sflush_r+0x1a>
 800bfb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	d002      	beq.n	800bfc0 <__sflush_r+0x94>
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f7fd fdb6 	bl	8009b2c <_free_r>
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bfc4:	e7c0      	b.n	800bf48 <__sflush_r+0x1c>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b0      	blx	r6
 800bfcc:	1c41      	adds	r1, r0, #1
 800bfce:	d1c8      	bne.n	800bf62 <__sflush_r+0x36>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0c5      	beq.n	800bf62 <__sflush_r+0x36>
 800bfd6:	2b1d      	cmp	r3, #29
 800bfd8:	d001      	beq.n	800bfde <__sflush_r+0xb2>
 800bfda:	2b16      	cmp	r3, #22
 800bfdc:	d101      	bne.n	800bfe2 <__sflush_r+0xb6>
 800bfde:	602f      	str	r7, [r5, #0]
 800bfe0:	e7b1      	b.n	800bf46 <__sflush_r+0x1a>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	e7ad      	b.n	800bf48 <__sflush_r+0x1c>
 800bfec:	690f      	ldr	r7, [r1, #16]
 800bfee:	2f00      	cmp	r7, #0
 800bff0:	d0a9      	beq.n	800bf46 <__sflush_r+0x1a>
 800bff2:	0793      	lsls	r3, r2, #30
 800bff4:	680e      	ldr	r6, [r1, #0]
 800bff6:	bf08      	it	eq
 800bff8:	694b      	ldreq	r3, [r1, #20]
 800bffa:	600f      	str	r7, [r1, #0]
 800bffc:	bf18      	it	ne
 800bffe:	2300      	movne	r3, #0
 800c000:	eba6 0807 	sub.w	r8, r6, r7
 800c004:	608b      	str	r3, [r1, #8]
 800c006:	f1b8 0f00 	cmp.w	r8, #0
 800c00a:	dd9c      	ble.n	800bf46 <__sflush_r+0x1a>
 800c00c:	6a21      	ldr	r1, [r4, #32]
 800c00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c010:	4643      	mov	r3, r8
 800c012:	463a      	mov	r2, r7
 800c014:	4628      	mov	r0, r5
 800c016:	47b0      	blx	r6
 800c018:	2800      	cmp	r0, #0
 800c01a:	dc06      	bgt.n	800c02a <__sflush_r+0xfe>
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	f04f 30ff 	mov.w	r0, #4294967295
 800c028:	e78e      	b.n	800bf48 <__sflush_r+0x1c>
 800c02a:	4407      	add	r7, r0
 800c02c:	eba8 0800 	sub.w	r8, r8, r0
 800c030:	e7e9      	b.n	800c006 <__sflush_r+0xda>
 800c032:	bf00      	nop
 800c034:	dfbffffe 	.word	0xdfbffffe

0800c038 <_fflush_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	690b      	ldr	r3, [r1, #16]
 800c03c:	4605      	mov	r5, r0
 800c03e:	460c      	mov	r4, r1
 800c040:	b913      	cbnz	r3, 800c048 <_fflush_r+0x10>
 800c042:	2500      	movs	r5, #0
 800c044:	4628      	mov	r0, r5
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	b118      	cbz	r0, 800c052 <_fflush_r+0x1a>
 800c04a:	6a03      	ldr	r3, [r0, #32]
 800c04c:	b90b      	cbnz	r3, 800c052 <_fflush_r+0x1a>
 800c04e:	f7fc fc7b 	bl	8008948 <__sinit>
 800c052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0f3      	beq.n	800c042 <_fflush_r+0xa>
 800c05a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c05c:	07d0      	lsls	r0, r2, #31
 800c05e:	d404      	bmi.n	800c06a <_fflush_r+0x32>
 800c060:	0599      	lsls	r1, r3, #22
 800c062:	d402      	bmi.n	800c06a <_fflush_r+0x32>
 800c064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c066:	f7fc fede 	bl	8008e26 <__retarget_lock_acquire_recursive>
 800c06a:	4628      	mov	r0, r5
 800c06c:	4621      	mov	r1, r4
 800c06e:	f7ff ff5d 	bl	800bf2c <__sflush_r>
 800c072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c074:	07da      	lsls	r2, r3, #31
 800c076:	4605      	mov	r5, r0
 800c078:	d4e4      	bmi.n	800c044 <_fflush_r+0xc>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	059b      	lsls	r3, r3, #22
 800c07e:	d4e1      	bmi.n	800c044 <_fflush_r+0xc>
 800c080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c082:	f7fc fed1 	bl	8008e28 <__retarget_lock_release_recursive>
 800c086:	e7dd      	b.n	800c044 <_fflush_r+0xc>

0800c088 <__swhatbuf_r>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	460c      	mov	r4, r1
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2900      	cmp	r1, #0
 800c092:	b096      	sub	sp, #88	; 0x58
 800c094:	4615      	mov	r5, r2
 800c096:	461e      	mov	r6, r3
 800c098:	da0d      	bge.n	800c0b6 <__swhatbuf_r+0x2e>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0a0:	f04f 0100 	mov.w	r1, #0
 800c0a4:	bf0c      	ite	eq
 800c0a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0aa:	2340      	movne	r3, #64	; 0x40
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	6031      	str	r1, [r6, #0]
 800c0b0:	602b      	str	r3, [r5, #0]
 800c0b2:	b016      	add	sp, #88	; 0x58
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	466a      	mov	r2, sp
 800c0b8:	f000 f8d6 	bl	800c268 <_fstat_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	dbec      	blt.n	800c09a <__swhatbuf_r+0x12>
 800c0c0:	9901      	ldr	r1, [sp, #4]
 800c0c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0ca:	4259      	negs	r1, r3
 800c0cc:	4159      	adcs	r1, r3
 800c0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d2:	e7eb      	b.n	800c0ac <__swhatbuf_r+0x24>

0800c0d4 <__smakebuf_r>:
 800c0d4:	898b      	ldrh	r3, [r1, #12]
 800c0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0d8:	079d      	lsls	r5, r3, #30
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	d507      	bpl.n	800c0f0 <__smakebuf_r+0x1c>
 800c0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	b002      	add	sp, #8
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	ab01      	add	r3, sp, #4
 800c0f2:	466a      	mov	r2, sp
 800c0f4:	f7ff ffc8 	bl	800c088 <__swhatbuf_r>
 800c0f8:	9900      	ldr	r1, [sp, #0]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fd fd89 	bl	8009c14 <_malloc_r>
 800c102:	b948      	cbnz	r0, 800c118 <__smakebuf_r+0x44>
 800c104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c108:	059a      	lsls	r2, r3, #22
 800c10a:	d4ef      	bmi.n	800c0ec <__smakebuf_r+0x18>
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	f043 0302 	orr.w	r3, r3, #2
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	e7e3      	b.n	800c0e0 <__smakebuf_r+0xc>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	6020      	str	r0, [r4, #0]
 800c11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	9b00      	ldr	r3, [sp, #0]
 800c124:	6163      	str	r3, [r4, #20]
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	6120      	str	r0, [r4, #16]
 800c12a:	b15b      	cbz	r3, 800c144 <__smakebuf_r+0x70>
 800c12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c130:	4630      	mov	r0, r6
 800c132:	f000 f8ab 	bl	800c28c <_isatty_r>
 800c136:	b128      	cbz	r0, 800c144 <__smakebuf_r+0x70>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f023 0303 	bic.w	r3, r3, #3
 800c13e:	f043 0301 	orr.w	r3, r3, #1
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	431d      	orrs	r5, r3
 800c148:	81a5      	strh	r5, [r4, #12]
 800c14a:	e7cf      	b.n	800c0ec <__smakebuf_r+0x18>

0800c14c <__sccl>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	780b      	ldrb	r3, [r1, #0]
 800c150:	4604      	mov	r4, r0
 800c152:	2b5e      	cmp	r3, #94	; 0x5e
 800c154:	bf0b      	itete	eq
 800c156:	784b      	ldrbeq	r3, [r1, #1]
 800c158:	1c4a      	addne	r2, r1, #1
 800c15a:	1c8a      	addeq	r2, r1, #2
 800c15c:	2100      	movne	r1, #0
 800c15e:	bf08      	it	eq
 800c160:	2101      	moveq	r1, #1
 800c162:	3801      	subs	r0, #1
 800c164:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c168:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c16c:	42a8      	cmp	r0, r5
 800c16e:	d1fb      	bne.n	800c168 <__sccl+0x1c>
 800c170:	b90b      	cbnz	r3, 800c176 <__sccl+0x2a>
 800c172:	1e50      	subs	r0, r2, #1
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	f081 0101 	eor.w	r1, r1, #1
 800c17a:	54e1      	strb	r1, [r4, r3]
 800c17c:	4610      	mov	r0, r2
 800c17e:	4602      	mov	r2, r0
 800c180:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c184:	2d2d      	cmp	r5, #45	; 0x2d
 800c186:	d005      	beq.n	800c194 <__sccl+0x48>
 800c188:	2d5d      	cmp	r5, #93	; 0x5d
 800c18a:	d016      	beq.n	800c1ba <__sccl+0x6e>
 800c18c:	2d00      	cmp	r5, #0
 800c18e:	d0f1      	beq.n	800c174 <__sccl+0x28>
 800c190:	462b      	mov	r3, r5
 800c192:	e7f2      	b.n	800c17a <__sccl+0x2e>
 800c194:	7846      	ldrb	r6, [r0, #1]
 800c196:	2e5d      	cmp	r6, #93	; 0x5d
 800c198:	d0fa      	beq.n	800c190 <__sccl+0x44>
 800c19a:	42b3      	cmp	r3, r6
 800c19c:	dcf8      	bgt.n	800c190 <__sccl+0x44>
 800c19e:	3002      	adds	r0, #2
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	3201      	adds	r2, #1
 800c1a4:	4296      	cmp	r6, r2
 800c1a6:	54a1      	strb	r1, [r4, r2]
 800c1a8:	dcfb      	bgt.n	800c1a2 <__sccl+0x56>
 800c1aa:	1af2      	subs	r2, r6, r3
 800c1ac:	3a01      	subs	r2, #1
 800c1ae:	1c5d      	adds	r5, r3, #1
 800c1b0:	42b3      	cmp	r3, r6
 800c1b2:	bfa8      	it	ge
 800c1b4:	2200      	movge	r2, #0
 800c1b6:	18ab      	adds	r3, r5, r2
 800c1b8:	e7e1      	b.n	800c17e <__sccl+0x32>
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	e7da      	b.n	800c174 <__sccl+0x28>

0800c1be <__submore>:
 800c1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c1c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	d11d      	bne.n	800c20a <__submore+0x4c>
 800c1ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c1d2:	f7fd fd1f 	bl	8009c14 <_malloc_r>
 800c1d6:	b918      	cbnz	r0, 800c1e0 <__submore+0x22>
 800c1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1e4:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c1ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ec:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c1f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1f4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c1f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1fc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c200:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c204:	6020      	str	r0, [r4, #0]
 800c206:	2000      	movs	r0, #0
 800c208:	e7e8      	b.n	800c1dc <__submore+0x1e>
 800c20a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c20c:	0077      	lsls	r7, r6, #1
 800c20e:	463a      	mov	r2, r7
 800c210:	f000 fc0f 	bl	800ca32 <_realloc_r>
 800c214:	4605      	mov	r5, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	d0de      	beq.n	800c1d8 <__submore+0x1a>
 800c21a:	eb00 0806 	add.w	r8, r0, r6
 800c21e:	4601      	mov	r1, r0
 800c220:	4632      	mov	r2, r6
 800c222:	4640      	mov	r0, r8
 800c224:	f000 f852 	bl	800c2cc <memcpy>
 800c228:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c22c:	f8c4 8000 	str.w	r8, [r4]
 800c230:	e7e9      	b.n	800c206 <__submore+0x48>

0800c232 <memmove>:
 800c232:	4288      	cmp	r0, r1
 800c234:	b510      	push	{r4, lr}
 800c236:	eb01 0402 	add.w	r4, r1, r2
 800c23a:	d902      	bls.n	800c242 <memmove+0x10>
 800c23c:	4284      	cmp	r4, r0
 800c23e:	4623      	mov	r3, r4
 800c240:	d807      	bhi.n	800c252 <memmove+0x20>
 800c242:	1e43      	subs	r3, r0, #1
 800c244:	42a1      	cmp	r1, r4
 800c246:	d008      	beq.n	800c25a <memmove+0x28>
 800c248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c24c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c250:	e7f8      	b.n	800c244 <memmove+0x12>
 800c252:	4402      	add	r2, r0
 800c254:	4601      	mov	r1, r0
 800c256:	428a      	cmp	r2, r1
 800c258:	d100      	bne.n	800c25c <memmove+0x2a>
 800c25a:	bd10      	pop	{r4, pc}
 800c25c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c260:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c264:	e7f7      	b.n	800c256 <memmove+0x24>
	...

0800c268 <_fstat_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d07      	ldr	r5, [pc, #28]	; (800c288 <_fstat_r+0x20>)
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	4611      	mov	r1, r2
 800c274:	602b      	str	r3, [r5, #0]
 800c276:	f7f7 f8bc 	bl	80033f2 <_fstat>
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	d102      	bne.n	800c284 <_fstat_r+0x1c>
 800c27e:	682b      	ldr	r3, [r5, #0]
 800c280:	b103      	cbz	r3, 800c284 <_fstat_r+0x1c>
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	bd38      	pop	{r3, r4, r5, pc}
 800c286:	bf00      	nop
 800c288:	20000cdc 	.word	0x20000cdc

0800c28c <_isatty_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d06      	ldr	r5, [pc, #24]	; (800c2a8 <_isatty_r+0x1c>)
 800c290:	2300      	movs	r3, #0
 800c292:	4604      	mov	r4, r0
 800c294:	4608      	mov	r0, r1
 800c296:	602b      	str	r3, [r5, #0]
 800c298:	f7f7 f8bb 	bl	8003412 <_isatty>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_isatty_r+0x1a>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_isatty_r+0x1a>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	20000cdc 	.word	0x20000cdc

0800c2ac <_sbrk_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d06      	ldr	r5, [pc, #24]	; (800c2c8 <_sbrk_r+0x1c>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f7 f8c4 	bl	8003444 <_sbrk>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_sbrk_r+0x1a>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_sbrk_r+0x1a>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20000cdc 	.word	0x20000cdc

0800c2cc <memcpy>:
 800c2cc:	440a      	add	r2, r1
 800c2ce:	4291      	cmp	r1, r2
 800c2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2d4:	d100      	bne.n	800c2d8 <memcpy+0xc>
 800c2d6:	4770      	bx	lr
 800c2d8:	b510      	push	{r4, lr}
 800c2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2e2:	4291      	cmp	r1, r2
 800c2e4:	d1f9      	bne.n	800c2da <memcpy+0xe>
 800c2e6:	bd10      	pop	{r4, pc}

0800c2e8 <nan>:
 800c2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2f0 <nan+0x8>
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	00000000 	.word	0x00000000
 800c2f4:	7ff80000 	.word	0x7ff80000

0800c2f8 <__assert_func>:
 800c2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2fa:	4614      	mov	r4, r2
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	4b09      	ldr	r3, [pc, #36]	; (800c324 <__assert_func+0x2c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4605      	mov	r5, r0
 800c304:	68d8      	ldr	r0, [r3, #12]
 800c306:	b14c      	cbz	r4, 800c31c <__assert_func+0x24>
 800c308:	4b07      	ldr	r3, [pc, #28]	; (800c328 <__assert_func+0x30>)
 800c30a:	9100      	str	r1, [sp, #0]
 800c30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c310:	4906      	ldr	r1, [pc, #24]	; (800c32c <__assert_func+0x34>)
 800c312:	462b      	mov	r3, r5
 800c314:	f000 fc3e 	bl	800cb94 <fiprintf>
 800c318:	f000 fc4e 	bl	800cbb8 <abort>
 800c31c:	4b04      	ldr	r3, [pc, #16]	; (800c330 <__assert_func+0x38>)
 800c31e:	461c      	mov	r4, r3
 800c320:	e7f3      	b.n	800c30a <__assert_func+0x12>
 800c322:	bf00      	nop
 800c324:	20000074 	.word	0x20000074
 800c328:	0800d665 	.word	0x0800d665
 800c32c:	0800d672 	.word	0x0800d672
 800c330:	0800d6a0 	.word	0x0800d6a0

0800c334 <_calloc_r>:
 800c334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c336:	fba1 2402 	umull	r2, r4, r1, r2
 800c33a:	b94c      	cbnz	r4, 800c350 <_calloc_r+0x1c>
 800c33c:	4611      	mov	r1, r2
 800c33e:	9201      	str	r2, [sp, #4]
 800c340:	f7fd fc68 	bl	8009c14 <_malloc_r>
 800c344:	9a01      	ldr	r2, [sp, #4]
 800c346:	4605      	mov	r5, r0
 800c348:	b930      	cbnz	r0, 800c358 <_calloc_r+0x24>
 800c34a:	4628      	mov	r0, r5
 800c34c:	b003      	add	sp, #12
 800c34e:	bd30      	pop	{r4, r5, pc}
 800c350:	220c      	movs	r2, #12
 800c352:	6002      	str	r2, [r0, #0]
 800c354:	2500      	movs	r5, #0
 800c356:	e7f8      	b.n	800c34a <_calloc_r+0x16>
 800c358:	4621      	mov	r1, r4
 800c35a:	f7fc fcbf 	bl	8008cdc <memset>
 800c35e:	e7f4      	b.n	800c34a <_calloc_r+0x16>

0800c360 <rshift>:
 800c360:	6903      	ldr	r3, [r0, #16]
 800c362:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c366:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c36a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c36e:	f100 0414 	add.w	r4, r0, #20
 800c372:	dd45      	ble.n	800c400 <rshift+0xa0>
 800c374:	f011 011f 	ands.w	r1, r1, #31
 800c378:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c37c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c380:	d10c      	bne.n	800c39c <rshift+0x3c>
 800c382:	f100 0710 	add.w	r7, r0, #16
 800c386:	4629      	mov	r1, r5
 800c388:	42b1      	cmp	r1, r6
 800c38a:	d334      	bcc.n	800c3f6 <rshift+0x96>
 800c38c:	1a9b      	subs	r3, r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	1eea      	subs	r2, r5, #3
 800c392:	4296      	cmp	r6, r2
 800c394:	bf38      	it	cc
 800c396:	2300      	movcc	r3, #0
 800c398:	4423      	add	r3, r4
 800c39a:	e015      	b.n	800c3c8 <rshift+0x68>
 800c39c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3a0:	f1c1 0820 	rsb	r8, r1, #32
 800c3a4:	40cf      	lsrs	r7, r1
 800c3a6:	f105 0e04 	add.w	lr, r5, #4
 800c3aa:	46a1      	mov	r9, r4
 800c3ac:	4576      	cmp	r6, lr
 800c3ae:	46f4      	mov	ip, lr
 800c3b0:	d815      	bhi.n	800c3de <rshift+0x7e>
 800c3b2:	1a9a      	subs	r2, r3, r2
 800c3b4:	0092      	lsls	r2, r2, #2
 800c3b6:	3a04      	subs	r2, #4
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	42ae      	cmp	r6, r5
 800c3bc:	bf38      	it	cc
 800c3be:	2200      	movcc	r2, #0
 800c3c0:	18a3      	adds	r3, r4, r2
 800c3c2:	50a7      	str	r7, [r4, r2]
 800c3c4:	b107      	cbz	r7, 800c3c8 <rshift+0x68>
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	1b1a      	subs	r2, r3, r4
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3d0:	bf08      	it	eq
 800c3d2:	2300      	moveq	r3, #0
 800c3d4:	6102      	str	r2, [r0, #16]
 800c3d6:	bf08      	it	eq
 800c3d8:	6143      	streq	r3, [r0, #20]
 800c3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3de:	f8dc c000 	ldr.w	ip, [ip]
 800c3e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3e6:	ea4c 0707 	orr.w	r7, ip, r7
 800c3ea:	f849 7b04 	str.w	r7, [r9], #4
 800c3ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3f2:	40cf      	lsrs	r7, r1
 800c3f4:	e7da      	b.n	800c3ac <rshift+0x4c>
 800c3f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3fe:	e7c3      	b.n	800c388 <rshift+0x28>
 800c400:	4623      	mov	r3, r4
 800c402:	e7e1      	b.n	800c3c8 <rshift+0x68>

0800c404 <__hexdig_fun>:
 800c404:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c408:	2b09      	cmp	r3, #9
 800c40a:	d802      	bhi.n	800c412 <__hexdig_fun+0xe>
 800c40c:	3820      	subs	r0, #32
 800c40e:	b2c0      	uxtb	r0, r0
 800c410:	4770      	bx	lr
 800c412:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c416:	2b05      	cmp	r3, #5
 800c418:	d801      	bhi.n	800c41e <__hexdig_fun+0x1a>
 800c41a:	3847      	subs	r0, #71	; 0x47
 800c41c:	e7f7      	b.n	800c40e <__hexdig_fun+0xa>
 800c41e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c422:	2b05      	cmp	r3, #5
 800c424:	d801      	bhi.n	800c42a <__hexdig_fun+0x26>
 800c426:	3827      	subs	r0, #39	; 0x27
 800c428:	e7f1      	b.n	800c40e <__hexdig_fun+0xa>
 800c42a:	2000      	movs	r0, #0
 800c42c:	4770      	bx	lr
	...

0800c430 <__gethex>:
 800c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	4617      	mov	r7, r2
 800c436:	680a      	ldr	r2, [r1, #0]
 800c438:	b085      	sub	sp, #20
 800c43a:	f102 0b02 	add.w	fp, r2, #2
 800c43e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c442:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c446:	4681      	mov	r9, r0
 800c448:	468a      	mov	sl, r1
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	32fe      	adds	r2, #254	; 0xfe
 800c44e:	eb02 030b 	add.w	r3, r2, fp
 800c452:	46d8      	mov	r8, fp
 800c454:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	2830      	cmp	r0, #48	; 0x30
 800c45c:	d0f7      	beq.n	800c44e <__gethex+0x1e>
 800c45e:	f7ff ffd1 	bl	800c404 <__hexdig_fun>
 800c462:	4604      	mov	r4, r0
 800c464:	2800      	cmp	r0, #0
 800c466:	d138      	bne.n	800c4da <__gethex+0xaa>
 800c468:	49a7      	ldr	r1, [pc, #668]	; (800c708 <__gethex+0x2d8>)
 800c46a:	2201      	movs	r2, #1
 800c46c:	4640      	mov	r0, r8
 800c46e:	f7fc fc3d 	bl	8008cec <strncmp>
 800c472:	4606      	mov	r6, r0
 800c474:	2800      	cmp	r0, #0
 800c476:	d169      	bne.n	800c54c <__gethex+0x11c>
 800c478:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c47c:	465d      	mov	r5, fp
 800c47e:	f7ff ffc1 	bl	800c404 <__hexdig_fun>
 800c482:	2800      	cmp	r0, #0
 800c484:	d064      	beq.n	800c550 <__gethex+0x120>
 800c486:	465a      	mov	r2, fp
 800c488:	7810      	ldrb	r0, [r2, #0]
 800c48a:	2830      	cmp	r0, #48	; 0x30
 800c48c:	4690      	mov	r8, r2
 800c48e:	f102 0201 	add.w	r2, r2, #1
 800c492:	d0f9      	beq.n	800c488 <__gethex+0x58>
 800c494:	f7ff ffb6 	bl	800c404 <__hexdig_fun>
 800c498:	2301      	movs	r3, #1
 800c49a:	fab0 f480 	clz	r4, r0
 800c49e:	0964      	lsrs	r4, r4, #5
 800c4a0:	465e      	mov	r6, fp
 800c4a2:	9301      	str	r3, [sp, #4]
 800c4a4:	4642      	mov	r2, r8
 800c4a6:	4615      	mov	r5, r2
 800c4a8:	3201      	adds	r2, #1
 800c4aa:	7828      	ldrb	r0, [r5, #0]
 800c4ac:	f7ff ffaa 	bl	800c404 <__hexdig_fun>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d1f8      	bne.n	800c4a6 <__gethex+0x76>
 800c4b4:	4994      	ldr	r1, [pc, #592]	; (800c708 <__gethex+0x2d8>)
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f7fc fc17 	bl	8008cec <strncmp>
 800c4be:	b978      	cbnz	r0, 800c4e0 <__gethex+0xb0>
 800c4c0:	b946      	cbnz	r6, 800c4d4 <__gethex+0xa4>
 800c4c2:	1c6e      	adds	r6, r5, #1
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	4615      	mov	r5, r2
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	7828      	ldrb	r0, [r5, #0]
 800c4cc:	f7ff ff9a 	bl	800c404 <__hexdig_fun>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d1f8      	bne.n	800c4c6 <__gethex+0x96>
 800c4d4:	1b73      	subs	r3, r6, r5
 800c4d6:	009e      	lsls	r6, r3, #2
 800c4d8:	e004      	b.n	800c4e4 <__gethex+0xb4>
 800c4da:	2400      	movs	r4, #0
 800c4dc:	4626      	mov	r6, r4
 800c4de:	e7e1      	b.n	800c4a4 <__gethex+0x74>
 800c4e0:	2e00      	cmp	r6, #0
 800c4e2:	d1f7      	bne.n	800c4d4 <__gethex+0xa4>
 800c4e4:	782b      	ldrb	r3, [r5, #0]
 800c4e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4ea:	2b50      	cmp	r3, #80	; 0x50
 800c4ec:	d13d      	bne.n	800c56a <__gethex+0x13a>
 800c4ee:	786b      	ldrb	r3, [r5, #1]
 800c4f0:	2b2b      	cmp	r3, #43	; 0x2b
 800c4f2:	d02f      	beq.n	800c554 <__gethex+0x124>
 800c4f4:	2b2d      	cmp	r3, #45	; 0x2d
 800c4f6:	d031      	beq.n	800c55c <__gethex+0x12c>
 800c4f8:	1c69      	adds	r1, r5, #1
 800c4fa:	f04f 0b00 	mov.w	fp, #0
 800c4fe:	7808      	ldrb	r0, [r1, #0]
 800c500:	f7ff ff80 	bl	800c404 <__hexdig_fun>
 800c504:	1e42      	subs	r2, r0, #1
 800c506:	b2d2      	uxtb	r2, r2
 800c508:	2a18      	cmp	r2, #24
 800c50a:	d82e      	bhi.n	800c56a <__gethex+0x13a>
 800c50c:	f1a0 0210 	sub.w	r2, r0, #16
 800c510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c514:	f7ff ff76 	bl	800c404 <__hexdig_fun>
 800c518:	f100 3cff 	add.w	ip, r0, #4294967295
 800c51c:	fa5f fc8c 	uxtb.w	ip, ip
 800c520:	f1bc 0f18 	cmp.w	ip, #24
 800c524:	d91d      	bls.n	800c562 <__gethex+0x132>
 800c526:	f1bb 0f00 	cmp.w	fp, #0
 800c52a:	d000      	beq.n	800c52e <__gethex+0xfe>
 800c52c:	4252      	negs	r2, r2
 800c52e:	4416      	add	r6, r2
 800c530:	f8ca 1000 	str.w	r1, [sl]
 800c534:	b1dc      	cbz	r4, 800c56e <__gethex+0x13e>
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	bf14      	ite	ne
 800c53c:	f04f 0800 	movne.w	r8, #0
 800c540:	f04f 0806 	moveq.w	r8, #6
 800c544:	4640      	mov	r0, r8
 800c546:	b005      	add	sp, #20
 800c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54c:	4645      	mov	r5, r8
 800c54e:	4626      	mov	r6, r4
 800c550:	2401      	movs	r4, #1
 800c552:	e7c7      	b.n	800c4e4 <__gethex+0xb4>
 800c554:	f04f 0b00 	mov.w	fp, #0
 800c558:	1ca9      	adds	r1, r5, #2
 800c55a:	e7d0      	b.n	800c4fe <__gethex+0xce>
 800c55c:	f04f 0b01 	mov.w	fp, #1
 800c560:	e7fa      	b.n	800c558 <__gethex+0x128>
 800c562:	230a      	movs	r3, #10
 800c564:	fb03 0002 	mla	r0, r3, r2, r0
 800c568:	e7d0      	b.n	800c50c <__gethex+0xdc>
 800c56a:	4629      	mov	r1, r5
 800c56c:	e7e0      	b.n	800c530 <__gethex+0x100>
 800c56e:	eba5 0308 	sub.w	r3, r5, r8
 800c572:	3b01      	subs	r3, #1
 800c574:	4621      	mov	r1, r4
 800c576:	2b07      	cmp	r3, #7
 800c578:	dc0a      	bgt.n	800c590 <__gethex+0x160>
 800c57a:	4648      	mov	r0, r9
 800c57c:	f7fd fbd6 	bl	8009d2c <_Balloc>
 800c580:	4604      	mov	r4, r0
 800c582:	b940      	cbnz	r0, 800c596 <__gethex+0x166>
 800c584:	4b61      	ldr	r3, [pc, #388]	; (800c70c <__gethex+0x2dc>)
 800c586:	4602      	mov	r2, r0
 800c588:	21e4      	movs	r1, #228	; 0xe4
 800c58a:	4861      	ldr	r0, [pc, #388]	; (800c710 <__gethex+0x2e0>)
 800c58c:	f7ff feb4 	bl	800c2f8 <__assert_func>
 800c590:	3101      	adds	r1, #1
 800c592:	105b      	asrs	r3, r3, #1
 800c594:	e7ef      	b.n	800c576 <__gethex+0x146>
 800c596:	f100 0a14 	add.w	sl, r0, #20
 800c59a:	2300      	movs	r3, #0
 800c59c:	495a      	ldr	r1, [pc, #360]	; (800c708 <__gethex+0x2d8>)
 800c59e:	f8cd a004 	str.w	sl, [sp, #4]
 800c5a2:	469b      	mov	fp, r3
 800c5a4:	45a8      	cmp	r8, r5
 800c5a6:	d342      	bcc.n	800c62e <__gethex+0x1fe>
 800c5a8:	9801      	ldr	r0, [sp, #4]
 800c5aa:	f840 bb04 	str.w	fp, [r0], #4
 800c5ae:	eba0 000a 	sub.w	r0, r0, sl
 800c5b2:	1080      	asrs	r0, r0, #2
 800c5b4:	6120      	str	r0, [r4, #16]
 800c5b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c5ba:	4658      	mov	r0, fp
 800c5bc:	f7fd fca8 	bl	8009f10 <__hi0bits>
 800c5c0:	683d      	ldr	r5, [r7, #0]
 800c5c2:	eba8 0000 	sub.w	r0, r8, r0
 800c5c6:	42a8      	cmp	r0, r5
 800c5c8:	dd59      	ble.n	800c67e <__gethex+0x24e>
 800c5ca:	eba0 0805 	sub.w	r8, r0, r5
 800c5ce:	4641      	mov	r1, r8
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7fe f837 	bl	800a644 <__any_on>
 800c5d6:	4683      	mov	fp, r0
 800c5d8:	b1b8      	cbz	r0, 800c60a <__gethex+0x1da>
 800c5da:	f108 33ff 	add.w	r3, r8, #4294967295
 800c5de:	1159      	asrs	r1, r3, #5
 800c5e0:	f003 021f 	and.w	r2, r3, #31
 800c5e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5e8:	f04f 0b01 	mov.w	fp, #1
 800c5ec:	fa0b f202 	lsl.w	r2, fp, r2
 800c5f0:	420a      	tst	r2, r1
 800c5f2:	d00a      	beq.n	800c60a <__gethex+0x1da>
 800c5f4:	455b      	cmp	r3, fp
 800c5f6:	dd06      	ble.n	800c606 <__gethex+0x1d6>
 800c5f8:	f1a8 0102 	sub.w	r1, r8, #2
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f7fe f821 	bl	800a644 <__any_on>
 800c602:	2800      	cmp	r0, #0
 800c604:	d138      	bne.n	800c678 <__gethex+0x248>
 800c606:	f04f 0b02 	mov.w	fp, #2
 800c60a:	4641      	mov	r1, r8
 800c60c:	4620      	mov	r0, r4
 800c60e:	f7ff fea7 	bl	800c360 <rshift>
 800c612:	4446      	add	r6, r8
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	42b3      	cmp	r3, r6
 800c618:	da41      	bge.n	800c69e <__gethex+0x26e>
 800c61a:	4621      	mov	r1, r4
 800c61c:	4648      	mov	r0, r9
 800c61e:	f7fd fbc5 	bl	8009dac <_Bfree>
 800c622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c624:	2300      	movs	r3, #0
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c62c:	e78a      	b.n	800c544 <__gethex+0x114>
 800c62e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c632:	2a2e      	cmp	r2, #46	; 0x2e
 800c634:	d014      	beq.n	800c660 <__gethex+0x230>
 800c636:	2b20      	cmp	r3, #32
 800c638:	d106      	bne.n	800c648 <__gethex+0x218>
 800c63a:	9b01      	ldr	r3, [sp, #4]
 800c63c:	f843 bb04 	str.w	fp, [r3], #4
 800c640:	f04f 0b00 	mov.w	fp, #0
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	465b      	mov	r3, fp
 800c648:	7828      	ldrb	r0, [r5, #0]
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	f7ff feda 	bl	800c404 <__hexdig_fun>
 800c650:	9b03      	ldr	r3, [sp, #12]
 800c652:	f000 000f 	and.w	r0, r0, #15
 800c656:	4098      	lsls	r0, r3
 800c658:	ea4b 0b00 	orr.w	fp, fp, r0
 800c65c:	3304      	adds	r3, #4
 800c65e:	e7a1      	b.n	800c5a4 <__gethex+0x174>
 800c660:	45a8      	cmp	r8, r5
 800c662:	d8e8      	bhi.n	800c636 <__gethex+0x206>
 800c664:	2201      	movs	r2, #1
 800c666:	4628      	mov	r0, r5
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	f7fc fb3f 	bl	8008cec <strncmp>
 800c66e:	4926      	ldr	r1, [pc, #152]	; (800c708 <__gethex+0x2d8>)
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	2800      	cmp	r0, #0
 800c674:	d1df      	bne.n	800c636 <__gethex+0x206>
 800c676:	e795      	b.n	800c5a4 <__gethex+0x174>
 800c678:	f04f 0b03 	mov.w	fp, #3
 800c67c:	e7c5      	b.n	800c60a <__gethex+0x1da>
 800c67e:	da0b      	bge.n	800c698 <__gethex+0x268>
 800c680:	eba5 0800 	sub.w	r8, r5, r0
 800c684:	4621      	mov	r1, r4
 800c686:	4642      	mov	r2, r8
 800c688:	4648      	mov	r0, r9
 800c68a:	f7fd fda9 	bl	800a1e0 <__lshift>
 800c68e:	eba6 0608 	sub.w	r6, r6, r8
 800c692:	4604      	mov	r4, r0
 800c694:	f100 0a14 	add.w	sl, r0, #20
 800c698:	f04f 0b00 	mov.w	fp, #0
 800c69c:	e7ba      	b.n	800c614 <__gethex+0x1e4>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	42b3      	cmp	r3, r6
 800c6a2:	dd73      	ble.n	800c78c <__gethex+0x35c>
 800c6a4:	1b9e      	subs	r6, r3, r6
 800c6a6:	42b5      	cmp	r5, r6
 800c6a8:	dc34      	bgt.n	800c714 <__gethex+0x2e4>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d023      	beq.n	800c6f8 <__gethex+0x2c8>
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d025      	beq.n	800c700 <__gethex+0x2d0>
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d115      	bne.n	800c6e4 <__gethex+0x2b4>
 800c6b8:	42b5      	cmp	r5, r6
 800c6ba:	d113      	bne.n	800c6e4 <__gethex+0x2b4>
 800c6bc:	2d01      	cmp	r5, #1
 800c6be:	d10b      	bne.n	800c6d8 <__gethex+0x2a8>
 800c6c0:	9a02      	ldr	r2, [sp, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	6123      	str	r3, [r4, #16]
 800c6ca:	f8ca 3000 	str.w	r3, [sl]
 800c6ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c6d4:	601c      	str	r4, [r3, #0]
 800c6d6:	e735      	b.n	800c544 <__gethex+0x114>
 800c6d8:	1e69      	subs	r1, r5, #1
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7fd ffb2 	bl	800a644 <__any_on>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d1ed      	bne.n	800c6c0 <__gethex+0x290>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4648      	mov	r0, r9
 800c6e8:	f7fd fb60 	bl	8009dac <_Bfree>
 800c6ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c6f6:	e725      	b.n	800c544 <__gethex+0x114>
 800c6f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1f2      	bne.n	800c6e4 <__gethex+0x2b4>
 800c6fe:	e7df      	b.n	800c6c0 <__gethex+0x290>
 800c700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1dc      	bne.n	800c6c0 <__gethex+0x290>
 800c706:	e7ed      	b.n	800c6e4 <__gethex+0x2b4>
 800c708:	0800d4dc 	.word	0x0800d4dc
 800c70c:	0800d373 	.word	0x0800d373
 800c710:	0800d6a1 	.word	0x0800d6a1
 800c714:	f106 38ff 	add.w	r8, r6, #4294967295
 800c718:	f1bb 0f00 	cmp.w	fp, #0
 800c71c:	d133      	bne.n	800c786 <__gethex+0x356>
 800c71e:	f1b8 0f00 	cmp.w	r8, #0
 800c722:	d004      	beq.n	800c72e <__gethex+0x2fe>
 800c724:	4641      	mov	r1, r8
 800c726:	4620      	mov	r0, r4
 800c728:	f7fd ff8c 	bl	800a644 <__any_on>
 800c72c:	4683      	mov	fp, r0
 800c72e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c732:	2301      	movs	r3, #1
 800c734:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c738:	f008 081f 	and.w	r8, r8, #31
 800c73c:	fa03 f308 	lsl.w	r3, r3, r8
 800c740:	4213      	tst	r3, r2
 800c742:	4631      	mov	r1, r6
 800c744:	4620      	mov	r0, r4
 800c746:	bf18      	it	ne
 800c748:	f04b 0b02 	orrne.w	fp, fp, #2
 800c74c:	1bad      	subs	r5, r5, r6
 800c74e:	f7ff fe07 	bl	800c360 <rshift>
 800c752:	687e      	ldr	r6, [r7, #4]
 800c754:	f04f 0802 	mov.w	r8, #2
 800c758:	f1bb 0f00 	cmp.w	fp, #0
 800c75c:	d04a      	beq.n	800c7f4 <__gethex+0x3c4>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d016      	beq.n	800c792 <__gethex+0x362>
 800c764:	2b03      	cmp	r3, #3
 800c766:	d018      	beq.n	800c79a <__gethex+0x36a>
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d109      	bne.n	800c780 <__gethex+0x350>
 800c76c:	f01b 0f02 	tst.w	fp, #2
 800c770:	d006      	beq.n	800c780 <__gethex+0x350>
 800c772:	f8da 3000 	ldr.w	r3, [sl]
 800c776:	ea4b 0b03 	orr.w	fp, fp, r3
 800c77a:	f01b 0f01 	tst.w	fp, #1
 800c77e:	d10f      	bne.n	800c7a0 <__gethex+0x370>
 800c780:	f048 0810 	orr.w	r8, r8, #16
 800c784:	e036      	b.n	800c7f4 <__gethex+0x3c4>
 800c786:	f04f 0b01 	mov.w	fp, #1
 800c78a:	e7d0      	b.n	800c72e <__gethex+0x2fe>
 800c78c:	f04f 0801 	mov.w	r8, #1
 800c790:	e7e2      	b.n	800c758 <__gethex+0x328>
 800c792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c794:	f1c3 0301 	rsb	r3, r3, #1
 800c798:	930f      	str	r3, [sp, #60]	; 0x3c
 800c79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0ef      	beq.n	800c780 <__gethex+0x350>
 800c7a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7a4:	f104 0214 	add.w	r2, r4, #20
 800c7a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4694      	mov	ip, r2
 800c7b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c7be:	d01e      	beq.n	800c7fe <__gethex+0x3ce>
 800c7c0:	3101      	adds	r1, #1
 800c7c2:	f8cc 1000 	str.w	r1, [ip]
 800c7c6:	f1b8 0f02 	cmp.w	r8, #2
 800c7ca:	f104 0214 	add.w	r2, r4, #20
 800c7ce:	d13d      	bne.n	800c84c <__gethex+0x41c>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	d10b      	bne.n	800c7f0 <__gethex+0x3c0>
 800c7d8:	1169      	asrs	r1, r5, #5
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f005 051f 	and.w	r5, r5, #31
 800c7e0:	fa03 f505 	lsl.w	r5, r3, r5
 800c7e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e8:	421d      	tst	r5, r3
 800c7ea:	bf18      	it	ne
 800c7ec:	f04f 0801 	movne.w	r8, #1
 800c7f0:	f048 0820 	orr.w	r8, r8, #32
 800c7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7f6:	601c      	str	r4, [r3, #0]
 800c7f8:	9b02      	ldr	r3, [sp, #8]
 800c7fa:	601e      	str	r6, [r3, #0]
 800c7fc:	e6a2      	b.n	800c544 <__gethex+0x114>
 800c7fe:	4290      	cmp	r0, r2
 800c800:	f842 3c04 	str.w	r3, [r2, #-4]
 800c804:	d8d6      	bhi.n	800c7b4 <__gethex+0x384>
 800c806:	68a2      	ldr	r2, [r4, #8]
 800c808:	4593      	cmp	fp, r2
 800c80a:	db17      	blt.n	800c83c <__gethex+0x40c>
 800c80c:	6861      	ldr	r1, [r4, #4]
 800c80e:	4648      	mov	r0, r9
 800c810:	3101      	adds	r1, #1
 800c812:	f7fd fa8b 	bl	8009d2c <_Balloc>
 800c816:	4682      	mov	sl, r0
 800c818:	b918      	cbnz	r0, 800c822 <__gethex+0x3f2>
 800c81a:	4b1b      	ldr	r3, [pc, #108]	; (800c888 <__gethex+0x458>)
 800c81c:	4602      	mov	r2, r0
 800c81e:	2184      	movs	r1, #132	; 0x84
 800c820:	e6b3      	b.n	800c58a <__gethex+0x15a>
 800c822:	6922      	ldr	r2, [r4, #16]
 800c824:	3202      	adds	r2, #2
 800c826:	f104 010c 	add.w	r1, r4, #12
 800c82a:	0092      	lsls	r2, r2, #2
 800c82c:	300c      	adds	r0, #12
 800c82e:	f7ff fd4d 	bl	800c2cc <memcpy>
 800c832:	4621      	mov	r1, r4
 800c834:	4648      	mov	r0, r9
 800c836:	f7fd fab9 	bl	8009dac <_Bfree>
 800c83a:	4654      	mov	r4, sl
 800c83c:	6922      	ldr	r2, [r4, #16]
 800c83e:	1c51      	adds	r1, r2, #1
 800c840:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c844:	6121      	str	r1, [r4, #16]
 800c846:	2101      	movs	r1, #1
 800c848:	6151      	str	r1, [r2, #20]
 800c84a:	e7bc      	b.n	800c7c6 <__gethex+0x396>
 800c84c:	6921      	ldr	r1, [r4, #16]
 800c84e:	4559      	cmp	r1, fp
 800c850:	dd0b      	ble.n	800c86a <__gethex+0x43a>
 800c852:	2101      	movs	r1, #1
 800c854:	4620      	mov	r0, r4
 800c856:	f7ff fd83 	bl	800c360 <rshift>
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	3601      	adds	r6, #1
 800c85e:	42b3      	cmp	r3, r6
 800c860:	f6ff aedb 	blt.w	800c61a <__gethex+0x1ea>
 800c864:	f04f 0801 	mov.w	r8, #1
 800c868:	e7c2      	b.n	800c7f0 <__gethex+0x3c0>
 800c86a:	f015 051f 	ands.w	r5, r5, #31
 800c86e:	d0f9      	beq.n	800c864 <__gethex+0x434>
 800c870:	9b01      	ldr	r3, [sp, #4]
 800c872:	441a      	add	r2, r3
 800c874:	f1c5 0520 	rsb	r5, r5, #32
 800c878:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c87c:	f7fd fb48 	bl	8009f10 <__hi0bits>
 800c880:	42a8      	cmp	r0, r5
 800c882:	dbe6      	blt.n	800c852 <__gethex+0x422>
 800c884:	e7ee      	b.n	800c864 <__gethex+0x434>
 800c886:	bf00      	nop
 800c888:	0800d373 	.word	0x0800d373

0800c88c <L_shift>:
 800c88c:	f1c2 0208 	rsb	r2, r2, #8
 800c890:	0092      	lsls	r2, r2, #2
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	f1c2 0620 	rsb	r6, r2, #32
 800c898:	6843      	ldr	r3, [r0, #4]
 800c89a:	6804      	ldr	r4, [r0, #0]
 800c89c:	fa03 f506 	lsl.w	r5, r3, r6
 800c8a0:	432c      	orrs	r4, r5
 800c8a2:	40d3      	lsrs	r3, r2
 800c8a4:	6004      	str	r4, [r0, #0]
 800c8a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8aa:	4288      	cmp	r0, r1
 800c8ac:	d3f4      	bcc.n	800c898 <L_shift+0xc>
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}

0800c8b0 <__match>:
 800c8b0:	b530      	push	{r4, r5, lr}
 800c8b2:	6803      	ldr	r3, [r0, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ba:	b914      	cbnz	r4, 800c8c2 <__match+0x12>
 800c8bc:	6003      	str	r3, [r0, #0]
 800c8be:	2001      	movs	r0, #1
 800c8c0:	bd30      	pop	{r4, r5, pc}
 800c8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8ca:	2d19      	cmp	r5, #25
 800c8cc:	bf98      	it	ls
 800c8ce:	3220      	addls	r2, #32
 800c8d0:	42a2      	cmp	r2, r4
 800c8d2:	d0f0      	beq.n	800c8b6 <__match+0x6>
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	e7f3      	b.n	800c8c0 <__match+0x10>

0800c8d8 <__hexnan>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	680b      	ldr	r3, [r1, #0]
 800c8de:	6801      	ldr	r1, [r0, #0]
 800c8e0:	115e      	asrs	r6, r3, #5
 800c8e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8e6:	f013 031f 	ands.w	r3, r3, #31
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	bf18      	it	ne
 800c8ee:	3604      	addne	r6, #4
 800c8f0:	2500      	movs	r5, #0
 800c8f2:	1f37      	subs	r7, r6, #4
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	4690      	mov	r8, r2
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8fe:	46b9      	mov	r9, r7
 800c900:	463c      	mov	r4, r7
 800c902:	9502      	str	r5, [sp, #8]
 800c904:	46ab      	mov	fp, r5
 800c906:	784a      	ldrb	r2, [r1, #1]
 800c908:	1c4b      	adds	r3, r1, #1
 800c90a:	9303      	str	r3, [sp, #12]
 800c90c:	b342      	cbz	r2, 800c960 <__hexnan+0x88>
 800c90e:	4610      	mov	r0, r2
 800c910:	9105      	str	r1, [sp, #20]
 800c912:	9204      	str	r2, [sp, #16]
 800c914:	f7ff fd76 	bl	800c404 <__hexdig_fun>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d14f      	bne.n	800c9bc <__hexnan+0xe4>
 800c91c:	9a04      	ldr	r2, [sp, #16]
 800c91e:	9905      	ldr	r1, [sp, #20]
 800c920:	2a20      	cmp	r2, #32
 800c922:	d818      	bhi.n	800c956 <__hexnan+0x7e>
 800c924:	9b02      	ldr	r3, [sp, #8]
 800c926:	459b      	cmp	fp, r3
 800c928:	dd13      	ble.n	800c952 <__hexnan+0x7a>
 800c92a:	454c      	cmp	r4, r9
 800c92c:	d206      	bcs.n	800c93c <__hexnan+0x64>
 800c92e:	2d07      	cmp	r5, #7
 800c930:	dc04      	bgt.n	800c93c <__hexnan+0x64>
 800c932:	462a      	mov	r2, r5
 800c934:	4649      	mov	r1, r9
 800c936:	4620      	mov	r0, r4
 800c938:	f7ff ffa8 	bl	800c88c <L_shift>
 800c93c:	4544      	cmp	r4, r8
 800c93e:	d950      	bls.n	800c9e2 <__hexnan+0x10a>
 800c940:	2300      	movs	r3, #0
 800c942:	f1a4 0904 	sub.w	r9, r4, #4
 800c946:	f844 3c04 	str.w	r3, [r4, #-4]
 800c94a:	f8cd b008 	str.w	fp, [sp, #8]
 800c94e:	464c      	mov	r4, r9
 800c950:	461d      	mov	r5, r3
 800c952:	9903      	ldr	r1, [sp, #12]
 800c954:	e7d7      	b.n	800c906 <__hexnan+0x2e>
 800c956:	2a29      	cmp	r2, #41	; 0x29
 800c958:	d155      	bne.n	800ca06 <__hexnan+0x12e>
 800c95a:	3102      	adds	r1, #2
 800c95c:	f8ca 1000 	str.w	r1, [sl]
 800c960:	f1bb 0f00 	cmp.w	fp, #0
 800c964:	d04f      	beq.n	800ca06 <__hexnan+0x12e>
 800c966:	454c      	cmp	r4, r9
 800c968:	d206      	bcs.n	800c978 <__hexnan+0xa0>
 800c96a:	2d07      	cmp	r5, #7
 800c96c:	dc04      	bgt.n	800c978 <__hexnan+0xa0>
 800c96e:	462a      	mov	r2, r5
 800c970:	4649      	mov	r1, r9
 800c972:	4620      	mov	r0, r4
 800c974:	f7ff ff8a 	bl	800c88c <L_shift>
 800c978:	4544      	cmp	r4, r8
 800c97a:	d934      	bls.n	800c9e6 <__hexnan+0x10e>
 800c97c:	f1a8 0204 	sub.w	r2, r8, #4
 800c980:	4623      	mov	r3, r4
 800c982:	f853 1b04 	ldr.w	r1, [r3], #4
 800c986:	f842 1f04 	str.w	r1, [r2, #4]!
 800c98a:	429f      	cmp	r7, r3
 800c98c:	d2f9      	bcs.n	800c982 <__hexnan+0xaa>
 800c98e:	1b3b      	subs	r3, r7, r4
 800c990:	f023 0303 	bic.w	r3, r3, #3
 800c994:	3304      	adds	r3, #4
 800c996:	3e03      	subs	r6, #3
 800c998:	3401      	adds	r4, #1
 800c99a:	42a6      	cmp	r6, r4
 800c99c:	bf38      	it	cc
 800c99e:	2304      	movcc	r3, #4
 800c9a0:	4443      	add	r3, r8
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f843 2b04 	str.w	r2, [r3], #4
 800c9a8:	429f      	cmp	r7, r3
 800c9aa:	d2fb      	bcs.n	800c9a4 <__hexnan+0xcc>
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	b91b      	cbnz	r3, 800c9b8 <__hexnan+0xe0>
 800c9b0:	4547      	cmp	r7, r8
 800c9b2:	d126      	bne.n	800ca02 <__hexnan+0x12a>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	603b      	str	r3, [r7, #0]
 800c9b8:	2005      	movs	r0, #5
 800c9ba:	e025      	b.n	800ca08 <__hexnan+0x130>
 800c9bc:	3501      	adds	r5, #1
 800c9be:	2d08      	cmp	r5, #8
 800c9c0:	f10b 0b01 	add.w	fp, fp, #1
 800c9c4:	dd06      	ble.n	800c9d4 <__hexnan+0xfc>
 800c9c6:	4544      	cmp	r4, r8
 800c9c8:	d9c3      	bls.n	800c952 <__hexnan+0x7a>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9d0:	2501      	movs	r5, #1
 800c9d2:	3c04      	subs	r4, #4
 800c9d4:	6822      	ldr	r2, [r4, #0]
 800c9d6:	f000 000f 	and.w	r0, r0, #15
 800c9da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c9de:	6020      	str	r0, [r4, #0]
 800c9e0:	e7b7      	b.n	800c952 <__hexnan+0x7a>
 800c9e2:	2508      	movs	r5, #8
 800c9e4:	e7b5      	b.n	800c952 <__hexnan+0x7a>
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d0df      	beq.n	800c9ac <__hexnan+0xd4>
 800c9ec:	f1c3 0320 	rsb	r3, r3, #32
 800c9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f4:	40da      	lsrs	r2, r3
 800c9f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca00:	e7d4      	b.n	800c9ac <__hexnan+0xd4>
 800ca02:	3f04      	subs	r7, #4
 800ca04:	e7d2      	b.n	800c9ac <__hexnan+0xd4>
 800ca06:	2004      	movs	r0, #4
 800ca08:	b007      	add	sp, #28
 800ca0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca0e <__ascii_mbtowc>:
 800ca0e:	b082      	sub	sp, #8
 800ca10:	b901      	cbnz	r1, 800ca14 <__ascii_mbtowc+0x6>
 800ca12:	a901      	add	r1, sp, #4
 800ca14:	b142      	cbz	r2, 800ca28 <__ascii_mbtowc+0x1a>
 800ca16:	b14b      	cbz	r3, 800ca2c <__ascii_mbtowc+0x1e>
 800ca18:	7813      	ldrb	r3, [r2, #0]
 800ca1a:	600b      	str	r3, [r1, #0]
 800ca1c:	7812      	ldrb	r2, [r2, #0]
 800ca1e:	1e10      	subs	r0, r2, #0
 800ca20:	bf18      	it	ne
 800ca22:	2001      	movne	r0, #1
 800ca24:	b002      	add	sp, #8
 800ca26:	4770      	bx	lr
 800ca28:	4610      	mov	r0, r2
 800ca2a:	e7fb      	b.n	800ca24 <__ascii_mbtowc+0x16>
 800ca2c:	f06f 0001 	mvn.w	r0, #1
 800ca30:	e7f8      	b.n	800ca24 <__ascii_mbtowc+0x16>

0800ca32 <_realloc_r>:
 800ca32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	4680      	mov	r8, r0
 800ca38:	4614      	mov	r4, r2
 800ca3a:	460e      	mov	r6, r1
 800ca3c:	b921      	cbnz	r1, 800ca48 <_realloc_r+0x16>
 800ca3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca42:	4611      	mov	r1, r2
 800ca44:	f7fd b8e6 	b.w	8009c14 <_malloc_r>
 800ca48:	b92a      	cbnz	r2, 800ca56 <_realloc_r+0x24>
 800ca4a:	f7fd f86f 	bl	8009b2c <_free_r>
 800ca4e:	4625      	mov	r5, r4
 800ca50:	4628      	mov	r0, r5
 800ca52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca56:	f000 f8b6 	bl	800cbc6 <_malloc_usable_size_r>
 800ca5a:	4284      	cmp	r4, r0
 800ca5c:	4607      	mov	r7, r0
 800ca5e:	d802      	bhi.n	800ca66 <_realloc_r+0x34>
 800ca60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca64:	d812      	bhi.n	800ca8c <_realloc_r+0x5a>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4640      	mov	r0, r8
 800ca6a:	f7fd f8d3 	bl	8009c14 <_malloc_r>
 800ca6e:	4605      	mov	r5, r0
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d0ed      	beq.n	800ca50 <_realloc_r+0x1e>
 800ca74:	42bc      	cmp	r4, r7
 800ca76:	4622      	mov	r2, r4
 800ca78:	4631      	mov	r1, r6
 800ca7a:	bf28      	it	cs
 800ca7c:	463a      	movcs	r2, r7
 800ca7e:	f7ff fc25 	bl	800c2cc <memcpy>
 800ca82:	4631      	mov	r1, r6
 800ca84:	4640      	mov	r0, r8
 800ca86:	f7fd f851 	bl	8009b2c <_free_r>
 800ca8a:	e7e1      	b.n	800ca50 <_realloc_r+0x1e>
 800ca8c:	4635      	mov	r5, r6
 800ca8e:	e7df      	b.n	800ca50 <_realloc_r+0x1e>

0800ca90 <_strtoul_l.constprop.0>:
 800ca90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca94:	4f36      	ldr	r7, [pc, #216]	; (800cb70 <_strtoul_l.constprop.0+0xe0>)
 800ca96:	4686      	mov	lr, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caa0:	5d3e      	ldrb	r6, [r7, r4]
 800caa2:	f016 0608 	ands.w	r6, r6, #8
 800caa6:	d1f8      	bne.n	800ca9a <_strtoul_l.constprop.0+0xa>
 800caa8:	2c2d      	cmp	r4, #45	; 0x2d
 800caaa:	d130      	bne.n	800cb0e <_strtoul_l.constprop.0+0x7e>
 800caac:	782c      	ldrb	r4, [r5, #0]
 800caae:	2601      	movs	r6, #1
 800cab0:	1c85      	adds	r5, r0, #2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d057      	beq.n	800cb66 <_strtoul_l.constprop.0+0xd6>
 800cab6:	2b10      	cmp	r3, #16
 800cab8:	d109      	bne.n	800cace <_strtoul_l.constprop.0+0x3e>
 800caba:	2c30      	cmp	r4, #48	; 0x30
 800cabc:	d107      	bne.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cabe:	7828      	ldrb	r0, [r5, #0]
 800cac0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cac4:	2858      	cmp	r0, #88	; 0x58
 800cac6:	d149      	bne.n	800cb5c <_strtoul_l.constprop.0+0xcc>
 800cac8:	786c      	ldrb	r4, [r5, #1]
 800caca:	2310      	movs	r3, #16
 800cacc:	3502      	adds	r5, #2
 800cace:	f04f 38ff 	mov.w	r8, #4294967295
 800cad2:	2700      	movs	r7, #0
 800cad4:	fbb8 f8f3 	udiv	r8, r8, r3
 800cad8:	fb03 f908 	mul.w	r9, r3, r8
 800cadc:	ea6f 0909 	mvn.w	r9, r9
 800cae0:	4638      	mov	r0, r7
 800cae2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cae6:	f1bc 0f09 	cmp.w	ip, #9
 800caea:	d815      	bhi.n	800cb18 <_strtoul_l.constprop.0+0x88>
 800caec:	4664      	mov	r4, ip
 800caee:	42a3      	cmp	r3, r4
 800caf0:	dd23      	ble.n	800cb3a <_strtoul_l.constprop.0+0xaa>
 800caf2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800caf6:	d007      	beq.n	800cb08 <_strtoul_l.constprop.0+0x78>
 800caf8:	4580      	cmp	r8, r0
 800cafa:	d31b      	bcc.n	800cb34 <_strtoul_l.constprop.0+0xa4>
 800cafc:	d101      	bne.n	800cb02 <_strtoul_l.constprop.0+0x72>
 800cafe:	45a1      	cmp	r9, r4
 800cb00:	db18      	blt.n	800cb34 <_strtoul_l.constprop.0+0xa4>
 800cb02:	fb00 4003 	mla	r0, r0, r3, r4
 800cb06:	2701      	movs	r7, #1
 800cb08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb0c:	e7e9      	b.n	800cae2 <_strtoul_l.constprop.0+0x52>
 800cb0e:	2c2b      	cmp	r4, #43	; 0x2b
 800cb10:	bf04      	itt	eq
 800cb12:	782c      	ldrbeq	r4, [r5, #0]
 800cb14:	1c85      	addeq	r5, r0, #2
 800cb16:	e7cc      	b.n	800cab2 <_strtoul_l.constprop.0+0x22>
 800cb18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb1c:	f1bc 0f19 	cmp.w	ip, #25
 800cb20:	d801      	bhi.n	800cb26 <_strtoul_l.constprop.0+0x96>
 800cb22:	3c37      	subs	r4, #55	; 0x37
 800cb24:	e7e3      	b.n	800caee <_strtoul_l.constprop.0+0x5e>
 800cb26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb2a:	f1bc 0f19 	cmp.w	ip, #25
 800cb2e:	d804      	bhi.n	800cb3a <_strtoul_l.constprop.0+0xaa>
 800cb30:	3c57      	subs	r4, #87	; 0x57
 800cb32:	e7dc      	b.n	800caee <_strtoul_l.constprop.0+0x5e>
 800cb34:	f04f 37ff 	mov.w	r7, #4294967295
 800cb38:	e7e6      	b.n	800cb08 <_strtoul_l.constprop.0+0x78>
 800cb3a:	1c7b      	adds	r3, r7, #1
 800cb3c:	d106      	bne.n	800cb4c <_strtoul_l.constprop.0+0xbc>
 800cb3e:	2322      	movs	r3, #34	; 0x22
 800cb40:	f8ce 3000 	str.w	r3, [lr]
 800cb44:	4638      	mov	r0, r7
 800cb46:	b932      	cbnz	r2, 800cb56 <_strtoul_l.constprop.0+0xc6>
 800cb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb4c:	b106      	cbz	r6, 800cb50 <_strtoul_l.constprop.0+0xc0>
 800cb4e:	4240      	negs	r0, r0
 800cb50:	2a00      	cmp	r2, #0
 800cb52:	d0f9      	beq.n	800cb48 <_strtoul_l.constprop.0+0xb8>
 800cb54:	b107      	cbz	r7, 800cb58 <_strtoul_l.constprop.0+0xc8>
 800cb56:	1e69      	subs	r1, r5, #1
 800cb58:	6011      	str	r1, [r2, #0]
 800cb5a:	e7f5      	b.n	800cb48 <_strtoul_l.constprop.0+0xb8>
 800cb5c:	2430      	movs	r4, #48	; 0x30
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1b5      	bne.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cb62:	2308      	movs	r3, #8
 800cb64:	e7b3      	b.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cb66:	2c30      	cmp	r4, #48	; 0x30
 800cb68:	d0a9      	beq.n	800cabe <_strtoul_l.constprop.0+0x2e>
 800cb6a:	230a      	movs	r3, #10
 800cb6c:	e7af      	b.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cb6e:	bf00      	nop
 800cb70:	0800d531 	.word	0x0800d531

0800cb74 <_strtoul_r>:
 800cb74:	f7ff bf8c 	b.w	800ca90 <_strtoul_l.constprop.0>

0800cb78 <__ascii_wctomb>:
 800cb78:	b149      	cbz	r1, 800cb8e <__ascii_wctomb+0x16>
 800cb7a:	2aff      	cmp	r2, #255	; 0xff
 800cb7c:	bf85      	ittet	hi
 800cb7e:	238a      	movhi	r3, #138	; 0x8a
 800cb80:	6003      	strhi	r3, [r0, #0]
 800cb82:	700a      	strbls	r2, [r1, #0]
 800cb84:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb88:	bf98      	it	ls
 800cb8a:	2001      	movls	r0, #1
 800cb8c:	4770      	bx	lr
 800cb8e:	4608      	mov	r0, r1
 800cb90:	4770      	bx	lr
	...

0800cb94 <fiprintf>:
 800cb94:	b40e      	push	{r1, r2, r3}
 800cb96:	b503      	push	{r0, r1, lr}
 800cb98:	4601      	mov	r1, r0
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <fiprintf+0x20>)
 800cb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba2:	6800      	ldr	r0, [r0, #0]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	f7fe ff59 	bl	800ba5c <_vfiprintf_r>
 800cbaa:	b002      	add	sp, #8
 800cbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb0:	b003      	add	sp, #12
 800cbb2:	4770      	bx	lr
 800cbb4:	20000074 	.word	0x20000074

0800cbb8 <abort>:
 800cbb8:	b508      	push	{r3, lr}
 800cbba:	2006      	movs	r0, #6
 800cbbc:	f000 f834 	bl	800cc28 <raise>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7f6 fbe3 	bl	800338c <_exit>

0800cbc6 <_malloc_usable_size_r>:
 800cbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbca:	1f18      	subs	r0, r3, #4
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfbc      	itt	lt
 800cbd0:	580b      	ldrlt	r3, [r1, r0]
 800cbd2:	18c0      	addlt	r0, r0, r3
 800cbd4:	4770      	bx	lr

0800cbd6 <_raise_r>:
 800cbd6:	291f      	cmp	r1, #31
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	4604      	mov	r4, r0
 800cbdc:	460d      	mov	r5, r1
 800cbde:	d904      	bls.n	800cbea <_raise_r+0x14>
 800cbe0:	2316      	movs	r3, #22
 800cbe2:	6003      	str	r3, [r0, #0]
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	bd38      	pop	{r3, r4, r5, pc}
 800cbea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cbec:	b112      	cbz	r2, 800cbf4 <_raise_r+0x1e>
 800cbee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbf2:	b94b      	cbnz	r3, 800cc08 <_raise_r+0x32>
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 f831 	bl	800cc5c <_getpid_r>
 800cbfa:	462a      	mov	r2, r5
 800cbfc:	4601      	mov	r1, r0
 800cbfe:	4620      	mov	r0, r4
 800cc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc04:	f000 b818 	b.w	800cc38 <_kill_r>
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d00a      	beq.n	800cc22 <_raise_r+0x4c>
 800cc0c:	1c59      	adds	r1, r3, #1
 800cc0e:	d103      	bne.n	800cc18 <_raise_r+0x42>
 800cc10:	2316      	movs	r3, #22
 800cc12:	6003      	str	r3, [r0, #0]
 800cc14:	2001      	movs	r0, #1
 800cc16:	e7e7      	b.n	800cbe8 <_raise_r+0x12>
 800cc18:	2400      	movs	r4, #0
 800cc1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc1e:	4628      	mov	r0, r5
 800cc20:	4798      	blx	r3
 800cc22:	2000      	movs	r0, #0
 800cc24:	e7e0      	b.n	800cbe8 <_raise_r+0x12>
	...

0800cc28 <raise>:
 800cc28:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <raise+0xc>)
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	f7ff bfd2 	b.w	800cbd6 <_raise_r>
 800cc32:	bf00      	nop
 800cc34:	20000074 	.word	0x20000074

0800cc38 <_kill_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4d07      	ldr	r5, [pc, #28]	; (800cc58 <_kill_r+0x20>)
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	4604      	mov	r4, r0
 800cc40:	4608      	mov	r0, r1
 800cc42:	4611      	mov	r1, r2
 800cc44:	602b      	str	r3, [r5, #0]
 800cc46:	f7f6 fb91 	bl	800336c <_kill>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	d102      	bne.n	800cc54 <_kill_r+0x1c>
 800cc4e:	682b      	ldr	r3, [r5, #0]
 800cc50:	b103      	cbz	r3, 800cc54 <_kill_r+0x1c>
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	bd38      	pop	{r3, r4, r5, pc}
 800cc56:	bf00      	nop
 800cc58:	20000cdc 	.word	0x20000cdc

0800cc5c <_getpid_r>:
 800cc5c:	f7f6 bb7e 	b.w	800335c <_getpid>

0800cc60 <_init>:
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc62:	bf00      	nop
 800cc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc66:	bc08      	pop	{r3}
 800cc68:	469e      	mov	lr, r3
 800cc6a:	4770      	bx	lr

0800cc6c <_fini>:
 800cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6e:	bf00      	nop
 800cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc72:	bc08      	pop	{r3}
 800cc74:	469e      	mov	lr, r3
 800cc76:	4770      	bx	lr
