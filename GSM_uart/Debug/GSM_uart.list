
GSM_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800676c  0800676c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006774  08006774  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800677c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000070  080067ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080067ec  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc0e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002212  00000000  00000000  0002dcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002fec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e0d  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da9c  00000000  00000000  00058205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e93ae  00000000  00000000  00065ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f04f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  0014f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006258 	.word	0x08006258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006258 	.word	0x08006258

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <gsm_init>:
uint8_t response[20];
char *data1;
uint8_t var=0;
char *str;
int gsm_init()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t state=0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t substate=0;
 800058e:	2300      	movs	r3, #0
 8000590:	71bb      	strb	r3, [r7, #6]
	while(1)
	{
	switch(state)
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b07      	cmp	r3, #7
 8000596:	f200 8297 	bhi.w	8000ac8 <gsm_init+0x544>
 800059a:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <gsm_init+0x1c>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	0800063b 	.word	0x0800063b
 80005a8:	080006a7 	.word	0x080006a7
 80005ac:	0800072d 	.word	0x0800072d
 80005b0:	080007b5 	.word	0x080007b5
 80005b4:	08000849 	.word	0x08000849
 80005b8:	0800093b 	.word	0x0800093b
 80005bc:	08000a17 	.word	0x08000a17
	{
			  	  case 0:
			  	  {
			  		  switch(substate)
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f040 8285 	bne.w	8000ad2 <gsm_init+0x54e>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 80005c8:	48a2      	ldr	r0, [pc, #648]	; (8000854 <gsm_init+0x2d0>)
 80005ca:	f000 fcf1 	bl	8000fb0 <send_to_gsm>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4aa1      	ldr	r2, [pc, #644]	; (8000858 <gsm_init+0x2d4>)
 80005d2:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("ATE0 \n");
 80005d4:	48a1      	ldr	r0, [pc, #644]	; (800085c <gsm_init+0x2d8>)
 80005d6:	f004 fcbb 	bl	8004f50 <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 80005da:	4b9f      	ldr	r3, [pc, #636]	; (8000858 <gsm_init+0x2d4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	49a0      	ldr	r1, [pc, #640]	; (8000860 <gsm_init+0x2dc>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fcf1 	bl	8004fc8 <strstr>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00d      	beq.n	8000608 <gsm_init+0x84>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	4619      	mov	r1, r3
 80005f2:	489c      	ldr	r0, [pc, #624]	; (8000864 <gsm_init+0x2e0>)
 80005f4:	f004 fc26 	bl	8004e44 <iprintf>
			  				printf("ATE0 OK \n");
 80005f8:	489b      	ldr	r0, [pc, #620]	; (8000868 <gsm_init+0x2e4>)
 80005fa:	f004 fca9 	bl	8004f50 <puts>
			  				  state=1;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
			  				substate=0;
 8000602:	2300      	movs	r3, #0
 8000604:	71bb      	strb	r3, [r7, #6]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8000606:	e016      	b.n	8000636 <gsm_init+0xb2>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 8000608:	4b93      	ldr	r3, [pc, #588]	; (8000858 <gsm_init+0x2d4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2206      	movs	r2, #6
 800060e:	4997      	ldr	r1, [pc, #604]	; (800086c <gsm_init+0x2e8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fcc5 	bl	8004fa0 <strncmp>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00c      	beq.n	8000636 <gsm_init+0xb2>
			  				printf("state = %d substate = %d \n",state,substate);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	79ba      	ldrb	r2, [r7, #6]
 8000620:	4619      	mov	r1, r3
 8000622:	4890      	ldr	r0, [pc, #576]	; (8000864 <gsm_init+0x2e0>)
 8000624:	f004 fc0e 	bl	8004e44 <iprintf>
			  				printf("ATE0 ERROR \n");
 8000628:	4891      	ldr	r0, [pc, #580]	; (8000870 <gsm_init+0x2ec>)
 800062a:	f004 fc91 	bl	8004f50 <puts>
			  				  state=0;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]
			  			  break;
 8000636:	bf00      	nop
			  		  }
			  		  break;
 8000638:	e24b      	b.n	8000ad2 <gsm_init+0x54e>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d132      	bne.n	80006a6 <gsm_init+0x122>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 8000640:	488c      	ldr	r0, [pc, #560]	; (8000874 <gsm_init+0x2f0>)
 8000642:	f000 fcb5 	bl	8000fb0 <send_to_gsm>
 8000646:	4603      	mov	r3, r0
 8000648:	4a83      	ldr	r2, [pc, #524]	; (8000858 <gsm_init+0x2d4>)
 800064a:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 800064c:	488a      	ldr	r0, [pc, #552]	; (8000878 <gsm_init+0x2f4>)
 800064e:	f004 fc7f 	bl	8004f50 <puts>
			  			  HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f001 fae5 	bl	8001c24 <HAL_Delay>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 800065a:	4b7f      	ldr	r3, [pc, #508]	; (8000858 <gsm_init+0x2d4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2206      	movs	r2, #6
 8000660:	497f      	ldr	r1, [pc, #508]	; (8000860 <gsm_init+0x2dc>)
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fc9c 	bl	8004fa0 <strncmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10d      	bne.n	800068a <gsm_init+0x106>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	4619      	mov	r1, r3
 8000674:	487b      	ldr	r0, [pc, #492]	; (8000864 <gsm_init+0x2e0>)
 8000676:	f004 fbe5 	bl	8004e44 <iprintf>
			  				printf("CMEE=2 OK \n");
 800067a:	4880      	ldr	r0, [pc, #512]	; (800087c <gsm_init+0x2f8>)
 800067c:	f004 fc68 	bl	8004f50 <puts>
			  				  state=2;
 8000680:	2302      	movs	r3, #2
 8000682:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 8000684:	2300      	movs	r3, #0
 8000686:	71bb      	strb	r3, [r7, #6]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8000688:	e00c      	b.n	80006a4 <gsm_init+0x120>
			  				printf("state = %d substate = %d \n",state,substate);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	4619      	mov	r1, r3
 8000690:	4874      	ldr	r0, [pc, #464]	; (8000864 <gsm_init+0x2e0>)
 8000692:	f004 fbd7 	bl	8004e44 <iprintf>
			  				printf("CMEE=2 OK \n");
 8000696:	4879      	ldr	r0, [pc, #484]	; (800087c <gsm_init+0x2f8>)
 8000698:	f004 fc5a 	bl	8004f50 <puts>
			  				  state=0;
 800069c:	2300      	movs	r3, #0
 800069e:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71bb      	strb	r3, [r7, #6]
			  			  break;
 80006a4:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13f      	bne.n	800072c <gsm_init+0x1a8>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 80006ac:	4874      	ldr	r0, [pc, #464]	; (8000880 <gsm_init+0x2fc>)
 80006ae:	f000 fc7f 	bl	8000fb0 <send_to_gsm>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a68      	ldr	r2, [pc, #416]	; (8000858 <gsm_init+0x2d4>)
 80006b6:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("CPIN \n");
 80006b8:	4872      	ldr	r0, [pc, #456]	; (8000884 <gsm_init+0x300>)
 80006ba:	f004 fc49 	bl	8004f50 <puts>
			  			  if((strstr(str,"READY")!=NULL))
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <gsm_init+0x2d4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4971      	ldr	r1, [pc, #452]	; (8000888 <gsm_init+0x304>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fc7f 	bl	8004fc8 <strstr>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00d      	beq.n	80006ec <gsm_init+0x168>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4863      	ldr	r0, [pc, #396]	; (8000864 <gsm_init+0x2e0>)
 80006d8:	f004 fbb4 	bl	8004e44 <iprintf>
			  				printf("CPIN READY \n");
 80006dc:	486b      	ldr	r0, [pc, #428]	; (800088c <gsm_init+0x308>)
 80006de:	f004 fc37 	bl	8004f50 <puts>
			  			      state=3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	71fb      	strb	r3, [r7, #7]
			  			      substate=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71bb      	strb	r3, [r7, #6]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=0;
			 	  			substate=0;
			  			  }
			  			  break;
 80006ea:	e01e      	b.n	800072a <gsm_init+0x1a6>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 80006ec:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <gsm_init+0x2d4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2206      	movs	r2, #6
 80006f2:	495e      	ldr	r1, [pc, #376]	; (800086c <gsm_init+0x2e8>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fc53 	bl	8004fa0 <strncmp>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10a      	bne.n	8000716 <gsm_init+0x192>
			  				printf("state = %d substate = %d \n",state,substate);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	4619      	mov	r1, r3
 8000706:	4857      	ldr	r0, [pc, #348]	; (8000864 <gsm_init+0x2e0>)
 8000708:	f004 fb9c 	bl	8004e44 <iprintf>
			  				state=0;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
			  				substate=0;
 8000710:	2300      	movs	r3, #0
 8000712:	71bb      	strb	r3, [r7, #6]
			  			  break;
 8000714:	e009      	b.n	800072a <gsm_init+0x1a6>
			  				printf("state = %d substate = %d \n",state,substate);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	79ba      	ldrb	r2, [r7, #6]
 800071a:	4619      	mov	r1, r3
 800071c:	4851      	ldr	r0, [pc, #324]	; (8000864 <gsm_init+0x2e0>)
 800071e:	f004 fb91 	bl	8004e44 <iprintf>
			  	  			state=0;
 8000722:	2300      	movs	r3, #0
 8000724:	71fb      	strb	r3, [r7, #7]
			 	  			substate=0;
 8000726:	2300      	movs	r3, #0
 8000728:	71bb      	strb	r3, [r7, #6]
			  			  break;
 800072a:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 81d1 	bne.w	8000ad6 <gsm_init+0x552>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 8000734:	4856      	ldr	r0, [pc, #344]	; (8000890 <gsm_init+0x30c>)
 8000736:	f000 fc3b 	bl	8000fb0 <send_to_gsm>
 800073a:	4603      	mov	r3, r0
 800073c:	4a46      	ldr	r2, [pc, #280]	; (8000858 <gsm_init+0x2d4>)
 800073e:	6013      	str	r3, [r2, #0]
			  				  //HAL_Delay(1000);
			  				  printf("CAQ \n");
 8000740:	4854      	ldr	r0, [pc, #336]	; (8000894 <gsm_init+0x310>)
 8000742:	f004 fc05 	bl	8004f50 <puts>
			  				  int e=check_signal(str);
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <gsm_init+0x2d4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fa66 	bl	8000c1c <check_signal>
 8000750:	6038      	str	r0, [r7, #0]
			  				  if((strstr(str,"OK")!=NULL))
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <gsm_init+0x2d4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <gsm_init+0x314>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fc35 	bl	8004fc8 <strstr>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d01b      	beq.n	800079c <gsm_init+0x218>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4619      	mov	r1, r3
 800076a:	483e      	ldr	r0, [pc, #248]	; (8000864 <gsm_init+0x2e0>)
 800076c:	f004 fb6a 	bl	8004e44 <iprintf>
			  					  printf("CAQ OK\n");
 8000770:	484a      	ldr	r0, [pc, #296]	; (800089c <gsm_init+0x318>)
 8000772:	f004 fbed 	bl	8004f50 <puts>
			  					  if(e==0)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d107      	bne.n	800078c <gsm_init+0x208>
			  					  {
			  						  printf("signal OK\n");
 800077c:	4848      	ldr	r0, [pc, #288]	; (80008a0 <gsm_init+0x31c>)
 800077e:	f004 fbe7 	bl	8004f50 <puts>
			  						  state=4;
 8000782:	2304      	movs	r3, #4
 8000784:	71fb      	strb	r3, [r7, #7]
			  						  substate=0;
 8000786:	2300      	movs	r3, #0
 8000788:	71bb      	strb	r3, [r7, #6]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=0;
			  					  substate=0;
			  				  }
			  				  break;
 800078a:	e011      	b.n	80007b0 <gsm_init+0x22c>
			  						  printf("signal NOT OK\n");
 800078c:	4845      	ldr	r0, [pc, #276]	; (80008a4 <gsm_init+0x320>)
 800078e:	f004 fbdf 	bl	8004f50 <puts>
			  						  state=3;
 8000792:	2303      	movs	r3, #3
 8000794:	71fb      	strb	r3, [r7, #7]
			  						  substate=0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
			  				  break;
 800079a:	e009      	b.n	80007b0 <gsm_init+0x22c>
			  					  printf("state = %d substate = %d \n",state,substate);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	79ba      	ldrb	r2, [r7, #6]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <gsm_init+0x2e0>)
 80007a4:	f004 fb4e 	bl	8004e44 <iprintf>
			  					  state=0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	71fb      	strb	r3, [r7, #7]
			  					  substate=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	71bb      	strb	r3, [r7, #6]
			  				  break;
 80007b0:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 80007b2:	e190      	b.n	8000ad6 <gsm_init+0x552>
				  	case 4:
				  	{
				  		switch(substate)
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <gsm_init+0x23c>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d02f      	beq.n	800081e <gsm_init+0x29a>
				  				 state=0;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 80007be:	e042      	b.n	8000846 <gsm_init+0x2c2>
				  			  str =send_to_gsm("AT+CREG?\r");
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <gsm_init+0x324>)
 80007c2:	f000 fbf5 	bl	8000fb0 <send_to_gsm>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a23      	ldr	r2, [pc, #140]	; (8000858 <gsm_init+0x2d4>)
 80007ca:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <gsm_init+0x328>)
 80007ce:	f004 fbbf 	bl	8004f50 <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <gsm_init+0x2d4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4936      	ldr	r1, [pc, #216]	; (80008b0 <gsm_init+0x32c>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fbf5 	bl	8004fc8 <strstr>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d111      	bne.n	8000808 <gsm_init+0x284>
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <gsm_init+0x2d4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4932      	ldr	r1, [pc, #200]	; (80008b4 <gsm_init+0x330>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fbec 	bl	8004fc8 <strstr>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d108      	bne.n	8000808 <gsm_init+0x284>
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <gsm_init+0x2d4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	492f      	ldr	r1, [pc, #188]	; (80008b8 <gsm_init+0x334>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fbe3 	bl	8004fc8 <strstr>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <gsm_init+0x294>
				  				  state=5;
 8000808:	2305      	movs	r3, #5
 800080a:	71fb      	strb	r3, [r7, #7]
				  				  substate=0;
 800080c:	2300      	movs	r3, #0
 800080e:	71bb      	strb	r3, [r7, #6]
				  				  printf("match found\n");
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <gsm_init+0x338>)
 8000812:	f004 fb9d 	bl	8004f50 <puts>
				  			  break;
 8000816:	e016      	b.n	8000846 <gsm_init+0x2c2>
				  				  substate=1;
 8000818:	2301      	movs	r3, #1
 800081a:	71bb      	strb	r3, [r7, #6]
				  			  break;
 800081c:	e013      	b.n	8000846 <gsm_init+0x2c2>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <gsm_init+0x2d4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2206      	movs	r2, #6
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <gsm_init+0x2e8>)
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fbba 	bl	8004fa0 <strncmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d104      	bne.n	800083c <gsm_init+0x2b8>
				  				 state=0;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
				  				 substate=0;
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]
				  			 break;
 800083a:	e003      	b.n	8000844 <gsm_init+0x2c0>
				  				 state=0;
 800083c:	2300      	movs	r3, #0
 800083e:	71fb      	strb	r3, [r7, #7]
				  				 substate=0;
 8000840:	2300      	movs	r3, #0
 8000842:	71bb      	strb	r3, [r7, #6]
				  			 break;
 8000844:	bf00      	nop
				  		}
				  		break;
 8000846:	e149      	b.n	8000adc <gsm_init+0x558>
				  	}

				  	case 5:
				  		switch(substate)
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d038      	beq.n	80008c0 <gsm_init+0x33c>
 800084e:	2b01      	cmp	r3, #1
 8000850:	d059      	beq.n	8000906 <gsm_init+0x382>
				  				state=0;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 8000852:	e071      	b.n	8000938 <gsm_init+0x3b4>
 8000854:	08006270 	.word	0x08006270
 8000858:	20000154 	.word	0x20000154
 800085c:	08006278 	.word	0x08006278
 8000860:	08006280 	.word	0x08006280
 8000864:	08006288 	.word	0x08006288
 8000868:	080062a4 	.word	0x080062a4
 800086c:	080062b0 	.word	0x080062b0
 8000870:	080062bc 	.word	0x080062bc
 8000874:	080062c8 	.word	0x080062c8
 8000878:	080062d4 	.word	0x080062d4
 800087c:	080062dc 	.word	0x080062dc
 8000880:	080062e8 	.word	0x080062e8
 8000884:	080062f4 	.word	0x080062f4
 8000888:	080062fc 	.word	0x080062fc
 800088c:	08006304 	.word	0x08006304
 8000890:	08006310 	.word	0x08006310
 8000894:	08006318 	.word	0x08006318
 8000898:	08006320 	.word	0x08006320
 800089c:	08006324 	.word	0x08006324
 80008a0:	0800632c 	.word	0x0800632c
 80008a4:	08006338 	.word	0x08006338
 80008a8:	08006348 	.word	0x08006348
 80008ac:	08006354 	.word	0x08006354
 80008b0:	0800635c 	.word	0x0800635c
 80008b4:	08006360 	.word	0x08006360
 80008b8:	08006364 	.word	0x08006364
 80008bc:	08006368 	.word	0x08006368
				  			str = send_to_gsm("AT+CGREG?\r");
 80008c0:	4889      	ldr	r0, [pc, #548]	; (8000ae8 <gsm_init+0x564>)
 80008c2:	f000 fb75 	bl	8000fb0 <send_to_gsm>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a88      	ldr	r2, [pc, #544]	; (8000aec <gsm_init+0x568>)
 80008ca:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 80008cc:	4b87      	ldr	r3, [pc, #540]	; (8000aec <gsm_init+0x568>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4987      	ldr	r1, [pc, #540]	; (8000af0 <gsm_init+0x56c>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fb78 	bl	8004fc8 <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <gsm_init+0x36c>
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <gsm_init+0x568>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4984      	ldr	r1, [pc, #528]	; (8000af4 <gsm_init+0x570>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fb6f 	bl	8004fc8 <strstr>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <gsm_init+0x37c>
				  				state=6;
 80008f0:	2306      	movs	r3, #6
 80008f2:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	71bb      	strb	r3, [r7, #6]
				  				printf("match found\n");
 80008f8:	487f      	ldr	r0, [pc, #508]	; (8000af8 <gsm_init+0x574>)
 80008fa:	f004 fb29 	bl	8004f50 <puts>
				  			break;
 80008fe:	e01b      	b.n	8000938 <gsm_init+0x3b4>
				  				substate=1;
 8000900:	2301      	movs	r3, #1
 8000902:	71bb      	strb	r3, [r7, #6]
				  			break;
 8000904:	e018      	b.n	8000938 <gsm_init+0x3b4>
				  			str = send_to_gsm("AT+CGREG=1\r");
 8000906:	487d      	ldr	r0, [pc, #500]	; (8000afc <gsm_init+0x578>)
 8000908:	f000 fb52 	bl	8000fb0 <send_to_gsm>
 800090c:	4603      	mov	r3, r0
 800090e:	4a77      	ldr	r2, [pc, #476]	; (8000aec <gsm_init+0x568>)
 8000910:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 8000912:	4b76      	ldr	r3, [pc, #472]	; (8000aec <gsm_init+0x568>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	497a      	ldr	r1, [pc, #488]	; (8000b00 <gsm_init+0x57c>)
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fb55 	bl	8004fc8 <strstr>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <gsm_init+0x3aa>
				  				state=5;
 8000924:	2305      	movs	r3, #5
 8000926:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 8000928:	2300      	movs	r3, #0
 800092a:	71bb      	strb	r3, [r7, #6]
				  			break;
 800092c:	e003      	b.n	8000936 <gsm_init+0x3b2>
				  				state=0;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 8000932:	2300      	movs	r3, #0
 8000934:	71bb      	strb	r3, [r7, #6]
				  			break;
 8000936:	bf00      	nop
				  		}
				  		break;
 8000938:	e0d0      	b.n	8000adc <gsm_init+0x558>

				  	case 6:
				  		{
				  			switch(substate)
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d04a      	beq.n	80009d6 <gsm_init+0x452>
 8000940:	2b02      	cmp	r3, #2
 8000942:	f300 80ca 	bgt.w	8000ada <gsm_init+0x556>
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <gsm_init+0x3cc>
 800094a:	2b01      	cmp	r3, #1
 800094c:	d026      	beq.n	800099c <gsm_init+0x418>
				  					substate=0;
				  				}
				  				break;

				  			}
				  			break;
 800094e:	e0c4      	b.n	8000ada <gsm_init+0x556>
				  				str = send_to_gsm("AT+COPS?\r");
 8000950:	486c      	ldr	r0, [pc, #432]	; (8000b04 <gsm_init+0x580>)
 8000952:	f000 fb2d 	bl	8000fb0 <send_to_gsm>
 8000956:	4603      	mov	r3, r0
 8000958:	4a64      	ldr	r2, [pc, #400]	; (8000aec <gsm_init+0x568>)
 800095a:	6013      	str	r3, [r2, #0]
				  				printf("COPS?\n");
 800095c:	486a      	ldr	r0, [pc, #424]	; (8000b08 <gsm_init+0x584>)
 800095e:	f004 faf7 	bl	8004f50 <puts>
				  				if((strstr(str,"40449")!=NULL))
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <gsm_init+0x568>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4969      	ldr	r1, [pc, #420]	; (8000b0c <gsm_init+0x588>)
 8000968:	4618      	mov	r0, r3
 800096a:	f004 fb2d 	bl	8004fc8 <strstr>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00a      	beq.n	800098a <gsm_init+0x406>
				  					printf("state = %d substate = %d \n",state,substate);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	79ba      	ldrb	r2, [r7, #6]
 8000978:	4619      	mov	r1, r3
 800097a:	4865      	ldr	r0, [pc, #404]	; (8000b10 <gsm_init+0x58c>)
 800097c:	f004 fa62 	bl	8004e44 <iprintf>
				  					state=7;
 8000980:	2307      	movs	r3, #7
 8000982:	71fb      	strb	r3, [r7, #7]
				  					substate=1;
 8000984:	2301      	movs	r3, #1
 8000986:	71bb      	strb	r3, [r7, #6]
				  				break;
 8000988:	e044      	b.n	8000a14 <gsm_init+0x490>
				  					printf("state = %d substate = %d \n",state,substate);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	79ba      	ldrb	r2, [r7, #6]
 800098e:	4619      	mov	r1, r3
 8000990:	485f      	ldr	r0, [pc, #380]	; (8000b10 <gsm_init+0x58c>)
 8000992:	f004 fa57 	bl	8004e44 <iprintf>
				  					substate=1;
 8000996:	2301      	movs	r3, #1
 8000998:	71bb      	strb	r3, [r7, #6]
				  				break;
 800099a:	e03b      	b.n	8000a14 <gsm_init+0x490>
				  				if((strstr(str,"405854")!=NULL))
 800099c:	4b53      	ldr	r3, [pc, #332]	; (8000aec <gsm_init+0x568>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	495c      	ldr	r1, [pc, #368]	; (8000b14 <gsm_init+0x590>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 fb10 	bl	8004fc8 <strstr>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00a      	beq.n	80009c4 <gsm_init+0x440>
				  					printf("state = %d substate = %d \n",state,substate);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	79ba      	ldrb	r2, [r7, #6]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4856      	ldr	r0, [pc, #344]	; (8000b10 <gsm_init+0x58c>)
 80009b6:	f004 fa45 	bl	8004e44 <iprintf>
				  					state=7;
 80009ba:	2307      	movs	r3, #7
 80009bc:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	71bb      	strb	r3, [r7, #6]
				  				break;
 80009c2:	e027      	b.n	8000a14 <gsm_init+0x490>
				  					printf("state = %d substate = %d \n",state,substate);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	79ba      	ldrb	r2, [r7, #6]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4851      	ldr	r0, [pc, #324]	; (8000b10 <gsm_init+0x58c>)
 80009cc:	f004 fa3a 	bl	8004e44 <iprintf>
				  					substate=2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	71bb      	strb	r3, [r7, #6]
				  				break;
 80009d4:	e01e      	b.n	8000a14 <gsm_init+0x490>
				  				if((strstr(str,"ERROR")!=NULL))
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <gsm_init+0x568>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	494f      	ldr	r1, [pc, #316]	; (8000b18 <gsm_init+0x594>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 faf3 	bl	8004fc8 <strstr>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00a      	beq.n	80009fe <gsm_init+0x47a>
				  					printf("state = %d substate = %d \n",state,substate);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4619      	mov	r1, r3
 80009ee:	4848      	ldr	r0, [pc, #288]	; (8000b10 <gsm_init+0x58c>)
 80009f0:	f004 fa28 	bl	8004e44 <iprintf>
				  					state=0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71bb      	strb	r3, [r7, #6]
				  				break;
 80009fc:	e009      	b.n	8000a12 <gsm_init+0x48e>
				  					printf("state = %d substate = %d \n",state,substate);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	79ba      	ldrb	r2, [r7, #6]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4842      	ldr	r0, [pc, #264]	; (8000b10 <gsm_init+0x58c>)
 8000a06:	f004 fa1d 	bl	8004e44 <iprintf>
				  					state=0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]
				  				break;
 8000a12:	bf00      	nop
				  			break;
 8000a14:	e061      	b.n	8000ada <gsm_init+0x556>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <gsm_init+0x49e>
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d029      	beq.n	8000a74 <gsm_init+0x4f0>
				  					substate=0;
				  				}
				  				break;
				  			}

				  			break;
 8000a20:	e05c      	b.n	8000adc <gsm_init+0x558>
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8000a22:	483e      	ldr	r0, [pc, #248]	; (8000b1c <gsm_init+0x598>)
 8000a24:	f000 fac4 	bl	8000fb0 <send_to_gsm>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a30      	ldr	r2, [pc, #192]	; (8000aec <gsm_init+0x568>)
 8000a2c:	6013      	str	r3, [r2, #0]
				  				printf("CGDCONT=1 jio\n");
 8000a2e:	483c      	ldr	r0, [pc, #240]	; (8000b20 <gsm_init+0x59c>)
 8000a30:	f004 fa8e 	bl	8004f50 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <gsm_init+0x568>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2206      	movs	r2, #6
 8000a3a:	493a      	ldr	r1, [pc, #232]	; (8000b24 <gsm_init+0x5a0>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 faaf 	bl	8004fa0 <strncmp>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10a      	bne.n	8000a5e <gsm_init+0x4da>
				  					printf("state = %d substate = %d \n",state,substate);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4830      	ldr	r0, [pc, #192]	; (8000b10 <gsm_init+0x58c>)
 8000a50:	f004 f9f8 	bl	8004e44 <iprintf>
				  					state=8;
 8000a54:	2308      	movs	r3, #8
 8000a56:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71bb      	strb	r3, [r7, #6]
				  				break;
 8000a5c:	e033      	b.n	8000ac6 <gsm_init+0x542>
				  					printf("state = %d substate = %d \n",state,substate);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	79ba      	ldrb	r2, [r7, #6]
 8000a62:	4619      	mov	r1, r3
 8000a64:	482a      	ldr	r0, [pc, #168]	; (8000b10 <gsm_init+0x58c>)
 8000a66:	f004 f9ed 	bl	8004e44 <iprintf>
				  					state=6;
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71bb      	strb	r3, [r7, #6]
				  				break;
 8000a72:	e028      	b.n	8000ac6 <gsm_init+0x542>
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 8000a74:	482c      	ldr	r0, [pc, #176]	; (8000b28 <gsm_init+0x5a4>)
 8000a76:	f000 fa9b 	bl	8000fb0 <send_to_gsm>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <gsm_init+0x568>)
 8000a7e:	6013      	str	r3, [r2, #0]
				  				printf("CGDCONT=1 airtel\n");
 8000a80:	482a      	ldr	r0, [pc, #168]	; (8000b2c <gsm_init+0x5a8>)
 8000a82:	f004 fa65 	bl	8004f50 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <gsm_init+0x568>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	4925      	ldr	r1, [pc, #148]	; (8000b24 <gsm_init+0x5a0>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fa86 	bl	8004fa0 <strncmp>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10a      	bne.n	8000ab0 <gsm_init+0x52c>
				  					printf("state = %d substate = %d \n",state,substate);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	79ba      	ldrb	r2, [r7, #6]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481b      	ldr	r0, [pc, #108]	; (8000b10 <gsm_init+0x58c>)
 8000aa2:	f004 f9cf 	bl	8004e44 <iprintf>
				  					state=8;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71bb      	strb	r3, [r7, #6]
				  				break;
 8000aae:	e009      	b.n	8000ac4 <gsm_init+0x540>
				  					printf("state = %d substate = %d \n",state,substate);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4816      	ldr	r0, [pc, #88]	; (8000b10 <gsm_init+0x58c>)
 8000ab8:	f004 f9c4 	bl	8004e44 <iprintf>
				  					state=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	71bb      	strb	r3, [r7, #6]
				  				break;
 8000ac4:	bf00      	nop
				  			break;
 8000ac6:	e009      	b.n	8000adc <gsm_init+0x558>

				  		}


				  		default:
				  			printf("completed work \n");
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <gsm_init+0x5ac>)
 8000aca:	f004 fa41 	bl	8004f50 <puts>
				  			return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e005      	b.n	8000ade <gsm_init+0x55a>
			  		  break;
 8000ad2:	bf00      	nop
 8000ad4:	e55d      	b.n	8000592 <gsm_init+0xe>
			  			break;
 8000ad6:	bf00      	nop
 8000ad8:	e55b      	b.n	8000592 <gsm_init+0xe>
				  			break;
 8000ada:	bf00      	nop
	switch(state)
 8000adc:	e559      	b.n	8000592 <gsm_init+0xe>
			  	  }
	}
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	08006374 	.word	0x08006374
 8000aec:	20000154 	.word	0x20000154
 8000af0:	0800635c 	.word	0x0800635c
 8000af4:	08006380 	.word	0x08006380
 8000af8:	08006368 	.word	0x08006368
 8000afc:	08006384 	.word	0x08006384
 8000b00:	08006320 	.word	0x08006320
 8000b04:	08006390 	.word	0x08006390
 8000b08:	0800639c 	.word	0x0800639c
 8000b0c:	080063a4 	.word	0x080063a4
 8000b10:	08006288 	.word	0x08006288
 8000b14:	080063ac 	.word	0x080063ac
 8000b18:	080063b4 	.word	0x080063b4
 8000b1c:	080063bc 	.word	0x080063bc
 8000b20:	080063d8 	.word	0x080063d8
 8000b24:	08006280 	.word	0x08006280
 8000b28:	080063e8 	.word	0x080063e8
 8000b2c:	0800640c 	.word	0x0800640c
 8000b30:	08006420 	.word	0x08006420

08000b34 <check_server_connection>:
int check_server_connection()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
	int state=0,substate=0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
	int time_out=30;
 8000b42:	231e      	movs	r3, #30
 8000b44:	607b      	str	r3, [r7, #4]
	while(time_out)
 8000b46:	e02d      	b.n	8000ba4 <check_server_connection+0x70>
	{
		switch(state)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <check_server_connection+0x22>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d014      	beq.n	8000b7e <check_server_connection+0x4a>
 8000b54:	e026      	b.n	8000ba4 <check_server_connection+0x70>
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN?\r");
 8000b56:	4817      	ldr	r0, [pc, #92]	; (8000bb4 <check_server_connection+0x80>)
 8000b58:	f000 fa2a 	bl	8000fb0 <send_to_gsm>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <check_server_connection+0x84>)
 8000b60:	6013      	str	r3, [r2, #0]
			if(strstr(str,"ERROR")!=NULL)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <check_server_connection+0x84>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4915      	ldr	r1, [pc, #84]	; (8000bbc <check_server_connection+0x88>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fa2d 	bl	8004fc8 <strstr>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <check_server_connection+0x46>
			{
				state=0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e001      	b.n	8000b7e <check_server_connection+0x4a>
			}
			else
			{
				substate=1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
			}
		case 1:
			if(strstr(str,"139.59.78.252")!=NULL)
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <check_server_connection+0x84>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	490f      	ldr	r1, [pc, #60]	; (8000bc0 <check_server_connection+0x8c>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 fa1f 	bl	8004fc8 <strstr>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <check_server_connection+0x66>
			{
				printf("tcp connection established\n");
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <check_server_connection+0x90>)
 8000b92:	f004 f9dd 	bl	8004f50 <puts>
				return 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e008      	b.n	8000bac <check_server_connection+0x78>
			}
			else
			{
				printf("tcp connection NOT established\n");
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <check_server_connection+0x94>)
 8000b9c:	f004 f9d8 	bl	8004f50 <puts>
				return 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e003      	b.n	8000bac <check_server_connection+0x78>
	while(time_out)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1ce      	bne.n	8000b48 <check_server_connection+0x14>
			}

		}
	}
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	08006430 	.word	0x08006430
 8000bb8:	20000154 	.word	0x20000154
 8000bbc:	080063b4 	.word	0x080063b4
 8000bc0:	08006440 	.word	0x08006440
 8000bc4:	08006450 	.word	0x08006450
 8000bc8:	0800646c 	.word	0x0800646c

08000bcc <gsm_disconnect_to_server>:


int gsm_disconnect_to_server()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	int cls_state=0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
	//while(1)
	{
	switch(cls_state)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d113      	bne.n	8000c04 <gsm_disconnect_to_server+0x38>
	{
	case 0:
		str =(char *) send_to_gsm("AT+CIPCLOSE\r");
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <gsm_disconnect_to_server+0x44>)
 8000bde:	f000 f9e7 	bl	8000fb0 <send_to_gsm>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <gsm_disconnect_to_server+0x48>)
 8000be6:	6013      	str	r3, [r2, #0]
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <gsm_disconnect_to_server+0x48>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2206      	movs	r2, #6
 8000bee:	490a      	ldr	r1, [pc, #40]	; (8000c18 <gsm_disconnect_to_server+0x4c>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 f9d5 	bl	8004fa0 <strncmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <gsm_disconnect_to_server+0x34>
			{
//				printf("state = %d substate = %d \n",state,substate);
			    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e003      	b.n	8000c08 <gsm_disconnect_to_server+0x3c>
			 }
			else
			{
				cls_state=0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
			}
	}
	}
	return -1;
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295


}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	0800648c 	.word	0x0800648c
 8000c14:	20000154 	.word	0x20000154
 8000c18:	08006280 	.word	0x08006280

08000c1c <check_signal>:

int check_signal(char *str)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8000c28:	e04b      	b.n	8000cc2 <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d120      	bne.n	8000c7a <check_signal+0x5e>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b02      	subs	r3, #2
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b3a      	cmp	r3, #58	; 0x3a
 8000c44:	d119      	bne.n	8000c7a <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c50:	d805      	bhi.n	8000c5e <check_signal+0x42>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b39      	cmp	r3, #57	; 0x39
 8000c5c:	d80d      	bhi.n	8000c7a <check_signal+0x5e>
		{
			rssi=str+i;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4833      	ldr	r0, [pc, #204]	; (8000d44 <check_signal+0x128>)
 8000c76:	f004 f8e5 	bl	8004e44 <iprintf>
		}
	    }
	    if(str[i-1]==',')
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b2c      	cmp	r3, #44	; 0x2c
 8000c86:	d119      	bne.n	8000cbc <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b2f      	cmp	r3, #47	; 0x2f
 8000c92:	d805      	bhi.n	8000ca0 <check_signal+0x84>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b39      	cmp	r3, #57	; 0x39
 8000c9e:	d80d      	bhi.n	8000cbc <check_signal+0xa0>
		        {
		        	ber=str+i;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4824      	ldr	r0, [pc, #144]	; (8000d48 <check_signal+0x12c>)
 8000cb8:	f004 f8c4 	bl	8004e44 <iprintf>
	        	}

	    }
		i++;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1ad      	bne.n	8000c2a <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	481b      	ldr	r0, [pc, #108]	; (8000d4c <check_signal+0x130>)
 8000cde:	f004 f8b1 	bl	8004e44 <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	3301      	adds	r3, #1
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4817      	ldr	r0, [pc, #92]	; (8000d50 <check_signal+0x134>)
 8000cf2:	f004 f8a7 	bl	8004e44 <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b39      	cmp	r3, #57	; 0x39
 8000cfc:	d11d      	bne.n	8000d3a <check_signal+0x11e>
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	3301      	adds	r3, #1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b39      	cmp	r3, #57	; 0x39
 8000d06:	d118      	bne.n	8000d3a <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b31      	cmp	r3, #49	; 0x31
 8000d0e:	d803      	bhi.n	8000d18 <check_signal+0xfc>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b38      	cmp	r3, #56	; 0x38
 8000d16:	d80e      	bhi.n	8000d36 <check_signal+0x11a>
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d20:	d804      	bhi.n	8000d2c <check_signal+0x110>
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b39      	cmp	r3, #57	; 0x39
 8000d2a:	d804      	bhi.n	8000d36 <check_signal+0x11a>
	    {
	    printf("ok");
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <check_signal+0x138>)
 8000d2e:	f004 f889 	bl	8004e44 <iprintf>
	    return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e002      	b.n	8000d3c <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 8000d3a:	2301      	movs	r3, #1
	}
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	0800649c 	.word	0x0800649c
 8000d48:	080064a8 	.word	0x080064a8
 8000d4c:	080064b4 	.word	0x080064b4
 8000d50:	080064c4 	.word	0x080064c4
 8000d54:	080064d4 	.word	0x080064d4

08000d58 <connect_tcp_server>:

int connect_tcp_server()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
	int state=0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
	int substate=0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
	int count=30;
 8000d66:	231e      	movs	r3, #30
 8000d68:	607b      	str	r3, [r7, #4]
	while(count--)
 8000d6a:	e0f3      	b.n	8000f54 <connect_tcp_server+0x1fc>
	{
	switch(state)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	f000 8086 	beq.w	8000e80 <connect_tcp_server+0x128>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	f300 80e7 	bgt.w	8000f4a <connect_tcp_server+0x1f2>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <connect_tcp_server+0x32>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d036      	beq.n	8000df6 <connect_tcp_server+0x9e>
 8000d88:	e0df      	b.n	8000f4a <connect_tcp_server+0x1f2>
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <connect_tcp_server+0x40>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d017      	beq.n	8000dc6 <connect_tcp_server+0x6e>
 8000d96:	e0dd      	b.n	8000f54 <connect_tcp_server+0x1fc>
	case 0:
	{
		switch(substate)
		{
		case 0:
			str=send_to_gsm("AT+CIPMODE?\r\n");
 8000d98:	4875      	ldr	r0, [pc, #468]	; (8000f70 <connect_tcp_server+0x218>)
 8000d9a:	f000 f909 	bl	8000fb0 <send_to_gsm>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a74      	ldr	r2, [pc, #464]	; (8000f74 <connect_tcp_server+0x21c>)
 8000da2:	6013      	str	r3, [r2, #0]
			if(strstr(str,"+CIPMODE: 0"))
 8000da4:	4b73      	ldr	r3, [pc, #460]	; (8000f74 <connect_tcp_server+0x21c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4973      	ldr	r1, [pc, #460]	; (8000f78 <connect_tcp_server+0x220>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 f90c 	bl	8004fc8 <strstr>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d004      	beq.n	8000dc0 <connect_tcp_server+0x68>
			{
				state=1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=1;
			}
			break;
 8000dbe:	e019      	b.n	8000df4 <connect_tcp_server+0x9c>
				substate=1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
			break;
 8000dc4:	e016      	b.n	8000df4 <connect_tcp_server+0x9c>
		case 1:
			str=send_to_gsm("AT+CIPMODE=0\r\n");
 8000dc6:	486d      	ldr	r0, [pc, #436]	; (8000f7c <connect_tcp_server+0x224>)
 8000dc8:	f000 f8f2 	bl	8000fb0 <send_to_gsm>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a69      	ldr	r2, [pc, #420]	; (8000f74 <connect_tcp_server+0x21c>)
 8000dd0:	6013      	str	r3, [r2, #0]
			if(strstr(str,"OK"))
 8000dd2:	4b68      	ldr	r3, [pc, #416]	; (8000f74 <connect_tcp_server+0x21c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	496a      	ldr	r1, [pc, #424]	; (8000f80 <connect_tcp_server+0x228>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 f8f5 	bl	8004fc8 <strstr>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <connect_tcp_server+0x96>
			{
				state=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=0;
			}
			break;
 8000dec:	e001      	b.n	8000df2 <connect_tcp_server+0x9a>
				substate=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
			break;
 8000df2:	bf00      	nop
		}
		break;
 8000df4:	e0ae      	b.n	8000f54 <connect_tcp_server+0x1fc>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <connect_tcp_server+0xac>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d025      	beq.n	8000e4e <connect_tcp_server+0xf6>
 8000e02:	e0a7      	b.n	8000f54 <connect_tcp_server+0x1fc>
	case 1:
	{
		switch(substate)
		{
		case 0:
			str = send_to_gsm("AT+NETOPEN\r\n");
 8000e04:	485f      	ldr	r0, [pc, #380]	; (8000f84 <connect_tcp_server+0x22c>)
 8000e06:	f000 f8d3 	bl	8000fb0 <send_to_gsm>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a59      	ldr	r2, [pc, #356]	; (8000f74 <connect_tcp_server+0x21c>)
 8000e0e:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("NETOPEN\n");
 8000e10:	485d      	ldr	r0, [pc, #372]	; (8000f88 <connect_tcp_server+0x230>)
 8000e12:	f004 f89d 	bl	8004f50 <puts>
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <connect_tcp_server+0x21c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	495b      	ldr	r1, [pc, #364]	; (8000f8c <connect_tcp_server+0x234>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 f8be 	bl	8004fa0 <strncmp>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <connect_tcp_server+0xe6>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	4858      	ldr	r0, [pc, #352]	; (8000f90 <connect_tcp_server+0x238>)
 8000e30:	f004 f808 	bl	8004e44 <iprintf>
				state=2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
			else
			{
				printf("state = %d substate = %d \n",state,substate);
				substate=1;
			}
			break;
 8000e3c:	e01f      	b.n	8000e7e <connect_tcp_server+0x126>
				printf("state = %d substate = %d \n",state,substate);
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	68f9      	ldr	r1, [r7, #12]
 8000e42:	4853      	ldr	r0, [pc, #332]	; (8000f90 <connect_tcp_server+0x238>)
 8000e44:	f003 fffe 	bl	8004e44 <iprintf>
				substate=1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
			break;
 8000e4c:	e017      	b.n	8000e7e <connect_tcp_server+0x126>
		case 1:
			if((strstr(str,"Network is already opened")!=NULL))
 8000e4e:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <connect_tcp_server+0x21c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4950      	ldr	r1, [pc, #320]	; (8000f94 <connect_tcp_server+0x23c>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 f8b7 	bl	8004fc8 <strstr>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <connect_tcp_server+0x11c>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	68f9      	ldr	r1, [r7, #12]
 8000e64:	484a      	ldr	r0, [pc, #296]	; (8000f90 <connect_tcp_server+0x238>)
 8000e66:	f003 ffed 	bl	8004e44 <iprintf>
				state=2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
			else
			{
				state=0;
				substate=0;
			}
			break;
 8000e72:	e003      	b.n	8000e7c <connect_tcp_server+0x124>
				state=0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
			break;
 8000e7c:	bf00      	nop

		}
		break;
 8000e7e:	e069      	b.n	8000f54 <connect_tcp_server+0x1fc>
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d044      	beq.n	8000f10 <connect_tcp_server+0x1b8>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	dc63      	bgt.n	8000f54 <connect_tcp_server+0x1fc>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <connect_tcp_server+0x142>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d024      	beq.n	8000ee2 <connect_tcp_server+0x18a>
 8000e98:	e05c      	b.n	8000f54 <connect_tcp_server+0x1fc>
	case 2:
	{
		switch(substate)
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",49791\r");
 8000e9a:	483f      	ldr	r0, [pc, #252]	; (8000f98 <connect_tcp_server+0x240>)
 8000e9c:	f000 f888 	bl	8000fb0 <send_to_gsm>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <connect_tcp_server+0x21c>)
 8000ea4:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("CIPOPEN\n");
 8000ea6:	483d      	ldr	r0, [pc, #244]	; (8000f9c <connect_tcp_server+0x244>)
 8000ea8:	f004 f852 	bl	8004f50 <puts>
			if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 8000eac:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <connect_tcp_server+0x21c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	493b      	ldr	r1, [pc, #236]	; (8000fa0 <connect_tcp_server+0x248>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 f888 	bl	8004fc8 <strstr>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <connect_tcp_server+0x17a>
				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
			{
				printf("state = %d substate = %d \n",state,substate);
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	4833      	ldr	r0, [pc, #204]	; (8000f90 <connect_tcp_server+0x238>)
 8000ec4:	f003 ffbe 	bl	8004e44 <iprintf>
				state=3;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=1;
			}
			break;
 8000ed0:	e03a      	b.n	8000f48 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	482e      	ldr	r0, [pc, #184]	; (8000f90 <connect_tcp_server+0x238>)
 8000ed8:	f003 ffb4 	bl	8004e44 <iprintf>
				substate=1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
			break;
 8000ee0:	e032      	b.n	8000f48 <connect_tcp_server+0x1f0>
		case 1:
			if(check_server_connection()==0)
 8000ee2:	f7ff fe27 	bl	8000b34 <check_server_connection>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <connect_tcp_server+0x1a8>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	68f9      	ldr	r1, [r7, #12]
 8000ef0:	4827      	ldr	r0, [pc, #156]	; (8000f90 <connect_tcp_server+0x238>)
 8000ef2:	f003 ffa7 	bl	8004e44 <iprintf>
				state=3;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=2;
			}
			break;
 8000efe:	e023      	b.n	8000f48 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	68f9      	ldr	r1, [r7, #12]
 8000f04:	4822      	ldr	r0, [pc, #136]	; (8000f90 <connect_tcp_server+0x238>)
 8000f06:	f003 ff9d 	bl	8004e44 <iprintf>
				substate=2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
			break;
 8000f0e:	e01b      	b.n	8000f48 <connect_tcp_server+0x1f0>
		case 2:
			//if((strstr(str,"ERROR")!=NULL))
			if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <connect_tcp_server+0x21c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2206      	movs	r2, #6
 8000f16:	4923      	ldr	r1, [pc, #140]	; (8000fa4 <connect_tcp_server+0x24c>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f841 	bl	8004fa0 <strncmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d107      	bne.n	8000f34 <connect_tcp_server+0x1dc>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	4819      	ldr	r0, [pc, #100]	; (8000f90 <connect_tcp_server+0x238>)
 8000f2a:	f003 ff8b 	bl	8004e44 <iprintf>
				//state=3;
				substate=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				state=0;
				substate=0;
			}
			break;
 8000f32:	e008      	b.n	8000f46 <connect_tcp_server+0x1ee>
				printf("state = %d substate = %d \n",state,substate);
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	68f9      	ldr	r1, [r7, #12]
 8000f38:	4815      	ldr	r0, [pc, #84]	; (8000f90 <connect_tcp_server+0x238>)
 8000f3a:	f003 ff83 	bl	8004e44 <iprintf>
				state=0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
			break;
 8000f46:	bf00      	nop


		}
		break;
 8000f48:	e004      	b.n	8000f54 <connect_tcp_server+0x1fc>
	}
	default:
		printf("opened successfulyy\n");
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <connect_tcp_server+0x250>)
 8000f4c:	f004 f800 	bl	8004f50 <puts>
		return 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e009      	b.n	8000f68 <connect_tcp_server+0x210>
	while(count--)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f af06 	bne.w	8000d6c <connect_tcp_server+0x14>
	}
}
	printf("Time out\n");
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <connect_tcp_server+0x254>)
 8000f62:	f003 fff5 	bl	8004f50 <puts>

	return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	080064d8 	.word	0x080064d8
 8000f74:	20000154 	.word	0x20000154
 8000f78:	080064e8 	.word	0x080064e8
 8000f7c:	080064f4 	.word	0x080064f4
 8000f80:	08006320 	.word	0x08006320
 8000f84:	08006504 	.word	0x08006504
 8000f88:	08006514 	.word	0x08006514
 8000f8c:	08006280 	.word	0x08006280
 8000f90:	08006288 	.word	0x08006288
 8000f94:	0800651c 	.word	0x0800651c
 8000f98:	08006538 	.word	0x08006538
 8000f9c:	08006564 	.word	0x08006564
 8000fa0:	0800656c 	.word	0x0800656c
 8000fa4:	080062b0 	.word	0x080062b0
 8000fa8:	0800657c 	.word	0x0800657c
 8000fac:	08006590 	.word	0x08006590

08000fb0 <send_to_gsm>:
	return -1;
}


char *send_to_gsm(char * command)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	480f      	ldr	r0, [pc, #60]	; (8000ffc <send_to_gsm+0x4c>)
 8000fbe:	f003 ff39 	bl	8004e34 <memset>
	 printf("tx start\n");
 8000fc2:	480f      	ldr	r0, [pc, #60]	; (8001000 <send_to_gsm+0x50>)
 8000fc4:	f003 ffc4 	bl	8004f50 <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f901 	bl	80001d0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <send_to_gsm+0x54>)
 8000fd8:	f002 fdc2 	bl	8003b60 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	22c8      	movs	r2, #200	; 0xc8
 8000fe2:	4906      	ldr	r1, [pc, #24]	; (8000ffc <send_to_gsm+0x4c>)
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <send_to_gsm+0x54>)
 8000fe6:	f002 fce9 	bl	80039bc <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8000fea:	4904      	ldr	r1, [pc, #16]	; (8000ffc <send_to_gsm+0x4c>)
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <send_to_gsm+0x58>)
 8000fee:	f003 ff29 	bl	8004e44 <iprintf>
	 return (char *)rx;
 8000ff2:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <send_to_gsm+0x4c>)
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000008c 	.word	0x2000008c
 8001000:	080065cc 	.word	0x080065cc
 8001004:	20000158 	.word	0x20000158
 8001008:	080065d8 	.word	0x080065d8

0800100c <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
		char buf[20];
		memset(buf,'\0',sizeof(buf));
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2214      	movs	r2, #20
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 ff08 	bl	8004e34 <memset>
		sprintf(buf, "AT+CIPSEND=0,%d\r", strlen(mes));
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f8d3 	bl	80001d0 <strlen>
 800102a:	4602      	mov	r2, r0
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4922      	ldr	r1, [pc, #136]	; (80010bc <send_mesg_to_server+0xb0>)
 8001032:	4618      	mov	r0, r3
 8001034:	f003 ff94 	bl	8004f60 <siprintf>
		memset(rx,'\0',sizeof(rx));
 8001038:	22c8      	movs	r2, #200	; 0xc8
 800103a:	2100      	movs	r1, #0
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <send_mesg_to_server+0xb4>)
 800103e:	f003 fef9 	bl	8004e34 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)buf,16);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2210      	movs	r2, #16
 8001048:	4619      	mov	r1, r3
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <send_mesg_to_server+0xb8>)
 800104c:	f002 fd88 	bl	8003b60 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001050:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001054:	22c8      	movs	r2, #200	; 0xc8
 8001056:	491a      	ldr	r1, [pc, #104]	; (80010c0 <send_mesg_to_server+0xb4>)
 8001058:	481a      	ldr	r0, [pc, #104]	; (80010c4 <send_mesg_to_server+0xb8>)
 800105a:	f002 fcaf 	bl	80039bc <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 800105e:	4918      	ldr	r1, [pc, #96]	; (80010c0 <send_mesg_to_server+0xb4>)
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <send_mesg_to_server+0xbc>)
 8001062:	f003 feef 	bl	8004e44 <iprintf>
		memset(rx,'\0',sizeof(rx));
 8001066:	22c8      	movs	r2, #200	; 0xc8
 8001068:	2100      	movs	r1, #0
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <send_mesg_to_server+0xb4>)
 800106c:	f003 fee2 	bl	8004e34 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)mes,size);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <send_mesg_to_server+0xb8>)
 800107a:	f002 fd71 	bl	8003b60 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,5000);
 800107e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001082:	22c8      	movs	r2, #200	; 0xc8
 8001084:	490e      	ldr	r1, [pc, #56]	; (80010c0 <send_mesg_to_server+0xb4>)
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <send_mesg_to_server+0xb8>)
 8001088:	f002 fc98 	bl	80039bc <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <send_mesg_to_server+0xb4>)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <send_mesg_to_server+0xbc>)
 8001090:	f003 fed8 	bl	8004e44 <iprintf>
		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 8001094:	490d      	ldr	r1, [pc, #52]	; (80010cc <send_mesg_to_server+0xc0>)
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <send_mesg_to_server+0xb4>)
 8001098:	f003 ff96 	bl	8004fc8 <strstr>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <send_mesg_to_server+0xa0>
		{
			printf("mesg send successfully\n");
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <send_mesg_to_server+0xc4>)
 80010a4:	f003 ff54 	bl	8004f50 <puts>
			return HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e003      	b.n	80010b4 <send_mesg_to_server+0xa8>
		}
		else
		{
			printf("mesg NOT send\n");
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <send_mesg_to_server+0xc8>)
 80010ae:	f003 ff4f 	bl	8004f50 <puts>
			return 1;
 80010b2:	2301      	movs	r3, #1
		}
	return 1;
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	080065e4 	.word	0x080065e4
 80010c0:	2000008c 	.word	0x2000008c
 80010c4:	20000158 	.word	0x20000158
 80010c8:	080065f8 	.word	0x080065f8
 80010cc:	08006280 	.word	0x08006280
 80010d0:	0800660c 	.word	0x0800660c
 80010d4:	08006624 	.word	0x08006624

080010d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001100:	e000      	b.n	8001104 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001102:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001104:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f9      	beq.n	8001102 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800110e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_write>:
#include "main.h"
#include<stdio.h>
#include<string.h>
#include"GSM.h"
int _write(int file,char *ptr,int len)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
    int i=0;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <_write+0x2a>
      ITM_SendChar((*ptr++));
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffc7 	bl	80010d8 <ITM_SendChar>
    for(i=0;i<len;i++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf1      	blt.n	800113c <_write+0x16>
    return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <main>:

	// return (char *)rx;
}
*/
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116a:	f000 fcdf 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116e:	f000 f863 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001172:	f000 f9a3 	bl	80014bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001176:	f000 f941 	bl	80013fc <MX_USART2_UART_Init>
  MX_UART4_Init();
 800117a:	f000 f8af 	bl	80012dc <MX_UART4_Init>
  MX_UART5_Init();
 800117e:	f000 f8dd 	bl	800133c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001182:	f000 f90b 	bl	800139c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001186:	f000 f969 	bl	800145c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
int i=0;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
/*send_to_gsm("ATE0\r");
send_at("AT+CSQ\r\n", "\r\n+CSQ: 29,99\r\n");
	  HAL_Delay(5000);
	  send_at("AT+CSQ\r\n", "\r\n+CSQ: 29,99\r\n");
	  	  HAL_Delay(5000);*/
int s1=0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
	  	  {
	  //send_at("ATE0\r\n", "OK");
	 // HAL_Delay(5000);
	  //send_at("AT+CSQ\r\n", "CSQ");
	  //HAL_Delay(5000);
	  		  switch(s1)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d8fc      	bhi.n	8001192 <main+0x2e>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <main+0x3c>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011cd 	.word	0x080011cd
 80011a8:	080011e3 	.word	0x080011e3
 80011ac:	080011f9 	.word	0x080011f9
 80011b0:	08001219 	.word	0x08001219
	  		  {
	  		  case 0:
	  			m =gsm_init();
 80011b4:	f7ff f9e6 	bl	8000584 <gsm_init>
 80011b8:	6078      	str	r0, [r7, #4]
	  			if(m==0)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <main+0x62>
	  			{
	  				s1=1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 80011c4:	e033      	b.n	800122e <main+0xca>
	  				s1=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
	  			break;
 80011ca:	e030      	b.n	800122e <main+0xca>
	  		  case 1:
	  			if(connect_tcp_server()==0)
 80011cc:	f7ff fdc4 	bl	8000d58 <connect_tcp_server>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <main+0x78>
	  			{
	  				s1=2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 80011da:	e028      	b.n	800122e <main+0xca>
	  				s1=0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
	  			break;
 80011e0:	e025      	b.n	800122e <main+0xca>
	  		case 2:
	  			if(check_server_connection()==0)
 80011e2:	f7ff fca7 	bl	8000b34 <check_server_connection>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <main+0x8e>
	  			{
	  				s1=3;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=1;
	  			}
	  			break;
 80011f0:	e01d      	b.n	800122e <main+0xca>
	  				s1=1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
	  			break;
 80011f6:	e01a      	b.n	800122e <main+0xca>
	  		  case 3:
	  			if(send_mesg_to_server("latitude:1727.401123 N, longitude:7822.510254 E,time:12:48:30,date:06012024",strlen("latitude:1727.401123 N, longitude:7822.510254 E,time:12:48:30,date:06012024"))==0)
 80011f8:	214b      	movs	r1, #75	; 0x4b
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <main+0xcc>)
 80011fc:	f7ff ff06 	bl	800100c <send_mesg_to_server>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <main+0xae>
	  			{
	  				printf("mesg send\n");
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <main+0xd0>)
 8001208:	f003 fea2 	bl	8004f50 <puts>
	  				s1=3;
 800120c:	2303      	movs	r3, #3
 800120e:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=2;
	  			}
	  			break;
 8001210:	e00d      	b.n	800122e <main+0xca>
	  				s1=2;
 8001212:	2302      	movs	r3, #2
 8001214:	60fb      	str	r3, [r7, #12]
	  			break;
 8001216:	e00a      	b.n	800122e <main+0xca>
	  		  case 4:
	  			if(gsm_disconnect_to_server()==0)
 8001218:	f7ff fcd8 	bl	8000bcc <gsm_disconnect_to_server>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <main+0xc4>
	  			{
	  				s1=0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 8001226:	e001      	b.n	800122c <main+0xc8>
	  				s1=0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
	  			break;
 800122c:	bf00      	nop
	  		  switch(s1)
 800122e:	e7b0      	b.n	8001192 <main+0x2e>
 8001230:	08006634 	.word	0x08006634
 8001234:	08006680 	.word	0x08006680

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b096      	sub	sp, #88	; 0x58
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2244      	movs	r2, #68	; 0x44
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fdf4 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800125a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800125e:	f001 f84d 	bl	80022fc <HAL_PWREx_ControlVoltageScaling>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001268:	f000 f958 	bl	800151c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001274:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001276:	2310      	movs	r3, #16
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127e:	2302      	movs	r3, #2
 8001280:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001286:	230a      	movs	r3, #10
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800128a:	2307      	movs	r3, #7
 800128c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f884 	bl	80023a8 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012a6:	f000 f939 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ae:	2303      	movs	r3, #3
 80012b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2104      	movs	r1, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fc4c 	bl	8002b60 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ce:	f000 f925 	bl	800151c <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3758      	adds	r7, #88	; 0x58
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_UART4_Init+0x58>)
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <MX_UART4_Init+0x5c>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_UART4_Init+0x58>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_UART4_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_UART4_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_UART4_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_UART4_Init+0x58>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_UART4_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_UART4_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_UART4_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_UART4_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_UART4_Init+0x58>)
 8001320:	f002 fafe 	bl	8003920 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800132a:	f000 f8f7 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000158 	.word	0x20000158
 8001338:	40004c00 	.word	0x40004c00

0800133c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_UART5_Init+0x58>)
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <MX_UART5_Init+0x5c>)
 8001344:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_UART5_Init+0x58>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_UART5_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_UART5_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_UART5_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_UART5_Init+0x58>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_UART5_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_UART5_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_UART5_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_UART5_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_UART5_Init+0x58>)
 8001380:	f002 face 	bl	8003920 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 f8c7 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200001dc 	.word	0x200001dc
 8001398:	40005000 	.word	0x40005000

0800139c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <MX_USART1_UART_Init+0x5c>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART1_UART_Init+0x58>)
 80013e0:	f002 fa9e 	bl	8003920 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 f897 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000260 	.word	0x20000260
 80013f8:	40013800 	.word	0x40013800

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <MX_USART2_UART_Init+0x5c>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001440:	f002 fa6e 	bl	8003920 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800144a:	f000 f867 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002e4 	.word	0x200002e4
 8001458:	40004400 	.word	0x40004400

0800145c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <MX_USART3_UART_Init+0x5c>)
 8001464:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_USART3_UART_Init+0x58>)
 80014a0:	f002 fa3e 	bl	8003920 <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 f837 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000368 	.word	0x20000368
 80014b8:	40004800 	.word	0x40004800

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <MX_GPIO_Init+0x5c>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_GPIO_Init+0x5c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x44>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x44>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0b4      	sub	sp, #208	; 0xd0
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800158c:	2288      	movs	r2, #136	; 0x88
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fc4f 	bl	8004e34 <memset>
  if(huart->Instance==UART4)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4aa4      	ldr	r2, [pc, #656]	; (800182c <HAL_UART_MspInit+0x2bc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d144      	bne.n	800162a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015a0:	2308      	movs	r3, #8
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 fcfb 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015b8:	f7ff ffb0 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015bc:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	4a9b      	ldr	r2, [pc, #620]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80015c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015c6:	6593      	str	r3, [r2, #88]	; 0x58
 80015c8:	4b99      	ldr	r3, [pc, #612]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b96      	ldr	r3, [pc, #600]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d8:	4a95      	ldr	r2, [pc, #596]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e0:	4b93      	ldr	r3, [pc, #588]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001604:	2308      	movs	r3, #8
 8001606:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f000 fcba 	bl	8001f8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2034      	movs	r0, #52	; 0x34
 800161e:	f000 fc00 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001622:	2034      	movs	r0, #52	; 0x34
 8001624:	f000 fc19 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001628:	e156      	b.n	80018d8 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==UART5)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a81      	ldr	r2, [pc, #516]	; (8001834 <HAL_UART_MspInit+0x2c4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d165      	bne.n	8001700 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001634:	2310      	movs	r3, #16
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001638:	2300      	movs	r3, #0
 800163a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fcb1 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800164c:	f7ff ff66 	bl	800151c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001650:	4b77      	ldr	r3, [pc, #476]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	4a76      	ldr	r2, [pc, #472]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800165a:	6593      	str	r3, [r2, #88]	; 0x58
 800165c:	4b74      	ldr	r3, [pc, #464]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001668:	4b71      	ldr	r3, [pc, #452]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a70      	ldr	r2, [pc, #448]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b6e      	ldr	r3, [pc, #440]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a6a      	ldr	r2, [pc, #424]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	623b      	str	r3, [r7, #32]
 8001696:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016b2:	2308      	movs	r3, #8
 80016b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016bc:	4619      	mov	r1, r3
 80016be:	485e      	ldr	r0, [pc, #376]	; (8001838 <HAL_UART_MspInit+0x2c8>)
 80016c0:	f000 fc64 	bl	8001f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016dc:	2308      	movs	r3, #8
 80016de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016e6:	4619      	mov	r1, r3
 80016e8:	4854      	ldr	r0, [pc, #336]	; (800183c <HAL_UART_MspInit+0x2cc>)
 80016ea:	f000 fc4f 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2035      	movs	r0, #53	; 0x35
 80016f4:	f000 fb95 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016f8:	2035      	movs	r0, #53	; 0x35
 80016fa:	f000 fbae 	bl	8001e5a <HAL_NVIC_EnableIRQ>
}
 80016fe:	e0eb      	b.n	80018d8 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <HAL_UART_MspInit+0x2d0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d145      	bne.n	8001796 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800170a:	2301      	movs	r3, #1
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800170e:	2300      	movs	r3, #0
 8001710:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001712:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fc46 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8001722:	f7ff fefb 	bl	800151c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	4a41      	ldr	r2, [pc, #260]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6613      	str	r3, [r2, #96]	; 0x60
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001756:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800175a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001770:	2307      	movs	r3, #7
 8001772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fc04 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	2025      	movs	r0, #37	; 0x25
 800178a:	f000 fb4a 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800178e:	2025      	movs	r0, #37	; 0x25
 8001790:	f000 fb63 	bl	8001e5a <HAL_NVIC_EnableIRQ>
}
 8001794:	e0a0      	b.n	80018d8 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_UART_MspInit+0x2d4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d153      	bne.n	8001848 <HAL_UART_MspInit+0x2d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fbfb 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0x24c>
      Error_Handler();
 80017b8:	f7ff feb0 	bl	800151c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6593      	str	r3, [r2, #88]	; 0x58
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_UART_MspInit+0x2c0>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ec:	230c      	movs	r3, #12
 80017ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001804:	2307      	movs	r3, #7
 8001806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f000 fbba 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2026      	movs	r0, #38	; 0x26
 800181e:	f000 fb00 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001822:	2026      	movs	r0, #38	; 0x26
 8001824:	f000 fb19 	bl	8001e5a <HAL_NVIC_EnableIRQ>
}
 8001828:	e056      	b.n	80018d8 <HAL_UART_MspInit+0x368>
 800182a:	bf00      	nop
 800182c:	40004c00 	.word	0x40004c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40005000 	.word	0x40005000
 8001838:	48000800 	.word	0x48000800
 800183c:	48000c00 	.word	0x48000c00
 8001840:	40013800 	.word	0x40013800
 8001844:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_UART_MspInit+0x370>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d142      	bne.n	80018d8 <HAL_UART_MspInit+0x368>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001852:	2304      	movs	r3, #4
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001856:	2300      	movs	r3, #0
 8001858:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fba2 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 800186a:	f7ff fe57 	bl	800151c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_UART_MspInit+0x374>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_UART_MspInit+0x374>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_UART_MspInit+0x374>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_UART_MspInit+0x374>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <HAL_UART_MspInit+0x374>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_UART_MspInit+0x374>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800189e:	2330      	movs	r3, #48	; 0x30
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b6:	2307      	movs	r3, #7
 80018b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018c0:	4619      	mov	r1, r3
 80018c2:	4809      	ldr	r0, [pc, #36]	; (80018e8 <HAL_UART_MspInit+0x378>)
 80018c4:	f000 fb62 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2027      	movs	r0, #39	; 0x27
 80018ce:	f000 faa8 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018d2:	2027      	movs	r0, #39	; 0x27
 80018d4:	f000 fac1 	bl	8001e5a <HAL_NVIC_EnableIRQ>
}
 80018d8:	bf00      	nop
 80018da:	37d0      	adds	r7, #208	; 0xd0
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004800 	.word	0x40004800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f954 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <USART1_IRQHandler+0x10>)
 8001946:	f002 f979 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000260 	.word	0x20000260

08001954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <USART2_IRQHandler+0x10>)
 800195a:	f002 f96f 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200002e4 	.word	0x200002e4

08001968 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <USART3_IRQHandler+0x10>)
 800196e:	f002 f965 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000368 	.word	0x20000368

0800197c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <UART4_IRQHandler+0x10>)
 8001982:	f002 f95b 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000158 	.word	0x20000158

08001990 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <UART5_IRQHandler+0x10>)
 8001996:	f002 f951 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001dc 	.word	0x200001dc

080019a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00a      	b.n	80019cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b6:	f3af 8000 	nop.w
 80019ba:	4601      	mov	r1, r0
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf0      	blt.n	80019b6 <_read+0x12>
  }

  return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_close>:
  }
  return len;
}

int _close(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a06:	605a      	str	r2, [r3, #4]
  return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_isatty>:

int _isatty(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f003 f9b2 	bl	8004de0 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20018000 	.word	0x20018000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	200003ec 	.word	0x200003ec
 8001ab0:	20000408 	.word	0x20000408

08001ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001adc:	f7ff ffea 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	; (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	; (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b06:	f003 f971 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7ff fb2b 	bl	8001164 <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b1c:	0800677c 	.word	0x0800677c
  ldr r2, =_sbss
 8001b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b24:	20000404 	.word	0x20000404

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_Init+0x3c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_Init+0x3c>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f000 f962 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 f80f 	bl	8001b6c <HAL_InitTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	e001      	b.n	8001b5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b5a:	f7ff fce5 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_InitTick+0x6c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_InitTick+0x70>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_InitTick+0x6c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f96d 	bl	8001e76 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d809      	bhi.n	8001bbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f937 	bl	8001e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_InitTick+0x74>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e007      	b.n	8001bcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e004      	b.n	8001bcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e001      	b.n	8001bcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	200003f0 	.word	0x200003f0

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200003f0 	.word	0x200003f0

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <__NVIC_SetPriorityGrouping>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff29 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff3e 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff8e 	bl	8001d60 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5d 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff31 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffa2 	bl	8001dc8 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d008      	beq.n	8001eb8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e022      	b.n	8001efe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 020e 	bic.w	r2, r2, #14
 8001ec6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f003 021c 	and.w	r2, r3, #28
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d005      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e029      	b.n	8001f82 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020e 	bic.w	r2, r2, #14
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 021c 	and.w	r2, r3, #28
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
    }
  }
  return status;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9a:	e17f      	b.n	800229c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8171 	beq.w	8002296 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d005      	beq.n	8001fcc <HAL_GPIO_Init+0x40>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d118      	bne.n	800206c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002040:	2201      	movs	r2, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f003 0201 	and.w	r2, r3, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d017      	beq.n	80020a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	6939      	ldr	r1, [r7, #16]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80ac 	beq.w	8002296 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_GPIO_Init+0x330>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	4a5e      	ldr	r2, [pc, #376]	; (80022bc <HAL_GPIO_Init+0x330>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6613      	str	r3, [r2, #96]	; 0x60
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_GPIO_Init+0x330>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002156:	4a5a      	ldr	r2, [pc, #360]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x242>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_GPIO_Init+0x338>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x23e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4e      	ldr	r2, [pc, #312]	; (80022c8 <HAL_GPIO_Init+0x33c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x23a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_GPIO_Init+0x340>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x236>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <HAL_GPIO_Init+0x344>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x232>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <HAL_GPIO_Init+0x348>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4a      	ldr	r2, [pc, #296]	; (80022d8 <HAL_GPIO_Init+0x34c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x22a>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00c      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00a      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021ba:	2305      	movs	r3, #5
 80021bc:	e008      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021be:	2304      	movs	r3, #4
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e004      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x244>
 80021ce:	2300      	movs	r3, #0
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	f002 0203 	and.w	r2, r2, #3
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	4093      	lsls	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e0:	4937      	ldr	r1, [pc, #220]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_GPIO_Init+0x350>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002212:	4a32      	ldr	r2, [pc, #200]	; (80022dc <HAL_GPIO_Init+0x350>)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002218:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_GPIO_Init+0x350>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <HAL_GPIO_Init+0x350>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_GPIO_Init+0x350>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_GPIO_Init+0x350>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_GPIO_Init+0x350>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_GPIO_Init+0x350>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f47f ae78 	bne.w	8001f9c <HAL_GPIO_Init+0x10>
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010000 	.word	0x40010000
 80022c4:	48000400 	.word	0x48000400
 80022c8:	48000800 	.word	0x48000800
 80022cc:	48000c00 	.word	0x48000c00
 80022d0:	48001000 	.word	0x48001000
 80022d4:	48001400 	.word	0x48001400
 80022d8:	48001800 	.word	0x48001800
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000

080022fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230a:	d130      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002318:	d038      	beq.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2232      	movs	r2, #50	; 0x32
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	3301      	adds	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002340:	e002      	b.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3b01      	subs	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002354:	d102      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f2      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d110      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e00f      	b.n	800238e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d007      	beq.n	800238c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000
 80023a0:	20000000 	.word	0x20000000
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3ca      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b97      	ldr	r3, [pc, #604]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80e4 	beq.w	80025a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4a>
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	f040 808b 	bne.w	8002500 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	f040 8087 	bne.w	8002500 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e3a2      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_RCC_OscConfig+0x7c>
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002422:	e005      	b.n	8002430 <HAL_RCC_OscConfig+0x88>
 8002424:	4b7c      	ldr	r3, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002430:	4293      	cmp	r3, r2
 8002432:	d223      	bcs.n	800247c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fd55 	bl	8002ee8 <RCC_SetFlashLatencyFromMSIRange>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e383      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002448:	4b73      	ldr	r3, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a72      	ldr	r2, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b70      	ldr	r3, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	496d      	ldr	r1, [pc, #436]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002466:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	4968      	ldr	r1, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	e025      	b.n	80024c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247c:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4960      	ldr	r1, [pc, #384]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	495b      	ldr	r1, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd15 	bl	8002ee8 <RCC_SetFlashLatencyFromMSIRange>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e343      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c8:	f000 fc4a 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4950      	ldr	r1, [pc, #320]	; (800261c <HAL_RCC_OscConfig+0x274>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	4a4e      	ldr	r2, [pc, #312]	; (8002620 <HAL_RCC_OscConfig+0x278>)
 80024e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e8:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fb3d 	bl	8001b6c <HAL_InitTick>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d052      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	e327      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d032      	beq.n	800256e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a42      	ldr	r2, [pc, #264]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002514:	f7ff fb7a 	bl	8001c0c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800251c:	f7ff fb76 	bl	8001c0c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e310      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a36      	ldr	r2, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4931      	ldr	r1, [pc, #196]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	492c      	ldr	r1, [pc, #176]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	e01a      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800257a:	f7ff fb47 	bl	8001c0c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002582:	f7ff fb43 	bl	8001c0c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e2dd      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x1da>
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d074      	beq.n	800269a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x21a>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d10e      	bne.n	80025da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d064      	beq.n	8002698 <HAL_RCC_OscConfig+0x2f0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d160      	bne.n	8002698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e2ba      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x24a>
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e026      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fa:	d115      	bne.n	8002628 <HAL_RCC_OscConfig+0x280>
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a02      	ldr	r2, [pc, #8]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	0800668c 	.word	0x0800668c
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004
 8002628:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a9f      	ldr	r2, [pc, #636]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b9d      	ldr	r3, [pc, #628]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a9c      	ldr	r2, [pc, #624]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff fae0 	bl	8001c0c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fadc 	bl	8001c0c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e276      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	4b92      	ldr	r3, [pc, #584]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x2a8>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff facc 	bl	8001c0c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fac8 	bl	8001c0c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e262      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x2d0>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d060      	beq.n	8002768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x310>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d119      	bne.n	80026e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d116      	bne.n	80026e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b8:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x328>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e23f      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	4973      	ldr	r1, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	e040      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d023      	beq.n	8002736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6e      	ldr	r2, [pc, #440]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff fa87 	bl	8001c0c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff fa83 	bl	8001c0c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e21d      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b62      	ldr	r3, [pc, #392]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	495f      	ldr	r1, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
 8002734:	e018      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5c      	ldr	r2, [pc, #368]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800273c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff fa63 	bl	8001c0c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff fa5f 	bl	8001c0c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1f9      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03c      	beq.n	80027ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277c:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002782:	4a4a      	ldr	r2, [pc, #296]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff fa3e 	bl	8001c0c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002794:	f7ff fa3a 	bl	8001c0c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1d4      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ef      	beq.n	8002794 <HAL_RCC_OscConfig+0x3ec>
 80027b4:	e01b      	b.n	80027ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027bc:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa21 	bl	8001c0c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ce:	f7ff fa1d 	bl	8001c0c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1b7      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80027e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80a6 	beq.w	8002948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	; 0x58
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7ff f9e4 	bl	8001c0c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7ff f9e0 	bl	8001c0c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e17a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x508>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x4d8>
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287e:	e029      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d115      	bne.n	80028b4 <HAL_RCC_OscConfig+0x50c>
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_RCC_OscConfig+0x504>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
 80028b4:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a9b      	ldr	r2, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c4:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	4a97      	ldr	r2, [pc, #604]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7ff f996 	bl	8001c0c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7ff f992 	bl	8001c0c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e12a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ed      	beq.n	80028e4 <HAL_RCC_OscConfig+0x53c>
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7ff f97f 	bl	8001c0c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff f97b 	bl	8001c0c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e113      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002928:	4b7f      	ldr	r3, [pc, #508]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ed      	bne.n	8002912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	4a79      	ldr	r2, [pc, #484]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002946:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80fe 	beq.w	8002b4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	2b02      	cmp	r3, #2
 8002958:	f040 80d0 	bne.w	8002afc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295c:	4b72      	ldr	r3, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	429a      	cmp	r2, r3
 800296e:	d130      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	3b01      	subs	r3, #1
 800297c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d127      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d11f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800299c:	2a07      	cmp	r2, #7
 800299e:	bf14      	ite	ne
 80029a0:	2201      	movne	r2, #1
 80029a2:	2200      	moveq	r2, #0
 80029a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d113      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d06e      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d069      	beq.n	8002aac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0ad      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 80029fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a00:	f7ff f904 	bl	8001c0c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7ff f900 	bl	8001c0c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e09a      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a26:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_RCC_OscConfig+0x784>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a40:	0212      	lsls	r2, r2, #8
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a48:	0852      	lsrs	r2, r2, #1
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	0552      	lsls	r2, r2, #21
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a54:	0852      	lsrs	r2, r2, #1
 8002a56:	3a01      	subs	r2, #1
 8002a58:	0652      	lsls	r2, r2, #25
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a60:	0912      	lsrs	r2, r2, #4
 8002a62:	0452      	lsls	r2, r2, #17
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4930      	ldr	r1, [pc, #192]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a84:	f7ff f8c2 	bl	8001c0c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7ff f8be 	bl	8001c0c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e058      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aaa:	e050      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e04f      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d148      	bne.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ad4:	f7ff f89a 	bl	8001c0c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7ff f896 	bl	8001c0c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e030      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x734>
 8002afa:	e028      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d023      	beq.n	8002b4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_RCC_OscConfig+0x780>)
 8002b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7ff f87d 	bl	8001c0c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	e00c      	b.n	8002b30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7ff f879 	bl	8001c0c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d905      	bls.n	8002b30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ec      	bne.n	8002b16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	4905      	ldr	r1, [pc, #20]	; (8002b58 <HAL_RCC_OscConfig+0x7b0>)
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_RCC_OscConfig+0x7b4>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60cb      	str	r3, [r1, #12]
 8002b48:	e001      	b.n	8002b4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	feeefffc 	.word	0xfeeefffc

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0e7      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4970      	ldr	r1, [pc, #448]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b6e      	ldr	r3, [pc, #440]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cf      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4960      	ldr	r1, [pc, #384]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04c      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d121      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0a6      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfe:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09a      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c16:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e08e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e086      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4943      	ldr	r1, [pc, #268]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe ffe0 	bl	8001c0c <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe ffdc 	bl	8001c0c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e06e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	492b      	ldr	r1, [pc, #172]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d210      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 0207 	bic.w	r2, r3, #7
 8002cbc:	4923      	ldr	r1, [pc, #140]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e036      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4918      	ldr	r1, [pc, #96]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4910      	ldr	r1, [pc, #64]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d14:	f000 f824 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	490b      	ldr	r1, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1f4>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1fc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe ff17 	bl	8001b6c <HAL_InitTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	0800668c 	.word	0x0800668c
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x34>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d11e      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e004      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d134      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d003      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0xac>
 8002e04:	e005      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e08:	617b      	str	r3, [r7, #20]
      break;
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e0e:	617b      	str	r3, [r7, #20]
      break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	617b      	str	r3, [r7, #20]
      break;
 8002e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	3301      	adds	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0e5b      	lsrs	r3, r3, #25
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	080066a4 	.word	0x080066a4
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	0800669c 	.word	0x0800669c

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec0:	f7ff ffda 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0adb      	lsrs	r3, r3, #11
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4904      	ldr	r1, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800669c 	.word	0x0800669c

08002ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f00:	f7ff f9ee 	bl	80022e0 <HAL_PWREx_GetVoltageRange>
 8002f04:	6178      	str	r0, [r7, #20]
 8002f06:	e014      	b.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6593      	str	r3, [r2, #88]	; 0x58
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff f9de 	bl	80022e0 <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f38:	d10b      	bne.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d919      	bls.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2ba0      	cmp	r3, #160	; 0xa0
 8002f44:	d902      	bls.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f46:	2302      	movs	r3, #2
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e013      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e010      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d902      	bls.n	8002f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f58:	2303      	movs	r3, #3
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	e00a      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d102      	bne.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f64:	2302      	movs	r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e004      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b70      	cmp	r3, #112	; 0x70
 8002f6e:	d101      	bne.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f70:	2301      	movs	r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 0207 	bic.w	r2, r3, #7
 8002f7c:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d041      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fcc:	d02a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fd2:	d824      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fd8:	d008      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fde:	d81e      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe8:	d010      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fea:	e018      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fec:	4b86      	ldr	r3, [pc, #536]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a85      	ldr	r2, [pc, #532]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff8:	e015      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fabb 	bl	800357c <RCCEx_PLLSAI1_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300a:	e00c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3320      	adds	r3, #32
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fba6 	bl	8003764 <RCCEx_PLLSAI2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800301c:	e003      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	74fb      	strb	r3, [r7, #19]
      break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800302c:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303a:	4973      	ldr	r1, [pc, #460]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d041      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800305c:	d02a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800305e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003062:	d824      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003068:	d008      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800306a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800306e:	d81e      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003078:	d010      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800307a:	e018      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800307c:	4b62      	ldr	r3, [pc, #392]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a61      	ldr	r2, [pc, #388]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003088:	e015      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa73 	bl	800357c <RCCEx_PLLSAI1_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800309a:	e00c      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3320      	adds	r3, #32
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fb5e 	bl	8003764 <RCCEx_PLLSAI2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ac:	e003      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	74fb      	strb	r3, [r7, #19]
      break;
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030bc:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ca:	494f      	ldr	r1, [pc, #316]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030d2:	e001      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a0 	beq.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4a40      	ldr	r2, [pc, #256]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	; 0x58
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003118:	2301      	movs	r3, #1
 800311a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3a      	ldr	r2, [pc, #232]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003128:	f7fe fd70 	bl	8001c0c <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800312e:	e009      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fe fd6c 	bl	8001c0c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	74fb      	strb	r3, [r7, #19]
        break;
 8003142:	e005      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d15c      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01f      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	d019      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fe fd2b 	bl	8001c0c <HAL_GetTick>
 80031b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b8:	e00b      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe fd27 	bl	8001c0c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	74fb      	strb	r3, [r7, #19]
            break;
 80031d0:	e006      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ec      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f6:	4904      	ldr	r1, [pc, #16]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031fe:	e009      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003214:	7c7b      	ldrb	r3, [r7, #17]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b9e      	ldr	r3, [pc, #632]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a9d      	ldr	r2, [pc, #628]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003232:	4b98      	ldr	r3, [pc, #608]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f023 0203 	bic.w	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	4994      	ldr	r1, [pc, #592]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003254:	4b8f      	ldr	r3, [pc, #572]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f023 020c 	bic.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	498c      	ldr	r1, [pc, #560]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003276:	4b87      	ldr	r3, [pc, #540]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	4983      	ldr	r1, [pc, #524]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003298:	4b7e      	ldr	r3, [pc, #504]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	497b      	ldr	r1, [pc, #492]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ba:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	4972      	ldr	r1, [pc, #456]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032dc:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	496a      	ldr	r1, [pc, #424]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	4961      	ldr	r1, [pc, #388]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003320:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	4959      	ldr	r1, [pc, #356]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003350:	4950      	ldr	r1, [pc, #320]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	4948      	ldr	r1, [pc, #288]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003386:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	493f      	ldr	r1, [pc, #252]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d028      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a8:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b6:	4937      	ldr	r1, [pc, #220]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c6:	d106      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a31      	ldr	r2, [pc, #196]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
 80033d4:	e011      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033de:	d10c      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f8c8 	bl	800357c <RCCEx_PLLSAI1_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d028      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003406:	4b23      	ldr	r3, [pc, #140]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	491f      	ldr	r1, [pc, #124]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003424:	d106      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003430:	60d3      	str	r3, [r2, #12]
 8003432:	e011      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800343c:	d10c      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f899 	bl	800357c <RCCEx_PLLSAI1_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02b      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a02      	ldr	r2, [pc, #8]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348e:	60d3      	str	r3, [r2, #12]
 8003490:	e014      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f867 	bl	800357c <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02f      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d6:	4928      	ldr	r1, [pc, #160]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e6:	d10d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f844 	bl	800357c <RCCEx_PLLSAI1_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d014      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	74bb      	strb	r3, [r7, #18]
 8003502:	e011      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3320      	adds	r3, #32
 8003512:	2102      	movs	r1, #2
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f925 	bl	8003764 <RCCEx_PLLSAI2_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003534:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003542:	490d      	ldr	r1, [pc, #52]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003566:	4904      	ldr	r1, [pc, #16]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800356e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000

0800357c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800358a:	4b75      	ldr	r3, [pc, #468]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003596:	4b72      	ldr	r3, [pc, #456]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0203 	and.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d10d      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
       ||
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035ae:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
       ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d047      	beq.n	8003652 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e044      	b.n	8003652 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d018      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0x86>
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d825      	bhi.n	8003620 <RCCEx_PLLSAI1_Config+0xa4>
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d002      	beq.n	80035de <RCCEx_PLLSAI1_Config+0x62>
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d009      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x74>
 80035dc:	e020      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035de:	4b60      	ldr	r3, [pc, #384]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11d      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ee:	e01a      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035f0:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d116      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e013      	b.n	800362a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003602:	4b57      	ldr	r3, [pc, #348]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800360e:	4b54      	ldr	r3, [pc, #336]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800361e:	e006      	b.n	800362e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e004      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800362e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003636:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	430b      	orrs	r3, r1
 800364c:	4944      	ldr	r1, [pc, #272]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d17d      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003658:	4b41      	ldr	r3, [pc, #260]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a40      	ldr	r2, [pc, #256]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fe fad2 	bl	8001c0c <HAL_GetTick>
 8003668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800366a:	e009      	b.n	8003680 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800366c:	f7fe face 	bl	8001c0c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d902      	bls.n	8003680 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	73fb      	strb	r3, [r7, #15]
        break;
 800367e:	e005      	b.n	800368c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003680:	4b37      	ldr	r3, [pc, #220]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ef      	bne.n	800366c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d160      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d111      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6892      	ldr	r2, [r2, #8]
 80036a8:	0211      	lsls	r1, r2, #8
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68d2      	ldr	r2, [r2, #12]
 80036ae:	0912      	lsrs	r2, r2, #4
 80036b0:	0452      	lsls	r2, r2, #17
 80036b2:	430a      	orrs	r2, r1
 80036b4:	492a      	ldr	r1, [pc, #168]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	610b      	str	r3, [r1, #16]
 80036ba:	e027      	b.n	800370c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d112      	bne.n	80036e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c2:	4b27      	ldr	r3, [pc, #156]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	0211      	lsls	r1, r2, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6912      	ldr	r2, [r2, #16]
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0552      	lsls	r2, r2, #21
 80036de:	430a      	orrs	r2, r1
 80036e0:	491f      	ldr	r1, [pc, #124]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
 80036e6:	e011      	b.n	800370c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	0211      	lsls	r1, r2, #8
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6952      	ldr	r2, [r2, #20]
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	430a      	orrs	r2, r1
 8003706:	4916      	ldr	r1, [pc, #88]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003716:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fe fa78 	bl	8001c0c <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003720:	f7fe fa74 	bl	8001c0c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
          break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	4904      	ldr	r1, [pc, #16]	; (8003760 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000

08003764 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0203 	and.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d10d      	bne.n	80037aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
       ||
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003796:	4b61      	ldr	r3, [pc, #388]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
       ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d047      	beq.n	800383a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	e044      	b.n	800383a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d018      	beq.n	80037ea <RCCEx_PLLSAI2_Config+0x86>
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d825      	bhi.n	8003808 <RCCEx_PLLSAI2_Config+0xa4>
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d002      	beq.n	80037c6 <RCCEx_PLLSAI2_Config+0x62>
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d009      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0x74>
 80037c4:	e020      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037c6:	4b55      	ldr	r3, [pc, #340]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11d      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d6:	e01a      	b.n	800380e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d8:	4b50      	ldr	r3, [pc, #320]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e8:	e013      	b.n	8003812 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ea:	4b4c      	ldr	r3, [pc, #304]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037f6:	4b49      	ldr	r3, [pc, #292]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003806:	e006      	b.n	8003816 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      break;
 800380c:	e004      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003816:	bf00      	nop
    }

    if(status == HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6819      	ldr	r1, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	430b      	orrs	r3, r1
 8003834:	4939      	ldr	r1, [pc, #228]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d167      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a35      	ldr	r2, [pc, #212]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fe f9de 	bl	8001c0c <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003854:	f7fe f9da 	bl	8001c0c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
        break;
 8003866:	e005      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ef      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d14a      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003880:	4b26      	ldr	r3, [pc, #152]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6892      	ldr	r2, [r2, #8]
 8003890:	0211      	lsls	r1, r2, #8
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68d2      	ldr	r2, [r2, #12]
 8003896:	0912      	lsrs	r2, r2, #4
 8003898:	0452      	lsls	r2, r2, #17
 800389a:	430a      	orrs	r2, r1
 800389c:	491f      	ldr	r1, [pc, #124]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	614b      	str	r3, [r1, #20]
 80038a2:	e011      	b.n	80038c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6892      	ldr	r2, [r2, #8]
 80038b4:	0211      	lsls	r1, r2, #8
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6912      	ldr	r2, [r2, #16]
 80038ba:	0852      	lsrs	r2, r2, #1
 80038bc:	3a01      	subs	r2, #1
 80038be:	0652      	lsls	r2, r2, #25
 80038c0:	430a      	orrs	r2, r1
 80038c2:	4916      	ldr	r1, [pc, #88]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a13      	ldr	r2, [pc, #76]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe f99a 	bl	8001c0c <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038da:	e009      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038dc:	f7fe f996 	bl	8001c0c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d902      	bls.n	80038f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	73fb      	strb	r3, [r7, #15]
          break;
 80038ee:	e005      	b.n	80038fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ef      	beq.n	80038dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4904      	ldr	r1, [pc, #16]	; (800391c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e040      	b.n	80039b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fe14 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fc6e 	bl	8004240 <UART_SetConfig>
 8003964:	4603      	mov	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e022      	b.n	80039b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 ff1a 	bl	80047b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 ffa1 	bl	80048f4 <UART_CheckIdleState>
 80039b2:	4603      	mov	r3, r0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	f040 80bf 	bne.w	8003b54 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_UART_Receive+0x26>
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0b7      	b.n	8003b56 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Receive+0x38>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0b0      	b.n	8003b56 <HAL_UART_Receive+0x19a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2222      	movs	r2, #34	; 0x22
 8003a08:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a10:	f7fe f8fc 	bl	8001c0c <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d10e      	bne.n	8003a4e <HAL_UART_Receive+0x92>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_UART_Receive+0x88>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a42:	e02d      	b.n	8003aa0 <HAL_UART_Receive+0xe4>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a4c:	e028      	b.n	8003aa0 <HAL_UART_Receive+0xe4>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_UART_Receive+0xb6>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_UART_Receive+0xac>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a66:	e01b      	b.n	8003aa0 <HAL_UART_Receive+0xe4>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	227f      	movs	r2, #127	; 0x7f
 8003a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a70:	e016      	b.n	8003aa0 <HAL_UART_Receive+0xe4>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7a:	d10d      	bne.n	8003a98 <HAL_UART_Receive+0xdc>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_UART_Receive+0xd2>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	227f      	movs	r2, #127	; 0x7f
 8003a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a8c:	e008      	b.n	8003aa0 <HAL_UART_Receive+0xe4>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	223f      	movs	r2, #63	; 0x3f
 8003a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a96:	e003      	b.n	8003aa0 <HAL_UART_Receive+0xe4>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aa6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Receive+0x108>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ad4:	e033      	b.n	8003b3e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2120      	movs	r1, #32
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 ff50 	bl	8004986 <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e032      	b.n	8003b56 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	8a7b      	ldrh	r3, [r7, #18]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e00d      	b.n	8003b2c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8a7b      	ldrh	r3, [r7, #18]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1c5      	bne.n	8003ad6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b08b      	sub	sp, #44	; 0x2c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d156      	bne.n	8003c24 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_UART_Transmit_IT+0x22>
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e04f      	b.n	8003c26 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Transmit_IT+0x34>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e048      	b.n	8003c26 <HAL_UART_Transmit_IT+0xc6>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2221      	movs	r2, #33	; 0x21
 8003bc4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d107      	bne.n	8003be0 <HAL_UART_Transmit_IT+0x80>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_UART_Transmit_IT+0xd4>)
 8003bdc:	669a      	str	r2, [r3, #104]	; 0x68
 8003bde:	e002      	b.n	8003be6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HAL_UART_Transmit_IT+0xd8>)
 8003be4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	372c      	adds	r7, #44	; 0x2c
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	08004cb9 	.word	0x08004cb9
 8003c38:	08004c01 	.word	0x08004c01

08003c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b0ba      	sub	sp, #232	; 0xe8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d115      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00f      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 82a6 	beq.w	80041e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
      }
      return;
 8003ca2:	e2a0      	b.n	80041e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8117 	beq.w	8003edc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cbe:	4b85      	ldr	r3, [pc, #532]	; (8003ed4 <HAL_UART_IRQHandler+0x298>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 810a 	beq.w	8003edc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d011      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xbc>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d011      	beq.n	8003d28 <HAL_UART_IRQHandler+0xec>
 8003d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2202      	movs	r2, #2
 8003d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d011      	beq.n	8003d58 <HAL_UART_IRQHandler+0x11c>
 8003d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2204      	movs	r2, #4
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	f043 0202 	orr.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8a:	f043 0208 	orr.w	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x18a>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 820c 	beq.w	80041ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d005      	beq.n	8003e1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04f      	beq.n	8003ebe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fe75 	bl	8004b0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d141      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1d9      	bne.n	8003e32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <HAL_UART_IRQHandler+0x29c>)
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe f839 	bl	8001f0a <HAL_DMA_Abort_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d017      	beq.n	8003ece <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e00f      	b.n	8003ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9b0 	bl	8004214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00b      	b.n	8003ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9ac 	bl	8004214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e007      	b.n	8003ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9a8 	bl	8004214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003ecc:	e18d      	b.n	80041ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	bf00      	nop
    return;
 8003ed0:	e18b      	b.n	80041ea <HAL_UART_IRQHandler+0x5ae>
 8003ed2:	bf00      	nop
 8003ed4:	04000120 	.word	0x04000120
 8003ed8:	08004bd5 	.word	0x08004bd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 8146 	bne.w	8004172 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 813f 	beq.w	8004172 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8138 	beq.w	8004172 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	f040 80b4 	bne.w	8004082 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 815f 	beq.w	80041ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f080 8157 	bcs.w	80041ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8085 	bne.w	8004066 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1da      	bne.n	8003f5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e1      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004006:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004008:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800400c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004048:	65bb      	str	r3, [r7, #88]	; 0x58
 800404a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800404e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e4      	bne.n	8004026 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd ff14 	bl	8001e8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004072:	b29b      	uxth	r3, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8d4 	bl	8004228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004080:	e0b5      	b.n	80041ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408e:	b29b      	uxth	r3, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a7 	beq.w	80041f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80040a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80a2 	beq.w	80041f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
 80040d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e4      	bne.n	80040ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	623b      	str	r3, [r7, #32]
   return(result);
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004108:	633a      	str	r2, [r7, #48]	; 0x30
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800410e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e3      	bne.n	80040e4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60fb      	str	r3, [r7, #12]
   return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	617b      	str	r3, [r7, #20]
   return(result);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e4      	bne.n	800412e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f85c 	bl	8004228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004170:	e03f      	b.n	80041f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <HAL_UART_IRQHandler+0x560>
 800417e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004192:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fe19 	bl	8004dcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800419a:	e02d      	b.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00e      	beq.n	80041c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01c      	beq.n	80041f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
    }
    return;
 80041c4:	e017      	b.n	80041f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d012      	beq.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fdca 	bl	8004d78 <UART_EndTransmit_IT>
    return;
 80041e4:	e008      	b.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041e6:	bf00      	nop
 80041e8:	e006      	b.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80041ea:	bf00      	nop
 80041ec:	e004      	b.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041ee:	bf00      	nop
 80041f0:	e002      	b.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80041f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80041f8:	37e8      	adds	r7, #232	; 0xe8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop

08004200 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b08a      	sub	sp, #40	; 0x28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	431a      	orrs	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	4313      	orrs	r3, r2
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4ba4      	ldr	r3, [pc, #656]	; (8004500 <UART_SetConfig+0x2c0>)
 8004270:	4013      	ands	r3, r2
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004278:	430b      	orrs	r3, r1
 800427a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a99      	ldr	r2, [pc, #612]	; (8004504 <UART_SetConfig+0x2c4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	4313      	orrs	r3, r2
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a90      	ldr	r2, [pc, #576]	; (8004508 <UART_SetConfig+0x2c8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d126      	bne.n	8004318 <UART_SetConfig+0xd8>
 80042ca:	4b90      	ldr	r3, [pc, #576]	; (800450c <UART_SetConfig+0x2cc>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d81b      	bhi.n	8004310 <UART_SetConfig+0xd0>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0xa0>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	08004301 	.word	0x08004301
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	08004309 	.word	0x08004309
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e116      	b.n	8004526 <UART_SetConfig+0x2e6>
 80042f8:	2302      	movs	r3, #2
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e112      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e10e      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e10a      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e106      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <UART_SetConfig+0x2d0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d138      	bne.n	8004394 <UART_SetConfig+0x154>
 8004322:	4b7a      	ldr	r3, [pc, #488]	; (800450c <UART_SetConfig+0x2cc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d82d      	bhi.n	800438c <UART_SetConfig+0x14c>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0xf8>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800436d 	.word	0x0800436d
 800433c:	0800438d 	.word	0x0800438d
 8004340:	0800438d 	.word	0x0800438d
 8004344:	0800438d 	.word	0x0800438d
 8004348:	0800437d 	.word	0x0800437d
 800434c:	0800438d 	.word	0x0800438d
 8004350:	0800438d 	.word	0x0800438d
 8004354:	0800438d 	.word	0x0800438d
 8004358:	08004375 	.word	0x08004375
 800435c:	0800438d 	.word	0x0800438d
 8004360:	0800438d 	.word	0x0800438d
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004385 	.word	0x08004385
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e0d8      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e0d4      	b.n	8004526 <UART_SetConfig+0x2e6>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e0d0      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e0cc      	b.n	8004526 <UART_SetConfig+0x2e6>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e0c8      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <UART_SetConfig+0x2d4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d125      	bne.n	80043ea <UART_SetConfig+0x1aa>
 800439e:	4b5b      	ldr	r3, [pc, #364]	; (800450c <UART_SetConfig+0x2cc>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d016      	beq.n	80043da <UART_SetConfig+0x19a>
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d818      	bhi.n	80043e2 <UART_SetConfig+0x1a2>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d00a      	beq.n	80043ca <UART_SetConfig+0x18a>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d814      	bhi.n	80043e2 <UART_SetConfig+0x1a2>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <UART_SetConfig+0x182>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d008      	beq.n	80043d2 <UART_SetConfig+0x192>
 80043c0:	e00f      	b.n	80043e2 <UART_SetConfig+0x1a2>
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c8:	e0ad      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043ca:	2302      	movs	r3, #2
 80043cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d0:	e0a9      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043d2:	2304      	movs	r3, #4
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d8:	e0a5      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043da:	2308      	movs	r3, #8
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e0:	e0a1      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043e2:	2310      	movs	r3, #16
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e8:	e09d      	b.n	8004526 <UART_SetConfig+0x2e6>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <UART_SetConfig+0x2d8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d125      	bne.n	8004440 <UART_SetConfig+0x200>
 80043f4:	4b45      	ldr	r3, [pc, #276]	; (800450c <UART_SetConfig+0x2cc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004400:	d016      	beq.n	8004430 <UART_SetConfig+0x1f0>
 8004402:	2bc0      	cmp	r3, #192	; 0xc0
 8004404:	d818      	bhi.n	8004438 <UART_SetConfig+0x1f8>
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d00a      	beq.n	8004420 <UART_SetConfig+0x1e0>
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d814      	bhi.n	8004438 <UART_SetConfig+0x1f8>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <UART_SetConfig+0x1d8>
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d008      	beq.n	8004428 <UART_SetConfig+0x1e8>
 8004416:	e00f      	b.n	8004438 <UART_SetConfig+0x1f8>
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e082      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e07e      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e07a      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e076      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e072      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a35      	ldr	r2, [pc, #212]	; (800451c <UART_SetConfig+0x2dc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d12a      	bne.n	80044a0 <UART_SetConfig+0x260>
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <UART_SetConfig+0x2cc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004458:	d01a      	beq.n	8004490 <UART_SetConfig+0x250>
 800445a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445e:	d81b      	bhi.n	8004498 <UART_SetConfig+0x258>
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d00c      	beq.n	8004480 <UART_SetConfig+0x240>
 8004466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446a:	d815      	bhi.n	8004498 <UART_SetConfig+0x258>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <UART_SetConfig+0x238>
 8004470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004474:	d008      	beq.n	8004488 <UART_SetConfig+0x248>
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x258>
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e052      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e04e      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e04a      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e046      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e042      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <UART_SetConfig+0x2c4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d13a      	bne.n	8004520 <UART_SetConfig+0x2e0>
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <UART_SetConfig+0x2cc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b8:	d01a      	beq.n	80044f0 <UART_SetConfig+0x2b0>
 80044ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0x2b8>
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c4:	d00c      	beq.n	80044e0 <UART_SetConfig+0x2a0>
 80044c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ca:	d815      	bhi.n	80044f8 <UART_SetConfig+0x2b8>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <UART_SetConfig+0x298>
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d4:	d008      	beq.n	80044e8 <UART_SetConfig+0x2a8>
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x2b8>
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e022      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e01e      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e01a      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e016      	b.n	8004526 <UART_SetConfig+0x2e6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e012      	b.n	8004526 <UART_SetConfig+0x2e6>
 8004500:	efff69f3 	.word	0xefff69f3
 8004504:	40008000 	.word	0x40008000
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	40005000 	.word	0x40005000
 8004520:	2310      	movs	r3, #16
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a9f      	ldr	r2, [pc, #636]	; (80047a8 <UART_SetConfig+0x568>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d17a      	bne.n	8004626 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004534:	2b08      	cmp	r3, #8
 8004536:	d824      	bhi.n	8004582 <UART_SetConfig+0x342>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x300>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004565 	.word	0x08004565
 8004544:	08004583 	.word	0x08004583
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004583 	.word	0x08004583
 8004550:	08004573 	.word	0x08004573
 8004554:	08004583 	.word	0x08004583
 8004558:	08004583 	.word	0x08004583
 800455c:	08004583 	.word	0x08004583
 8004560:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7fe fc94 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004568:	61f8      	str	r0, [r7, #28]
        break;
 800456a:	e010      	b.n	800458e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b8f      	ldr	r3, [pc, #572]	; (80047ac <UART_SetConfig+0x56c>)
 800456e:	61fb      	str	r3, [r7, #28]
        break;
 8004570:	e00d      	b.n	800458e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe fbf5 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8004576:	61f8      	str	r0, [r7, #28]
        break;
 8004578:	e009      	b.n	800458e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	61fb      	str	r3, [r7, #28]
        break;
 8004580:	e005      	b.n	800458e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800458c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80fb 	beq.w	800478c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d305      	bcc.n	80045b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d903      	bls.n	80045ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045b8:	e0e8      	b.n	800478c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2200      	movs	r2, #0
 80045be:	461c      	mov	r4, r3
 80045c0:	4615      	mov	r5, r2
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	022b      	lsls	r3, r5, #8
 80045cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045d0:	0222      	lsls	r2, r4, #8
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	6849      	ldr	r1, [r1, #4]
 80045d6:	0849      	lsrs	r1, r1, #1
 80045d8:	2000      	movs	r0, #0
 80045da:	4688      	mov	r8, r1
 80045dc:	4681      	mov	r9, r0
 80045de:	eb12 0a08 	adds.w	sl, r2, r8
 80045e2:	eb43 0b09 	adc.w	fp, r3, r9
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	4650      	mov	r0, sl
 80045f6:	4659      	mov	r1, fp
 80045f8:	f7fb fe42 	bl	8000280 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460a:	d308      	bcc.n	800461e <UART_SetConfig+0x3de>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004612:	d204      	bcs.n	800461e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	60da      	str	r2, [r3, #12]
 800461c:	e0b6      	b.n	800478c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004624:	e0b2      	b.n	800478c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462e:	d15e      	bne.n	80046ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004634:	2b08      	cmp	r3, #8
 8004636:	d828      	bhi.n	800468a <UART_SetConfig+0x44a>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <UART_SetConfig+0x400>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	0800468b 	.word	0x0800468b
 8004650:	0800467b 	.word	0x0800467b
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800468b 	.word	0x0800468b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fe fc14 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004668:	61f8      	str	r0, [r7, #28]
        break;
 800466a:	e014      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe fc26 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8004670:	61f8      	str	r0, [r7, #28]
        break;
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <UART_SetConfig+0x56c>)
 8004676:	61fb      	str	r3, [r7, #28]
        break;
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe fb71 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 800467e:	61f8      	str	r0, [r7, #28]
        break;
 8004680:	e009      	b.n	8004696 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004686:	61fb      	str	r3, [r7, #28]
        break;
 8004688:	e005      	b.n	8004696 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d077      	beq.n	800478c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005a      	lsls	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b0f      	cmp	r3, #15
 80046b6:	d916      	bls.n	80046e6 <UART_SetConfig+0x4a6>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046be:	d212      	bcs.n	80046e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f023 030f 	bic.w	r3, r3, #15
 80046c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	8afb      	ldrh	r3, [r7, #22]
 80046d8:	4313      	orrs	r3, r2
 80046da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	8afa      	ldrh	r2, [r7, #22]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	e052      	b.n	800478c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046ec:	e04e      	b.n	800478c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d827      	bhi.n	8004746 <UART_SetConfig+0x506>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x4bc>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fbb6 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e014      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fbc8 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 800472c:	61f8      	str	r0, [r7, #28]
        break;
 800472e:	e010      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <UART_SetConfig+0x56c>)
 8004732:	61fb      	str	r3, [r7, #28]
        break;
 8004734:	e00d      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe fb13 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 800473a:	61f8      	str	r0, [r7, #28]
        break;
 800473c:	e009      	b.n	8004752 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004742:	61fb      	str	r3, [r7, #28]
        break;
 8004744:	e005      	b.n	8004752 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004750:	bf00      	nop
    }

    if (pclk != 0U)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	085a      	lsrs	r2, r3, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	441a      	add	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d909      	bls.n	8004786 <UART_SetConfig+0x546>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d205      	bcs.n	8004786 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
 8004784:	e002      	b.n	800478c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004798:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a6:	bf00      	nop
 80047a8:	40008000 	.word	0x40008000
 80047ac:	00f42400 	.word	0x00f42400

080047b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ae:	d10a      	bne.n	80048c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004904:	f7fd f982 	bl	8001c0c <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d10e      	bne.n	8004936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f82d 	bl	8004986 <UART_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e023      	b.n	800497e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d10e      	bne.n	8004962 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f817 	bl	8004986 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e00d      	b.n	800497e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b09c      	sub	sp, #112	; 0x70
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004996:	e0a5      	b.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	f000 80a1 	beq.w	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fd f933 	bl	8001c0c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d13e      	bne.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049cc:	667b      	str	r3, [r7, #100]	; 0x64
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e6      	bne.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e067      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d04f      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a52:	d147      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a5c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ab0:	623a      	str	r2, [r7, #32]
 8004ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f43f af4a 	beq.w	8004998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3770      	adds	r7, #112	; 0x70
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b095      	sub	sp, #84	; 0x54
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	643b      	str	r3, [r7, #64]	; 0x40
 8004b36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e5      	bne.n	8004b48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d118      	bne.n	8004bb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f023 0310 	bic.w	r3, r3, #16
 8004b98:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6979      	ldr	r1, [r7, #20]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e6      	bne.n	8004b84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004bc8:	bf00      	nop
 8004bca:	3754      	adds	r7, #84	; 0x54
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fb0e 	bl	8004214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b08f      	sub	sp, #60	; 0x3c
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0c:	2b21      	cmp	r3, #33	; 0x21
 8004c0e:	d14d      	bne.n	8004cac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d132      	bne.n	8004c82 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e6      	bne.n	8004c1c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6979      	ldr	r1, [r7, #20]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e6      	bne.n	8004c4e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004c80:	e014      	b.n	8004cac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004cac:	bf00      	nop
 8004cae:	373c      	adds	r7, #60	; 0x3c
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b091      	sub	sp, #68	; 0x44
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc4:	2b21      	cmp	r3, #33	; 0x21
 8004cc6:	d151      	bne.n	8004d6c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d132      	bne.n	8004d3a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e6      	bne.n	8004cd4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	69b9      	ldr	r1, [r7, #24]
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	617b      	str	r3, [r7, #20]
   return(result);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d38:	e018      	b.n	8004d6c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d42:	881a      	ldrh	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004d6c:	bf00      	nop
 8004d6e:	3744      	adds	r7, #68	; 0x44
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fa1e 	bl	8004200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc4:	bf00      	nop
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <__errno>:
 8004de0:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <__errno+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4d0d      	ldr	r5, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2600      	movs	r6, #0
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4d0b      	ldr	r5, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f001 fa2a 	bl	8006258 <_init>
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2600      	movs	r6, #0
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08006774 	.word	0x08006774
 8004e28:	08006774 	.word	0x08006774
 8004e2c:	08006774 	.word	0x08006774
 8004e30:	08006778 	.word	0x08006778

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <iprintf>:
 8004e44:	b40f      	push	{r0, r1, r2, r3}
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <iprintf+0x2c>)
 8004e48:	b513      	push	{r0, r1, r4, lr}
 8004e4a:	681c      	ldr	r4, [r3, #0]
 8004e4c:	b124      	cbz	r4, 8004e58 <iprintf+0x14>
 8004e4e:	69a3      	ldr	r3, [r4, #24]
 8004e50:	b913      	cbnz	r3, 8004e58 <iprintf+0x14>
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 faa8 	bl	80053a8 <__sinit>
 8004e58:	ab05      	add	r3, sp, #20
 8004e5a:	9a04      	ldr	r2, [sp, #16]
 8004e5c:	68a1      	ldr	r1, [r4, #8]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 fe0d 	bl	8005a80 <_vfiprintf_r>
 8004e66:	b002      	add	sp, #8
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	b004      	add	sp, #16
 8004e6e:	4770      	bx	lr
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <_puts_r>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	460e      	mov	r6, r1
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b118      	cbz	r0, 8004e84 <_puts_r+0x10>
 8004e7c:	6983      	ldr	r3, [r0, #24]
 8004e7e:	b90b      	cbnz	r3, 8004e84 <_puts_r+0x10>
 8004e80:	f000 fa92 	bl	80053a8 <__sinit>
 8004e84:	69ab      	ldr	r3, [r5, #24]
 8004e86:	68ac      	ldr	r4, [r5, #8]
 8004e88:	b913      	cbnz	r3, 8004e90 <_puts_r+0x1c>
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 fa8c 	bl	80053a8 <__sinit>
 8004e90:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <_puts_r+0xd0>)
 8004e92:	429c      	cmp	r4, r3
 8004e94:	d120      	bne.n	8004ed8 <_puts_r+0x64>
 8004e96:	686c      	ldr	r4, [r5, #4]
 8004e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e9a:	07db      	lsls	r3, r3, #31
 8004e9c:	d405      	bmi.n	8004eaa <_puts_r+0x36>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	0598      	lsls	r0, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_puts_r+0x36>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea6:	f000 fb1d 	bl	80054e4 <__retarget_lock_acquire_recursive>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	0719      	lsls	r1, r3, #28
 8004eae:	d51d      	bpl.n	8004eec <_puts_r+0x78>
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	b1db      	cbz	r3, 8004eec <_puts_r+0x78>
 8004eb4:	3e01      	subs	r6, #1
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60a3      	str	r3, [r4, #8]
 8004ec0:	bb39      	cbnz	r1, 8004f12 <_puts_r+0x9e>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da38      	bge.n	8004f38 <_puts_r+0xc4>
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	210a      	movs	r1, #10
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 f892 	bl	8004ff4 <__swbuf_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d011      	beq.n	8004ef8 <_puts_r+0x84>
 8004ed4:	250a      	movs	r5, #10
 8004ed6:	e011      	b.n	8004efc <_puts_r+0x88>
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <_puts_r+0xd4>)
 8004eda:	429c      	cmp	r4, r3
 8004edc:	d101      	bne.n	8004ee2 <_puts_r+0x6e>
 8004ede:	68ac      	ldr	r4, [r5, #8]
 8004ee0:	e7da      	b.n	8004e98 <_puts_r+0x24>
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <_puts_r+0xd8>)
 8004ee4:	429c      	cmp	r4, r3
 8004ee6:	bf08      	it	eq
 8004ee8:	68ec      	ldreq	r4, [r5, #12]
 8004eea:	e7d5      	b.n	8004e98 <_puts_r+0x24>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 f8d2 	bl	8005098 <__swsetup_r>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d0dd      	beq.n	8004eb4 <_puts_r+0x40>
 8004ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8004efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004efe:	07da      	lsls	r2, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_puts_r+0x9a>
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	059b      	lsls	r3, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_puts_r+0x9a>
 8004f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f0a:	f000 faec 	bl	80054e6 <__retarget_lock_release_recursive>
 8004f0e:	4628      	mov	r0, r5
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	da04      	bge.n	8004f20 <_puts_r+0xac>
 8004f16:	69a2      	ldr	r2, [r4, #24]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	dc06      	bgt.n	8004f2a <_puts_r+0xb6>
 8004f1c:	290a      	cmp	r1, #10
 8004f1e:	d004      	beq.n	8004f2a <_puts_r+0xb6>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	6022      	str	r2, [r4, #0]
 8004f26:	7019      	strb	r1, [r3, #0]
 8004f28:	e7c5      	b.n	8004eb6 <_puts_r+0x42>
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 f861 	bl	8004ff4 <__swbuf_r>
 8004f32:	3001      	adds	r0, #1
 8004f34:	d1bf      	bne.n	8004eb6 <_puts_r+0x42>
 8004f36:	e7df      	b.n	8004ef8 <_puts_r+0x84>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	250a      	movs	r5, #10
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	6022      	str	r2, [r4, #0]
 8004f40:	701d      	strb	r5, [r3, #0]
 8004f42:	e7db      	b.n	8004efc <_puts_r+0x88>
 8004f44:	080066f8 	.word	0x080066f8
 8004f48:	08006718 	.word	0x08006718
 8004f4c:	080066d8 	.word	0x080066d8

08004f50 <puts>:
 8004f50:	4b02      	ldr	r3, [pc, #8]	; (8004f5c <puts+0xc>)
 8004f52:	4601      	mov	r1, r0
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	f7ff bf8d 	b.w	8004e74 <_puts_r>
 8004f5a:	bf00      	nop
 8004f5c:	2000000c 	.word	0x2000000c

08004f60 <siprintf>:
 8004f60:	b40e      	push	{r1, r2, r3}
 8004f62:	b500      	push	{lr}
 8004f64:	b09c      	sub	sp, #112	; 0x70
 8004f66:	ab1d      	add	r3, sp, #116	; 0x74
 8004f68:	9002      	str	r0, [sp, #8]
 8004f6a:	9006      	str	r0, [sp, #24]
 8004f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f70:	4809      	ldr	r0, [pc, #36]	; (8004f98 <siprintf+0x38>)
 8004f72:	9107      	str	r1, [sp, #28]
 8004f74:	9104      	str	r1, [sp, #16]
 8004f76:	4909      	ldr	r1, [pc, #36]	; (8004f9c <siprintf+0x3c>)
 8004f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f7c:	9105      	str	r1, [sp, #20]
 8004f7e:	6800      	ldr	r0, [r0, #0]
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	a902      	add	r1, sp, #8
 8004f84:	f000 fc52 	bl	800582c <_svfiprintf_r>
 8004f88:	9b02      	ldr	r3, [sp, #8]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	b01c      	add	sp, #112	; 0x70
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b003      	add	sp, #12
 8004f96:	4770      	bx	lr
 8004f98:	2000000c 	.word	0x2000000c
 8004f9c:	ffff0208 	.word	0xffff0208

08004fa0 <strncmp>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	b17a      	cbz	r2, 8004fc4 <strncmp+0x24>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	3901      	subs	r1, #1
 8004fa8:	1884      	adds	r4, r0, r2
 8004faa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004fae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004fb2:	4290      	cmp	r0, r2
 8004fb4:	d101      	bne.n	8004fba <strncmp+0x1a>
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	d101      	bne.n	8004fbe <strncmp+0x1e>
 8004fba:	1a80      	subs	r0, r0, r2
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d1f3      	bne.n	8004faa <strncmp+0xa>
 8004fc2:	e7fa      	b.n	8004fba <strncmp+0x1a>
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	e7f9      	b.n	8004fbc <strncmp+0x1c>

08004fc8 <strstr>:
 8004fc8:	780a      	ldrb	r2, [r1, #0]
 8004fca:	b570      	push	{r4, r5, r6, lr}
 8004fcc:	b96a      	cbnz	r2, 8004fea <strstr+0x22>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d109      	bne.n	8004fe8 <strstr+0x20>
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f6      	beq.n	8004fce <strstr+0x6>
 8004fe0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004fe4:	429e      	cmp	r6, r3
 8004fe6:	d0f7      	beq.n	8004fd8 <strstr+0x10>
 8004fe8:	3001      	adds	r0, #1
 8004fea:	7803      	ldrb	r3, [r0, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ef      	bne.n	8004fd0 <strstr+0x8>
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	e7ec      	b.n	8004fce <strstr+0x6>

08004ff4 <__swbuf_r>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	b118      	cbz	r0, 8005006 <__swbuf_r+0x12>
 8004ffe:	6983      	ldr	r3, [r0, #24]
 8005000:	b90b      	cbnz	r3, 8005006 <__swbuf_r+0x12>
 8005002:	f000 f9d1 	bl	80053a8 <__sinit>
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <__swbuf_r+0x98>)
 8005008:	429c      	cmp	r4, r3
 800500a:	d12b      	bne.n	8005064 <__swbuf_r+0x70>
 800500c:	686c      	ldr	r4, [r5, #4]
 800500e:	69a3      	ldr	r3, [r4, #24]
 8005010:	60a3      	str	r3, [r4, #8]
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	071a      	lsls	r2, r3, #28
 8005016:	d52f      	bpl.n	8005078 <__swbuf_r+0x84>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	b36b      	cbz	r3, 8005078 <__swbuf_r+0x84>
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	6820      	ldr	r0, [r4, #0]
 8005020:	1ac0      	subs	r0, r0, r3
 8005022:	6963      	ldr	r3, [r4, #20]
 8005024:	b2f6      	uxtb	r6, r6
 8005026:	4283      	cmp	r3, r0
 8005028:	4637      	mov	r7, r6
 800502a:	dc04      	bgt.n	8005036 <__swbuf_r+0x42>
 800502c:	4621      	mov	r1, r4
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f926 	bl	8005280 <_fflush_r>
 8005034:	bb30      	cbnz	r0, 8005084 <__swbuf_r+0x90>
 8005036:	68a3      	ldr	r3, [r4, #8]
 8005038:	3b01      	subs	r3, #1
 800503a:	60a3      	str	r3, [r4, #8]
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	6022      	str	r2, [r4, #0]
 8005042:	701e      	strb	r6, [r3, #0]
 8005044:	6963      	ldr	r3, [r4, #20]
 8005046:	3001      	adds	r0, #1
 8005048:	4283      	cmp	r3, r0
 800504a:	d004      	beq.n	8005056 <__swbuf_r+0x62>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	07db      	lsls	r3, r3, #31
 8005050:	d506      	bpl.n	8005060 <__swbuf_r+0x6c>
 8005052:	2e0a      	cmp	r6, #10
 8005054:	d104      	bne.n	8005060 <__swbuf_r+0x6c>
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 f911 	bl	8005280 <_fflush_r>
 800505e:	b988      	cbnz	r0, 8005084 <__swbuf_r+0x90>
 8005060:	4638      	mov	r0, r7
 8005062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <__swbuf_r+0x9c>)
 8005066:	429c      	cmp	r4, r3
 8005068:	d101      	bne.n	800506e <__swbuf_r+0x7a>
 800506a:	68ac      	ldr	r4, [r5, #8]
 800506c:	e7cf      	b.n	800500e <__swbuf_r+0x1a>
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <__swbuf_r+0xa0>)
 8005070:	429c      	cmp	r4, r3
 8005072:	bf08      	it	eq
 8005074:	68ec      	ldreq	r4, [r5, #12]
 8005076:	e7ca      	b.n	800500e <__swbuf_r+0x1a>
 8005078:	4621      	mov	r1, r4
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f80c 	bl	8005098 <__swsetup_r>
 8005080:	2800      	cmp	r0, #0
 8005082:	d0cb      	beq.n	800501c <__swbuf_r+0x28>
 8005084:	f04f 37ff 	mov.w	r7, #4294967295
 8005088:	e7ea      	b.n	8005060 <__swbuf_r+0x6c>
 800508a:	bf00      	nop
 800508c:	080066f8 	.word	0x080066f8
 8005090:	08006718 	.word	0x08006718
 8005094:	080066d8 	.word	0x080066d8

08005098 <__swsetup_r>:
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <__swsetup_r+0xcc>)
 800509a:	b570      	push	{r4, r5, r6, lr}
 800509c:	681d      	ldr	r5, [r3, #0]
 800509e:	4606      	mov	r6, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	b125      	cbz	r5, 80050ae <__swsetup_r+0x16>
 80050a4:	69ab      	ldr	r3, [r5, #24]
 80050a6:	b913      	cbnz	r3, 80050ae <__swsetup_r+0x16>
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f97d 	bl	80053a8 <__sinit>
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <__swsetup_r+0xd0>)
 80050b0:	429c      	cmp	r4, r3
 80050b2:	d10f      	bne.n	80050d4 <__swsetup_r+0x3c>
 80050b4:	686c      	ldr	r4, [r5, #4]
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050bc:	0719      	lsls	r1, r3, #28
 80050be:	d42c      	bmi.n	800511a <__swsetup_r+0x82>
 80050c0:	06dd      	lsls	r5, r3, #27
 80050c2:	d411      	bmi.n	80050e8 <__swsetup_r+0x50>
 80050c4:	2309      	movs	r3, #9
 80050c6:	6033      	str	r3, [r6, #0]
 80050c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	f04f 30ff 	mov.w	r0, #4294967295
 80050d2:	e03e      	b.n	8005152 <__swsetup_r+0xba>
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <__swsetup_r+0xd4>)
 80050d6:	429c      	cmp	r4, r3
 80050d8:	d101      	bne.n	80050de <__swsetup_r+0x46>
 80050da:	68ac      	ldr	r4, [r5, #8]
 80050dc:	e7eb      	b.n	80050b6 <__swsetup_r+0x1e>
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <__swsetup_r+0xd8>)
 80050e0:	429c      	cmp	r4, r3
 80050e2:	bf08      	it	eq
 80050e4:	68ec      	ldreq	r4, [r5, #12]
 80050e6:	e7e6      	b.n	80050b6 <__swsetup_r+0x1e>
 80050e8:	0758      	lsls	r0, r3, #29
 80050ea:	d512      	bpl.n	8005112 <__swsetup_r+0x7a>
 80050ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ee:	b141      	cbz	r1, 8005102 <__swsetup_r+0x6a>
 80050f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050f4:	4299      	cmp	r1, r3
 80050f6:	d002      	beq.n	80050fe <__swsetup_r+0x66>
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 fa5b 	bl	80055b4 <_free_r>
 80050fe:	2300      	movs	r3, #0
 8005100:	6363      	str	r3, [r4, #52]	; 0x34
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	2300      	movs	r3, #0
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0308 	orr.w	r3, r3, #8
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	b94b      	cbnz	r3, 8005132 <__swsetup_r+0x9a>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005128:	d003      	beq.n	8005132 <__swsetup_r+0x9a>
 800512a:	4621      	mov	r1, r4
 800512c:	4630      	mov	r0, r6
 800512e:	f000 fa01 	bl	8005534 <__smakebuf_r>
 8005132:	89a0      	ldrh	r0, [r4, #12]
 8005134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005138:	f010 0301 	ands.w	r3, r0, #1
 800513c:	d00a      	beq.n	8005154 <__swsetup_r+0xbc>
 800513e:	2300      	movs	r3, #0
 8005140:	60a3      	str	r3, [r4, #8]
 8005142:	6963      	ldr	r3, [r4, #20]
 8005144:	425b      	negs	r3, r3
 8005146:	61a3      	str	r3, [r4, #24]
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	b943      	cbnz	r3, 800515e <__swsetup_r+0xc6>
 800514c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005150:	d1ba      	bne.n	80050c8 <__swsetup_r+0x30>
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	0781      	lsls	r1, r0, #30
 8005156:	bf58      	it	pl
 8005158:	6963      	ldrpl	r3, [r4, #20]
 800515a:	60a3      	str	r3, [r4, #8]
 800515c:	e7f4      	b.n	8005148 <__swsetup_r+0xb0>
 800515e:	2000      	movs	r0, #0
 8005160:	e7f7      	b.n	8005152 <__swsetup_r+0xba>
 8005162:	bf00      	nop
 8005164:	2000000c 	.word	0x2000000c
 8005168:	080066f8 	.word	0x080066f8
 800516c:	08006718 	.word	0x08006718
 8005170:	080066d8 	.word	0x080066d8

08005174 <__sflush_r>:
 8005174:	898a      	ldrh	r2, [r1, #12]
 8005176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517a:	4605      	mov	r5, r0
 800517c:	0710      	lsls	r0, r2, #28
 800517e:	460c      	mov	r4, r1
 8005180:	d458      	bmi.n	8005234 <__sflush_r+0xc0>
 8005182:	684b      	ldr	r3, [r1, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	dc05      	bgt.n	8005194 <__sflush_r+0x20>
 8005188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	dc02      	bgt.n	8005194 <__sflush_r+0x20>
 800518e:	2000      	movs	r0, #0
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005196:	2e00      	cmp	r6, #0
 8005198:	d0f9      	beq.n	800518e <__sflush_r+0x1a>
 800519a:	2300      	movs	r3, #0
 800519c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051a0:	682f      	ldr	r7, [r5, #0]
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	d032      	beq.n	800520c <__sflush_r+0x98>
 80051a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	075a      	lsls	r2, r3, #29
 80051ac:	d505      	bpl.n	80051ba <__sflush_r+0x46>
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	1ac0      	subs	r0, r0, r3
 80051b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051b4:	b10b      	cbz	r3, 80051ba <__sflush_r+0x46>
 80051b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b8:	1ac0      	subs	r0, r0, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	4602      	mov	r2, r0
 80051be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051c0:	6a21      	ldr	r1, [r4, #32]
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b0      	blx	r6
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	d106      	bne.n	80051da <__sflush_r+0x66>
 80051cc:	6829      	ldr	r1, [r5, #0]
 80051ce:	291d      	cmp	r1, #29
 80051d0:	d82c      	bhi.n	800522c <__sflush_r+0xb8>
 80051d2:	4a2a      	ldr	r2, [pc, #168]	; (800527c <__sflush_r+0x108>)
 80051d4:	40ca      	lsrs	r2, r1
 80051d6:	07d6      	lsls	r6, r2, #31
 80051d8:	d528      	bpl.n	800522c <__sflush_r+0xb8>
 80051da:	2200      	movs	r2, #0
 80051dc:	6062      	str	r2, [r4, #4]
 80051de:	04d9      	lsls	r1, r3, #19
 80051e0:	6922      	ldr	r2, [r4, #16]
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	d504      	bpl.n	80051f0 <__sflush_r+0x7c>
 80051e6:	1c42      	adds	r2, r0, #1
 80051e8:	d101      	bne.n	80051ee <__sflush_r+0x7a>
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	b903      	cbnz	r3, 80051f0 <__sflush_r+0x7c>
 80051ee:	6560      	str	r0, [r4, #84]	; 0x54
 80051f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051f2:	602f      	str	r7, [r5, #0]
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d0ca      	beq.n	800518e <__sflush_r+0x1a>
 80051f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051fc:	4299      	cmp	r1, r3
 80051fe:	d002      	beq.n	8005206 <__sflush_r+0x92>
 8005200:	4628      	mov	r0, r5
 8005202:	f000 f9d7 	bl	80055b4 <_free_r>
 8005206:	2000      	movs	r0, #0
 8005208:	6360      	str	r0, [r4, #52]	; 0x34
 800520a:	e7c1      	b.n	8005190 <__sflush_r+0x1c>
 800520c:	6a21      	ldr	r1, [r4, #32]
 800520e:	2301      	movs	r3, #1
 8005210:	4628      	mov	r0, r5
 8005212:	47b0      	blx	r6
 8005214:	1c41      	adds	r1, r0, #1
 8005216:	d1c7      	bne.n	80051a8 <__sflush_r+0x34>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0c4      	beq.n	80051a8 <__sflush_r+0x34>
 800521e:	2b1d      	cmp	r3, #29
 8005220:	d001      	beq.n	8005226 <__sflush_r+0xb2>
 8005222:	2b16      	cmp	r3, #22
 8005224:	d101      	bne.n	800522a <__sflush_r+0xb6>
 8005226:	602f      	str	r7, [r5, #0]
 8005228:	e7b1      	b.n	800518e <__sflush_r+0x1a>
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	e7ad      	b.n	8005190 <__sflush_r+0x1c>
 8005234:	690f      	ldr	r7, [r1, #16]
 8005236:	2f00      	cmp	r7, #0
 8005238:	d0a9      	beq.n	800518e <__sflush_r+0x1a>
 800523a:	0793      	lsls	r3, r2, #30
 800523c:	680e      	ldr	r6, [r1, #0]
 800523e:	bf08      	it	eq
 8005240:	694b      	ldreq	r3, [r1, #20]
 8005242:	600f      	str	r7, [r1, #0]
 8005244:	bf18      	it	ne
 8005246:	2300      	movne	r3, #0
 8005248:	eba6 0807 	sub.w	r8, r6, r7
 800524c:	608b      	str	r3, [r1, #8]
 800524e:	f1b8 0f00 	cmp.w	r8, #0
 8005252:	dd9c      	ble.n	800518e <__sflush_r+0x1a>
 8005254:	6a21      	ldr	r1, [r4, #32]
 8005256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005258:	4643      	mov	r3, r8
 800525a:	463a      	mov	r2, r7
 800525c:	4628      	mov	r0, r5
 800525e:	47b0      	blx	r6
 8005260:	2800      	cmp	r0, #0
 8005262:	dc06      	bgt.n	8005272 <__sflush_r+0xfe>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
 8005270:	e78e      	b.n	8005190 <__sflush_r+0x1c>
 8005272:	4407      	add	r7, r0
 8005274:	eba8 0800 	sub.w	r8, r8, r0
 8005278:	e7e9      	b.n	800524e <__sflush_r+0xda>
 800527a:	bf00      	nop
 800527c:	20400001 	.word	0x20400001

08005280 <_fflush_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	690b      	ldr	r3, [r1, #16]
 8005284:	4605      	mov	r5, r0
 8005286:	460c      	mov	r4, r1
 8005288:	b913      	cbnz	r3, 8005290 <_fflush_r+0x10>
 800528a:	2500      	movs	r5, #0
 800528c:	4628      	mov	r0, r5
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	b118      	cbz	r0, 800529a <_fflush_r+0x1a>
 8005292:	6983      	ldr	r3, [r0, #24]
 8005294:	b90b      	cbnz	r3, 800529a <_fflush_r+0x1a>
 8005296:	f000 f887 	bl	80053a8 <__sinit>
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <_fflush_r+0x6c>)
 800529c:	429c      	cmp	r4, r3
 800529e:	d11b      	bne.n	80052d8 <_fflush_r+0x58>
 80052a0:	686c      	ldr	r4, [r5, #4]
 80052a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ef      	beq.n	800528a <_fflush_r+0xa>
 80052aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052ac:	07d0      	lsls	r0, r2, #31
 80052ae:	d404      	bmi.n	80052ba <_fflush_r+0x3a>
 80052b0:	0599      	lsls	r1, r3, #22
 80052b2:	d402      	bmi.n	80052ba <_fflush_r+0x3a>
 80052b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b6:	f000 f915 	bl	80054e4 <__retarget_lock_acquire_recursive>
 80052ba:	4628      	mov	r0, r5
 80052bc:	4621      	mov	r1, r4
 80052be:	f7ff ff59 	bl	8005174 <__sflush_r>
 80052c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c4:	07da      	lsls	r2, r3, #31
 80052c6:	4605      	mov	r5, r0
 80052c8:	d4e0      	bmi.n	800528c <_fflush_r+0xc>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	d4dd      	bmi.n	800528c <_fflush_r+0xc>
 80052d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d2:	f000 f908 	bl	80054e6 <__retarget_lock_release_recursive>
 80052d6:	e7d9      	b.n	800528c <_fflush_r+0xc>
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <_fflush_r+0x70>)
 80052da:	429c      	cmp	r4, r3
 80052dc:	d101      	bne.n	80052e2 <_fflush_r+0x62>
 80052de:	68ac      	ldr	r4, [r5, #8]
 80052e0:	e7df      	b.n	80052a2 <_fflush_r+0x22>
 80052e2:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <_fflush_r+0x74>)
 80052e4:	429c      	cmp	r4, r3
 80052e6:	bf08      	it	eq
 80052e8:	68ec      	ldreq	r4, [r5, #12]
 80052ea:	e7da      	b.n	80052a2 <_fflush_r+0x22>
 80052ec:	080066f8 	.word	0x080066f8
 80052f0:	08006718 	.word	0x08006718
 80052f4:	080066d8 	.word	0x080066d8

080052f8 <std>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005306:	6083      	str	r3, [r0, #8]
 8005308:	8181      	strh	r1, [r0, #12]
 800530a:	6643      	str	r3, [r0, #100]	; 0x64
 800530c:	81c2      	strh	r2, [r0, #14]
 800530e:	6183      	str	r3, [r0, #24]
 8005310:	4619      	mov	r1, r3
 8005312:	2208      	movs	r2, #8
 8005314:	305c      	adds	r0, #92	; 0x5c
 8005316:	f7ff fd8d 	bl	8004e34 <memset>
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <std+0x38>)
 800531c:	6263      	str	r3, [r4, #36]	; 0x24
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <std+0x3c>)
 8005320:	62a3      	str	r3, [r4, #40]	; 0x28
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <std+0x40>)
 8005324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <std+0x44>)
 8005328:	6224      	str	r4, [r4, #32]
 800532a:	6323      	str	r3, [r4, #48]	; 0x30
 800532c:	bd10      	pop	{r4, pc}
 800532e:	bf00      	nop
 8005330:	08006029 	.word	0x08006029
 8005334:	0800604b 	.word	0x0800604b
 8005338:	08006083 	.word	0x08006083
 800533c:	080060a7 	.word	0x080060a7

08005340 <_cleanup_r>:
 8005340:	4901      	ldr	r1, [pc, #4]	; (8005348 <_cleanup_r+0x8>)
 8005342:	f000 b8af 	b.w	80054a4 <_fwalk_reent>
 8005346:	bf00      	nop
 8005348:	08005281 	.word	0x08005281

0800534c <__sfmoreglue>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	2268      	movs	r2, #104	; 0x68
 8005350:	1e4d      	subs	r5, r1, #1
 8005352:	4355      	muls	r5, r2
 8005354:	460e      	mov	r6, r1
 8005356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800535a:	f000 f997 	bl	800568c <_malloc_r>
 800535e:	4604      	mov	r4, r0
 8005360:	b140      	cbz	r0, 8005374 <__sfmoreglue+0x28>
 8005362:	2100      	movs	r1, #0
 8005364:	e9c0 1600 	strd	r1, r6, [r0]
 8005368:	300c      	adds	r0, #12
 800536a:	60a0      	str	r0, [r4, #8]
 800536c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005370:	f7ff fd60 	bl	8004e34 <memset>
 8005374:	4620      	mov	r0, r4
 8005376:	bd70      	pop	{r4, r5, r6, pc}

08005378 <__sfp_lock_acquire>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__sfp_lock_acquire+0x8>)
 800537a:	f000 b8b3 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	200003f5 	.word	0x200003f5

08005384 <__sfp_lock_release>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__sfp_lock_release+0x8>)
 8005386:	f000 b8ae 	b.w	80054e6 <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	200003f5 	.word	0x200003f5

08005390 <__sinit_lock_acquire>:
 8005390:	4801      	ldr	r0, [pc, #4]	; (8005398 <__sinit_lock_acquire+0x8>)
 8005392:	f000 b8a7 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 8005396:	bf00      	nop
 8005398:	200003f6 	.word	0x200003f6

0800539c <__sinit_lock_release>:
 800539c:	4801      	ldr	r0, [pc, #4]	; (80053a4 <__sinit_lock_release+0x8>)
 800539e:	f000 b8a2 	b.w	80054e6 <__retarget_lock_release_recursive>
 80053a2:	bf00      	nop
 80053a4:	200003f6 	.word	0x200003f6

080053a8 <__sinit>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	f7ff fff0 	bl	8005390 <__sinit_lock_acquire>
 80053b0:	69a3      	ldr	r3, [r4, #24]
 80053b2:	b11b      	cbz	r3, 80053bc <__sinit+0x14>
 80053b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b8:	f7ff bff0 	b.w	800539c <__sinit_lock_release>
 80053bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053c0:	6523      	str	r3, [r4, #80]	; 0x50
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <__sinit+0x68>)
 80053c4:	4a13      	ldr	r2, [pc, #76]	; (8005414 <__sinit+0x6c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	bf04      	itt	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	61a3      	streq	r3, [r4, #24]
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 f820 	bl	8005418 <__sfp>
 80053d8:	6060      	str	r0, [r4, #4]
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 f81c 	bl	8005418 <__sfp>
 80053e0:	60a0      	str	r0, [r4, #8]
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f818 	bl	8005418 <__sfp>
 80053e8:	2200      	movs	r2, #0
 80053ea:	60e0      	str	r0, [r4, #12]
 80053ec:	2104      	movs	r1, #4
 80053ee:	6860      	ldr	r0, [r4, #4]
 80053f0:	f7ff ff82 	bl	80052f8 <std>
 80053f4:	68a0      	ldr	r0, [r4, #8]
 80053f6:	2201      	movs	r2, #1
 80053f8:	2109      	movs	r1, #9
 80053fa:	f7ff ff7d 	bl	80052f8 <std>
 80053fe:	68e0      	ldr	r0, [r4, #12]
 8005400:	2202      	movs	r2, #2
 8005402:	2112      	movs	r1, #18
 8005404:	f7ff ff78 	bl	80052f8 <std>
 8005408:	2301      	movs	r3, #1
 800540a:	61a3      	str	r3, [r4, #24]
 800540c:	e7d2      	b.n	80053b4 <__sinit+0xc>
 800540e:	bf00      	nop
 8005410:	080066d4 	.word	0x080066d4
 8005414:	08005341 	.word	0x08005341

08005418 <__sfp>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	4607      	mov	r7, r0
 800541c:	f7ff ffac 	bl	8005378 <__sfp_lock_acquire>
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <__sfp+0x84>)
 8005422:	681e      	ldr	r6, [r3, #0]
 8005424:	69b3      	ldr	r3, [r6, #24]
 8005426:	b913      	cbnz	r3, 800542e <__sfp+0x16>
 8005428:	4630      	mov	r0, r6
 800542a:	f7ff ffbd 	bl	80053a8 <__sinit>
 800542e:	3648      	adds	r6, #72	; 0x48
 8005430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005434:	3b01      	subs	r3, #1
 8005436:	d503      	bpl.n	8005440 <__sfp+0x28>
 8005438:	6833      	ldr	r3, [r6, #0]
 800543a:	b30b      	cbz	r3, 8005480 <__sfp+0x68>
 800543c:	6836      	ldr	r6, [r6, #0]
 800543e:	e7f7      	b.n	8005430 <__sfp+0x18>
 8005440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005444:	b9d5      	cbnz	r5, 800547c <__sfp+0x64>
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <__sfp+0x88>)
 8005448:	60e3      	str	r3, [r4, #12]
 800544a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800544e:	6665      	str	r5, [r4, #100]	; 0x64
 8005450:	f000 f847 	bl	80054e2 <__retarget_lock_init_recursive>
 8005454:	f7ff ff96 	bl	8005384 <__sfp_lock_release>
 8005458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800545c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005460:	6025      	str	r5, [r4, #0]
 8005462:	61a5      	str	r5, [r4, #24]
 8005464:	2208      	movs	r2, #8
 8005466:	4629      	mov	r1, r5
 8005468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800546c:	f7ff fce2 	bl	8004e34 <memset>
 8005470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005478:	4620      	mov	r0, r4
 800547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800547c:	3468      	adds	r4, #104	; 0x68
 800547e:	e7d9      	b.n	8005434 <__sfp+0x1c>
 8005480:	2104      	movs	r1, #4
 8005482:	4638      	mov	r0, r7
 8005484:	f7ff ff62 	bl	800534c <__sfmoreglue>
 8005488:	4604      	mov	r4, r0
 800548a:	6030      	str	r0, [r6, #0]
 800548c:	2800      	cmp	r0, #0
 800548e:	d1d5      	bne.n	800543c <__sfp+0x24>
 8005490:	f7ff ff78 	bl	8005384 <__sfp_lock_release>
 8005494:	230c      	movs	r3, #12
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	e7ee      	b.n	8005478 <__sfp+0x60>
 800549a:	bf00      	nop
 800549c:	080066d4 	.word	0x080066d4
 80054a0:	ffff0001 	.word	0xffff0001

080054a4 <_fwalk_reent>:
 80054a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a8:	4606      	mov	r6, r0
 80054aa:	4688      	mov	r8, r1
 80054ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054b0:	2700      	movs	r7, #0
 80054b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054b6:	f1b9 0901 	subs.w	r9, r9, #1
 80054ba:	d505      	bpl.n	80054c8 <_fwalk_reent+0x24>
 80054bc:	6824      	ldr	r4, [r4, #0]
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d1f7      	bne.n	80054b2 <_fwalk_reent+0xe>
 80054c2:	4638      	mov	r0, r7
 80054c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c8:	89ab      	ldrh	r3, [r5, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d907      	bls.n	80054de <_fwalk_reent+0x3a>
 80054ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054d2:	3301      	adds	r3, #1
 80054d4:	d003      	beq.n	80054de <_fwalk_reent+0x3a>
 80054d6:	4629      	mov	r1, r5
 80054d8:	4630      	mov	r0, r6
 80054da:	47c0      	blx	r8
 80054dc:	4307      	orrs	r7, r0
 80054de:	3568      	adds	r5, #104	; 0x68
 80054e0:	e7e9      	b.n	80054b6 <_fwalk_reent+0x12>

080054e2 <__retarget_lock_init_recursive>:
 80054e2:	4770      	bx	lr

080054e4 <__retarget_lock_acquire_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_release_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <__swhatbuf_r>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	460e      	mov	r6, r1
 80054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f0:	2900      	cmp	r1, #0
 80054f2:	b096      	sub	sp, #88	; 0x58
 80054f4:	4614      	mov	r4, r2
 80054f6:	461d      	mov	r5, r3
 80054f8:	da08      	bge.n	800550c <__swhatbuf_r+0x24>
 80054fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	602a      	str	r2, [r5, #0]
 8005502:	061a      	lsls	r2, r3, #24
 8005504:	d410      	bmi.n	8005528 <__swhatbuf_r+0x40>
 8005506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550a:	e00e      	b.n	800552a <__swhatbuf_r+0x42>
 800550c:	466a      	mov	r2, sp
 800550e:	f000 fdf1 	bl	80060f4 <_fstat_r>
 8005512:	2800      	cmp	r0, #0
 8005514:	dbf1      	blt.n	80054fa <__swhatbuf_r+0x12>
 8005516:	9a01      	ldr	r2, [sp, #4]
 8005518:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800551c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005520:	425a      	negs	r2, r3
 8005522:	415a      	adcs	r2, r3
 8005524:	602a      	str	r2, [r5, #0]
 8005526:	e7ee      	b.n	8005506 <__swhatbuf_r+0x1e>
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	2000      	movs	r0, #0
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	b016      	add	sp, #88	; 0x58
 8005530:	bd70      	pop	{r4, r5, r6, pc}
	...

08005534 <__smakebuf_r>:
 8005534:	898b      	ldrh	r3, [r1, #12]
 8005536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005538:	079d      	lsls	r5, r3, #30
 800553a:	4606      	mov	r6, r0
 800553c:	460c      	mov	r4, r1
 800553e:	d507      	bpl.n	8005550 <__smakebuf_r+0x1c>
 8005540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	2301      	movs	r3, #1
 800554a:	6163      	str	r3, [r4, #20]
 800554c:	b002      	add	sp, #8
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	ab01      	add	r3, sp, #4
 8005552:	466a      	mov	r2, sp
 8005554:	f7ff ffc8 	bl	80054e8 <__swhatbuf_r>
 8005558:	9900      	ldr	r1, [sp, #0]
 800555a:	4605      	mov	r5, r0
 800555c:	4630      	mov	r0, r6
 800555e:	f000 f895 	bl	800568c <_malloc_r>
 8005562:	b948      	cbnz	r0, 8005578 <__smakebuf_r+0x44>
 8005564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005568:	059a      	lsls	r2, r3, #22
 800556a:	d4ef      	bmi.n	800554c <__smakebuf_r+0x18>
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	f043 0302 	orr.w	r3, r3, #2
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	e7e3      	b.n	8005540 <__smakebuf_r+0xc>
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <__smakebuf_r+0x7c>)
 800557a:	62b3      	str	r3, [r6, #40]	; 0x28
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	6020      	str	r0, [r4, #0]
 8005580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005584:	81a3      	strh	r3, [r4, #12]
 8005586:	9b00      	ldr	r3, [sp, #0]
 8005588:	6163      	str	r3, [r4, #20]
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	6120      	str	r0, [r4, #16]
 800558e:	b15b      	cbz	r3, 80055a8 <__smakebuf_r+0x74>
 8005590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005594:	4630      	mov	r0, r6
 8005596:	f000 fdbf 	bl	8006118 <_isatty_r>
 800559a:	b128      	cbz	r0, 80055a8 <__smakebuf_r+0x74>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	89a0      	ldrh	r0, [r4, #12]
 80055aa:	4305      	orrs	r5, r0
 80055ac:	81a5      	strh	r5, [r4, #12]
 80055ae:	e7cd      	b.n	800554c <__smakebuf_r+0x18>
 80055b0:	08005341 	.word	0x08005341

080055b4 <_free_r>:
 80055b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d044      	beq.n	8005644 <_free_r+0x90>
 80055ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055be:	9001      	str	r0, [sp, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f1a1 0404 	sub.w	r4, r1, #4
 80055c6:	bfb8      	it	lt
 80055c8:	18e4      	addlt	r4, r4, r3
 80055ca:	f000 fdef 	bl	80061ac <__malloc_lock>
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <_free_r+0x94>)
 80055d0:	9801      	ldr	r0, [sp, #4]
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	b933      	cbnz	r3, 80055e4 <_free_r+0x30>
 80055d6:	6063      	str	r3, [r4, #4]
 80055d8:	6014      	str	r4, [r2, #0]
 80055da:	b003      	add	sp, #12
 80055dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e0:	f000 bdea 	b.w	80061b8 <__malloc_unlock>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d908      	bls.n	80055fa <_free_r+0x46>
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	1961      	adds	r1, r4, r5
 80055ec:	428b      	cmp	r3, r1
 80055ee:	bf01      	itttt	eq
 80055f0:	6819      	ldreq	r1, [r3, #0]
 80055f2:	685b      	ldreq	r3, [r3, #4]
 80055f4:	1949      	addeq	r1, r1, r5
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	e7ed      	b.n	80055d6 <_free_r+0x22>
 80055fa:	461a      	mov	r2, r3
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b10b      	cbz	r3, 8005604 <_free_r+0x50>
 8005600:	42a3      	cmp	r3, r4
 8005602:	d9fa      	bls.n	80055fa <_free_r+0x46>
 8005604:	6811      	ldr	r1, [r2, #0]
 8005606:	1855      	adds	r5, r2, r1
 8005608:	42a5      	cmp	r5, r4
 800560a:	d10b      	bne.n	8005624 <_free_r+0x70>
 800560c:	6824      	ldr	r4, [r4, #0]
 800560e:	4421      	add	r1, r4
 8005610:	1854      	adds	r4, r2, r1
 8005612:	42a3      	cmp	r3, r4
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	d1e0      	bne.n	80055da <_free_r+0x26>
 8005618:	681c      	ldr	r4, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	6053      	str	r3, [r2, #4]
 800561e:	4421      	add	r1, r4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	e7da      	b.n	80055da <_free_r+0x26>
 8005624:	d902      	bls.n	800562c <_free_r+0x78>
 8005626:	230c      	movs	r3, #12
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	e7d6      	b.n	80055da <_free_r+0x26>
 800562c:	6825      	ldr	r5, [r4, #0]
 800562e:	1961      	adds	r1, r4, r5
 8005630:	428b      	cmp	r3, r1
 8005632:	bf04      	itt	eq
 8005634:	6819      	ldreq	r1, [r3, #0]
 8005636:	685b      	ldreq	r3, [r3, #4]
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	bf04      	itt	eq
 800563c:	1949      	addeq	r1, r1, r5
 800563e:	6021      	streq	r1, [r4, #0]
 8005640:	6054      	str	r4, [r2, #4]
 8005642:	e7ca      	b.n	80055da <_free_r+0x26>
 8005644:	b003      	add	sp, #12
 8005646:	bd30      	pop	{r4, r5, pc}
 8005648:	200003f8 	.word	0x200003f8

0800564c <sbrk_aligned>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4e0e      	ldr	r6, [pc, #56]	; (8005688 <sbrk_aligned+0x3c>)
 8005650:	460c      	mov	r4, r1
 8005652:	6831      	ldr	r1, [r6, #0]
 8005654:	4605      	mov	r5, r0
 8005656:	b911      	cbnz	r1, 800565e <sbrk_aligned+0x12>
 8005658:	f000 fcd6 	bl	8006008 <_sbrk_r>
 800565c:	6030      	str	r0, [r6, #0]
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	f000 fcd1 	bl	8006008 <_sbrk_r>
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d00a      	beq.n	8005680 <sbrk_aligned+0x34>
 800566a:	1cc4      	adds	r4, r0, #3
 800566c:	f024 0403 	bic.w	r4, r4, #3
 8005670:	42a0      	cmp	r0, r4
 8005672:	d007      	beq.n	8005684 <sbrk_aligned+0x38>
 8005674:	1a21      	subs	r1, r4, r0
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fcc6 	bl	8006008 <_sbrk_r>
 800567c:	3001      	adds	r0, #1
 800567e:	d101      	bne.n	8005684 <sbrk_aligned+0x38>
 8005680:	f04f 34ff 	mov.w	r4, #4294967295
 8005684:	4620      	mov	r0, r4
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	200003fc 	.word	0x200003fc

0800568c <_malloc_r>:
 800568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	1ccd      	adds	r5, r1, #3
 8005692:	f025 0503 	bic.w	r5, r5, #3
 8005696:	3508      	adds	r5, #8
 8005698:	2d0c      	cmp	r5, #12
 800569a:	bf38      	it	cc
 800569c:	250c      	movcc	r5, #12
 800569e:	2d00      	cmp	r5, #0
 80056a0:	4607      	mov	r7, r0
 80056a2:	db01      	blt.n	80056a8 <_malloc_r+0x1c>
 80056a4:	42a9      	cmp	r1, r5
 80056a6:	d905      	bls.n	80056b4 <_malloc_r+0x28>
 80056a8:	230c      	movs	r3, #12
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	2600      	movs	r6, #0
 80056ae:	4630      	mov	r0, r6
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	4e2e      	ldr	r6, [pc, #184]	; (8005770 <_malloc_r+0xe4>)
 80056b6:	f000 fd79 	bl	80061ac <__malloc_lock>
 80056ba:	6833      	ldr	r3, [r6, #0]
 80056bc:	461c      	mov	r4, r3
 80056be:	bb34      	cbnz	r4, 800570e <_malloc_r+0x82>
 80056c0:	4629      	mov	r1, r5
 80056c2:	4638      	mov	r0, r7
 80056c4:	f7ff ffc2 	bl	800564c <sbrk_aligned>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	4604      	mov	r4, r0
 80056cc:	d14d      	bne.n	800576a <_malloc_r+0xde>
 80056ce:	6834      	ldr	r4, [r6, #0]
 80056d0:	4626      	mov	r6, r4
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	d140      	bne.n	8005758 <_malloc_r+0xcc>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	4631      	mov	r1, r6
 80056da:	4638      	mov	r0, r7
 80056dc:	eb04 0803 	add.w	r8, r4, r3
 80056e0:	f000 fc92 	bl	8006008 <_sbrk_r>
 80056e4:	4580      	cmp	r8, r0
 80056e6:	d13a      	bne.n	800575e <_malloc_r+0xd2>
 80056e8:	6821      	ldr	r1, [r4, #0]
 80056ea:	3503      	adds	r5, #3
 80056ec:	1a6d      	subs	r5, r5, r1
 80056ee:	f025 0503 	bic.w	r5, r5, #3
 80056f2:	3508      	adds	r5, #8
 80056f4:	2d0c      	cmp	r5, #12
 80056f6:	bf38      	it	cc
 80056f8:	250c      	movcc	r5, #12
 80056fa:	4629      	mov	r1, r5
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff ffa5 	bl	800564c <sbrk_aligned>
 8005702:	3001      	adds	r0, #1
 8005704:	d02b      	beq.n	800575e <_malloc_r+0xd2>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	442b      	add	r3, r5
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	e00e      	b.n	800572c <_malloc_r+0xa0>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	1b52      	subs	r2, r2, r5
 8005712:	d41e      	bmi.n	8005752 <_malloc_r+0xc6>
 8005714:	2a0b      	cmp	r2, #11
 8005716:	d916      	bls.n	8005746 <_malloc_r+0xba>
 8005718:	1961      	adds	r1, r4, r5
 800571a:	42a3      	cmp	r3, r4
 800571c:	6025      	str	r5, [r4, #0]
 800571e:	bf18      	it	ne
 8005720:	6059      	strne	r1, [r3, #4]
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	bf08      	it	eq
 8005726:	6031      	streq	r1, [r6, #0]
 8005728:	5162      	str	r2, [r4, r5]
 800572a:	604b      	str	r3, [r1, #4]
 800572c:	4638      	mov	r0, r7
 800572e:	f104 060b 	add.w	r6, r4, #11
 8005732:	f000 fd41 	bl	80061b8 <__malloc_unlock>
 8005736:	f026 0607 	bic.w	r6, r6, #7
 800573a:	1d23      	adds	r3, r4, #4
 800573c:	1af2      	subs	r2, r6, r3
 800573e:	d0b6      	beq.n	80056ae <_malloc_r+0x22>
 8005740:	1b9b      	subs	r3, r3, r6
 8005742:	50a3      	str	r3, [r4, r2]
 8005744:	e7b3      	b.n	80056ae <_malloc_r+0x22>
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	42a3      	cmp	r3, r4
 800574a:	bf0c      	ite	eq
 800574c:	6032      	streq	r2, [r6, #0]
 800574e:	605a      	strne	r2, [r3, #4]
 8005750:	e7ec      	b.n	800572c <_malloc_r+0xa0>
 8005752:	4623      	mov	r3, r4
 8005754:	6864      	ldr	r4, [r4, #4]
 8005756:	e7b2      	b.n	80056be <_malloc_r+0x32>
 8005758:	4634      	mov	r4, r6
 800575a:	6876      	ldr	r6, [r6, #4]
 800575c:	e7b9      	b.n	80056d2 <_malloc_r+0x46>
 800575e:	230c      	movs	r3, #12
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4638      	mov	r0, r7
 8005764:	f000 fd28 	bl	80061b8 <__malloc_unlock>
 8005768:	e7a1      	b.n	80056ae <_malloc_r+0x22>
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	e7de      	b.n	800572c <_malloc_r+0xa0>
 800576e:	bf00      	nop
 8005770:	200003f8 	.word	0x200003f8

08005774 <__ssputs_r>:
 8005774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	688e      	ldr	r6, [r1, #8]
 800577a:	429e      	cmp	r6, r3
 800577c:	4682      	mov	sl, r0
 800577e:	460c      	mov	r4, r1
 8005780:	4690      	mov	r8, r2
 8005782:	461f      	mov	r7, r3
 8005784:	d838      	bhi.n	80057f8 <__ssputs_r+0x84>
 8005786:	898a      	ldrh	r2, [r1, #12]
 8005788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800578c:	d032      	beq.n	80057f4 <__ssputs_r+0x80>
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	6909      	ldr	r1, [r1, #16]
 8005792:	eba5 0901 	sub.w	r9, r5, r1
 8005796:	6965      	ldr	r5, [r4, #20]
 8005798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800579c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057a0:	3301      	adds	r3, #1
 80057a2:	444b      	add	r3, r9
 80057a4:	106d      	asrs	r5, r5, #1
 80057a6:	429d      	cmp	r5, r3
 80057a8:	bf38      	it	cc
 80057aa:	461d      	movcc	r5, r3
 80057ac:	0553      	lsls	r3, r2, #21
 80057ae:	d531      	bpl.n	8005814 <__ssputs_r+0xa0>
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7ff ff6b 	bl	800568c <_malloc_r>
 80057b6:	4606      	mov	r6, r0
 80057b8:	b950      	cbnz	r0, 80057d0 <__ssputs_r+0x5c>
 80057ba:	230c      	movs	r3, #12
 80057bc:	f8ca 3000 	str.w	r3, [sl]
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c6:	81a3      	strh	r3, [r4, #12]
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	6921      	ldr	r1, [r4, #16]
 80057d2:	464a      	mov	r2, r9
 80057d4:	f000 fcc2 	bl	800615c <memcpy>
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e2:	81a3      	strh	r3, [r4, #12]
 80057e4:	6126      	str	r6, [r4, #16]
 80057e6:	6165      	str	r5, [r4, #20]
 80057e8:	444e      	add	r6, r9
 80057ea:	eba5 0509 	sub.w	r5, r5, r9
 80057ee:	6026      	str	r6, [r4, #0]
 80057f0:	60a5      	str	r5, [r4, #8]
 80057f2:	463e      	mov	r6, r7
 80057f4:	42be      	cmp	r6, r7
 80057f6:	d900      	bls.n	80057fa <__ssputs_r+0x86>
 80057f8:	463e      	mov	r6, r7
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	4632      	mov	r2, r6
 80057fe:	4641      	mov	r1, r8
 8005800:	f000 fcba 	bl	8006178 <memmove>
 8005804:	68a3      	ldr	r3, [r4, #8]
 8005806:	1b9b      	subs	r3, r3, r6
 8005808:	60a3      	str	r3, [r4, #8]
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	4433      	add	r3, r6
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	2000      	movs	r0, #0
 8005812:	e7db      	b.n	80057cc <__ssputs_r+0x58>
 8005814:	462a      	mov	r2, r5
 8005816:	f000 fcd5 	bl	80061c4 <_realloc_r>
 800581a:	4606      	mov	r6, r0
 800581c:	2800      	cmp	r0, #0
 800581e:	d1e1      	bne.n	80057e4 <__ssputs_r+0x70>
 8005820:	6921      	ldr	r1, [r4, #16]
 8005822:	4650      	mov	r0, sl
 8005824:	f7ff fec6 	bl	80055b4 <_free_r>
 8005828:	e7c7      	b.n	80057ba <__ssputs_r+0x46>
	...

0800582c <_svfiprintf_r>:
 800582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005830:	4698      	mov	r8, r3
 8005832:	898b      	ldrh	r3, [r1, #12]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	b09d      	sub	sp, #116	; 0x74
 8005838:	4607      	mov	r7, r0
 800583a:	460d      	mov	r5, r1
 800583c:	4614      	mov	r4, r2
 800583e:	d50e      	bpl.n	800585e <_svfiprintf_r+0x32>
 8005840:	690b      	ldr	r3, [r1, #16]
 8005842:	b963      	cbnz	r3, 800585e <_svfiprintf_r+0x32>
 8005844:	2140      	movs	r1, #64	; 0x40
 8005846:	f7ff ff21 	bl	800568c <_malloc_r>
 800584a:	6028      	str	r0, [r5, #0]
 800584c:	6128      	str	r0, [r5, #16]
 800584e:	b920      	cbnz	r0, 800585a <_svfiprintf_r+0x2e>
 8005850:	230c      	movs	r3, #12
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	f04f 30ff 	mov.w	r0, #4294967295
 8005858:	e0d1      	b.n	80059fe <_svfiprintf_r+0x1d2>
 800585a:	2340      	movs	r3, #64	; 0x40
 800585c:	616b      	str	r3, [r5, #20]
 800585e:	2300      	movs	r3, #0
 8005860:	9309      	str	r3, [sp, #36]	; 0x24
 8005862:	2320      	movs	r3, #32
 8005864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005868:	f8cd 800c 	str.w	r8, [sp, #12]
 800586c:	2330      	movs	r3, #48	; 0x30
 800586e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a18 <_svfiprintf_r+0x1ec>
 8005872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005876:	f04f 0901 	mov.w	r9, #1
 800587a:	4623      	mov	r3, r4
 800587c:	469a      	mov	sl, r3
 800587e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005882:	b10a      	cbz	r2, 8005888 <_svfiprintf_r+0x5c>
 8005884:	2a25      	cmp	r2, #37	; 0x25
 8005886:	d1f9      	bne.n	800587c <_svfiprintf_r+0x50>
 8005888:	ebba 0b04 	subs.w	fp, sl, r4
 800588c:	d00b      	beq.n	80058a6 <_svfiprintf_r+0x7a>
 800588e:	465b      	mov	r3, fp
 8005890:	4622      	mov	r2, r4
 8005892:	4629      	mov	r1, r5
 8005894:	4638      	mov	r0, r7
 8005896:	f7ff ff6d 	bl	8005774 <__ssputs_r>
 800589a:	3001      	adds	r0, #1
 800589c:	f000 80aa 	beq.w	80059f4 <_svfiprintf_r+0x1c8>
 80058a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a2:	445a      	add	r2, fp
 80058a4:	9209      	str	r2, [sp, #36]	; 0x24
 80058a6:	f89a 3000 	ldrb.w	r3, [sl]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80a2 	beq.w	80059f4 <_svfiprintf_r+0x1c8>
 80058b0:	2300      	movs	r3, #0
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ba:	f10a 0a01 	add.w	sl, sl, #1
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	9307      	str	r3, [sp, #28]
 80058c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058c6:	931a      	str	r3, [sp, #104]	; 0x68
 80058c8:	4654      	mov	r4, sl
 80058ca:	2205      	movs	r2, #5
 80058cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d0:	4851      	ldr	r0, [pc, #324]	; (8005a18 <_svfiprintf_r+0x1ec>)
 80058d2:	f7fa fc85 	bl	80001e0 <memchr>
 80058d6:	9a04      	ldr	r2, [sp, #16]
 80058d8:	b9d8      	cbnz	r0, 8005912 <_svfiprintf_r+0xe6>
 80058da:	06d0      	lsls	r0, r2, #27
 80058dc:	bf44      	itt	mi
 80058de:	2320      	movmi	r3, #32
 80058e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e4:	0711      	lsls	r1, r2, #28
 80058e6:	bf44      	itt	mi
 80058e8:	232b      	movmi	r3, #43	; 0x2b
 80058ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ee:	f89a 3000 	ldrb.w	r3, [sl]
 80058f2:	2b2a      	cmp	r3, #42	; 0x2a
 80058f4:	d015      	beq.n	8005922 <_svfiprintf_r+0xf6>
 80058f6:	9a07      	ldr	r2, [sp, #28]
 80058f8:	4654      	mov	r4, sl
 80058fa:	2000      	movs	r0, #0
 80058fc:	f04f 0c0a 	mov.w	ip, #10
 8005900:	4621      	mov	r1, r4
 8005902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005906:	3b30      	subs	r3, #48	; 0x30
 8005908:	2b09      	cmp	r3, #9
 800590a:	d94e      	bls.n	80059aa <_svfiprintf_r+0x17e>
 800590c:	b1b0      	cbz	r0, 800593c <_svfiprintf_r+0x110>
 800590e:	9207      	str	r2, [sp, #28]
 8005910:	e014      	b.n	800593c <_svfiprintf_r+0x110>
 8005912:	eba0 0308 	sub.w	r3, r0, r8
 8005916:	fa09 f303 	lsl.w	r3, r9, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	46a2      	mov	sl, r4
 8005920:	e7d2      	b.n	80058c8 <_svfiprintf_r+0x9c>
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	1d19      	adds	r1, r3, #4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	9103      	str	r1, [sp, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfbb      	ittet	lt
 800592e:	425b      	neglt	r3, r3
 8005930:	f042 0202 	orrlt.w	r2, r2, #2
 8005934:	9307      	strge	r3, [sp, #28]
 8005936:	9307      	strlt	r3, [sp, #28]
 8005938:	bfb8      	it	lt
 800593a:	9204      	strlt	r2, [sp, #16]
 800593c:	7823      	ldrb	r3, [r4, #0]
 800593e:	2b2e      	cmp	r3, #46	; 0x2e
 8005940:	d10c      	bne.n	800595c <_svfiprintf_r+0x130>
 8005942:	7863      	ldrb	r3, [r4, #1]
 8005944:	2b2a      	cmp	r3, #42	; 0x2a
 8005946:	d135      	bne.n	80059b4 <_svfiprintf_r+0x188>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	9203      	str	r2, [sp, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bfb8      	it	lt
 8005954:	f04f 33ff 	movlt.w	r3, #4294967295
 8005958:	3402      	adds	r4, #2
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a28 <_svfiprintf_r+0x1fc>
 8005960:	7821      	ldrb	r1, [r4, #0]
 8005962:	2203      	movs	r2, #3
 8005964:	4650      	mov	r0, sl
 8005966:	f7fa fc3b 	bl	80001e0 <memchr>
 800596a:	b140      	cbz	r0, 800597e <_svfiprintf_r+0x152>
 800596c:	2340      	movs	r3, #64	; 0x40
 800596e:	eba0 000a 	sub.w	r0, r0, sl
 8005972:	fa03 f000 	lsl.w	r0, r3, r0
 8005976:	9b04      	ldr	r3, [sp, #16]
 8005978:	4303      	orrs	r3, r0
 800597a:	3401      	adds	r4, #1
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005982:	4826      	ldr	r0, [pc, #152]	; (8005a1c <_svfiprintf_r+0x1f0>)
 8005984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005988:	2206      	movs	r2, #6
 800598a:	f7fa fc29 	bl	80001e0 <memchr>
 800598e:	2800      	cmp	r0, #0
 8005990:	d038      	beq.n	8005a04 <_svfiprintf_r+0x1d8>
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <_svfiprintf_r+0x1f4>)
 8005994:	bb1b      	cbnz	r3, 80059de <_svfiprintf_r+0x1b2>
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	3307      	adds	r3, #7
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	3308      	adds	r3, #8
 80059a0:	9303      	str	r3, [sp, #12]
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	4433      	add	r3, r6
 80059a6:	9309      	str	r3, [sp, #36]	; 0x24
 80059a8:	e767      	b.n	800587a <_svfiprintf_r+0x4e>
 80059aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ae:	460c      	mov	r4, r1
 80059b0:	2001      	movs	r0, #1
 80059b2:	e7a5      	b.n	8005900 <_svfiprintf_r+0xd4>
 80059b4:	2300      	movs	r3, #0
 80059b6:	3401      	adds	r4, #1
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	4619      	mov	r1, r3
 80059bc:	f04f 0c0a 	mov.w	ip, #10
 80059c0:	4620      	mov	r0, r4
 80059c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c6:	3a30      	subs	r2, #48	; 0x30
 80059c8:	2a09      	cmp	r2, #9
 80059ca:	d903      	bls.n	80059d4 <_svfiprintf_r+0x1a8>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0c5      	beq.n	800595c <_svfiprintf_r+0x130>
 80059d0:	9105      	str	r1, [sp, #20]
 80059d2:	e7c3      	b.n	800595c <_svfiprintf_r+0x130>
 80059d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80059d8:	4604      	mov	r4, r0
 80059da:	2301      	movs	r3, #1
 80059dc:	e7f0      	b.n	80059c0 <_svfiprintf_r+0x194>
 80059de:	ab03      	add	r3, sp, #12
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	462a      	mov	r2, r5
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <_svfiprintf_r+0x1f8>)
 80059e6:	a904      	add	r1, sp, #16
 80059e8:	4638      	mov	r0, r7
 80059ea:	f3af 8000 	nop.w
 80059ee:	1c42      	adds	r2, r0, #1
 80059f0:	4606      	mov	r6, r0
 80059f2:	d1d6      	bne.n	80059a2 <_svfiprintf_r+0x176>
 80059f4:	89ab      	ldrh	r3, [r5, #12]
 80059f6:	065b      	lsls	r3, r3, #25
 80059f8:	f53f af2c 	bmi.w	8005854 <_svfiprintf_r+0x28>
 80059fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059fe:	b01d      	add	sp, #116	; 0x74
 8005a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	462a      	mov	r2, r5
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <_svfiprintf_r+0x1f8>)
 8005a0c:	a904      	add	r1, sp, #16
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f000 f9d4 	bl	8005dbc <_printf_i>
 8005a14:	e7eb      	b.n	80059ee <_svfiprintf_r+0x1c2>
 8005a16:	bf00      	nop
 8005a18:	08006738 	.word	0x08006738
 8005a1c:	08006742 	.word	0x08006742
 8005a20:	00000000 	.word	0x00000000
 8005a24:	08005775 	.word	0x08005775
 8005a28:	0800673e 	.word	0x0800673e

08005a2c <__sfputc_r>:
 8005a2c:	6893      	ldr	r3, [r2, #8]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	b410      	push	{r4}
 8005a34:	6093      	str	r3, [r2, #8]
 8005a36:	da08      	bge.n	8005a4a <__sfputc_r+0x1e>
 8005a38:	6994      	ldr	r4, [r2, #24]
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	db01      	blt.n	8005a42 <__sfputc_r+0x16>
 8005a3e:	290a      	cmp	r1, #10
 8005a40:	d103      	bne.n	8005a4a <__sfputc_r+0x1e>
 8005a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a46:	f7ff bad5 	b.w	8004ff4 <__swbuf_r>
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	1c58      	adds	r0, r3, #1
 8005a4e:	6010      	str	r0, [r2, #0]
 8005a50:	7019      	strb	r1, [r3, #0]
 8005a52:	4608      	mov	r0, r1
 8005a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <__sfputs_r>:
 8005a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	18d5      	adds	r5, r2, r3
 8005a64:	42ac      	cmp	r4, r5
 8005a66:	d101      	bne.n	8005a6c <__sfputs_r+0x12>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e007      	b.n	8005a7c <__sfputs_r+0x22>
 8005a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a70:	463a      	mov	r2, r7
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ffda 	bl	8005a2c <__sfputc_r>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d1f3      	bne.n	8005a64 <__sfputs_r+0xa>
 8005a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a80 <_vfiprintf_r>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	460d      	mov	r5, r1
 8005a86:	b09d      	sub	sp, #116	; 0x74
 8005a88:	4614      	mov	r4, r2
 8005a8a:	4698      	mov	r8, r3
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	b118      	cbz	r0, 8005a98 <_vfiprintf_r+0x18>
 8005a90:	6983      	ldr	r3, [r0, #24]
 8005a92:	b90b      	cbnz	r3, 8005a98 <_vfiprintf_r+0x18>
 8005a94:	f7ff fc88 	bl	80053a8 <__sinit>
 8005a98:	4b89      	ldr	r3, [pc, #548]	; (8005cc0 <_vfiprintf_r+0x240>)
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	d11b      	bne.n	8005ad6 <_vfiprintf_r+0x56>
 8005a9e:	6875      	ldr	r5, [r6, #4]
 8005aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aa2:	07d9      	lsls	r1, r3, #31
 8005aa4:	d405      	bmi.n	8005ab2 <_vfiprintf_r+0x32>
 8005aa6:	89ab      	ldrh	r3, [r5, #12]
 8005aa8:	059a      	lsls	r2, r3, #22
 8005aaa:	d402      	bmi.n	8005ab2 <_vfiprintf_r+0x32>
 8005aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aae:	f7ff fd19 	bl	80054e4 <__retarget_lock_acquire_recursive>
 8005ab2:	89ab      	ldrh	r3, [r5, #12]
 8005ab4:	071b      	lsls	r3, r3, #28
 8005ab6:	d501      	bpl.n	8005abc <_vfiprintf_r+0x3c>
 8005ab8:	692b      	ldr	r3, [r5, #16]
 8005aba:	b9eb      	cbnz	r3, 8005af8 <_vfiprintf_r+0x78>
 8005abc:	4629      	mov	r1, r5
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7ff faea 	bl	8005098 <__swsetup_r>
 8005ac4:	b1c0      	cbz	r0, 8005af8 <_vfiprintf_r+0x78>
 8005ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ac8:	07dc      	lsls	r4, r3, #31
 8005aca:	d50e      	bpl.n	8005aea <_vfiprintf_r+0x6a>
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	b01d      	add	sp, #116	; 0x74
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	4b7b      	ldr	r3, [pc, #492]	; (8005cc4 <_vfiprintf_r+0x244>)
 8005ad8:	429d      	cmp	r5, r3
 8005ada:	d101      	bne.n	8005ae0 <_vfiprintf_r+0x60>
 8005adc:	68b5      	ldr	r5, [r6, #8]
 8005ade:	e7df      	b.n	8005aa0 <_vfiprintf_r+0x20>
 8005ae0:	4b79      	ldr	r3, [pc, #484]	; (8005cc8 <_vfiprintf_r+0x248>)
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	bf08      	it	eq
 8005ae6:	68f5      	ldreq	r5, [r6, #12]
 8005ae8:	e7da      	b.n	8005aa0 <_vfiprintf_r+0x20>
 8005aea:	89ab      	ldrh	r3, [r5, #12]
 8005aec:	0598      	lsls	r0, r3, #22
 8005aee:	d4ed      	bmi.n	8005acc <_vfiprintf_r+0x4c>
 8005af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005af2:	f7ff fcf8 	bl	80054e6 <__retarget_lock_release_recursive>
 8005af6:	e7e9      	b.n	8005acc <_vfiprintf_r+0x4c>
 8005af8:	2300      	movs	r3, #0
 8005afa:	9309      	str	r3, [sp, #36]	; 0x24
 8005afc:	2320      	movs	r3, #32
 8005afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b06:	2330      	movs	r3, #48	; 0x30
 8005b08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ccc <_vfiprintf_r+0x24c>
 8005b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b10:	f04f 0901 	mov.w	r9, #1
 8005b14:	4623      	mov	r3, r4
 8005b16:	469a      	mov	sl, r3
 8005b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b1c:	b10a      	cbz	r2, 8005b22 <_vfiprintf_r+0xa2>
 8005b1e:	2a25      	cmp	r2, #37	; 0x25
 8005b20:	d1f9      	bne.n	8005b16 <_vfiprintf_r+0x96>
 8005b22:	ebba 0b04 	subs.w	fp, sl, r4
 8005b26:	d00b      	beq.n	8005b40 <_vfiprintf_r+0xc0>
 8005b28:	465b      	mov	r3, fp
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7ff ff93 	bl	8005a5a <__sfputs_r>
 8005b34:	3001      	adds	r0, #1
 8005b36:	f000 80aa 	beq.w	8005c8e <_vfiprintf_r+0x20e>
 8005b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b3c:	445a      	add	r2, fp
 8005b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b40:	f89a 3000 	ldrb.w	r3, [sl]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80a2 	beq.w	8005c8e <_vfiprintf_r+0x20e>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b54:	f10a 0a01 	add.w	sl, sl, #1
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	9307      	str	r3, [sp, #28]
 8005b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b60:	931a      	str	r3, [sp, #104]	; 0x68
 8005b62:	4654      	mov	r4, sl
 8005b64:	2205      	movs	r2, #5
 8005b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6a:	4858      	ldr	r0, [pc, #352]	; (8005ccc <_vfiprintf_r+0x24c>)
 8005b6c:	f7fa fb38 	bl	80001e0 <memchr>
 8005b70:	9a04      	ldr	r2, [sp, #16]
 8005b72:	b9d8      	cbnz	r0, 8005bac <_vfiprintf_r+0x12c>
 8005b74:	06d1      	lsls	r1, r2, #27
 8005b76:	bf44      	itt	mi
 8005b78:	2320      	movmi	r3, #32
 8005b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7e:	0713      	lsls	r3, r2, #28
 8005b80:	bf44      	itt	mi
 8005b82:	232b      	movmi	r3, #43	; 0x2b
 8005b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b88:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8e:	d015      	beq.n	8005bbc <_vfiprintf_r+0x13c>
 8005b90:	9a07      	ldr	r2, [sp, #28]
 8005b92:	4654      	mov	r4, sl
 8005b94:	2000      	movs	r0, #0
 8005b96:	f04f 0c0a 	mov.w	ip, #10
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba0:	3b30      	subs	r3, #48	; 0x30
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d94e      	bls.n	8005c44 <_vfiprintf_r+0x1c4>
 8005ba6:	b1b0      	cbz	r0, 8005bd6 <_vfiprintf_r+0x156>
 8005ba8:	9207      	str	r2, [sp, #28]
 8005baa:	e014      	b.n	8005bd6 <_vfiprintf_r+0x156>
 8005bac:	eba0 0308 	sub.w	r3, r0, r8
 8005bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	46a2      	mov	sl, r4
 8005bba:	e7d2      	b.n	8005b62 <_vfiprintf_r+0xe2>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	1d19      	adds	r1, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	9103      	str	r1, [sp, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfbb      	ittet	lt
 8005bc8:	425b      	neglt	r3, r3
 8005bca:	f042 0202 	orrlt.w	r2, r2, #2
 8005bce:	9307      	strge	r3, [sp, #28]
 8005bd0:	9307      	strlt	r3, [sp, #28]
 8005bd2:	bfb8      	it	lt
 8005bd4:	9204      	strlt	r2, [sp, #16]
 8005bd6:	7823      	ldrb	r3, [r4, #0]
 8005bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bda:	d10c      	bne.n	8005bf6 <_vfiprintf_r+0x176>
 8005bdc:	7863      	ldrb	r3, [r4, #1]
 8005bde:	2b2a      	cmp	r3, #42	; 0x2a
 8005be0:	d135      	bne.n	8005c4e <_vfiprintf_r+0x1ce>
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	1d1a      	adds	r2, r3, #4
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	9203      	str	r2, [sp, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bfb8      	it	lt
 8005bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bf2:	3402      	adds	r4, #2
 8005bf4:	9305      	str	r3, [sp, #20]
 8005bf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005cdc <_vfiprintf_r+0x25c>
 8005bfa:	7821      	ldrb	r1, [r4, #0]
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	4650      	mov	r0, sl
 8005c00:	f7fa faee 	bl	80001e0 <memchr>
 8005c04:	b140      	cbz	r0, 8005c18 <_vfiprintf_r+0x198>
 8005c06:	2340      	movs	r3, #64	; 0x40
 8005c08:	eba0 000a 	sub.w	r0, r0, sl
 8005c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c10:	9b04      	ldr	r3, [sp, #16]
 8005c12:	4303      	orrs	r3, r0
 8005c14:	3401      	adds	r4, #1
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1c:	482c      	ldr	r0, [pc, #176]	; (8005cd0 <_vfiprintf_r+0x250>)
 8005c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c22:	2206      	movs	r2, #6
 8005c24:	f7fa fadc 	bl	80001e0 <memchr>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d03f      	beq.n	8005cac <_vfiprintf_r+0x22c>
 8005c2c:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <_vfiprintf_r+0x254>)
 8005c2e:	bb1b      	cbnz	r3, 8005c78 <_vfiprintf_r+0x1f8>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	3307      	adds	r3, #7
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	3308      	adds	r3, #8
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3e:	443b      	add	r3, r7
 8005c40:	9309      	str	r3, [sp, #36]	; 0x24
 8005c42:	e767      	b.n	8005b14 <_vfiprintf_r+0x94>
 8005c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c48:	460c      	mov	r4, r1
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7a5      	b.n	8005b9a <_vfiprintf_r+0x11a>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	3401      	adds	r4, #1
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	4619      	mov	r1, r3
 8005c56:	f04f 0c0a 	mov.w	ip, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c60:	3a30      	subs	r2, #48	; 0x30
 8005c62:	2a09      	cmp	r2, #9
 8005c64:	d903      	bls.n	8005c6e <_vfiprintf_r+0x1ee>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0c5      	beq.n	8005bf6 <_vfiprintf_r+0x176>
 8005c6a:	9105      	str	r1, [sp, #20]
 8005c6c:	e7c3      	b.n	8005bf6 <_vfiprintf_r+0x176>
 8005c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c72:	4604      	mov	r4, r0
 8005c74:	2301      	movs	r3, #1
 8005c76:	e7f0      	b.n	8005c5a <_vfiprintf_r+0x1da>
 8005c78:	ab03      	add	r3, sp, #12
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <_vfiprintf_r+0x258>)
 8005c80:	a904      	add	r1, sp, #16
 8005c82:	4630      	mov	r0, r6
 8005c84:	f3af 8000 	nop.w
 8005c88:	4607      	mov	r7, r0
 8005c8a:	1c78      	adds	r0, r7, #1
 8005c8c:	d1d6      	bne.n	8005c3c <_vfiprintf_r+0x1bc>
 8005c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c90:	07d9      	lsls	r1, r3, #31
 8005c92:	d405      	bmi.n	8005ca0 <_vfiprintf_r+0x220>
 8005c94:	89ab      	ldrh	r3, [r5, #12]
 8005c96:	059a      	lsls	r2, r3, #22
 8005c98:	d402      	bmi.n	8005ca0 <_vfiprintf_r+0x220>
 8005c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c9c:	f7ff fc23 	bl	80054e6 <__retarget_lock_release_recursive>
 8005ca0:	89ab      	ldrh	r3, [r5, #12]
 8005ca2:	065b      	lsls	r3, r3, #25
 8005ca4:	f53f af12 	bmi.w	8005acc <_vfiprintf_r+0x4c>
 8005ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005caa:	e711      	b.n	8005ad0 <_vfiprintf_r+0x50>
 8005cac:	ab03      	add	r3, sp, #12
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <_vfiprintf_r+0x258>)
 8005cb4:	a904      	add	r1, sp, #16
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 f880 	bl	8005dbc <_printf_i>
 8005cbc:	e7e4      	b.n	8005c88 <_vfiprintf_r+0x208>
 8005cbe:	bf00      	nop
 8005cc0:	080066f8 	.word	0x080066f8
 8005cc4:	08006718 	.word	0x08006718
 8005cc8:	080066d8 	.word	0x080066d8
 8005ccc:	08006738 	.word	0x08006738
 8005cd0:	08006742 	.word	0x08006742
 8005cd4:	00000000 	.word	0x00000000
 8005cd8:	08005a5b 	.word	0x08005a5b
 8005cdc:	0800673e 	.word	0x0800673e

08005ce0 <_printf_common>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	4699      	mov	r9, r3
 8005ce8:	688a      	ldr	r2, [r1, #8]
 8005cea:	690b      	ldr	r3, [r1, #16]
 8005cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bfb8      	it	lt
 8005cf4:	4613      	movlt	r3, r2
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	b10a      	cbz	r2, 8005d06 <_printf_common+0x26>
 8005d02:	3301      	adds	r3, #1
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	0699      	lsls	r1, r3, #26
 8005d0a:	bf42      	ittt	mi
 8005d0c:	6833      	ldrmi	r3, [r6, #0]
 8005d0e:	3302      	addmi	r3, #2
 8005d10:	6033      	strmi	r3, [r6, #0]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	f015 0506 	ands.w	r5, r5, #6
 8005d18:	d106      	bne.n	8005d28 <_printf_common+0x48>
 8005d1a:	f104 0a19 	add.w	sl, r4, #25
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc26      	bgt.n	8005d76 <_printf_common+0x96>
 8005d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d2c:	1e13      	subs	r3, r2, #0
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	bf18      	it	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	0692      	lsls	r2, r2, #26
 8005d36:	d42b      	bmi.n	8005d90 <_printf_common+0xb0>
 8005d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d01e      	beq.n	8005d84 <_printf_common+0xa4>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	68e5      	ldr	r5, [r4, #12]
 8005d4a:	6832      	ldr	r2, [r6, #0]
 8005d4c:	f003 0306 	and.w	r3, r3, #6
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	bf08      	it	eq
 8005d54:	1aad      	subeq	r5, r5, r2
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	6922      	ldr	r2, [r4, #16]
 8005d5a:	bf0c      	ite	eq
 8005d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d60:	2500      	movne	r5, #0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfc4      	itt	gt
 8005d66:	1a9b      	subgt	r3, r3, r2
 8005d68:	18ed      	addgt	r5, r5, r3
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	341a      	adds	r4, #26
 8005d6e:	42b5      	cmp	r5, r6
 8005d70:	d11a      	bne.n	8005da8 <_printf_common+0xc8>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e008      	b.n	8005d88 <_printf_common+0xa8>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	47c0      	blx	r8
 8005d80:	3001      	adds	r0, #1
 8005d82:	d103      	bne.n	8005d8c <_printf_common+0xac>
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	e7c6      	b.n	8005d1e <_printf_common+0x3e>
 8005d90:	18e1      	adds	r1, r4, r3
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	2030      	movs	r0, #48	; 0x30
 8005d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d9a:	4422      	add	r2, r4
 8005d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005da4:	3302      	adds	r3, #2
 8005da6:	e7c7      	b.n	8005d38 <_printf_common+0x58>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4622      	mov	r2, r4
 8005dac:	4649      	mov	r1, r9
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0e6      	beq.n	8005d84 <_printf_common+0xa4>
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7d9      	b.n	8005d6e <_printf_common+0x8e>
	...

08005dbc <_printf_i>:
 8005dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	7e0f      	ldrb	r7, [r1, #24]
 8005dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dc4:	2f78      	cmp	r7, #120	; 0x78
 8005dc6:	4691      	mov	r9, r2
 8005dc8:	4680      	mov	r8, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	469a      	mov	sl, r3
 8005dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dd2:	d807      	bhi.n	8005de4 <_printf_i+0x28>
 8005dd4:	2f62      	cmp	r7, #98	; 0x62
 8005dd6:	d80a      	bhi.n	8005dee <_printf_i+0x32>
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	f000 80d8 	beq.w	8005f8e <_printf_i+0x1d2>
 8005dde:	2f58      	cmp	r7, #88	; 0x58
 8005de0:	f000 80a3 	beq.w	8005f2a <_printf_i+0x16e>
 8005de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dec:	e03a      	b.n	8005e64 <_printf_i+0xa8>
 8005dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005df2:	2b15      	cmp	r3, #21
 8005df4:	d8f6      	bhi.n	8005de4 <_printf_i+0x28>
 8005df6:	a101      	add	r1, pc, #4	; (adr r1, 8005dfc <_printf_i+0x40>)
 8005df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005de5 	.word	0x08005de5
 8005e08:	08005de5 	.word	0x08005de5
 8005e0c:	08005de5 	.word	0x08005de5
 8005e10:	08005de5 	.word	0x08005de5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005de5 	.word	0x08005de5
 8005e1c:	08005de5 	.word	0x08005de5
 8005e20:	08005de5 	.word	0x08005de5
 8005e24:	08005de5 	.word	0x08005de5
 8005e28:	08005f75 	.word	0x08005f75
 8005e2c:	08005e99 	.word	0x08005e99
 8005e30:	08005f57 	.word	0x08005f57
 8005e34:	08005de5 	.word	0x08005de5
 8005e38:	08005de5 	.word	0x08005de5
 8005e3c:	08005f97 	.word	0x08005f97
 8005e40:	08005de5 	.word	0x08005de5
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005de5 	.word	0x08005de5
 8005e4c:	08005de5 	.word	0x08005de5
 8005e50:	08005f5f 	.word	0x08005f5f
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0a3      	b.n	8005fb0 <_printf_i+0x1f4>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	6829      	ldr	r1, [r5, #0]
 8005e6c:	0606      	lsls	r6, r0, #24
 8005e6e:	f101 0304 	add.w	r3, r1, #4
 8005e72:	d50a      	bpl.n	8005e8a <_printf_i+0xce>
 8005e74:	680e      	ldr	r6, [r1, #0]
 8005e76:	602b      	str	r3, [r5, #0]
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	da03      	bge.n	8005e84 <_printf_i+0xc8>
 8005e7c:	232d      	movs	r3, #45	; 0x2d
 8005e7e:	4276      	negs	r6, r6
 8005e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e84:	485e      	ldr	r0, [pc, #376]	; (8006000 <_printf_i+0x244>)
 8005e86:	230a      	movs	r3, #10
 8005e88:	e019      	b.n	8005ebe <_printf_i+0x102>
 8005e8a:	680e      	ldr	r6, [r1, #0]
 8005e8c:	602b      	str	r3, [r5, #0]
 8005e8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e92:	bf18      	it	ne
 8005e94:	b236      	sxthne	r6, r6
 8005e96:	e7ef      	b.n	8005e78 <_printf_i+0xbc>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	6820      	ldr	r0, [r4, #0]
 8005e9c:	1d19      	adds	r1, r3, #4
 8005e9e:	6029      	str	r1, [r5, #0]
 8005ea0:	0601      	lsls	r1, r0, #24
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_i+0xec>
 8005ea4:	681e      	ldr	r6, [r3, #0]
 8005ea6:	e002      	b.n	8005eae <_printf_i+0xf2>
 8005ea8:	0646      	lsls	r6, r0, #25
 8005eaa:	d5fb      	bpl.n	8005ea4 <_printf_i+0xe8>
 8005eac:	881e      	ldrh	r6, [r3, #0]
 8005eae:	4854      	ldr	r0, [pc, #336]	; (8006000 <_printf_i+0x244>)
 8005eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2308      	moveq	r3, #8
 8005eb6:	230a      	movne	r3, #10
 8005eb8:	2100      	movs	r1, #0
 8005eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ebe:	6865      	ldr	r5, [r4, #4]
 8005ec0:	60a5      	str	r5, [r4, #8]
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	bfa2      	ittt	ge
 8005ec6:	6821      	ldrge	r1, [r4, #0]
 8005ec8:	f021 0104 	bicge.w	r1, r1, #4
 8005ecc:	6021      	strge	r1, [r4, #0]
 8005ece:	b90e      	cbnz	r6, 8005ed4 <_printf_i+0x118>
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	d04d      	beq.n	8005f70 <_printf_i+0x1b4>
 8005ed4:	4615      	mov	r5, r2
 8005ed6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eda:	fb03 6711 	mls	r7, r3, r1, r6
 8005ede:	5dc7      	ldrb	r7, [r0, r7]
 8005ee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ee4:	4637      	mov	r7, r6
 8005ee6:	42bb      	cmp	r3, r7
 8005ee8:	460e      	mov	r6, r1
 8005eea:	d9f4      	bls.n	8005ed6 <_printf_i+0x11a>
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10b      	bne.n	8005f08 <_printf_i+0x14c>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07de      	lsls	r6, r3, #31
 8005ef4:	d508      	bpl.n	8005f08 <_printf_i+0x14c>
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	6861      	ldr	r1, [r4, #4]
 8005efa:	4299      	cmp	r1, r3
 8005efc:	bfde      	ittt	le
 8005efe:	2330      	movle	r3, #48	; 0x30
 8005f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f08:	1b52      	subs	r2, r2, r5
 8005f0a:	6122      	str	r2, [r4, #16]
 8005f0c:	f8cd a000 	str.w	sl, [sp]
 8005f10:	464b      	mov	r3, r9
 8005f12:	aa03      	add	r2, sp, #12
 8005f14:	4621      	mov	r1, r4
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff fee2 	bl	8005ce0 <_printf_common>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d14c      	bne.n	8005fba <_printf_i+0x1fe>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	b004      	add	sp, #16
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	4835      	ldr	r0, [pc, #212]	; (8006000 <_printf_i+0x244>)
 8005f2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f30:	6829      	ldr	r1, [r5, #0]
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f38:	6029      	str	r1, [r5, #0]
 8005f3a:	061d      	lsls	r5, r3, #24
 8005f3c:	d514      	bpl.n	8005f68 <_printf_i+0x1ac>
 8005f3e:	07df      	lsls	r7, r3, #31
 8005f40:	bf44      	itt	mi
 8005f42:	f043 0320 	orrmi.w	r3, r3, #32
 8005f46:	6023      	strmi	r3, [r4, #0]
 8005f48:	b91e      	cbnz	r6, 8005f52 <_printf_i+0x196>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	f023 0320 	bic.w	r3, r3, #32
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	2310      	movs	r3, #16
 8005f54:	e7b0      	b.n	8005eb8 <_printf_i+0xfc>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f043 0320 	orr.w	r3, r3, #32
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	2378      	movs	r3, #120	; 0x78
 8005f60:	4828      	ldr	r0, [pc, #160]	; (8006004 <_printf_i+0x248>)
 8005f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f66:	e7e3      	b.n	8005f30 <_printf_i+0x174>
 8005f68:	0659      	lsls	r1, r3, #25
 8005f6a:	bf48      	it	mi
 8005f6c:	b2b6      	uxthmi	r6, r6
 8005f6e:	e7e6      	b.n	8005f3e <_printf_i+0x182>
 8005f70:	4615      	mov	r5, r2
 8005f72:	e7bb      	b.n	8005eec <_printf_i+0x130>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	6826      	ldr	r6, [r4, #0]
 8005f78:	6961      	ldr	r1, [r4, #20]
 8005f7a:	1d18      	adds	r0, r3, #4
 8005f7c:	6028      	str	r0, [r5, #0]
 8005f7e:	0635      	lsls	r5, r6, #24
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	d501      	bpl.n	8005f88 <_printf_i+0x1cc>
 8005f84:	6019      	str	r1, [r3, #0]
 8005f86:	e002      	b.n	8005f8e <_printf_i+0x1d2>
 8005f88:	0670      	lsls	r0, r6, #25
 8005f8a:	d5fb      	bpl.n	8005f84 <_printf_i+0x1c8>
 8005f8c:	8019      	strh	r1, [r3, #0]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	4615      	mov	r5, r2
 8005f94:	e7ba      	b.n	8005f0c <_printf_i+0x150>
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	602a      	str	r2, [r5, #0]
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	6862      	ldr	r2, [r4, #4]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f7fa f91c 	bl	80001e0 <memchr>
 8005fa8:	b108      	cbz	r0, 8005fae <_printf_i+0x1f2>
 8005faa:	1b40      	subs	r0, r0, r5
 8005fac:	6060      	str	r0, [r4, #4]
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb8:	e7a8      	b.n	8005f0c <_printf_i+0x150>
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	47d0      	blx	sl
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d0ab      	beq.n	8005f20 <_printf_i+0x164>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	079b      	lsls	r3, r3, #30
 8005fcc:	d413      	bmi.n	8005ff6 <_printf_i+0x23a>
 8005fce:	68e0      	ldr	r0, [r4, #12]
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	4298      	cmp	r0, r3
 8005fd4:	bfb8      	it	lt
 8005fd6:	4618      	movlt	r0, r3
 8005fd8:	e7a4      	b.n	8005f24 <_printf_i+0x168>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	47d0      	blx	sl
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d09b      	beq.n	8005f20 <_printf_i+0x164>
 8005fe8:	3501      	adds	r5, #1
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	9903      	ldr	r1, [sp, #12]
 8005fee:	1a5b      	subs	r3, r3, r1
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	dcf2      	bgt.n	8005fda <_printf_i+0x21e>
 8005ff4:	e7eb      	b.n	8005fce <_printf_i+0x212>
 8005ff6:	2500      	movs	r5, #0
 8005ff8:	f104 0619 	add.w	r6, r4, #25
 8005ffc:	e7f5      	b.n	8005fea <_printf_i+0x22e>
 8005ffe:	bf00      	nop
 8006000:	08006749 	.word	0x08006749
 8006004:	0800675a 	.word	0x0800675a

08006008 <_sbrk_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	; (8006024 <_sbrk_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fb fd18 	bl	8001a48 <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_sbrk_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_sbrk_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000400 	.word	0x20000400

08006028 <__sread>:
 8006028:	b510      	push	{r4, lr}
 800602a:	460c      	mov	r4, r1
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	f000 f8f8 	bl	8006224 <_read_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	bfab      	itete	ge
 8006038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800603a:	89a3      	ldrhlt	r3, [r4, #12]
 800603c:	181b      	addge	r3, r3, r0
 800603e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006042:	bfac      	ite	ge
 8006044:	6563      	strge	r3, [r4, #84]	; 0x54
 8006046:	81a3      	strhlt	r3, [r4, #12]
 8006048:	bd10      	pop	{r4, pc}

0800604a <__swrite>:
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	461f      	mov	r7, r3
 8006050:	898b      	ldrh	r3, [r1, #12]
 8006052:	05db      	lsls	r3, r3, #23
 8006054:	4605      	mov	r5, r0
 8006056:	460c      	mov	r4, r1
 8006058:	4616      	mov	r6, r2
 800605a:	d505      	bpl.n	8006068 <__swrite+0x1e>
 800605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006060:	2302      	movs	r3, #2
 8006062:	2200      	movs	r2, #0
 8006064:	f000 f868 	bl	8006138 <_lseek_r>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	4632      	mov	r2, r6
 8006076:	463b      	mov	r3, r7
 8006078:	4628      	mov	r0, r5
 800607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	f000 b817 	b.w	80060b0 <_write_r>

08006082 <__sseek>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 f855 	bl	8006138 <_lseek_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	bf15      	itete	ne
 8006094:	6560      	strne	r0, [r4, #84]	; 0x54
 8006096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800609a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800609e:	81a3      	strheq	r3, [r4, #12]
 80060a0:	bf18      	it	ne
 80060a2:	81a3      	strhne	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__sclose>:
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 b813 	b.w	80060d4 <_close_r>
	...

080060b0 <_write_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d07      	ldr	r5, [pc, #28]	; (80060d0 <_write_r+0x20>)
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	602a      	str	r2, [r5, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7fb f831 	bl	8001126 <_write>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_write_r+0x1e>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_write_r+0x1e>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	20000400 	.word	0x20000400

080060d4 <_close_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d06      	ldr	r5, [pc, #24]	; (80060f0 <_close_r+0x1c>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	602b      	str	r3, [r5, #0]
 80060e0:	f7fb fc7d 	bl	80019de <_close>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_close_r+0x1a>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_close_r+0x1a>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20000400 	.word	0x20000400

080060f4 <_fstat_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d07      	ldr	r5, [pc, #28]	; (8006114 <_fstat_r+0x20>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4604      	mov	r4, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	f7fb fc78 	bl	80019f6 <_fstat>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d102      	bne.n	8006110 <_fstat_r+0x1c>
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	b103      	cbz	r3, 8006110 <_fstat_r+0x1c>
 800610e:	6023      	str	r3, [r4, #0]
 8006110:	bd38      	pop	{r3, r4, r5, pc}
 8006112:	bf00      	nop
 8006114:	20000400 	.word	0x20000400

08006118 <_isatty_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d06      	ldr	r5, [pc, #24]	; (8006134 <_isatty_r+0x1c>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fb fc77 	bl	8001a16 <_isatty>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_isatty_r+0x1a>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_isatty_r+0x1a>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20000400 	.word	0x20000400

08006138 <_lseek_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	; (8006158 <_lseek_r+0x20>)
 800613c:	4604      	mov	r4, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fb fc70 	bl	8001a2c <_lseek>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_lseek_r+0x1e>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_lseek_r+0x1e>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	20000400 	.word	0x20000400

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006172:	4291      	cmp	r1, r2
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <memmove>:
 8006178:	4288      	cmp	r0, r1
 800617a:	b510      	push	{r4, lr}
 800617c:	eb01 0402 	add.w	r4, r1, r2
 8006180:	d902      	bls.n	8006188 <memmove+0x10>
 8006182:	4284      	cmp	r4, r0
 8006184:	4623      	mov	r3, r4
 8006186:	d807      	bhi.n	8006198 <memmove+0x20>
 8006188:	1e43      	subs	r3, r0, #1
 800618a:	42a1      	cmp	r1, r4
 800618c:	d008      	beq.n	80061a0 <memmove+0x28>
 800618e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006196:	e7f8      	b.n	800618a <memmove+0x12>
 8006198:	4402      	add	r2, r0
 800619a:	4601      	mov	r1, r0
 800619c:	428a      	cmp	r2, r1
 800619e:	d100      	bne.n	80061a2 <memmove+0x2a>
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061aa:	e7f7      	b.n	800619c <memmove+0x24>

080061ac <__malloc_lock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	; (80061b4 <__malloc_lock+0x8>)
 80061ae:	f7ff b999 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 80061b2:	bf00      	nop
 80061b4:	200003f4 	.word	0x200003f4

080061b8 <__malloc_unlock>:
 80061b8:	4801      	ldr	r0, [pc, #4]	; (80061c0 <__malloc_unlock+0x8>)
 80061ba:	f7ff b994 	b.w	80054e6 <__retarget_lock_release_recursive>
 80061be:	bf00      	nop
 80061c0:	200003f4 	.word	0x200003f4

080061c4 <_realloc_r>:
 80061c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c8:	4680      	mov	r8, r0
 80061ca:	4614      	mov	r4, r2
 80061cc:	460e      	mov	r6, r1
 80061ce:	b921      	cbnz	r1, 80061da <_realloc_r+0x16>
 80061d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d4:	4611      	mov	r1, r2
 80061d6:	f7ff ba59 	b.w	800568c <_malloc_r>
 80061da:	b92a      	cbnz	r2, 80061e8 <_realloc_r+0x24>
 80061dc:	f7ff f9ea 	bl	80055b4 <_free_r>
 80061e0:	4625      	mov	r5, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	f000 f82e 	bl	8006248 <_malloc_usable_size_r>
 80061ec:	4284      	cmp	r4, r0
 80061ee:	4607      	mov	r7, r0
 80061f0:	d802      	bhi.n	80061f8 <_realloc_r+0x34>
 80061f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061f6:	d812      	bhi.n	800621e <_realloc_r+0x5a>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4640      	mov	r0, r8
 80061fc:	f7ff fa46 	bl	800568c <_malloc_r>
 8006200:	4605      	mov	r5, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d0ed      	beq.n	80061e2 <_realloc_r+0x1e>
 8006206:	42bc      	cmp	r4, r7
 8006208:	4622      	mov	r2, r4
 800620a:	4631      	mov	r1, r6
 800620c:	bf28      	it	cs
 800620e:	463a      	movcs	r2, r7
 8006210:	f7ff ffa4 	bl	800615c <memcpy>
 8006214:	4631      	mov	r1, r6
 8006216:	4640      	mov	r0, r8
 8006218:	f7ff f9cc 	bl	80055b4 <_free_r>
 800621c:	e7e1      	b.n	80061e2 <_realloc_r+0x1e>
 800621e:	4635      	mov	r5, r6
 8006220:	e7df      	b.n	80061e2 <_realloc_r+0x1e>
	...

08006224 <_read_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	; (8006244 <_read_r+0x20>)
 8006228:	4604      	mov	r4, r0
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f7fb fbb6 	bl	80019a4 <_read>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_read_r+0x1e>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_read_r+0x1e>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000400 	.word	0x20000400

08006248 <_malloc_usable_size_r>:
 8006248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624c:	1f18      	subs	r0, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfbc      	itt	lt
 8006252:	580b      	ldrlt	r3, [r1, r0]
 8006254:	18c0      	addlt	r0, r0, r3
 8006256:	4770      	bx	lr

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
