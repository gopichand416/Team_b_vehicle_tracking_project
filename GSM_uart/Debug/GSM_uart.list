
GSM_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006190  08006190  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000070  08006208  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006208  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d641  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002159  00000000  00000000  0002d6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00030350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e05  00000000  00000000  00030d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da08  00000000  00000000  00057b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9391  00000000  00000000  00065595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000341c  00000000  00000000  0014e978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cf8 	.word	0x08005cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005cf8 	.word	0x08005cf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <gsm_connect_to_server>:
#include"main.h"


char *str;
int gsm_connect_to_server()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t state=0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t substate=0;
 800058e:	2300      	movs	r3, #0
 8000590:	71bb      	strb	r3, [r7, #6]
	while(1)
	{
	switch(state)
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b07      	cmp	r3, #7
 8000596:	f200 8228 	bhi.w	80009ea <gsm_connect_to_server+0x466>
 800059a:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <gsm_connect_to_server+0x1c>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	0800063b 	.word	0x0800063b
 80005a8:	080006a7 	.word	0x080006a7
 80005ac:	0800072d 	.word	0x0800072d
 80005b0:	080007b5 	.word	0x080007b5
 80005b4:	08000849 	.word	0x08000849
 80005b8:	0800093b 	.word	0x0800093b
 80005bc:	08000993 	.word	0x08000993
			  	  {
			  	  case 0:
			  	  {
			  		  switch(substate)
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f040 8216 	bne.w	80009f4 <gsm_connect_to_server+0x470>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 80005c8:	48a2      	ldr	r0, [pc, #648]	; (8000854 <gsm_connect_to_server+0x2d0>)
 80005ca:	f000 fc7f 	bl	8000ecc <send_to_gsm>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4aa1      	ldr	r2, [pc, #644]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80005d2:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("ATE0 \n");
 80005d4:	48a1      	ldr	r0, [pc, #644]	; (800085c <gsm_connect_to_server+0x2d8>)
 80005d6:	f004 fbe7 	bl	8004da8 <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 80005da:	4b9f      	ldr	r3, [pc, #636]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	49a0      	ldr	r1, [pc, #640]	; (8000860 <gsm_connect_to_server+0x2dc>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fbfd 	bl	8004de0 <strstr>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00d      	beq.n	8000608 <gsm_connect_to_server+0x84>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	4619      	mov	r1, r3
 80005f2:	489c      	ldr	r0, [pc, #624]	; (8000864 <gsm_connect_to_server+0x2e0>)
 80005f4:	f004 fb52 	bl	8004c9c <iprintf>
			  				printf("ATE0 OK \n");
 80005f8:	489b      	ldr	r0, [pc, #620]	; (8000868 <gsm_connect_to_server+0x2e4>)
 80005fa:	f004 fbd5 	bl	8004da8 <puts>
			  				  state=1;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
			  				substate=0;
 8000602:	2300      	movs	r3, #0
 8000604:	71bb      	strb	r3, [r7, #6]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8000606:	e016      	b.n	8000636 <gsm_connect_to_server+0xb2>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 8000608:	4b93      	ldr	r3, [pc, #588]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2206      	movs	r2, #6
 800060e:	4997      	ldr	r1, [pc, #604]	; (800086c <gsm_connect_to_server+0x2e8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fbd1 	bl	8004db8 <strncmp>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00c      	beq.n	8000636 <gsm_connect_to_server+0xb2>
			  				printf("state = %d substate = %d \n",state,substate);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	79ba      	ldrb	r2, [r7, #6]
 8000620:	4619      	mov	r1, r3
 8000622:	4890      	ldr	r0, [pc, #576]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000624:	f004 fb3a 	bl	8004c9c <iprintf>
			  				printf("ATE0 ERROR \n");
 8000628:	4891      	ldr	r0, [pc, #580]	; (8000870 <gsm_connect_to_server+0x2ec>)
 800062a:	f004 fbbd 	bl	8004da8 <puts>
			  				  state=0;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]
			  			  break;
 8000636:	bf00      	nop
			  		  }
			  		  break;
 8000638:	e1dc      	b.n	80009f4 <gsm_connect_to_server+0x470>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d132      	bne.n	80006a6 <gsm_connect_to_server+0x122>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 8000640:	488c      	ldr	r0, [pc, #560]	; (8000874 <gsm_connect_to_server+0x2f0>)
 8000642:	f000 fc43 	bl	8000ecc <send_to_gsm>
 8000646:	4603      	mov	r3, r0
 8000648:	4a83      	ldr	r2, [pc, #524]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800064a:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 800064c:	488a      	ldr	r0, [pc, #552]	; (8000878 <gsm_connect_to_server+0x2f4>)
 800064e:	f004 fbab 	bl	8004da8 <puts>
			  			  HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f001 fa1b 	bl	8001a90 <HAL_Delay>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 800065a:	4b7f      	ldr	r3, [pc, #508]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2206      	movs	r2, #6
 8000660:	497f      	ldr	r1, [pc, #508]	; (8000860 <gsm_connect_to_server+0x2dc>)
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fba8 	bl	8004db8 <strncmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10d      	bne.n	800068a <gsm_connect_to_server+0x106>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	4619      	mov	r1, r3
 8000674:	487b      	ldr	r0, [pc, #492]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000676:	f004 fb11 	bl	8004c9c <iprintf>
			  				printf("CMEE=2 OK \n");
 800067a:	4880      	ldr	r0, [pc, #512]	; (800087c <gsm_connect_to_server+0x2f8>)
 800067c:	f004 fb94 	bl	8004da8 <puts>
			  				  state=2;
 8000680:	2302      	movs	r3, #2
 8000682:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 8000684:	2300      	movs	r3, #0
 8000686:	71bb      	strb	r3, [r7, #6]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8000688:	e00c      	b.n	80006a4 <gsm_connect_to_server+0x120>
			  				printf("state = %d substate = %d \n",state,substate);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	4619      	mov	r1, r3
 8000690:	4874      	ldr	r0, [pc, #464]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000692:	f004 fb03 	bl	8004c9c <iprintf>
			  				printf("CMEE=2 OK \n");
 8000696:	4879      	ldr	r0, [pc, #484]	; (800087c <gsm_connect_to_server+0x2f8>)
 8000698:	f004 fb86 	bl	8004da8 <puts>
			  				  state=0;
 800069c:	2300      	movs	r3, #0
 800069e:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71bb      	strb	r3, [r7, #6]
			  			  break;
 80006a4:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13f      	bne.n	800072c <gsm_connect_to_server+0x1a8>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 80006ac:	4874      	ldr	r0, [pc, #464]	; (8000880 <gsm_connect_to_server+0x2fc>)
 80006ae:	f000 fc0d 	bl	8000ecc <send_to_gsm>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a68      	ldr	r2, [pc, #416]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80006b6:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("CPIN \n");
 80006b8:	4872      	ldr	r0, [pc, #456]	; (8000884 <gsm_connect_to_server+0x300>)
 80006ba:	f004 fb75 	bl	8004da8 <puts>
			  			  if((strstr(str,"READY")!=NULL))
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4971      	ldr	r1, [pc, #452]	; (8000888 <gsm_connect_to_server+0x304>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fb8b 	bl	8004de0 <strstr>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00d      	beq.n	80006ec <gsm_connect_to_server+0x168>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4863      	ldr	r0, [pc, #396]	; (8000864 <gsm_connect_to_server+0x2e0>)
 80006d8:	f004 fae0 	bl	8004c9c <iprintf>
			  				printf("CPIN READY \n");
 80006dc:	486b      	ldr	r0, [pc, #428]	; (800088c <gsm_connect_to_server+0x308>)
 80006de:	f004 fb63 	bl	8004da8 <puts>
			  			      state=3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	71fb      	strb	r3, [r7, #7]
			  			      substate=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71bb      	strb	r3, [r7, #6]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=2;
			 	  			substate=0;
			  			  }
			  			  break;
 80006ea:	e01e      	b.n	800072a <gsm_connect_to_server+0x1a6>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 80006ec:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2206      	movs	r2, #6
 80006f2:	495e      	ldr	r1, [pc, #376]	; (800086c <gsm_connect_to_server+0x2e8>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fb5f 	bl	8004db8 <strncmp>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10a      	bne.n	8000716 <gsm_connect_to_server+0x192>
			  				printf("state = %d substate = %d \n",state,substate);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	4619      	mov	r1, r3
 8000706:	4857      	ldr	r0, [pc, #348]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000708:	f004 fac8 	bl	8004c9c <iprintf>
			  				state=2;
 800070c:	2302      	movs	r3, #2
 800070e:	71fb      	strb	r3, [r7, #7]
			  				substate=0;
 8000710:	2300      	movs	r3, #0
 8000712:	71bb      	strb	r3, [r7, #6]
			  			  break;
 8000714:	e009      	b.n	800072a <gsm_connect_to_server+0x1a6>
			  				printf("state = %d substate = %d \n",state,substate);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	79ba      	ldrb	r2, [r7, #6]
 800071a:	4619      	mov	r1, r3
 800071c:	4851      	ldr	r0, [pc, #324]	; (8000864 <gsm_connect_to_server+0x2e0>)
 800071e:	f004 fabd 	bl	8004c9c <iprintf>
			  	  			state=2;
 8000722:	2302      	movs	r3, #2
 8000724:	71fb      	strb	r3, [r7, #7]
			 	  			substate=0;
 8000726:	2300      	movs	r3, #0
 8000728:	71bb      	strb	r3, [r7, #6]
			  			  break;
 800072a:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 8162 	bne.w	80009f8 <gsm_connect_to_server+0x474>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 8000734:	4856      	ldr	r0, [pc, #344]	; (8000890 <gsm_connect_to_server+0x30c>)
 8000736:	f000 fbc9 	bl	8000ecc <send_to_gsm>
 800073a:	4603      	mov	r3, r0
 800073c:	4a46      	ldr	r2, [pc, #280]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800073e:	6013      	str	r3, [r2, #0]
			  				  //HAL_Delay(1000);
			  				  printf("CAQ \n");
 8000740:	4854      	ldr	r0, [pc, #336]	; (8000894 <gsm_connect_to_server+0x310>)
 8000742:	f004 fb31 	bl	8004da8 <puts>
			  				  int e=check_signal(str);
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <gsm_connect_to_server+0x2d4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f9c6 	bl	8000adc <check_signal>
 8000750:	6038      	str	r0, [r7, #0]
			  				  if((strstr(str,"OK")!=NULL))
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <gsm_connect_to_server+0x2d4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <gsm_connect_to_server+0x314>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fb41 	bl	8004de0 <strstr>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d01b      	beq.n	800079c <gsm_connect_to_server+0x218>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4619      	mov	r1, r3
 800076a:	483e      	ldr	r0, [pc, #248]	; (8000864 <gsm_connect_to_server+0x2e0>)
 800076c:	f004 fa96 	bl	8004c9c <iprintf>
			  					  printf("CAQ OK\n");
 8000770:	484a      	ldr	r0, [pc, #296]	; (800089c <gsm_connect_to_server+0x318>)
 8000772:	f004 fb19 	bl	8004da8 <puts>
			  					  if(e==0)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d107      	bne.n	800078c <gsm_connect_to_server+0x208>
			  					  {
			  						  printf("signal OK\n");
 800077c:	4848      	ldr	r0, [pc, #288]	; (80008a0 <gsm_connect_to_server+0x31c>)
 800077e:	f004 fb13 	bl	8004da8 <puts>
			  						  state=4;
 8000782:	2304      	movs	r3, #4
 8000784:	71fb      	strb	r3, [r7, #7]
			  						  substate=0;
 8000786:	2300      	movs	r3, #0
 8000788:	71bb      	strb	r3, [r7, #6]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=3;
			  					  substate=4;
			  				  }
			  				  break;
 800078a:	e011      	b.n	80007b0 <gsm_connect_to_server+0x22c>
			  						  printf("signal NOT OK\n");
 800078c:	4845      	ldr	r0, [pc, #276]	; (80008a4 <gsm_connect_to_server+0x320>)
 800078e:	f004 fb0b 	bl	8004da8 <puts>
			  						  state=3;
 8000792:	2303      	movs	r3, #3
 8000794:	71fb      	strb	r3, [r7, #7]
			  						  substate=0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
			  				  break;
 800079a:	e009      	b.n	80007b0 <gsm_connect_to_server+0x22c>
			  					  printf("state = %d substate = %d \n",state,substate);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	79ba      	ldrb	r2, [r7, #6]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <gsm_connect_to_server+0x2e0>)
 80007a4:	f004 fa7a 	bl	8004c9c <iprintf>
			  					  state=3;
 80007a8:	2303      	movs	r3, #3
 80007aa:	71fb      	strb	r3, [r7, #7]
			  					  substate=4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	71bb      	strb	r3, [r7, #6]
			  				  break;
 80007b0:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 80007b2:	e121      	b.n	80009f8 <gsm_connect_to_server+0x474>
				  	case 4:
				  	{
				  		switch(substate)
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <gsm_connect_to_server+0x23c>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d02f      	beq.n	800081e <gsm_connect_to_server+0x29a>
				  				 state=4;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 80007be:	e042      	b.n	8000846 <gsm_connect_to_server+0x2c2>
				  			  str =send_to_gsm("AT+CREG?\r");
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <gsm_connect_to_server+0x324>)
 80007c2:	f000 fb83 	bl	8000ecc <send_to_gsm>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a23      	ldr	r2, [pc, #140]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007ca:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <gsm_connect_to_server+0x328>)
 80007ce:	f004 faeb 	bl	8004da8 <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4936      	ldr	r1, [pc, #216]	; (80008b0 <gsm_connect_to_server+0x32c>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fb01 	bl	8004de0 <strstr>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d111      	bne.n	8000808 <gsm_connect_to_server+0x284>
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4932      	ldr	r1, [pc, #200]	; (80008b4 <gsm_connect_to_server+0x330>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 faf8 	bl	8004de0 <strstr>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d108      	bne.n	8000808 <gsm_connect_to_server+0x284>
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	492f      	ldr	r1, [pc, #188]	; (80008b8 <gsm_connect_to_server+0x334>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 faef 	bl	8004de0 <strstr>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <gsm_connect_to_server+0x294>
				  				  state=5;
 8000808:	2305      	movs	r3, #5
 800080a:	71fb      	strb	r3, [r7, #7]
				  				  substate=0;
 800080c:	2300      	movs	r3, #0
 800080e:	71bb      	strb	r3, [r7, #6]
				  				  printf("match found\n");
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <gsm_connect_to_server+0x338>)
 8000812:	f004 fac9 	bl	8004da8 <puts>
				  			  break;
 8000816:	e016      	b.n	8000846 <gsm_connect_to_server+0x2c2>
				  				  substate=1;
 8000818:	2301      	movs	r3, #1
 800081a:	71bb      	strb	r3, [r7, #6]
				  			  break;
 800081c:	e013      	b.n	8000846 <gsm_connect_to_server+0x2c2>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <gsm_connect_to_server+0x2d4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2206      	movs	r2, #6
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <gsm_connect_to_server+0x2e8>)
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fac6 	bl	8004db8 <strncmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d104      	bne.n	800083c <gsm_connect_to_server+0x2b8>
				  				 state=4;
 8000832:	2304      	movs	r3, #4
 8000834:	71fb      	strb	r3, [r7, #7]
				  				 substate=0;
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]
				  			 break;
 800083a:	e003      	b.n	8000844 <gsm_connect_to_server+0x2c0>
				  				 state=4;
 800083c:	2304      	movs	r3, #4
 800083e:	71fb      	strb	r3, [r7, #7]
				  				 substate=0;
 8000840:	2300      	movs	r3, #0
 8000842:	71bb      	strb	r3, [r7, #6]
				  			 break;
 8000844:	bf00      	nop
				  		}
				  		break;
 8000846:	e0dc      	b.n	8000a02 <gsm_connect_to_server+0x47e>
				  	}

				  	case 5:
				  		switch(substate)
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d038      	beq.n	80008c0 <gsm_connect_to_server+0x33c>
 800084e:	2b01      	cmp	r3, #1
 8000850:	d059      	beq.n	8000906 <gsm_connect_to_server+0x382>
				  				state=5;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 8000852:	e071      	b.n	8000938 <gsm_connect_to_server+0x3b4>
 8000854:	08005d10 	.word	0x08005d10
 8000858:	2000008c 	.word	0x2000008c
 800085c:	08005d18 	.word	0x08005d18
 8000860:	08005d20 	.word	0x08005d20
 8000864:	08005d28 	.word	0x08005d28
 8000868:	08005d44 	.word	0x08005d44
 800086c:	08005d50 	.word	0x08005d50
 8000870:	08005d5c 	.word	0x08005d5c
 8000874:	08005d68 	.word	0x08005d68
 8000878:	08005d74 	.word	0x08005d74
 800087c:	08005d7c 	.word	0x08005d7c
 8000880:	08005d88 	.word	0x08005d88
 8000884:	08005d94 	.word	0x08005d94
 8000888:	08005d9c 	.word	0x08005d9c
 800088c:	08005da4 	.word	0x08005da4
 8000890:	08005db0 	.word	0x08005db0
 8000894:	08005db8 	.word	0x08005db8
 8000898:	08005dc0 	.word	0x08005dc0
 800089c:	08005dc4 	.word	0x08005dc4
 80008a0:	08005dcc 	.word	0x08005dcc
 80008a4:	08005dd8 	.word	0x08005dd8
 80008a8:	08005de8 	.word	0x08005de8
 80008ac:	08005df4 	.word	0x08005df4
 80008b0:	08005dfc 	.word	0x08005dfc
 80008b4:	08005e00 	.word	0x08005e00
 80008b8:	08005e04 	.word	0x08005e04
 80008bc:	08005e08 	.word	0x08005e08
				  			str = send_to_gsm("AT+CGREG?\r");
 80008c0:	4852      	ldr	r0, [pc, #328]	; (8000a0c <gsm_connect_to_server+0x488>)
 80008c2:	f000 fb03 	bl	8000ecc <send_to_gsm>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80008ca:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 80008cc:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4950      	ldr	r1, [pc, #320]	; (8000a14 <gsm_connect_to_server+0x490>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fa84 	bl	8004de0 <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <gsm_connect_to_server+0x36c>
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	494d      	ldr	r1, [pc, #308]	; (8000a18 <gsm_connect_to_server+0x494>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fa7b 	bl	8004de0 <strstr>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <gsm_connect_to_server+0x37c>
				  				state=6;
 80008f0:	2306      	movs	r3, #6
 80008f2:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	71bb      	strb	r3, [r7, #6]
				  				printf("match found\n");
 80008f8:	4848      	ldr	r0, [pc, #288]	; (8000a1c <gsm_connect_to_server+0x498>)
 80008fa:	f004 fa55 	bl	8004da8 <puts>
				  			break;
 80008fe:	e01b      	b.n	8000938 <gsm_connect_to_server+0x3b4>
				  				substate=1;
 8000900:	2301      	movs	r3, #1
 8000902:	71bb      	strb	r3, [r7, #6]
				  			break;
 8000904:	e018      	b.n	8000938 <gsm_connect_to_server+0x3b4>
				  			str = send_to_gsm("AT+CGREG=1\r");
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <gsm_connect_to_server+0x49c>)
 8000908:	f000 fae0 	bl	8000ecc <send_to_gsm>
 800090c:	4603      	mov	r3, r0
 800090e:	4a40      	ldr	r2, [pc, #256]	; (8000a10 <gsm_connect_to_server+0x48c>)
 8000910:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <gsm_connect_to_server+0x48c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4943      	ldr	r1, [pc, #268]	; (8000a24 <gsm_connect_to_server+0x4a0>)
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fa61 	bl	8004de0 <strstr>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <gsm_connect_to_server+0x3aa>
				  				state=5;
 8000924:	2305      	movs	r3, #5
 8000926:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 8000928:	2300      	movs	r3, #0
 800092a:	71bb      	strb	r3, [r7, #6]
				  			break;
 800092c:	e003      	b.n	8000936 <gsm_connect_to_server+0x3b2>
				  				state=5;
 800092e:	2305      	movs	r3, #5
 8000930:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 8000932:	2300      	movs	r3, #0
 8000934:	71bb      	strb	r3, [r7, #6]
				  			break;
 8000936:	bf00      	nop
				  		}
				  		break;
 8000938:	e063      	b.n	8000a02 <gsm_connect_to_server+0x47e>

				  	case 6:
				  		{
				  			switch(substate)
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d15d      	bne.n	80009fc <gsm_connect_to_server+0x478>
				  			{
				  			case 0:
				  				str = send_to_gsm("AT+CGDCONT?\r");
 8000940:	4839      	ldr	r0, [pc, #228]	; (8000a28 <gsm_connect_to_server+0x4a4>)
 8000942:	f000 fac3 	bl	8000ecc <send_to_gsm>
 8000946:	4603      	mov	r3, r0
 8000948:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <gsm_connect_to_server+0x48c>)
 800094a:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT?\n");
 800094c:	4837      	ldr	r0, [pc, #220]	; (8000a2c <gsm_connect_to_server+0x4a8>)
 800094e:	f004 fa2b 	bl	8004da8 <puts>
				  				if((strstr(str,"OK")!=NULL))
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <gsm_connect_to_server+0x48c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4933      	ldr	r1, [pc, #204]	; (8000a24 <gsm_connect_to_server+0x4a0>)
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fa41 	bl	8004de0 <strstr>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00a      	beq.n	800097a <gsm_connect_to_server+0x3f6>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	79ba      	ldrb	r2, [r7, #6]
 8000968:	4619      	mov	r1, r3
 800096a:	4831      	ldr	r0, [pc, #196]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 800096c:	f004 f996 	bl	8004c9c <iprintf>
				  					state=7;
 8000970:	2307      	movs	r3, #7
 8000972:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000974:	2300      	movs	r3, #0
 8000976:	71bb      	strb	r3, [r7, #6]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  				break;
 8000978:	e009      	b.n	800098e <gsm_connect_to_server+0x40a>
				  					printf("state = %d substate = %d \n",state,substate);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	79ba      	ldrb	r2, [r7, #6]
 800097e:	4619      	mov	r1, r3
 8000980:	482b      	ldr	r0, [pc, #172]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 8000982:	f004 f98b 	bl	8004c9c <iprintf>
				  					state=6;
 8000986:	2306      	movs	r3, #6
 8000988:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 800098a:	2300      	movs	r3, #0
 800098c:	71bb      	strb	r3, [r7, #6]
				  				break;
 800098e:	bf00      	nop
				  			}
				  			break;
 8000990:	e034      	b.n	80009fc <gsm_connect_to_server+0x478>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d133      	bne.n	8000a00 <gsm_connect_to_server+0x47c>
				  			{
				  			case 0:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8000998:	4826      	ldr	r0, [pc, #152]	; (8000a34 <gsm_connect_to_server+0x4b0>)
 800099a:	f000 fa97 	bl	8000ecc <send_to_gsm>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80009a2:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1\n");
 80009a4:	4824      	ldr	r0, [pc, #144]	; (8000a38 <gsm_connect_to_server+0x4b4>)
 80009a6:	f004 f9ff 	bl	8004da8 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2206      	movs	r2, #6
 80009b0:	4922      	ldr	r1, [pc, #136]	; (8000a3c <gsm_connect_to_server+0x4b8>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fa00 	bl	8004db8 <strncmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10a      	bne.n	80009d4 <gsm_connect_to_server+0x450>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	4619      	mov	r1, r3
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 80009c6:	f004 f969 	bl	8004c9c <iprintf>
				  					state=8;
 80009ca:	2308      	movs	r3, #8
 80009cc:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71bb      	strb	r3, [r7, #6]
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  			}
				  			break;
 80009d2:	e015      	b.n	8000a00 <gsm_connect_to_server+0x47c>
				  					printf("state = %d substate = %d \n",state,substate);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	4619      	mov	r1, r3
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 80009dc:	f004 f95e 	bl	8004c9c <iprintf>
				  					state=6;
 80009e0:	2306      	movs	r3, #6
 80009e2:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	71bb      	strb	r3, [r7, #6]
				  			break;
 80009e8:	e00a      	b.n	8000a00 <gsm_connect_to_server+0x47c>
				  		}


				  		default:
				  			printf("completed work \n");
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <gsm_connect_to_server+0x4bc>)
 80009ec:	f004 f9dc 	bl	8004da8 <puts>
				  			return HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e007      	b.n	8000a04 <gsm_connect_to_server+0x480>
			  		  break;
 80009f4:	bf00      	nop
 80009f6:	e5cc      	b.n	8000592 <gsm_connect_to_server+0xe>
			  			break;
 80009f8:	bf00      	nop
 80009fa:	e5ca      	b.n	8000592 <gsm_connect_to_server+0xe>
				  			break;
 80009fc:	bf00      	nop
 80009fe:	e5c8      	b.n	8000592 <gsm_connect_to_server+0xe>
				  			break;
 8000a00:	bf00      	nop
	switch(state)
 8000a02:	e5c6      	b.n	8000592 <gsm_connect_to_server+0xe>
			  	  }
	}
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08005e14 	.word	0x08005e14
 8000a10:	2000008c 	.word	0x2000008c
 8000a14:	08005dfc 	.word	0x08005dfc
 8000a18:	08005e20 	.word	0x08005e20
 8000a1c:	08005e08 	.word	0x08005e08
 8000a20:	08005e24 	.word	0x08005e24
 8000a24:	08005dc0 	.word	0x08005dc0
 8000a28:	08005e30 	.word	0x08005e30
 8000a2c:	08005e40 	.word	0x08005e40
 8000a30:	08005d28 	.word	0x08005d28
 8000a34:	08005e4c 	.word	0x08005e4c
 8000a38:	08005e68 	.word	0x08005e68
 8000a3c:	08005d20 	.word	0x08005d20
 8000a40:	08005e74 	.word	0x08005e74

08000a44 <check_server_connection>:
int check_server_connection()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	char *str =send_to_gsm("AT+CIPOPEN?\r");
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <check_server_connection+0x38>)
 8000a4c:	f000 fa3e 	bl	8000ecc <send_to_gsm>
 8000a50:	6078      	str	r0, [r7, #4]
		char *ptr;
		    ptr=strstr(str,"139.59.78.252");
 8000a52:	490b      	ldr	r1, [pc, #44]	; (8000a80 <check_server_connection+0x3c>)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f004 f9c3 	bl	8004de0 <strstr>
 8000a5a:	6038      	str	r0, [r7, #0]
		    if(ptr)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <check_server_connection+0x28>
		    {
		        printf("tcp connection established\n");
 8000a62:	4808      	ldr	r0, [pc, #32]	; (8000a84 <check_server_connection+0x40>)
 8000a64:	f004 f9a0 	bl	8004da8 <puts>
		        return 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e003      	b.n	8000a74 <check_server_connection+0x30>
		    }
		    else{
		        printf("tcp connection NOT established\n");
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <check_server_connection+0x44>)
 8000a6e:	f004 f99b 	bl	8004da8 <puts>
		        return 1;
 8000a72:	2301      	movs	r3, #1
		    }
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	08005e84 	.word	0x08005e84
 8000a80:	08005e94 	.word	0x08005e94
 8000a84:	08005ea4 	.word	0x08005ea4
 8000a88:	08005ec0 	.word	0x08005ec0

08000a8c <gsm_disconnect_to_server>:


int gsm_disconnect_to_server()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	int cls_state=0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
	//while(1)
	{
	switch(cls_state)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d113      	bne.n	8000ac4 <gsm_disconnect_to_server+0x38>
	{
	case 0:
		str =(char *) send_to_gsm("AT+CIPCLOSE\r");
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <gsm_disconnect_to_server+0x44>)
 8000a9e:	f000 fa15 	bl	8000ecc <send_to_gsm>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <gsm_disconnect_to_server+0x48>)
 8000aa6:	6013      	str	r3, [r2, #0]
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <gsm_disconnect_to_server+0x48>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2206      	movs	r2, #6
 8000aae:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <gsm_disconnect_to_server+0x4c>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 f981 	bl	8004db8 <strncmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <gsm_disconnect_to_server+0x34>
			{
//				printf("state = %d substate = %d \n",state,substate);
			    return HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e003      	b.n	8000ac8 <gsm_disconnect_to_server+0x3c>
			 }
			else
			{
				cls_state=0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
			}
	}
	}
	return -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295


}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	08005ee0 	.word	0x08005ee0
 8000ad4:	2000008c 	.word	0x2000008c
 8000ad8:	08005d20 	.word	0x08005d20

08000adc <check_signal>:

int check_signal(char *str)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8000ae8:	e04b      	b.n	8000b82 <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b20      	cmp	r3, #32
 8000af6:	d120      	bne.n	8000b3a <check_signal+0x5e>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3b02      	subs	r3, #2
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b3a      	cmp	r3, #58	; 0x3a
 8000b04:	d119      	bne.n	8000b3a <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b2f      	cmp	r3, #47	; 0x2f
 8000b10:	d805      	bhi.n	8000b1e <check_signal+0x42>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b39      	cmp	r3, #57	; 0x39
 8000b1c:	d80d      	bhi.n	8000b3a <check_signal+0x5e>
		{
			rssi=str+i;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4833      	ldr	r0, [pc, #204]	; (8000c04 <check_signal+0x128>)
 8000b36:	f004 f8b1 	bl	8004c9c <iprintf>
		}
	    }
	    if(str[i-1]==',')
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b2c      	cmp	r3, #44	; 0x2c
 8000b46:	d119      	bne.n	8000b7c <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b2f      	cmp	r3, #47	; 0x2f
 8000b52:	d805      	bhi.n	8000b60 <check_signal+0x84>
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b39      	cmp	r3, #57	; 0x39
 8000b5e:	d80d      	bhi.n	8000b7c <check_signal+0xa0>
		        {
		        	ber=str+i;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	3301      	adds	r3, #1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4824      	ldr	r0, [pc, #144]	; (8000c08 <check_signal+0x12c>)
 8000b78:	f004 f890 	bl	8004c9c <iprintf>
	        	}

	    }
		i++;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1ad      	bne.n	8000aea <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4619      	mov	r1, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	481b      	ldr	r0, [pc, #108]	; (8000c0c <check_signal+0x130>)
 8000b9e:	f004 f87d 	bl	8004c9c <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	3301      	adds	r3, #1
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <check_signal+0x134>)
 8000bb2:	f004 f873 	bl	8004c9c <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b39      	cmp	r3, #57	; 0x39
 8000bbc:	d11d      	bne.n	8000bfa <check_signal+0x11e>
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b39      	cmp	r3, #57	; 0x39
 8000bc6:	d118      	bne.n	8000bfa <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b31      	cmp	r3, #49	; 0x31
 8000bce:	d803      	bhi.n	8000bd8 <check_signal+0xfc>
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b38      	cmp	r3, #56	; 0x38
 8000bd6:	d80e      	bhi.n	8000bf6 <check_signal+0x11a>
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b2f      	cmp	r3, #47	; 0x2f
 8000be0:	d804      	bhi.n	8000bec <check_signal+0x110>
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b39      	cmp	r3, #57	; 0x39
 8000bea:	d804      	bhi.n	8000bf6 <check_signal+0x11a>
	    {
	    printf("ok");
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <check_signal+0x138>)
 8000bee:	f004 f855 	bl	8004c9c <iprintf>
	    return 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e002      	b.n	8000bfc <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 8000bfa:	2301      	movs	r3, #1
	}
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	08005ef0 	.word	0x08005ef0
 8000c08:	08005efc 	.word	0x08005efc
 8000c0c:	08005f08 	.word	0x08005f08
 8000c10:	08005f18 	.word	0x08005f18
 8000c14:	08005f28 	.word	0x08005f28

08000c18 <connect_tcp_server>:

int connect_tcp_server()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
	int state=0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
	int substate=0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
	int count=30;
 8000c26:	231e      	movs	r3, #30
 8000c28:	607b      	str	r3, [r7, #4]
	while(count--){
 8000c2a:	e0d3      	b.n	8000dd4 <connect_tcp_server+0x1bc>
	switch(state)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	f000 8086 	beq.w	8000d40 <connect_tcp_server+0x128>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	f300 80c7 	bgt.w	8000dca <connect_tcp_server+0x1b2>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <connect_tcp_server+0x32>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d036      	beq.n	8000cb6 <connect_tcp_server+0x9e>
 8000c48:	e0bf      	b.n	8000dca <connect_tcp_server+0x1b2>
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <connect_tcp_server+0x40>
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d017      	beq.n	8000c86 <connect_tcp_server+0x6e>
 8000c56:	e0bd      	b.n	8000dd4 <connect_tcp_server+0x1bc>
				  					case 0:
				  									  		{
				  									  			switch(substate)
				  									  			{
				  									  			case 0:
				  									  				str=send_to_gsm("AT+CIPMODE?\r");
 8000c58:	4865      	ldr	r0, [pc, #404]	; (8000df0 <connect_tcp_server+0x1d8>)
 8000c5a:	f000 f937 	bl	8000ecc <send_to_gsm>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a64      	ldr	r2, [pc, #400]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000c62:	6013      	str	r3, [r2, #0]
				  									  				if(strstr(str,"+CIPMODE: 0"))
 8000c64:	4b63      	ldr	r3, [pc, #396]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4963      	ldr	r1, [pc, #396]	; (8000df8 <connect_tcp_server+0x1e0>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 f8b8 	bl	8004de0 <strstr>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <connect_tcp_server+0x68>
				  									  				{
				  									  					state=1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
				  									  				}
				  									  				else
				  									  				{
				  									  					substate=1;
				  									  				}
				  									  				break;
 8000c7e:	e019      	b.n	8000cb4 <connect_tcp_server+0x9c>
				  									  					substate=1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
				  									  				break;
 8000c84:	e016      	b.n	8000cb4 <connect_tcp_server+0x9c>
				  									  			case 1:
				  									  				str=send_to_gsm("AT+CIPMODE=0\r");
 8000c86:	485d      	ldr	r0, [pc, #372]	; (8000dfc <connect_tcp_server+0x1e4>)
 8000c88:	f000 f920 	bl	8000ecc <send_to_gsm>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000c90:	6013      	str	r3, [r2, #0]
				  									  				if(strstr(str,"OK"))
 8000c92:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	495a      	ldr	r1, [pc, #360]	; (8000e00 <connect_tcp_server+0x1e8>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f8a1 	bl	8004de0 <strstr>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <connect_tcp_server+0x96>
				  									  				{
				  									  					state=0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
				  									  				}
				  									  				else
				  									  				{
				  									  					substate=0;
				  									  				}
				  									  				break;
 8000cac:	e001      	b.n	8000cb2 <connect_tcp_server+0x9a>
				  									  					substate=0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
				  									  				break;
 8000cb2:	bf00      	nop
				  									  			}
				  									  			break;
 8000cb4:	e08e      	b.n	8000dd4 <connect_tcp_server+0x1bc>
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <connect_tcp_server+0xac>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d025      	beq.n	8000d0e <connect_tcp_server+0xf6>
 8000cc2:	e087      	b.n	8000dd4 <connect_tcp_server+0x1bc>
				  									  		case 1:
				  									  		{
				  									  			switch(substate)
				  									  			{
				  									  			case 0:
				  									  				str = send_to_gsm("AT+NETOPEN\r");
 8000cc4:	484f      	ldr	r0, [pc, #316]	; (8000e04 <connect_tcp_server+0x1ec>)
 8000cc6:	f000 f901 	bl	8000ecc <send_to_gsm>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000cce:	6013      	str	r3, [r2, #0]
				  									  				//HAL_Delay(1000);
				  									  				printf("NETOPEN\n");
 8000cd0:	484d      	ldr	r0, [pc, #308]	; (8000e08 <connect_tcp_server+0x1f0>)
 8000cd2:	f004 f869 	bl	8004da8 <puts>
				  									  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000cd6:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2206      	movs	r2, #6
 8000cdc:	494b      	ldr	r1, [pc, #300]	; (8000e0c <connect_tcp_server+0x1f4>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 f86a 	bl	8004db8 <strncmp>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d109      	bne.n	8000cfe <connect_tcp_server+0xe6>
				  									  				{
				  									  					printf("state = %d substate = %d \n",state,substate);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	4848      	ldr	r0, [pc, #288]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000cf0:	f003 ffd4 	bl	8004c9c <iprintf>
				  									  					state=2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
				  									  				else
				  									  				{
				  									  					printf("state = %d substate = %d \n",state,substate);
				  									  					substate=1;
				  									  				}
				  									  				break;
 8000cfc:	e01f      	b.n	8000d3e <connect_tcp_server+0x126>
				  									  					printf("state = %d substate = %d \n",state,substate);
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	68f9      	ldr	r1, [r7, #12]
 8000d02:	4843      	ldr	r0, [pc, #268]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000d04:	f003 ffca 	bl	8004c9c <iprintf>
				  									  					substate=1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
				  									  				break;
 8000d0c:	e017      	b.n	8000d3e <connect_tcp_server+0x126>
				  									  			case 1:
				  									  				if((strstr(str,"Network is already opened")!=NULL))
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4940      	ldr	r1, [pc, #256]	; (8000e14 <connect_tcp_server+0x1fc>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 f863 	bl	8004de0 <strstr>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d009      	beq.n	8000d34 <connect_tcp_server+0x11c>
				  									  				{
				  									  					printf("state = %d substate = %d \n",state,substate);
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	68f9      	ldr	r1, [r7, #12]
 8000d24:	483a      	ldr	r0, [pc, #232]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000d26:	f003 ffb9 	bl	8004c9c <iprintf>
				  									  					state=2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
				  									  				else
				  									  				{
				  									  					state=0;
				  									  					substate=0;
				  									  				}
				  									  				break;
 8000d32:	e003      	b.n	8000d3c <connect_tcp_server+0x124>
				  									  					state=0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
				  									  				break;
 8000d3c:	bf00      	nop

				  									  			}
				  									  			break;
 8000d3e:	e049      	b.n	8000dd4 <connect_tcp_server+0x1bc>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <connect_tcp_server+0x136>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d024      	beq.n	8000d96 <connect_tcp_server+0x17e>
 8000d4c:	e042      	b.n	8000dd4 <connect_tcp_server+0x1bc>
				  									  		case 2:
				  									  		{
				  									  			switch(substate)
				  									  			{
				  									  			case 0:
				  									  				str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",49791\r");
 8000d4e:	4832      	ldr	r0, [pc, #200]	; (8000e18 <connect_tcp_server+0x200>)
 8000d50:	f000 f8bc 	bl	8000ecc <send_to_gsm>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000d58:	6013      	str	r3, [r2, #0]
				  									  				//HAL_Delay(1000);
				  									  				printf("CIPOPEN\n");
 8000d5a:	4830      	ldr	r0, [pc, #192]	; (8000e1c <connect_tcp_server+0x204>)
 8000d5c:	f004 f824 	bl	8004da8 <puts>
				  									  				if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <connect_tcp_server+0x1dc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	492e      	ldr	r1, [pc, #184]	; (8000e20 <connect_tcp_server+0x208>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 f83a 	bl	8004de0 <strstr>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d009      	beq.n	8000d86 <connect_tcp_server+0x16e>
				  									  				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
				  									  				{
				  									  					printf("state = %d substate = %d \n",state,substate);
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	68f9      	ldr	r1, [r7, #12]
 8000d76:	4826      	ldr	r0, [pc, #152]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000d78:	f003 ff90 	bl	8004c9c <iprintf>
				  									  					state=3;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	60fb      	str	r3, [r7, #12]
				  									  					substate=1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
				  									  				{
				  									  					printf("state = %d substate = %d \n",state,substate);
				  									  					//state=0;
				  									  					substate=1;
				  									  				}
				  									  				break;
 8000d84:	e020      	b.n	8000dc8 <connect_tcp_server+0x1b0>
				  									  					printf("state = %d substate = %d \n",state,substate);
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	68f9      	ldr	r1, [r7, #12]
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000d8c:	f003 ff86 	bl	8004c9c <iprintf>
				  									  					substate=1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
				  									  				break;
 8000d94:	e018      	b.n	8000dc8 <connect_tcp_server+0x1b0>
				  									  			case 1:
				  									  				if(check_server_connection()==0)
 8000d96:	f7ff fe55 	bl	8000a44 <check_server_connection>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <connect_tcp_server+0x19c>
				  									  				{
				  									  				printf("state = %d substate = %d \n",state,substate);
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	68f9      	ldr	r1, [r7, #12]
 8000da4:	481a      	ldr	r0, [pc, #104]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000da6:	f003 ff79 	bl	8004c9c <iprintf>
				  									  					state=3;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
				  									  				{
				  									  				printf("state = %d substate = %d \n",state,substate);
				  									  					state=0;
				  									  					substate=0;
				  									  				}
				  									  				break;
 8000db2:	e008      	b.n	8000dc6 <connect_tcp_server+0x1ae>
				  									  				printf("state = %d substate = %d \n",state,substate);
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	4815      	ldr	r0, [pc, #84]	; (8000e10 <connect_tcp_server+0x1f8>)
 8000dba:	f003 ff6f 	bl	8004c9c <iprintf>
				  									  					state=0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
				  									  					substate=0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
				  									  				break;
 8000dc6:	bf00      	nop
				  									  			}
				  									  			break;
 8000dc8:	e004      	b.n	8000dd4 <connect_tcp_server+0x1bc>
				  									  		}
				  									 default:
				  									  			printf("opened successfulyy\n");
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <connect_tcp_server+0x20c>)
 8000dcc:	f003 ffec 	bl	8004da8 <puts>
				  									  			return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e009      	b.n	8000de8 <connect_tcp_server+0x1d0>
	while(count--){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f47f af26 	bne.w	8000c2c <connect_tcp_server+0x14>
				  									  		}
}
	printf("Time out\n");
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <connect_tcp_server+0x210>)
 8000de2:	f003 ffe1 	bl	8004da8 <puts>

	return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	08005f2c 	.word	0x08005f2c
 8000df4:	2000008c 	.word	0x2000008c
 8000df8:	08005f3c 	.word	0x08005f3c
 8000dfc:	08005f48 	.word	0x08005f48
 8000e00:	08005dc0 	.word	0x08005dc0
 8000e04:	08005f58 	.word	0x08005f58
 8000e08:	08005f64 	.word	0x08005f64
 8000e0c:	08005d20 	.word	0x08005d20
 8000e10:	08005d28 	.word	0x08005d28
 8000e14:	08005f6c 	.word	0x08005f6c
 8000e18:	08005f88 	.word	0x08005f88
 8000e1c:	08005fb4 	.word	0x08005fb4
 8000e20:	08005fbc 	.word	0x08005fbc
 8000e24:	08005fcc 	.word	0x08005fcc
 8000e28:	08005fe0 	.word	0x08005fe0

08000e2c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e38:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e48:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e4c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00b      	beq.n	8000e6c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e54:	e000      	b.n	8000e58 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e56:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f9      	beq.n	8000e56 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e62:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_write>:
#include "main.h"
#include<stdio.h>
#include<string.h>
#include"GSM.h"
int _write(int file,char *ptr,int len)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
    int i=0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x2a>
      ITM_SendChar((*ptr++));
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffc7 	bl	8000e2c <ITM_SendChar>
    for(i=0;i<len;i++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x16>
    return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_UART_TxCpltCallback>:
uint8_t command[20];
uint8_t response[20];
char *data1;
uint8_t var=0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]

}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <send_to_gsm>:
char *send_to_gsm(char * command)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 8000ed4:	22c8      	movs	r2, #200	; 0xc8
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480f      	ldr	r0, [pc, #60]	; (8000f18 <send_to_gsm+0x4c>)
 8000eda:	f003 fed7 	bl	8004c8c <memset>
	 printf("tx start\n");
 8000ede:	480f      	ldr	r0, [pc, #60]	; (8000f1c <send_to_gsm+0x50>)
 8000ee0:	f003 ff62 	bl	8004da8 <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff f973 	bl	80001d0 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <send_to_gsm+0x54>)
 8000ef4:	f002 fd6a 	bl	80039cc <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	22c8      	movs	r2, #200	; 0xc8
 8000efe:	4906      	ldr	r1, [pc, #24]	; (8000f18 <send_to_gsm+0x4c>)
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <send_to_gsm+0x54>)
 8000f02:	f002 fc91 	bl	8003828 <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8000f06:	4904      	ldr	r1, [pc, #16]	; (8000f18 <send_to_gsm+0x4c>)
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <send_to_gsm+0x58>)
 8000f0a:	f003 fec7 	bl	8004c9c <iprintf>
	 return (char *)rx;
 8000f0e:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <send_to_gsm+0x4c>)
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000324 	.word	0x20000324
 8000f1c:	0800601c 	.word	0x0800601c
 8000f20:	20000090 	.word	0x20000090
 8000f24:	08006028 	.word	0x08006028

08000f28 <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
		HAL_Delay(2000);
		HAL_UART_Transmit_IT(&huart4,(uint8_t *) "hi vishnu",9);
		HAL_UART_Receive(&huart4, (uint8_t *)rx, 200,1000);*/
	{
		//char buf[]="{\"latitude\":1727.401123 N, \"longitude\":7822.510254 E, \"time\":12:48:30}";
		memset(rx,'\0',sizeof(rx));
 8000f32:	22c8      	movs	r2, #200	; 0xc8
 8000f34:	2100      	movs	r1, #0
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f38:	f003 fea8 	bl	8004c8c <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=0,7\r",16);
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	491d      	ldr	r1, [pc, #116]	; (8000fb4 <send_mesg_to_server+0x8c>)
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <send_mesg_to_server+0x90>)
 8000f42:	f002 fd43 	bl	80039cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8000f46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f4a:	22c8      	movs	r2, #200	; 0xc8
 8000f4c:	4918      	ldr	r1, [pc, #96]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <send_mesg_to_server+0x90>)
 8000f50:	f002 fc6a 	bl	8003828 <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8000f54:	4916      	ldr	r1, [pc, #88]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f56:	4819      	ldr	r0, [pc, #100]	; (8000fbc <send_mesg_to_server+0x94>)
 8000f58:	f003 fea0 	bl	8004c9c <iprintf>
		memset(rx,'\0',sizeof(rx));
 8000f5c:	22c8      	movs	r2, #200	; 0xc8
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f62:	f003 fe93 	bl	8004c8c <memset>
		//HAL_UART_Transmit_IT(&huart4,(uint8_t*)"{\"latitude\":1727.401123 N, \"longitude\":7822.510254 E, \"time\":12:48:30}", strlen("{\"latitude\":1727.401123 N, \"longitude\":7822.510254 E, \"time\":12:48:30}"));
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"hiteam", 7);
 8000f66:	2207      	movs	r2, #7
 8000f68:	4915      	ldr	r1, [pc, #84]	; (8000fc0 <send_mesg_to_server+0x98>)
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <send_mesg_to_server+0x90>)
 8000f6c:	f002 fd2e 	bl	80039cc <HAL_UART_Transmit_IT>

		HAL_UART_Receive(&huart4, rx, 200,3000);
 8000f70:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000f74:	22c8      	movs	r2, #200	; 0xc8
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <send_mesg_to_server+0x90>)
 8000f7a:	f002 fc55 	bl	8003828 <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8000f7e:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f80:	480e      	ldr	r0, [pc, #56]	; (8000fbc <send_mesg_to_server+0x94>)
 8000f82:	f003 fe8b 	bl	8004c9c <iprintf>

		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 8000f86:	490f      	ldr	r1, [pc, #60]	; (8000fc4 <send_mesg_to_server+0x9c>)
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <send_mesg_to_server+0x88>)
 8000f8a:	f003 ff29 	bl	8004de0 <strstr>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <send_mesg_to_server+0x76>
		{
			printf("mesg send successfully\n");
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <send_mesg_to_server+0xa0>)
 8000f96:	f003 ff07 	bl	8004da8 <puts>
			return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e003      	b.n	8000fa6 <send_mesg_to_server+0x7e>
		}
		else
		{
			printf("mesg NOT send\n");
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <send_mesg_to_server+0xa4>)
 8000fa0:	f003 ff02 	bl	8004da8 <puts>
			return 1;
 8000fa4:	2301      	movs	r3, #1
		}
	}
	return 1;
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000324 	.word	0x20000324
 8000fb4:	08006034 	.word	0x08006034
 8000fb8:	20000090 	.word	0x20000090
 8000fbc:	08006044 	.word	0x08006044
 8000fc0:	08006058 	.word	0x08006058
 8000fc4:	08006060 	.word	0x08006060
 8000fc8:	08006068 	.word	0x08006068
 8000fcc:	08006080 	.word	0x08006080

08000fd0 <main>:

	// return (char *)rx;
}
*/
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 fcdf 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f863 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f9a3 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 f941 	bl	8001268 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000fe6:	f000 f8af 	bl	8001148 <MX_UART4_Init>
  MX_UART5_Init();
 8000fea:	f000 f8dd 	bl	80011a8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000fee:	f000 f90b 	bl	8001208 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ff2:	f000 f969 	bl	80012c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
int i=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
/*send_to_gsm("ATE0\r");
send_at("AT+CSQ\r\n", "\r\n+CSQ: 29,99\r\n");
	  HAL_Delay(5000);
	  send_at("AT+CSQ\r\n", "\r\n+CSQ: 29,99\r\n");
	  	  HAL_Delay(5000);*/
int s1=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	  	  {
	  //send_at("ATE0\r\n", "OK");
	 // HAL_Delay(5000);
	  //send_at("AT+CSQ\r\n", "CSQ");
	  //HAL_Delay(5000);
	  		  switch(s1)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d8fc      	bhi.n	8000ffe <main+0x2e>
 8001004:	a201      	add	r2, pc, #4	; (adr r2, 800100c <main+0x3c>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	08001021 	.word	0x08001021
 8001010:	08001039 	.word	0x08001039
 8001014:	0800104f 	.word	0x0800104f
 8001018:	08001065 	.word	0x08001065
 800101c:	08001085 	.word	0x08001085
	  		  {
	  		  case 0:
	  			m =gsm_connect_to_server();
 8001020:	f7ff fab0 	bl	8000584 <gsm_connect_to_server>
 8001024:	6078      	str	r0, [r7, #4]
	  			if(m==0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <main+0x62>
	  			{
	  				s1=1;
 800102c:	2301      	movs	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 8001030:	e033      	b.n	800109a <main+0xca>
	  				s1=0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
	  			break;
 8001036:	e030      	b.n	800109a <main+0xca>
	  		  case 1:
	  			if(connect_tcp_server()==0)
 8001038:	f7ff fdee 	bl	8000c18 <connect_tcp_server>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <main+0x78>
	  			{
	  				s1=2;
 8001042:	2302      	movs	r3, #2
 8001044:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 8001046:	e028      	b.n	800109a <main+0xca>
	  				s1=0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
	  			break;
 800104c:	e025      	b.n	800109a <main+0xca>
	  		case 2:
	  			if(check_server_connection()==0)
 800104e:	f7ff fcf9 	bl	8000a44 <check_server_connection>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <main+0x8e>
	  			{
	  				s1=3;
 8001058:	2303      	movs	r3, #3
 800105a:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=1;
	  			}
	  			break;
 800105c:	e01d      	b.n	800109a <main+0xca>
	  				s1=1;
 800105e:	2301      	movs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	  			break;
 8001062:	e01a      	b.n	800109a <main+0xca>
	  		  case 3:
	  			if(send_mesg_to_server("0123456789", 50)==0)
 8001064:	2132      	movs	r1, #50	; 0x32
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <main+0xcc>)
 8001068:	f7ff ff5e 	bl	8000f28 <send_mesg_to_server>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <main+0xae>
	  			{
	  				printf("mesg send\n");
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <main+0xd0>)
 8001074:	f003 fe98 	bl	8004da8 <puts>
	  				s1=3;
 8001078:	2303      	movs	r3, #3
 800107a:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=2;
	  			}
	  			break;
 800107c:	e00d      	b.n	800109a <main+0xca>
	  				s1=2;
 800107e:	2302      	movs	r3, #2
 8001080:	60fb      	str	r3, [r7, #12]
	  			break;
 8001082:	e00a      	b.n	800109a <main+0xca>
	  		  case 4:
	  			if(gsm_disconnect_to_server()==0)
 8001084:	f7ff fd02 	bl	8000a8c <gsm_disconnect_to_server>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <main+0xc4>
	  			{
	  				s1=0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 8001092:	e001      	b.n	8001098 <main+0xc8>
	  				s1=0;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
	  			break;
 8001098:	bf00      	nop
	  		  switch(s1)
 800109a:	e7b0      	b.n	8000ffe <main+0x2e>
 800109c:	08006090 	.word	0x08006090
 80010a0:	0800609c 	.word	0x0800609c

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b096      	sub	sp, #88	; 0x58
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2244      	movs	r2, #68	; 0x44
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fdea 	bl	8004c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ca:	f001 f84d 	bl	8002168 <HAL_PWREx_ControlVoltageScaling>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010d4:	f000 f958 	bl	8001388 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e2:	2310      	movs	r3, #16
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ea:	2302      	movs	r3, #2
 80010ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010f2:	230a      	movs	r3, #10
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f884 	bl	8002214 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001112:	f000 f939 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2303      	movs	r3, #3
 800111c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	2104      	movs	r1, #4
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fc4c 	bl	80029cc <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800113a:	f000 f925 	bl	8001388 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3758      	adds	r7, #88	; 0x58
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_UART4_Init+0x58>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <MX_UART4_Init+0x5c>)
 8001150:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_UART4_Init+0x58>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_UART4_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_UART4_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_UART4_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_UART4_Init+0x58>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_UART4_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_UART4_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_UART4_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_UART4_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_UART4_Init+0x58>)
 800118c:	f002 fafe 	bl	800378c <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001196:	f000 f8f7 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000090 	.word	0x20000090
 80011a4:	40004c00 	.word	0x40004c00

080011a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_UART5_Init+0x58>)
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <MX_UART5_Init+0x5c>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_UART5_Init+0x58>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_UART5_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_UART5_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_UART5_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_UART5_Init+0x58>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_UART5_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_UART5_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_UART5_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_UART5_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_UART5_Init+0x58>)
 80011ec:	f002 face 	bl	800378c <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80011f6:	f000 f8c7 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000114 	.word	0x20000114
 8001204:	40005000 	.word	0x40005000

08001208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USART1_UART_Init+0x58>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_USART1_UART_Init+0x5c>)
 8001210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART1_UART_Init+0x58>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART1_UART_Init+0x58>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART1_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART1_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART1_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART1_UART_Init+0x58>)
 800124c:	f002 fa9e 	bl	800378c <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 f897 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000198 	.word	0x20000198
 8001264:	40013800 	.word	0x40013800

08001268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <MX_USART2_UART_Init+0x5c>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 80012ac:	f002 fa6e 	bl	800378c <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012b6:	f000 f867 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000021c 	.word	0x2000021c
 80012c4:	40004400 	.word	0x40004400

080012c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <MX_USART3_UART_Init+0x5c>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART3_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART3_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART3_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART3_UART_Init+0x58>)
 800130c:	f002 fa3e 	bl	800378c <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f837 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200002a0 	.word	0x200002a0
 8001324:	40004800 	.word	0x40004800

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_GPIO_Init+0x5c>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <MX_GPIO_Init+0x5c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_GPIO_Init+0x5c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_GPIO_Init+0x5c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <MX_GPIO_Init+0x5c>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_GPIO_Init+0x5c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_GPIO_Init+0x5c>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <MX_GPIO_Init+0x5c>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_GPIO_Init+0x5c>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x44>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_MspInit+0x44>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6613      	str	r3, [r2, #96]	; 0x60
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_MspInit+0x44>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x44>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x44>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6593      	str	r3, [r2, #88]	; 0x58
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0b4      	sub	sp, #208	; 0xd0
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013f8:	2288      	movs	r2, #136	; 0x88
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fc45 	bl	8004c8c <memset>
  if(huart->Instance==UART4)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4aa4      	ldr	r2, [pc, #656]	; (8001698 <HAL_UART_MspInit+0x2bc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d144      	bne.n	8001496 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800140c:	2308      	movs	r3, #8
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001410:	2300      	movs	r3, #0
 8001412:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fcfb 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001424:	f7ff ffb0 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001428:	4b9c      	ldr	r3, [pc, #624]	; (800169c <HAL_UART_MspInit+0x2c0>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	4a9b      	ldr	r2, [pc, #620]	; (800169c <HAL_UART_MspInit+0x2c0>)
 800142e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001432:	6593      	str	r3, [r2, #88]	; 0x58
 8001434:	4b99      	ldr	r3, [pc, #612]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b96      	ldr	r3, [pc, #600]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	4a95      	ldr	r2, [pc, #596]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144c:	4b93      	ldr	r3, [pc, #588]	; (800169c <HAL_UART_MspInit+0x2c0>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001458:	2303      	movs	r3, #3
 800145a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001470:	2308      	movs	r3, #8
 8001472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f000 fcba 	bl	8001df8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2034      	movs	r0, #52	; 0x34
 800148a:	f000 fc00 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800148e:	2034      	movs	r0, #52	; 0x34
 8001490:	f000 fc19 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001494:	e156      	b.n	8001744 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==UART5)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <HAL_UART_MspInit+0x2c4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d165      	bne.n	800156c <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014a0:	2310      	movs	r3, #16
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fcb1 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80014b8:	f7ff ff66 	bl	8001388 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014bc:	4b77      	ldr	r3, [pc, #476]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	4a76      	ldr	r2, [pc, #472]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014c6:	6593      	str	r3, [r2, #88]	; 0x58
 80014c8:	4b74      	ldr	r3, [pc, #464]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d4:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	4a70      	ldr	r2, [pc, #448]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e0:	4b6e      	ldr	r3, [pc, #440]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ec:	4b6b      	ldr	r3, [pc, #428]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a6a      	ldr	r2, [pc, #424]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800151e:	2308      	movs	r3, #8
 8001520:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001528:	4619      	mov	r1, r3
 800152a:	485e      	ldr	r0, [pc, #376]	; (80016a4 <HAL_UART_MspInit+0x2c8>)
 800152c:	f000 fc64 	bl	8001df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001530:	2304      	movs	r3, #4
 8001532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001548:	2308      	movs	r3, #8
 800154a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001552:	4619      	mov	r1, r3
 8001554:	4854      	ldr	r0, [pc, #336]	; (80016a8 <HAL_UART_MspInit+0x2cc>)
 8001556:	f000 fc4f 	bl	8001df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2035      	movs	r0, #53	; 0x35
 8001560:	f000 fb95 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001564:	2035      	movs	r0, #53	; 0x35
 8001566:	f000 fbae 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 800156a:	e0eb      	b.n	8001744 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_UART_MspInit+0x2d0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d145      	bne.n	8001602 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001576:	2301      	movs	r3, #1
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800157a:	2300      	movs	r3, #0
 800157c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fc46 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 800158e:	f7ff fefb 	bl	8001388 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	4a41      	ldr	r2, [pc, #260]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6613      	str	r3, [r2, #96]	; 0x60
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a3b      	ldr	r2, [pc, #236]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_UART_MspInit+0x2c0>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f000 fc04 	bl	8001df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2025      	movs	r0, #37	; 0x25
 80015f6:	f000 fb4a 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015fa:	2025      	movs	r0, #37	; 0x25
 80015fc:	f000 fb63 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 8001600:	e0a0      	b.n	8001744 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_UART_MspInit+0x2d4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d153      	bne.n	80016b4 <HAL_UART_MspInit+0x2d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800160c:	2302      	movs	r3, #2
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fbfb 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8001624:	f7ff feb0 	bl	8001388 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_UART_MspInit+0x2c0>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_UART_MspInit+0x2c0>)
 800162e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001632:	6593      	str	r3, [r2, #88]	; 0x58
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_UART_MspInit+0x2c0>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_UART_MspInit+0x2c0>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001658:	230c      	movs	r3, #12
 800165a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001670:	2307      	movs	r3, #7
 8001672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fbba 	bl	8001df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2026      	movs	r0, #38	; 0x26
 800168a:	f000 fb00 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800168e:	2026      	movs	r0, #38	; 0x26
 8001690:	f000 fb19 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 8001694:	e056      	b.n	8001744 <HAL_UART_MspInit+0x368>
 8001696:	bf00      	nop
 8001698:	40004c00 	.word	0x40004c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40005000 	.word	0x40005000
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000c00 	.word	0x48000c00
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a24      	ldr	r2, [pc, #144]	; (800174c <HAL_UART_MspInit+0x370>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d142      	bne.n	8001744 <HAL_UART_MspInit+0x368>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016be:	2304      	movs	r3, #4
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 fba2 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 80016d6:	f7ff fe57 	bl	8001388 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_UART_MspInit+0x374>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_UART_MspInit+0x374>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6593      	str	r3, [r2, #88]	; 0x58
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_UART_MspInit+0x374>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x374>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_UART_MspInit+0x374>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x374>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800170a:	2330      	movs	r3, #48	; 0x30
 800170c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001722:	2307      	movs	r3, #7
 8001724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800172c:	4619      	mov	r1, r3
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <HAL_UART_MspInit+0x378>)
 8001730:	f000 fb62 	bl	8001df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2027      	movs	r0, #39	; 0x27
 800173a:	f000 faa8 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800173e:	2027      	movs	r0, #39	; 0x27
 8001740:	f000 fac1 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 8001744:	bf00      	nop
 8001746:	37d0      	adds	r7, #208	; 0xd0
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40004800 	.word	0x40004800
 8001750:	40021000 	.word	0x40021000
 8001754:	48000800 	.word	0x48000800

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f954 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <USART1_IRQHandler+0x10>)
 80017b2:	f002 f979 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000198 	.word	0x20000198

080017c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <USART2_IRQHandler+0x10>)
 80017c6:	f002 f96f 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000021c 	.word	0x2000021c

080017d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USART3_IRQHandler+0x10>)
 80017da:	f002 f965 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002a0 	.word	0x200002a0

080017e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <UART4_IRQHandler+0x10>)
 80017ee:	f002 f95b 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000090 	.word	0x20000090

080017fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <UART5_IRQHandler+0x10>)
 8001802:	f002 f951 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000114 	.word	0x20000114

08001810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
  }

  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:
  }
  return len;
}

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f003 f9a8 	bl	8004c38 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20018000 	.word	0x20018000
 8001914:	00000400 	.word	0x00000400
 8001918:	200003ec 	.word	0x200003ec
 800191c:	20000408 	.word	0x20000408

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <LoopForever+0x6>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <LoopForever+0xe>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	; (8001990 <LoopForever+0x16>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f003 f967 	bl	8004c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001976:	f7ff fb2b 	bl	8000fd0 <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800197c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001988:	08006198 	.word	0x08006198
  ldr r2, =_sbss
 800198c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001990:	20000404 	.word	0x20000404

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>
	...

08001998 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_Init+0x3c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_Init+0x3c>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ae:	2003      	movs	r0, #3
 80019b0:	f000 f962 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f80f 	bl	80019d8 <HAL_InitTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	e001      	b.n	80019ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019c6:	f7ff fce5 	bl	8001394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_InitTick+0x6c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d023      	beq.n	8001a34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_InitTick+0x70>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_InitTick+0x6c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f96d 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d809      	bhi.n	8001a28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 f937 	bl	8001c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_InitTick+0x74>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e004      	b.n	8001a38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	e001      	b.n	8001a38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	200003f0 	.word	0x200003f0

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200003f0 	.word	0x200003f0

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <__NVIC_SetPriorityGrouping>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff3e 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff8e 	bl	8001bcc <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5d 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff31 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa2 	bl	8001c34 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d008      	beq.n	8001d24 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e022      	b.n	8001d6a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 020e 	bic.w	r2, r2, #14
 8001d32:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f003 021c 	and.w	r2, r3, #28
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d005      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e029      	b.n	8001dee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 020e 	bic.w	r2, r2, #14
 8001da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 021c 	and.w	r2, r3, #28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dcc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
    }
  }
  return status;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	e17f      	b.n	8002108 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8171 	beq.w	8002102 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x40>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d118      	bne.n	8001ed8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	f003 0201 	and.w	r2, r3, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d017      	beq.n	8001f14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d123      	bne.n	8001f68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	6939      	ldr	r1, [r7, #16]
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80ac 	beq.w	8002102 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_GPIO_Init+0x330>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <HAL_GPIO_Init+0x330>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_GPIO_Init+0x330>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_GPIO_Init+0x334>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fec:	d025      	beq.n	800203a <HAL_GPIO_Init+0x242>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x338>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <HAL_GPIO_Init+0x23e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x33c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x23a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x340>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x236>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x344>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x232>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	; (8002140 <HAL_GPIO_Init+0x348>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x22e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_GPIO_Init+0x34c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x22a>
 800201e:	2306      	movs	r3, #6
 8002020:	e00c      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002022:	2307      	movs	r3, #7
 8002024:	e00a      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002026:	2305      	movs	r3, #5
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x244>
 800202a:	2304      	movs	r3, #4
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x244>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x244>
 800203a:	2300      	movs	r3, #0
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204c:	4937      	ldr	r1, [pc, #220]	; (800212c <HAL_GPIO_Init+0x334>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_GPIO_Init+0x350>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_GPIO_Init+0x350>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_GPIO_Init+0x350>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f47f ae78 	bne.w	8001e08 <HAL_GPIO_Init+0x10>
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	48000400 	.word	0x48000400
 8002134:	48000800 	.word	0x48000800
 8002138:	48000c00 	.word	0x48000c00
 800213c:	48001000 	.word	0x48001000
 8002140:	48001400 	.word	0x48001400
 8002144:	48001800 	.word	0x48001800
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_PWREx_GetVoltageRange+0x18>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002176:	d130      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d038      	beq.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2232      	movs	r2, #50	; 0x32
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	e002      	b.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d102      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f2      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d110      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e00f      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d007      	beq.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f0:	4a05      	ldr	r2, [pc, #20]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000
 800220c:	20000000 	.word	0x20000000
 8002210:	431bde83 	.word	0x431bde83

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e3ca      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b97      	ldr	r3, [pc, #604]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80e4 	beq.w	8002410 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_RCC_OscConfig+0x4a>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f040 808b 	bne.w	800236c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b01      	cmp	r3, #1
 800225a:	f040 8087 	bne.w	800236c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225e:	4b89      	ldr	r3, [pc, #548]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e3a2      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_RCC_OscConfig+0x7c>
 8002286:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228e:	e005      	b.n	800229c <HAL_RCC_OscConfig+0x88>
 8002290:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	4293      	cmp	r3, r2
 800229e:	d223      	bcs.n	80022e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fd55 	bl	8002d54 <RCC_SetFlashLatencyFromMSIRange>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e383      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a72      	ldr	r2, [pc, #456]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	496d      	ldr	r1, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d2:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	4968      	ldr	r1, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e025      	b.n	8002334 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4960      	ldr	r1, [pc, #384]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	495b      	ldr	r1, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd15 	bl	8002d54 <RCC_SetFlashLatencyFromMSIRange>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e343      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002334:	f000 fc4a 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4950      	ldr	r1, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_RCC_OscConfig+0x278>)
 8002352:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_OscConfig+0x27c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fb3d 	bl	80019d8 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d052      	beq.n	800240e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	e327      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d032      	beq.n	80023da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002380:	f7ff fb7a 	bl	8001a78 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002388:	f7ff fb76 	bl	8001a78 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e310      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a36      	ldr	r2, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4931      	ldr	r1, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	492c      	ldr	r1, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e01a      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb47 	bl	8001a78 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ee:	f7ff fb43 	bl	8001a78 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e2dd      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x1da>
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d074      	beq.n	8002506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b08      	cmp	r3, #8
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x21a>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d10e      	bne.n	8002446 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d10b      	bne.n	8002446 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d064      	beq.n	8002504 <HAL_RCC_OscConfig+0x2f0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d160      	bne.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e2ba      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x24a>
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e026      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002466:	d115      	bne.n	8002494 <HAL_RCC_OscConfig+0x280>
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a02      	ldr	r2, [pc, #8]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	080060a8 	.word	0x080060a8
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004
 8002494:	4ba0      	ldr	r3, [pc, #640]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a9f      	ldr	r2, [pc, #636]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fae0 	bl	8001a78 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fadc 	bl	8001a78 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e276      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x2a8>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff facc 	bl	8001a78 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fac8 	bl	8001a78 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e262      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x2d0>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d060      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x310>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d119      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d116      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x328>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e23f      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4973      	ldr	r1, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e040      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d023      	beq.n	80025a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff fa87 	bl	8001a78 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff fa83 	bl	8001a78 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e21d      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b62      	ldr	r3, [pc, #392]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	495f      	ldr	r1, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e018      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff fa63 	bl	8001a78 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7ff fa5f 	bl	8001a78 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1f9      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03c      	beq.n	800265a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff fa3e 	bl	8001a78 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fa3a 	bl	8001a78 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1d4      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x3ec>
 8002620:	e01b      	b.n	800265a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002628:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff fa21 	bl	8001a78 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff fa1d 	bl	8001a78 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1b7      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a6 	beq.w	80027b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002690:	2301      	movs	r3, #1
 8002692:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x508>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d118      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7ff f9e4 	bl	8001a78 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7ff f9e0 	bl	8001a78 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e17a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x4d8>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ea:	e029      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d115      	bne.n	8002720 <HAL_RCC_OscConfig+0x50c>
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	4b9c      	ldr	r3, [pc, #624]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a9b      	ldr	r2, [pc, #620]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	4b98      	ldr	r3, [pc, #608]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a97      	ldr	r2, [pc, #604]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f996 	bl	8001a78 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff f992 	bl	8001a78 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e12a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ed      	beq.n	8002750 <HAL_RCC_OscConfig+0x53c>
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7ff f97f 	bl	8001a78 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff f97b 	bl	8001a78 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e113      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002794:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ed      	bne.n	800277e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7ffb      	ldrb	r3, [r7, #31]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b7a      	ldr	r3, [pc, #488]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4a79      	ldr	r2, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80fe 	beq.w	80029ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 80d0 	bne.w	8002968 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c8:	4b72      	ldr	r3, [pc, #456]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d130      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	3b01      	subs	r3, #1
 80027e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d127      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11f      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002808:	2a07      	cmp	r2, #7
 800280a:	bf14      	ite	ne
 800280c:	2201      	movne	r2, #1
 800280e:	2200      	moveq	r2, #0
 8002810:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	4293      	cmp	r3, r2
 8002814:	d113      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d109      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d06e      	beq.n	800291c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d069      	beq.n	8002918 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0ad      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800286c:	f7ff f904 	bl	8001a78 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff f900 	bl	8001a78 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e09a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ac:	0212      	lsls	r2, r2, #8
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b4:	0852      	lsrs	r2, r2, #1
 80028b6:	3a01      	subs	r2, #1
 80028b8:	0552      	lsls	r2, r2, #21
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0652      	lsls	r2, r2, #25
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028cc:	0912      	lsrs	r2, r2, #4
 80028ce:	0452      	lsls	r2, r2, #17
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4930      	ldr	r1, [pc, #192]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f0:	f7ff f8c2 	bl	8001a78 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff f8be 	bl	8001a78 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e058      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002916:	e050      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04f      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d148      	bne.n	80029ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002940:	f7ff f89a 	bl	8001a78 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f896 	bl	8001a78 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e030      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x734>
 8002966:	e028      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d023      	beq.n	80029b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7ff f87d 	bl	8001a78 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	e00c      	b.n	800299c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff f879 	bl	8001a78 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d905      	bls.n	800299c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
 8002994:	40021000 	.word	0x40021000
 8002998:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ec      	bne.n	8002982 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4905      	ldr	r1, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x7b4>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	feeefffc 	.word	0xfeeefffc

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0e7      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b75      	ldr	r3, [pc, #468]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b72      	ldr	r3, [pc, #456]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4970      	ldr	r1, [pc, #448]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cf      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d908      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4960      	ldr	r1, [pc, #384]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04c      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a6      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e09a      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08e      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e086      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4943      	ldr	r1, [pc, #268]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab4:	f7fe ffe0 	bl	8001a78 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe ffdc 	bl	8001a78 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e06e      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d208      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	492b      	ldr	r1, [pc, #172]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d210      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 0207 	bic.w	r2, r3, #7
 8002b28:	4923      	ldr	r1, [pc, #140]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e036      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4918      	ldr	r1, [pc, #96]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4910      	ldr	r1, [pc, #64]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b80:	f000 f824 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe ff17 	bl	80019d8 <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	080060a8 	.word	0x080060a8
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d121      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d11e      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c28:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	e004      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d134      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0xac>
 8002c70:	e005      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c74:	617b      	str	r3, [r7, #20]
      break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7a:	617b      	str	r3, [r7, #20]
      break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	617b      	str	r3, [r7, #20]
      break;
 8002c82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	3301      	adds	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0e5b      	lsrs	r3, r3, #25
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	080060c0 	.word	0x080060c0
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	080060b8 	.word	0x080060b8

08002d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d2c:	f7ff ffda 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0adb      	lsrs	r3, r3, #11
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	080060b8 	.word	0x080060b8

08002d54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d6c:	f7ff f9ee 	bl	800214c <HAL_PWREx_GetVoltageRange>
 8002d70:	6178      	str	r0, [r7, #20]
 8002d72:	e014      	b.n	8002d9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d8c:	f7ff f9de 	bl	800214c <HAL_PWREx_GetVoltageRange>
 8002d90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d10b      	bne.n	8002dbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d919      	bls.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2ba0      	cmp	r3, #160	; 0xa0
 8002db0:	d902      	bls.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db2:	2302      	movs	r3, #2
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	e013      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db8:	2301      	movs	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	e010      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d902      	bls.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	e00a      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d102      	bne.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e004      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d101      	bne.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ddc:	2301      	movs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 0207 	bic.w	r2, r3, #7
 8002de8:	4909      	ldr	r1, [pc, #36]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40022000 	.word	0x40022000

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d041      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e38:	d02a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e3e:	d824      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e4a:	d81e      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e54:	d010      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e56:	e018      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e58:	4b86      	ldr	r3, [pc, #536]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a85      	ldr	r2, [pc, #532]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e64:	e015      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fabb 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e76:	e00c      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3320      	adds	r3, #32
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fba6 	bl	80035d0 <RCCEx_PLLSAI2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e88:	e003      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e8e:	e000      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e98:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea6:	4973      	ldr	r1, [pc, #460]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eae:	e001      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d041      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ec8:	d02a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ece:	d824      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eda:	d81e      	bhi.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ee6:	e018      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee8:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a61      	ldr	r2, [pc, #388]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef4:	e015      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa73 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f06:	e00c      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fb5e 	bl	80035d0 <RCCEx_PLLSAI2_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f28:	4b52      	ldr	r3, [pc, #328]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f36:	494f      	ldr	r1, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f3e:	e001      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a0 	beq.w	8003092 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a40      	ldr	r2, [pc, #256]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f84:	2301      	movs	r3, #1
 8002f86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f88:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f94:	f7fe fd70 	bl	8001a78 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe fd6c 	bl	8001a78 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	74fb      	strb	r3, [r7, #19]
        break;
 8002fae:	e005      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d15c      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d019      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a20      	ldr	r2, [pc, #128]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fd2b 	bl	8001a78 <HAL_GetTick>
 8003022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003024:	e00b      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe fd27 	bl	8001a78 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d902      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	74fb      	strb	r3, [r7, #19]
            break;
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ec      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	4904      	ldr	r1, [pc, #16]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800306a:	e009      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	74bb      	strb	r3, [r7, #18]
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003080:	7c7b      	ldrb	r3, [r7, #17]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003086:	4b9e      	ldr	r3, [pc, #632]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4a9d      	ldr	r2, [pc, #628]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309e:	4b98      	ldr	r3, [pc, #608]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 0203 	bic.w	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	4994      	ldr	r1, [pc, #592]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c0:	4b8f      	ldr	r3, [pc, #572]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f023 020c 	bic.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	498c      	ldr	r1, [pc, #560]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e2:	4b87      	ldr	r3, [pc, #540]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	4983      	ldr	r1, [pc, #524]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003104:	4b7e      	ldr	r3, [pc, #504]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	497b      	ldr	r1, [pc, #492]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003126:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003134:	4972      	ldr	r1, [pc, #456]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003148:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	496a      	ldr	r1, [pc, #424]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316a:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	4961      	ldr	r1, [pc, #388]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800318c:	4b5c      	ldr	r3, [pc, #368]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	4959      	ldr	r1, [pc, #356]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	4950      	ldr	r1, [pc, #320]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	4948      	ldr	r1, [pc, #288]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	493f      	ldr	r1, [pc, #252]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d028      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003214:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	4937      	ldr	r1, [pc, #220]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003232:	d106      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003234:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800323e:	60d3      	str	r3, [r2, #12]
 8003240:	e011      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800324a:	d10c      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	2101      	movs	r1, #1
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f8c8 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d028      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	491f      	ldr	r1, [pc, #124]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003290:	d106      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800329c:	60d3      	str	r3, [r2, #12]
 800329e:	e011      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f899 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	4908      	ldr	r1, [pc, #32]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ee:	d109      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a02      	ldr	r2, [pc, #8]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032fa:	60d3      	str	r3, [r2, #12]
 80032fc:	e014      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330c:	d10c      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f867 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02f      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003342:	4928      	ldr	r1, [pc, #160]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800334e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003352:	d10d      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f844 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d014      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	74bb      	strb	r3, [r7, #18]
 800336e:	e011      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3320      	adds	r3, #32
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f925 	bl	80035d0 <RCCEx_PLLSAI2_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ae:	490d      	ldr	r1, [pc, #52]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d2:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033da:	7cbb      	ldrb	r3, [r7, #18]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000

080033e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f6:	4b75      	ldr	r3, [pc, #468]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003402:	4b72      	ldr	r3, [pc, #456]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d10d      	bne.n	800342e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
       ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
       ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d047      	beq.n	80034be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e044      	b.n	80034be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d018      	beq.n	800346e <RCCEx_PLLSAI1_Config+0x86>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d825      	bhi.n	800348c <RCCEx_PLLSAI1_Config+0xa4>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d002      	beq.n	800344a <RCCEx_PLLSAI1_Config+0x62>
 8003444:	2b02      	cmp	r3, #2
 8003446:	d009      	beq.n	800345c <RCCEx_PLLSAI1_Config+0x74>
 8003448:	e020      	b.n	800348c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344a:	4b60      	ldr	r3, [pc, #384]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11d      	bne.n	8003492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345a:	e01a      	b.n	8003492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800345c:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346c:	e013      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347a:	4b54      	ldr	r3, [pc, #336]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348a:	e006      	b.n	800349a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e004      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349a:	bf00      	nop
    }

    if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	430b      	orrs	r3, r1
 80034b8:	4944      	ldr	r1, [pc, #272]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d17d      	bne.n	80035c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a40      	ldr	r2, [pc, #256]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d0:	f7fe fad2 	bl	8001a78 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d6:	e009      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d8:	f7fe face 	bl	8001a78 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d902      	bls.n	80034ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ea:	e005      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ec:	4b37      	ldr	r3, [pc, #220]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ef      	bne.n	80034d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d160      	bne.n	80035c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d111      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003504:	4b31      	ldr	r3, [pc, #196]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800350c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	0211      	lsls	r1, r2, #8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	0912      	lsrs	r2, r2, #4
 800351c:	0452      	lsls	r2, r2, #17
 800351e:	430a      	orrs	r2, r1
 8003520:	492a      	ldr	r1, [pc, #168]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]
 8003526:	e027      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d112      	bne.n	8003554 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003536:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6892      	ldr	r2, [r2, #8]
 800353e:	0211      	lsls	r1, r2, #8
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6912      	ldr	r2, [r2, #16]
 8003544:	0852      	lsrs	r2, r2, #1
 8003546:	3a01      	subs	r2, #1
 8003548:	0552      	lsls	r2, r2, #21
 800354a:	430a      	orrs	r2, r1
 800354c:	491f      	ldr	r1, [pc, #124]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	610b      	str	r3, [r1, #16]
 8003552:	e011      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800355c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	0211      	lsls	r1, r2, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6952      	ldr	r2, [r2, #20]
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	0652      	lsls	r2, r2, #25
 8003570:	430a      	orrs	r2, r1
 8003572:	4916      	ldr	r1, [pc, #88]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a13      	ldr	r2, [pc, #76]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003582:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fa78 	bl	8001a78 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358c:	f7fe fa74 	bl	8001a78 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
          break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ef      	beq.n	800358c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	4904      	ldr	r1, [pc, #16]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035de:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ea:	4b67      	ldr	r3, [pc, #412]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
       ||
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003602:	4b61      	ldr	r3, [pc, #388]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
       ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d047      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e044      	b.n	80036a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d018      	beq.n	8003656 <RCCEx_PLLSAI2_Config+0x86>
 8003624:	2b03      	cmp	r3, #3
 8003626:	d825      	bhi.n	8003674 <RCCEx_PLLSAI2_Config+0xa4>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d002      	beq.n	8003632 <RCCEx_PLLSAI2_Config+0x62>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d009      	beq.n	8003644 <RCCEx_PLLSAI2_Config+0x74>
 8003630:	e020      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003632:	4b55      	ldr	r3, [pc, #340]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11d      	bne.n	800367a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003642:	e01a      	b.n	800367a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d116      	bne.n	800367e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e013      	b.n	800367e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003656:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003672:	e006      	b.n	8003682 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e004      	b.n	8003684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003682:	bf00      	nop
    }

    if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368a:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	430b      	orrs	r3, r1
 80036a0:	4939      	ldr	r1, [pc, #228]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d167      	bne.n	800377c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a35      	ldr	r2, [pc, #212]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe f9de 	bl	8001a78 <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036c0:	f7fe f9da 	bl	8001a78 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
        break;
 80036d2:	e005      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d4:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ef      	bne.n	80036c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d14a      	bne.n	800377c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d111      	bne.n	8003710 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	0912      	lsrs	r2, r2, #4
 8003704:	0452      	lsls	r2, r2, #17
 8003706:	430a      	orrs	r2, r1
 8003708:	491f      	ldr	r1, [pc, #124]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	614b      	str	r3, [r1, #20]
 800370e:	e011      	b.n	8003734 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003718:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	0211      	lsls	r1, r2, #8
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6912      	ldr	r2, [r2, #16]
 8003726:	0852      	lsrs	r2, r2, #1
 8003728:	3a01      	subs	r2, #1
 800372a:	0652      	lsls	r2, r2, #25
 800372c:	430a      	orrs	r2, r1
 800372e:	4916      	ldr	r1, [pc, #88]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a13      	ldr	r2, [pc, #76]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fe f99a 	bl	8001a78 <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003746:	e009      	b.n	800375c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003748:	f7fe f996 	bl	8001a78 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d902      	bls.n	800375c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	73fb      	strb	r3, [r7, #15]
          break;
 800375a:	e005      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ef      	beq.n	8003748 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4904      	ldr	r1, [pc, #16]	; (8003788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	4313      	orrs	r3, r2
 800377a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e040      	b.n	8003820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fe14 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fc64 	bl	8004098 <UART_SetConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 ff10 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 ff97 	bl	800474c <UART_CheckIdleState>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383c:	2b20      	cmp	r3, #32
 800383e:	f040 80bf 	bne.w	80039c0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_UART_Receive+0x26>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0b7      	b.n	80039c2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_UART_Receive+0x38>
 800385c:	2302      	movs	r3, #2
 800385e:	e0b0      	b.n	80039c2 <HAL_UART_Receive+0x19a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2222      	movs	r2, #34	; 0x22
 8003874:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387c:	f7fe f8fc 	bl	8001a78 <HAL_GetTick>
 8003880:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	d10e      	bne.n	80038ba <HAL_UART_Receive+0x92>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_UART_Receive+0x88>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80038aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038ae:	e02d      	b.n	800390c <HAL_UART_Receive+0xe4>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038b8:	e028      	b.n	800390c <HAL_UART_Receive+0xe4>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <HAL_UART_Receive+0xb6>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <HAL_UART_Receive+0xac>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038d2:	e01b      	b.n	800390c <HAL_UART_Receive+0xe4>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	227f      	movs	r2, #127	; 0x7f
 80038d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038dc:	e016      	b.n	800390c <HAL_UART_Receive+0xe4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e6:	d10d      	bne.n	8003904 <HAL_UART_Receive+0xdc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_UART_Receive+0xd2>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	227f      	movs	r2, #127	; 0x7f
 80038f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038f8:	e008      	b.n	800390c <HAL_UART_Receive+0xe4>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	223f      	movs	r2, #63	; 0x3f
 80038fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003902:	e003      	b.n	800390c <HAL_UART_Receive+0xe4>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003912:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d108      	bne.n	8003930 <HAL_UART_Receive+0x108>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e003      	b.n	8003938 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003940:	e033      	b.n	80039aa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2120      	movs	r1, #32
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 ff46 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e032      	b.n	80039c2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003968:	b29a      	uxth	r2, r3
 800396a:	8a7b      	ldrh	r3, [r7, #18]
 800396c:	4013      	ands	r3, r2
 800396e:	b29a      	uxth	r2, r3
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	3302      	adds	r3, #2
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e00d      	b.n	8003998 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003982:	b29b      	uxth	r3, r3
 8003984:	b2da      	uxtb	r2, r3
 8003986:	8a7b      	ldrh	r3, [r7, #18]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4013      	ands	r3, r2
 800398c:	b2da      	uxtb	r2, r3
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3301      	adds	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1c5      	bne.n	8003942 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b08b      	sub	sp, #44	; 0x2c
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d156      	bne.n	8003a90 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_UART_Transmit_IT+0x22>
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e04f      	b.n	8003a92 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UART_Transmit_IT+0x34>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e048      	b.n	8003a92 <HAL_UART_Transmit_IT+0xc6>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2221      	movs	r2, #33	; 0x21
 8003a30:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d107      	bne.n	8003a4c <HAL_UART_Transmit_IT+0x80>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_UART_Transmit_IT+0xd4>)
 8003a48:	669a      	str	r2, [r3, #104]	; 0x68
 8003a4a:	e002      	b.n	8003a52 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_UART_Transmit_IT+0xd8>)
 8003a50:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	613b      	str	r3, [r7, #16]
   return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	69f9      	ldr	r1, [r7, #28]
 8003a7e:	6a3a      	ldr	r2, [r7, #32]
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e6      	bne.n	8003a5a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	372c      	adds	r7, #44	; 0x2c
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	08004b11 	.word	0x08004b11
 8003aa4:	08004a59 	.word	0x08004a59

08003aa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b0ba      	sub	sp, #232	; 0xe8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ace:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ad2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d115      	bne.n	8003b10 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00f      	beq.n	8003b10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 82a6 	beq.w	8004052 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
      }
      return;
 8003b0e:	e2a0      	b.n	8004052 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8117 	beq.w	8003d48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_UART_IRQHandler+0x298>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 810a 	beq.w	8003d48 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d011      	beq.n	8003b64 <HAL_UART_IRQHandler+0xbc>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d011      	beq.n	8003b94 <HAL_UART_IRQHandler+0xec>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2202      	movs	r2, #2
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d011      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x11c>
 8003ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d017      	beq.n	8003c00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2208      	movs	r2, #8
 8003bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf6:	f043 0208 	orr.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_UART_IRQHandler+0x18a>
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 820c 	beq.w	8004056 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04f      	beq.n	8003d2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fe6b 	bl	8004966 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d141      	bne.n	8003d22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1d9      	bne.n	8003c9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <HAL_UART_IRQHandler+0x29c>)
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe f839 	bl	8001d76 <HAL_DMA_Abort_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d017      	beq.n	8003d3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d14:	4610      	mov	r0, r2
 8003d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00f      	b.n	8003d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9a6 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e00b      	b.n	8003d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9a2 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e007      	b.n	8003d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f99e 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003d38:	e18d      	b.n	8004056 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3a:	bf00      	nop
    return;
 8003d3c:	e18b      	b.n	8004056 <HAL_UART_IRQHandler+0x5ae>
 8003d3e:	bf00      	nop
 8003d40:	04000120 	.word	0x04000120
 8003d44:	08004a2d 	.word	0x08004a2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 8146 	bne.w	8003fde <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 813f 	beq.w	8003fde <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8138 	beq.w	8003fde <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2210      	movs	r2, #16
 8003d74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	f040 80b4 	bne.w	8003eee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 815f 	beq.w	800405a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003da6:	429a      	cmp	r2, r3
 8003da8:	f080 8157 	bcs.w	800405a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 8085 	bne.w	8003ed2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003df6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1da      	bne.n	8003dc8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e1      	bne.n	8003e12 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
 8003ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e4      	bne.n	8003e92 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd ff14 	bl	8001cfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8ca 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eec:	e0b5      	b.n	800405a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80a7 	beq.w	800405e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a2 	beq.w	800405e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e4      	bne.n	8003f1a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3308      	adds	r3, #8
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f74:	633a      	str	r2, [r7, #48]	; 0x30
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e3      	bne.n	8003f50 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e4      	bne.n	8003f9a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f852 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fdc:	e03f      	b.n	800405e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <HAL_UART_IRQHandler+0x560>
 8003fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fe0f 	bl	8004c24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004006:	e02d      	b.n	8004064 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00e      	beq.n	8004032 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
    }
    return;
 8004030:	e017      	b.n	8004062 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d012      	beq.n	8004064 <HAL_UART_IRQHandler+0x5bc>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fdc0 	bl	8004bd0 <UART_EndTransmit_IT>
    return;
 8004050:	e008      	b.n	8004064 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004052:	bf00      	nop
 8004054:	e006      	b.n	8004064 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004056:	bf00      	nop
 8004058:	e004      	b.n	8004064 <HAL_UART_IRQHandler+0x5bc>
      return;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_UART_IRQHandler+0x5bc>
      return;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004062:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004064:	37e8      	adds	r7, #232	; 0xe8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b08a      	sub	sp, #40	; 0x28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4313      	orrs	r3, r2
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4ba4      	ldr	r3, [pc, #656]	; (8004358 <UART_SetConfig+0x2c0>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a99      	ldr	r2, [pc, #612]	; (800435c <UART_SetConfig+0x2c4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	4313      	orrs	r3, r2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a90      	ldr	r2, [pc, #576]	; (8004360 <UART_SetConfig+0x2c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d126      	bne.n	8004170 <UART_SetConfig+0xd8>
 8004122:	4b90      	ldr	r3, [pc, #576]	; (8004364 <UART_SetConfig+0x2cc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b03      	cmp	r3, #3
 800412e:	d81b      	bhi.n	8004168 <UART_SetConfig+0xd0>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <UART_SetConfig+0xa0>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004149 	.word	0x08004149
 800413c:	08004159 	.word	0x08004159
 8004140:	08004151 	.word	0x08004151
 8004144:	08004161 	.word	0x08004161
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414e:	e116      	b.n	800437e <UART_SetConfig+0x2e6>
 8004150:	2302      	movs	r3, #2
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e112      	b.n	800437e <UART_SetConfig+0x2e6>
 8004158:	2304      	movs	r3, #4
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e10e      	b.n	800437e <UART_SetConfig+0x2e6>
 8004160:	2308      	movs	r3, #8
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e10a      	b.n	800437e <UART_SetConfig+0x2e6>
 8004168:	2310      	movs	r3, #16
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e106      	b.n	800437e <UART_SetConfig+0x2e6>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7c      	ldr	r2, [pc, #496]	; (8004368 <UART_SetConfig+0x2d0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d138      	bne.n	80041ec <UART_SetConfig+0x154>
 800417a:	4b7a      	ldr	r3, [pc, #488]	; (8004364 <UART_SetConfig+0x2cc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d82d      	bhi.n	80041e4 <UART_SetConfig+0x14c>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0xf8>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041e5 	.word	0x080041e5
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041e5 	.word	0x080041e5
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041e5 	.word	0x080041e5
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e0d8      	b.n	800437e <UART_SetConfig+0x2e6>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e0d4      	b.n	800437e <UART_SetConfig+0x2e6>
 80041d4:	2304      	movs	r3, #4
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e0d0      	b.n	800437e <UART_SetConfig+0x2e6>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e0cc      	b.n	800437e <UART_SetConfig+0x2e6>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e0c8      	b.n	800437e <UART_SetConfig+0x2e6>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5e      	ldr	r2, [pc, #376]	; (800436c <UART_SetConfig+0x2d4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d125      	bne.n	8004242 <UART_SetConfig+0x1aa>
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <UART_SetConfig+0x2cc>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d016      	beq.n	8004232 <UART_SetConfig+0x19a>
 8004204:	2b30      	cmp	r3, #48	; 0x30
 8004206:	d818      	bhi.n	800423a <UART_SetConfig+0x1a2>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d00a      	beq.n	8004222 <UART_SetConfig+0x18a>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d814      	bhi.n	800423a <UART_SetConfig+0x1a2>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <UART_SetConfig+0x182>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d008      	beq.n	800422a <UART_SetConfig+0x192>
 8004218:	e00f      	b.n	800423a <UART_SetConfig+0x1a2>
 800421a:	2300      	movs	r3, #0
 800421c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004220:	e0ad      	b.n	800437e <UART_SetConfig+0x2e6>
 8004222:	2302      	movs	r3, #2
 8004224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004228:	e0a9      	b.n	800437e <UART_SetConfig+0x2e6>
 800422a:	2304      	movs	r3, #4
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004230:	e0a5      	b.n	800437e <UART_SetConfig+0x2e6>
 8004232:	2308      	movs	r3, #8
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004238:	e0a1      	b.n	800437e <UART_SetConfig+0x2e6>
 800423a:	2310      	movs	r3, #16
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004240:	e09d      	b.n	800437e <UART_SetConfig+0x2e6>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4a      	ldr	r2, [pc, #296]	; (8004370 <UART_SetConfig+0x2d8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0x200>
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004256:	2bc0      	cmp	r3, #192	; 0xc0
 8004258:	d016      	beq.n	8004288 <UART_SetConfig+0x1f0>
 800425a:	2bc0      	cmp	r3, #192	; 0xc0
 800425c:	d818      	bhi.n	8004290 <UART_SetConfig+0x1f8>
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d00a      	beq.n	8004278 <UART_SetConfig+0x1e0>
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d814      	bhi.n	8004290 <UART_SetConfig+0x1f8>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <UART_SetConfig+0x1d8>
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d008      	beq.n	8004280 <UART_SetConfig+0x1e8>
 800426e:	e00f      	b.n	8004290 <UART_SetConfig+0x1f8>
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e082      	b.n	800437e <UART_SetConfig+0x2e6>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e07e      	b.n	800437e <UART_SetConfig+0x2e6>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e07a      	b.n	800437e <UART_SetConfig+0x2e6>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e076      	b.n	800437e <UART_SetConfig+0x2e6>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e072      	b.n	800437e <UART_SetConfig+0x2e6>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a35      	ldr	r2, [pc, #212]	; (8004374 <UART_SetConfig+0x2dc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d12a      	bne.n	80042f8 <UART_SetConfig+0x260>
 80042a2:	4b30      	ldr	r3, [pc, #192]	; (8004364 <UART_SetConfig+0x2cc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b0:	d01a      	beq.n	80042e8 <UART_SetConfig+0x250>
 80042b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b6:	d81b      	bhi.n	80042f0 <UART_SetConfig+0x258>
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d00c      	beq.n	80042d8 <UART_SetConfig+0x240>
 80042be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c2:	d815      	bhi.n	80042f0 <UART_SetConfig+0x258>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <UART_SetConfig+0x238>
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042cc:	d008      	beq.n	80042e0 <UART_SetConfig+0x248>
 80042ce:	e00f      	b.n	80042f0 <UART_SetConfig+0x258>
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e052      	b.n	800437e <UART_SetConfig+0x2e6>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e04e      	b.n	800437e <UART_SetConfig+0x2e6>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e04a      	b.n	800437e <UART_SetConfig+0x2e6>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e046      	b.n	800437e <UART_SetConfig+0x2e6>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e042      	b.n	800437e <UART_SetConfig+0x2e6>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <UART_SetConfig+0x2c4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d13a      	bne.n	8004378 <UART_SetConfig+0x2e0>
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <UART_SetConfig+0x2cc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800430c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004310:	d01a      	beq.n	8004348 <UART_SetConfig+0x2b0>
 8004312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004316:	d81b      	bhi.n	8004350 <UART_SetConfig+0x2b8>
 8004318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431c:	d00c      	beq.n	8004338 <UART_SetConfig+0x2a0>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d815      	bhi.n	8004350 <UART_SetConfig+0x2b8>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <UART_SetConfig+0x298>
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d008      	beq.n	8004340 <UART_SetConfig+0x2a8>
 800432e:	e00f      	b.n	8004350 <UART_SetConfig+0x2b8>
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e022      	b.n	800437e <UART_SetConfig+0x2e6>
 8004338:	2302      	movs	r3, #2
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e01e      	b.n	800437e <UART_SetConfig+0x2e6>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e01a      	b.n	800437e <UART_SetConfig+0x2e6>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e016      	b.n	800437e <UART_SetConfig+0x2e6>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e012      	b.n	800437e <UART_SetConfig+0x2e6>
 8004358:	efff69f3 	.word	0xefff69f3
 800435c:	40008000 	.word	0x40008000
 8004360:	40013800 	.word	0x40013800
 8004364:	40021000 	.word	0x40021000
 8004368:	40004400 	.word	0x40004400
 800436c:	40004800 	.word	0x40004800
 8004370:	40004c00 	.word	0x40004c00
 8004374:	40005000 	.word	0x40005000
 8004378:	2310      	movs	r3, #16
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a9f      	ldr	r2, [pc, #636]	; (8004600 <UART_SetConfig+0x568>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d17a      	bne.n	800447e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800438c:	2b08      	cmp	r3, #8
 800438e:	d824      	bhi.n	80043da <UART_SetConfig+0x342>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x300>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043cb 	.word	0x080043cb
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043db 	.word	0x080043db
 80043b8:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe fc9e 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
        break;
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b8f      	ldr	r3, [pc, #572]	; (8004604 <UART_SetConfig+0x56c>)
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fe fbff 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 80043ce:	61f8      	str	r0, [r7, #28]
        break;
 80043d0:	e009      	b.n	80043e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e005      	b.n	80043e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80fb 	beq.w	80045e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d305      	bcc.n	800440a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d903      	bls.n	8004412 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004410:	e0e8      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2200      	movs	r2, #0
 8004416:	461c      	mov	r4, r3
 8004418:	4615      	mov	r5, r2
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	022b      	lsls	r3, r5, #8
 8004424:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004428:	0222      	lsls	r2, r4, #8
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	6849      	ldr	r1, [r1, #4]
 800442e:	0849      	lsrs	r1, r1, #1
 8004430:	2000      	movs	r0, #0
 8004432:	4688      	mov	r8, r1
 8004434:	4681      	mov	r9, r0
 8004436:	eb12 0a08 	adds.w	sl, r2, r8
 800443a:	eb43 0b09 	adc.w	fp, r3, r9
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444c:	4650      	mov	r0, sl
 800444e:	4659      	mov	r1, fp
 8004450:	f7fb ff16 	bl	8000280 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004462:	d308      	bcc.n	8004476 <UART_SetConfig+0x3de>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446a:	d204      	bcs.n	8004476 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e0b6      	b.n	80045e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800447c:	e0b2      	b.n	80045e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d15e      	bne.n	8004546 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800448c:	2b08      	cmp	r3, #8
 800448e:	d828      	bhi.n	80044e2 <UART_SetConfig+0x44a>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x400>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	080044e3 	.word	0x080044e3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044e3 	.word	0x080044e3
 80044b4:	080044e3 	.word	0x080044e3
 80044b8:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044bc:	f7fe fc1e 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 80044c0:	61f8      	str	r0, [r7, #28]
        break;
 80044c2:	e014      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c4:	f7fe fc30 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e010      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044cc:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <UART_SetConfig+0x56c>)
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e00d      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fe fb7b 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 80044d6:	61f8      	str	r0, [r7, #28]
        break;
 80044d8:	e009      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61fb      	str	r3, [r7, #28]
        break;
 80044e0:	e005      	b.n	80044ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d077      	beq.n	80045e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005a      	lsls	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	441a      	add	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d916      	bls.n	800453e <UART_SetConfig+0x4a6>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d212      	bcs.n	800453e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f023 030f 	bic.w	r3, r3, #15
 8004520:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	b29a      	uxth	r2, r3
 800452e:	8afb      	ldrh	r3, [r7, #22]
 8004530:	4313      	orrs	r3, r2
 8004532:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	8afa      	ldrh	r2, [r7, #22]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	e052      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004544:	e04e      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800454a:	2b08      	cmp	r3, #8
 800454c:	d827      	bhi.n	800459e <UART_SetConfig+0x506>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x4bc>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	0800459f 	.word	0x0800459f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
 8004574:	08004597 	.word	0x08004597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fbc0 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e014      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fe fbd2 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e010      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <UART_SetConfig+0x56c>)
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e00d      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458e:	f7fe fb1d 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004592:	61f8      	str	r0, [r7, #28]
        break;
 8004594:	e009      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045a8:	bf00      	nop
    }

    if (pclk != 0U)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d019      	beq.n	80045e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	085a      	lsrs	r2, r3, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	441a      	add	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d909      	bls.n	80045de <UART_SetConfig+0x546>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d205      	bcs.n	80045de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e002      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3728      	adds	r7, #40	; 0x28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fe:	bf00      	nop
 8004600:	40008000 	.word	0x40008000
 8004604:	00f42400 	.word	0x00f42400

08004608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d10a      	bne.n	800471e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af02      	add	r7, sp, #8
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800475c:	f7fd f98c 	bl	8001a78 <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10e      	bne.n	800478e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f82d 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e023      	b.n	80047d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b04      	cmp	r3, #4
 800479a:	d10e      	bne.n	80047ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f817 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00d      	b.n	80047d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b09c      	sub	sp, #112	; 0x70
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	e0a5      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	f000 80a1 	beq.w	800493c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fd f93d 	bl	8001a78 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <UART_WaitOnFlagUntilTimeout+0x32>
 800480a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480c:	2b00      	cmp	r3, #0
 800480e:	d13e      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004824:	667b      	str	r3, [r7, #100]	; 0x64
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800482e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004830:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	663b      	str	r3, [r7, #96]	; 0x60
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004862:	64ba      	str	r2, [r7, #72]	; 0x48
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e067      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d04f      	beq.n	800493c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048aa:	d147      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
 80048d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e6      	bne.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	613b      	str	r3, [r7, #16]
   return(result);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004908:	623a      	str	r2, [r7, #32]
 800490a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	69f9      	ldr	r1, [r7, #28]
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	61bb      	str	r3, [r7, #24]
   return(result);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e5      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e010      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	429a      	cmp	r2, r3
 8004958:	f43f af4a 	beq.w	80047f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3770      	adds	r7, #112	; 0x70
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004966:	b480      	push	{r7}
 8004968:	b095      	sub	sp, #84	; 0x54
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	643b      	str	r3, [r7, #64]	; 0x40
 800498e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e6      	bne.n	800496e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3308      	adds	r3, #8
 80049a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d118      	bne.n	8004a0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f023 0310 	bic.w	r3, r3, #16
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	613b      	str	r3, [r7, #16]
   return(result);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e6      	bne.n	80049dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a20:	bf00      	nop
 8004a22:	3754      	adds	r7, #84	; 0x54
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7ff fb0e 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b08f      	sub	sp, #60	; 0x3c
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a64:	2b21      	cmp	r3, #33	; 0x21
 8004a66:	d14d      	bne.n	8004b04 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d132      	bne.n	8004ada <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ad8:	e014      	b.n	8004b04 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	781a      	ldrb	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004b04:	bf00      	nop
 8004b06:	373c      	adds	r7, #60	; 0x3c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b091      	sub	sp, #68	; 0x44
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1c:	2b21      	cmp	r3, #33	; 0x21
 8004b1e:	d151      	bne.n	8004bc4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d132      	bne.n	8004b92 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e6      	bne.n	8004b2c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e6      	bne.n	8004b5e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004b90:	e018      	b.n	8004bc4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004bc4:	bf00      	nop
 8004bc6:	3744      	adds	r7, #68	; 0x44
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	613b      	str	r3, [r7, #16]
   return(result);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e6      	bne.n	8004bd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc f94d 	bl	8000eb6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1c:	bf00      	nop
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <__errno>:
 8004c38:	4b01      	ldr	r3, [pc, #4]	; (8004c40 <__errno+0x8>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	2000000c 	.word	0x2000000c

08004c44 <__libc_init_array>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	4d0d      	ldr	r5, [pc, #52]	; (8004c7c <__libc_init_array+0x38>)
 8004c48:	4c0d      	ldr	r4, [pc, #52]	; (8004c80 <__libc_init_array+0x3c>)
 8004c4a:	1b64      	subs	r4, r4, r5
 8004c4c:	10a4      	asrs	r4, r4, #2
 8004c4e:	2600      	movs	r6, #0
 8004c50:	42a6      	cmp	r6, r4
 8004c52:	d109      	bne.n	8004c68 <__libc_init_array+0x24>
 8004c54:	4d0b      	ldr	r5, [pc, #44]	; (8004c84 <__libc_init_array+0x40>)
 8004c56:	4c0c      	ldr	r4, [pc, #48]	; (8004c88 <__libc_init_array+0x44>)
 8004c58:	f001 f84e 	bl	8005cf8 <_init>
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	2600      	movs	r6, #0
 8004c62:	42a6      	cmp	r6, r4
 8004c64:	d105      	bne.n	8004c72 <__libc_init_array+0x2e>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6c:	4798      	blx	r3
 8004c6e:	3601      	adds	r6, #1
 8004c70:	e7ee      	b.n	8004c50 <__libc_init_array+0xc>
 8004c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c76:	4798      	blx	r3
 8004c78:	3601      	adds	r6, #1
 8004c7a:	e7f2      	b.n	8004c62 <__libc_init_array+0x1e>
 8004c7c:	08006190 	.word	0x08006190
 8004c80:	08006190 	.word	0x08006190
 8004c84:	08006190 	.word	0x08006190
 8004c88:	08006194 	.word	0x08006194

08004c8c <memset>:
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <memset+0xa>
 8004c94:	4770      	bx	lr
 8004c96:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9a:	e7f9      	b.n	8004c90 <memset+0x4>

08004c9c <iprintf>:
 8004c9c:	b40f      	push	{r0, r1, r2, r3}
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <iprintf+0x2c>)
 8004ca0:	b513      	push	{r0, r1, r4, lr}
 8004ca2:	681c      	ldr	r4, [r3, #0]
 8004ca4:	b124      	cbz	r4, 8004cb0 <iprintf+0x14>
 8004ca6:	69a3      	ldr	r3, [r4, #24]
 8004ca8:	b913      	cbnz	r3, 8004cb0 <iprintf+0x14>
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fa88 	bl	80051c0 <__sinit>
 8004cb0:	ab05      	add	r3, sp, #20
 8004cb2:	9a04      	ldr	r2, [sp, #16]
 8004cb4:	68a1      	ldr	r1, [r4, #8]
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 fc91 	bl	80055e0 <_vfiprintf_r>
 8004cbe:	b002      	add	sp, #8
 8004cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc4:	b004      	add	sp, #16
 8004cc6:	4770      	bx	lr
 8004cc8:	2000000c 	.word	0x2000000c

08004ccc <_puts_r>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	460e      	mov	r6, r1
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	b118      	cbz	r0, 8004cdc <_puts_r+0x10>
 8004cd4:	6983      	ldr	r3, [r0, #24]
 8004cd6:	b90b      	cbnz	r3, 8004cdc <_puts_r+0x10>
 8004cd8:	f000 fa72 	bl	80051c0 <__sinit>
 8004cdc:	69ab      	ldr	r3, [r5, #24]
 8004cde:	68ac      	ldr	r4, [r5, #8]
 8004ce0:	b913      	cbnz	r3, 8004ce8 <_puts_r+0x1c>
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 fa6c 	bl	80051c0 <__sinit>
 8004ce8:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <_puts_r+0xd0>)
 8004cea:	429c      	cmp	r4, r3
 8004cec:	d120      	bne.n	8004d30 <_puts_r+0x64>
 8004cee:	686c      	ldr	r4, [r5, #4]
 8004cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cf2:	07db      	lsls	r3, r3, #31
 8004cf4:	d405      	bmi.n	8004d02 <_puts_r+0x36>
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	0598      	lsls	r0, r3, #22
 8004cfa:	d402      	bmi.n	8004d02 <_puts_r+0x36>
 8004cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cfe:	f000 fafd 	bl	80052fc <__retarget_lock_acquire_recursive>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	0719      	lsls	r1, r3, #28
 8004d06:	d51d      	bpl.n	8004d44 <_puts_r+0x78>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	b1db      	cbz	r3, 8004d44 <_puts_r+0x78>
 8004d0c:	3e01      	subs	r6, #1
 8004d0e:	68a3      	ldr	r3, [r4, #8]
 8004d10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d14:	3b01      	subs	r3, #1
 8004d16:	60a3      	str	r3, [r4, #8]
 8004d18:	bb39      	cbnz	r1, 8004d6a <_puts_r+0x9e>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da38      	bge.n	8004d90 <_puts_r+0xc4>
 8004d1e:	4622      	mov	r2, r4
 8004d20:	210a      	movs	r1, #10
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 f872 	bl	8004e0c <__swbuf_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d011      	beq.n	8004d50 <_puts_r+0x84>
 8004d2c:	250a      	movs	r5, #10
 8004d2e:	e011      	b.n	8004d54 <_puts_r+0x88>
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <_puts_r+0xd4>)
 8004d32:	429c      	cmp	r4, r3
 8004d34:	d101      	bne.n	8004d3a <_puts_r+0x6e>
 8004d36:	68ac      	ldr	r4, [r5, #8]
 8004d38:	e7da      	b.n	8004cf0 <_puts_r+0x24>
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <_puts_r+0xd8>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	bf08      	it	eq
 8004d40:	68ec      	ldreq	r4, [r5, #12]
 8004d42:	e7d5      	b.n	8004cf0 <_puts_r+0x24>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f8b2 	bl	8004eb0 <__swsetup_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d0dd      	beq.n	8004d0c <_puts_r+0x40>
 8004d50:	f04f 35ff 	mov.w	r5, #4294967295
 8004d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d56:	07da      	lsls	r2, r3, #31
 8004d58:	d405      	bmi.n	8004d66 <_puts_r+0x9a>
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	059b      	lsls	r3, r3, #22
 8004d5e:	d402      	bmi.n	8004d66 <_puts_r+0x9a>
 8004d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d62:	f000 facc 	bl	80052fe <__retarget_lock_release_recursive>
 8004d66:	4628      	mov	r0, r5
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da04      	bge.n	8004d78 <_puts_r+0xac>
 8004d6e:	69a2      	ldr	r2, [r4, #24]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	dc06      	bgt.n	8004d82 <_puts_r+0xb6>
 8004d74:	290a      	cmp	r1, #10
 8004d76:	d004      	beq.n	8004d82 <_puts_r+0xb6>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	7019      	strb	r1, [r3, #0]
 8004d80:	e7c5      	b.n	8004d0e <_puts_r+0x42>
 8004d82:	4622      	mov	r2, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f841 	bl	8004e0c <__swbuf_r>
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d1bf      	bne.n	8004d0e <_puts_r+0x42>
 8004d8e:	e7df      	b.n	8004d50 <_puts_r+0x84>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	250a      	movs	r5, #10
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	701d      	strb	r5, [r3, #0]
 8004d9a:	e7db      	b.n	8004d54 <_puts_r+0x88>
 8004d9c:	08006114 	.word	0x08006114
 8004da0:	08006134 	.word	0x08006134
 8004da4:	080060f4 	.word	0x080060f4

08004da8 <puts>:
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <puts+0xc>)
 8004daa:	4601      	mov	r1, r0
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	f7ff bf8d 	b.w	8004ccc <_puts_r>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c

08004db8 <strncmp>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	b17a      	cbz	r2, 8004ddc <strncmp+0x24>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	3901      	subs	r1, #1
 8004dc0:	1884      	adds	r4, r0, r2
 8004dc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004dc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004dca:	4290      	cmp	r0, r2
 8004dcc:	d101      	bne.n	8004dd2 <strncmp+0x1a>
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	d101      	bne.n	8004dd6 <strncmp+0x1e>
 8004dd2:	1a80      	subs	r0, r0, r2
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d1f3      	bne.n	8004dc2 <strncmp+0xa>
 8004dda:	e7fa      	b.n	8004dd2 <strncmp+0x1a>
 8004ddc:	4610      	mov	r0, r2
 8004dde:	e7f9      	b.n	8004dd4 <strncmp+0x1c>

08004de0 <strstr>:
 8004de0:	780a      	ldrb	r2, [r1, #0]
 8004de2:	b570      	push	{r4, r5, r6, lr}
 8004de4:	b96a      	cbnz	r2, 8004e02 <strstr+0x22>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d109      	bne.n	8004e00 <strstr+0x20>
 8004dec:	460c      	mov	r4, r1
 8004dee:	4605      	mov	r5, r0
 8004df0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f6      	beq.n	8004de6 <strstr+0x6>
 8004df8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004dfc:	429e      	cmp	r6, r3
 8004dfe:	d0f7      	beq.n	8004df0 <strstr+0x10>
 8004e00:	3001      	adds	r0, #1
 8004e02:	7803      	ldrb	r3, [r0, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ef      	bne.n	8004de8 <strstr+0x8>
 8004e08:	4618      	mov	r0, r3
 8004e0a:	e7ec      	b.n	8004de6 <strstr+0x6>

08004e0c <__swbuf_r>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	460e      	mov	r6, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	4605      	mov	r5, r0
 8004e14:	b118      	cbz	r0, 8004e1e <__swbuf_r+0x12>
 8004e16:	6983      	ldr	r3, [r0, #24]
 8004e18:	b90b      	cbnz	r3, 8004e1e <__swbuf_r+0x12>
 8004e1a:	f000 f9d1 	bl	80051c0 <__sinit>
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <__swbuf_r+0x98>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	d12b      	bne.n	8004e7c <__swbuf_r+0x70>
 8004e24:	686c      	ldr	r4, [r5, #4]
 8004e26:	69a3      	ldr	r3, [r4, #24]
 8004e28:	60a3      	str	r3, [r4, #8]
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	071a      	lsls	r2, r3, #28
 8004e2e:	d52f      	bpl.n	8004e90 <__swbuf_r+0x84>
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	b36b      	cbz	r3, 8004e90 <__swbuf_r+0x84>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	6820      	ldr	r0, [r4, #0]
 8004e38:	1ac0      	subs	r0, r0, r3
 8004e3a:	6963      	ldr	r3, [r4, #20]
 8004e3c:	b2f6      	uxtb	r6, r6
 8004e3e:	4283      	cmp	r3, r0
 8004e40:	4637      	mov	r7, r6
 8004e42:	dc04      	bgt.n	8004e4e <__swbuf_r+0x42>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 f926 	bl	8005098 <_fflush_r>
 8004e4c:	bb30      	cbnz	r0, 8004e9c <__swbuf_r+0x90>
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	60a3      	str	r3, [r4, #8]
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	701e      	strb	r6, [r3, #0]
 8004e5c:	6963      	ldr	r3, [r4, #20]
 8004e5e:	3001      	adds	r0, #1
 8004e60:	4283      	cmp	r3, r0
 8004e62:	d004      	beq.n	8004e6e <__swbuf_r+0x62>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d506      	bpl.n	8004e78 <__swbuf_r+0x6c>
 8004e6a:	2e0a      	cmp	r6, #10
 8004e6c:	d104      	bne.n	8004e78 <__swbuf_r+0x6c>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 f911 	bl	8005098 <_fflush_r>
 8004e76:	b988      	cbnz	r0, 8004e9c <__swbuf_r+0x90>
 8004e78:	4638      	mov	r0, r7
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <__swbuf_r+0x9c>)
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	d101      	bne.n	8004e86 <__swbuf_r+0x7a>
 8004e82:	68ac      	ldr	r4, [r5, #8]
 8004e84:	e7cf      	b.n	8004e26 <__swbuf_r+0x1a>
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <__swbuf_r+0xa0>)
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	bf08      	it	eq
 8004e8c:	68ec      	ldreq	r4, [r5, #12]
 8004e8e:	e7ca      	b.n	8004e26 <__swbuf_r+0x1a>
 8004e90:	4621      	mov	r1, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f80c 	bl	8004eb0 <__swsetup_r>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d0cb      	beq.n	8004e34 <__swbuf_r+0x28>
 8004e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ea0:	e7ea      	b.n	8004e78 <__swbuf_r+0x6c>
 8004ea2:	bf00      	nop
 8004ea4:	08006114 	.word	0x08006114
 8004ea8:	08006134 	.word	0x08006134
 8004eac:	080060f4 	.word	0x080060f4

08004eb0 <__swsetup_r>:
 8004eb0:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <__swsetup_r+0xcc>)
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	681d      	ldr	r5, [r3, #0]
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	b125      	cbz	r5, 8004ec6 <__swsetup_r+0x16>
 8004ebc:	69ab      	ldr	r3, [r5, #24]
 8004ebe:	b913      	cbnz	r3, 8004ec6 <__swsetup_r+0x16>
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 f97d 	bl	80051c0 <__sinit>
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <__swsetup_r+0xd0>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	d10f      	bne.n	8004eec <__swsetup_r+0x3c>
 8004ecc:	686c      	ldr	r4, [r5, #4]
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed4:	0719      	lsls	r1, r3, #28
 8004ed6:	d42c      	bmi.n	8004f32 <__swsetup_r+0x82>
 8004ed8:	06dd      	lsls	r5, r3, #27
 8004eda:	d411      	bmi.n	8004f00 <__swsetup_r+0x50>
 8004edc:	2309      	movs	r3, #9
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	e03e      	b.n	8004f6a <__swsetup_r+0xba>
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <__swsetup_r+0xd4>)
 8004eee:	429c      	cmp	r4, r3
 8004ef0:	d101      	bne.n	8004ef6 <__swsetup_r+0x46>
 8004ef2:	68ac      	ldr	r4, [r5, #8]
 8004ef4:	e7eb      	b.n	8004ece <__swsetup_r+0x1e>
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <__swsetup_r+0xd8>)
 8004ef8:	429c      	cmp	r4, r3
 8004efa:	bf08      	it	eq
 8004efc:	68ec      	ldreq	r4, [r5, #12]
 8004efe:	e7e6      	b.n	8004ece <__swsetup_r+0x1e>
 8004f00:	0758      	lsls	r0, r3, #29
 8004f02:	d512      	bpl.n	8004f2a <__swsetup_r+0x7a>
 8004f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f06:	b141      	cbz	r1, 8004f1a <__swsetup_r+0x6a>
 8004f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f0c:	4299      	cmp	r1, r3
 8004f0e:	d002      	beq.n	8004f16 <__swsetup_r+0x66>
 8004f10:	4630      	mov	r0, r6
 8004f12:	f000 fa5b 	bl	80053cc <_free_r>
 8004f16:	2300      	movs	r3, #0
 8004f18:	6363      	str	r3, [r4, #52]	; 0x34
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	2300      	movs	r3, #0
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	b94b      	cbnz	r3, 8004f4a <__swsetup_r+0x9a>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	d003      	beq.n	8004f4a <__swsetup_r+0x9a>
 8004f42:	4621      	mov	r1, r4
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 fa01 	bl	800534c <__smakebuf_r>
 8004f4a:	89a0      	ldrh	r0, [r4, #12]
 8004f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f50:	f010 0301 	ands.w	r3, r0, #1
 8004f54:	d00a      	beq.n	8004f6c <__swsetup_r+0xbc>
 8004f56:	2300      	movs	r3, #0
 8004f58:	60a3      	str	r3, [r4, #8]
 8004f5a:	6963      	ldr	r3, [r4, #20]
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	61a3      	str	r3, [r4, #24]
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	b943      	cbnz	r3, 8004f76 <__swsetup_r+0xc6>
 8004f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f68:	d1ba      	bne.n	8004ee0 <__swsetup_r+0x30>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	0781      	lsls	r1, r0, #30
 8004f6e:	bf58      	it	pl
 8004f70:	6963      	ldrpl	r3, [r4, #20]
 8004f72:	60a3      	str	r3, [r4, #8]
 8004f74:	e7f4      	b.n	8004f60 <__swsetup_r+0xb0>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e7f7      	b.n	8004f6a <__swsetup_r+0xba>
 8004f7a:	bf00      	nop
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	08006114 	.word	0x08006114
 8004f84:	08006134 	.word	0x08006134
 8004f88:	080060f4 	.word	0x080060f4

08004f8c <__sflush_r>:
 8004f8c:	898a      	ldrh	r2, [r1, #12]
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	0710      	lsls	r0, r2, #28
 8004f96:	460c      	mov	r4, r1
 8004f98:	d458      	bmi.n	800504c <__sflush_r+0xc0>
 8004f9a:	684b      	ldr	r3, [r1, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dc05      	bgt.n	8004fac <__sflush_r+0x20>
 8004fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dc02      	bgt.n	8004fac <__sflush_r+0x20>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d0f9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fb8:	682f      	ldr	r7, [r5, #0]
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	d032      	beq.n	8005024 <__sflush_r+0x98>
 8004fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	075a      	lsls	r2, r3, #29
 8004fc4:	d505      	bpl.n	8004fd2 <__sflush_r+0x46>
 8004fc6:	6863      	ldr	r3, [r4, #4]
 8004fc8:	1ac0      	subs	r0, r0, r3
 8004fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fcc:	b10b      	cbz	r3, 8004fd2 <__sflush_r+0x46>
 8004fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd0:	1ac0      	subs	r0, r0, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fd8:	6a21      	ldr	r1, [r4, #32]
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b0      	blx	r6
 8004fde:	1c43      	adds	r3, r0, #1
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	d106      	bne.n	8004ff2 <__sflush_r+0x66>
 8004fe4:	6829      	ldr	r1, [r5, #0]
 8004fe6:	291d      	cmp	r1, #29
 8004fe8:	d82c      	bhi.n	8005044 <__sflush_r+0xb8>
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <__sflush_r+0x108>)
 8004fec:	40ca      	lsrs	r2, r1
 8004fee:	07d6      	lsls	r6, r2, #31
 8004ff0:	d528      	bpl.n	8005044 <__sflush_r+0xb8>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	6062      	str	r2, [r4, #4]
 8004ff6:	04d9      	lsls	r1, r3, #19
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	6022      	str	r2, [r4, #0]
 8004ffc:	d504      	bpl.n	8005008 <__sflush_r+0x7c>
 8004ffe:	1c42      	adds	r2, r0, #1
 8005000:	d101      	bne.n	8005006 <__sflush_r+0x7a>
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	b903      	cbnz	r3, 8005008 <__sflush_r+0x7c>
 8005006:	6560      	str	r0, [r4, #84]	; 0x54
 8005008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500a:	602f      	str	r7, [r5, #0]
 800500c:	2900      	cmp	r1, #0
 800500e:	d0ca      	beq.n	8004fa6 <__sflush_r+0x1a>
 8005010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005014:	4299      	cmp	r1, r3
 8005016:	d002      	beq.n	800501e <__sflush_r+0x92>
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f9d7 	bl	80053cc <_free_r>
 800501e:	2000      	movs	r0, #0
 8005020:	6360      	str	r0, [r4, #52]	; 0x34
 8005022:	e7c1      	b.n	8004fa8 <__sflush_r+0x1c>
 8005024:	6a21      	ldr	r1, [r4, #32]
 8005026:	2301      	movs	r3, #1
 8005028:	4628      	mov	r0, r5
 800502a:	47b0      	blx	r6
 800502c:	1c41      	adds	r1, r0, #1
 800502e:	d1c7      	bne.n	8004fc0 <__sflush_r+0x34>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0c4      	beq.n	8004fc0 <__sflush_r+0x34>
 8005036:	2b1d      	cmp	r3, #29
 8005038:	d001      	beq.n	800503e <__sflush_r+0xb2>
 800503a:	2b16      	cmp	r3, #22
 800503c:	d101      	bne.n	8005042 <__sflush_r+0xb6>
 800503e:	602f      	str	r7, [r5, #0]
 8005040:	e7b1      	b.n	8004fa6 <__sflush_r+0x1a>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	e7ad      	b.n	8004fa8 <__sflush_r+0x1c>
 800504c:	690f      	ldr	r7, [r1, #16]
 800504e:	2f00      	cmp	r7, #0
 8005050:	d0a9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8005052:	0793      	lsls	r3, r2, #30
 8005054:	680e      	ldr	r6, [r1, #0]
 8005056:	bf08      	it	eq
 8005058:	694b      	ldreq	r3, [r1, #20]
 800505a:	600f      	str	r7, [r1, #0]
 800505c:	bf18      	it	ne
 800505e:	2300      	movne	r3, #0
 8005060:	eba6 0807 	sub.w	r8, r6, r7
 8005064:	608b      	str	r3, [r1, #8]
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	dd9c      	ble.n	8004fa6 <__sflush_r+0x1a>
 800506c:	6a21      	ldr	r1, [r4, #32]
 800506e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005070:	4643      	mov	r3, r8
 8005072:	463a      	mov	r2, r7
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	2800      	cmp	r0, #0
 800507a:	dc06      	bgt.n	800508a <__sflush_r+0xfe>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e78e      	b.n	8004fa8 <__sflush_r+0x1c>
 800508a:	4407      	add	r7, r0
 800508c:	eba8 0800 	sub.w	r8, r8, r0
 8005090:	e7e9      	b.n	8005066 <__sflush_r+0xda>
 8005092:	bf00      	nop
 8005094:	20400001 	.word	0x20400001

08005098 <_fflush_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	4605      	mov	r5, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	b913      	cbnz	r3, 80050a8 <_fflush_r+0x10>
 80050a2:	2500      	movs	r5, #0
 80050a4:	4628      	mov	r0, r5
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	b118      	cbz	r0, 80050b2 <_fflush_r+0x1a>
 80050aa:	6983      	ldr	r3, [r0, #24]
 80050ac:	b90b      	cbnz	r3, 80050b2 <_fflush_r+0x1a>
 80050ae:	f000 f887 	bl	80051c0 <__sinit>
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <_fflush_r+0x6c>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d11b      	bne.n	80050f0 <_fflush_r+0x58>
 80050b8:	686c      	ldr	r4, [r5, #4]
 80050ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ef      	beq.n	80050a2 <_fflush_r+0xa>
 80050c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050c4:	07d0      	lsls	r0, r2, #31
 80050c6:	d404      	bmi.n	80050d2 <_fflush_r+0x3a>
 80050c8:	0599      	lsls	r1, r3, #22
 80050ca:	d402      	bmi.n	80050d2 <_fflush_r+0x3a>
 80050cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ce:	f000 f915 	bl	80052fc <__retarget_lock_acquire_recursive>
 80050d2:	4628      	mov	r0, r5
 80050d4:	4621      	mov	r1, r4
 80050d6:	f7ff ff59 	bl	8004f8c <__sflush_r>
 80050da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050dc:	07da      	lsls	r2, r3, #31
 80050de:	4605      	mov	r5, r0
 80050e0:	d4e0      	bmi.n	80050a4 <_fflush_r+0xc>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	059b      	lsls	r3, r3, #22
 80050e6:	d4dd      	bmi.n	80050a4 <_fflush_r+0xc>
 80050e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ea:	f000 f908 	bl	80052fe <__retarget_lock_release_recursive>
 80050ee:	e7d9      	b.n	80050a4 <_fflush_r+0xc>
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <_fflush_r+0x70>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	d101      	bne.n	80050fa <_fflush_r+0x62>
 80050f6:	68ac      	ldr	r4, [r5, #8]
 80050f8:	e7df      	b.n	80050ba <_fflush_r+0x22>
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <_fflush_r+0x74>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	bf08      	it	eq
 8005100:	68ec      	ldreq	r4, [r5, #12]
 8005102:	e7da      	b.n	80050ba <_fflush_r+0x22>
 8005104:	08006114 	.word	0x08006114
 8005108:	08006134 	.word	0x08006134
 800510c:	080060f4 	.word	0x080060f4

08005110 <std>:
 8005110:	2300      	movs	r3, #0
 8005112:	b510      	push	{r4, lr}
 8005114:	4604      	mov	r4, r0
 8005116:	e9c0 3300 	strd	r3, r3, [r0]
 800511a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800511e:	6083      	str	r3, [r0, #8]
 8005120:	8181      	strh	r1, [r0, #12]
 8005122:	6643      	str	r3, [r0, #100]	; 0x64
 8005124:	81c2      	strh	r2, [r0, #14]
 8005126:	6183      	str	r3, [r0, #24]
 8005128:	4619      	mov	r1, r3
 800512a:	2208      	movs	r2, #8
 800512c:	305c      	adds	r0, #92	; 0x5c
 800512e:	f7ff fdad 	bl	8004c8c <memset>
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <std+0x38>)
 8005134:	6263      	str	r3, [r4, #36]	; 0x24
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x3c>)
 8005138:	62a3      	str	r3, [r4, #40]	; 0x28
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x40>)
 800513c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x44>)
 8005140:	6224      	str	r4, [r4, #32]
 8005142:	6323      	str	r3, [r4, #48]	; 0x30
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	08005b89 	.word	0x08005b89
 800514c:	08005bab 	.word	0x08005bab
 8005150:	08005be3 	.word	0x08005be3
 8005154:	08005c07 	.word	0x08005c07

08005158 <_cleanup_r>:
 8005158:	4901      	ldr	r1, [pc, #4]	; (8005160 <_cleanup_r+0x8>)
 800515a:	f000 b8af 	b.w	80052bc <_fwalk_reent>
 800515e:	bf00      	nop
 8005160:	08005099 	.word	0x08005099

08005164 <__sfmoreglue>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	2268      	movs	r2, #104	; 0x68
 8005168:	1e4d      	subs	r5, r1, #1
 800516a:	4355      	muls	r5, r2
 800516c:	460e      	mov	r6, r1
 800516e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005172:	f000 f997 	bl	80054a4 <_malloc_r>
 8005176:	4604      	mov	r4, r0
 8005178:	b140      	cbz	r0, 800518c <__sfmoreglue+0x28>
 800517a:	2100      	movs	r1, #0
 800517c:	e9c0 1600 	strd	r1, r6, [r0]
 8005180:	300c      	adds	r0, #12
 8005182:	60a0      	str	r0, [r4, #8]
 8005184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005188:	f7ff fd80 	bl	8004c8c <memset>
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}

08005190 <__sfp_lock_acquire>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_acquire+0x8>)
 8005192:	f000 b8b3 	b.w	80052fc <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	200003f5 	.word	0x200003f5

0800519c <__sfp_lock_release>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_release+0x8>)
 800519e:	f000 b8ae 	b.w	80052fe <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	200003f5 	.word	0x200003f5

080051a8 <__sinit_lock_acquire>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sinit_lock_acquire+0x8>)
 80051aa:	f000 b8a7 	b.w	80052fc <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	200003f6 	.word	0x200003f6

080051b4 <__sinit_lock_release>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__sinit_lock_release+0x8>)
 80051b6:	f000 b8a2 	b.w	80052fe <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	200003f6 	.word	0x200003f6

080051c0 <__sinit>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	4604      	mov	r4, r0
 80051c4:	f7ff fff0 	bl	80051a8 <__sinit_lock_acquire>
 80051c8:	69a3      	ldr	r3, [r4, #24]
 80051ca:	b11b      	cbz	r3, 80051d4 <__sinit+0x14>
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	f7ff bff0 	b.w	80051b4 <__sinit_lock_release>
 80051d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051d8:	6523      	str	r3, [r4, #80]	; 0x50
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <__sinit+0x68>)
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <__sinit+0x6c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	bf04      	itt	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	61a3      	streq	r3, [r4, #24]
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 f820 	bl	8005230 <__sfp>
 80051f0:	6060      	str	r0, [r4, #4]
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f81c 	bl	8005230 <__sfp>
 80051f8:	60a0      	str	r0, [r4, #8]
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f818 	bl	8005230 <__sfp>
 8005200:	2200      	movs	r2, #0
 8005202:	60e0      	str	r0, [r4, #12]
 8005204:	2104      	movs	r1, #4
 8005206:	6860      	ldr	r0, [r4, #4]
 8005208:	f7ff ff82 	bl	8005110 <std>
 800520c:	68a0      	ldr	r0, [r4, #8]
 800520e:	2201      	movs	r2, #1
 8005210:	2109      	movs	r1, #9
 8005212:	f7ff ff7d 	bl	8005110 <std>
 8005216:	68e0      	ldr	r0, [r4, #12]
 8005218:	2202      	movs	r2, #2
 800521a:	2112      	movs	r1, #18
 800521c:	f7ff ff78 	bl	8005110 <std>
 8005220:	2301      	movs	r3, #1
 8005222:	61a3      	str	r3, [r4, #24]
 8005224:	e7d2      	b.n	80051cc <__sinit+0xc>
 8005226:	bf00      	nop
 8005228:	080060f0 	.word	0x080060f0
 800522c:	08005159 	.word	0x08005159

08005230 <__sfp>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4607      	mov	r7, r0
 8005234:	f7ff ffac 	bl	8005190 <__sfp_lock_acquire>
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <__sfp+0x84>)
 800523a:	681e      	ldr	r6, [r3, #0]
 800523c:	69b3      	ldr	r3, [r6, #24]
 800523e:	b913      	cbnz	r3, 8005246 <__sfp+0x16>
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff ffbd 	bl	80051c0 <__sinit>
 8005246:	3648      	adds	r6, #72	; 0x48
 8005248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800524c:	3b01      	subs	r3, #1
 800524e:	d503      	bpl.n	8005258 <__sfp+0x28>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	b30b      	cbz	r3, 8005298 <__sfp+0x68>
 8005254:	6836      	ldr	r6, [r6, #0]
 8005256:	e7f7      	b.n	8005248 <__sfp+0x18>
 8005258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800525c:	b9d5      	cbnz	r5, 8005294 <__sfp+0x64>
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <__sfp+0x88>)
 8005260:	60e3      	str	r3, [r4, #12]
 8005262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005266:	6665      	str	r5, [r4, #100]	; 0x64
 8005268:	f000 f847 	bl	80052fa <__retarget_lock_init_recursive>
 800526c:	f7ff ff96 	bl	800519c <__sfp_lock_release>
 8005270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005278:	6025      	str	r5, [r4, #0]
 800527a:	61a5      	str	r5, [r4, #24]
 800527c:	2208      	movs	r2, #8
 800527e:	4629      	mov	r1, r5
 8005280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005284:	f7ff fd02 	bl	8004c8c <memset>
 8005288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800528c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005290:	4620      	mov	r0, r4
 8005292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005294:	3468      	adds	r4, #104	; 0x68
 8005296:	e7d9      	b.n	800524c <__sfp+0x1c>
 8005298:	2104      	movs	r1, #4
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ff62 	bl	8005164 <__sfmoreglue>
 80052a0:	4604      	mov	r4, r0
 80052a2:	6030      	str	r0, [r6, #0]
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1d5      	bne.n	8005254 <__sfp+0x24>
 80052a8:	f7ff ff78 	bl	800519c <__sfp_lock_release>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	e7ee      	b.n	8005290 <__sfp+0x60>
 80052b2:	bf00      	nop
 80052b4:	080060f0 	.word	0x080060f0
 80052b8:	ffff0001 	.word	0xffff0001

080052bc <_fwalk_reent>:
 80052bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c0:	4606      	mov	r6, r0
 80052c2:	4688      	mov	r8, r1
 80052c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052c8:	2700      	movs	r7, #0
 80052ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ce:	f1b9 0901 	subs.w	r9, r9, #1
 80052d2:	d505      	bpl.n	80052e0 <_fwalk_reent+0x24>
 80052d4:	6824      	ldr	r4, [r4, #0]
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d1f7      	bne.n	80052ca <_fwalk_reent+0xe>
 80052da:	4638      	mov	r0, r7
 80052dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e0:	89ab      	ldrh	r3, [r5, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d907      	bls.n	80052f6 <_fwalk_reent+0x3a>
 80052e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ea:	3301      	adds	r3, #1
 80052ec:	d003      	beq.n	80052f6 <_fwalk_reent+0x3a>
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	47c0      	blx	r8
 80052f4:	4307      	orrs	r7, r0
 80052f6:	3568      	adds	r5, #104	; 0x68
 80052f8:	e7e9      	b.n	80052ce <_fwalk_reent+0x12>

080052fa <__retarget_lock_init_recursive>:
 80052fa:	4770      	bx	lr

080052fc <__retarget_lock_acquire_recursive>:
 80052fc:	4770      	bx	lr

080052fe <__retarget_lock_release_recursive>:
 80052fe:	4770      	bx	lr

08005300 <__swhatbuf_r>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	460e      	mov	r6, r1
 8005304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005308:	2900      	cmp	r1, #0
 800530a:	b096      	sub	sp, #88	; 0x58
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	da08      	bge.n	8005324 <__swhatbuf_r+0x24>
 8005312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	061a      	lsls	r2, r3, #24
 800531c:	d410      	bmi.n	8005340 <__swhatbuf_r+0x40>
 800531e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005322:	e00e      	b.n	8005342 <__swhatbuf_r+0x42>
 8005324:	466a      	mov	r2, sp
 8005326:	f000 fc95 	bl	8005c54 <_fstat_r>
 800532a:	2800      	cmp	r0, #0
 800532c:	dbf1      	blt.n	8005312 <__swhatbuf_r+0x12>
 800532e:	9a01      	ldr	r2, [sp, #4]
 8005330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005338:	425a      	negs	r2, r3
 800533a:	415a      	adcs	r2, r3
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	e7ee      	b.n	800531e <__swhatbuf_r+0x1e>
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	2000      	movs	r0, #0
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	b016      	add	sp, #88	; 0x58
 8005348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800534c <__smakebuf_r>:
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005350:	079d      	lsls	r5, r3, #30
 8005352:	4606      	mov	r6, r0
 8005354:	460c      	mov	r4, r1
 8005356:	d507      	bpl.n	8005368 <__smakebuf_r+0x1c>
 8005358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2301      	movs	r3, #1
 8005362:	6163      	str	r3, [r4, #20]
 8005364:	b002      	add	sp, #8
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	ab01      	add	r3, sp, #4
 800536a:	466a      	mov	r2, sp
 800536c:	f7ff ffc8 	bl	8005300 <__swhatbuf_r>
 8005370:	9900      	ldr	r1, [sp, #0]
 8005372:	4605      	mov	r5, r0
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f895 	bl	80054a4 <_malloc_r>
 800537a:	b948      	cbnz	r0, 8005390 <__smakebuf_r+0x44>
 800537c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005380:	059a      	lsls	r2, r3, #22
 8005382:	d4ef      	bmi.n	8005364 <__smakebuf_r+0x18>
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	e7e3      	b.n	8005358 <__smakebuf_r+0xc>
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <__smakebuf_r+0x7c>)
 8005392:	62b3      	str	r3, [r6, #40]	; 0x28
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	6020      	str	r0, [r4, #0]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	6163      	str	r3, [r4, #20]
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	6120      	str	r0, [r4, #16]
 80053a6:	b15b      	cbz	r3, 80053c0 <__smakebuf_r+0x74>
 80053a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ac:	4630      	mov	r0, r6
 80053ae:	f000 fc63 	bl	8005c78 <_isatty_r>
 80053b2:	b128      	cbz	r0, 80053c0 <__smakebuf_r+0x74>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	89a0      	ldrh	r0, [r4, #12]
 80053c2:	4305      	orrs	r5, r0
 80053c4:	81a5      	strh	r5, [r4, #12]
 80053c6:	e7cd      	b.n	8005364 <__smakebuf_r+0x18>
 80053c8:	08005159 	.word	0x08005159

080053cc <_free_r>:
 80053cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ce:	2900      	cmp	r1, #0
 80053d0:	d044      	beq.n	800545c <_free_r+0x90>
 80053d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d6:	9001      	str	r0, [sp, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f1a1 0404 	sub.w	r4, r1, #4
 80053de:	bfb8      	it	lt
 80053e0:	18e4      	addlt	r4, r4, r3
 80053e2:	f000 fc6b 	bl	8005cbc <__malloc_lock>
 80053e6:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <_free_r+0x94>)
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	b933      	cbnz	r3, 80053fc <_free_r+0x30>
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	6014      	str	r4, [r2, #0]
 80053f2:	b003      	add	sp, #12
 80053f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f8:	f000 bc66 	b.w	8005cc8 <__malloc_unlock>
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d908      	bls.n	8005412 <_free_r+0x46>
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	1961      	adds	r1, r4, r5
 8005404:	428b      	cmp	r3, r1
 8005406:	bf01      	itttt	eq
 8005408:	6819      	ldreq	r1, [r3, #0]
 800540a:	685b      	ldreq	r3, [r3, #4]
 800540c:	1949      	addeq	r1, r1, r5
 800540e:	6021      	streq	r1, [r4, #0]
 8005410:	e7ed      	b.n	80053ee <_free_r+0x22>
 8005412:	461a      	mov	r2, r3
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	b10b      	cbz	r3, 800541c <_free_r+0x50>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d9fa      	bls.n	8005412 <_free_r+0x46>
 800541c:	6811      	ldr	r1, [r2, #0]
 800541e:	1855      	adds	r5, r2, r1
 8005420:	42a5      	cmp	r5, r4
 8005422:	d10b      	bne.n	800543c <_free_r+0x70>
 8005424:	6824      	ldr	r4, [r4, #0]
 8005426:	4421      	add	r1, r4
 8005428:	1854      	adds	r4, r2, r1
 800542a:	42a3      	cmp	r3, r4
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	d1e0      	bne.n	80053f2 <_free_r+0x26>
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	6053      	str	r3, [r2, #4]
 8005436:	4421      	add	r1, r4
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	e7da      	b.n	80053f2 <_free_r+0x26>
 800543c:	d902      	bls.n	8005444 <_free_r+0x78>
 800543e:	230c      	movs	r3, #12
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	e7d6      	b.n	80053f2 <_free_r+0x26>
 8005444:	6825      	ldr	r5, [r4, #0]
 8005446:	1961      	adds	r1, r4, r5
 8005448:	428b      	cmp	r3, r1
 800544a:	bf04      	itt	eq
 800544c:	6819      	ldreq	r1, [r3, #0]
 800544e:	685b      	ldreq	r3, [r3, #4]
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	bf04      	itt	eq
 8005454:	1949      	addeq	r1, r1, r5
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	6054      	str	r4, [r2, #4]
 800545a:	e7ca      	b.n	80053f2 <_free_r+0x26>
 800545c:	b003      	add	sp, #12
 800545e:	bd30      	pop	{r4, r5, pc}
 8005460:	200003f8 	.word	0x200003f8

08005464 <sbrk_aligned>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4e0e      	ldr	r6, [pc, #56]	; (80054a0 <sbrk_aligned+0x3c>)
 8005468:	460c      	mov	r4, r1
 800546a:	6831      	ldr	r1, [r6, #0]
 800546c:	4605      	mov	r5, r0
 800546e:	b911      	cbnz	r1, 8005476 <sbrk_aligned+0x12>
 8005470:	f000 fb7a 	bl	8005b68 <_sbrk_r>
 8005474:	6030      	str	r0, [r6, #0]
 8005476:	4621      	mov	r1, r4
 8005478:	4628      	mov	r0, r5
 800547a:	f000 fb75 	bl	8005b68 <_sbrk_r>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d00a      	beq.n	8005498 <sbrk_aligned+0x34>
 8005482:	1cc4      	adds	r4, r0, #3
 8005484:	f024 0403 	bic.w	r4, r4, #3
 8005488:	42a0      	cmp	r0, r4
 800548a:	d007      	beq.n	800549c <sbrk_aligned+0x38>
 800548c:	1a21      	subs	r1, r4, r0
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fb6a 	bl	8005b68 <_sbrk_r>
 8005494:	3001      	adds	r0, #1
 8005496:	d101      	bne.n	800549c <sbrk_aligned+0x38>
 8005498:	f04f 34ff 	mov.w	r4, #4294967295
 800549c:	4620      	mov	r0, r4
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	200003fc 	.word	0x200003fc

080054a4 <_malloc_r>:
 80054a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a8:	1ccd      	adds	r5, r1, #3
 80054aa:	f025 0503 	bic.w	r5, r5, #3
 80054ae:	3508      	adds	r5, #8
 80054b0:	2d0c      	cmp	r5, #12
 80054b2:	bf38      	it	cc
 80054b4:	250c      	movcc	r5, #12
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	4607      	mov	r7, r0
 80054ba:	db01      	blt.n	80054c0 <_malloc_r+0x1c>
 80054bc:	42a9      	cmp	r1, r5
 80054be:	d905      	bls.n	80054cc <_malloc_r+0x28>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	2600      	movs	r6, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054cc:	4e2e      	ldr	r6, [pc, #184]	; (8005588 <_malloc_r+0xe4>)
 80054ce:	f000 fbf5 	bl	8005cbc <__malloc_lock>
 80054d2:	6833      	ldr	r3, [r6, #0]
 80054d4:	461c      	mov	r4, r3
 80054d6:	bb34      	cbnz	r4, 8005526 <_malloc_r+0x82>
 80054d8:	4629      	mov	r1, r5
 80054da:	4638      	mov	r0, r7
 80054dc:	f7ff ffc2 	bl	8005464 <sbrk_aligned>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	4604      	mov	r4, r0
 80054e4:	d14d      	bne.n	8005582 <_malloc_r+0xde>
 80054e6:	6834      	ldr	r4, [r6, #0]
 80054e8:	4626      	mov	r6, r4
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	d140      	bne.n	8005570 <_malloc_r+0xcc>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	4631      	mov	r1, r6
 80054f2:	4638      	mov	r0, r7
 80054f4:	eb04 0803 	add.w	r8, r4, r3
 80054f8:	f000 fb36 	bl	8005b68 <_sbrk_r>
 80054fc:	4580      	cmp	r8, r0
 80054fe:	d13a      	bne.n	8005576 <_malloc_r+0xd2>
 8005500:	6821      	ldr	r1, [r4, #0]
 8005502:	3503      	adds	r5, #3
 8005504:	1a6d      	subs	r5, r5, r1
 8005506:	f025 0503 	bic.w	r5, r5, #3
 800550a:	3508      	adds	r5, #8
 800550c:	2d0c      	cmp	r5, #12
 800550e:	bf38      	it	cc
 8005510:	250c      	movcc	r5, #12
 8005512:	4629      	mov	r1, r5
 8005514:	4638      	mov	r0, r7
 8005516:	f7ff ffa5 	bl	8005464 <sbrk_aligned>
 800551a:	3001      	adds	r0, #1
 800551c:	d02b      	beq.n	8005576 <_malloc_r+0xd2>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	442b      	add	r3, r5
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	e00e      	b.n	8005544 <_malloc_r+0xa0>
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	1b52      	subs	r2, r2, r5
 800552a:	d41e      	bmi.n	800556a <_malloc_r+0xc6>
 800552c:	2a0b      	cmp	r2, #11
 800552e:	d916      	bls.n	800555e <_malloc_r+0xba>
 8005530:	1961      	adds	r1, r4, r5
 8005532:	42a3      	cmp	r3, r4
 8005534:	6025      	str	r5, [r4, #0]
 8005536:	bf18      	it	ne
 8005538:	6059      	strne	r1, [r3, #4]
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	bf08      	it	eq
 800553e:	6031      	streq	r1, [r6, #0]
 8005540:	5162      	str	r2, [r4, r5]
 8005542:	604b      	str	r3, [r1, #4]
 8005544:	4638      	mov	r0, r7
 8005546:	f104 060b 	add.w	r6, r4, #11
 800554a:	f000 fbbd 	bl	8005cc8 <__malloc_unlock>
 800554e:	f026 0607 	bic.w	r6, r6, #7
 8005552:	1d23      	adds	r3, r4, #4
 8005554:	1af2      	subs	r2, r6, r3
 8005556:	d0b6      	beq.n	80054c6 <_malloc_r+0x22>
 8005558:	1b9b      	subs	r3, r3, r6
 800555a:	50a3      	str	r3, [r4, r2]
 800555c:	e7b3      	b.n	80054c6 <_malloc_r+0x22>
 800555e:	6862      	ldr	r2, [r4, #4]
 8005560:	42a3      	cmp	r3, r4
 8005562:	bf0c      	ite	eq
 8005564:	6032      	streq	r2, [r6, #0]
 8005566:	605a      	strne	r2, [r3, #4]
 8005568:	e7ec      	b.n	8005544 <_malloc_r+0xa0>
 800556a:	4623      	mov	r3, r4
 800556c:	6864      	ldr	r4, [r4, #4]
 800556e:	e7b2      	b.n	80054d6 <_malloc_r+0x32>
 8005570:	4634      	mov	r4, r6
 8005572:	6876      	ldr	r6, [r6, #4]
 8005574:	e7b9      	b.n	80054ea <_malloc_r+0x46>
 8005576:	230c      	movs	r3, #12
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4638      	mov	r0, r7
 800557c:	f000 fba4 	bl	8005cc8 <__malloc_unlock>
 8005580:	e7a1      	b.n	80054c6 <_malloc_r+0x22>
 8005582:	6025      	str	r5, [r4, #0]
 8005584:	e7de      	b.n	8005544 <_malloc_r+0xa0>
 8005586:	bf00      	nop
 8005588:	200003f8 	.word	0x200003f8

0800558c <__sfputc_r>:
 800558c:	6893      	ldr	r3, [r2, #8]
 800558e:	3b01      	subs	r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	b410      	push	{r4}
 8005594:	6093      	str	r3, [r2, #8]
 8005596:	da08      	bge.n	80055aa <__sfputc_r+0x1e>
 8005598:	6994      	ldr	r4, [r2, #24]
 800559a:	42a3      	cmp	r3, r4
 800559c:	db01      	blt.n	80055a2 <__sfputc_r+0x16>
 800559e:	290a      	cmp	r1, #10
 80055a0:	d103      	bne.n	80055aa <__sfputc_r+0x1e>
 80055a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a6:	f7ff bc31 	b.w	8004e0c <__swbuf_r>
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	1c58      	adds	r0, r3, #1
 80055ae:	6010      	str	r0, [r2, #0]
 80055b0:	7019      	strb	r1, [r3, #0]
 80055b2:	4608      	mov	r0, r1
 80055b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <__sfputs_r>:
 80055ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055bc:	4606      	mov	r6, r0
 80055be:	460f      	mov	r7, r1
 80055c0:	4614      	mov	r4, r2
 80055c2:	18d5      	adds	r5, r2, r3
 80055c4:	42ac      	cmp	r4, r5
 80055c6:	d101      	bne.n	80055cc <__sfputs_r+0x12>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e007      	b.n	80055dc <__sfputs_r+0x22>
 80055cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d0:	463a      	mov	r2, r7
 80055d2:	4630      	mov	r0, r6
 80055d4:	f7ff ffda 	bl	800558c <__sfputc_r>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d1f3      	bne.n	80055c4 <__sfputs_r+0xa>
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e0 <_vfiprintf_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	460d      	mov	r5, r1
 80055e6:	b09d      	sub	sp, #116	; 0x74
 80055e8:	4614      	mov	r4, r2
 80055ea:	4698      	mov	r8, r3
 80055ec:	4606      	mov	r6, r0
 80055ee:	b118      	cbz	r0, 80055f8 <_vfiprintf_r+0x18>
 80055f0:	6983      	ldr	r3, [r0, #24]
 80055f2:	b90b      	cbnz	r3, 80055f8 <_vfiprintf_r+0x18>
 80055f4:	f7ff fde4 	bl	80051c0 <__sinit>
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <_vfiprintf_r+0x240>)
 80055fa:	429d      	cmp	r5, r3
 80055fc:	d11b      	bne.n	8005636 <_vfiprintf_r+0x56>
 80055fe:	6875      	ldr	r5, [r6, #4]
 8005600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005602:	07d9      	lsls	r1, r3, #31
 8005604:	d405      	bmi.n	8005612 <_vfiprintf_r+0x32>
 8005606:	89ab      	ldrh	r3, [r5, #12]
 8005608:	059a      	lsls	r2, r3, #22
 800560a:	d402      	bmi.n	8005612 <_vfiprintf_r+0x32>
 800560c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800560e:	f7ff fe75 	bl	80052fc <__retarget_lock_acquire_recursive>
 8005612:	89ab      	ldrh	r3, [r5, #12]
 8005614:	071b      	lsls	r3, r3, #28
 8005616:	d501      	bpl.n	800561c <_vfiprintf_r+0x3c>
 8005618:	692b      	ldr	r3, [r5, #16]
 800561a:	b9eb      	cbnz	r3, 8005658 <_vfiprintf_r+0x78>
 800561c:	4629      	mov	r1, r5
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff fc46 	bl	8004eb0 <__swsetup_r>
 8005624:	b1c0      	cbz	r0, 8005658 <_vfiprintf_r+0x78>
 8005626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005628:	07dc      	lsls	r4, r3, #31
 800562a:	d50e      	bpl.n	800564a <_vfiprintf_r+0x6a>
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	b01d      	add	sp, #116	; 0x74
 8005632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005636:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <_vfiprintf_r+0x244>)
 8005638:	429d      	cmp	r5, r3
 800563a:	d101      	bne.n	8005640 <_vfiprintf_r+0x60>
 800563c:	68b5      	ldr	r5, [r6, #8]
 800563e:	e7df      	b.n	8005600 <_vfiprintf_r+0x20>
 8005640:	4b79      	ldr	r3, [pc, #484]	; (8005828 <_vfiprintf_r+0x248>)
 8005642:	429d      	cmp	r5, r3
 8005644:	bf08      	it	eq
 8005646:	68f5      	ldreq	r5, [r6, #12]
 8005648:	e7da      	b.n	8005600 <_vfiprintf_r+0x20>
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	0598      	lsls	r0, r3, #22
 800564e:	d4ed      	bmi.n	800562c <_vfiprintf_r+0x4c>
 8005650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005652:	f7ff fe54 	bl	80052fe <__retarget_lock_release_recursive>
 8005656:	e7e9      	b.n	800562c <_vfiprintf_r+0x4c>
 8005658:	2300      	movs	r3, #0
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
 800565c:	2320      	movs	r3, #32
 800565e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005662:	f8cd 800c 	str.w	r8, [sp, #12]
 8005666:	2330      	movs	r3, #48	; 0x30
 8005668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800582c <_vfiprintf_r+0x24c>
 800566c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005670:	f04f 0901 	mov.w	r9, #1
 8005674:	4623      	mov	r3, r4
 8005676:	469a      	mov	sl, r3
 8005678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800567c:	b10a      	cbz	r2, 8005682 <_vfiprintf_r+0xa2>
 800567e:	2a25      	cmp	r2, #37	; 0x25
 8005680:	d1f9      	bne.n	8005676 <_vfiprintf_r+0x96>
 8005682:	ebba 0b04 	subs.w	fp, sl, r4
 8005686:	d00b      	beq.n	80056a0 <_vfiprintf_r+0xc0>
 8005688:	465b      	mov	r3, fp
 800568a:	4622      	mov	r2, r4
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff ff93 	bl	80055ba <__sfputs_r>
 8005694:	3001      	adds	r0, #1
 8005696:	f000 80aa 	beq.w	80057ee <_vfiprintf_r+0x20e>
 800569a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800569c:	445a      	add	r2, fp
 800569e:	9209      	str	r2, [sp, #36]	; 0x24
 80056a0:	f89a 3000 	ldrb.w	r3, [sl]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80a2 	beq.w	80057ee <_vfiprintf_r+0x20e>
 80056aa:	2300      	movs	r3, #0
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b4:	f10a 0a01 	add.w	sl, sl, #1
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	9307      	str	r3, [sp, #28]
 80056bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c0:	931a      	str	r3, [sp, #104]	; 0x68
 80056c2:	4654      	mov	r4, sl
 80056c4:	2205      	movs	r2, #5
 80056c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ca:	4858      	ldr	r0, [pc, #352]	; (800582c <_vfiprintf_r+0x24c>)
 80056cc:	f7fa fd88 	bl	80001e0 <memchr>
 80056d0:	9a04      	ldr	r2, [sp, #16]
 80056d2:	b9d8      	cbnz	r0, 800570c <_vfiprintf_r+0x12c>
 80056d4:	06d1      	lsls	r1, r2, #27
 80056d6:	bf44      	itt	mi
 80056d8:	2320      	movmi	r3, #32
 80056da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056de:	0713      	lsls	r3, r2, #28
 80056e0:	bf44      	itt	mi
 80056e2:	232b      	movmi	r3, #43	; 0x2b
 80056e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e8:	f89a 3000 	ldrb.w	r3, [sl]
 80056ec:	2b2a      	cmp	r3, #42	; 0x2a
 80056ee:	d015      	beq.n	800571c <_vfiprintf_r+0x13c>
 80056f0:	9a07      	ldr	r2, [sp, #28]
 80056f2:	4654      	mov	r4, sl
 80056f4:	2000      	movs	r0, #0
 80056f6:	f04f 0c0a 	mov.w	ip, #10
 80056fa:	4621      	mov	r1, r4
 80056fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005700:	3b30      	subs	r3, #48	; 0x30
 8005702:	2b09      	cmp	r3, #9
 8005704:	d94e      	bls.n	80057a4 <_vfiprintf_r+0x1c4>
 8005706:	b1b0      	cbz	r0, 8005736 <_vfiprintf_r+0x156>
 8005708:	9207      	str	r2, [sp, #28]
 800570a:	e014      	b.n	8005736 <_vfiprintf_r+0x156>
 800570c:	eba0 0308 	sub.w	r3, r0, r8
 8005710:	fa09 f303 	lsl.w	r3, r9, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	46a2      	mov	sl, r4
 800571a:	e7d2      	b.n	80056c2 <_vfiprintf_r+0xe2>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	1d19      	adds	r1, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9103      	str	r1, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfbb      	ittet	lt
 8005728:	425b      	neglt	r3, r3
 800572a:	f042 0202 	orrlt.w	r2, r2, #2
 800572e:	9307      	strge	r3, [sp, #28]
 8005730:	9307      	strlt	r3, [sp, #28]
 8005732:	bfb8      	it	lt
 8005734:	9204      	strlt	r2, [sp, #16]
 8005736:	7823      	ldrb	r3, [r4, #0]
 8005738:	2b2e      	cmp	r3, #46	; 0x2e
 800573a:	d10c      	bne.n	8005756 <_vfiprintf_r+0x176>
 800573c:	7863      	ldrb	r3, [r4, #1]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d135      	bne.n	80057ae <_vfiprintf_r+0x1ce>
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	1d1a      	adds	r2, r3, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	9203      	str	r2, [sp, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	bfb8      	it	lt
 800574e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005752:	3402      	adds	r4, #2
 8005754:	9305      	str	r3, [sp, #20]
 8005756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800583c <_vfiprintf_r+0x25c>
 800575a:	7821      	ldrb	r1, [r4, #0]
 800575c:	2203      	movs	r2, #3
 800575e:	4650      	mov	r0, sl
 8005760:	f7fa fd3e 	bl	80001e0 <memchr>
 8005764:	b140      	cbz	r0, 8005778 <_vfiprintf_r+0x198>
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	eba0 000a 	sub.w	r0, r0, sl
 800576c:	fa03 f000 	lsl.w	r0, r3, r0
 8005770:	9b04      	ldr	r3, [sp, #16]
 8005772:	4303      	orrs	r3, r0
 8005774:	3401      	adds	r4, #1
 8005776:	9304      	str	r3, [sp, #16]
 8005778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577c:	482c      	ldr	r0, [pc, #176]	; (8005830 <_vfiprintf_r+0x250>)
 800577e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005782:	2206      	movs	r2, #6
 8005784:	f7fa fd2c 	bl	80001e0 <memchr>
 8005788:	2800      	cmp	r0, #0
 800578a:	d03f      	beq.n	800580c <_vfiprintf_r+0x22c>
 800578c:	4b29      	ldr	r3, [pc, #164]	; (8005834 <_vfiprintf_r+0x254>)
 800578e:	bb1b      	cbnz	r3, 80057d8 <_vfiprintf_r+0x1f8>
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	3307      	adds	r3, #7
 8005794:	f023 0307 	bic.w	r3, r3, #7
 8005798:	3308      	adds	r3, #8
 800579a:	9303      	str	r3, [sp, #12]
 800579c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579e:	443b      	add	r3, r7
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
 80057a2:	e767      	b.n	8005674 <_vfiprintf_r+0x94>
 80057a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057a8:	460c      	mov	r4, r1
 80057aa:	2001      	movs	r0, #1
 80057ac:	e7a5      	b.n	80056fa <_vfiprintf_r+0x11a>
 80057ae:	2300      	movs	r3, #0
 80057b0:	3401      	adds	r4, #1
 80057b2:	9305      	str	r3, [sp, #20]
 80057b4:	4619      	mov	r1, r3
 80057b6:	f04f 0c0a 	mov.w	ip, #10
 80057ba:	4620      	mov	r0, r4
 80057bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c0:	3a30      	subs	r2, #48	; 0x30
 80057c2:	2a09      	cmp	r2, #9
 80057c4:	d903      	bls.n	80057ce <_vfiprintf_r+0x1ee>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0c5      	beq.n	8005756 <_vfiprintf_r+0x176>
 80057ca:	9105      	str	r1, [sp, #20]
 80057cc:	e7c3      	b.n	8005756 <_vfiprintf_r+0x176>
 80057ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80057d2:	4604      	mov	r4, r0
 80057d4:	2301      	movs	r3, #1
 80057d6:	e7f0      	b.n	80057ba <_vfiprintf_r+0x1da>
 80057d8:	ab03      	add	r3, sp, #12
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	462a      	mov	r2, r5
 80057de:	4b16      	ldr	r3, [pc, #88]	; (8005838 <_vfiprintf_r+0x258>)
 80057e0:	a904      	add	r1, sp, #16
 80057e2:	4630      	mov	r0, r6
 80057e4:	f3af 8000 	nop.w
 80057e8:	4607      	mov	r7, r0
 80057ea:	1c78      	adds	r0, r7, #1
 80057ec:	d1d6      	bne.n	800579c <_vfiprintf_r+0x1bc>
 80057ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057f0:	07d9      	lsls	r1, r3, #31
 80057f2:	d405      	bmi.n	8005800 <_vfiprintf_r+0x220>
 80057f4:	89ab      	ldrh	r3, [r5, #12]
 80057f6:	059a      	lsls	r2, r3, #22
 80057f8:	d402      	bmi.n	8005800 <_vfiprintf_r+0x220>
 80057fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057fc:	f7ff fd7f 	bl	80052fe <__retarget_lock_release_recursive>
 8005800:	89ab      	ldrh	r3, [r5, #12]
 8005802:	065b      	lsls	r3, r3, #25
 8005804:	f53f af12 	bmi.w	800562c <_vfiprintf_r+0x4c>
 8005808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800580a:	e711      	b.n	8005630 <_vfiprintf_r+0x50>
 800580c:	ab03      	add	r3, sp, #12
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	462a      	mov	r2, r5
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <_vfiprintf_r+0x258>)
 8005814:	a904      	add	r1, sp, #16
 8005816:	4630      	mov	r0, r6
 8005818:	f000 f880 	bl	800591c <_printf_i>
 800581c:	e7e4      	b.n	80057e8 <_vfiprintf_r+0x208>
 800581e:	bf00      	nop
 8005820:	08006114 	.word	0x08006114
 8005824:	08006134 	.word	0x08006134
 8005828:	080060f4 	.word	0x080060f4
 800582c:	08006154 	.word	0x08006154
 8005830:	0800615e 	.word	0x0800615e
 8005834:	00000000 	.word	0x00000000
 8005838:	080055bb 	.word	0x080055bb
 800583c:	0800615a 	.word	0x0800615a

08005840 <_printf_common>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	4616      	mov	r6, r2
 8005846:	4699      	mov	r9, r3
 8005848:	688a      	ldr	r2, [r1, #8]
 800584a:	690b      	ldr	r3, [r1, #16]
 800584c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005850:	4293      	cmp	r3, r2
 8005852:	bfb8      	it	lt
 8005854:	4613      	movlt	r3, r2
 8005856:	6033      	str	r3, [r6, #0]
 8005858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800585c:	4607      	mov	r7, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b10a      	cbz	r2, 8005866 <_printf_common+0x26>
 8005862:	3301      	adds	r3, #1
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	0699      	lsls	r1, r3, #26
 800586a:	bf42      	ittt	mi
 800586c:	6833      	ldrmi	r3, [r6, #0]
 800586e:	3302      	addmi	r3, #2
 8005870:	6033      	strmi	r3, [r6, #0]
 8005872:	6825      	ldr	r5, [r4, #0]
 8005874:	f015 0506 	ands.w	r5, r5, #6
 8005878:	d106      	bne.n	8005888 <_printf_common+0x48>
 800587a:	f104 0a19 	add.w	sl, r4, #25
 800587e:	68e3      	ldr	r3, [r4, #12]
 8005880:	6832      	ldr	r2, [r6, #0]
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	42ab      	cmp	r3, r5
 8005886:	dc26      	bgt.n	80058d6 <_printf_common+0x96>
 8005888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800588c:	1e13      	subs	r3, r2, #0
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	bf18      	it	ne
 8005892:	2301      	movne	r3, #1
 8005894:	0692      	lsls	r2, r2, #26
 8005896:	d42b      	bmi.n	80058f0 <_printf_common+0xb0>
 8005898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800589c:	4649      	mov	r1, r9
 800589e:	4638      	mov	r0, r7
 80058a0:	47c0      	blx	r8
 80058a2:	3001      	adds	r0, #1
 80058a4:	d01e      	beq.n	80058e4 <_printf_common+0xa4>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	68e5      	ldr	r5, [r4, #12]
 80058aa:	6832      	ldr	r2, [r6, #0]
 80058ac:	f003 0306 	and.w	r3, r3, #6
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	bf08      	it	eq
 80058b4:	1aad      	subeq	r5, r5, r2
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	6922      	ldr	r2, [r4, #16]
 80058ba:	bf0c      	ite	eq
 80058bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c0:	2500      	movne	r5, #0
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bfc4      	itt	gt
 80058c6:	1a9b      	subgt	r3, r3, r2
 80058c8:	18ed      	addgt	r5, r5, r3
 80058ca:	2600      	movs	r6, #0
 80058cc:	341a      	adds	r4, #26
 80058ce:	42b5      	cmp	r5, r6
 80058d0:	d11a      	bne.n	8005908 <_printf_common+0xc8>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e008      	b.n	80058e8 <_printf_common+0xa8>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4652      	mov	r2, sl
 80058da:	4649      	mov	r1, r9
 80058dc:	4638      	mov	r0, r7
 80058de:	47c0      	blx	r8
 80058e0:	3001      	adds	r0, #1
 80058e2:	d103      	bne.n	80058ec <_printf_common+0xac>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7c6      	b.n	800587e <_printf_common+0x3e>
 80058f0:	18e1      	adds	r1, r4, r3
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	2030      	movs	r0, #48	; 0x30
 80058f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058fa:	4422      	add	r2, r4
 80058fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005904:	3302      	adds	r3, #2
 8005906:	e7c7      	b.n	8005898 <_printf_common+0x58>
 8005908:	2301      	movs	r3, #1
 800590a:	4622      	mov	r2, r4
 800590c:	4649      	mov	r1, r9
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	3001      	adds	r0, #1
 8005914:	d0e6      	beq.n	80058e4 <_printf_common+0xa4>
 8005916:	3601      	adds	r6, #1
 8005918:	e7d9      	b.n	80058ce <_printf_common+0x8e>
	...

0800591c <_printf_i>:
 800591c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	7e0f      	ldrb	r7, [r1, #24]
 8005922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005924:	2f78      	cmp	r7, #120	; 0x78
 8005926:	4691      	mov	r9, r2
 8005928:	4680      	mov	r8, r0
 800592a:	460c      	mov	r4, r1
 800592c:	469a      	mov	sl, r3
 800592e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005932:	d807      	bhi.n	8005944 <_printf_i+0x28>
 8005934:	2f62      	cmp	r7, #98	; 0x62
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x32>
 8005938:	2f00      	cmp	r7, #0
 800593a:	f000 80d8 	beq.w	8005aee <_printf_i+0x1d2>
 800593e:	2f58      	cmp	r7, #88	; 0x58
 8005940:	f000 80a3 	beq.w	8005a8a <_printf_i+0x16e>
 8005944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800594c:	e03a      	b.n	80059c4 <_printf_i+0xa8>
 800594e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005952:	2b15      	cmp	r3, #21
 8005954:	d8f6      	bhi.n	8005944 <_printf_i+0x28>
 8005956:	a101      	add	r1, pc, #4	; (adr r1, 800595c <_printf_i+0x40>)
 8005958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059c9 	.word	0x080059c9
 8005964:	08005945 	.word	0x08005945
 8005968:	08005945 	.word	0x08005945
 800596c:	08005945 	.word	0x08005945
 8005970:	08005945 	.word	0x08005945
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005945 	.word	0x08005945
 800597c:	08005945 	.word	0x08005945
 8005980:	08005945 	.word	0x08005945
 8005984:	08005945 	.word	0x08005945
 8005988:	08005ad5 	.word	0x08005ad5
 800598c:	080059f9 	.word	0x080059f9
 8005990:	08005ab7 	.word	0x08005ab7
 8005994:	08005945 	.word	0x08005945
 8005998:	08005945 	.word	0x08005945
 800599c:	08005af7 	.word	0x08005af7
 80059a0:	08005945 	.word	0x08005945
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005945 	.word	0x08005945
 80059ac:	08005945 	.word	0x08005945
 80059b0:	08005abf 	.word	0x08005abf
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	602a      	str	r2, [r5, #0]
 80059bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0a3      	b.n	8005b10 <_printf_i+0x1f4>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	6829      	ldr	r1, [r5, #0]
 80059cc:	0606      	lsls	r6, r0, #24
 80059ce:	f101 0304 	add.w	r3, r1, #4
 80059d2:	d50a      	bpl.n	80059ea <_printf_i+0xce>
 80059d4:	680e      	ldr	r6, [r1, #0]
 80059d6:	602b      	str	r3, [r5, #0]
 80059d8:	2e00      	cmp	r6, #0
 80059da:	da03      	bge.n	80059e4 <_printf_i+0xc8>
 80059dc:	232d      	movs	r3, #45	; 0x2d
 80059de:	4276      	negs	r6, r6
 80059e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e4:	485e      	ldr	r0, [pc, #376]	; (8005b60 <_printf_i+0x244>)
 80059e6:	230a      	movs	r3, #10
 80059e8:	e019      	b.n	8005a1e <_printf_i+0x102>
 80059ea:	680e      	ldr	r6, [r1, #0]
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059f2:	bf18      	it	ne
 80059f4:	b236      	sxthne	r6, r6
 80059f6:	e7ef      	b.n	80059d8 <_printf_i+0xbc>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	1d19      	adds	r1, r3, #4
 80059fe:	6029      	str	r1, [r5, #0]
 8005a00:	0601      	lsls	r1, r0, #24
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0xec>
 8005a04:	681e      	ldr	r6, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0xf2>
 8005a08:	0646      	lsls	r6, r0, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0xe8>
 8005a0c:	881e      	ldrh	r6, [r3, #0]
 8005a0e:	4854      	ldr	r0, [pc, #336]	; (8005b60 <_printf_i+0x244>)
 8005a10:	2f6f      	cmp	r7, #111	; 0x6f
 8005a12:	bf0c      	ite	eq
 8005a14:	2308      	moveq	r3, #8
 8005a16:	230a      	movne	r3, #10
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a1e:	6865      	ldr	r5, [r4, #4]
 8005a20:	60a5      	str	r5, [r4, #8]
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	bfa2      	ittt	ge
 8005a26:	6821      	ldrge	r1, [r4, #0]
 8005a28:	f021 0104 	bicge.w	r1, r1, #4
 8005a2c:	6021      	strge	r1, [r4, #0]
 8005a2e:	b90e      	cbnz	r6, 8005a34 <_printf_i+0x118>
 8005a30:	2d00      	cmp	r5, #0
 8005a32:	d04d      	beq.n	8005ad0 <_printf_i+0x1b4>
 8005a34:	4615      	mov	r5, r2
 8005a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a3e:	5dc7      	ldrb	r7, [r0, r7]
 8005a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a44:	4637      	mov	r7, r6
 8005a46:	42bb      	cmp	r3, r7
 8005a48:	460e      	mov	r6, r1
 8005a4a:	d9f4      	bls.n	8005a36 <_printf_i+0x11a>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d10b      	bne.n	8005a68 <_printf_i+0x14c>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	07de      	lsls	r6, r3, #31
 8005a54:	d508      	bpl.n	8005a68 <_printf_i+0x14c>
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	6861      	ldr	r1, [r4, #4]
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	bfde      	ittt	le
 8005a5e:	2330      	movle	r3, #48	; 0x30
 8005a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a68:	1b52      	subs	r2, r2, r5
 8005a6a:	6122      	str	r2, [r4, #16]
 8005a6c:	f8cd a000 	str.w	sl, [sp]
 8005a70:	464b      	mov	r3, r9
 8005a72:	aa03      	add	r2, sp, #12
 8005a74:	4621      	mov	r1, r4
 8005a76:	4640      	mov	r0, r8
 8005a78:	f7ff fee2 	bl	8005840 <_printf_common>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d14c      	bne.n	8005b1a <_printf_i+0x1fe>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	b004      	add	sp, #16
 8005a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8a:	4835      	ldr	r0, [pc, #212]	; (8005b60 <_printf_i+0x244>)
 8005a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a90:	6829      	ldr	r1, [r5, #0]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a98:	6029      	str	r1, [r5, #0]
 8005a9a:	061d      	lsls	r5, r3, #24
 8005a9c:	d514      	bpl.n	8005ac8 <_printf_i+0x1ac>
 8005a9e:	07df      	lsls	r7, r3, #31
 8005aa0:	bf44      	itt	mi
 8005aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8005aa6:	6023      	strmi	r3, [r4, #0]
 8005aa8:	b91e      	cbnz	r6, 8005ab2 <_printf_i+0x196>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	f023 0320 	bic.w	r3, r3, #32
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	e7b0      	b.n	8005a18 <_printf_i+0xfc>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	f043 0320 	orr.w	r3, r3, #32
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	2378      	movs	r3, #120	; 0x78
 8005ac0:	4828      	ldr	r0, [pc, #160]	; (8005b64 <_printf_i+0x248>)
 8005ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ac6:	e7e3      	b.n	8005a90 <_printf_i+0x174>
 8005ac8:	0659      	lsls	r1, r3, #25
 8005aca:	bf48      	it	mi
 8005acc:	b2b6      	uxthmi	r6, r6
 8005ace:	e7e6      	b.n	8005a9e <_printf_i+0x182>
 8005ad0:	4615      	mov	r5, r2
 8005ad2:	e7bb      	b.n	8005a4c <_printf_i+0x130>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	6826      	ldr	r6, [r4, #0]
 8005ad8:	6961      	ldr	r1, [r4, #20]
 8005ada:	1d18      	adds	r0, r3, #4
 8005adc:	6028      	str	r0, [r5, #0]
 8005ade:	0635      	lsls	r5, r6, #24
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	d501      	bpl.n	8005ae8 <_printf_i+0x1cc>
 8005ae4:	6019      	str	r1, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <_printf_i+0x1d2>
 8005ae8:	0670      	lsls	r0, r6, #25
 8005aea:	d5fb      	bpl.n	8005ae4 <_printf_i+0x1c8>
 8005aec:	8019      	strh	r1, [r3, #0]
 8005aee:	2300      	movs	r3, #0
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	4615      	mov	r5, r2
 8005af4:	e7ba      	b.n	8005a6c <_printf_i+0x150>
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	1d1a      	adds	r2, r3, #4
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	681d      	ldr	r5, [r3, #0]
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7fa fb6c 	bl	80001e0 <memchr>
 8005b08:	b108      	cbz	r0, 8005b0e <_printf_i+0x1f2>
 8005b0a:	1b40      	subs	r0, r0, r5
 8005b0c:	6060      	str	r0, [r4, #4]
 8005b0e:	6863      	ldr	r3, [r4, #4]
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	2300      	movs	r3, #0
 8005b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b18:	e7a8      	b.n	8005a6c <_printf_i+0x150>
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	47d0      	blx	sl
 8005b24:	3001      	adds	r0, #1
 8005b26:	d0ab      	beq.n	8005a80 <_printf_i+0x164>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	079b      	lsls	r3, r3, #30
 8005b2c:	d413      	bmi.n	8005b56 <_printf_i+0x23a>
 8005b2e:	68e0      	ldr	r0, [r4, #12]
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	4298      	cmp	r0, r3
 8005b34:	bfb8      	it	lt
 8005b36:	4618      	movlt	r0, r3
 8005b38:	e7a4      	b.n	8005a84 <_printf_i+0x168>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	47d0      	blx	sl
 8005b44:	3001      	adds	r0, #1
 8005b46:	d09b      	beq.n	8005a80 <_printf_i+0x164>
 8005b48:	3501      	adds	r5, #1
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	9903      	ldr	r1, [sp, #12]
 8005b4e:	1a5b      	subs	r3, r3, r1
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	dcf2      	bgt.n	8005b3a <_printf_i+0x21e>
 8005b54:	e7eb      	b.n	8005b2e <_printf_i+0x212>
 8005b56:	2500      	movs	r5, #0
 8005b58:	f104 0619 	add.w	r6, r4, #25
 8005b5c:	e7f5      	b.n	8005b4a <_printf_i+0x22e>
 8005b5e:	bf00      	nop
 8005b60:	08006165 	.word	0x08006165
 8005b64:	08006176 	.word	0x08006176

08005b68 <_sbrk_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d06      	ldr	r5, [pc, #24]	; (8005b84 <_sbrk_r+0x1c>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fb fe9e 	bl	80018b4 <_sbrk>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_sbrk_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_sbrk_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	20000400 	.word	0x20000400

08005b88 <__sread>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b90:	f000 f8a0 	bl	8005cd4 <_read_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	bfab      	itete	ge
 8005b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b9c:	181b      	addge	r3, r3, r0
 8005b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ba2:	bfac      	ite	ge
 8005ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ba6:	81a3      	strhlt	r3, [r4, #12]
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <__swrite>:
 8005baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bae:	461f      	mov	r7, r3
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	05db      	lsls	r3, r3, #23
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4616      	mov	r6, r2
 8005bba:	d505      	bpl.n	8005bc8 <__swrite+0x1e>
 8005bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f000 f868 	bl	8005c98 <_lseek_r>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	f000 b817 	b.w	8005c10 <_write_r>

08005be2 <__sseek>:
 8005be2:	b510      	push	{r4, lr}
 8005be4:	460c      	mov	r4, r1
 8005be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bea:	f000 f855 	bl	8005c98 <_lseek_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	bf15      	itete	ne
 8005bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bfe:	81a3      	strheq	r3, [r4, #12]
 8005c00:	bf18      	it	ne
 8005c02:	81a3      	strhne	r3, [r4, #12]
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <__sclose>:
 8005c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0a:	f000 b813 	b.w	8005c34 <_close_r>
	...

08005c10 <_write_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	; (8005c30 <_write_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb f92b 	bl	8000e7a <_write>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_write_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_write_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000400 	.word	0x20000400

08005c34 <_close_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_close_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fb fe03 	bl	800184a <_close>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_close_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_close_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000400 	.word	0x20000400

08005c54 <_fstat_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d07      	ldr	r5, [pc, #28]	; (8005c74 <_fstat_r+0x20>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	f7fb fdfe 	bl	8001862 <_fstat>
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	d102      	bne.n	8005c70 <_fstat_r+0x1c>
 8005c6a:	682b      	ldr	r3, [r5, #0]
 8005c6c:	b103      	cbz	r3, 8005c70 <_fstat_r+0x1c>
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	20000400 	.word	0x20000400

08005c78 <_isatty_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d06      	ldr	r5, [pc, #24]	; (8005c94 <_isatty_r+0x1c>)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4604      	mov	r4, r0
 8005c80:	4608      	mov	r0, r1
 8005c82:	602b      	str	r3, [r5, #0]
 8005c84:	f7fb fdfd 	bl	8001882 <_isatty>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d102      	bne.n	8005c92 <_isatty_r+0x1a>
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	b103      	cbz	r3, 8005c92 <_isatty_r+0x1a>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	20000400 	.word	0x20000400

08005c98 <_lseek_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d07      	ldr	r5, [pc, #28]	; (8005cb8 <_lseek_r+0x20>)
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	602a      	str	r2, [r5, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7fb fdf6 	bl	8001898 <_lseek>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_lseek_r+0x1e>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_lseek_r+0x1e>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	20000400 	.word	0x20000400

08005cbc <__malloc_lock>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__malloc_lock+0x8>)
 8005cbe:	f7ff bb1d 	b.w	80052fc <__retarget_lock_acquire_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	200003f4 	.word	0x200003f4

08005cc8 <__malloc_unlock>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <__malloc_unlock+0x8>)
 8005cca:	f7ff bb18 	b.w	80052fe <__retarget_lock_release_recursive>
 8005cce:	bf00      	nop
 8005cd0:	200003f4 	.word	0x200003f4

08005cd4 <_read_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	; (8005cf4 <_read_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fb fd94 	bl	8001810 <_read>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_read_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_read_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000400 	.word	0x20000400

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
