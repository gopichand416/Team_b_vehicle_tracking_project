
GSM_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006264  08006264  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800626c  0800626c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000070  080062e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080062e4  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d651  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002159  00000000  00000000  0002d6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00030360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e05  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da4c  00000000  00000000  00057b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e939a  00000000  00000000  000655e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003420  00000000  00000000  0014e9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d8c 	.word	0x08005d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d8c 	.word	0x08005d8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <gsm_connect_to_server>:
#include"main.h"


char *str;
int gsm_connect_to_server()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t state=0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t substate=0;
 800058e:	2300      	movs	r3, #0
 8000590:	71bb      	strb	r3, [r7, #6]
	while(1)
	{
	switch(state)
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b07      	cmp	r3, #7
 8000596:	f200 8228 	bhi.w	80009ea <gsm_connect_to_server+0x466>
 800059a:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <gsm_connect_to_server+0x1c>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	0800063b 	.word	0x0800063b
 80005a8:	080006a7 	.word	0x080006a7
 80005ac:	0800072d 	.word	0x0800072d
 80005b0:	080007b5 	.word	0x080007b5
 80005b4:	08000849 	.word	0x08000849
 80005b8:	0800093b 	.word	0x0800093b
 80005bc:	08000993 	.word	0x08000993
			  	  {
			  	  case 0:
			  	  {
			  		  switch(substate)
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f040 8216 	bne.w	80009f4 <gsm_connect_to_server+0x470>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 80005c8:	48a2      	ldr	r0, [pc, #648]	; (8000854 <gsm_connect_to_server+0x2d0>)
 80005ca:	f000 fcc9 	bl	8000f60 <send_to_gsm>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4aa1      	ldr	r2, [pc, #644]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80005d2:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("ATE0 \n");
 80005d4:	48a1      	ldr	r0, [pc, #644]	; (800085c <gsm_connect_to_server+0x2d8>)
 80005d6:	f004 fc31 	bl	8004e3c <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 80005da:	4b9f      	ldr	r3, [pc, #636]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	49a0      	ldr	r1, [pc, #640]	; (8000860 <gsm_connect_to_server+0x2dc>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fc47 	bl	8004e74 <strstr>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00d      	beq.n	8000608 <gsm_connect_to_server+0x84>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	4619      	mov	r1, r3
 80005f2:	489c      	ldr	r0, [pc, #624]	; (8000864 <gsm_connect_to_server+0x2e0>)
 80005f4:	f004 fb9c 	bl	8004d30 <iprintf>
			  				printf("ATE0 OK \n");
 80005f8:	489b      	ldr	r0, [pc, #620]	; (8000868 <gsm_connect_to_server+0x2e4>)
 80005fa:	f004 fc1f 	bl	8004e3c <puts>
			  				  state=1;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
			  				substate=0;
 8000602:	2300      	movs	r3, #0
 8000604:	71bb      	strb	r3, [r7, #6]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8000606:	e016      	b.n	8000636 <gsm_connect_to_server+0xb2>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 8000608:	4b93      	ldr	r3, [pc, #588]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2206      	movs	r2, #6
 800060e:	4997      	ldr	r1, [pc, #604]	; (800086c <gsm_connect_to_server+0x2e8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fc1b 	bl	8004e4c <strncmp>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00c      	beq.n	8000636 <gsm_connect_to_server+0xb2>
			  				printf("state = %d substate = %d \n",state,substate);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	79ba      	ldrb	r2, [r7, #6]
 8000620:	4619      	mov	r1, r3
 8000622:	4890      	ldr	r0, [pc, #576]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000624:	f004 fb84 	bl	8004d30 <iprintf>
			  				printf("ATE0 ERROR \n");
 8000628:	4891      	ldr	r0, [pc, #580]	; (8000870 <gsm_connect_to_server+0x2ec>)
 800062a:	f004 fc07 	bl	8004e3c <puts>
			  				  state=0;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]
			  			  break;
 8000636:	bf00      	nop
			  		  }
			  		  break;
 8000638:	e1dc      	b.n	80009f4 <gsm_connect_to_server+0x470>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d132      	bne.n	80006a6 <gsm_connect_to_server+0x122>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 8000640:	488c      	ldr	r0, [pc, #560]	; (8000874 <gsm_connect_to_server+0x2f0>)
 8000642:	f000 fc8d 	bl	8000f60 <send_to_gsm>
 8000646:	4603      	mov	r3, r0
 8000648:	4a83      	ldr	r2, [pc, #524]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800064a:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 800064c:	488a      	ldr	r0, [pc, #552]	; (8000878 <gsm_connect_to_server+0x2f4>)
 800064e:	f004 fbf5 	bl	8004e3c <puts>
			  			  HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f001 fa65 	bl	8001b24 <HAL_Delay>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 800065a:	4b7f      	ldr	r3, [pc, #508]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2206      	movs	r2, #6
 8000660:	497f      	ldr	r1, [pc, #508]	; (8000860 <gsm_connect_to_server+0x2dc>)
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fbf2 	bl	8004e4c <strncmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10d      	bne.n	800068a <gsm_connect_to_server+0x106>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	4619      	mov	r1, r3
 8000674:	487b      	ldr	r0, [pc, #492]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000676:	f004 fb5b 	bl	8004d30 <iprintf>
			  				printf("CMEE=2 OK \n");
 800067a:	4880      	ldr	r0, [pc, #512]	; (800087c <gsm_connect_to_server+0x2f8>)
 800067c:	f004 fbde 	bl	8004e3c <puts>
			  				  state=2;
 8000680:	2302      	movs	r3, #2
 8000682:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 8000684:	2300      	movs	r3, #0
 8000686:	71bb      	strb	r3, [r7, #6]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8000688:	e00c      	b.n	80006a4 <gsm_connect_to_server+0x120>
			  				printf("state = %d substate = %d \n",state,substate);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	4619      	mov	r1, r3
 8000690:	4874      	ldr	r0, [pc, #464]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000692:	f004 fb4d 	bl	8004d30 <iprintf>
			  				printf("CMEE=2 OK \n");
 8000696:	4879      	ldr	r0, [pc, #484]	; (800087c <gsm_connect_to_server+0x2f8>)
 8000698:	f004 fbd0 	bl	8004e3c <puts>
			  				  state=0;
 800069c:	2300      	movs	r3, #0
 800069e:	71fb      	strb	r3, [r7, #7]
			  				  substate=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71bb      	strb	r3, [r7, #6]
			  			  break;
 80006a4:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13f      	bne.n	800072c <gsm_connect_to_server+0x1a8>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 80006ac:	4874      	ldr	r0, [pc, #464]	; (8000880 <gsm_connect_to_server+0x2fc>)
 80006ae:	f000 fc57 	bl	8000f60 <send_to_gsm>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a68      	ldr	r2, [pc, #416]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80006b6:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("CPIN \n");
 80006b8:	4872      	ldr	r0, [pc, #456]	; (8000884 <gsm_connect_to_server+0x300>)
 80006ba:	f004 fbbf 	bl	8004e3c <puts>
			  			  if((strstr(str,"READY")!=NULL))
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4971      	ldr	r1, [pc, #452]	; (8000888 <gsm_connect_to_server+0x304>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fbd5 	bl	8004e74 <strstr>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00d      	beq.n	80006ec <gsm_connect_to_server+0x168>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4863      	ldr	r0, [pc, #396]	; (8000864 <gsm_connect_to_server+0x2e0>)
 80006d8:	f004 fb2a 	bl	8004d30 <iprintf>
			  				printf("CPIN READY \n");
 80006dc:	486b      	ldr	r0, [pc, #428]	; (800088c <gsm_connect_to_server+0x308>)
 80006de:	f004 fbad 	bl	8004e3c <puts>
			  			      state=3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	71fb      	strb	r3, [r7, #7]
			  			      substate=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71bb      	strb	r3, [r7, #6]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=2;
			 	  			substate=0;
			  			  }
			  			  break;
 80006ea:	e01e      	b.n	800072a <gsm_connect_to_server+0x1a6>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 80006ec:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2206      	movs	r2, #6
 80006f2:	495e      	ldr	r1, [pc, #376]	; (800086c <gsm_connect_to_server+0x2e8>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fba9 	bl	8004e4c <strncmp>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10a      	bne.n	8000716 <gsm_connect_to_server+0x192>
			  				printf("state = %d substate = %d \n",state,substate);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	4619      	mov	r1, r3
 8000706:	4857      	ldr	r0, [pc, #348]	; (8000864 <gsm_connect_to_server+0x2e0>)
 8000708:	f004 fb12 	bl	8004d30 <iprintf>
			  				state=2;
 800070c:	2302      	movs	r3, #2
 800070e:	71fb      	strb	r3, [r7, #7]
			  				substate=0;
 8000710:	2300      	movs	r3, #0
 8000712:	71bb      	strb	r3, [r7, #6]
			  			  break;
 8000714:	e009      	b.n	800072a <gsm_connect_to_server+0x1a6>
			  				printf("state = %d substate = %d \n",state,substate);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	79ba      	ldrb	r2, [r7, #6]
 800071a:	4619      	mov	r1, r3
 800071c:	4851      	ldr	r0, [pc, #324]	; (8000864 <gsm_connect_to_server+0x2e0>)
 800071e:	f004 fb07 	bl	8004d30 <iprintf>
			  	  			state=2;
 8000722:	2302      	movs	r3, #2
 8000724:	71fb      	strb	r3, [r7, #7]
			 	  			substate=0;
 8000726:	2300      	movs	r3, #0
 8000728:	71bb      	strb	r3, [r7, #6]
			  			  break;
 800072a:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 8162 	bne.w	80009f8 <gsm_connect_to_server+0x474>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 8000734:	4856      	ldr	r0, [pc, #344]	; (8000890 <gsm_connect_to_server+0x30c>)
 8000736:	f000 fc13 	bl	8000f60 <send_to_gsm>
 800073a:	4603      	mov	r3, r0
 800073c:	4a46      	ldr	r2, [pc, #280]	; (8000858 <gsm_connect_to_server+0x2d4>)
 800073e:	6013      	str	r3, [r2, #0]
			  				  //HAL_Delay(1000);
			  				  printf("CAQ \n");
 8000740:	4854      	ldr	r0, [pc, #336]	; (8000894 <gsm_connect_to_server+0x310>)
 8000742:	f004 fb7b 	bl	8004e3c <puts>
			  				  int e=check_signal(str);
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <gsm_connect_to_server+0x2d4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f9ee 	bl	8000b2c <check_signal>
 8000750:	6038      	str	r0, [r7, #0]
			  				  if((strstr(str,"OK")!=NULL))
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <gsm_connect_to_server+0x2d4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4950      	ldr	r1, [pc, #320]	; (8000898 <gsm_connect_to_server+0x314>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fb8b 	bl	8004e74 <strstr>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d01b      	beq.n	800079c <gsm_connect_to_server+0x218>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4619      	mov	r1, r3
 800076a:	483e      	ldr	r0, [pc, #248]	; (8000864 <gsm_connect_to_server+0x2e0>)
 800076c:	f004 fae0 	bl	8004d30 <iprintf>
			  					  printf("CAQ OK\n");
 8000770:	484a      	ldr	r0, [pc, #296]	; (800089c <gsm_connect_to_server+0x318>)
 8000772:	f004 fb63 	bl	8004e3c <puts>
			  					  if(e==0)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d107      	bne.n	800078c <gsm_connect_to_server+0x208>
			  					  {
			  						  printf("signal OK\n");
 800077c:	4848      	ldr	r0, [pc, #288]	; (80008a0 <gsm_connect_to_server+0x31c>)
 800077e:	f004 fb5d 	bl	8004e3c <puts>
			  						  state=4;
 8000782:	2304      	movs	r3, #4
 8000784:	71fb      	strb	r3, [r7, #7]
			  						  substate=0;
 8000786:	2300      	movs	r3, #0
 8000788:	71bb      	strb	r3, [r7, #6]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=3;
			  					  substate=4;
			  				  }
			  				  break;
 800078a:	e011      	b.n	80007b0 <gsm_connect_to_server+0x22c>
			  						  printf("signal NOT OK\n");
 800078c:	4845      	ldr	r0, [pc, #276]	; (80008a4 <gsm_connect_to_server+0x320>)
 800078e:	f004 fb55 	bl	8004e3c <puts>
			  						  state=3;
 8000792:	2303      	movs	r3, #3
 8000794:	71fb      	strb	r3, [r7, #7]
			  						  substate=0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
			  				  break;
 800079a:	e009      	b.n	80007b0 <gsm_connect_to_server+0x22c>
			  					  printf("state = %d substate = %d \n",state,substate);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	79ba      	ldrb	r2, [r7, #6]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <gsm_connect_to_server+0x2e0>)
 80007a4:	f004 fac4 	bl	8004d30 <iprintf>
			  					  state=3;
 80007a8:	2303      	movs	r3, #3
 80007aa:	71fb      	strb	r3, [r7, #7]
			  					  substate=4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	71bb      	strb	r3, [r7, #6]
			  				  break;
 80007b0:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 80007b2:	e121      	b.n	80009f8 <gsm_connect_to_server+0x474>
				  	case 4:
				  	{
				  		switch(substate)
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <gsm_connect_to_server+0x23c>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d02f      	beq.n	800081e <gsm_connect_to_server+0x29a>
				  				 state=4;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 80007be:	e042      	b.n	8000846 <gsm_connect_to_server+0x2c2>
				  			  str =send_to_gsm("AT+CREG?\r");
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <gsm_connect_to_server+0x324>)
 80007c2:	f000 fbcd 	bl	8000f60 <send_to_gsm>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a23      	ldr	r2, [pc, #140]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007ca:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <gsm_connect_to_server+0x328>)
 80007ce:	f004 fb35 	bl	8004e3c <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4936      	ldr	r1, [pc, #216]	; (80008b0 <gsm_connect_to_server+0x32c>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fb4b 	bl	8004e74 <strstr>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d111      	bne.n	8000808 <gsm_connect_to_server+0x284>
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4932      	ldr	r1, [pc, #200]	; (80008b4 <gsm_connect_to_server+0x330>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fb42 	bl	8004e74 <strstr>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d108      	bne.n	8000808 <gsm_connect_to_server+0x284>
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <gsm_connect_to_server+0x2d4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	492f      	ldr	r1, [pc, #188]	; (80008b8 <gsm_connect_to_server+0x334>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fb39 	bl	8004e74 <strstr>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <gsm_connect_to_server+0x294>
				  				  state=5;
 8000808:	2305      	movs	r3, #5
 800080a:	71fb      	strb	r3, [r7, #7]
				  				  substate=0;
 800080c:	2300      	movs	r3, #0
 800080e:	71bb      	strb	r3, [r7, #6]
				  				  printf("match found\n");
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <gsm_connect_to_server+0x338>)
 8000812:	f004 fb13 	bl	8004e3c <puts>
				  			  break;
 8000816:	e016      	b.n	8000846 <gsm_connect_to_server+0x2c2>
				  				  substate=1;
 8000818:	2301      	movs	r3, #1
 800081a:	71bb      	strb	r3, [r7, #6]
				  			  break;
 800081c:	e013      	b.n	8000846 <gsm_connect_to_server+0x2c2>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <gsm_connect_to_server+0x2d4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2206      	movs	r2, #6
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <gsm_connect_to_server+0x2e8>)
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fb10 	bl	8004e4c <strncmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d104      	bne.n	800083c <gsm_connect_to_server+0x2b8>
				  				 state=4;
 8000832:	2304      	movs	r3, #4
 8000834:	71fb      	strb	r3, [r7, #7]
				  				 substate=0;
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]
				  			 break;
 800083a:	e003      	b.n	8000844 <gsm_connect_to_server+0x2c0>
				  				 state=4;
 800083c:	2304      	movs	r3, #4
 800083e:	71fb      	strb	r3, [r7, #7]
				  				 substate=0;
 8000840:	2300      	movs	r3, #0
 8000842:	71bb      	strb	r3, [r7, #6]
				  			 break;
 8000844:	bf00      	nop
				  		}
				  		break;
 8000846:	e0dc      	b.n	8000a02 <gsm_connect_to_server+0x47e>
				  	}

				  	case 5:
				  		switch(substate)
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d038      	beq.n	80008c0 <gsm_connect_to_server+0x33c>
 800084e:	2b01      	cmp	r3, #1
 8000850:	d059      	beq.n	8000906 <gsm_connect_to_server+0x382>
				  				state=5;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 8000852:	e071      	b.n	8000938 <gsm_connect_to_server+0x3b4>
 8000854:	08005da4 	.word	0x08005da4
 8000858:	2000008c 	.word	0x2000008c
 800085c:	08005dac 	.word	0x08005dac
 8000860:	08005db4 	.word	0x08005db4
 8000864:	08005dbc 	.word	0x08005dbc
 8000868:	08005dd8 	.word	0x08005dd8
 800086c:	08005de4 	.word	0x08005de4
 8000870:	08005df0 	.word	0x08005df0
 8000874:	08005dfc 	.word	0x08005dfc
 8000878:	08005e08 	.word	0x08005e08
 800087c:	08005e10 	.word	0x08005e10
 8000880:	08005e1c 	.word	0x08005e1c
 8000884:	08005e28 	.word	0x08005e28
 8000888:	08005e30 	.word	0x08005e30
 800088c:	08005e38 	.word	0x08005e38
 8000890:	08005e44 	.word	0x08005e44
 8000894:	08005e4c 	.word	0x08005e4c
 8000898:	08005e54 	.word	0x08005e54
 800089c:	08005e58 	.word	0x08005e58
 80008a0:	08005e60 	.word	0x08005e60
 80008a4:	08005e6c 	.word	0x08005e6c
 80008a8:	08005e7c 	.word	0x08005e7c
 80008ac:	08005e88 	.word	0x08005e88
 80008b0:	08005e90 	.word	0x08005e90
 80008b4:	08005e94 	.word	0x08005e94
 80008b8:	08005e98 	.word	0x08005e98
 80008bc:	08005e9c 	.word	0x08005e9c
				  			str = send_to_gsm("AT+CGREG?\r");
 80008c0:	4852      	ldr	r0, [pc, #328]	; (8000a0c <gsm_connect_to_server+0x488>)
 80008c2:	f000 fb4d 	bl	8000f60 <send_to_gsm>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80008ca:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 80008cc:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4950      	ldr	r1, [pc, #320]	; (8000a14 <gsm_connect_to_server+0x490>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 face 	bl	8004e74 <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <gsm_connect_to_server+0x36c>
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	494d      	ldr	r1, [pc, #308]	; (8000a18 <gsm_connect_to_server+0x494>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fac5 	bl	8004e74 <strstr>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <gsm_connect_to_server+0x37c>
				  				state=6;
 80008f0:	2306      	movs	r3, #6
 80008f2:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	71bb      	strb	r3, [r7, #6]
				  				printf("match found\n");
 80008f8:	4848      	ldr	r0, [pc, #288]	; (8000a1c <gsm_connect_to_server+0x498>)
 80008fa:	f004 fa9f 	bl	8004e3c <puts>
				  			break;
 80008fe:	e01b      	b.n	8000938 <gsm_connect_to_server+0x3b4>
				  				substate=1;
 8000900:	2301      	movs	r3, #1
 8000902:	71bb      	strb	r3, [r7, #6]
				  			break;
 8000904:	e018      	b.n	8000938 <gsm_connect_to_server+0x3b4>
				  			str = send_to_gsm("AT+CGREG=1\r");
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <gsm_connect_to_server+0x49c>)
 8000908:	f000 fb2a 	bl	8000f60 <send_to_gsm>
 800090c:	4603      	mov	r3, r0
 800090e:	4a40      	ldr	r2, [pc, #256]	; (8000a10 <gsm_connect_to_server+0x48c>)
 8000910:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <gsm_connect_to_server+0x48c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4943      	ldr	r1, [pc, #268]	; (8000a24 <gsm_connect_to_server+0x4a0>)
 8000918:	4618      	mov	r0, r3
 800091a:	f004 faab 	bl	8004e74 <strstr>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <gsm_connect_to_server+0x3aa>
				  				state=5;
 8000924:	2305      	movs	r3, #5
 8000926:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 8000928:	2300      	movs	r3, #0
 800092a:	71bb      	strb	r3, [r7, #6]
				  			break;
 800092c:	e003      	b.n	8000936 <gsm_connect_to_server+0x3b2>
				  				state=5;
 800092e:	2305      	movs	r3, #5
 8000930:	71fb      	strb	r3, [r7, #7]
				  				substate=0;
 8000932:	2300      	movs	r3, #0
 8000934:	71bb      	strb	r3, [r7, #6]
				  			break;
 8000936:	bf00      	nop
				  		}
				  		break;
 8000938:	e063      	b.n	8000a02 <gsm_connect_to_server+0x47e>

				  	case 6:
				  		{
				  			switch(substate)
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d15d      	bne.n	80009fc <gsm_connect_to_server+0x478>
				  			{
				  			case 0:
				  				str = send_to_gsm("AT+CGDCONT?\r");
 8000940:	4839      	ldr	r0, [pc, #228]	; (8000a28 <gsm_connect_to_server+0x4a4>)
 8000942:	f000 fb0d 	bl	8000f60 <send_to_gsm>
 8000946:	4603      	mov	r3, r0
 8000948:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <gsm_connect_to_server+0x48c>)
 800094a:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT?\n");
 800094c:	4837      	ldr	r0, [pc, #220]	; (8000a2c <gsm_connect_to_server+0x4a8>)
 800094e:	f004 fa75 	bl	8004e3c <puts>
				  				if((strstr(str,"OK")!=NULL))
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <gsm_connect_to_server+0x48c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4933      	ldr	r1, [pc, #204]	; (8000a24 <gsm_connect_to_server+0x4a0>)
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fa8b 	bl	8004e74 <strstr>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00a      	beq.n	800097a <gsm_connect_to_server+0x3f6>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	79ba      	ldrb	r2, [r7, #6]
 8000968:	4619      	mov	r1, r3
 800096a:	4831      	ldr	r0, [pc, #196]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 800096c:	f004 f9e0 	bl	8004d30 <iprintf>
				  					state=7;
 8000970:	2307      	movs	r3, #7
 8000972:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 8000974:	2300      	movs	r3, #0
 8000976:	71bb      	strb	r3, [r7, #6]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=7;
				  					substate=0;
				  				}
				  				break;
 8000978:	e009      	b.n	800098e <gsm_connect_to_server+0x40a>
				  					printf("state = %d substate = %d \n",state,substate);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	79ba      	ldrb	r2, [r7, #6]
 800097e:	4619      	mov	r1, r3
 8000980:	482b      	ldr	r0, [pc, #172]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 8000982:	f004 f9d5 	bl	8004d30 <iprintf>
				  					state=7;
 8000986:	2307      	movs	r3, #7
 8000988:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 800098a:	2300      	movs	r3, #0
 800098c:	71bb      	strb	r3, [r7, #6]
				  				break;
 800098e:	bf00      	nop
				  			}
				  			break;
 8000990:	e034      	b.n	80009fc <gsm_connect_to_server+0x478>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d133      	bne.n	8000a00 <gsm_connect_to_server+0x47c>
				  			{
				  			case 0:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8000998:	4826      	ldr	r0, [pc, #152]	; (8000a34 <gsm_connect_to_server+0x4b0>)
 800099a:	f000 fae1 	bl	8000f60 <send_to_gsm>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80009a2:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1\n");
 80009a4:	4824      	ldr	r0, [pc, #144]	; (8000a38 <gsm_connect_to_server+0x4b4>)
 80009a6:	f004 fa49 	bl	8004e3c <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <gsm_connect_to_server+0x48c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2206      	movs	r2, #6
 80009b0:	4922      	ldr	r1, [pc, #136]	; (8000a3c <gsm_connect_to_server+0x4b8>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fa4a 	bl	8004e4c <strncmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10a      	bne.n	80009d4 <gsm_connect_to_server+0x450>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	4619      	mov	r1, r3
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 80009c6:	f004 f9b3 	bl	8004d30 <iprintf>
				  					state=8;
 80009ca:	2308      	movs	r3, #8
 80009cc:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71bb      	strb	r3, [r7, #6]
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  			}
				  			break;
 80009d2:	e015      	b.n	8000a00 <gsm_connect_to_server+0x47c>
				  					printf("state = %d substate = %d \n",state,substate);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	4619      	mov	r1, r3
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <gsm_connect_to_server+0x4ac>)
 80009dc:	f004 f9a8 	bl	8004d30 <iprintf>
				  					state=6;
 80009e0:	2306      	movs	r3, #6
 80009e2:	71fb      	strb	r3, [r7, #7]
				  					substate=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	71bb      	strb	r3, [r7, #6]
				  			break;
 80009e8:	e00a      	b.n	8000a00 <gsm_connect_to_server+0x47c>
				  		}


				  		default:
				  			printf("completed work \n");
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <gsm_connect_to_server+0x4bc>)
 80009ec:	f004 fa26 	bl	8004e3c <puts>
				  			return HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e007      	b.n	8000a04 <gsm_connect_to_server+0x480>
			  		  break;
 80009f4:	bf00      	nop
 80009f6:	e5cc      	b.n	8000592 <gsm_connect_to_server+0xe>
			  			break;
 80009f8:	bf00      	nop
 80009fa:	e5ca      	b.n	8000592 <gsm_connect_to_server+0xe>
				  			break;
 80009fc:	bf00      	nop
 80009fe:	e5c8      	b.n	8000592 <gsm_connect_to_server+0xe>
				  			break;
 8000a00:	bf00      	nop
	switch(state)
 8000a02:	e5c6      	b.n	8000592 <gsm_connect_to_server+0xe>
			  	  }
	}
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08005ea8 	.word	0x08005ea8
 8000a10:	2000008c 	.word	0x2000008c
 8000a14:	08005e90 	.word	0x08005e90
 8000a18:	08005eb4 	.word	0x08005eb4
 8000a1c:	08005e9c 	.word	0x08005e9c
 8000a20:	08005eb8 	.word	0x08005eb8
 8000a24:	08005e54 	.word	0x08005e54
 8000a28:	08005ec4 	.word	0x08005ec4
 8000a2c:	08005ed4 	.word	0x08005ed4
 8000a30:	08005dbc 	.word	0x08005dbc
 8000a34:	08005ee0 	.word	0x08005ee0
 8000a38:	08005efc 	.word	0x08005efc
 8000a3c:	08005db4 	.word	0x08005db4
 8000a40:	08005f08 	.word	0x08005f08

08000a44 <check_server_connection>:
int check_server_connection()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
	int state=0,substate=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
	int time_out=30;
 8000a52:	231e      	movs	r3, #30
 8000a54:	607b      	str	r3, [r7, #4]
	while(time_out)
 8000a56:	e02d      	b.n	8000ab4 <check_server_connection+0x70>
	{
		switch(state)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <check_server_connection+0x22>
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d014      	beq.n	8000a8e <check_server_connection+0x4a>
 8000a64:	e026      	b.n	8000ab4 <check_server_connection+0x70>
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN?\r");
 8000a66:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <check_server_connection+0x80>)
 8000a68:	f000 fa7a 	bl	8000f60 <send_to_gsm>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <check_server_connection+0x84>)
 8000a70:	6013      	str	r3, [r2, #0]
			if(strstr(str,"ERROR")!=NULL)
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <check_server_connection+0x84>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4915      	ldr	r1, [pc, #84]	; (8000acc <check_server_connection+0x88>)
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f9fb 	bl	8004e74 <strstr>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <check_server_connection+0x46>
			{
				state=0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e001      	b.n	8000a8e <check_server_connection+0x4a>
			}
			else
			{
				substate=1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
			}
		case 1:
			if(strstr(str,"139.59.78.252")!=NULL)
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <check_server_connection+0x84>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	490f      	ldr	r1, [pc, #60]	; (8000ad0 <check_server_connection+0x8c>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 f9ed 	bl	8004e74 <strstr>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <check_server_connection+0x66>
			{
				printf("tcp connection established\n");
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <check_server_connection+0x90>)
 8000aa2:	f004 f9cb 	bl	8004e3c <puts>
				return 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e008      	b.n	8000abc <check_server_connection+0x78>
			}
			else
			{
				printf("tcp connection NOT established\n");
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <check_server_connection+0x94>)
 8000aac:	f004 f9c6 	bl	8004e3c <puts>
				return 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e003      	b.n	8000abc <check_server_connection+0x78>
	while(time_out)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1ce      	bne.n	8000a58 <check_server_connection+0x14>
			}

		}
	}
	return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	08005f18 	.word	0x08005f18
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	08005f28 	.word	0x08005f28
 8000ad0:	08005f30 	.word	0x08005f30
 8000ad4:	08005f40 	.word	0x08005f40
 8000ad8:	08005f5c 	.word	0x08005f5c

08000adc <gsm_disconnect_to_server>:


int gsm_disconnect_to_server()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	int cls_state=0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
	//while(1)
	{
	switch(cls_state)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d113      	bne.n	8000b14 <gsm_disconnect_to_server+0x38>
	{
	case 0:
		str =(char *) send_to_gsm("AT+CIPCLOSE\r");
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <gsm_disconnect_to_server+0x44>)
 8000aee:	f000 fa37 	bl	8000f60 <send_to_gsm>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <gsm_disconnect_to_server+0x48>)
 8000af6:	6013      	str	r3, [r2, #0]
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <gsm_disconnect_to_server+0x48>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2206      	movs	r2, #6
 8000afe:	490a      	ldr	r1, [pc, #40]	; (8000b28 <gsm_disconnect_to_server+0x4c>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f9a3 	bl	8004e4c <strncmp>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <gsm_disconnect_to_server+0x34>
			{
//				printf("state = %d substate = %d \n",state,substate);
			    return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e003      	b.n	8000b18 <gsm_disconnect_to_server+0x3c>
			 }
			else
			{
				cls_state=0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
			}
	}
	}
	return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295


}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08005f7c 	.word	0x08005f7c
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	08005db4 	.word	0x08005db4

08000b2c <check_signal>:

int check_signal(char *str)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8000b38:	e04b      	b.n	8000bd2 <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d120      	bne.n	8000b8a <check_signal+0x5e>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3b02      	subs	r3, #2
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b3a      	cmp	r3, #58	; 0x3a
 8000b54:	d119      	bne.n	8000b8a <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000b60:	d805      	bhi.n	8000b6e <check_signal+0x42>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b39      	cmp	r3, #57	; 0x39
 8000b6c:	d80d      	bhi.n	8000b8a <check_signal+0x5e>
		{
			rssi=str+i;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4833      	ldr	r0, [pc, #204]	; (8000c54 <check_signal+0x128>)
 8000b86:	f004 f8d3 	bl	8004d30 <iprintf>
		}
	    }
	    if(str[i-1]==',')
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b2c      	cmp	r3, #44	; 0x2c
 8000b96:	d119      	bne.n	8000bcc <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ba2:	d805      	bhi.n	8000bb0 <check_signal+0x84>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b39      	cmp	r3, #57	; 0x39
 8000bae:	d80d      	bhi.n	8000bcc <check_signal+0xa0>
		        {
		        	ber=str+i;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <check_signal+0x12c>)
 8000bc8:	f004 f8b2 	bl	8004d30 <iprintf>
	        	}

	    }
		i++;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ad      	bne.n	8000b3a <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4619      	mov	r1, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	481b      	ldr	r0, [pc, #108]	; (8000c5c <check_signal+0x130>)
 8000bee:	f004 f89f 	bl	8004d30 <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4817      	ldr	r0, [pc, #92]	; (8000c60 <check_signal+0x134>)
 8000c02:	f004 f895 	bl	8004d30 <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b39      	cmp	r3, #57	; 0x39
 8000c0c:	d11d      	bne.n	8000c4a <check_signal+0x11e>
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	3301      	adds	r3, #1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b39      	cmp	r3, #57	; 0x39
 8000c16:	d118      	bne.n	8000c4a <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b31      	cmp	r3, #49	; 0x31
 8000c1e:	d803      	bhi.n	8000c28 <check_signal+0xfc>
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b38      	cmp	r3, #56	; 0x38
 8000c26:	d80e      	bhi.n	8000c46 <check_signal+0x11a>
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c30:	d804      	bhi.n	8000c3c <check_signal+0x110>
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b39      	cmp	r3, #57	; 0x39
 8000c3a:	d804      	bhi.n	8000c46 <check_signal+0x11a>
	    {
	    printf("ok");
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <check_signal+0x138>)
 8000c3e:	f004 f877 	bl	8004d30 <iprintf>
	    return 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e002      	b.n	8000c4c <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 8000c4a:	2301      	movs	r3, #1
	}
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08005f8c 	.word	0x08005f8c
 8000c58:	08005f98 	.word	0x08005f98
 8000c5c:	08005fa4 	.word	0x08005fa4
 8000c60:	08005fb4 	.word	0x08005fb4
 8000c64:	08005fc4 	.word	0x08005fc4

08000c68 <connect_tcp_server>:

int connect_tcp_server()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
	int state=0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
	int substate=0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
	int count=30;
 8000c76:	231e      	movs	r3, #30
 8000c78:	607b      	str	r3, [r7, #4]
	while(count--)
 8000c7a:	e0f3      	b.n	8000e64 <connect_tcp_server+0x1fc>
	{
	switch(state)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	f000 8086 	beq.w	8000d90 <connect_tcp_server+0x128>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	f300 80e7 	bgt.w	8000e5a <connect_tcp_server+0x1f2>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <connect_tcp_server+0x32>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d036      	beq.n	8000d06 <connect_tcp_server+0x9e>
 8000c98:	e0df      	b.n	8000e5a <connect_tcp_server+0x1f2>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <connect_tcp_server+0x40>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d017      	beq.n	8000cd6 <connect_tcp_server+0x6e>
 8000ca6:	e0dd      	b.n	8000e64 <connect_tcp_server+0x1fc>
	case 0:
	{
		switch(substate)
		{
		case 0:
			str=send_to_gsm("AT+CIPMODE?\r\n");
 8000ca8:	4875      	ldr	r0, [pc, #468]	; (8000e80 <connect_tcp_server+0x218>)
 8000caa:	f000 f959 	bl	8000f60 <send_to_gsm>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a74      	ldr	r2, [pc, #464]	; (8000e84 <connect_tcp_server+0x21c>)
 8000cb2:	6013      	str	r3, [r2, #0]
			if(strstr(str,"+CIPMODE: 0"))
 8000cb4:	4b73      	ldr	r3, [pc, #460]	; (8000e84 <connect_tcp_server+0x21c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4973      	ldr	r1, [pc, #460]	; (8000e88 <connect_tcp_server+0x220>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 f8da 	bl	8004e74 <strstr>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <connect_tcp_server+0x68>
			{
				state=1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=1;
			}
			break;
 8000cce:	e019      	b.n	8000d04 <connect_tcp_server+0x9c>
				substate=1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
			break;
 8000cd4:	e016      	b.n	8000d04 <connect_tcp_server+0x9c>
		case 1:
			str=send_to_gsm("AT+CIPMODE=0\r\n");
 8000cd6:	486d      	ldr	r0, [pc, #436]	; (8000e8c <connect_tcp_server+0x224>)
 8000cd8:	f000 f942 	bl	8000f60 <send_to_gsm>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a69      	ldr	r2, [pc, #420]	; (8000e84 <connect_tcp_server+0x21c>)
 8000ce0:	6013      	str	r3, [r2, #0]
			if(strstr(str,"OK"))
 8000ce2:	4b68      	ldr	r3, [pc, #416]	; (8000e84 <connect_tcp_server+0x21c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	496a      	ldr	r1, [pc, #424]	; (8000e90 <connect_tcp_server+0x228>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 f8c3 	bl	8004e74 <strstr>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <connect_tcp_server+0x96>
			{
				state=0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=0;
			}
			break;
 8000cfc:	e001      	b.n	8000d02 <connect_tcp_server+0x9a>
				substate=0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
			break;
 8000d02:	bf00      	nop
		}
		break;
 8000d04:	e0ae      	b.n	8000e64 <connect_tcp_server+0x1fc>
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <connect_tcp_server+0xac>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d025      	beq.n	8000d5e <connect_tcp_server+0xf6>
 8000d12:	e0a7      	b.n	8000e64 <connect_tcp_server+0x1fc>
	case 1:
	{
		switch(substate)
		{
		case 0:
			str = send_to_gsm("AT+NETOPEN\r\n");
 8000d14:	485f      	ldr	r0, [pc, #380]	; (8000e94 <connect_tcp_server+0x22c>)
 8000d16:	f000 f923 	bl	8000f60 <send_to_gsm>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a59      	ldr	r2, [pc, #356]	; (8000e84 <connect_tcp_server+0x21c>)
 8000d1e:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("NETOPEN\n");
 8000d20:	485d      	ldr	r0, [pc, #372]	; (8000e98 <connect_tcp_server+0x230>)
 8000d22:	f004 f88b 	bl	8004e3c <puts>
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8000d26:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <connect_tcp_server+0x21c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2206      	movs	r2, #6
 8000d2c:	495b      	ldr	r1, [pc, #364]	; (8000e9c <connect_tcp_server+0x234>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f004 f88c 	bl	8004e4c <strncmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <connect_tcp_server+0xe6>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	68f9      	ldr	r1, [r7, #12]
 8000d3e:	4858      	ldr	r0, [pc, #352]	; (8000ea0 <connect_tcp_server+0x238>)
 8000d40:	f003 fff6 	bl	8004d30 <iprintf>
				state=2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
			else
			{
				printf("state = %d substate = %d \n",state,substate);
				substate=1;
			}
			break;
 8000d4c:	e01f      	b.n	8000d8e <connect_tcp_server+0x126>
				printf("state = %d substate = %d \n",state,substate);
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	4853      	ldr	r0, [pc, #332]	; (8000ea0 <connect_tcp_server+0x238>)
 8000d54:	f003 ffec 	bl	8004d30 <iprintf>
				substate=1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
			break;
 8000d5c:	e017      	b.n	8000d8e <connect_tcp_server+0x126>
		case 1:
			if((strstr(str,"Network is already opened")!=NULL))
 8000d5e:	4b49      	ldr	r3, [pc, #292]	; (8000e84 <connect_tcp_server+0x21c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4950      	ldr	r1, [pc, #320]	; (8000ea4 <connect_tcp_server+0x23c>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 f885 	bl	8004e74 <strstr>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d009      	beq.n	8000d84 <connect_tcp_server+0x11c>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	68f9      	ldr	r1, [r7, #12]
 8000d74:	484a      	ldr	r0, [pc, #296]	; (8000ea0 <connect_tcp_server+0x238>)
 8000d76:	f003 ffdb 	bl	8004d30 <iprintf>
				state=2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
			else
			{
				state=0;
				substate=0;
			}
			break;
 8000d82:	e003      	b.n	8000d8c <connect_tcp_server+0x124>
				state=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
			break;
 8000d8c:	bf00      	nop

		}
		break;
 8000d8e:	e069      	b.n	8000e64 <connect_tcp_server+0x1fc>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d044      	beq.n	8000e20 <connect_tcp_server+0x1b8>
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	dc63      	bgt.n	8000e64 <connect_tcp_server+0x1fc>
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <connect_tcp_server+0x142>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d024      	beq.n	8000df2 <connect_tcp_server+0x18a>
 8000da8:	e05c      	b.n	8000e64 <connect_tcp_server+0x1fc>
	case 2:
	{
		switch(substate)
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",49791\r");
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <connect_tcp_server+0x240>)
 8000dac:	f000 f8d8 	bl	8000f60 <send_to_gsm>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <connect_tcp_server+0x21c>)
 8000db4:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("CIPOPEN\n");
 8000db6:	483d      	ldr	r0, [pc, #244]	; (8000eac <connect_tcp_server+0x244>)
 8000db8:	f004 f840 	bl	8004e3c <puts>
			if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <connect_tcp_server+0x21c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	493b      	ldr	r1, [pc, #236]	; (8000eb0 <connect_tcp_server+0x248>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 f856 	bl	8004e74 <strstr>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d009      	beq.n	8000de2 <connect_tcp_server+0x17a>
				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
			{
				printf("state = %d substate = %d \n",state,substate);
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	68f9      	ldr	r1, [r7, #12]
 8000dd2:	4833      	ldr	r0, [pc, #204]	; (8000ea0 <connect_tcp_server+0x238>)
 8000dd4:	f003 ffac 	bl	8004d30 <iprintf>
				state=3;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=1;
			}
			break;
 8000de0:	e03a      	b.n	8000e58 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	68f9      	ldr	r1, [r7, #12]
 8000de6:	482e      	ldr	r0, [pc, #184]	; (8000ea0 <connect_tcp_server+0x238>)
 8000de8:	f003 ffa2 	bl	8004d30 <iprintf>
				substate=1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
			break;
 8000df0:	e032      	b.n	8000e58 <connect_tcp_server+0x1f0>
		case 1:
			if(check_server_connection()==0)
 8000df2:	f7ff fe27 	bl	8000a44 <check_server_connection>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <connect_tcp_server+0x1a8>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <connect_tcp_server+0x238>)
 8000e02:	f003 ff95 	bl	8004d30 <iprintf>
				state=3;
 8000e06:	2303      	movs	r3, #3
 8000e08:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=2;
			}
			break;
 8000e0e:	e023      	b.n	8000e58 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	68f9      	ldr	r1, [r7, #12]
 8000e14:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <connect_tcp_server+0x238>)
 8000e16:	f003 ff8b 	bl	8004d30 <iprintf>
				substate=2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	60bb      	str	r3, [r7, #8]
			break;
 8000e1e:	e01b      	b.n	8000e58 <connect_tcp_server+0x1f0>
		case 2:
			//if((strstr(str,"ERROR")!=NULL))
			if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <connect_tcp_server+0x21c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2206      	movs	r2, #6
 8000e26:	4923      	ldr	r1, [pc, #140]	; (8000eb4 <connect_tcp_server+0x24c>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 f80f 	bl	8004e4c <strncmp>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <connect_tcp_server+0x1dc>
			{
				printf("state = %d substate = %d \n",state,substate);
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	68f9      	ldr	r1, [r7, #12]
 8000e38:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <connect_tcp_server+0x238>)
 8000e3a:	f003 ff79 	bl	8004d30 <iprintf>
				//state=3;
				substate=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				state=0;
				substate=0;
			}
			break;
 8000e42:	e008      	b.n	8000e56 <connect_tcp_server+0x1ee>
				printf("state = %d substate = %d \n",state,substate);
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <connect_tcp_server+0x238>)
 8000e4a:	f003 ff71 	bl	8004d30 <iprintf>
				state=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
				substate=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
			break;
 8000e56:	bf00      	nop


		}
		break;
 8000e58:	e004      	b.n	8000e64 <connect_tcp_server+0x1fc>
	}
	default:
		printf("opened successfulyy\n");
 8000e5a:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <connect_tcp_server+0x250>)
 8000e5c:	f003 ffee 	bl	8004e3c <puts>
		return 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e009      	b.n	8000e78 <connect_tcp_server+0x210>
	while(count--)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f47f af06 	bne.w	8000c7c <connect_tcp_server+0x14>
	}
}
	printf("Time out\n");
 8000e70:	4812      	ldr	r0, [pc, #72]	; (8000ebc <connect_tcp_server+0x254>)
 8000e72:	f003 ffe3 	bl	8004e3c <puts>

	return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	08005fc8 	.word	0x08005fc8
 8000e84:	2000008c 	.word	0x2000008c
 8000e88:	08005fd8 	.word	0x08005fd8
 8000e8c:	08005fe4 	.word	0x08005fe4
 8000e90:	08005e54 	.word	0x08005e54
 8000e94:	08005ff4 	.word	0x08005ff4
 8000e98:	08006004 	.word	0x08006004
 8000e9c:	08005db4 	.word	0x08005db4
 8000ea0:	08005dbc 	.word	0x08005dbc
 8000ea4:	0800600c 	.word	0x0800600c
 8000ea8:	08006028 	.word	0x08006028
 8000eac:	08006054 	.word	0x08006054
 8000eb0:	0800605c 	.word	0x0800605c
 8000eb4:	08005de4 	.word	0x08005de4
 8000eb8:	0800606c 	.word	0x0800606c
 8000ebc:	08006080 	.word	0x08006080

08000ec0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ec8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ecc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d013      	beq.n	8000f00 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000edc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ee0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ee8:	e000      	b.n	8000eec <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f9      	beq.n	8000eea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ef6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f00:	687b      	ldr	r3, [r7, #4]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_write>:
#include "main.h"
#include<stdio.h>
#include<string.h>
#include"GSM.h"
int _write(int file,char *ptr,int len)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
    int i=0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e009      	b.n	8000f38 <_write+0x2a>
      ITM_SendChar((*ptr++));
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffc7 	bl	8000ec0 <ITM_SendChar>
    for(i=0;i<len;i++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf1      	blt.n	8000f24 <_write+0x16>
    return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_UART_TxCpltCallback>:
uint8_t command[20];
uint8_t response[20];
char *data1;
uint8_t var=0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]

}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <send_to_gsm>:
char *send_to_gsm(char * command)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 8000f68:	22c8      	movs	r2, #200	; 0xc8
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	480f      	ldr	r0, [pc, #60]	; (8000fac <send_to_gsm+0x4c>)
 8000f6e:	f003 fed7 	bl	8004d20 <memset>
	 printf("tx start\n");
 8000f72:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <send_to_gsm+0x50>)
 8000f74:	f003 ff62 	bl	8004e3c <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff f929 	bl	80001d0 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <send_to_gsm+0x54>)
 8000f88:	f002 fd6a 	bl	8003a60 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	22c8      	movs	r2, #200	; 0xc8
 8000f92:	4906      	ldr	r1, [pc, #24]	; (8000fac <send_to_gsm+0x4c>)
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <send_to_gsm+0x54>)
 8000f96:	f002 fc91 	bl	80038bc <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8000f9a:	4904      	ldr	r1, [pc, #16]	; (8000fac <send_to_gsm+0x4c>)
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <send_to_gsm+0x58>)
 8000f9e:	f003 fec7 	bl	8004d30 <iprintf>
	 return (char *)rx;
 8000fa2:	4b02      	ldr	r3, [pc, #8]	; (8000fac <send_to_gsm+0x4c>)
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000324 	.word	0x20000324
 8000fb0:	080060bc 	.word	0x080060bc
 8000fb4:	20000090 	.word	0x20000090
 8000fb8:	080060c8 	.word	0x080060c8

08000fbc <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
		HAL_Delay(2000);
		HAL_UART_Transmit_IT(&huart4,(uint8_t *) "hi vishnu",9);
		HAL_UART_Receive(&huart4, (uint8_t *)rx, 200,1000);*/
	{
		//char buf[]="{\"latitude\":1727.401123 N, \"longitude\":7822.510254 E, \"time\":12:48:30}";
		memset(rx,'\0',sizeof(rx));
 8000fc6:	22c8      	movs	r2, #200	; 0xc8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <send_mesg_to_server+0x88>)
 8000fcc:	f003 fea8 	bl	8004d20 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=0,61\r",16);
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	491d      	ldr	r1, [pc, #116]	; (8001048 <send_mesg_to_server+0x8c>)
 8000fd4:	481d      	ldr	r0, [pc, #116]	; (800104c <send_mesg_to_server+0x90>)
 8000fd6:	f002 fd43 	bl	8003a60 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8000fda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fde:	22c8      	movs	r2, #200	; 0xc8
 8000fe0:	4918      	ldr	r1, [pc, #96]	; (8001044 <send_mesg_to_server+0x88>)
 8000fe2:	481a      	ldr	r0, [pc, #104]	; (800104c <send_mesg_to_server+0x90>)
 8000fe4:	f002 fc6a 	bl	80038bc <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8000fe8:	4916      	ldr	r1, [pc, #88]	; (8001044 <send_mesg_to_server+0x88>)
 8000fea:	4819      	ldr	r0, [pc, #100]	; (8001050 <send_mesg_to_server+0x94>)
 8000fec:	f003 fea0 	bl	8004d30 <iprintf>
		memset(rx,'\0',sizeof(rx));
 8000ff0:	22c8      	movs	r2, #200	; 0xc8
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <send_mesg_to_server+0x88>)
 8000ff6:	f003 fe93 	bl	8004d20 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"latitude:1727.401123 N, longitude:7822.510254 E,time:12:48:30", strlen("latitude:1727.401123 N, longitude:7822.510254 E,time:12:48:30"));
 8000ffa:	223d      	movs	r2, #61	; 0x3d
 8000ffc:	4915      	ldr	r1, [pc, #84]	; (8001054 <send_mesg_to_server+0x98>)
 8000ffe:	4813      	ldr	r0, [pc, #76]	; (800104c <send_mesg_to_server+0x90>)
 8001000:	f002 fd2e 	bl	8003a60 <HAL_UART_Transmit_IT>
		//HAL_UART_Transmit_IT(&huart4,(uint8_t*)"hiteam", 7);

		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001004:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001008:	22c8      	movs	r2, #200	; 0xc8
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <send_mesg_to_server+0x88>)
 800100c:	480f      	ldr	r0, [pc, #60]	; (800104c <send_mesg_to_server+0x90>)
 800100e:	f002 fc55 	bl	80038bc <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001012:	490c      	ldr	r1, [pc, #48]	; (8001044 <send_mesg_to_server+0x88>)
 8001014:	480e      	ldr	r0, [pc, #56]	; (8001050 <send_mesg_to_server+0x94>)
 8001016:	f003 fe8b 	bl	8004d30 <iprintf>

		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 800101a:	490f      	ldr	r1, [pc, #60]	; (8001058 <send_mesg_to_server+0x9c>)
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <send_mesg_to_server+0x88>)
 800101e:	f003 ff29 	bl	8004e74 <strstr>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <send_mesg_to_server+0x76>
		{
			printf("mesg send successfully\n");
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <send_mesg_to_server+0xa0>)
 800102a:	f003 ff07 	bl	8004e3c <puts>
			return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e003      	b.n	800103a <send_mesg_to_server+0x7e>
		}
		else
		{
			printf("mesg NOT send\n");
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <send_mesg_to_server+0xa4>)
 8001034:	f003 ff02 	bl	8004e3c <puts>
			return 1;
 8001038:	2301      	movs	r3, #1
		}
	}
	return 1;
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000324 	.word	0x20000324
 8001048:	080060d4 	.word	0x080060d4
 800104c:	20000090 	.word	0x20000090
 8001050:	080060e8 	.word	0x080060e8
 8001054:	080060fc 	.word	0x080060fc
 8001058:	0800613c 	.word	0x0800613c
 800105c:	08006144 	.word	0x08006144
 8001060:	0800615c 	.word	0x0800615c

08001064 <main>:

	// return (char *)rx;
}
*/
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f000 fcdf 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f863 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 f9a3 	bl	80013bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001076:	f000 f941 	bl	80012fc <MX_USART2_UART_Init>
  MX_UART4_Init();
 800107a:	f000 f8af 	bl	80011dc <MX_UART4_Init>
  MX_UART5_Init();
 800107e:	f000 f8dd 	bl	800123c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001082:	f000 f90b 	bl	800129c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001086:	f000 f969 	bl	800135c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
int i=0;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
/*send_to_gsm("ATE0\r");
send_at("AT+CSQ\r\n", "\r\n+CSQ: 29,99\r\n");
	  HAL_Delay(5000);
	  send_at("AT+CSQ\r\n", "\r\n+CSQ: 29,99\r\n");
	  	  HAL_Delay(5000);*/
int s1=0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
	  	  {
	  //send_at("ATE0\r\n", "OK");
	 // HAL_Delay(5000);
	  //send_at("AT+CSQ\r\n", "CSQ");
	  //HAL_Delay(5000);
	  		  switch(s1)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d8fc      	bhi.n	8001092 <main+0x2e>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <main+0x3c>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b5 	.word	0x080010b5
 80010a4:	080010cd 	.word	0x080010cd
 80010a8:	080010e3 	.word	0x080010e3
 80010ac:	080010f9 	.word	0x080010f9
 80010b0:	08001119 	.word	0x08001119
	  		  {
	  		  case 0:
	  			m =gsm_connect_to_server();
 80010b4:	f7ff fa66 	bl	8000584 <gsm_connect_to_server>
 80010b8:	6078      	str	r0, [r7, #4]
	  			if(m==0)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <main+0x62>
	  			{
	  				s1=1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 80010c4:	e033      	b.n	800112e <main+0xca>
	  				s1=0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
	  			break;
 80010ca:	e030      	b.n	800112e <main+0xca>
	  		  case 1:
	  			if(connect_tcp_server()==0)
 80010cc:	f7ff fdcc 	bl	8000c68 <connect_tcp_server>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <main+0x78>
	  			{
	  				s1=2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 80010da:	e028      	b.n	800112e <main+0xca>
	  				s1=0;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
	  			break;
 80010e0:	e025      	b.n	800112e <main+0xca>
	  		case 2:
	  			if(check_server_connection()==0)
 80010e2:	f7ff fcaf 	bl	8000a44 <check_server_connection>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <main+0x8e>
	  			{
	  				s1=3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=1;
	  			}
	  			break;
 80010f0:	e01d      	b.n	800112e <main+0xca>
	  				s1=1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
	  			break;
 80010f6:	e01a      	b.n	800112e <main+0xca>
	  		  case 3:
	  			if(send_mesg_to_server("0123456789", 50)==0)
 80010f8:	2132      	movs	r1, #50	; 0x32
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <main+0xcc>)
 80010fc:	f7ff ff5e 	bl	8000fbc <send_mesg_to_server>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <main+0xae>
	  			{
	  				printf("mesg send\n");
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <main+0xd0>)
 8001108:	f003 fe98 	bl	8004e3c <puts>
	  				s1=3;
 800110c:	2303      	movs	r3, #3
 800110e:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=2;
	  			}
	  			break;
 8001110:	e00d      	b.n	800112e <main+0xca>
	  				s1=2;
 8001112:	2302      	movs	r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
	  			break;
 8001116:	e00a      	b.n	800112e <main+0xca>
	  		  case 4:
	  			if(gsm_disconnect_to_server()==0)
 8001118:	f7ff fce0 	bl	8000adc <gsm_disconnect_to_server>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <main+0xc4>
	  			{
	  				s1=0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
	  			}
	  			else
	  			{
	  				s1=0;
	  			}
	  			break;
 8001126:	e001      	b.n	800112c <main+0xc8>
	  				s1=0;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	  			break;
 800112c:	bf00      	nop
	  		  switch(s1)
 800112e:	e7b0      	b.n	8001092 <main+0x2e>
 8001130:	0800616c 	.word	0x0800616c
 8001134:	08006178 	.word	0x08006178

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b096      	sub	sp, #88	; 0x58
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2244      	movs	r2, #68	; 0x44
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fdea 	bl	8004d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115e:	f001 f84d 	bl	80021fc <HAL_PWREx_ControlVoltageScaling>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001168:	f000 f958 	bl	800141c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001174:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117e:	2302      	movs	r3, #2
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001186:	230a      	movs	r3, #10
 8001188:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800118a:	2307      	movs	r3, #7
 800118c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f884 	bl	80022a8 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011a6:	f000 f939 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	2104      	movs	r1, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fc4c 	bl	8002a60 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ce:	f000 f925 	bl	800141c <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3758      	adds	r7, #88	; 0x58
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_UART4_Init+0x58>)
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_UART4_Init+0x5c>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_UART4_Init+0x58>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_UART4_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_UART4_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_UART4_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_UART4_Init+0x58>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_UART4_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_UART4_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_UART4_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_UART4_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_UART4_Init+0x58>)
 8001220:	f002 fafe 	bl	8003820 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800122a:	f000 f8f7 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000090 	.word	0x20000090
 8001238:	40004c00 	.word	0x40004c00

0800123c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_UART5_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <MX_UART5_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_UART5_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_UART5_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_UART5_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_UART5_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_UART5_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_UART5_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_UART5_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_UART5_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_UART5_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_UART5_Init+0x58>)
 8001280:	f002 face 	bl	8003820 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800128a:	f000 f8c7 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000114 	.word	0x20000114
 8001298:	40005000 	.word	0x40005000

0800129c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_USART1_UART_Init+0x5c>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART1_UART_Init+0x58>)
 80012e0:	f002 fa9e 	bl	8003820 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ea:	f000 f897 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000198 	.word	0x20000198
 80012f8:	40013800 	.word	0x40013800

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <MX_USART2_UART_Init+0x5c>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART2_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART2_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART2_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART2_UART_Init+0x58>)
 8001340:	f002 fa6e 	bl	8003820 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800134a:	f000 f867 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000021c 	.word	0x2000021c
 8001358:	40004400 	.word	0x40004400

0800135c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <MX_USART3_UART_Init+0x5c>)
 8001364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 80013a0:	f002 fa3e 	bl	8003820 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013aa:	f000 f837 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002a0 	.word	0x200002a0
 80013b8:	40004800 	.word	0x40004800

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <MX_GPIO_Init+0x5c>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_GPIO_Init+0x5c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6613      	str	r3, [r2, #96]	; 0x60
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0b4      	sub	sp, #208	; 0xd0
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800148c:	2288      	movs	r2, #136	; 0x88
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fc45 	bl	8004d20 <memset>
  if(huart->Instance==UART4)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4aa4      	ldr	r2, [pc, #656]	; (800172c <HAL_UART_MspInit+0x2bc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d144      	bne.n	800152a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014a0:	2308      	movs	r3, #8
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fcfb 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b8:	f7ff ffb0 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014bc:	4b9c      	ldr	r3, [pc, #624]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	4a9b      	ldr	r2, [pc, #620]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80014c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c6:	6593      	str	r3, [r2, #88]	; 0x58
 80014c8:	4b99      	ldr	r3, [pc, #612]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
 80014d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b96      	ldr	r3, [pc, #600]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	4a95      	ldr	r2, [pc, #596]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e0:	4b93      	ldr	r3, [pc, #588]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ec:	2303      	movs	r3, #3
 80014ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001504:	2308      	movs	r3, #8
 8001506:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f000 fcba 	bl	8001e8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2034      	movs	r0, #52	; 0x34
 800151e:	f000 fc00 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001522:	2034      	movs	r0, #52	; 0x34
 8001524:	f000 fc19 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001528:	e156      	b.n	80017d8 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==UART5)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a81      	ldr	r2, [pc, #516]	; (8001734 <HAL_UART_MspInit+0x2c4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d165      	bne.n	8001600 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001534:	2310      	movs	r3, #16
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001538:	2300      	movs	r3, #0
 800153a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fcb1 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800154c:	f7ff ff66 	bl	800141c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001550:	4b77      	ldr	r3, [pc, #476]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	4a76      	ldr	r2, [pc, #472]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800155a:	6593      	str	r3, [r2, #88]	; 0x58
 800155c:	4b74      	ldr	r3, [pc, #464]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b71      	ldr	r3, [pc, #452]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	4a70      	ldr	r2, [pc, #448]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001574:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001580:	4b6b      	ldr	r3, [pc, #428]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	4a6a      	ldr	r2, [pc, #424]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015b2:	2308      	movs	r3, #8
 80015b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015bc:	4619      	mov	r1, r3
 80015be:	485e      	ldr	r0, [pc, #376]	; (8001738 <HAL_UART_MspInit+0x2c8>)
 80015c0:	f000 fc64 	bl	8001e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c4:	2304      	movs	r3, #4
 80015c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015dc:	2308      	movs	r3, #8
 80015de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015e6:	4619      	mov	r1, r3
 80015e8:	4854      	ldr	r0, [pc, #336]	; (800173c <HAL_UART_MspInit+0x2cc>)
 80015ea:	f000 fc4f 	bl	8001e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2035      	movs	r0, #53	; 0x35
 80015f4:	f000 fb95 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015f8:	2035      	movs	r0, #53	; 0x35
 80015fa:	f000 fbae 	bl	8001d5a <HAL_NVIC_EnableIRQ>
}
 80015fe:	e0eb      	b.n	80017d8 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4e      	ldr	r2, [pc, #312]	; (8001740 <HAL_UART_MspInit+0x2d0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d145      	bne.n	8001696 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800160a:	2301      	movs	r3, #1
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800160e:	2300      	movs	r3, #0
 8001610:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fc46 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8001622:	f7ff fefb 	bl	800141c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6613      	str	r3, [r2, #96]	; 0x60
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001656:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800165a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001670:	2307      	movs	r3, #7
 8001672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fc04 	bl	8001e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2025      	movs	r0, #37	; 0x25
 800168a:	f000 fb4a 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800168e:	2025      	movs	r0, #37	; 0x25
 8001690:	f000 fb63 	bl	8001d5a <HAL_NVIC_EnableIRQ>
}
 8001694:	e0a0      	b.n	80017d8 <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <HAL_UART_MspInit+0x2d4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d153      	bne.n	8001748 <HAL_UART_MspInit+0x2d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fbfb 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0x24c>
      Error_Handler();
 80016b8:	f7ff feb0 	bl	800141c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c6:	6593      	str	r3, [r2, #88]	; 0x58
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_UART_MspInit+0x2c0>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ec:	230c      	movs	r3, #12
 80016ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001704:	2307      	movs	r3, #7
 8001706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f000 fbba 	bl	8001e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2026      	movs	r0, #38	; 0x26
 800171e:	f000 fb00 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001722:	2026      	movs	r0, #38	; 0x26
 8001724:	f000 fb19 	bl	8001d5a <HAL_NVIC_EnableIRQ>
}
 8001728:	e056      	b.n	80017d8 <HAL_UART_MspInit+0x368>
 800172a:	bf00      	nop
 800172c:	40004c00 	.word	0x40004c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40005000 	.word	0x40005000
 8001738:	48000800 	.word	0x48000800
 800173c:	48000c00 	.word	0x48000c00
 8001740:	40013800 	.word	0x40013800
 8001744:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <HAL_UART_MspInit+0x370>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d142      	bne.n	80017d8 <HAL_UART_MspInit+0x368>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001752:	2304      	movs	r3, #4
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001756:	2300      	movs	r3, #0
 8001758:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fba2 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 800176a:	f7ff fe57 	bl	800141c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_UART_MspInit+0x374>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_UART_MspInit+0x374>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0x374>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0x374>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_UART_MspInit+0x374>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0x374>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800179e:	2330      	movs	r3, #48	; 0x30
 80017a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b6:	2307      	movs	r3, #7
 80017b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017c0:	4619      	mov	r1, r3
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <HAL_UART_MspInit+0x378>)
 80017c4:	f000 fb62 	bl	8001e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2027      	movs	r0, #39	; 0x27
 80017ce:	f000 faa8 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017d2:	2027      	movs	r0, #39	; 0x27
 80017d4:	f000 fac1 	bl	8001d5a <HAL_NVIC_EnableIRQ>
}
 80017d8:	bf00      	nop
 80017da:	37d0      	adds	r7, #208	; 0xd0
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004800 	.word	0x40004800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000800 	.word	0x48000800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 f954 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <USART1_IRQHandler+0x10>)
 8001846:	f002 f979 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000198 	.word	0x20000198

08001854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <USART2_IRQHandler+0x10>)
 800185a:	f002 f96f 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000021c 	.word	0x2000021c

08001868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART3_IRQHandler+0x10>)
 800186e:	f002 f965 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200002a0 	.word	0x200002a0

0800187c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <UART4_IRQHandler+0x10>)
 8001882:	f002 f95b 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000090 	.word	0x20000090

08001890 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <UART5_IRQHandler+0x10>)
 8001896:	f002 f951 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000114 	.word	0x20000114

080018a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
  }

  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:
  }
  return len;
}

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f003 f9a8 	bl	8004ccc <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20018000 	.word	0x20018000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	200003ec 	.word	0x200003ec
 80019b0:	20000408 	.word	0x20000408

080019b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff ffea 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	; (8001a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <LoopForever+0xe>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <LoopForever+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f003 f967 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0a:	f7ff fb2b 	bl	8001064 <main>

08001a0e <LoopForever>:

LoopForever:
    b LoopForever
 8001a0e:	e7fe      	b.n	8001a0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a1c:	08006274 	.word	0x08006274
  ldr r2, =_sbss
 8001a20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a24:	20000404 	.word	0x20000404

08001a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC1_2_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_Init+0x3c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_Init+0x3c>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a42:	2003      	movs	r0, #3
 8001a44:	f000 f962 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 f80f 	bl	8001a6c <HAL_InitTick>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	e001      	b.n	8001a5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a5a:	f7ff fce5 	bl	8001428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40022000 	.word	0x40022000

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_InitTick+0x6c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_InitTick+0x70>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_InitTick+0x6c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f96d 	bl	8001d76 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d809      	bhi.n	8001abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 f937 	bl	8001d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_InitTick+0x74>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e007      	b.n	8001acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e004      	b.n	8001acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e001      	b.n	8001acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008
 8001b08:	200003f0 	.word	0x200003f0

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200003f0 	.word	0x200003f0

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008

08001b6c <__NVIC_SetPriorityGrouping>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d008      	beq.n	8001db8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e022      	b.n	8001dfe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 020e 	bic.w	r2, r2, #14
 8001dc6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f003 021c 	and.w	r2, r3, #28
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d005      	beq.n	8001e2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e029      	b.n	8001e82 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 020e 	bic.w	r2, r2, #14
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f003 021c 	and.w	r2, r3, #28
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
    }
  }
  return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e17f      	b.n	800219c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8171 	beq.w	8002196 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <HAL_GPIO_Init+0x40>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 0201 	and.w	r2, r3, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d118      	bne.n	8001f6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ac 	beq.w	8002196 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_GPIO_Init+0x330>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002042:	4a5e      	ldr	r2, [pc, #376]	; (80021bc <HAL_GPIO_Init+0x330>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6613      	str	r3, [r2, #96]	; 0x60
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_GPIO_Init+0x330>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002056:	4a5a      	ldr	r2, [pc, #360]	; (80021c0 <HAL_GPIO_Init+0x334>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x242>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_GPIO_Init+0x338>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x23e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	; (80021c8 <HAL_GPIO_Init+0x33c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x23a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	; (80021cc <HAL_GPIO_Init+0x340>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x236>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <HAL_GPIO_Init+0x344>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x232>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <HAL_GPIO_Init+0x348>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x22e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_GPIO_Init+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x22a>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ce:	2300      	movs	r3, #0
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e0:	4937      	ldr	r1, [pc, #220]	; (80021c0 <HAL_GPIO_Init+0x334>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_GPIO_Init+0x350>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002112:	4a32      	ldr	r2, [pc, #200]	; (80021dc <HAL_GPIO_Init+0x350>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_GPIO_Init+0x350>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_GPIO_Init+0x350>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_GPIO_Init+0x350>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002166:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_GPIO_Init+0x350>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_GPIO_Init+0x350>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_GPIO_Init+0x350>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae78 	bne.w	8001e9c <HAL_GPIO_Init+0x10>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	48000400 	.word	0x48000400
 80021c8:	48000800 	.word	0x48000800
 80021cc:	48000c00 	.word	0x48000c00
 80021d0:	48001000 	.word	0x48001000
 80021d4:	48001400 	.word	0x48001400
 80021d8:	48001800 	.word	0x48001800
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220a:	d130      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002218:	d038      	beq.n	800228c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2232      	movs	r2, #50	; 0x32
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002240:	e002      	b.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002254:	d102      	bne.n	800225c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f2      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d110      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e00f      	b.n	800228e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d007      	beq.n	800228c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40007000 	.word	0x40007000
 80022a0:	20000000 	.word	0x20000000
 80022a4:	431bde83 	.word	0x431bde83

080022a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e3ca      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4b97      	ldr	r3, [pc, #604]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4b94      	ldr	r3, [pc, #592]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80e4 	beq.w	80024a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4a>
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	f040 808b 	bne.w	8002400 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 8087 	bne.w	8002400 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022f2:	4b89      	ldr	r3, [pc, #548]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x62>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e3a2      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	4b82      	ldr	r3, [pc, #520]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_RCC_OscConfig+0x7c>
 800231a:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002322:	e005      	b.n	8002330 <HAL_RCC_OscConfig+0x88>
 8002324:	4b7c      	ldr	r3, [pc, #496]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002330:	4293      	cmp	r3, r2
 8002332:	d223      	bcs.n	800237c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fd55 	bl	8002de8 <RCC_SetFlashLatencyFromMSIRange>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e383      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002348:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b70      	ldr	r3, [pc, #448]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	496d      	ldr	r1, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002366:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	4968      	ldr	r1, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
 800237a:	e025      	b.n	80023c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a65      	ldr	r2, [pc, #404]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4960      	ldr	r1, [pc, #384]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	495b      	ldr	r1, [pc, #364]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fd15 	bl	8002de8 <RCC_SetFlashLatencyFromMSIRange>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e343      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023c8:	f000 fc4a 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b52      	ldr	r3, [pc, #328]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	4950      	ldr	r1, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	4a4e      	ldr	r2, [pc, #312]	; (8002520 <HAL_RCC_OscConfig+0x278>)
 80023e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023e8:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fb3d 	bl	8001a6c <HAL_InitTick>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d052      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	e327      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d032      	beq.n	800246e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a42      	ldr	r2, [pc, #264]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002414:	f7ff fb7a 	bl	8001b0c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800241c:	f7ff fb76 	bl	8001b0c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e310      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a36      	ldr	r2, [pc, #216]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4931      	ldr	r1, [pc, #196]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	492c      	ldr	r1, [pc, #176]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	e01a      	b.n	80024a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800247a:	f7ff fb47 	bl	8001b0c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002482:	f7ff fb43 	bl	8001b0c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e2dd      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x1da>
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d074      	beq.n	800259a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x21a>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d10e      	bne.n	80024da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d064      	beq.n	8002598 <HAL_RCC_OscConfig+0x2f0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d160      	bne.n	8002598 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e2ba      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x24a>
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e026      	b.n	8002540 <HAL_RCC_OscConfig+0x298>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fa:	d115      	bne.n	8002528 <HAL_RCC_OscConfig+0x280>
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a05      	ldr	r2, [pc, #20]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a02      	ldr	r2, [pc, #8]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e014      	b.n	8002540 <HAL_RCC_OscConfig+0x298>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	08006184 	.word	0x08006184
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004
 8002528:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a9f      	ldr	r2, [pc, #636]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b9d      	ldr	r3, [pc, #628]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a9c      	ldr	r2, [pc, #624]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff fae0 	bl	8001b0c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff fadc 	bl	8001b0c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e276      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002562:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x2a8>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff facc 	bl	8001b0c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff fac8 	bl	8001b0c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e262      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x2d0>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d060      	beq.n	8002668 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x310>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d119      	bne.n	80025e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d116      	bne.n	80025e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_OscConfig+0x328>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e23f      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	4973      	ldr	r1, [pc, #460]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e4:	e040      	b.n	8002668 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d023      	beq.n	8002636 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7ff fa87 	bl	8001b0c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002602:	f7ff fa83 	bl	8001b0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e21d      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002614:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	495f      	ldr	r1, [pc, #380]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
 8002634:	e018      	b.n	8002668 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5c      	ldr	r2, [pc, #368]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800263c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff fa63 	bl	8001b0c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fa5f 	bl	8001b0c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1f9      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d03c      	beq.n	80026ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267c:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002682:	4a4a      	ldr	r2, [pc, #296]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7ff fa3e 	bl	8001b0c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff fa3a 	bl	8001b0c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1d4      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <HAL_RCC_OscConfig+0x3ec>
 80026b4:	e01b      	b.n	80026ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80026b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026bc:	4a3b      	ldr	r2, [pc, #236]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7ff fa21 	bl	8001b0c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ce:	f7ff fa1d 	bl	8001b0c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1b7      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e0:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ef      	bne.n	80026ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80a6 	beq.w	8002848 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fc:	2300      	movs	r3, #0
 80026fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002716:	6593      	str	r3, [r2, #88]	; 0x58
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002724:	2301      	movs	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x508>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d118      	bne.n	8002766 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_OscConfig+0x508>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_RCC_OscConfig+0x508>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002740:	f7ff f9e4 	bl	8001b0c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002748:	f7ff f9e0 	bl	8001b0c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e17a      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_OscConfig+0x508>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x4d8>
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277e:	e029      	b.n	80027d4 <HAL_RCC_OscConfig+0x52c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b05      	cmp	r3, #5
 8002786:	d115      	bne.n	80027b4 <HAL_RCC_OscConfig+0x50c>
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a03      	ldr	r2, [pc, #12]	; (80027ac <HAL_RCC_OscConfig+0x504>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a8:	e014      	b.n	80027d4 <HAL_RCC_OscConfig+0x52c>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40007000 	.word	0x40007000
 80027b4:	4b9c      	ldr	r3, [pc, #624]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a9b      	ldr	r2, [pc, #620]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c4:	4b98      	ldr	r3, [pc, #608]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	4a97      	ldr	r2, [pc, #604]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d016      	beq.n	800280a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7ff f996 	bl	8001b0c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7ff f992 	bl	8001b0c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e12a      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	4b8b      	ldr	r3, [pc, #556]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ed      	beq.n	80027e4 <HAL_RCC_OscConfig+0x53c>
 8002808:	e015      	b.n	8002836 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7ff f97f 	bl	8001b0c <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7ff f97b 	bl	8001b0c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e113      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002828:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ed      	bne.n	8002812 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	4a79      	ldr	r2, [pc, #484]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80fe 	beq.w	8002a4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	2b02      	cmp	r3, #2
 8002858:	f040 80d0 	bne.w	80029fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800285c:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0203 	and.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	429a      	cmp	r2, r3
 800286e:	d130      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	3b01      	subs	r3, #1
 800287c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d127      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d11f      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800289c:	2a07      	cmp	r2, #7
 800289e:	bf14      	ite	ne
 80028a0:	2201      	movne	r2, #1
 80028a2:	2200      	moveq	r2, #0
 80028a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d113      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	3b01      	subs	r3, #1
 80028b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d06e      	beq.n	80029b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d069      	beq.n	80029ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0ad      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028f4:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a4b      	ldr	r2, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002900:	f7ff f904 	bl	8001b0c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff f900 	bl	8001b0c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e09a      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291a:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002926:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <HAL_RCC_OscConfig+0x784>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002936:	3a01      	subs	r2, #1
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002940:	0212      	lsls	r2, r2, #8
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002948:	0852      	lsrs	r2, r2, #1
 800294a:	3a01      	subs	r2, #1
 800294c:	0552      	lsls	r2, r2, #21
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002954:	0852      	lsrs	r2, r2, #1
 8002956:	3a01      	subs	r2, #1
 8002958:	0652      	lsls	r2, r2, #25
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002960:	0912      	lsrs	r2, r2, #4
 8002962:	0452      	lsls	r2, r2, #17
 8002964:	430a      	orrs	r2, r1
 8002966:	4930      	ldr	r1, [pc, #192]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 8002968:	4313      	orrs	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 800297e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002984:	f7ff f8c2 	bl	8001b0c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7ff f8be 	bl	8001b0c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e058      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029aa:	e050      	b.n	8002a4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04f      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d148      	bne.n	8002a4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029d4:	f7ff f89a 	bl	8001b0c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff f896 	bl	8001b0c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e030      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x734>
 80029fa:	e028      	b.n	8002a4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d023      	beq.n	8002a4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <HAL_RCC_OscConfig+0x780>)
 8002a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f87d 	bl	8001b0c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a14:	e00c      	b.n	8002a30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff f879 	bl	8001b0c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d905      	bls.n	8002a30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e013      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_OscConfig+0x7b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ec      	bne.n	8002a16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x7b0>)
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	4905      	ldr	r1, [pc, #20]	; (8002a58 <HAL_RCC_OscConfig+0x7b0>)
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_OscConfig+0x7b4>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
 8002a48:	e001      	b.n	8002a4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	feeefffc 	.word	0xfeeefffc

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0e7      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b72      	ldr	r3, [pc, #456]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4970      	ldr	r1, [pc, #448]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b6e      	ldr	r3, [pc, #440]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0cf      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d908      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4960      	ldr	r1, [pc, #384]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04c      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d121      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0a6      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d115      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e09a      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e08e      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e086      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4943      	ldr	r1, [pc, #268]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe ffe0 	bl	8001b0c <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe ffdc 	bl	8001b0c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e06e      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d208      	bcs.n	8002ba6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	492b      	ldr	r1, [pc, #172]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba6:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d210      	bcs.n	8002bd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 0207 	bic.w	r2, r3, #7
 8002bbc:	4923      	ldr	r1, [pc, #140]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e036      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	4918      	ldr	r1, [pc, #96]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4910      	ldr	r1, [pc, #64]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c14:	f000 f824 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	490b      	ldr	r1, [pc, #44]	; (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1fc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe ff17 	bl	8001a6c <HAL_InitTick>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c42:	7afb      	ldrb	r3, [r7, #11]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08006184 	.word	0x08006184
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c78:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d121      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d11e      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e005      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce4:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ce6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d134      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d003      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0xac>
 8002d04:	e005      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d08:	617b      	str	r3, [r7, #20]
      break;
 8002d0a:	e005      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d0e:	617b      	str	r3, [r7, #20]
      break;
 8002d10:	e002      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	617b      	str	r3, [r7, #20]
      break;
 8002d16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	3301      	adds	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	fb03 f202 	mul.w	r2, r3, r2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	0e5b      	lsrs	r3, r3, #25
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d58:	69bb      	ldr	r3, [r7, #24]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	0800619c 	.word	0x0800619c
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4904      	ldr	r1, [pc, #16]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08006194 	.word	0x08006194

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dc0:	f7ff ffda 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0adb      	lsrs	r3, r3, #11
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4904      	ldr	r1, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08006194 	.word	0x08006194

08002de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e00:	f7ff f9ee 	bl	80021e0 <HAL_PWREx_GetVoltageRange>
 8002e04:	6178      	str	r0, [r7, #20]
 8002e06:	e014      	b.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e20:	f7ff f9de 	bl	80021e0 <HAL_PWREx_GetVoltageRange>
 8002e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e38:	d10b      	bne.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d919      	bls.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2ba0      	cmp	r3, #160	; 0xa0
 8002e44:	d902      	bls.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e013      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e010      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	d902      	bls.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e58:	2303      	movs	r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e00a      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d102      	bne.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e64:	2302      	movs	r3, #2
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e004      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b70      	cmp	r3, #112	; 0x70
 8002e6e:	d101      	bne.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e70:	2301      	movs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 0207 	bic.w	r2, r3, #7
 8002e7c:	4909      	ldr	r1, [pc, #36]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40022000 	.word	0x40022000

08002ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d041      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ecc:	d02a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ece:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ed2:	d824      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ede:	d81e      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eea:	e018      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a85      	ldr	r2, [pc, #532]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef8:	e015      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fabb 	bl	800347c <RCCEx_PLLSAI1_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0a:	e00c      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3320      	adds	r3, #32
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fba6 	bl	8003664 <RCCEx_PLLSAI2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f1c:	e003      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	74fb      	strb	r3, [r7, #19]
      break;
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f2c:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3a:	4973      	ldr	r1, [pc, #460]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d041      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f5c:	d02a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f62:	d824      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6e:	d81e      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d010      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f7a:	e018      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f7c:	4b62      	ldr	r3, [pc, #392]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a61      	ldr	r2, [pc, #388]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f88:	e015      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa73 	bl	800347c <RCCEx_PLLSAI1_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9a:	e00c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3320      	adds	r3, #32
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fb5e 	bl	8003664 <RCCEx_PLLSAI2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fca:	494f      	ldr	r1, [pc, #316]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fd2:	e001      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a0 	beq.w	8003126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3a      	ldr	r2, [pc, #232]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003028:	f7fe fd70 	bl	8001b0c <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe fd6c 	bl	8001b0c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d902      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	74fb      	strb	r3, [r7, #19]
        break;
 8003042:	e005      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003044:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ef      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d15c      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003060:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01f      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	d019      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fd2b 	bl	8001b0c <HAL_GetTick>
 80030b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b8:	e00b      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe fd27 	bl	8001b0c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d902      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	74fb      	strb	r3, [r7, #19]
            break;
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ec      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030fe:	e009      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003114:	7c7b      	ldrb	r3, [r7, #17]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d105      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311a:	4b9e      	ldr	r3, [pc, #632]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	4a9d      	ldr	r2, [pc, #628]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003132:	4b98      	ldr	r3, [pc, #608]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f023 0203 	bic.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	4994      	ldr	r1, [pc, #592]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003154:	4b8f      	ldr	r3, [pc, #572]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f023 020c 	bic.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	498c      	ldr	r1, [pc, #560]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003176:	4b87      	ldr	r3, [pc, #540]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4983      	ldr	r1, [pc, #524]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003198:	4b7e      	ldr	r3, [pc, #504]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	497b      	ldr	r1, [pc, #492]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ba:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	4972      	ldr	r1, [pc, #456]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031dc:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	496a      	ldr	r1, [pc, #424]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	4961      	ldr	r1, [pc, #388]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003220:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	4959      	ldr	r1, [pc, #356]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003242:	4b54      	ldr	r3, [pc, #336]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	4950      	ldr	r1, [pc, #320]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	4948      	ldr	r1, [pc, #288]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	493f      	ldr	r1, [pc, #252]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d028      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a8:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b6:	4937      	ldr	r1, [pc, #220]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d2:	60d3      	str	r3, [r2, #12]
 80032d4:	e011      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032de:	d10c      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f8c8 	bl	800347c <RCCEx_PLLSAI1_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d028      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	491f      	ldr	r1, [pc, #124]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003324:	d106      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003330:	60d3      	str	r3, [r2, #12]
 8003332:	e011      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f899 	bl	800347c <RCCEx_PLLSAI1_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d02b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003382:	d109      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a02      	ldr	r2, [pc, #8]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338e:	60d3      	str	r3, [r2, #12]
 8003390:	e014      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f867 	bl	800347c <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02f      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d6:	4928      	ldr	r1, [pc, #160]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e6:	d10d      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	2102      	movs	r1, #2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f844 	bl	800347c <RCCEx_PLLSAI1_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	74bb      	strb	r3, [r7, #18]
 8003402:	e011      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3320      	adds	r3, #32
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f925 	bl	8003664 <RCCEx_PLLSAI2_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003442:	490d      	ldr	r1, [pc, #52]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003466:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800346e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000

0800347c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800348a:	4b75      	ldr	r3, [pc, #468]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003496:	4b72      	ldr	r3, [pc, #456]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0203 	and.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
       ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
       ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d047      	beq.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e044      	b.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d018      	beq.n	8003502 <RCCEx_PLLSAI1_Config+0x86>
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d825      	bhi.n	8003520 <RCCEx_PLLSAI1_Config+0xa4>
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d002      	beq.n	80034de <RCCEx_PLLSAI1_Config+0x62>
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d009      	beq.n	80034f0 <RCCEx_PLLSAI1_Config+0x74>
 80034dc:	e020      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034de:	4b60      	ldr	r3, [pc, #384]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ee:	e01a      	b.n	8003526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034f0:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e013      	b.n	800352a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003502:	4b57      	ldr	r3, [pc, #348]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800350e:	4b54      	ldr	r3, [pc, #336]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800351e:	e006      	b.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e004      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10d      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	430b      	orrs	r3, r1
 800354c:	4944      	ldr	r1, [pc, #272]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d17d      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a40      	ldr	r2, [pc, #256]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fe fad2 	bl	8001b0c <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356c:	f7fe face 	bl	8001b0c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
        break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ef      	bne.n	800356c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d160      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d111      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6892      	ldr	r2, [r2, #8]
 80035a8:	0211      	lsls	r1, r2, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	0912      	lsrs	r2, r2, #4
 80035b0:	0452      	lsls	r2, r2, #17
 80035b2:	430a      	orrs	r2, r1
 80035b4:	492a      	ldr	r1, [pc, #168]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]
 80035ba:	e027      	b.n	800360c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d112      	bne.n	80035e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c2:	4b27      	ldr	r3, [pc, #156]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6892      	ldr	r2, [r2, #8]
 80035d2:	0211      	lsls	r1, r2, #8
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6912      	ldr	r2, [r2, #16]
 80035d8:	0852      	lsrs	r2, r2, #1
 80035da:	3a01      	subs	r2, #1
 80035dc:	0552      	lsls	r2, r2, #21
 80035de:	430a      	orrs	r2, r1
 80035e0:	491f      	ldr	r1, [pc, #124]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
 80035e6:	e011      	b.n	800360c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	0211      	lsls	r1, r2, #8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6952      	ldr	r2, [r2, #20]
 80035fe:	0852      	lsrs	r2, r2, #1
 8003600:	3a01      	subs	r2, #1
 8003602:	0652      	lsls	r2, r2, #25
 8003604:	430a      	orrs	r2, r1
 8003606:	4916      	ldr	r1, [pc, #88]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fa78 	bl	8001b0c <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361e:	e009      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003620:	f7fe fa74 	bl	8001b0c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d902      	bls.n	8003634 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	73fb      	strb	r3, [r7, #15]
          break;
 8003632:	e005      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	4904      	ldr	r1, [pc, #16]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000

08003664 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003672:	4b6a      	ldr	r3, [pc, #424]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d018      	beq.n	80036b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800367e:	4b67      	ldr	r3, [pc, #412]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d10d      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
       ||
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
       ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d047      	beq.n	800373a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e044      	b.n	800373a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d018      	beq.n	80036ea <RCCEx_PLLSAI2_Config+0x86>
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d825      	bhi.n	8003708 <RCCEx_PLLSAI2_Config+0xa4>
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <RCCEx_PLLSAI2_Config+0x62>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d009      	beq.n	80036d8 <RCCEx_PLLSAI2_Config+0x74>
 80036c4:	e020      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036c6:	4b55      	ldr	r3, [pc, #340]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11d      	bne.n	800370e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d6:	e01a      	b.n	800370e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e013      	b.n	8003712 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ea:	4b4c      	ldr	r3, [pc, #304]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003706:	e006      	b.n	8003716 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e004      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003716:	bf00      	nop
    }

    if(status == HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	430b      	orrs	r3, r1
 8003734:	4939      	ldr	r1, [pc, #228]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d167      	bne.n	8003810 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003740:	4b36      	ldr	r3, [pc, #216]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a35      	ldr	r2, [pc, #212]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fe f9de 	bl	8001b0c <HAL_GetTick>
 8003750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003752:	e009      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003754:	f7fe f9da 	bl	8001b0c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	73fb      	strb	r3, [r7, #15]
        break;
 8003766:	e005      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ef      	bne.n	8003754 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d14a      	bne.n	8003810 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	0211      	lsls	r1, r2, #8
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	0912      	lsrs	r2, r2, #4
 8003798:	0452      	lsls	r2, r2, #17
 800379a:	430a      	orrs	r2, r1
 800379c:	491f      	ldr	r1, [pc, #124]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	614b      	str	r3, [r1, #20]
 80037a2:	e011      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6892      	ldr	r2, [r2, #8]
 80037b4:	0211      	lsls	r1, r2, #8
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6912      	ldr	r2, [r2, #16]
 80037ba:	0852      	lsrs	r2, r2, #1
 80037bc:	3a01      	subs	r2, #1
 80037be:	0652      	lsls	r2, r2, #25
 80037c0:	430a      	orrs	r2, r1
 80037c2:	4916      	ldr	r1, [pc, #88]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fe f99a 	bl	8001b0c <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037da:	e009      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037dc:	f7fe f996 	bl	8001b0c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	73fb      	strb	r3, [r7, #15]
          break;
 80037ee:	e005      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ef      	beq.n	80037dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e040      	b.n	80038b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fe14 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fc64 	bl	800412c <UART_SetConfig>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e022      	b.n	80038b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 ff10 	bl	800469c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800388a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800389a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 ff97 	bl	80047e0 <UART_CheckIdleState>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	f040 80bf 	bne.w	8003a54 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_UART_Receive+0x26>
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0b7      	b.n	8003a56 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Receive+0x38>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0b0      	b.n	8003a56 <HAL_UART_Receive+0x19a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	; 0x22
 8003908:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003910:	f7fe f8fc 	bl	8001b0c <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392e:	d10e      	bne.n	800394e <HAL_UART_Receive+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_UART_Receive+0x88>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800393e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003942:	e02d      	b.n	80039a0 <HAL_UART_Receive+0xe4>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800394c:	e028      	b.n	80039a0 <HAL_UART_Receive+0xe4>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <HAL_UART_Receive+0xb6>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_UART_Receive+0xac>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22ff      	movs	r2, #255	; 0xff
 8003962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003966:	e01b      	b.n	80039a0 <HAL_UART_Receive+0xe4>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	227f      	movs	r2, #127	; 0x7f
 800396c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003970:	e016      	b.n	80039a0 <HAL_UART_Receive+0xe4>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397a:	d10d      	bne.n	8003998 <HAL_UART_Receive+0xdc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <HAL_UART_Receive+0xd2>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	227f      	movs	r2, #127	; 0x7f
 8003988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398c:	e008      	b.n	80039a0 <HAL_UART_Receive+0xe4>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	223f      	movs	r2, #63	; 0x3f
 8003992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003996:	e003      	b.n	80039a0 <HAL_UART_Receive+0xe4>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d108      	bne.n	80039c4 <HAL_UART_Receive+0x108>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e003      	b.n	80039cc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039d4:	e033      	b.n	8003a3e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2120      	movs	r1, #32
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 ff46 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e032      	b.n	8003a56 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	8a7b      	ldrh	r3, [r7, #18]
 8003a00:	4013      	ands	r3, r2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	e00d      	b.n	8003a2c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	8a7b      	ldrh	r3, [r7, #18]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1c5      	bne.n	80039d6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b08b      	sub	sp, #44	; 0x2c
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d156      	bne.n	8003b24 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Transmit_IT+0x22>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e04f      	b.n	8003b26 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Transmit_IT+0x34>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e048      	b.n	8003b26 <HAL_UART_Transmit_IT+0xc6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d107      	bne.n	8003ae0 <HAL_UART_Transmit_IT+0x80>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_UART_Transmit_IT+0xd4>)
 8003adc:	669a      	str	r2, [r3, #104]	; 0x68
 8003ade:	e002      	b.n	8003ae6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_UART_Transmit_IT+0xd8>)
 8003ae4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	613b      	str	r3, [r7, #16]
   return(result);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	69f9      	ldr	r1, [r7, #28]
 8003b12:	6a3a      	ldr	r2, [r7, #32]
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e6      	bne.n	8003aee <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	372c      	adds	r7, #44	; 0x2c
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	08004ba5 	.word	0x08004ba5
 8003b38:	08004aed 	.word	0x08004aed

08003b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b0ba      	sub	sp, #232	; 0xe8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d115      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00f      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 82a6 	beq.w	80040e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
      }
      return;
 8003ba2:	e2a0      	b.n	80040e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8117 	beq.w	8003ddc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bbe:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_UART_IRQHandler+0x298>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 810a 	beq.w	8003ddc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d011      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xbc>
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2201      	movs	r2, #1
 8003be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d011      	beq.n	8003c28 <HAL_UART_IRQHandler+0xec>
 8003c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2202      	movs	r2, #2
 8003c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d011      	beq.n	8003c58 <HAL_UART_IRQHandler+0x11c>
 8003c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2204      	movs	r2, #4
 8003c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2208      	movs	r2, #8
 8003c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	f043 0208 	orr.w	r2, r3, #8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x18a>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 820c 	beq.w	80040ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04f      	beq.n	8003dbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fe6b 	bl	80049fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d141      	bne.n	8003db6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <HAL_UART_IRQHandler+0x29c>)
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe f839 	bl	8001e0a <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00f      	b.n	8003dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9a6 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00b      	b.n	8003dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9a2 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e007      	b.n	8003dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f99e 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003dcc:	e18d      	b.n	80040ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dce:	bf00      	nop
    return;
 8003dd0:	e18b      	b.n	80040ea <HAL_UART_IRQHandler+0x5ae>
 8003dd2:	bf00      	nop
 8003dd4:	04000120 	.word	0x04000120
 8003dd8:	08004ac1 	.word	0x08004ac1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8146 	bne.w	8004072 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 813f 	beq.w	8004072 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8138 	beq.w	8004072 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2210      	movs	r2, #16
 8003e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	f040 80b4 	bne.w	8003f82 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 815f 	beq.w	80040ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	f080 8157 	bcs.w	80040ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8085 	bne.w	8003f66 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1da      	bne.n	8003e5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e1      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e4      	bne.n	8003f26 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd ff14 	bl	8001d8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8ca 	bl	8004114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f80:	e0b5      	b.n	80040ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a7 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a2 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e4      	bne.n	8003fae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004008:	633a      	str	r2, [r7, #48]	; 0x30
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e3      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	60fb      	str	r3, [r7, #12]
   return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	617b      	str	r3, [r7, #20]
   return(result);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e4      	bne.n	800402e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f852 	bl	8004114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004070:	e03f      	b.n	80040f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00e      	beq.n	800409c <HAL_UART_IRQHandler+0x560>
 800407e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fe0f 	bl	8004cb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800409a:	e02d      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01c      	beq.n	80040f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    }
    return;
 80040c4:	e017      	b.n	80040f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fdc0 	bl	8004c64 <UART_EndTransmit_IT>
    return;
 80040e4:	e008      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80040e6:	bf00      	nop
 80040e8:	e006      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80040f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80040f8:	37e8      	adds	r7, #232	; 0xe8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop

08004100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800412c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004130:	b08a      	sub	sp, #40	; 0x28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	431a      	orrs	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	431a      	orrs	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	4313      	orrs	r3, r2
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4ba4      	ldr	r3, [pc, #656]	; (80043ec <UART_SetConfig+0x2c0>)
 800415c:	4013      	ands	r3, r2
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004164:	430b      	orrs	r3, r1
 8004166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a99      	ldr	r2, [pc, #612]	; (80043f0 <UART_SetConfig+0x2c4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	4313      	orrs	r3, r2
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a90      	ldr	r2, [pc, #576]	; (80043f4 <UART_SetConfig+0x2c8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d126      	bne.n	8004204 <UART_SetConfig+0xd8>
 80041b6:	4b90      	ldr	r3, [pc, #576]	; (80043f8 <UART_SetConfig+0x2cc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d81b      	bhi.n	80041fc <UART_SetConfig+0xd0>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0xa0>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e116      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041e4:	2302      	movs	r3, #2
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e112      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041ec:	2304      	movs	r3, #4
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e10e      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041f4:	2308      	movs	r3, #8
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e10a      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e106      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7c      	ldr	r2, [pc, #496]	; (80043fc <UART_SetConfig+0x2d0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d138      	bne.n	8004280 <UART_SetConfig+0x154>
 800420e:	4b7a      	ldr	r3, [pc, #488]	; (80043f8 <UART_SetConfig+0x2cc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d82d      	bhi.n	8004278 <UART_SetConfig+0x14c>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0xf8>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004259 	.word	0x08004259
 8004228:	08004279 	.word	0x08004279
 800422c:	08004279 	.word	0x08004279
 8004230:	08004279 	.word	0x08004279
 8004234:	08004269 	.word	0x08004269
 8004238:	08004279 	.word	0x08004279
 800423c:	08004279 	.word	0x08004279
 8004240:	08004279 	.word	0x08004279
 8004244:	08004261 	.word	0x08004261
 8004248:	08004279 	.word	0x08004279
 800424c:	08004279 	.word	0x08004279
 8004250:	08004279 	.word	0x08004279
 8004254:	08004271 	.word	0x08004271
 8004258:	2300      	movs	r3, #0
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e0d8      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004260:	2302      	movs	r3, #2
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e0d4      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004268:	2304      	movs	r3, #4
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e0d0      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004270:	2308      	movs	r3, #8
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e0cc      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004278:	2310      	movs	r3, #16
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e0c8      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5e      	ldr	r2, [pc, #376]	; (8004400 <UART_SetConfig+0x2d4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d125      	bne.n	80042d6 <UART_SetConfig+0x1aa>
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <UART_SetConfig+0x2cc>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004294:	2b30      	cmp	r3, #48	; 0x30
 8004296:	d016      	beq.n	80042c6 <UART_SetConfig+0x19a>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d818      	bhi.n	80042ce <UART_SetConfig+0x1a2>
 800429c:	2b20      	cmp	r3, #32
 800429e:	d00a      	beq.n	80042b6 <UART_SetConfig+0x18a>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d814      	bhi.n	80042ce <UART_SetConfig+0x1a2>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <UART_SetConfig+0x182>
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d008      	beq.n	80042be <UART_SetConfig+0x192>
 80042ac:	e00f      	b.n	80042ce <UART_SetConfig+0x1a2>
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b4:	e0ad      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042b6:	2302      	movs	r3, #2
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042bc:	e0a9      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042be:	2304      	movs	r3, #4
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c4:	e0a5      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042c6:	2308      	movs	r3, #8
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042cc:	e0a1      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042ce:	2310      	movs	r3, #16
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d4:	e09d      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <UART_SetConfig+0x2d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d125      	bne.n	800432c <UART_SetConfig+0x200>
 80042e0:	4b45      	ldr	r3, [pc, #276]	; (80043f8 <UART_SetConfig+0x2cc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042ea:	2bc0      	cmp	r3, #192	; 0xc0
 80042ec:	d016      	beq.n	800431c <UART_SetConfig+0x1f0>
 80042ee:	2bc0      	cmp	r3, #192	; 0xc0
 80042f0:	d818      	bhi.n	8004324 <UART_SetConfig+0x1f8>
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d00a      	beq.n	800430c <UART_SetConfig+0x1e0>
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d814      	bhi.n	8004324 <UART_SetConfig+0x1f8>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <UART_SetConfig+0x1d8>
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d008      	beq.n	8004314 <UART_SetConfig+0x1e8>
 8004302:	e00f      	b.n	8004324 <UART_SetConfig+0x1f8>
 8004304:	2300      	movs	r3, #0
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e082      	b.n	8004412 <UART_SetConfig+0x2e6>
 800430c:	2302      	movs	r3, #2
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e07e      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004314:	2304      	movs	r3, #4
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e07a      	b.n	8004412 <UART_SetConfig+0x2e6>
 800431c:	2308      	movs	r3, #8
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e076      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004324:	2310      	movs	r3, #16
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e072      	b.n	8004412 <UART_SetConfig+0x2e6>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a35      	ldr	r2, [pc, #212]	; (8004408 <UART_SetConfig+0x2dc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d12a      	bne.n	800438c <UART_SetConfig+0x260>
 8004336:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <UART_SetConfig+0x2cc>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004344:	d01a      	beq.n	800437c <UART_SetConfig+0x250>
 8004346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434a:	d81b      	bhi.n	8004384 <UART_SetConfig+0x258>
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d00c      	beq.n	800436c <UART_SetConfig+0x240>
 8004352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004356:	d815      	bhi.n	8004384 <UART_SetConfig+0x258>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <UART_SetConfig+0x238>
 800435c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004360:	d008      	beq.n	8004374 <UART_SetConfig+0x248>
 8004362:	e00f      	b.n	8004384 <UART_SetConfig+0x258>
 8004364:	2300      	movs	r3, #0
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e052      	b.n	8004412 <UART_SetConfig+0x2e6>
 800436c:	2302      	movs	r3, #2
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e04e      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004374:	2304      	movs	r3, #4
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e04a      	b.n	8004412 <UART_SetConfig+0x2e6>
 800437c:	2308      	movs	r3, #8
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e046      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004384:	2310      	movs	r3, #16
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e042      	b.n	8004412 <UART_SetConfig+0x2e6>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <UART_SetConfig+0x2c4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d13a      	bne.n	800440c <UART_SetConfig+0x2e0>
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <UART_SetConfig+0x2cc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043a4:	d01a      	beq.n	80043dc <UART_SetConfig+0x2b0>
 80043a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043aa:	d81b      	bhi.n	80043e4 <UART_SetConfig+0x2b8>
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	d00c      	beq.n	80043cc <UART_SetConfig+0x2a0>
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d815      	bhi.n	80043e4 <UART_SetConfig+0x2b8>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <UART_SetConfig+0x298>
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d008      	beq.n	80043d4 <UART_SetConfig+0x2a8>
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x2b8>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e022      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043cc:	2302      	movs	r3, #2
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e01e      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043d4:	2304      	movs	r3, #4
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e01a      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043dc:	2308      	movs	r3, #8
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e016      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043e4:	2310      	movs	r3, #16
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e012      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043ec:	efff69f3 	.word	0xefff69f3
 80043f0:	40008000 	.word	0x40008000
 80043f4:	40013800 	.word	0x40013800
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40004400 	.word	0x40004400
 8004400:	40004800 	.word	0x40004800
 8004404:	40004c00 	.word	0x40004c00
 8004408:	40005000 	.word	0x40005000
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a9f      	ldr	r2, [pc, #636]	; (8004694 <UART_SetConfig+0x568>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d17a      	bne.n	8004512 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800441c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004420:	2b08      	cmp	r3, #8
 8004422:	d824      	bhi.n	800446e <UART_SetConfig+0x342>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x300>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	0800446f 	.word	0x0800446f
 8004434:	08004459 	.word	0x08004459
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800445f 	.word	0x0800445f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	0800446f 	.word	0x0800446f
 8004448:	0800446f 	.word	0x0800446f
 800444c:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fc9e 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b8f      	ldr	r3, [pc, #572]	; (8004698 <UART_SetConfig+0x56c>)
 800445a:	61fb      	str	r3, [r7, #28]
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fbff 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8004462:	61f8      	str	r0, [r7, #28]
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80fb 	beq.w	8004678 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	429a      	cmp	r2, r3
 8004490:	d305      	bcc.n	800449e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	429a      	cmp	r2, r3
 800449c:	d903      	bls.n	80044a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a4:	e0e8      	b.n	8004678 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2200      	movs	r2, #0
 80044aa:	461c      	mov	r4, r3
 80044ac:	4615      	mov	r5, r2
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	022b      	lsls	r3, r5, #8
 80044b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044bc:	0222      	lsls	r2, r4, #8
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6849      	ldr	r1, [r1, #4]
 80044c2:	0849      	lsrs	r1, r1, #1
 80044c4:	2000      	movs	r0, #0
 80044c6:	4688      	mov	r8, r1
 80044c8:	4681      	mov	r9, r0
 80044ca:	eb12 0a08 	adds.w	sl, r2, r8
 80044ce:	eb43 0b09 	adc.w	fp, r3, r9
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e0:	4650      	mov	r0, sl
 80044e2:	4659      	mov	r1, fp
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f6:	d308      	bcc.n	800450a <UART_SetConfig+0x3de>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d204      	bcs.n	800450a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e0b6      	b.n	8004678 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004510:	e0b2      	b.n	8004678 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d15e      	bne.n	80045da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800451c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004520:	2b08      	cmp	r3, #8
 8004522:	d828      	bhi.n	8004576 <UART_SetConfig+0x44a>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x400>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004551 	.word	0x08004551
 8004530:	08004559 	.word	0x08004559
 8004534:	08004561 	.word	0x08004561
 8004538:	08004577 	.word	0x08004577
 800453c:	08004567 	.word	0x08004567
 8004540:	08004577 	.word	0x08004577
 8004544:	08004577 	.word	0x08004577
 8004548:	08004577 	.word	0x08004577
 800454c:	0800456f 	.word	0x0800456f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fe fc1e 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004554:	61f8      	str	r0, [r7, #28]
        break;
 8004556:	e014      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7fe fc30 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 800455c:	61f8      	str	r0, [r7, #28]
        break;
 800455e:	e010      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004560:	4b4d      	ldr	r3, [pc, #308]	; (8004698 <UART_SetConfig+0x56c>)
 8004562:	61fb      	str	r3, [r7, #28]
        break;
 8004564:	e00d      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004566:	f7fe fb7b 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 800456a:	61f8      	str	r0, [r7, #28]
        break;
 800456c:	e009      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004572:	61fb      	str	r3, [r7, #28]
        break;
 8004574:	e005      	b.n	8004582 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d077      	beq.n	8004678 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005a      	lsls	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b0f      	cmp	r3, #15
 80045a2:	d916      	bls.n	80045d2 <UART_SetConfig+0x4a6>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d212      	bcs.n	80045d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f023 030f 	bic.w	r3, r3, #15
 80045b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	8afb      	ldrh	r3, [r7, #22]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	8afa      	ldrh	r2, [r7, #22]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	e052      	b.n	8004678 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045d8:	e04e      	b.n	8004678 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d827      	bhi.n	8004632 <UART_SetConfig+0x506>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x4bc>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	08004633 	.word	0x08004633
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004633 	.word	0x08004633
 8004604:	08004633 	.word	0x08004633
 8004608:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe fbc0 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e014      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fbd2 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8004618:	61f8      	str	r0, [r7, #28]
        break;
 800461a:	e010      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <UART_SetConfig+0x56c>)
 800461e:	61fb      	str	r3, [r7, #28]
        break;
 8004620:	e00d      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7fe fb1d 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8004626:	61f8      	str	r0, [r7, #28]
        break;
 8004628:	e009      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e005      	b.n	800463e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800463c:	bf00      	nop
    }

    if (pclk != 0U)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d019      	beq.n	8004678 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	085a      	lsrs	r2, r3, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	d909      	bls.n	8004672 <UART_SetConfig+0x546>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d205      	bcs.n	8004672 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e002      	b.n	8004678 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004684:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004688:	4618      	mov	r0, r3
 800468a:	3728      	adds	r7, #40	; 0x28
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	40008000 	.word	0x40008000
 8004698:	00f42400 	.word	0x00f42400

0800469c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d10a      	bne.n	80047b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f0:	f7fd f98c 	bl	8001b0c <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d10e      	bne.n	8004822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f82d 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e023      	b.n	800486a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d10e      	bne.n	800484e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f817 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00d      	b.n	800486a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b09c      	sub	sp, #112	; 0x70
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004882:	e0a5      	b.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	f000 80a1 	beq.w	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fd f93d 	bl	8001b0c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800489e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d13e      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048b8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e067      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d04f      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493e:	d147      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004948:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800495e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
 800496a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3308      	adds	r3, #8
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	66bb      	str	r3, [r7, #104]	; 0x68
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800499c:	623a      	str	r2, [r7, #32]
 800499e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e010      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4013      	ands	r3, r2
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	f43f af4a 	beq.w	8004884 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3770      	adds	r7, #112	; 0x70
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b095      	sub	sp, #84	; 0x54
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a20:	643b      	str	r3, [r7, #64]	; 0x40
 8004a22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e6      	bne.n	8004a02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d118      	bne.n	8004aa2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6979      	ldr	r1, [r7, #20]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ab4:	bf00      	nop
 8004ab6:	3754      	adds	r7, #84	; 0x54
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fb0e 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b08f      	sub	sp, #60	; 0x3c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af8:	2b21      	cmp	r3, #33	; 0x21
 8004afa:	d14d      	bne.n	8004b98 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d132      	bne.n	8004b6e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b28:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e6      	bne.n	8004b08 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b6c:	e014      	b.n	8004b98 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004b98:	bf00      	nop
 8004b9a:	373c      	adds	r7, #60	; 0x3c
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b091      	sub	sp, #68	; 0x44
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb0:	2b21      	cmp	r3, #33	; 0x21
 8004bb2:	d151      	bne.n	8004c58 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d132      	bne.n	8004c26 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30
 8004be0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e6      	bne.n	8004bc0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c24:	e018      	b.n	8004c58 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c58:	bf00      	nop
 8004c5a:	3744      	adds	r7, #68	; 0x44
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6979      	ldr	r1, [r7, #20]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e6      	bne.n	8004c6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc f94d 	bl	8000f4a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cb0:	bf00      	nop
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <__errno>:
 8004ccc:	4b01      	ldr	r3, [pc, #4]	; (8004cd4 <__errno+0x8>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000000c 	.word	0x2000000c

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	4d0d      	ldr	r5, [pc, #52]	; (8004d10 <__libc_init_array+0x38>)
 8004cdc:	4c0d      	ldr	r4, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	4d0b      	ldr	r5, [pc, #44]	; (8004d18 <__libc_init_array+0x40>)
 8004cea:	4c0c      	ldr	r4, [pc, #48]	; (8004d1c <__libc_init_array+0x44>)
 8004cec:	f001 f84e 	bl	8005d8c <_init>
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	0800626c 	.word	0x0800626c
 8004d14:	0800626c 	.word	0x0800626c
 8004d18:	0800626c 	.word	0x0800626c
 8004d1c:	08006270 	.word	0x08006270

08004d20 <memset>:
 8004d20:	4402      	add	r2, r0
 8004d22:	4603      	mov	r3, r0
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d100      	bne.n	8004d2a <memset+0xa>
 8004d28:	4770      	bx	lr
 8004d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2e:	e7f9      	b.n	8004d24 <memset+0x4>

08004d30 <iprintf>:
 8004d30:	b40f      	push	{r0, r1, r2, r3}
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <iprintf+0x2c>)
 8004d34:	b513      	push	{r0, r1, r4, lr}
 8004d36:	681c      	ldr	r4, [r3, #0]
 8004d38:	b124      	cbz	r4, 8004d44 <iprintf+0x14>
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	b913      	cbnz	r3, 8004d44 <iprintf+0x14>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 fa88 	bl	8005254 <__sinit>
 8004d44:	ab05      	add	r3, sp, #20
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	68a1      	ldr	r1, [r4, #8]
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 fc91 	bl	8005674 <_vfiprintf_r>
 8004d52:	b002      	add	sp, #8
 8004d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d58:	b004      	add	sp, #16
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <_puts_r>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	460e      	mov	r6, r1
 8004d64:	4605      	mov	r5, r0
 8004d66:	b118      	cbz	r0, 8004d70 <_puts_r+0x10>
 8004d68:	6983      	ldr	r3, [r0, #24]
 8004d6a:	b90b      	cbnz	r3, 8004d70 <_puts_r+0x10>
 8004d6c:	f000 fa72 	bl	8005254 <__sinit>
 8004d70:	69ab      	ldr	r3, [r5, #24]
 8004d72:	68ac      	ldr	r4, [r5, #8]
 8004d74:	b913      	cbnz	r3, 8004d7c <_puts_r+0x1c>
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 fa6c 	bl	8005254 <__sinit>
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <_puts_r+0xd0>)
 8004d7e:	429c      	cmp	r4, r3
 8004d80:	d120      	bne.n	8004dc4 <_puts_r+0x64>
 8004d82:	686c      	ldr	r4, [r5, #4]
 8004d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d86:	07db      	lsls	r3, r3, #31
 8004d88:	d405      	bmi.n	8004d96 <_puts_r+0x36>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	0598      	lsls	r0, r3, #22
 8004d8e:	d402      	bmi.n	8004d96 <_puts_r+0x36>
 8004d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d92:	f000 fafd 	bl	8005390 <__retarget_lock_acquire_recursive>
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	0719      	lsls	r1, r3, #28
 8004d9a:	d51d      	bpl.n	8004dd8 <_puts_r+0x78>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	b1db      	cbz	r3, 8004dd8 <_puts_r+0x78>
 8004da0:	3e01      	subs	r6, #1
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60a3      	str	r3, [r4, #8]
 8004dac:	bb39      	cbnz	r1, 8004dfe <_puts_r+0x9e>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da38      	bge.n	8004e24 <_puts_r+0xc4>
 8004db2:	4622      	mov	r2, r4
 8004db4:	210a      	movs	r1, #10
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 f872 	bl	8004ea0 <__swbuf_r>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d011      	beq.n	8004de4 <_puts_r+0x84>
 8004dc0:	250a      	movs	r5, #10
 8004dc2:	e011      	b.n	8004de8 <_puts_r+0x88>
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <_puts_r+0xd4>)
 8004dc6:	429c      	cmp	r4, r3
 8004dc8:	d101      	bne.n	8004dce <_puts_r+0x6e>
 8004dca:	68ac      	ldr	r4, [r5, #8]
 8004dcc:	e7da      	b.n	8004d84 <_puts_r+0x24>
 8004dce:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <_puts_r+0xd8>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	bf08      	it	eq
 8004dd4:	68ec      	ldreq	r4, [r5, #12]
 8004dd6:	e7d5      	b.n	8004d84 <_puts_r+0x24>
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f8b2 	bl	8004f44 <__swsetup_r>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d0dd      	beq.n	8004da0 <_puts_r+0x40>
 8004de4:	f04f 35ff 	mov.w	r5, #4294967295
 8004de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dea:	07da      	lsls	r2, r3, #31
 8004dec:	d405      	bmi.n	8004dfa <_puts_r+0x9a>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	059b      	lsls	r3, r3, #22
 8004df2:	d402      	bmi.n	8004dfa <_puts_r+0x9a>
 8004df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df6:	f000 facc 	bl	8005392 <__retarget_lock_release_recursive>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da04      	bge.n	8004e0c <_puts_r+0xac>
 8004e02:	69a2      	ldr	r2, [r4, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	dc06      	bgt.n	8004e16 <_puts_r+0xb6>
 8004e08:	290a      	cmp	r1, #10
 8004e0a:	d004      	beq.n	8004e16 <_puts_r+0xb6>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	6022      	str	r2, [r4, #0]
 8004e12:	7019      	strb	r1, [r3, #0]
 8004e14:	e7c5      	b.n	8004da2 <_puts_r+0x42>
 8004e16:	4622      	mov	r2, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 f841 	bl	8004ea0 <__swbuf_r>
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d1bf      	bne.n	8004da2 <_puts_r+0x42>
 8004e22:	e7df      	b.n	8004de4 <_puts_r+0x84>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	250a      	movs	r5, #10
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	6022      	str	r2, [r4, #0]
 8004e2c:	701d      	strb	r5, [r3, #0]
 8004e2e:	e7db      	b.n	8004de8 <_puts_r+0x88>
 8004e30:	080061f0 	.word	0x080061f0
 8004e34:	08006210 	.word	0x08006210
 8004e38:	080061d0 	.word	0x080061d0

08004e3c <puts>:
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <puts+0xc>)
 8004e3e:	4601      	mov	r1, r0
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	f7ff bf8d 	b.w	8004d60 <_puts_r>
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c

08004e4c <strncmp>:
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	b17a      	cbz	r2, 8004e70 <strncmp+0x24>
 8004e50:	4603      	mov	r3, r0
 8004e52:	3901      	subs	r1, #1
 8004e54:	1884      	adds	r4, r0, r2
 8004e56:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004e5e:	4290      	cmp	r0, r2
 8004e60:	d101      	bne.n	8004e66 <strncmp+0x1a>
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	d101      	bne.n	8004e6a <strncmp+0x1e>
 8004e66:	1a80      	subs	r0, r0, r2
 8004e68:	bd10      	pop	{r4, pc}
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d1f3      	bne.n	8004e56 <strncmp+0xa>
 8004e6e:	e7fa      	b.n	8004e66 <strncmp+0x1a>
 8004e70:	4610      	mov	r0, r2
 8004e72:	e7f9      	b.n	8004e68 <strncmp+0x1c>

08004e74 <strstr>:
 8004e74:	780a      	ldrb	r2, [r1, #0]
 8004e76:	b570      	push	{r4, r5, r6, lr}
 8004e78:	b96a      	cbnz	r2, 8004e96 <strstr+0x22>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d109      	bne.n	8004e94 <strstr+0x20>
 8004e80:	460c      	mov	r4, r1
 8004e82:	4605      	mov	r5, r0
 8004e84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f6      	beq.n	8004e7a <strstr+0x6>
 8004e8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004e90:	429e      	cmp	r6, r3
 8004e92:	d0f7      	beq.n	8004e84 <strstr+0x10>
 8004e94:	3001      	adds	r0, #1
 8004e96:	7803      	ldrb	r3, [r0, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ef      	bne.n	8004e7c <strstr+0x8>
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	e7ec      	b.n	8004e7a <strstr+0x6>

08004ea0 <__swbuf_r>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	460e      	mov	r6, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	b118      	cbz	r0, 8004eb2 <__swbuf_r+0x12>
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <__swbuf_r+0x12>
 8004eae:	f000 f9d1 	bl	8005254 <__sinit>
 8004eb2:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <__swbuf_r+0x98>)
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d12b      	bne.n	8004f10 <__swbuf_r+0x70>
 8004eb8:	686c      	ldr	r4, [r5, #4]
 8004eba:	69a3      	ldr	r3, [r4, #24]
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	071a      	lsls	r2, r3, #28
 8004ec2:	d52f      	bpl.n	8004f24 <__swbuf_r+0x84>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	b36b      	cbz	r3, 8004f24 <__swbuf_r+0x84>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1ac0      	subs	r0, r0, r3
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	b2f6      	uxtb	r6, r6
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	4637      	mov	r7, r6
 8004ed6:	dc04      	bgt.n	8004ee2 <__swbuf_r+0x42>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f926 	bl	800512c <_fflush_r>
 8004ee0:	bb30      	cbnz	r0, 8004f30 <__swbuf_r+0x90>
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	6022      	str	r2, [r4, #0]
 8004eee:	701e      	strb	r6, [r3, #0]
 8004ef0:	6963      	ldr	r3, [r4, #20]
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	4283      	cmp	r3, r0
 8004ef6:	d004      	beq.n	8004f02 <__swbuf_r+0x62>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	07db      	lsls	r3, r3, #31
 8004efc:	d506      	bpl.n	8004f0c <__swbuf_r+0x6c>
 8004efe:	2e0a      	cmp	r6, #10
 8004f00:	d104      	bne.n	8004f0c <__swbuf_r+0x6c>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 f911 	bl	800512c <_fflush_r>
 8004f0a:	b988      	cbnz	r0, 8004f30 <__swbuf_r+0x90>
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <__swbuf_r+0x9c>)
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d101      	bne.n	8004f1a <__swbuf_r+0x7a>
 8004f16:	68ac      	ldr	r4, [r5, #8]
 8004f18:	e7cf      	b.n	8004eba <__swbuf_r+0x1a>
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <__swbuf_r+0xa0>)
 8004f1c:	429c      	cmp	r4, r3
 8004f1e:	bf08      	it	eq
 8004f20:	68ec      	ldreq	r4, [r5, #12]
 8004f22:	e7ca      	b.n	8004eba <__swbuf_r+0x1a>
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	f000 f80c 	bl	8004f44 <__swsetup_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0cb      	beq.n	8004ec8 <__swbuf_r+0x28>
 8004f30:	f04f 37ff 	mov.w	r7, #4294967295
 8004f34:	e7ea      	b.n	8004f0c <__swbuf_r+0x6c>
 8004f36:	bf00      	nop
 8004f38:	080061f0 	.word	0x080061f0
 8004f3c:	08006210 	.word	0x08006210
 8004f40:	080061d0 	.word	0x080061d0

08004f44 <__swsetup_r>:
 8004f44:	4b32      	ldr	r3, [pc, #200]	; (8005010 <__swsetup_r+0xcc>)
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	b125      	cbz	r5, 8004f5a <__swsetup_r+0x16>
 8004f50:	69ab      	ldr	r3, [r5, #24]
 8004f52:	b913      	cbnz	r3, 8004f5a <__swsetup_r+0x16>
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 f97d 	bl	8005254 <__sinit>
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <__swsetup_r+0xd0>)
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d10f      	bne.n	8004f80 <__swsetup_r+0x3c>
 8004f60:	686c      	ldr	r4, [r5, #4]
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f68:	0719      	lsls	r1, r3, #28
 8004f6a:	d42c      	bmi.n	8004fc6 <__swsetup_r+0x82>
 8004f6c:	06dd      	lsls	r5, r3, #27
 8004f6e:	d411      	bmi.n	8004f94 <__swsetup_r+0x50>
 8004f70:	2309      	movs	r3, #9
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	e03e      	b.n	8004ffe <__swsetup_r+0xba>
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <__swsetup_r+0xd4>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d101      	bne.n	8004f8a <__swsetup_r+0x46>
 8004f86:	68ac      	ldr	r4, [r5, #8]
 8004f88:	e7eb      	b.n	8004f62 <__swsetup_r+0x1e>
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <__swsetup_r+0xd8>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	bf08      	it	eq
 8004f90:	68ec      	ldreq	r4, [r5, #12]
 8004f92:	e7e6      	b.n	8004f62 <__swsetup_r+0x1e>
 8004f94:	0758      	lsls	r0, r3, #29
 8004f96:	d512      	bpl.n	8004fbe <__swsetup_r+0x7a>
 8004f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f9a:	b141      	cbz	r1, 8004fae <__swsetup_r+0x6a>
 8004f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	d002      	beq.n	8004faa <__swsetup_r+0x66>
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 fa5b 	bl	8005460 <_free_r>
 8004faa:	2300      	movs	r3, #0
 8004fac:	6363      	str	r3, [r4, #52]	; 0x34
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	b94b      	cbnz	r3, 8004fde <__swsetup_r+0x9a>
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd4:	d003      	beq.n	8004fde <__swsetup_r+0x9a>
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 fa01 	bl	80053e0 <__smakebuf_r>
 8004fde:	89a0      	ldrh	r0, [r4, #12]
 8004fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fe4:	f010 0301 	ands.w	r3, r0, #1
 8004fe8:	d00a      	beq.n	8005000 <__swsetup_r+0xbc>
 8004fea:	2300      	movs	r3, #0
 8004fec:	60a3      	str	r3, [r4, #8]
 8004fee:	6963      	ldr	r3, [r4, #20]
 8004ff0:	425b      	negs	r3, r3
 8004ff2:	61a3      	str	r3, [r4, #24]
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	b943      	cbnz	r3, 800500a <__swsetup_r+0xc6>
 8004ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ffc:	d1ba      	bne.n	8004f74 <__swsetup_r+0x30>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	0781      	lsls	r1, r0, #30
 8005002:	bf58      	it	pl
 8005004:	6963      	ldrpl	r3, [r4, #20]
 8005006:	60a3      	str	r3, [r4, #8]
 8005008:	e7f4      	b.n	8004ff4 <__swsetup_r+0xb0>
 800500a:	2000      	movs	r0, #0
 800500c:	e7f7      	b.n	8004ffe <__swsetup_r+0xba>
 800500e:	bf00      	nop
 8005010:	2000000c 	.word	0x2000000c
 8005014:	080061f0 	.word	0x080061f0
 8005018:	08006210 	.word	0x08006210
 800501c:	080061d0 	.word	0x080061d0

08005020 <__sflush_r>:
 8005020:	898a      	ldrh	r2, [r1, #12]
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	4605      	mov	r5, r0
 8005028:	0710      	lsls	r0, r2, #28
 800502a:	460c      	mov	r4, r1
 800502c:	d458      	bmi.n	80050e0 <__sflush_r+0xc0>
 800502e:	684b      	ldr	r3, [r1, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dc05      	bgt.n	8005040 <__sflush_r+0x20>
 8005034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	dc02      	bgt.n	8005040 <__sflush_r+0x20>
 800503a:	2000      	movs	r0, #0
 800503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005042:	2e00      	cmp	r6, #0
 8005044:	d0f9      	beq.n	800503a <__sflush_r+0x1a>
 8005046:	2300      	movs	r3, #0
 8005048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800504c:	682f      	ldr	r7, [r5, #0]
 800504e:	602b      	str	r3, [r5, #0]
 8005050:	d032      	beq.n	80050b8 <__sflush_r+0x98>
 8005052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	075a      	lsls	r2, r3, #29
 8005058:	d505      	bpl.n	8005066 <__sflush_r+0x46>
 800505a:	6863      	ldr	r3, [r4, #4]
 800505c:	1ac0      	subs	r0, r0, r3
 800505e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005060:	b10b      	cbz	r3, 8005066 <__sflush_r+0x46>
 8005062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005064:	1ac0      	subs	r0, r0, r3
 8005066:	2300      	movs	r3, #0
 8005068:	4602      	mov	r2, r0
 800506a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800506c:	6a21      	ldr	r1, [r4, #32]
 800506e:	4628      	mov	r0, r5
 8005070:	47b0      	blx	r6
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	d106      	bne.n	8005086 <__sflush_r+0x66>
 8005078:	6829      	ldr	r1, [r5, #0]
 800507a:	291d      	cmp	r1, #29
 800507c:	d82c      	bhi.n	80050d8 <__sflush_r+0xb8>
 800507e:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <__sflush_r+0x108>)
 8005080:	40ca      	lsrs	r2, r1
 8005082:	07d6      	lsls	r6, r2, #31
 8005084:	d528      	bpl.n	80050d8 <__sflush_r+0xb8>
 8005086:	2200      	movs	r2, #0
 8005088:	6062      	str	r2, [r4, #4]
 800508a:	04d9      	lsls	r1, r3, #19
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	d504      	bpl.n	800509c <__sflush_r+0x7c>
 8005092:	1c42      	adds	r2, r0, #1
 8005094:	d101      	bne.n	800509a <__sflush_r+0x7a>
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	b903      	cbnz	r3, 800509c <__sflush_r+0x7c>
 800509a:	6560      	str	r0, [r4, #84]	; 0x54
 800509c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800509e:	602f      	str	r7, [r5, #0]
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d0ca      	beq.n	800503a <__sflush_r+0x1a>
 80050a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050a8:	4299      	cmp	r1, r3
 80050aa:	d002      	beq.n	80050b2 <__sflush_r+0x92>
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 f9d7 	bl	8005460 <_free_r>
 80050b2:	2000      	movs	r0, #0
 80050b4:	6360      	str	r0, [r4, #52]	; 0x34
 80050b6:	e7c1      	b.n	800503c <__sflush_r+0x1c>
 80050b8:	6a21      	ldr	r1, [r4, #32]
 80050ba:	2301      	movs	r3, #1
 80050bc:	4628      	mov	r0, r5
 80050be:	47b0      	blx	r6
 80050c0:	1c41      	adds	r1, r0, #1
 80050c2:	d1c7      	bne.n	8005054 <__sflush_r+0x34>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0c4      	beq.n	8005054 <__sflush_r+0x34>
 80050ca:	2b1d      	cmp	r3, #29
 80050cc:	d001      	beq.n	80050d2 <__sflush_r+0xb2>
 80050ce:	2b16      	cmp	r3, #22
 80050d0:	d101      	bne.n	80050d6 <__sflush_r+0xb6>
 80050d2:	602f      	str	r7, [r5, #0]
 80050d4:	e7b1      	b.n	800503a <__sflush_r+0x1a>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e7ad      	b.n	800503c <__sflush_r+0x1c>
 80050e0:	690f      	ldr	r7, [r1, #16]
 80050e2:	2f00      	cmp	r7, #0
 80050e4:	d0a9      	beq.n	800503a <__sflush_r+0x1a>
 80050e6:	0793      	lsls	r3, r2, #30
 80050e8:	680e      	ldr	r6, [r1, #0]
 80050ea:	bf08      	it	eq
 80050ec:	694b      	ldreq	r3, [r1, #20]
 80050ee:	600f      	str	r7, [r1, #0]
 80050f0:	bf18      	it	ne
 80050f2:	2300      	movne	r3, #0
 80050f4:	eba6 0807 	sub.w	r8, r6, r7
 80050f8:	608b      	str	r3, [r1, #8]
 80050fa:	f1b8 0f00 	cmp.w	r8, #0
 80050fe:	dd9c      	ble.n	800503a <__sflush_r+0x1a>
 8005100:	6a21      	ldr	r1, [r4, #32]
 8005102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005104:	4643      	mov	r3, r8
 8005106:	463a      	mov	r2, r7
 8005108:	4628      	mov	r0, r5
 800510a:	47b0      	blx	r6
 800510c:	2800      	cmp	r0, #0
 800510e:	dc06      	bgt.n	800511e <__sflush_r+0xfe>
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e78e      	b.n	800503c <__sflush_r+0x1c>
 800511e:	4407      	add	r7, r0
 8005120:	eba8 0800 	sub.w	r8, r8, r0
 8005124:	e7e9      	b.n	80050fa <__sflush_r+0xda>
 8005126:	bf00      	nop
 8005128:	20400001 	.word	0x20400001

0800512c <_fflush_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	4605      	mov	r5, r0
 8005132:	460c      	mov	r4, r1
 8005134:	b913      	cbnz	r3, 800513c <_fflush_r+0x10>
 8005136:	2500      	movs	r5, #0
 8005138:	4628      	mov	r0, r5
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	b118      	cbz	r0, 8005146 <_fflush_r+0x1a>
 800513e:	6983      	ldr	r3, [r0, #24]
 8005140:	b90b      	cbnz	r3, 8005146 <_fflush_r+0x1a>
 8005142:	f000 f887 	bl	8005254 <__sinit>
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <_fflush_r+0x6c>)
 8005148:	429c      	cmp	r4, r3
 800514a:	d11b      	bne.n	8005184 <_fflush_r+0x58>
 800514c:	686c      	ldr	r4, [r5, #4]
 800514e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0ef      	beq.n	8005136 <_fflush_r+0xa>
 8005156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005158:	07d0      	lsls	r0, r2, #31
 800515a:	d404      	bmi.n	8005166 <_fflush_r+0x3a>
 800515c:	0599      	lsls	r1, r3, #22
 800515e:	d402      	bmi.n	8005166 <_fflush_r+0x3a>
 8005160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005162:	f000 f915 	bl	8005390 <__retarget_lock_acquire_recursive>
 8005166:	4628      	mov	r0, r5
 8005168:	4621      	mov	r1, r4
 800516a:	f7ff ff59 	bl	8005020 <__sflush_r>
 800516e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005170:	07da      	lsls	r2, r3, #31
 8005172:	4605      	mov	r5, r0
 8005174:	d4e0      	bmi.n	8005138 <_fflush_r+0xc>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	059b      	lsls	r3, r3, #22
 800517a:	d4dd      	bmi.n	8005138 <_fflush_r+0xc>
 800517c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517e:	f000 f908 	bl	8005392 <__retarget_lock_release_recursive>
 8005182:	e7d9      	b.n	8005138 <_fflush_r+0xc>
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <_fflush_r+0x70>)
 8005186:	429c      	cmp	r4, r3
 8005188:	d101      	bne.n	800518e <_fflush_r+0x62>
 800518a:	68ac      	ldr	r4, [r5, #8]
 800518c:	e7df      	b.n	800514e <_fflush_r+0x22>
 800518e:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <_fflush_r+0x74>)
 8005190:	429c      	cmp	r4, r3
 8005192:	bf08      	it	eq
 8005194:	68ec      	ldreq	r4, [r5, #12]
 8005196:	e7da      	b.n	800514e <_fflush_r+0x22>
 8005198:	080061f0 	.word	0x080061f0
 800519c:	08006210 	.word	0x08006210
 80051a0:	080061d0 	.word	0x080061d0

080051a4 <std>:
 80051a4:	2300      	movs	r3, #0
 80051a6:	b510      	push	{r4, lr}
 80051a8:	4604      	mov	r4, r0
 80051aa:	e9c0 3300 	strd	r3, r3, [r0]
 80051ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051b2:	6083      	str	r3, [r0, #8]
 80051b4:	8181      	strh	r1, [r0, #12]
 80051b6:	6643      	str	r3, [r0, #100]	; 0x64
 80051b8:	81c2      	strh	r2, [r0, #14]
 80051ba:	6183      	str	r3, [r0, #24]
 80051bc:	4619      	mov	r1, r3
 80051be:	2208      	movs	r2, #8
 80051c0:	305c      	adds	r0, #92	; 0x5c
 80051c2:	f7ff fdad 	bl	8004d20 <memset>
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <std+0x38>)
 80051c8:	6263      	str	r3, [r4, #36]	; 0x24
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <std+0x3c>)
 80051cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <std+0x40>)
 80051d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <std+0x44>)
 80051d4:	6224      	str	r4, [r4, #32]
 80051d6:	6323      	str	r3, [r4, #48]	; 0x30
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	bf00      	nop
 80051dc:	08005c1d 	.word	0x08005c1d
 80051e0:	08005c3f 	.word	0x08005c3f
 80051e4:	08005c77 	.word	0x08005c77
 80051e8:	08005c9b 	.word	0x08005c9b

080051ec <_cleanup_r>:
 80051ec:	4901      	ldr	r1, [pc, #4]	; (80051f4 <_cleanup_r+0x8>)
 80051ee:	f000 b8af 	b.w	8005350 <_fwalk_reent>
 80051f2:	bf00      	nop
 80051f4:	0800512d 	.word	0x0800512d

080051f8 <__sfmoreglue>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	2268      	movs	r2, #104	; 0x68
 80051fc:	1e4d      	subs	r5, r1, #1
 80051fe:	4355      	muls	r5, r2
 8005200:	460e      	mov	r6, r1
 8005202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005206:	f000 f997 	bl	8005538 <_malloc_r>
 800520a:	4604      	mov	r4, r0
 800520c:	b140      	cbz	r0, 8005220 <__sfmoreglue+0x28>
 800520e:	2100      	movs	r1, #0
 8005210:	e9c0 1600 	strd	r1, r6, [r0]
 8005214:	300c      	adds	r0, #12
 8005216:	60a0      	str	r0, [r4, #8]
 8005218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800521c:	f7ff fd80 	bl	8004d20 <memset>
 8005220:	4620      	mov	r0, r4
 8005222:	bd70      	pop	{r4, r5, r6, pc}

08005224 <__sfp_lock_acquire>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__sfp_lock_acquire+0x8>)
 8005226:	f000 b8b3 	b.w	8005390 <__retarget_lock_acquire_recursive>
 800522a:	bf00      	nop
 800522c:	200003f5 	.word	0x200003f5

08005230 <__sfp_lock_release>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__sfp_lock_release+0x8>)
 8005232:	f000 b8ae 	b.w	8005392 <__retarget_lock_release_recursive>
 8005236:	bf00      	nop
 8005238:	200003f5 	.word	0x200003f5

0800523c <__sinit_lock_acquire>:
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <__sinit_lock_acquire+0x8>)
 800523e:	f000 b8a7 	b.w	8005390 <__retarget_lock_acquire_recursive>
 8005242:	bf00      	nop
 8005244:	200003f6 	.word	0x200003f6

08005248 <__sinit_lock_release>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__sinit_lock_release+0x8>)
 800524a:	f000 b8a2 	b.w	8005392 <__retarget_lock_release_recursive>
 800524e:	bf00      	nop
 8005250:	200003f6 	.word	0x200003f6

08005254 <__sinit>:
 8005254:	b510      	push	{r4, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	f7ff fff0 	bl	800523c <__sinit_lock_acquire>
 800525c:	69a3      	ldr	r3, [r4, #24]
 800525e:	b11b      	cbz	r3, 8005268 <__sinit+0x14>
 8005260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005264:	f7ff bff0 	b.w	8005248 <__sinit_lock_release>
 8005268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800526c:	6523      	str	r3, [r4, #80]	; 0x50
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <__sinit+0x68>)
 8005270:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <__sinit+0x6c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	62a2      	str	r2, [r4, #40]	; 0x28
 8005276:	42a3      	cmp	r3, r4
 8005278:	bf04      	itt	eq
 800527a:	2301      	moveq	r3, #1
 800527c:	61a3      	streq	r3, [r4, #24]
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f820 	bl	80052c4 <__sfp>
 8005284:	6060      	str	r0, [r4, #4]
 8005286:	4620      	mov	r0, r4
 8005288:	f000 f81c 	bl	80052c4 <__sfp>
 800528c:	60a0      	str	r0, [r4, #8]
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f818 	bl	80052c4 <__sfp>
 8005294:	2200      	movs	r2, #0
 8005296:	60e0      	str	r0, [r4, #12]
 8005298:	2104      	movs	r1, #4
 800529a:	6860      	ldr	r0, [r4, #4]
 800529c:	f7ff ff82 	bl	80051a4 <std>
 80052a0:	68a0      	ldr	r0, [r4, #8]
 80052a2:	2201      	movs	r2, #1
 80052a4:	2109      	movs	r1, #9
 80052a6:	f7ff ff7d 	bl	80051a4 <std>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	2202      	movs	r2, #2
 80052ae:	2112      	movs	r1, #18
 80052b0:	f7ff ff78 	bl	80051a4 <std>
 80052b4:	2301      	movs	r3, #1
 80052b6:	61a3      	str	r3, [r4, #24]
 80052b8:	e7d2      	b.n	8005260 <__sinit+0xc>
 80052ba:	bf00      	nop
 80052bc:	080061cc 	.word	0x080061cc
 80052c0:	080051ed 	.word	0x080051ed

080052c4 <__sfp>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	4607      	mov	r7, r0
 80052c8:	f7ff ffac 	bl	8005224 <__sfp_lock_acquire>
 80052cc:	4b1e      	ldr	r3, [pc, #120]	; (8005348 <__sfp+0x84>)
 80052ce:	681e      	ldr	r6, [r3, #0]
 80052d0:	69b3      	ldr	r3, [r6, #24]
 80052d2:	b913      	cbnz	r3, 80052da <__sfp+0x16>
 80052d4:	4630      	mov	r0, r6
 80052d6:	f7ff ffbd 	bl	8005254 <__sinit>
 80052da:	3648      	adds	r6, #72	; 0x48
 80052dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	d503      	bpl.n	80052ec <__sfp+0x28>
 80052e4:	6833      	ldr	r3, [r6, #0]
 80052e6:	b30b      	cbz	r3, 800532c <__sfp+0x68>
 80052e8:	6836      	ldr	r6, [r6, #0]
 80052ea:	e7f7      	b.n	80052dc <__sfp+0x18>
 80052ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052f0:	b9d5      	cbnz	r5, 8005328 <__sfp+0x64>
 80052f2:	4b16      	ldr	r3, [pc, #88]	; (800534c <__sfp+0x88>)
 80052f4:	60e3      	str	r3, [r4, #12]
 80052f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052fa:	6665      	str	r5, [r4, #100]	; 0x64
 80052fc:	f000 f847 	bl	800538e <__retarget_lock_init_recursive>
 8005300:	f7ff ff96 	bl	8005230 <__sfp_lock_release>
 8005304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800530c:	6025      	str	r5, [r4, #0]
 800530e:	61a5      	str	r5, [r4, #24]
 8005310:	2208      	movs	r2, #8
 8005312:	4629      	mov	r1, r5
 8005314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005318:	f7ff fd02 	bl	8004d20 <memset>
 800531c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005324:	4620      	mov	r0, r4
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005328:	3468      	adds	r4, #104	; 0x68
 800532a:	e7d9      	b.n	80052e0 <__sfp+0x1c>
 800532c:	2104      	movs	r1, #4
 800532e:	4638      	mov	r0, r7
 8005330:	f7ff ff62 	bl	80051f8 <__sfmoreglue>
 8005334:	4604      	mov	r4, r0
 8005336:	6030      	str	r0, [r6, #0]
 8005338:	2800      	cmp	r0, #0
 800533a:	d1d5      	bne.n	80052e8 <__sfp+0x24>
 800533c:	f7ff ff78 	bl	8005230 <__sfp_lock_release>
 8005340:	230c      	movs	r3, #12
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	e7ee      	b.n	8005324 <__sfp+0x60>
 8005346:	bf00      	nop
 8005348:	080061cc 	.word	0x080061cc
 800534c:	ffff0001 	.word	0xffff0001

08005350 <_fwalk_reent>:
 8005350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005354:	4606      	mov	r6, r0
 8005356:	4688      	mov	r8, r1
 8005358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800535c:	2700      	movs	r7, #0
 800535e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005362:	f1b9 0901 	subs.w	r9, r9, #1
 8005366:	d505      	bpl.n	8005374 <_fwalk_reent+0x24>
 8005368:	6824      	ldr	r4, [r4, #0]
 800536a:	2c00      	cmp	r4, #0
 800536c:	d1f7      	bne.n	800535e <_fwalk_reent+0xe>
 800536e:	4638      	mov	r0, r7
 8005370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005374:	89ab      	ldrh	r3, [r5, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d907      	bls.n	800538a <_fwalk_reent+0x3a>
 800537a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800537e:	3301      	adds	r3, #1
 8005380:	d003      	beq.n	800538a <_fwalk_reent+0x3a>
 8005382:	4629      	mov	r1, r5
 8005384:	4630      	mov	r0, r6
 8005386:	47c0      	blx	r8
 8005388:	4307      	orrs	r7, r0
 800538a:	3568      	adds	r5, #104	; 0x68
 800538c:	e7e9      	b.n	8005362 <_fwalk_reent+0x12>

0800538e <__retarget_lock_init_recursive>:
 800538e:	4770      	bx	lr

08005390 <__retarget_lock_acquire_recursive>:
 8005390:	4770      	bx	lr

08005392 <__retarget_lock_release_recursive>:
 8005392:	4770      	bx	lr

08005394 <__swhatbuf_r>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	460e      	mov	r6, r1
 8005398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539c:	2900      	cmp	r1, #0
 800539e:	b096      	sub	sp, #88	; 0x58
 80053a0:	4614      	mov	r4, r2
 80053a2:	461d      	mov	r5, r3
 80053a4:	da08      	bge.n	80053b8 <__swhatbuf_r+0x24>
 80053a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	061a      	lsls	r2, r3, #24
 80053b0:	d410      	bmi.n	80053d4 <__swhatbuf_r+0x40>
 80053b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b6:	e00e      	b.n	80053d6 <__swhatbuf_r+0x42>
 80053b8:	466a      	mov	r2, sp
 80053ba:	f000 fc95 	bl	8005ce8 <_fstat_r>
 80053be:	2800      	cmp	r0, #0
 80053c0:	dbf1      	blt.n	80053a6 <__swhatbuf_r+0x12>
 80053c2:	9a01      	ldr	r2, [sp, #4]
 80053c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053cc:	425a      	negs	r2, r3
 80053ce:	415a      	adcs	r2, r3
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	e7ee      	b.n	80053b2 <__swhatbuf_r+0x1e>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	2000      	movs	r0, #0
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	b016      	add	sp, #88	; 0x58
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080053e0 <__smakebuf_r>:
 80053e0:	898b      	ldrh	r3, [r1, #12]
 80053e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053e4:	079d      	lsls	r5, r3, #30
 80053e6:	4606      	mov	r6, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	d507      	bpl.n	80053fc <__smakebuf_r+0x1c>
 80053ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	6123      	str	r3, [r4, #16]
 80053f4:	2301      	movs	r3, #1
 80053f6:	6163      	str	r3, [r4, #20]
 80053f8:	b002      	add	sp, #8
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	ab01      	add	r3, sp, #4
 80053fe:	466a      	mov	r2, sp
 8005400:	f7ff ffc8 	bl	8005394 <__swhatbuf_r>
 8005404:	9900      	ldr	r1, [sp, #0]
 8005406:	4605      	mov	r5, r0
 8005408:	4630      	mov	r0, r6
 800540a:	f000 f895 	bl	8005538 <_malloc_r>
 800540e:	b948      	cbnz	r0, 8005424 <__smakebuf_r+0x44>
 8005410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005414:	059a      	lsls	r2, r3, #22
 8005416:	d4ef      	bmi.n	80053f8 <__smakebuf_r+0x18>
 8005418:	f023 0303 	bic.w	r3, r3, #3
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e7e3      	b.n	80053ec <__smakebuf_r+0xc>
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <__smakebuf_r+0x7c>)
 8005426:	62b3      	str	r3, [r6, #40]	; 0x28
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	6020      	str	r0, [r4, #0]
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	9b00      	ldr	r3, [sp, #0]
 8005434:	6163      	str	r3, [r4, #20]
 8005436:	9b01      	ldr	r3, [sp, #4]
 8005438:	6120      	str	r0, [r4, #16]
 800543a:	b15b      	cbz	r3, 8005454 <__smakebuf_r+0x74>
 800543c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005440:	4630      	mov	r0, r6
 8005442:	f000 fc63 	bl	8005d0c <_isatty_r>
 8005446:	b128      	cbz	r0, 8005454 <__smakebuf_r+0x74>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	89a0      	ldrh	r0, [r4, #12]
 8005456:	4305      	orrs	r5, r0
 8005458:	81a5      	strh	r5, [r4, #12]
 800545a:	e7cd      	b.n	80053f8 <__smakebuf_r+0x18>
 800545c:	080051ed 	.word	0x080051ed

08005460 <_free_r>:
 8005460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005462:	2900      	cmp	r1, #0
 8005464:	d044      	beq.n	80054f0 <_free_r+0x90>
 8005466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546a:	9001      	str	r0, [sp, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f1a1 0404 	sub.w	r4, r1, #4
 8005472:	bfb8      	it	lt
 8005474:	18e4      	addlt	r4, r4, r3
 8005476:	f000 fc6b 	bl	8005d50 <__malloc_lock>
 800547a:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <_free_r+0x94>)
 800547c:	9801      	ldr	r0, [sp, #4]
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	b933      	cbnz	r3, 8005490 <_free_r+0x30>
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	6014      	str	r4, [r2, #0]
 8005486:	b003      	add	sp, #12
 8005488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800548c:	f000 bc66 	b.w	8005d5c <__malloc_unlock>
 8005490:	42a3      	cmp	r3, r4
 8005492:	d908      	bls.n	80054a6 <_free_r+0x46>
 8005494:	6825      	ldr	r5, [r4, #0]
 8005496:	1961      	adds	r1, r4, r5
 8005498:	428b      	cmp	r3, r1
 800549a:	bf01      	itttt	eq
 800549c:	6819      	ldreq	r1, [r3, #0]
 800549e:	685b      	ldreq	r3, [r3, #4]
 80054a0:	1949      	addeq	r1, r1, r5
 80054a2:	6021      	streq	r1, [r4, #0]
 80054a4:	e7ed      	b.n	8005482 <_free_r+0x22>
 80054a6:	461a      	mov	r2, r3
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	b10b      	cbz	r3, 80054b0 <_free_r+0x50>
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	d9fa      	bls.n	80054a6 <_free_r+0x46>
 80054b0:	6811      	ldr	r1, [r2, #0]
 80054b2:	1855      	adds	r5, r2, r1
 80054b4:	42a5      	cmp	r5, r4
 80054b6:	d10b      	bne.n	80054d0 <_free_r+0x70>
 80054b8:	6824      	ldr	r4, [r4, #0]
 80054ba:	4421      	add	r1, r4
 80054bc:	1854      	adds	r4, r2, r1
 80054be:	42a3      	cmp	r3, r4
 80054c0:	6011      	str	r1, [r2, #0]
 80054c2:	d1e0      	bne.n	8005486 <_free_r+0x26>
 80054c4:	681c      	ldr	r4, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	6053      	str	r3, [r2, #4]
 80054ca:	4421      	add	r1, r4
 80054cc:	6011      	str	r1, [r2, #0]
 80054ce:	e7da      	b.n	8005486 <_free_r+0x26>
 80054d0:	d902      	bls.n	80054d8 <_free_r+0x78>
 80054d2:	230c      	movs	r3, #12
 80054d4:	6003      	str	r3, [r0, #0]
 80054d6:	e7d6      	b.n	8005486 <_free_r+0x26>
 80054d8:	6825      	ldr	r5, [r4, #0]
 80054da:	1961      	adds	r1, r4, r5
 80054dc:	428b      	cmp	r3, r1
 80054de:	bf04      	itt	eq
 80054e0:	6819      	ldreq	r1, [r3, #0]
 80054e2:	685b      	ldreq	r3, [r3, #4]
 80054e4:	6063      	str	r3, [r4, #4]
 80054e6:	bf04      	itt	eq
 80054e8:	1949      	addeq	r1, r1, r5
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	6054      	str	r4, [r2, #4]
 80054ee:	e7ca      	b.n	8005486 <_free_r+0x26>
 80054f0:	b003      	add	sp, #12
 80054f2:	bd30      	pop	{r4, r5, pc}
 80054f4:	200003f8 	.word	0x200003f8

080054f8 <sbrk_aligned>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4e0e      	ldr	r6, [pc, #56]	; (8005534 <sbrk_aligned+0x3c>)
 80054fc:	460c      	mov	r4, r1
 80054fe:	6831      	ldr	r1, [r6, #0]
 8005500:	4605      	mov	r5, r0
 8005502:	b911      	cbnz	r1, 800550a <sbrk_aligned+0x12>
 8005504:	f000 fb7a 	bl	8005bfc <_sbrk_r>
 8005508:	6030      	str	r0, [r6, #0]
 800550a:	4621      	mov	r1, r4
 800550c:	4628      	mov	r0, r5
 800550e:	f000 fb75 	bl	8005bfc <_sbrk_r>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d00a      	beq.n	800552c <sbrk_aligned+0x34>
 8005516:	1cc4      	adds	r4, r0, #3
 8005518:	f024 0403 	bic.w	r4, r4, #3
 800551c:	42a0      	cmp	r0, r4
 800551e:	d007      	beq.n	8005530 <sbrk_aligned+0x38>
 8005520:	1a21      	subs	r1, r4, r0
 8005522:	4628      	mov	r0, r5
 8005524:	f000 fb6a 	bl	8005bfc <_sbrk_r>
 8005528:	3001      	adds	r0, #1
 800552a:	d101      	bne.n	8005530 <sbrk_aligned+0x38>
 800552c:	f04f 34ff 	mov.w	r4, #4294967295
 8005530:	4620      	mov	r0, r4
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	200003fc 	.word	0x200003fc

08005538 <_malloc_r>:
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	1ccd      	adds	r5, r1, #3
 800553e:	f025 0503 	bic.w	r5, r5, #3
 8005542:	3508      	adds	r5, #8
 8005544:	2d0c      	cmp	r5, #12
 8005546:	bf38      	it	cc
 8005548:	250c      	movcc	r5, #12
 800554a:	2d00      	cmp	r5, #0
 800554c:	4607      	mov	r7, r0
 800554e:	db01      	blt.n	8005554 <_malloc_r+0x1c>
 8005550:	42a9      	cmp	r1, r5
 8005552:	d905      	bls.n	8005560 <_malloc_r+0x28>
 8005554:	230c      	movs	r3, #12
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	2600      	movs	r6, #0
 800555a:	4630      	mov	r0, r6
 800555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005560:	4e2e      	ldr	r6, [pc, #184]	; (800561c <_malloc_r+0xe4>)
 8005562:	f000 fbf5 	bl	8005d50 <__malloc_lock>
 8005566:	6833      	ldr	r3, [r6, #0]
 8005568:	461c      	mov	r4, r3
 800556a:	bb34      	cbnz	r4, 80055ba <_malloc_r+0x82>
 800556c:	4629      	mov	r1, r5
 800556e:	4638      	mov	r0, r7
 8005570:	f7ff ffc2 	bl	80054f8 <sbrk_aligned>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	4604      	mov	r4, r0
 8005578:	d14d      	bne.n	8005616 <_malloc_r+0xde>
 800557a:	6834      	ldr	r4, [r6, #0]
 800557c:	4626      	mov	r6, r4
 800557e:	2e00      	cmp	r6, #0
 8005580:	d140      	bne.n	8005604 <_malloc_r+0xcc>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	4631      	mov	r1, r6
 8005586:	4638      	mov	r0, r7
 8005588:	eb04 0803 	add.w	r8, r4, r3
 800558c:	f000 fb36 	bl	8005bfc <_sbrk_r>
 8005590:	4580      	cmp	r8, r0
 8005592:	d13a      	bne.n	800560a <_malloc_r+0xd2>
 8005594:	6821      	ldr	r1, [r4, #0]
 8005596:	3503      	adds	r5, #3
 8005598:	1a6d      	subs	r5, r5, r1
 800559a:	f025 0503 	bic.w	r5, r5, #3
 800559e:	3508      	adds	r5, #8
 80055a0:	2d0c      	cmp	r5, #12
 80055a2:	bf38      	it	cc
 80055a4:	250c      	movcc	r5, #12
 80055a6:	4629      	mov	r1, r5
 80055a8:	4638      	mov	r0, r7
 80055aa:	f7ff ffa5 	bl	80054f8 <sbrk_aligned>
 80055ae:	3001      	adds	r0, #1
 80055b0:	d02b      	beq.n	800560a <_malloc_r+0xd2>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	442b      	add	r3, r5
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	e00e      	b.n	80055d8 <_malloc_r+0xa0>
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	1b52      	subs	r2, r2, r5
 80055be:	d41e      	bmi.n	80055fe <_malloc_r+0xc6>
 80055c0:	2a0b      	cmp	r2, #11
 80055c2:	d916      	bls.n	80055f2 <_malloc_r+0xba>
 80055c4:	1961      	adds	r1, r4, r5
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	6025      	str	r5, [r4, #0]
 80055ca:	bf18      	it	ne
 80055cc:	6059      	strne	r1, [r3, #4]
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	bf08      	it	eq
 80055d2:	6031      	streq	r1, [r6, #0]
 80055d4:	5162      	str	r2, [r4, r5]
 80055d6:	604b      	str	r3, [r1, #4]
 80055d8:	4638      	mov	r0, r7
 80055da:	f104 060b 	add.w	r6, r4, #11
 80055de:	f000 fbbd 	bl	8005d5c <__malloc_unlock>
 80055e2:	f026 0607 	bic.w	r6, r6, #7
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	1af2      	subs	r2, r6, r3
 80055ea:	d0b6      	beq.n	800555a <_malloc_r+0x22>
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	50a3      	str	r3, [r4, r2]
 80055f0:	e7b3      	b.n	800555a <_malloc_r+0x22>
 80055f2:	6862      	ldr	r2, [r4, #4]
 80055f4:	42a3      	cmp	r3, r4
 80055f6:	bf0c      	ite	eq
 80055f8:	6032      	streq	r2, [r6, #0]
 80055fa:	605a      	strne	r2, [r3, #4]
 80055fc:	e7ec      	b.n	80055d8 <_malloc_r+0xa0>
 80055fe:	4623      	mov	r3, r4
 8005600:	6864      	ldr	r4, [r4, #4]
 8005602:	e7b2      	b.n	800556a <_malloc_r+0x32>
 8005604:	4634      	mov	r4, r6
 8005606:	6876      	ldr	r6, [r6, #4]
 8005608:	e7b9      	b.n	800557e <_malloc_r+0x46>
 800560a:	230c      	movs	r3, #12
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4638      	mov	r0, r7
 8005610:	f000 fba4 	bl	8005d5c <__malloc_unlock>
 8005614:	e7a1      	b.n	800555a <_malloc_r+0x22>
 8005616:	6025      	str	r5, [r4, #0]
 8005618:	e7de      	b.n	80055d8 <_malloc_r+0xa0>
 800561a:	bf00      	nop
 800561c:	200003f8 	.word	0x200003f8

08005620 <__sfputc_r>:
 8005620:	6893      	ldr	r3, [r2, #8]
 8005622:	3b01      	subs	r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	b410      	push	{r4}
 8005628:	6093      	str	r3, [r2, #8]
 800562a:	da08      	bge.n	800563e <__sfputc_r+0x1e>
 800562c:	6994      	ldr	r4, [r2, #24]
 800562e:	42a3      	cmp	r3, r4
 8005630:	db01      	blt.n	8005636 <__sfputc_r+0x16>
 8005632:	290a      	cmp	r1, #10
 8005634:	d103      	bne.n	800563e <__sfputc_r+0x1e>
 8005636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563a:	f7ff bc31 	b.w	8004ea0 <__swbuf_r>
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	1c58      	adds	r0, r3, #1
 8005642:	6010      	str	r0, [r2, #0]
 8005644:	7019      	strb	r1, [r3, #0]
 8005646:	4608      	mov	r0, r1
 8005648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800564c:	4770      	bx	lr

0800564e <__sfputs_r>:
 800564e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005650:	4606      	mov	r6, r0
 8005652:	460f      	mov	r7, r1
 8005654:	4614      	mov	r4, r2
 8005656:	18d5      	adds	r5, r2, r3
 8005658:	42ac      	cmp	r4, r5
 800565a:	d101      	bne.n	8005660 <__sfputs_r+0x12>
 800565c:	2000      	movs	r0, #0
 800565e:	e007      	b.n	8005670 <__sfputs_r+0x22>
 8005660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005664:	463a      	mov	r2, r7
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff ffda 	bl	8005620 <__sfputc_r>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d1f3      	bne.n	8005658 <__sfputs_r+0xa>
 8005670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005674 <_vfiprintf_r>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	460d      	mov	r5, r1
 800567a:	b09d      	sub	sp, #116	; 0x74
 800567c:	4614      	mov	r4, r2
 800567e:	4698      	mov	r8, r3
 8005680:	4606      	mov	r6, r0
 8005682:	b118      	cbz	r0, 800568c <_vfiprintf_r+0x18>
 8005684:	6983      	ldr	r3, [r0, #24]
 8005686:	b90b      	cbnz	r3, 800568c <_vfiprintf_r+0x18>
 8005688:	f7ff fde4 	bl	8005254 <__sinit>
 800568c:	4b89      	ldr	r3, [pc, #548]	; (80058b4 <_vfiprintf_r+0x240>)
 800568e:	429d      	cmp	r5, r3
 8005690:	d11b      	bne.n	80056ca <_vfiprintf_r+0x56>
 8005692:	6875      	ldr	r5, [r6, #4]
 8005694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005696:	07d9      	lsls	r1, r3, #31
 8005698:	d405      	bmi.n	80056a6 <_vfiprintf_r+0x32>
 800569a:	89ab      	ldrh	r3, [r5, #12]
 800569c:	059a      	lsls	r2, r3, #22
 800569e:	d402      	bmi.n	80056a6 <_vfiprintf_r+0x32>
 80056a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a2:	f7ff fe75 	bl	8005390 <__retarget_lock_acquire_recursive>
 80056a6:	89ab      	ldrh	r3, [r5, #12]
 80056a8:	071b      	lsls	r3, r3, #28
 80056aa:	d501      	bpl.n	80056b0 <_vfiprintf_r+0x3c>
 80056ac:	692b      	ldr	r3, [r5, #16]
 80056ae:	b9eb      	cbnz	r3, 80056ec <_vfiprintf_r+0x78>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7ff fc46 	bl	8004f44 <__swsetup_r>
 80056b8:	b1c0      	cbz	r0, 80056ec <_vfiprintf_r+0x78>
 80056ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056bc:	07dc      	lsls	r4, r3, #31
 80056be:	d50e      	bpl.n	80056de <_vfiprintf_r+0x6a>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	b01d      	add	sp, #116	; 0x74
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	4b7b      	ldr	r3, [pc, #492]	; (80058b8 <_vfiprintf_r+0x244>)
 80056cc:	429d      	cmp	r5, r3
 80056ce:	d101      	bne.n	80056d4 <_vfiprintf_r+0x60>
 80056d0:	68b5      	ldr	r5, [r6, #8]
 80056d2:	e7df      	b.n	8005694 <_vfiprintf_r+0x20>
 80056d4:	4b79      	ldr	r3, [pc, #484]	; (80058bc <_vfiprintf_r+0x248>)
 80056d6:	429d      	cmp	r5, r3
 80056d8:	bf08      	it	eq
 80056da:	68f5      	ldreq	r5, [r6, #12]
 80056dc:	e7da      	b.n	8005694 <_vfiprintf_r+0x20>
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	0598      	lsls	r0, r3, #22
 80056e2:	d4ed      	bmi.n	80056c0 <_vfiprintf_r+0x4c>
 80056e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056e6:	f7ff fe54 	bl	8005392 <__retarget_lock_release_recursive>
 80056ea:	e7e9      	b.n	80056c0 <_vfiprintf_r+0x4c>
 80056ec:	2300      	movs	r3, #0
 80056ee:	9309      	str	r3, [sp, #36]	; 0x24
 80056f0:	2320      	movs	r3, #32
 80056f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056fa:	2330      	movs	r3, #48	; 0x30
 80056fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058c0 <_vfiprintf_r+0x24c>
 8005700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005704:	f04f 0901 	mov.w	r9, #1
 8005708:	4623      	mov	r3, r4
 800570a:	469a      	mov	sl, r3
 800570c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005710:	b10a      	cbz	r2, 8005716 <_vfiprintf_r+0xa2>
 8005712:	2a25      	cmp	r2, #37	; 0x25
 8005714:	d1f9      	bne.n	800570a <_vfiprintf_r+0x96>
 8005716:	ebba 0b04 	subs.w	fp, sl, r4
 800571a:	d00b      	beq.n	8005734 <_vfiprintf_r+0xc0>
 800571c:	465b      	mov	r3, fp
 800571e:	4622      	mov	r2, r4
 8005720:	4629      	mov	r1, r5
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ff93 	bl	800564e <__sfputs_r>
 8005728:	3001      	adds	r0, #1
 800572a:	f000 80aa 	beq.w	8005882 <_vfiprintf_r+0x20e>
 800572e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005730:	445a      	add	r2, fp
 8005732:	9209      	str	r2, [sp, #36]	; 0x24
 8005734:	f89a 3000 	ldrb.w	r3, [sl]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 80a2 	beq.w	8005882 <_vfiprintf_r+0x20e>
 800573e:	2300      	movs	r3, #0
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005748:	f10a 0a01 	add.w	sl, sl, #1
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	9307      	str	r3, [sp, #28]
 8005750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005754:	931a      	str	r3, [sp, #104]	; 0x68
 8005756:	4654      	mov	r4, sl
 8005758:	2205      	movs	r2, #5
 800575a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575e:	4858      	ldr	r0, [pc, #352]	; (80058c0 <_vfiprintf_r+0x24c>)
 8005760:	f7fa fd3e 	bl	80001e0 <memchr>
 8005764:	9a04      	ldr	r2, [sp, #16]
 8005766:	b9d8      	cbnz	r0, 80057a0 <_vfiprintf_r+0x12c>
 8005768:	06d1      	lsls	r1, r2, #27
 800576a:	bf44      	itt	mi
 800576c:	2320      	movmi	r3, #32
 800576e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005772:	0713      	lsls	r3, r2, #28
 8005774:	bf44      	itt	mi
 8005776:	232b      	movmi	r3, #43	; 0x2b
 8005778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800577c:	f89a 3000 	ldrb.w	r3, [sl]
 8005780:	2b2a      	cmp	r3, #42	; 0x2a
 8005782:	d015      	beq.n	80057b0 <_vfiprintf_r+0x13c>
 8005784:	9a07      	ldr	r2, [sp, #28]
 8005786:	4654      	mov	r4, sl
 8005788:	2000      	movs	r0, #0
 800578a:	f04f 0c0a 	mov.w	ip, #10
 800578e:	4621      	mov	r1, r4
 8005790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005794:	3b30      	subs	r3, #48	; 0x30
 8005796:	2b09      	cmp	r3, #9
 8005798:	d94e      	bls.n	8005838 <_vfiprintf_r+0x1c4>
 800579a:	b1b0      	cbz	r0, 80057ca <_vfiprintf_r+0x156>
 800579c:	9207      	str	r2, [sp, #28]
 800579e:	e014      	b.n	80057ca <_vfiprintf_r+0x156>
 80057a0:	eba0 0308 	sub.w	r3, r0, r8
 80057a4:	fa09 f303 	lsl.w	r3, r9, r3
 80057a8:	4313      	orrs	r3, r2
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	46a2      	mov	sl, r4
 80057ae:	e7d2      	b.n	8005756 <_vfiprintf_r+0xe2>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	1d19      	adds	r1, r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	9103      	str	r1, [sp, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bfbb      	ittet	lt
 80057bc:	425b      	neglt	r3, r3
 80057be:	f042 0202 	orrlt.w	r2, r2, #2
 80057c2:	9307      	strge	r3, [sp, #28]
 80057c4:	9307      	strlt	r3, [sp, #28]
 80057c6:	bfb8      	it	lt
 80057c8:	9204      	strlt	r2, [sp, #16]
 80057ca:	7823      	ldrb	r3, [r4, #0]
 80057cc:	2b2e      	cmp	r3, #46	; 0x2e
 80057ce:	d10c      	bne.n	80057ea <_vfiprintf_r+0x176>
 80057d0:	7863      	ldrb	r3, [r4, #1]
 80057d2:	2b2a      	cmp	r3, #42	; 0x2a
 80057d4:	d135      	bne.n	8005842 <_vfiprintf_r+0x1ce>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	1d1a      	adds	r2, r3, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	9203      	str	r2, [sp, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfb8      	it	lt
 80057e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057e6:	3402      	adds	r4, #2
 80057e8:	9305      	str	r3, [sp, #20]
 80057ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058d0 <_vfiprintf_r+0x25c>
 80057ee:	7821      	ldrb	r1, [r4, #0]
 80057f0:	2203      	movs	r2, #3
 80057f2:	4650      	mov	r0, sl
 80057f4:	f7fa fcf4 	bl	80001e0 <memchr>
 80057f8:	b140      	cbz	r0, 800580c <_vfiprintf_r+0x198>
 80057fa:	2340      	movs	r3, #64	; 0x40
 80057fc:	eba0 000a 	sub.w	r0, r0, sl
 8005800:	fa03 f000 	lsl.w	r0, r3, r0
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	4303      	orrs	r3, r0
 8005808:	3401      	adds	r4, #1
 800580a:	9304      	str	r3, [sp, #16]
 800580c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005810:	482c      	ldr	r0, [pc, #176]	; (80058c4 <_vfiprintf_r+0x250>)
 8005812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005816:	2206      	movs	r2, #6
 8005818:	f7fa fce2 	bl	80001e0 <memchr>
 800581c:	2800      	cmp	r0, #0
 800581e:	d03f      	beq.n	80058a0 <_vfiprintf_r+0x22c>
 8005820:	4b29      	ldr	r3, [pc, #164]	; (80058c8 <_vfiprintf_r+0x254>)
 8005822:	bb1b      	cbnz	r3, 800586c <_vfiprintf_r+0x1f8>
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	3307      	adds	r3, #7
 8005828:	f023 0307 	bic.w	r3, r3, #7
 800582c:	3308      	adds	r3, #8
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005832:	443b      	add	r3, r7
 8005834:	9309      	str	r3, [sp, #36]	; 0x24
 8005836:	e767      	b.n	8005708 <_vfiprintf_r+0x94>
 8005838:	fb0c 3202 	mla	r2, ip, r2, r3
 800583c:	460c      	mov	r4, r1
 800583e:	2001      	movs	r0, #1
 8005840:	e7a5      	b.n	800578e <_vfiprintf_r+0x11a>
 8005842:	2300      	movs	r3, #0
 8005844:	3401      	adds	r4, #1
 8005846:	9305      	str	r3, [sp, #20]
 8005848:	4619      	mov	r1, r3
 800584a:	f04f 0c0a 	mov.w	ip, #10
 800584e:	4620      	mov	r0, r4
 8005850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005854:	3a30      	subs	r2, #48	; 0x30
 8005856:	2a09      	cmp	r2, #9
 8005858:	d903      	bls.n	8005862 <_vfiprintf_r+0x1ee>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0c5      	beq.n	80057ea <_vfiprintf_r+0x176>
 800585e:	9105      	str	r1, [sp, #20]
 8005860:	e7c3      	b.n	80057ea <_vfiprintf_r+0x176>
 8005862:	fb0c 2101 	mla	r1, ip, r1, r2
 8005866:	4604      	mov	r4, r0
 8005868:	2301      	movs	r3, #1
 800586a:	e7f0      	b.n	800584e <_vfiprintf_r+0x1da>
 800586c:	ab03      	add	r3, sp, #12
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	462a      	mov	r2, r5
 8005872:	4b16      	ldr	r3, [pc, #88]	; (80058cc <_vfiprintf_r+0x258>)
 8005874:	a904      	add	r1, sp, #16
 8005876:	4630      	mov	r0, r6
 8005878:	f3af 8000 	nop.w
 800587c:	4607      	mov	r7, r0
 800587e:	1c78      	adds	r0, r7, #1
 8005880:	d1d6      	bne.n	8005830 <_vfiprintf_r+0x1bc>
 8005882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005884:	07d9      	lsls	r1, r3, #31
 8005886:	d405      	bmi.n	8005894 <_vfiprintf_r+0x220>
 8005888:	89ab      	ldrh	r3, [r5, #12]
 800588a:	059a      	lsls	r2, r3, #22
 800588c:	d402      	bmi.n	8005894 <_vfiprintf_r+0x220>
 800588e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005890:	f7ff fd7f 	bl	8005392 <__retarget_lock_release_recursive>
 8005894:	89ab      	ldrh	r3, [r5, #12]
 8005896:	065b      	lsls	r3, r3, #25
 8005898:	f53f af12 	bmi.w	80056c0 <_vfiprintf_r+0x4c>
 800589c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800589e:	e711      	b.n	80056c4 <_vfiprintf_r+0x50>
 80058a0:	ab03      	add	r3, sp, #12
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <_vfiprintf_r+0x258>)
 80058a8:	a904      	add	r1, sp, #16
 80058aa:	4630      	mov	r0, r6
 80058ac:	f000 f880 	bl	80059b0 <_printf_i>
 80058b0:	e7e4      	b.n	800587c <_vfiprintf_r+0x208>
 80058b2:	bf00      	nop
 80058b4:	080061f0 	.word	0x080061f0
 80058b8:	08006210 	.word	0x08006210
 80058bc:	080061d0 	.word	0x080061d0
 80058c0:	08006230 	.word	0x08006230
 80058c4:	0800623a 	.word	0x0800623a
 80058c8:	00000000 	.word	0x00000000
 80058cc:	0800564f 	.word	0x0800564f
 80058d0:	08006236 	.word	0x08006236

080058d4 <_printf_common>:
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	4616      	mov	r6, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	688a      	ldr	r2, [r1, #8]
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bfb8      	it	lt
 80058e8:	4613      	movlt	r3, r2
 80058ea:	6033      	str	r3, [r6, #0]
 80058ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f0:	4607      	mov	r7, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	b10a      	cbz	r2, 80058fa <_printf_common+0x26>
 80058f6:	3301      	adds	r3, #1
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	0699      	lsls	r1, r3, #26
 80058fe:	bf42      	ittt	mi
 8005900:	6833      	ldrmi	r3, [r6, #0]
 8005902:	3302      	addmi	r3, #2
 8005904:	6033      	strmi	r3, [r6, #0]
 8005906:	6825      	ldr	r5, [r4, #0]
 8005908:	f015 0506 	ands.w	r5, r5, #6
 800590c:	d106      	bne.n	800591c <_printf_common+0x48>
 800590e:	f104 0a19 	add.w	sl, r4, #25
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	6832      	ldr	r2, [r6, #0]
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	42ab      	cmp	r3, r5
 800591a:	dc26      	bgt.n	800596a <_printf_common+0x96>
 800591c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005920:	1e13      	subs	r3, r2, #0
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	bf18      	it	ne
 8005926:	2301      	movne	r3, #1
 8005928:	0692      	lsls	r2, r2, #26
 800592a:	d42b      	bmi.n	8005984 <_printf_common+0xb0>
 800592c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005930:	4649      	mov	r1, r9
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d01e      	beq.n	8005978 <_printf_common+0xa4>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	68e5      	ldr	r5, [r4, #12]
 800593e:	6832      	ldr	r2, [r6, #0]
 8005940:	f003 0306 	and.w	r3, r3, #6
 8005944:	2b04      	cmp	r3, #4
 8005946:	bf08      	it	eq
 8005948:	1aad      	subeq	r5, r5, r2
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	6922      	ldr	r2, [r4, #16]
 800594e:	bf0c      	ite	eq
 8005950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005954:	2500      	movne	r5, #0
 8005956:	4293      	cmp	r3, r2
 8005958:	bfc4      	itt	gt
 800595a:	1a9b      	subgt	r3, r3, r2
 800595c:	18ed      	addgt	r5, r5, r3
 800595e:	2600      	movs	r6, #0
 8005960:	341a      	adds	r4, #26
 8005962:	42b5      	cmp	r5, r6
 8005964:	d11a      	bne.n	800599c <_printf_common+0xc8>
 8005966:	2000      	movs	r0, #0
 8005968:	e008      	b.n	800597c <_printf_common+0xa8>
 800596a:	2301      	movs	r3, #1
 800596c:	4652      	mov	r2, sl
 800596e:	4649      	mov	r1, r9
 8005970:	4638      	mov	r0, r7
 8005972:	47c0      	blx	r8
 8005974:	3001      	adds	r0, #1
 8005976:	d103      	bne.n	8005980 <_printf_common+0xac>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005980:	3501      	adds	r5, #1
 8005982:	e7c6      	b.n	8005912 <_printf_common+0x3e>
 8005984:	18e1      	adds	r1, r4, r3
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	2030      	movs	r0, #48	; 0x30
 800598a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800598e:	4422      	add	r2, r4
 8005990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005998:	3302      	adds	r3, #2
 800599a:	e7c7      	b.n	800592c <_printf_common+0x58>
 800599c:	2301      	movs	r3, #1
 800599e:	4622      	mov	r2, r4
 80059a0:	4649      	mov	r1, r9
 80059a2:	4638      	mov	r0, r7
 80059a4:	47c0      	blx	r8
 80059a6:	3001      	adds	r0, #1
 80059a8:	d0e6      	beq.n	8005978 <_printf_common+0xa4>
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7d9      	b.n	8005962 <_printf_common+0x8e>
	...

080059b0 <_printf_i>:
 80059b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	7e0f      	ldrb	r7, [r1, #24]
 80059b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059b8:	2f78      	cmp	r7, #120	; 0x78
 80059ba:	4691      	mov	r9, r2
 80059bc:	4680      	mov	r8, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	469a      	mov	sl, r3
 80059c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059c6:	d807      	bhi.n	80059d8 <_printf_i+0x28>
 80059c8:	2f62      	cmp	r7, #98	; 0x62
 80059ca:	d80a      	bhi.n	80059e2 <_printf_i+0x32>
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	f000 80d8 	beq.w	8005b82 <_printf_i+0x1d2>
 80059d2:	2f58      	cmp	r7, #88	; 0x58
 80059d4:	f000 80a3 	beq.w	8005b1e <_printf_i+0x16e>
 80059d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059e0:	e03a      	b.n	8005a58 <_printf_i+0xa8>
 80059e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059e6:	2b15      	cmp	r3, #21
 80059e8:	d8f6      	bhi.n	80059d8 <_printf_i+0x28>
 80059ea:	a101      	add	r1, pc, #4	; (adr r1, 80059f0 <_printf_i+0x40>)
 80059ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f0:	08005a49 	.word	0x08005a49
 80059f4:	08005a5d 	.word	0x08005a5d
 80059f8:	080059d9 	.word	0x080059d9
 80059fc:	080059d9 	.word	0x080059d9
 8005a00:	080059d9 	.word	0x080059d9
 8005a04:	080059d9 	.word	0x080059d9
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	080059d9 	.word	0x080059d9
 8005a10:	080059d9 	.word	0x080059d9
 8005a14:	080059d9 	.word	0x080059d9
 8005a18:	080059d9 	.word	0x080059d9
 8005a1c:	08005b69 	.word	0x08005b69
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005b4b 	.word	0x08005b4b
 8005a28:	080059d9 	.word	0x080059d9
 8005a2c:	080059d9 	.word	0x080059d9
 8005a30:	08005b8b 	.word	0x08005b8b
 8005a34:	080059d9 	.word	0x080059d9
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	080059d9 	.word	0x080059d9
 8005a40:	080059d9 	.word	0x080059d9
 8005a44:	08005b53 	.word	0x08005b53
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0a3      	b.n	8005ba4 <_printf_i+0x1f4>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	6829      	ldr	r1, [r5, #0]
 8005a60:	0606      	lsls	r6, r0, #24
 8005a62:	f101 0304 	add.w	r3, r1, #4
 8005a66:	d50a      	bpl.n	8005a7e <_printf_i+0xce>
 8005a68:	680e      	ldr	r6, [r1, #0]
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	da03      	bge.n	8005a78 <_printf_i+0xc8>
 8005a70:	232d      	movs	r3, #45	; 0x2d
 8005a72:	4276      	negs	r6, r6
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	485e      	ldr	r0, [pc, #376]	; (8005bf4 <_printf_i+0x244>)
 8005a7a:	230a      	movs	r3, #10
 8005a7c:	e019      	b.n	8005ab2 <_printf_i+0x102>
 8005a7e:	680e      	ldr	r6, [r1, #0]
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a86:	bf18      	it	ne
 8005a88:	b236      	sxthne	r6, r6
 8005a8a:	e7ef      	b.n	8005a6c <_printf_i+0xbc>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	6820      	ldr	r0, [r4, #0]
 8005a90:	1d19      	adds	r1, r3, #4
 8005a92:	6029      	str	r1, [r5, #0]
 8005a94:	0601      	lsls	r1, r0, #24
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0xec>
 8005a98:	681e      	ldr	r6, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0xf2>
 8005a9c:	0646      	lsls	r6, r0, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0xe8>
 8005aa0:	881e      	ldrh	r6, [r3, #0]
 8005aa2:	4854      	ldr	r0, [pc, #336]	; (8005bf4 <_printf_i+0x244>)
 8005aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2308      	moveq	r3, #8
 8005aaa:	230a      	movne	r3, #10
 8005aac:	2100      	movs	r1, #0
 8005aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ab2:	6865      	ldr	r5, [r4, #4]
 8005ab4:	60a5      	str	r5, [r4, #8]
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	bfa2      	ittt	ge
 8005aba:	6821      	ldrge	r1, [r4, #0]
 8005abc:	f021 0104 	bicge.w	r1, r1, #4
 8005ac0:	6021      	strge	r1, [r4, #0]
 8005ac2:	b90e      	cbnz	r6, 8005ac8 <_printf_i+0x118>
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	d04d      	beq.n	8005b64 <_printf_i+0x1b4>
 8005ac8:	4615      	mov	r5, r2
 8005aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ace:	fb03 6711 	mls	r7, r3, r1, r6
 8005ad2:	5dc7      	ldrb	r7, [r0, r7]
 8005ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ad8:	4637      	mov	r7, r6
 8005ada:	42bb      	cmp	r3, r7
 8005adc:	460e      	mov	r6, r1
 8005ade:	d9f4      	bls.n	8005aca <_printf_i+0x11a>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d10b      	bne.n	8005afc <_printf_i+0x14c>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07de      	lsls	r6, r3, #31
 8005ae8:	d508      	bpl.n	8005afc <_printf_i+0x14c>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6861      	ldr	r1, [r4, #4]
 8005aee:	4299      	cmp	r1, r3
 8005af0:	bfde      	ittt	le
 8005af2:	2330      	movle	r3, #48	; 0x30
 8005af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005afc:	1b52      	subs	r2, r2, r5
 8005afe:	6122      	str	r2, [r4, #16]
 8005b00:	f8cd a000 	str.w	sl, [sp]
 8005b04:	464b      	mov	r3, r9
 8005b06:	aa03      	add	r2, sp, #12
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fee2 	bl	80058d4 <_printf_common>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d14c      	bne.n	8005bae <_printf_i+0x1fe>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	b004      	add	sp, #16
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	4835      	ldr	r0, [pc, #212]	; (8005bf4 <_printf_i+0x244>)
 8005b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b24:	6829      	ldr	r1, [r5, #0]
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b2c:	6029      	str	r1, [r5, #0]
 8005b2e:	061d      	lsls	r5, r3, #24
 8005b30:	d514      	bpl.n	8005b5c <_printf_i+0x1ac>
 8005b32:	07df      	lsls	r7, r3, #31
 8005b34:	bf44      	itt	mi
 8005b36:	f043 0320 	orrmi.w	r3, r3, #32
 8005b3a:	6023      	strmi	r3, [r4, #0]
 8005b3c:	b91e      	cbnz	r6, 8005b46 <_printf_i+0x196>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f023 0320 	bic.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2310      	movs	r3, #16
 8005b48:	e7b0      	b.n	8005aac <_printf_i+0xfc>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f043 0320 	orr.w	r3, r3, #32
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	2378      	movs	r3, #120	; 0x78
 8005b54:	4828      	ldr	r0, [pc, #160]	; (8005bf8 <_printf_i+0x248>)
 8005b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b5a:	e7e3      	b.n	8005b24 <_printf_i+0x174>
 8005b5c:	0659      	lsls	r1, r3, #25
 8005b5e:	bf48      	it	mi
 8005b60:	b2b6      	uxthmi	r6, r6
 8005b62:	e7e6      	b.n	8005b32 <_printf_i+0x182>
 8005b64:	4615      	mov	r5, r2
 8005b66:	e7bb      	b.n	8005ae0 <_printf_i+0x130>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6826      	ldr	r6, [r4, #0]
 8005b6c:	6961      	ldr	r1, [r4, #20]
 8005b6e:	1d18      	adds	r0, r3, #4
 8005b70:	6028      	str	r0, [r5, #0]
 8005b72:	0635      	lsls	r5, r6, #24
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0x1cc>
 8005b78:	6019      	str	r1, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0x1d2>
 8005b7c:	0670      	lsls	r0, r6, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0x1c8>
 8005b80:	8019      	strh	r1, [r3, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	4615      	mov	r5, r2
 8005b88:	e7ba      	b.n	8005b00 <_printf_i+0x150>
 8005b8a:	682b      	ldr	r3, [r5, #0]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	602a      	str	r2, [r5, #0]
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	2100      	movs	r1, #0
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7fa fb22 	bl	80001e0 <memchr>
 8005b9c:	b108      	cbz	r0, 8005ba2 <_printf_i+0x1f2>
 8005b9e:	1b40      	subs	r0, r0, r5
 8005ba0:	6060      	str	r0, [r4, #4]
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bac:	e7a8      	b.n	8005b00 <_printf_i+0x150>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	47d0      	blx	sl
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d0ab      	beq.n	8005b14 <_printf_i+0x164>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	079b      	lsls	r3, r3, #30
 8005bc0:	d413      	bmi.n	8005bea <_printf_i+0x23a>
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	bfb8      	it	lt
 8005bca:	4618      	movlt	r0, r3
 8005bcc:	e7a4      	b.n	8005b18 <_printf_i+0x168>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	47d0      	blx	sl
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d09b      	beq.n	8005b14 <_printf_i+0x164>
 8005bdc:	3501      	adds	r5, #1
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	9903      	ldr	r1, [sp, #12]
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dcf2      	bgt.n	8005bce <_printf_i+0x21e>
 8005be8:	e7eb      	b.n	8005bc2 <_printf_i+0x212>
 8005bea:	2500      	movs	r5, #0
 8005bec:	f104 0619 	add.w	r6, r4, #25
 8005bf0:	e7f5      	b.n	8005bde <_printf_i+0x22e>
 8005bf2:	bf00      	nop
 8005bf4:	08006241 	.word	0x08006241
 8005bf8:	08006252 	.word	0x08006252

08005bfc <_sbrk_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d06      	ldr	r5, [pc, #24]	; (8005c18 <_sbrk_r+0x1c>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	f7fb fe9e 	bl	8001948 <_sbrk>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_sbrk_r+0x1a>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_sbrk_r+0x1a>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20000400 	.word	0x20000400

08005c1c <__sread>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	f000 f8a0 	bl	8005d68 <_read_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	bfab      	itete	ge
 8005c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c30:	181b      	addge	r3, r3, r0
 8005c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c36:	bfac      	ite	ge
 8005c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c3a:	81a3      	strhlt	r3, [r4, #12]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__swrite>:
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	461f      	mov	r7, r3
 8005c44:	898b      	ldrh	r3, [r1, #12]
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	d505      	bpl.n	8005c5c <__swrite+0x1e>
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	2302      	movs	r3, #2
 8005c56:	2200      	movs	r2, #0
 8005c58:	f000 f868 	bl	8005d2c <_lseek_r>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	4632      	mov	r2, r6
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c72:	f000 b817 	b.w	8005ca4 <_write_r>

08005c76 <__sseek>:
 8005c76:	b510      	push	{r4, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7e:	f000 f855 	bl	8005d2c <_lseek_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	bf15      	itete	ne
 8005c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c92:	81a3      	strheq	r3, [r4, #12]
 8005c94:	bf18      	it	ne
 8005c96:	81a3      	strhne	r3, [r4, #12]
 8005c98:	bd10      	pop	{r4, pc}

08005c9a <__sclose>:
 8005c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9e:	f000 b813 	b.w	8005cc8 <_close_r>
	...

08005ca4 <_write_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	; (8005cc4 <_write_r+0x20>)
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fb f92b 	bl	8000f0e <_write>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_write_r+0x1e>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_write_r+0x1e>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	20000400 	.word	0x20000400

08005cc8 <_close_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d06      	ldr	r5, [pc, #24]	; (8005ce4 <_close_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fb fe03 	bl	80018de <_close>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_close_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_close_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	20000400 	.word	0x20000400

08005ce8 <_fstat_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_fstat_r+0x20>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	602b      	str	r3, [r5, #0]
 8005cf6:	f7fb fdfe 	bl	80018f6 <_fstat>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d102      	bne.n	8005d04 <_fstat_r+0x1c>
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	b103      	cbz	r3, 8005d04 <_fstat_r+0x1c>
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	20000400 	.word	0x20000400

08005d0c <_isatty_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d06      	ldr	r5, [pc, #24]	; (8005d28 <_isatty_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fb fdfd 	bl	8001916 <_isatty>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_isatty_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_isatty_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20000400 	.word	0x20000400

08005d2c <_lseek_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_lseek_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fb fdf6 	bl	800192c <_lseek>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_lseek_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_lseek_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20000400 	.word	0x20000400

08005d50 <__malloc_lock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__malloc_lock+0x8>)
 8005d52:	f7ff bb1d 	b.w	8005390 <__retarget_lock_acquire_recursive>
 8005d56:	bf00      	nop
 8005d58:	200003f4 	.word	0x200003f4

08005d5c <__malloc_unlock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	; (8005d64 <__malloc_unlock+0x8>)
 8005d5e:	f7ff bb18 	b.w	8005392 <__retarget_lock_release_recursive>
 8005d62:	bf00      	nop
 8005d64:	200003f4 	.word	0x200003f4

08005d68 <_read_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d07      	ldr	r5, [pc, #28]	; (8005d88 <_read_r+0x20>)
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fb fd94 	bl	80018a4 <_read>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_read_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_read_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000400 	.word	0x20000400

08005d8c <_init>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr

08005d98 <_fini>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	bf00      	nop
 8005d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9e:	bc08      	pop	{r3}
 8005da0:	469e      	mov	lr, r3
 8005da2:	4770      	bx	lr
