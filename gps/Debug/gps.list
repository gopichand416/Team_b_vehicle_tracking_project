
gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080081f8  080081f8  000181f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800876c  0800876c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008774  08008774  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800877c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200001d8  08008950  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08008950  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd1c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d5  00000000  00000000  0002cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000824  00000000  00000000  0002fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269fd  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d28d  00000000  00000000  00056d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e98c5  00000000  00000000  00063f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fb8  00000000  00000000  0014d85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00151814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081e0 	.word	0x080081e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080081e0 	.word	0x080081e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f6c:	e000      	b.n	8000f70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f9      	beq.n	8000f6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_write>:
#include<stdbool.h>
#include <stdlib.h>


int _write(int file,char *ptr,int len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
	for(int i = 0  ; i < len  ; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e009      	b.n	8000fb8 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	60ba      	str	r2, [r7, #8]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffc9 	bl	8000f44 <ITM_SendChar>
	for(int i = 0  ; i < len  ; i++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf1      	blt.n	8000fa4 <_write+0x12>
	return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fd46 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f824 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f8d4 	bl	8001184 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fdc:	f000 f8a2 	bl	8001124 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000fe0:	f000 f870 	bl	80010c4 <MX_UART4_Init>
	  	}
	  //	memset(Rx_data,'\0',sizeof(Rx_data));
	  	 HAL_Delay(1000);
    /* USER CODE BEGIN 3 */
#endif
	  	printf("in loop\n");
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <main+0x44>)
 8000fe6:	f004 fac7 	bl	8005578 <puts>
	  		     // HAL_UART_Receive(&huart2,gps.Data,sizeof(gps.Data),1000);
	  		     // HAL_UART_Transmit(&huart2,gps.Data,sizeof(gps.Data),1000);
	  		      if(HAL_UART_Receive(&huart4,gps.Data,sizeof(gps.Data),1000))
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <main+0x48>)
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <main+0x4c>)
 8000ff6:	f002 fc57 	bl	80038a8 <HAL_UART_Receive>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f1      	beq.n	8000fe4 <main+0x18>
	  		      {
	  		    	  printf("%s\n", gps.Data);
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <main+0x48>)
 8001002:	f004 fab9 	bl	8005578 <puts>
	  		    	  gpsData(&gps);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <main+0x50>)
 8001008:	f000 f8d4 	bl	80011b4 <gpsData>
	  	printf("in loop\n");
 800100c:	e7ea      	b.n	8000fe4 <main+0x18>
 800100e:	bf00      	nop
 8001010:	080081f8 	.word	0x080081f8
 8001014:	20000390 	.word	0x20000390
 8001018:	200001f4 	.word	0x200001f4
 800101c:	20000368 	.word	0x20000368

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b096      	sub	sp, #88	; 0x58
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2244      	movs	r2, #68	; 0x44
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f004 fbd0 	bl	80057d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001042:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001046:	f001 f8cf 	bl	80021e8 <HAL_PWREx_ControlVoltageScaling>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001050:	f000 fb1a 	bl	8001688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001066:	2302      	movs	r3, #2
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800106e:	230a      	movs	r3, #10
 8001070:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001072:	2307      	movs	r3, #7
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f906 	bl	8002294 <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800108e:	f000 fafb 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2303      	movs	r3, #3
 8001098:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	2104      	movs	r1, #4
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fcce 	bl	8002a4c <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010b6:	f000 fae7 	bl	8001688 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3758      	adds	r7, #88	; 0x58
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_UART4_Init+0x58>)
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <MX_UART4_Init+0x5c>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_UART4_Init+0x58>)
 80010d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_UART4_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_UART4_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_UART4_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_UART4_Init+0x58>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_UART4_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_UART4_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_UART4_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_UART4_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_UART4_Init+0x58>)
 8001108:	f002 fb80 	bl	800380c <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001112:	f000 fab9 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	40004c00 	.word	0x40004c00

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USART2_UART_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_USART2_UART_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001130:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_USART2_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART2_UART_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001168:	f002 fb50 	bl	800380c <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 fa89 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000027c 	.word	0x2000027c
 8001180:	40004400 	.word	0x40004400

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_GPIO_Init+0x2c>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <MX_GPIO_Init+0x2c>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_GPIO_Init+0x2c>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <gpsData>:
        return true;
}


void gpsData(gpsdata* data)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	6078      	str	r0, [r7, #4]
	char *P;
	int n;
	printf("in func\n");
 80011bc:	4836      	ldr	r0, [pc, #216]	; (8001298 <gpsData+0xe4>)
 80011be:	f004 f9db 	bl	8005578 <puts>
			//HAL_UART_Receive(&GpsData->UartPort,(uint8_t*)GpsData->Data,700,HAL_MAX_DELAY);
	P=strstr(data->Data,"GNGGA");
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3328      	adds	r3, #40	; 0x28
 80011c6:	4935      	ldr	r1, [pc, #212]	; (800129c <gpsData+0xe8>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fb0b 	bl	80057e4 <strstr>
 80011ce:	60b8      	str	r0, [r7, #8]
	//printf("string found\n");
	if(*P=='G')
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b47      	cmp	r3, #71	; 0x47
 80011d6:	d157      	bne.n	8001288 <gpsData+0xd4>
	{
	   n=0;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
	   while(*(P+n)!='*')
 80011dc:	e00d      	b.n	80011fa <gpsData+0x46>
	   {
		   data->location[n]=*(P+n);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	4413      	add	r3, r2
 80011e4:	7819      	ldrb	r1, [r3, #0]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	f203 337a 	addw	r3, r3, #890	; 0x37a
 80011f0:	460a      	mov	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
		   n++;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
	   while(*(P+n)!='*')
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b2a      	cmp	r3, #42	; 0x2a
 8001204:	d1eb      	bne.n	80011de <gpsData+0x2a>
	   }
	    printf(" string is %s", data->location);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f203 337a 	addw	r3, r3, #890	; 0x37a
 800120c:	4619      	mov	r1, r3
 800120e:	4824      	ldr	r0, [pc, #144]	; (80012a0 <gpsData+0xec>)
 8001210:	f004 f94c 	bl	80054ac <iprintf>
		sprintf(data->buffer,"%s",data->location);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f203 3016 	addw	r0, r3, #790	; 0x316
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001220:	461a      	mov	r2, r3
 8001222:	4920      	ldr	r1, [pc, #128]	; (80012a4 <gpsData+0xf0>)
 8001224:	f004 f9b0 	bl	8005588 <siprintf>
		sscanf(data->buffer,"GNGGA,%lf,%f,%c,%f,%c,%d,",&data->time,&data->latitude,&data->N_OR_S,&data->longitude,&data->E_OR_W,&data->fix);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f203 3416 	addw	r4, r3, #790	; 0x316
 800122e:	687d      	ldr	r5, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f103 0608 	add.w	r6, r3, #8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3320      	adds	r3, #32
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	320c      	adds	r2, #12
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	3121      	adds	r1, #33	; 0x21
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	3024      	adds	r0, #36	; 0x24
 8001246:	9003      	str	r0, [sp, #12]
 8001248:	9102      	str	r1, [sp, #8]
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4633      	mov	r3, r6
 8001250:	462a      	mov	r2, r5
 8001252:	4915      	ldr	r1, [pc, #84]	; (80012a8 <gpsData+0xf4>)
 8001254:	4620      	mov	r0, r4
 8001256:	f004 f9b7 	bl	80055c8 <siscanf>
		if(data->fix==1||data->fix==2||data->fix==6)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	2b01      	cmp	r3, #1
 8001260:	d007      	beq.n	8001272 <gpsData+0xbe>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b02      	cmp	r3, #2
 8001268:	d003      	beq.n	8001272 <gpsData+0xbe>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2b06      	cmp	r3, #6
 8001270:	d106      	bne.n	8001280 <gpsData+0xcc>
		{
			printf("valid fix\n");
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <gpsData+0xf8>)
 8001274:	f004 f980 	bl	8005578 <puts>
			gpslocation_extraction(data);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f81d 	bl	80012b8 <gpslocation_extraction>
	 }
	else
	{
		printf("no data\n");
	}
}
 800127e:	e006      	b.n	800128e <gpsData+0xda>
			printf("invalid signal no fix\n");
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <gpsData+0xfc>)
 8001282:	f004 f979 	bl	8005578 <puts>
}
 8001286:	e002      	b.n	800128e <gpsData+0xda>
		printf("no data\n");
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <gpsData+0x100>)
 800128a:	f004 f975 	bl	8005578 <puts>
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	08008264 	.word	0x08008264
 800129c:	08008200 	.word	0x08008200
 80012a0:	0800826c 	.word	0x0800826c
 80012a4:	0800827c 	.word	0x0800827c
 80012a8:	08008280 	.word	0x08008280
 80012ac:	0800829c 	.word	0x0800829c
 80012b0:	080082a8 	.word	0x080082a8
 80012b4:	080082c0 	.word	0x080082c0

080012b8 <gpslocation_extraction>:

static void gpslocation_extraction(gpsdata* data)
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b094      	sub	sp, #80	; 0x50
 80012bc:	af04      	add	r7, sp, #16
 80012be:	6078      	str	r0, [r7, #4]
	double Deg_Val=0.0,Min_Val=0.0,Sec_Val=0.0,lon=0.0,lat=0.0;
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int hr,min,sec;

	lon=data->longitude;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f921 	bl	8000548 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	lat=data->latitude;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f918 	bl	8000548 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if((data->E_OR_W=='E' && data->N_OR_S=='S')||(data->E_OR_W=='W' && data->N_OR_S=='N'))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001326:	2b45      	cmp	r3, #69	; 0x45
 8001328:	d104      	bne.n	8001334 <gpslocation_extraction+0x7c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001330:	2b53      	cmp	r3, #83	; 0x53
 8001332:	d00b      	beq.n	800134c <gpslocation_extraction+0x94>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800133a:	2b57      	cmp	r3, #87	; 0x57
 800133c:	f040 8115 	bne.w	800156a <gpslocation_extraction+0x2b2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001346:	2b4e      	cmp	r3, #78	; 0x4e
 8001348:	f040 810f 	bne.w	800156a <gpslocation_extraction+0x2b2>
	{
		Deg_Val=(int)(lon/100);
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4bc3      	ldr	r3, [pc, #780]	; (8001660 <gpslocation_extraction+0x3a8>)
 8001352:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fbf9 	bl	8000b58 <__aeabi_d2iz>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8db 	bl	8000524 <__aeabi_i2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lon-(Deg_Val*100));
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4bb9      	ldr	r3, [pc, #740]	; (8001660 <gpslocation_extraction+0x3a8>)
 800137c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001380:	f7ff f93a 	bl	80005f8 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800138c:	f7fe ff7c 	bl	8000288 <__aeabi_dsub>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fbde 	bl	8000b58 <__aeabi_d2iz>
 800139c:	4603      	mov	r3, r0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8c0 	bl	8000524 <__aeabi_i2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lon-(Deg_Val*100))-Min_Val)*100;
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4bab      	ldr	r3, [pc, #684]	; (8001660 <gpslocation_extraction+0x3a8>)
 80013b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013b6:	f7ff f91f 	bl	80005f8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013c2:	f7fe ff61 	bl	8000288 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013d2:	f7fe ff59 	bl	8000288 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b9f      	ldr	r3, [pc, #636]	; (8001660 <gpslocation_extraction+0x3a8>)
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->longitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree))*-1;
 80013f0:	a397      	add	r3, pc, #604	; (adr r3, 8001650 <gpslocation_extraction+0x398>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013fa:	f7ff f8fd 	bl	80005f8 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800140a:	f7fe ff3f 	bl	800028c <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4614      	mov	r4, r2
 8001414:	461d      	mov	r5, r3
 8001416:	a390      	add	r3, pc, #576	; (adr r3, 8001658 <gpslocation_extraction+0x3a0>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001420:	f7ff f8ea 	bl	80005f8 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe ff2e 	bl	800028c <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbb6 	bl	8000ba8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef1 7a67 	vneg.f32	s15, s15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edc3 7a03 	vstr	s15, [r3, #12]
		printf("longitude : %f\n",data->longitude);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f879 	bl	8000548 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4882      	ldr	r0, [pc, #520]	; (8001664 <gpslocation_extraction+0x3ac>)
 800145c:	f004 f826 	bl	80054ac <iprintf>

		Deg_Val=(int)((lat/100));
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <gpslocation_extraction+0x3a8>)
 8001466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800146a:	f7ff f9ef 	bl	800084c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb6f 	bl	8000b58 <__aeabi_d2iz>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f851 	bl	8000524 <__aeabi_i2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lat-(Deg_Val*100));
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b74      	ldr	r3, [pc, #464]	; (8001660 <gpslocation_extraction+0x3a8>)
 8001490:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001494:	f7ff f8b0 	bl	80005f8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014a0:	f7fe fef2 	bl	8000288 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb54 	bl	8000b58 <__aeabi_d2iz>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f836 	bl	8000524 <__aeabi_i2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lat-(Deg_Val*100))-Min_Val)*10;
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b66      	ldr	r3, [pc, #408]	; (8001660 <gpslocation_extraction+0x3a8>)
 80014c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014ca:	f7ff f895 	bl	80005f8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d6:	f7fe fed7 	bl	8000288 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014e6:	f7fe fecf 	bl	8000288 <__aeabi_dsub>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <gpslocation_extraction+0x3b0>)
 80014f8:	f7ff f87e 	bl	80005f8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->latitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree));
 8001504:	a352      	add	r3, pc, #328	; (adr r3, 8001650 <gpslocation_extraction+0x398>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800150e:	f7ff f873 	bl	80005f8 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800151e:	f7fe feb5 	bl	800028c <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4614      	mov	r4, r2
 8001528:	461d      	mov	r5, r3
 800152a:	a34b      	add	r3, pc, #300	; (adr r3, 8001658 <gpslocation_extraction+0x3a0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001534:	f7ff f860 	bl	80005f8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7fe fea4 	bl	800028c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fb2c 	bl	8000ba8 <__aeabi_d2f>
 8001550:	4602      	mov	r2, r0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
		printf("latitude : %f\n",data->latitude);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fff4 	bl	8000548 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4841      	ldr	r0, [pc, #260]	; (800166c <gpslocation_extraction+0x3b4>)
 8001566:	f003 ffa1 	bl	80054ac <iprintf>
	}
	    hr=(int)(data->time)/10000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff faf0 	bl	8000b58 <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <gpslocation_extraction+0x3b8>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1312      	asrs	r2, r2, #12
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
	    min=(int)(data->time-(hr*10000))/100;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f242 7210 	movw	r2, #10000	; 0x2710
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffc3 	bl	8000524 <__aeabi_i2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4620      	mov	r0, r4
 80015a4:	4629      	mov	r1, r5
 80015a6:	f7fe fe6f 	bl	8000288 <__aeabi_dsub>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fad1 	bl	8000b58 <__aeabi_d2iz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a2e      	ldr	r2, [pc, #184]	; (8001674 <gpslocation_extraction+0x3bc>)
 80015ba:	fb82 1203 	smull	r1, r2, r2, r3
 80015be:	1152      	asrs	r2, r2, #5
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	613b      	str	r3, [r7, #16]
	    sec=(int)(data->time-((hr*10000)+(min*100)));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80015d2:	fb03 f202 	mul.w	r2, r3, r2
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2164      	movs	r1, #100	; 0x64
 80015da:	fb01 f303 	mul.w	r3, r1, r3
 80015de:	4413      	add	r3, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe fe4b 	bl	8000288 <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faad 	bl	8000b58 <__aeabi_d2iz>
 80015fe:	4603      	mov	r3, r0
 8001600:	60fb      	str	r3, [r7, #12]
	    //sprintf(time_buf, "%d:%d:%d",hr,min,sec);
	    printf("time: %d:%d%d\n",hr,min,sec);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	481b      	ldr	r0, [pc, #108]	; (8001678 <gpslocation_extraction+0x3c0>)
 800160a:	f003 ff4f 	bl	80054ac <iprintf>
	    //printf("time: %lf\n",data->time);
		sprintf(json_str,"{\"latitude\":%f,\n \"longitude\":%f,\n \"time\":%lf\n }",data->latitude, data->longitude,data->time);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001630:	e9cd 0100 	strd	r0, r1, [sp]
 8001634:	4622      	mov	r2, r4
 8001636:	462b      	mov	r3, r5
 8001638:	4910      	ldr	r1, [pc, #64]	; (800167c <gpslocation_extraction+0x3c4>)
 800163a:	4811      	ldr	r0, [pc, #68]	; (8001680 <gpslocation_extraction+0x3c8>)
 800163c:	f003 ffa4 	bl	8005588 <siprintf>
		printf("json format is %s\n",json_str);
 8001640:	490f      	ldr	r1, [pc, #60]	; (8001680 <gpslocation_extraction+0x3c8>)
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <gpslocation_extraction+0x3cc>)
 8001644:	f003 ff32 	bl	80054ac <iprintf>

}
 8001648:	bf00      	nop
 800164a:	3740      	adds	r7, #64	; 0x40
 800164c:	46bd      	mov	sp, r7
 800164e:	bdb0      	pop	{r4, r5, r7, pc}
 8001650:	111fba11 	.word	0x111fba11
 8001654:	3f911111 	.word	0x3f911111
 8001658:	78d949ab 	.word	0x78d949ab
 800165c:	3f323456 	.word	0x3f323456
 8001660:	40590000 	.word	0x40590000
 8001664:	080082c8 	.word	0x080082c8
 8001668:	40240000 	.word	0x40240000
 800166c:	080082d8 	.word	0x080082d8
 8001670:	68db8bad 	.word	0x68db8bad
 8001674:	51eb851f 	.word	0x51eb851f
 8001678:	080082e8 	.word	0x080082e8
 800167c:	080082f8 	.word	0x080082f8
 8001680:	20000304 	.word	0x20000304
 8001684:	08008328 	.word	0x08008328

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	; 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0ae      	sub	sp, #184	; 0xb8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2288      	movs	r2, #136	; 0x88
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f004 f869 	bl	80057d4 <memset>
  if(huart->Instance==UART4)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a46      	ldr	r2, [pc, #280]	; (8001820 <HAL_UART_MspInit+0x144>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d13c      	bne.n	8001786 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800170c:	2308      	movs	r3, #8
 800170e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fbbb 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001724:	f7ff ffb0 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001728:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_UART_MspInit+0x148>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <HAL_UART_MspInit+0x148>)
 800172e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_UART_MspInit+0x148>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_UART_MspInit+0x148>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a37      	ldr	r2, [pc, #220]	; (8001824 <HAL_UART_MspInit+0x148>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_UART_MspInit+0x148>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001770:	2308      	movs	r3, #8
 8001772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fb7a 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001784:	e048      	b.n	8001818 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_UART_MspInit+0x14c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d143      	bne.n	8001818 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001794:	2300      	movs	r3, #0
 8001796:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fb79 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80017a8:	f7ff ff6e 	bl	8001688 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_UART_MspInit+0x148>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x148>)
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_UART_MspInit+0x148>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_UART_MspInit+0x148>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <HAL_UART_MspInit+0x148>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x148>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017dc:	230c      	movs	r3, #12
 80017de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f4:	2307      	movs	r3, #7
 80017f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017fe:	4619      	mov	r1, r3
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f000 fb38 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2026      	movs	r0, #38	; 0x26
 800180e:	f000 fa7e 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001812:	2026      	movs	r0, #38	; 0x26
 8001814:	f000 fa97 	bl	8001d46 <HAL_NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	37b8      	adds	r7, #184	; 0xb8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004c00 	.word	0x40004c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40004400 	.word	0x40004400

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f94e 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USART2_IRQHandler+0x10>)
 8001886:	f002 f8d9 	bl	8003a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000027c 	.word	0x2000027c

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ae:	f003 fff9 	bl	80058a4 <__errno>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2216      	movs	r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
  return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_exit>:

void _exit (int status)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe7 	bl	80018a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d6:	e7fe      	b.n	80018d6 <_exit+0x12>

080018d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
  }

  return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193a:	605a      	str	r2, [r3, #4]
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f003 ff7a 	bl	80058a4 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20018000 	.word	0x20018000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	20000748 	.word	0x20000748
 80019e4:	200008a0 	.word	0x200008a0

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f003 ff39 	bl	80058b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff fac5 	bl	8000fcc <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a50:	0800877c 	.word	0x0800877c
  ldr r2, =_sbss
 8001a54:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a58:	2000089c 	.word	0x2000089c

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_Init+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_Init+0x3c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f93e 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 f80f 	bl	8001aa0 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	e001      	b.n	8001a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8e:	f7ff fe01 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_InitTick+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_InitTick+0x70>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f949 	bl	8001d62 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d809      	bhi.n	8001af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f913 	bl	8001d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_InitTick+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e004      	b.n	8001b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	2000074c 	.word	0x2000074c

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	2000074c 	.word	0x2000074c

08001b58 <__NVIC_SetPriorityGrouping>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff29 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff3e 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa2 	bl	8001cb4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d008      	beq.n	8001da4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e022      	b.n	8001dea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 020e 	bic.w	r2, r2, #14
 8001db2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f003 021c 	and.w	r2, r3, #28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d005      	beq.n	8001e1a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e029      	b.n	8001e6e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 020e 	bic.w	r2, r2, #14
 8001e28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 021c 	and.w	r2, r3, #28
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
    }
  }
  return status;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e17f      	b.n	8002188 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8171 	beq.w	8002182 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d118      	bne.n	8001f58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	6939      	ldr	r1, [r7, #16]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80ac 	beq.w	8002182 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_GPIO_Init+0x330>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <HAL_GPIO_Init+0x330>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6613      	str	r3, [r2, #96]	; 0x60
 8002036:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HAL_GPIO_Init+0x330>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002042:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HAL_GPIO_Init+0x334>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x242>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <HAL_GPIO_Init+0x338>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x23e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_GPIO_Init+0x33c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x23a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_GPIO_Init+0x340>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x236>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x344>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x232>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_GPIO_Init+0x348>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x22e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <HAL_GPIO_Init+0x34c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x22a>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x244>
 80020ba:	2300      	movs	r3, #0
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020cc:	4937      	ldr	r1, [pc, #220]	; (80021ac <HAL_GPIO_Init+0x334>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x350>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fe:	4a32      	ldr	r2, [pc, #200]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f47f ae78 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	48001800 	.word	0x48001800
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f6:	d130      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002204:	d038      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2232      	movs	r2, #50	; 0x32
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	e002      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b01      	subs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d102      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f2      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002254:	d110      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e00f      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d007      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000
 800228c:	20000000 	.word	0x20000000
 8002290:	431bde83 	.word	0x431bde83

08002294 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e3ca      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a6:	4b97      	ldr	r3, [pc, #604]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b0:	4b94      	ldr	r3, [pc, #592]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80e4 	beq.w	8002490 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <HAL_RCC_OscConfig+0x4a>
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	f040 808b 	bne.w	80023ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 8087 	bne.w	80023ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e3a2      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_RCC_OscConfig+0x7c>
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230e:	e005      	b.n	800231c <HAL_RCC_OscConfig+0x88>
 8002310:	4b7c      	ldr	r3, [pc, #496]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	4293      	cmp	r3, r2
 800231e:	d223      	bcs.n	8002368 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd55 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e383      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002334:	4b73      	ldr	r3, [pc, #460]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a72      	ldr	r2, [pc, #456]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	496d      	ldr	r1, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002352:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	4968      	ldr	r1, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
 8002366:	e025      	b.n	80023b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4960      	ldr	r1, [pc, #384]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002386:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	495b      	ldr	r1, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fd15 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e343      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b4:	f000 fc4a 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b52      	ldr	r3, [pc, #328]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	4950      	ldr	r1, [pc, #320]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_RCC_OscConfig+0x278>)
 80023d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d4:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb61 	bl	8001aa0 <HAL_InitTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d052      	beq.n	800248e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	e327      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d032      	beq.n	800245a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002400:	f7ff fb9e 	bl	8001b40 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002408:	f7ff fb9a 	bl	8001b40 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e310      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a36      	ldr	r2, [pc, #216]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4931      	ldr	r1, [pc, #196]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	492c      	ldr	r1, [pc, #176]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e01a      	b.n	8002490 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002466:	f7ff fb6b 	bl	8001b40 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246e:	f7ff fb67 	bl	8001b40 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e2dd      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x1da>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d074      	beq.n	8002586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x21a>
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d10e      	bne.n	80024c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d064      	beq.n	8002584 <HAL_RCC_OscConfig+0x2f0>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d160      	bne.n	8002584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e2ba      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x24a>
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e026      	b.n	800252c <HAL_RCC_OscConfig+0x298>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e6:	d115      	bne.n	8002514 <HAL_RCC_OscConfig+0x280>
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0x298>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	08008394 	.word	0x08008394
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004
 8002514:	4ba0      	ldr	r3, [pc, #640]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a9f      	ldr	r2, [pc, #636]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b9d      	ldr	r3, [pc, #628]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a9c      	ldr	r2, [pc, #624]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff fb04 	bl	8001b40 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff fb00 	bl	8001b40 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e276      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x2a8>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff faf0 	bl	8001b40 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff faec 	bl	8001b40 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e262      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x2d0>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d060      	beq.n	8002654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x310>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d119      	bne.n	80025d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d116      	bne.n	80025d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	4b7c      	ldr	r3, [pc, #496]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x328>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e23f      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	4973      	ldr	r1, [pc, #460]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	e040      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d023      	beq.n	8002622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff faab 	bl	8001b40 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7ff faa7 	bl	8001b40 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e21d      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	495f      	ldr	r1, [pc, #380]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e018      	b.n	8002654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7ff fa87 	bl	8001b40 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7ff fa83 	bl	8001b40 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1f9      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d03c      	beq.n	80026da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002668:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff fa62 	bl	8001b40 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fa5e 	bl	8001b40 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1d4      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCC_OscConfig+0x3ec>
 80026a0:	e01b      	b.n	80026da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a8:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff fa45 	bl	8001b40 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff fa41 	bl	8001b40 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1b7      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ef      	bne.n	80026ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80a6 	beq.w	8002834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	; 0x58
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272c:	f7ff fa08 	bl	8001b40 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7ff fa04 	bl	8001b40 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e17a      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x508>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x4d8>
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276a:	e029      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d115      	bne.n	80027a0 <HAL_RCC_OscConfig+0x50c>
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a03      	ldr	r2, [pc, #12]	; (8002798 <HAL_RCC_OscConfig+0x504>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	4b9c      	ldr	r3, [pc, #624]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	4a9b      	ldr	r2, [pc, #620]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a97      	ldr	r2, [pc, #604]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d016      	beq.n	80027f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7ff f9ba 	bl	8001b40 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7ff f9b6 	bl	8001b40 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e12a      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	4b8b      	ldr	r3, [pc, #556]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ed      	beq.n	80027d0 <HAL_RCC_OscConfig+0x53c>
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff f9a3 	bl	8001b40 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff f99f 	bl	8001b40 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e113      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002814:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ed      	bne.n	80027fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7ffb      	ldrb	r3, [r7, #31]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a79      	ldr	r2, [pc, #484]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80fe 	beq.w	8002a3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	2b02      	cmp	r3, #2
 8002844:	f040 80d0 	bne.w	80029e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002848:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	429a      	cmp	r2, r3
 800285a:	d130      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	3b01      	subs	r3, #1
 8002868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d127      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d11f      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002888:	2a07      	cmp	r2, #7
 800288a:	bf14      	ite	ne
 800288c:	2201      	movne	r2, #1
 800288e:	2200      	moveq	r2, #0
 8002890:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002892:	4293      	cmp	r3, r2
 8002894:	d113      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d109      	bne.n	80028be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	3b01      	subs	r3, #1
 80028b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d06e      	beq.n	800299c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d069      	beq.n	8002998 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0ad      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028e0:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ec:	f7ff f928 	bl	8001b40 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7ff f924 	bl	8001b40 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e09a      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <HAL_RCC_OscConfig+0x784>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002922:	3a01      	subs	r2, #1
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800292c:	0212      	lsls	r2, r2, #8
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002934:	0852      	lsrs	r2, r2, #1
 8002936:	3a01      	subs	r2, #1
 8002938:	0552      	lsls	r2, r2, #21
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002940:	0852      	lsrs	r2, r2, #1
 8002942:	3a01      	subs	r2, #1
 8002944:	0652      	lsls	r2, r2, #25
 8002946:	4311      	orrs	r1, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294c:	0912      	lsrs	r2, r2, #4
 800294e:	0452      	lsls	r2, r2, #17
 8002950:	430a      	orrs	r2, r1
 8002952:	4930      	ldr	r1, [pc, #192]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002954:	4313      	orrs	r3, r2
 8002956:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002970:	f7ff f8e6 	bl	8001b40 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff f8e2 	bl	8001b40 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e058      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002996:	e050      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e04f      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d148      	bne.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029c0:	f7ff f8be 	bl	8001b40 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7ff f8ba 	bl	8001b40 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e030      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x734>
 80029e6:	e028      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d023      	beq.n	8002a36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x780>)
 80029f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff f8a1 	bl	8001b40 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a00:	e00c      	b.n	8002a1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a02:	f7ff f89d 	bl	8001b40 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d905      	bls.n	8002a1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e013      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x7b0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ec      	bne.n	8002a02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x7b0>)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4905      	ldr	r1, [pc, #20]	; (8002a44 <HAL_RCC_OscConfig+0x7b0>)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x7b4>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
 8002a34:	e001      	b.n	8002a3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	feeefffc 	.word	0xfeeefffc

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0e7      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b75      	ldr	r3, [pc, #468]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4970      	ldr	r1, [pc, #448]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b6e      	ldr	r3, [pc, #440]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cf      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d908      	bls.n	8002abe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4960      	ldr	r1, [pc, #384]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04c      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d121      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0a6      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aea:	4b54      	ldr	r3, [pc, #336]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d115      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e09a      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b02:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e08e      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b12:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e086      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4943      	ldr	r1, [pc, #268]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7ff f804 	bl	8001b40 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7ff f800 	bl	8001b40 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e06e      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d208      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	492b      	ldr	r1, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d210      	bcs.n	8002bc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0207 	bic.w	r2, r3, #7
 8002ba8:	4923      	ldr	r1, [pc, #140]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e036      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4918      	ldr	r1, [pc, #96]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4910      	ldr	r1, [pc, #64]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c00:	f000 f824 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x1f4>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1fc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ff3b 	bl	8001aa0 <HAL_InitTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08008394 	.word	0x08008394
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d121      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d11e      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e004      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d134      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cf0:	e005      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf4:	617b      	str	r3, [r7, #20]
      break;
 8002cf6:	e005      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfa:	617b      	str	r3, [r7, #20]
      break;
 8002cfc:	e002      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	617b      	str	r3, [r7, #20]
      break;
 8002d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	fb03 f202 	mul.w	r2, r3, r2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	0e5b      	lsrs	r3, r3, #25
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	3301      	adds	r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d44:	69bb      	ldr	r3, [r7, #24]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	080083ac 	.word	0x080083ac
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000000 	.word	0x20000000

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	080083a4 	.word	0x080083a4

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dac:	f7ff ffda 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0adb      	lsrs	r3, r3, #11
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4904      	ldr	r1, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	080083a4 	.word	0x080083a4

08002dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dec:	f7ff f9ee 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002df0:	6178      	str	r0, [r7, #20]
 8002df2:	e014      	b.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	4a24      	ldr	r2, [pc, #144]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff f9de 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e24:	d10b      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d919      	bls.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002e30:	d902      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e32:	2302      	movs	r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e013      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e010      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d902      	bls.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e44:	2303      	movs	r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e00a      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d102      	bne.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e50:	2302      	movs	r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e004      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b70      	cmp	r3, #112	; 0x70
 8002e5a:	d101      	bne.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0207 	bic.w	r2, r3, #7
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d041      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eb8:	d02a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ebe:	d824      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eca:	d81e      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ed6:	e018      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed8:	4b86      	ldr	r3, [pc, #536]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a85      	ldr	r2, [pc, #532]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee4:	e015      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fabb 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef6:	e00c      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3320      	adds	r3, #32
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fba6 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f18:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f26:	4973      	ldr	r1, [pc, #460]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d041      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f48:	d02a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f4e:	d824      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5a:	d81e      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f64:	d010      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f66:	e018      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f68:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f74:	e015      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa73 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f86:	e00c      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3320      	adds	r3, #32
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fb5e 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f98:	e003      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fa8:	4b52      	ldr	r3, [pc, #328]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb6:	494f      	ldr	r1, [pc, #316]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fbe:	e001      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a0 	beq.w	8003112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fec:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff8:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003004:	2301      	movs	r3, #1
 8003006:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003014:	f7fe fd94 	bl	8001b40 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301a:	e009      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe fd90 	bl	8001b40 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	74fb      	strb	r3, [r7, #19]
        break;
 800302e:	e005      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d15c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	d019      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fd4f 	bl	8001b40 <HAL_GetTick>
 80030a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	e00b      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fd4b 	bl	8001b40 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d902      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	74fb      	strb	r3, [r7, #19]
            break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ec      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e2:	4904      	ldr	r1, [pc, #16]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ea:	e009      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
 80030f0:	e006      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003100:	7c7b      	ldrb	r3, [r7, #17]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a9d      	ldr	r2, [pc, #628]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800311e:	4b98      	ldr	r3, [pc, #608]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f023 0203 	bic.w	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	4994      	ldr	r1, [pc, #592]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 020c 	bic.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	498c      	ldr	r1, [pc, #560]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003162:	4b87      	ldr	r3, [pc, #540]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4983      	ldr	r1, [pc, #524]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003184:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	497b      	ldr	r1, [pc, #492]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b4:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c8:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	496a      	ldr	r1, [pc, #424]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	4961      	ldr	r1, [pc, #388]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800320c:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	4959      	ldr	r1, [pc, #356]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322e:	4b54      	ldr	r3, [pc, #336]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323c:	4950      	ldr	r1, [pc, #320]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	4948      	ldr	r1, [pc, #288]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	493f      	ldr	r1, [pc, #252]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d028      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	4937      	ldr	r1, [pc, #220]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d106      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a31      	ldr	r2, [pc, #196]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e011      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f8c8 	bl	8003468 <RCCEx_PLLSAI1_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	491f      	ldr	r1, [pc, #124]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003310:	d106      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331c:	60d3      	str	r3, [r2, #12]
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003328:	d10c      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f899 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d02b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336e:	d109      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a02      	ldr	r2, [pc, #8]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337a:	60d3      	str	r3, [r2, #12]
 800337c:	e014      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f867 	bl	8003468 <RCCEx_PLLSAI1_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c2:	4928      	ldr	r1, [pc, #160]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d2:	d10d      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f844 	bl	8003468 <RCCEx_PLLSAI1_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d014      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	74bb      	strb	r3, [r7, #18]
 80033ee:	e011      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3320      	adds	r3, #32
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f925 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342e:	490d      	ldr	r1, [pc, #52]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800345a:	7cbb      	ldrb	r3, [r7, #18]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000

08003468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003476:	4b75      	ldr	r3, [pc, #468]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d018      	beq.n	80034b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d10d      	bne.n	80034ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
       ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
       ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d047      	beq.n	800353e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e044      	b.n	800353e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d018      	beq.n	80034ee <RCCEx_PLLSAI1_Config+0x86>
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d825      	bhi.n	800350c <RCCEx_PLLSAI1_Config+0xa4>
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <RCCEx_PLLSAI1_Config+0x62>
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d009      	beq.n	80034dc <RCCEx_PLLSAI1_Config+0x74>
 80034c8:	e020      	b.n	800350c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ca:	4b60      	ldr	r3, [pc, #384]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11d      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034da:	e01a      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034dc:	4b5b      	ldr	r3, [pc, #364]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d116      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ec:	e013      	b.n	8003516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ee:	4b57      	ldr	r3, [pc, #348]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fa:	4b54      	ldr	r3, [pc, #336]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350a:	e006      	b.n	800351a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e004      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351a:	bf00      	nop
    }

    if(status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10d      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	430b      	orrs	r3, r1
 8003538:	4944      	ldr	r1, [pc, #272]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d17d      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003544:	4b41      	ldr	r3, [pc, #260]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a40      	ldr	r2, [pc, #256]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800354a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800354e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fe faf6 	bl	8001b40 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003556:	e009      	b.n	800356c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003558:	f7fe faf2 	bl	8001b40 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	73fb      	strb	r3, [r7, #15]
        break;
 800356a:	e005      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ef      	bne.n	8003558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d160      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	0211      	lsls	r1, r2, #8
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	0912      	lsrs	r2, r2, #4
 800359c:	0452      	lsls	r2, r2, #17
 800359e:	430a      	orrs	r2, r1
 80035a0:	492a      	ldr	r1, [pc, #168]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]
 80035a6:	e027      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d112      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	0211      	lsls	r1, r2, #8
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6912      	ldr	r2, [r2, #16]
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0552      	lsls	r2, r2, #21
 80035ca:	430a      	orrs	r2, r1
 80035cc:	491f      	ldr	r1, [pc, #124]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	610b      	str	r3, [r1, #16]
 80035d2:	e011      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6952      	ldr	r2, [r2, #20]
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0652      	lsls	r2, r2, #25
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4916      	ldr	r1, [pc, #88]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003602:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe fa9c 	bl	8001b40 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360a:	e009      	b.n	8003620 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360c:	f7fe fa98 	bl	8001b40 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d902      	bls.n	8003620 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	73fb      	strb	r3, [r7, #15]
          break;
 800361e:	e005      	b.n	800362c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	4904      	ldr	r1, [pc, #16]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365e:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d018      	beq.n	800369c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0203 	and.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d10d      	bne.n	8003696 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
       ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
       ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d047      	beq.n	8003726 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e044      	b.n	8003726 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d018      	beq.n	80036d6 <RCCEx_PLLSAI2_Config+0x86>
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d825      	bhi.n	80036f4 <RCCEx_PLLSAI2_Config+0xa4>
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <RCCEx_PLLSAI2_Config+0x62>
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d009      	beq.n	80036c4 <RCCEx_PLLSAI2_Config+0x74>
 80036b0:	e020      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036b2:	4b55      	ldr	r3, [pc, #340]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11d      	bne.n	80036fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c2:	e01a      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e013      	b.n	80036fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036d6:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036f2:	e006      	b.n	8003702 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e004      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003702:	bf00      	nop
    }

    if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800370a:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	430b      	orrs	r3, r1
 8003720:	4939      	ldr	r1, [pc, #228]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d167      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800372c:	4b36      	ldr	r3, [pc, #216]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003738:	f7fe fa02 	bl	8001b40 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003740:	f7fe f9fe 	bl	8001b40 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
        break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003754:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ef      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d14a      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800376c:	4b26      	ldr	r3, [pc, #152]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
 800377c:	0211      	lsls	r1, r2, #8
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	0912      	lsrs	r2, r2, #4
 8003784:	0452      	lsls	r2, r2, #17
 8003786:	430a      	orrs	r2, r1
 8003788:	491f      	ldr	r1, [pc, #124]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	614b      	str	r3, [r1, #20]
 800378e:	e011      	b.n	80037b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003790:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6912      	ldr	r2, [r2, #16]
 80037a6:	0852      	lsrs	r2, r2, #1
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0652      	lsls	r2, r2, #25
 80037ac:	430a      	orrs	r2, r1
 80037ae:	4916      	ldr	r1, [pc, #88]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a13      	ldr	r2, [pc, #76]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe f9be 	bl	8001b40 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037c8:	f7fe f9ba 	bl	8001b40 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
          break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4904      	ldr	r1, [pc, #16]	; (8003808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000

0800380c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e040      	b.n	80038a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd ff54 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 feb4 	bl	80045c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fbf9 	bl	8004050 <UART_SetConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e01b      	b.n	80038a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 ff33 	bl	8004704 <UART_CheckIdleState>
 800389e:	4603      	mov	r3, r0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038be:	2b20      	cmp	r3, #32
 80038c0:	f040 80b6 	bne.w	8003a30 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_UART_Receive+0x28>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0ae      	b.n	8003a32 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2222      	movs	r2, #34	; 0x22
 80038e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ea:	f7fe f929 	bl	8001b40 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d10e      	bne.n	8003928 <HAL_UART_Receive+0x80>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <HAL_UART_Receive+0x76>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800391c:	e02d      	b.n	800397a <HAL_UART_Receive+0xd2>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003926:	e028      	b.n	800397a <HAL_UART_Receive+0xd2>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_UART_Receive+0xa4>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <HAL_UART_Receive+0x9a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	22ff      	movs	r2, #255	; 0xff
 800393c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003940:	e01b      	b.n	800397a <HAL_UART_Receive+0xd2>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	227f      	movs	r2, #127	; 0x7f
 8003946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800394a:	e016      	b.n	800397a <HAL_UART_Receive+0xd2>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003954:	d10d      	bne.n	8003972 <HAL_UART_Receive+0xca>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_UART_Receive+0xc0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	227f      	movs	r2, #127	; 0x7f
 8003962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003966:	e008      	b.n	800397a <HAL_UART_Receive+0xd2>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	223f      	movs	r2, #63	; 0x3f
 800396c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003970:	e003      	b.n	800397a <HAL_UART_Receive+0xd2>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003980:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d108      	bne.n	800399e <HAL_UART_Receive+0xf6>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e003      	b.n	80039a6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039a6:	e037      	b.n	8003a18 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2120      	movs	r1, #32
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 ff4e 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e033      	b.n	8003a32 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10c      	bne.n	80039ea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	8a7b      	ldrh	r3, [r7, #18]
 80039da:	4013      	ands	r3, r2
 80039dc:	b29a      	uxth	r2, r3
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3302      	adds	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e00d      	b.n	8003a06 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	8a7b      	ldrh	r3, [r7, #18]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4013      	ands	r3, r2
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1c1      	bne.n	80039a8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b0ba      	sub	sp, #232	; 0xe8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00f      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 82ae 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
      }
      return;
 8003aa2:	e2a8      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8117 	beq.w	8003cdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_UART_IRQHandler+0x298>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 810a 	beq.w	8003cdc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d011      	beq.n	8003af8 <HAL_UART_IRQHandler+0xbc>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d011      	beq.n	8003b28 <HAL_UART_IRQHandler+0xec>
 8003b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2202      	movs	r2, #2
 8003b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1e:	f043 0204 	orr.w	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d011      	beq.n	8003b58 <HAL_UART_IRQHandler+0x11c>
 8003b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2204      	movs	r2, #4
 8003b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2208      	movs	r2, #8
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	f043 0208 	orr.w	r2, r3, #8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x18a>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8214 	beq.w	8003ffa <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fe7f 	bl	8004922 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d141      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_UART_IRQHandler+0x29c>)
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f8af 	bl	8001df6 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00f      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9b8 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00b      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9b4 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e007      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9b0 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ccc:	e195      	b.n	8003ffa <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	bf00      	nop
    return;
 8003cd0:	e193      	b.n	8003ffa <HAL_UART_IRQHandler+0x5be>
 8003cd2:	bf00      	nop
 8003cd4:	04000120 	.word	0x04000120
 8003cd8:	080049eb 	.word	0x080049eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f040 814e 	bne.w	8003f82 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8147 	beq.w	8003f82 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8140 	beq.w	8003f82 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2210      	movs	r2, #16
 8003d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	f040 80b8 	bne.w	8003e8a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8167 	beq.w	8003ffe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 815f 	bcs.w	8003ffe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8086 	bne.w	8003e68 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1da      	bne.n	8003d5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e1      	bne.n	8003da6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3308      	adds	r3, #8
 8003e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e4      	bne.n	8003e28 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd ff89 	bl	8001d7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8d8 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e88:	e0b9      	b.n	8003ffe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80ab 	beq.w	8004002 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a6 	beq.w	8004002 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e4      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	623b      	str	r3, [r7, #32]
   return(result);
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f10:	633a      	str	r2, [r7, #48]	; 0x30
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e3      	bne.n	8003eec <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	69b9      	ldr	r1, [r7, #24]
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	617b      	str	r3, [r7, #20]
   return(result);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e4      	bne.n	8003f38 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f85c 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f80:	e03f      	b.n	8004002 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <HAL_UART_IRQHandler+0x570>
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fd60 	bl	8004a6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003faa:	e02d      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
    }
    return;
 8003fd4:	e017      	b.n	8004006 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <HAL_UART_IRQHandler+0x5cc>
 8003fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fd11 	bl	8004a16 <UART_EndTransmit_IT>
    return;
 8003ff4:	e008      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ff6:	bf00      	nop
 8003ff8:	e006      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004006:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004008:	37e8      	adds	r7, #232	; 0xe8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop

08004010 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b08a      	sub	sp, #40	; 0x28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4313      	orrs	r3, r2
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4ba4      	ldr	r3, [pc, #656]	; (8004310 <UART_SetConfig+0x2c0>)
 8004080:	4013      	ands	r3, r2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004088:	430b      	orrs	r3, r1
 800408a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a99      	ldr	r2, [pc, #612]	; (8004314 <UART_SetConfig+0x2c4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	4313      	orrs	r3, r2
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a90      	ldr	r2, [pc, #576]	; (8004318 <UART_SetConfig+0x2c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d126      	bne.n	8004128 <UART_SetConfig+0xd8>
 80040da:	4b90      	ldr	r3, [pc, #576]	; (800431c <UART_SetConfig+0x2cc>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d81b      	bhi.n	8004120 <UART_SetConfig+0xd0>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0xa0>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004111 	.word	0x08004111
 80040f8:	08004109 	.word	0x08004109
 80040fc:	08004119 	.word	0x08004119
 8004100:	2301      	movs	r3, #1
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e116      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004108:	2302      	movs	r3, #2
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e112      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e10e      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e10a      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004126:	e106      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7c      	ldr	r2, [pc, #496]	; (8004320 <UART_SetConfig+0x2d0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d138      	bne.n	80041a4 <UART_SetConfig+0x154>
 8004132:	4b7a      	ldr	r3, [pc, #488]	; (800431c <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d82d      	bhi.n	800419c <UART_SetConfig+0x14c>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0xf8>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800417d 	.word	0x0800417d
 800414c:	0800419d 	.word	0x0800419d
 8004150:	0800419d 	.word	0x0800419d
 8004154:	0800419d 	.word	0x0800419d
 8004158:	0800418d 	.word	0x0800418d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	0800419d 	.word	0x0800419d
 8004164:	0800419d 	.word	0x0800419d
 8004168:	08004185 	.word	0x08004185
 800416c:	0800419d 	.word	0x0800419d
 8004170:	0800419d 	.word	0x0800419d
 8004174:	0800419d 	.word	0x0800419d
 8004178:	08004195 	.word	0x08004195
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e0d8      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004184:	2302      	movs	r3, #2
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418a:	e0d4      	b.n	8004336 <UART_SetConfig+0x2e6>
 800418c:	2304      	movs	r3, #4
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e0d0      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004194:	2308      	movs	r3, #8
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e0cc      	b.n	8004336 <UART_SetConfig+0x2e6>
 800419c:	2310      	movs	r3, #16
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a2:	e0c8      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5e      	ldr	r2, [pc, #376]	; (8004324 <UART_SetConfig+0x2d4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d125      	bne.n	80041fa <UART_SetConfig+0x1aa>
 80041ae:	4b5b      	ldr	r3, [pc, #364]	; (800431c <UART_SetConfig+0x2cc>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d016      	beq.n	80041ea <UART_SetConfig+0x19a>
 80041bc:	2b30      	cmp	r3, #48	; 0x30
 80041be:	d818      	bhi.n	80041f2 <UART_SetConfig+0x1a2>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d00a      	beq.n	80041da <UART_SetConfig+0x18a>
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d814      	bhi.n	80041f2 <UART_SetConfig+0x1a2>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <UART_SetConfig+0x182>
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d008      	beq.n	80041e2 <UART_SetConfig+0x192>
 80041d0:	e00f      	b.n	80041f2 <UART_SetConfig+0x1a2>
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d8:	e0ad      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041da:	2302      	movs	r3, #2
 80041dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e0:	e0a9      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041e2:	2304      	movs	r3, #4
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e8:	e0a5      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041ea:	2308      	movs	r3, #8
 80041ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f0:	e0a1      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041f2:	2310      	movs	r3, #16
 80041f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f8:	e09d      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4a      	ldr	r2, [pc, #296]	; (8004328 <UART_SetConfig+0x2d8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d125      	bne.n	8004250 <UART_SetConfig+0x200>
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <UART_SetConfig+0x2cc>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800420e:	2bc0      	cmp	r3, #192	; 0xc0
 8004210:	d016      	beq.n	8004240 <UART_SetConfig+0x1f0>
 8004212:	2bc0      	cmp	r3, #192	; 0xc0
 8004214:	d818      	bhi.n	8004248 <UART_SetConfig+0x1f8>
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d00a      	beq.n	8004230 <UART_SetConfig+0x1e0>
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d814      	bhi.n	8004248 <UART_SetConfig+0x1f8>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <UART_SetConfig+0x1d8>
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d008      	beq.n	8004238 <UART_SetConfig+0x1e8>
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x1f8>
 8004228:	2300      	movs	r3, #0
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e082      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e07e      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e07a      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e076      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e072      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a35      	ldr	r2, [pc, #212]	; (800432c <UART_SetConfig+0x2dc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d12a      	bne.n	80042b0 <UART_SetConfig+0x260>
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <UART_SetConfig+0x2cc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004268:	d01a      	beq.n	80042a0 <UART_SetConfig+0x250>
 800426a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426e:	d81b      	bhi.n	80042a8 <UART_SetConfig+0x258>
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d00c      	beq.n	8004290 <UART_SetConfig+0x240>
 8004276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427a:	d815      	bhi.n	80042a8 <UART_SetConfig+0x258>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <UART_SetConfig+0x238>
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d008      	beq.n	8004298 <UART_SetConfig+0x248>
 8004286:	e00f      	b.n	80042a8 <UART_SetConfig+0x258>
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e052      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004290:	2302      	movs	r3, #2
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e04e      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004298:	2304      	movs	r3, #4
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e04a      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042a0:	2308      	movs	r3, #8
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e046      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e042      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a17      	ldr	r2, [pc, #92]	; (8004314 <UART_SetConfig+0x2c4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d13a      	bne.n	8004330 <UART_SetConfig+0x2e0>
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <UART_SetConfig+0x2cc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c8:	d01a      	beq.n	8004300 <UART_SetConfig+0x2b0>
 80042ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ce:	d81b      	bhi.n	8004308 <UART_SetConfig+0x2b8>
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d00c      	beq.n	80042f0 <UART_SetConfig+0x2a0>
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d815      	bhi.n	8004308 <UART_SetConfig+0x2b8>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <UART_SetConfig+0x298>
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d008      	beq.n	80042f8 <UART_SetConfig+0x2a8>
 80042e6:	e00f      	b.n	8004308 <UART_SetConfig+0x2b8>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e022      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042f0:	2302      	movs	r3, #2
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e01e      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042f8:	2304      	movs	r3, #4
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e01a      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004300:	2308      	movs	r3, #8
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e016      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004308:	2310      	movs	r3, #16
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e012      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004310:	efff69f3 	.word	0xefff69f3
 8004314:	40008000 	.word	0x40008000
 8004318:	40013800 	.word	0x40013800
 800431c:	40021000 	.word	0x40021000
 8004320:	40004400 	.word	0x40004400
 8004324:	40004800 	.word	0x40004800
 8004328:	40004c00 	.word	0x40004c00
 800432c:	40005000 	.word	0x40005000
 8004330:	2310      	movs	r3, #16
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a9f      	ldr	r2, [pc, #636]	; (80045b8 <UART_SetConfig+0x568>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d17a      	bne.n	8004436 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004344:	2b08      	cmp	r3, #8
 8004346:	d824      	bhi.n	8004392 <UART_SetConfig+0x342>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x300>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004375 	.word	0x08004375
 8004354:	08004393 	.word	0x08004393
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004393 	.word	0x08004393
 8004360:	08004383 	.word	0x08004383
 8004364:	08004393 	.word	0x08004393
 8004368:	08004393 	.word	0x08004393
 800436c:	08004393 	.word	0x08004393
 8004370:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fe fd02 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8004378:	61f8      	str	r0, [r7, #28]
        break;
 800437a:	e010      	b.n	800439e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437c:	4b8f      	ldr	r3, [pc, #572]	; (80045bc <UART_SetConfig+0x56c>)
 800437e:	61fb      	str	r3, [r7, #28]
        break;
 8004380:	e00d      	b.n	800439e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004382:	f7fe fc63 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8004386:	61f8      	str	r0, [r7, #28]
        break;
 8004388:	e009      	b.n	800439e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	61fb      	str	r3, [r7, #28]
        break;
 8004390:	e005      	b.n	800439e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800439c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80fb 	beq.w	800459c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d305      	bcc.n	80043c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d903      	bls.n	80043ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043c8:	e0e8      	b.n	800459c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2200      	movs	r2, #0
 80043ce:	461c      	mov	r4, r3
 80043d0:	4615      	mov	r5, r2
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	022b      	lsls	r3, r5, #8
 80043dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043e0:	0222      	lsls	r2, r4, #8
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	6849      	ldr	r1, [r1, #4]
 80043e6:	0849      	lsrs	r1, r1, #1
 80043e8:	2000      	movs	r0, #0
 80043ea:	4688      	mov	r8, r1
 80043ec:	4681      	mov	r9, r0
 80043ee:	eb12 0a08 	adds.w	sl, r2, r8
 80043f2:	eb43 0b09 	adc.w	fp, r3, r9
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004404:	4650      	mov	r0, sl
 8004406:	4659      	mov	r1, fp
 8004408:	f7fc fc1e 	bl	8000c48 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4613      	mov	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441a:	d308      	bcc.n	800442e <UART_SetConfig+0x3de>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d204      	bcs.n	800442e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	e0b6      	b.n	800459c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004434:	e0b2      	b.n	800459c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443e:	d15e      	bne.n	80044fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004444:	2b08      	cmp	r3, #8
 8004446:	d828      	bhi.n	800449a <UART_SetConfig+0x44a>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <UART_SetConfig+0x400>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004475 	.word	0x08004475
 8004454:	0800447d 	.word	0x0800447d
 8004458:	08004485 	.word	0x08004485
 800445c:	0800449b 	.word	0x0800449b
 8004460:	0800448b 	.word	0x0800448b
 8004464:	0800449b 	.word	0x0800449b
 8004468:	0800449b 	.word	0x0800449b
 800446c:	0800449b 	.word	0x0800449b
 8004470:	08004493 	.word	0x08004493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004474:	f7fe fc82 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8004478:	61f8      	str	r0, [r7, #28]
        break;
 800447a:	e014      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7fe fc94 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8004480:	61f8      	str	r0, [r7, #28]
        break;
 8004482:	e010      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004484:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <UART_SetConfig+0x56c>)
 8004486:	61fb      	str	r3, [r7, #28]
        break;
 8004488:	e00d      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448a:	f7fe fbdf 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800448e:	61f8      	str	r0, [r7, #28]
        break;
 8004490:	e009      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004496:	61fb      	str	r3, [r7, #28]
        break;
 8004498:	e005      	b.n	80044a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d077      	beq.n	800459c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	005a      	lsls	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b0f      	cmp	r3, #15
 80044c6:	d916      	bls.n	80044f6 <UART_SetConfig+0x4a6>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d212      	bcs.n	80044f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f023 030f 	bic.w	r3, r3, #15
 80044d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	8afa      	ldrh	r2, [r7, #22]
 80044f2:	60da      	str	r2, [r3, #12]
 80044f4:	e052      	b.n	800459c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044fc:	e04e      	b.n	800459c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004502:	2b08      	cmp	r3, #8
 8004504:	d827      	bhi.n	8004556 <UART_SetConfig+0x506>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x4bc>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004531 	.word	0x08004531
 8004510:	08004539 	.word	0x08004539
 8004514:	08004541 	.word	0x08004541
 8004518:	08004557 	.word	0x08004557
 800451c:	08004547 	.word	0x08004547
 8004520:	08004557 	.word	0x08004557
 8004524:	08004557 	.word	0x08004557
 8004528:	08004557 	.word	0x08004557
 800452c:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fc24 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8004534:	61f8      	str	r0, [r7, #28]
        break;
 8004536:	e014      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fe fc36 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 800453c:	61f8      	str	r0, [r7, #28]
        break;
 800453e:	e010      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <UART_SetConfig+0x56c>)
 8004542:	61fb      	str	r3, [r7, #28]
        break;
 8004544:	e00d      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fe fb81 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800454a:	61f8      	str	r0, [r7, #28]
        break;
 800454c:	e009      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	61fb      	str	r3, [r7, #28]
        break;
 8004554:	e005      	b.n	8004562 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004560:	bf00      	nop
    }

    if (pclk != 0U)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d019      	beq.n	800459c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	085a      	lsrs	r2, r3, #1
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d909      	bls.n	8004596 <UART_SetConfig+0x546>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d205      	bcs.n	8004596 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	e002      	b.n	800459c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40008000 	.word	0x40008000
 80045bc:	00f42400 	.word	0x00f42400

080045c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d10a      	bne.n	80046d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	; 0x60
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004714:	f7fd fa14 	bl	8001b40 <HAL_GetTick>
 8004718:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d12e      	bne.n	8004786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f88c 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d021      	beq.n	8004786 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e6      	bne.n	8004742 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e062      	b.n	800484c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d149      	bne.n	8004828 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	2200      	movs	r2, #0
 800479e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f856 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d03c      	beq.n	8004828 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	623b      	str	r3, [r7, #32]
   return(result);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
 80047ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	61fa      	str	r2, [r7, #28]
 8004802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	617b      	str	r3, [r7, #20]
   return(result);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e011      	b.n	800484c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3758      	adds	r7, #88	; 0x58
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	e049      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d045      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fd f967 	bl	8001b40 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <UART_WaitOnFlagUntilTimeout+0x30>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e048      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d031      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d110      	bne.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2208      	movs	r2, #8
 80048aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f838 	bl	8004922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2208      	movs	r2, #8
 80048b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e029      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d4:	d111      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f81e 	bl	8004922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00f      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	429a      	cmp	r2, r3
 8004916:	d0a6      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004922:	b480      	push	{r7}
 8004924:	b095      	sub	sp, #84	; 0x54
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	643b      	str	r3, [r7, #64]	; 0x40
 800494a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800494e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e6      	bne.n	800492a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	61fb      	str	r3, [r7, #28]
   return(result);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	64bb      	str	r3, [r7, #72]	; 0x48
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800497c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004994:	2b01      	cmp	r3, #1
 8004996:	d118      	bne.n	80049ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6979      	ldr	r1, [r7, #20]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	613b      	str	r3, [r7, #16]
   return(result);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e6      	bne.n	8004998 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049de:	bf00      	nop
 80049e0:	3754      	adds	r7, #84	; 0x54
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff fb0b 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b088      	sub	sp, #32
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6979      	ldr	r1, [r7, #20]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fad7 	bl	8004010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a62:	bf00      	nop
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <__cvt>:
 8004a7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a82:	ec55 4b10 	vmov	r4, r5, d0
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	460e      	mov	r6, r1
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	bfbb      	ittet	lt
 8004a90:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a94:	461d      	movlt	r5, r3
 8004a96:	2300      	movge	r3, #0
 8004a98:	232d      	movlt	r3, #45	; 0x2d
 8004a9a:	700b      	strb	r3, [r1, #0]
 8004a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	f023 0820 	bic.w	r8, r3, #32
 8004aa8:	bfbc      	itt	lt
 8004aaa:	4622      	movlt	r2, r4
 8004aac:	4614      	movlt	r4, r2
 8004aae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ab2:	d005      	beq.n	8004ac0 <__cvt+0x42>
 8004ab4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ab8:	d100      	bne.n	8004abc <__cvt+0x3e>
 8004aba:	3601      	adds	r6, #1
 8004abc:	2102      	movs	r1, #2
 8004abe:	e000      	b.n	8004ac2 <__cvt+0x44>
 8004ac0:	2103      	movs	r1, #3
 8004ac2:	ab03      	add	r3, sp, #12
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	ab02      	add	r3, sp, #8
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	ec45 4b10 	vmov	d0, r4, r5
 8004ace:	4653      	mov	r3, sl
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	f000 ffc9 	bl	8005a68 <_dtoa_r>
 8004ad6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ada:	4607      	mov	r7, r0
 8004adc:	d102      	bne.n	8004ae4 <__cvt+0x66>
 8004ade:	f019 0f01 	tst.w	r9, #1
 8004ae2:	d022      	beq.n	8004b2a <__cvt+0xac>
 8004ae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ae8:	eb07 0906 	add.w	r9, r7, r6
 8004aec:	d110      	bne.n	8004b10 <__cvt+0x92>
 8004aee:	783b      	ldrb	r3, [r7, #0]
 8004af0:	2b30      	cmp	r3, #48	; 0x30
 8004af2:	d10a      	bne.n	8004b0a <__cvt+0x8c>
 8004af4:	2200      	movs	r2, #0
 8004af6:	2300      	movs	r3, #0
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b00:	b918      	cbnz	r0, 8004b0a <__cvt+0x8c>
 8004b02:	f1c6 0601 	rsb	r6, r6, #1
 8004b06:	f8ca 6000 	str.w	r6, [sl]
 8004b0a:	f8da 3000 	ldr.w	r3, [sl]
 8004b0e:	4499      	add	r9, r3
 8004b10:	2200      	movs	r2, #0
 8004b12:	2300      	movs	r3, #0
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b1c:	b108      	cbz	r0, 8004b22 <__cvt+0xa4>
 8004b1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b22:	2230      	movs	r2, #48	; 0x30
 8004b24:	9b03      	ldr	r3, [sp, #12]
 8004b26:	454b      	cmp	r3, r9
 8004b28:	d307      	bcc.n	8004b3a <__cvt+0xbc>
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b2e:	1bdb      	subs	r3, r3, r7
 8004b30:	4638      	mov	r0, r7
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	b004      	add	sp, #16
 8004b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	9103      	str	r1, [sp, #12]
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e7f0      	b.n	8004b24 <__cvt+0xa6>

08004b42 <__exponent>:
 8004b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b44:	4603      	mov	r3, r0
 8004b46:	2900      	cmp	r1, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	4249      	neglt	r1, r1
 8004b4c:	f803 2b02 	strb.w	r2, [r3], #2
 8004b50:	bfb4      	ite	lt
 8004b52:	222d      	movlt	r2, #45	; 0x2d
 8004b54:	222b      	movge	r2, #43	; 0x2b
 8004b56:	2909      	cmp	r1, #9
 8004b58:	7042      	strb	r2, [r0, #1]
 8004b5a:	dd2a      	ble.n	8004bb2 <__exponent+0x70>
 8004b5c:	f10d 0207 	add.w	r2, sp, #7
 8004b60:	4617      	mov	r7, r2
 8004b62:	260a      	movs	r6, #10
 8004b64:	4694      	mov	ip, r2
 8004b66:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b6a:	fb06 1415 	mls	r4, r6, r5, r1
 8004b6e:	3430      	adds	r4, #48	; 0x30
 8004b70:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b74:	460c      	mov	r4, r1
 8004b76:	2c63      	cmp	r4, #99	; 0x63
 8004b78:	f102 32ff 	add.w	r2, r2, #4294967295
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	dcf1      	bgt.n	8004b64 <__exponent+0x22>
 8004b80:	3130      	adds	r1, #48	; 0x30
 8004b82:	f1ac 0402 	sub.w	r4, ip, #2
 8004b86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b8a:	1c41      	adds	r1, r0, #1
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	42ba      	cmp	r2, r7
 8004b90:	d30a      	bcc.n	8004ba8 <__exponent+0x66>
 8004b92:	f10d 0209 	add.w	r2, sp, #9
 8004b96:	eba2 020c 	sub.w	r2, r2, ip
 8004b9a:	42bc      	cmp	r4, r7
 8004b9c:	bf88      	it	hi
 8004b9e:	2200      	movhi	r2, #0
 8004ba0:	4413      	add	r3, r2
 8004ba2:	1a18      	subs	r0, r3, r0
 8004ba4:	b003      	add	sp, #12
 8004ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004bac:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004bb0:	e7ed      	b.n	8004b8e <__exponent+0x4c>
 8004bb2:	2330      	movs	r3, #48	; 0x30
 8004bb4:	3130      	adds	r1, #48	; 0x30
 8004bb6:	7083      	strb	r3, [r0, #2]
 8004bb8:	70c1      	strb	r1, [r0, #3]
 8004bba:	1d03      	adds	r3, r0, #4
 8004bbc:	e7f1      	b.n	8004ba2 <__exponent+0x60>
	...

08004bc0 <_printf_float>:
 8004bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc4:	ed2d 8b02 	vpush	{d8}
 8004bc8:	b08d      	sub	sp, #52	; 0x34
 8004bca:	460c      	mov	r4, r1
 8004bcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	f000 fe1b 	bl	8005810 <_localeconv_r>
 8004bda:	f8d0 a000 	ldr.w	sl, [r0]
 8004bde:	4650      	mov	r0, sl
 8004be0:	f7fb fb46 	bl	8000270 <strlen>
 8004be4:	2300      	movs	r3, #0
 8004be6:	930a      	str	r3, [sp, #40]	; 0x28
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	9305      	str	r3, [sp, #20]
 8004bec:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bf4:	3307      	adds	r3, #7
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	f103 0208 	add.w	r2, r3, #8
 8004bfe:	f8c8 2000 	str.w	r2, [r8]
 8004c02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c0a:	9307      	str	r3, [sp, #28]
 8004c0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c10:	ee08 0a10 	vmov	s16, r0
 8004c14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004c18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c1c:	4b9e      	ldr	r3, [pc, #632]	; (8004e98 <_printf_float+0x2d8>)
 8004c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c22:	f7fb ff83 	bl	8000b2c <__aeabi_dcmpun>
 8004c26:	bb88      	cbnz	r0, 8004c8c <_printf_float+0xcc>
 8004c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c2c:	4b9a      	ldr	r3, [pc, #616]	; (8004e98 <_printf_float+0x2d8>)
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	f7fb ff5d 	bl	8000af0 <__aeabi_dcmple>
 8004c36:	bb48      	cbnz	r0, 8004c8c <_printf_float+0xcc>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	4649      	mov	r1, r9
 8004c40:	f7fb ff4c 	bl	8000adc <__aeabi_dcmplt>
 8004c44:	b110      	cbz	r0, 8004c4c <_printf_float+0x8c>
 8004c46:	232d      	movs	r3, #45	; 0x2d
 8004c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c4c:	4a93      	ldr	r2, [pc, #588]	; (8004e9c <_printf_float+0x2dc>)
 8004c4e:	4b94      	ldr	r3, [pc, #592]	; (8004ea0 <_printf_float+0x2e0>)
 8004c50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c54:	bf94      	ite	ls
 8004c56:	4690      	movls	r8, r2
 8004c58:	4698      	movhi	r8, r3
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	6123      	str	r3, [r4, #16]
 8004c5e:	9b05      	ldr	r3, [sp, #20]
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	f04f 0900 	mov.w	r9, #0
 8004c6a:	9700      	str	r7, [sp, #0]
 8004c6c:	4633      	mov	r3, r6
 8004c6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c70:	4621      	mov	r1, r4
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 f9da 	bl	800502c <_printf_common>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f040 8090 	bne.w	8004d9e <_printf_float+0x1de>
 8004c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c82:	b00d      	add	sp, #52	; 0x34
 8004c84:	ecbd 8b02 	vpop	{d8}
 8004c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	4649      	mov	r1, r9
 8004c94:	f7fb ff4a 	bl	8000b2c <__aeabi_dcmpun>
 8004c98:	b140      	cbz	r0, 8004cac <_printf_float+0xec>
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bfbc      	itt	lt
 8004ca0:	232d      	movlt	r3, #45	; 0x2d
 8004ca2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ca6:	4a7f      	ldr	r2, [pc, #508]	; (8004ea4 <_printf_float+0x2e4>)
 8004ca8:	4b7f      	ldr	r3, [pc, #508]	; (8004ea8 <_printf_float+0x2e8>)
 8004caa:	e7d1      	b.n	8004c50 <_printf_float+0x90>
 8004cac:	6863      	ldr	r3, [r4, #4]
 8004cae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cb2:	9206      	str	r2, [sp, #24]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	d13f      	bne.n	8004d38 <_printf_float+0x178>
 8004cb8:	2306      	movs	r3, #6
 8004cba:	6063      	str	r3, [r4, #4]
 8004cbc:	9b05      	ldr	r3, [sp, #20]
 8004cbe:	6861      	ldr	r1, [r4, #4]
 8004cc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	ab0a      	add	r3, sp, #40	; 0x28
 8004cca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cce:	ab09      	add	r3, sp, #36	; 0x24
 8004cd0:	ec49 8b10 	vmov	d0, r8, r9
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6022      	str	r2, [r4, #0]
 8004cd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f7ff fece 	bl	8004a7e <__cvt>
 8004ce2:	9b06      	ldr	r3, [sp, #24]
 8004ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ce6:	2b47      	cmp	r3, #71	; 0x47
 8004ce8:	4680      	mov	r8, r0
 8004cea:	d108      	bne.n	8004cfe <_printf_float+0x13e>
 8004cec:	1cc8      	adds	r0, r1, #3
 8004cee:	db02      	blt.n	8004cf6 <_printf_float+0x136>
 8004cf0:	6863      	ldr	r3, [r4, #4]
 8004cf2:	4299      	cmp	r1, r3
 8004cf4:	dd41      	ble.n	8004d7a <_printf_float+0x1ba>
 8004cf6:	f1ab 0302 	sub.w	r3, fp, #2
 8004cfa:	fa5f fb83 	uxtb.w	fp, r3
 8004cfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d02:	d820      	bhi.n	8004d46 <_printf_float+0x186>
 8004d04:	3901      	subs	r1, #1
 8004d06:	465a      	mov	r2, fp
 8004d08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d0c:	9109      	str	r1, [sp, #36]	; 0x24
 8004d0e:	f7ff ff18 	bl	8004b42 <__exponent>
 8004d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d14:	1813      	adds	r3, r2, r0
 8004d16:	2a01      	cmp	r2, #1
 8004d18:	4681      	mov	r9, r0
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	dc02      	bgt.n	8004d24 <_printf_float+0x164>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	07d2      	lsls	r2, r2, #31
 8004d22:	d501      	bpl.n	8004d28 <_printf_float+0x168>
 8004d24:	3301      	adds	r3, #1
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d09c      	beq.n	8004c6a <_printf_float+0xaa>
 8004d30:	232d      	movs	r3, #45	; 0x2d
 8004d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d36:	e798      	b.n	8004c6a <_printf_float+0xaa>
 8004d38:	9a06      	ldr	r2, [sp, #24]
 8004d3a:	2a47      	cmp	r2, #71	; 0x47
 8004d3c:	d1be      	bne.n	8004cbc <_printf_float+0xfc>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1bc      	bne.n	8004cbc <_printf_float+0xfc>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e7b9      	b.n	8004cba <_printf_float+0xfa>
 8004d46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d4a:	d118      	bne.n	8004d7e <_printf_float+0x1be>
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	dd0b      	ble.n	8004d6a <_printf_float+0x1aa>
 8004d52:	6121      	str	r1, [r4, #16]
 8004d54:	b913      	cbnz	r3, 8004d5c <_printf_float+0x19c>
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	07d0      	lsls	r0, r2, #31
 8004d5a:	d502      	bpl.n	8004d62 <_printf_float+0x1a2>
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	440b      	add	r3, r1
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d64:	f04f 0900 	mov.w	r9, #0
 8004d68:	e7de      	b.n	8004d28 <_printf_float+0x168>
 8004d6a:	b913      	cbnz	r3, 8004d72 <_printf_float+0x1b2>
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	07d2      	lsls	r2, r2, #31
 8004d70:	d501      	bpl.n	8004d76 <_printf_float+0x1b6>
 8004d72:	3302      	adds	r3, #2
 8004d74:	e7f4      	b.n	8004d60 <_printf_float+0x1a0>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e7f2      	b.n	8004d60 <_printf_float+0x1a0>
 8004d7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d80:	4299      	cmp	r1, r3
 8004d82:	db05      	blt.n	8004d90 <_printf_float+0x1d0>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	6121      	str	r1, [r4, #16]
 8004d88:	07d8      	lsls	r0, r3, #31
 8004d8a:	d5ea      	bpl.n	8004d62 <_printf_float+0x1a2>
 8004d8c:	1c4b      	adds	r3, r1, #1
 8004d8e:	e7e7      	b.n	8004d60 <_printf_float+0x1a0>
 8004d90:	2900      	cmp	r1, #0
 8004d92:	bfd4      	ite	le
 8004d94:	f1c1 0202 	rsble	r2, r1, #2
 8004d98:	2201      	movgt	r2, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	e7e0      	b.n	8004d60 <_printf_float+0x1a0>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	055a      	lsls	r2, r3, #21
 8004da2:	d407      	bmi.n	8004db4 <_printf_float+0x1f4>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	4642      	mov	r2, r8
 8004da8:	4631      	mov	r1, r6
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	d12c      	bne.n	8004e0c <_printf_float+0x24c>
 8004db2:	e764      	b.n	8004c7e <_printf_float+0xbe>
 8004db4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004db8:	f240 80e0 	bls.w	8004f7c <_printf_float+0x3bc>
 8004dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f7fb fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d034      	beq.n	8004e36 <_printf_float+0x276>
 8004dcc:	4a37      	ldr	r2, [pc, #220]	; (8004eac <_printf_float+0x2ec>)
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f af51 	beq.w	8004c7e <_printf_float+0xbe>
 8004ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de0:	429a      	cmp	r2, r3
 8004de2:	db02      	blt.n	8004dea <_printf_float+0x22a>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	07d8      	lsls	r0, r3, #31
 8004de8:	d510      	bpl.n	8004e0c <_printf_float+0x24c>
 8004dea:	ee18 3a10 	vmov	r3, s16
 8004dee:	4652      	mov	r2, sl
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	f43f af41 	beq.w	8004c7e <_printf_float+0xbe>
 8004dfc:	f04f 0800 	mov.w	r8, #0
 8004e00:	f104 091a 	add.w	r9, r4, #26
 8004e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	4543      	cmp	r3, r8
 8004e0a:	dc09      	bgt.n	8004e20 <_printf_float+0x260>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	079b      	lsls	r3, r3, #30
 8004e10:	f100 8107 	bmi.w	8005022 <_printf_float+0x462>
 8004e14:	68e0      	ldr	r0, [r4, #12]
 8004e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e18:	4298      	cmp	r0, r3
 8004e1a:	bfb8      	it	lt
 8004e1c:	4618      	movlt	r0, r3
 8004e1e:	e730      	b.n	8004c82 <_printf_float+0xc2>
 8004e20:	2301      	movs	r3, #1
 8004e22:	464a      	mov	r2, r9
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f af27 	beq.w	8004c7e <_printf_float+0xbe>
 8004e30:	f108 0801 	add.w	r8, r8, #1
 8004e34:	e7e6      	b.n	8004e04 <_printf_float+0x244>
 8004e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	dc39      	bgt.n	8004eb0 <_printf_float+0x2f0>
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <_printf_float+0x2ec>)
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	f43f af19 	beq.w	8004c7e <_printf_float+0xbe>
 8004e4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d102      	bne.n	8004e5a <_printf_float+0x29a>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	07d9      	lsls	r1, r3, #31
 8004e58:	d5d8      	bpl.n	8004e0c <_printf_float+0x24c>
 8004e5a:	ee18 3a10 	vmov	r3, s16
 8004e5e:	4652      	mov	r2, sl
 8004e60:	4631      	mov	r1, r6
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	f43f af09 	beq.w	8004c7e <_printf_float+0xbe>
 8004e6c:	f04f 0900 	mov.w	r9, #0
 8004e70:	f104 0a1a 	add.w	sl, r4, #26
 8004e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e76:	425b      	negs	r3, r3
 8004e78:	454b      	cmp	r3, r9
 8004e7a:	dc01      	bgt.n	8004e80 <_printf_float+0x2c0>
 8004e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7e:	e792      	b.n	8004da6 <_printf_float+0x1e6>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4652      	mov	r2, sl
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	47b8      	blx	r7
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	f43f aef7 	beq.w	8004c7e <_printf_float+0xbe>
 8004e90:	f109 0901 	add.w	r9, r9, #1
 8004e94:	e7ee      	b.n	8004e74 <_printf_float+0x2b4>
 8004e96:	bf00      	nop
 8004e98:	7fefffff 	.word	0x7fefffff
 8004e9c:	080083dc 	.word	0x080083dc
 8004ea0:	080083e0 	.word	0x080083e0
 8004ea4:	080083e4 	.word	0x080083e4
 8004ea8:	080083e8 	.word	0x080083e8
 8004eac:	08008764 	.word	0x08008764
 8004eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	bfa8      	it	ge
 8004eb8:	461a      	movge	r2, r3
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	4691      	mov	r9, r2
 8004ebe:	dc37      	bgt.n	8004f30 <_printf_float+0x370>
 8004ec0:	f04f 0b00 	mov.w	fp, #0
 8004ec4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ec8:	f104 021a 	add.w	r2, r4, #26
 8004ecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ece:	9305      	str	r3, [sp, #20]
 8004ed0:	eba3 0309 	sub.w	r3, r3, r9
 8004ed4:	455b      	cmp	r3, fp
 8004ed6:	dc33      	bgt.n	8004f40 <_printf_float+0x380>
 8004ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004edc:	429a      	cmp	r2, r3
 8004ede:	db3b      	blt.n	8004f58 <_printf_float+0x398>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07da      	lsls	r2, r3, #31
 8004ee4:	d438      	bmi.n	8004f58 <_printf_float+0x398>
 8004ee6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004eea:	eba2 0903 	sub.w	r9, r2, r3
 8004eee:	9b05      	ldr	r3, [sp, #20]
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	4591      	cmp	r9, r2
 8004ef4:	bfa8      	it	ge
 8004ef6:	4691      	movge	r9, r2
 8004ef8:	f1b9 0f00 	cmp.w	r9, #0
 8004efc:	dc35      	bgt.n	8004f6a <_printf_float+0x3aa>
 8004efe:	f04f 0800 	mov.w	r8, #0
 8004f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f06:	f104 0a1a 	add.w	sl, r4, #26
 8004f0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	eba3 0309 	sub.w	r3, r3, r9
 8004f14:	4543      	cmp	r3, r8
 8004f16:	f77f af79 	ble.w	8004e0c <_printf_float+0x24c>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f aeaa 	beq.w	8004c7e <_printf_float+0xbe>
 8004f2a:	f108 0801 	add.w	r8, r8, #1
 8004f2e:	e7ec      	b.n	8004f0a <_printf_float+0x34a>
 8004f30:	4613      	mov	r3, r2
 8004f32:	4631      	mov	r1, r6
 8004f34:	4642      	mov	r2, r8
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d1c0      	bne.n	8004ec0 <_printf_float+0x300>
 8004f3e:	e69e      	b.n	8004c7e <_printf_float+0xbe>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	9205      	str	r2, [sp, #20]
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f43f ae97 	beq.w	8004c7e <_printf_float+0xbe>
 8004f50:	9a05      	ldr	r2, [sp, #20]
 8004f52:	f10b 0b01 	add.w	fp, fp, #1
 8004f56:	e7b9      	b.n	8004ecc <_printf_float+0x30c>
 8004f58:	ee18 3a10 	vmov	r3, s16
 8004f5c:	4652      	mov	r2, sl
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	d1be      	bne.n	8004ee6 <_printf_float+0x326>
 8004f68:	e689      	b.n	8004c7e <_printf_float+0xbe>
 8004f6a:	9a05      	ldr	r2, [sp, #20]
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	4442      	add	r2, r8
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	d1c1      	bne.n	8004efe <_printf_float+0x33e>
 8004f7a:	e680      	b.n	8004c7e <_printf_float+0xbe>
 8004f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7e:	2a01      	cmp	r2, #1
 8004f80:	dc01      	bgt.n	8004f86 <_printf_float+0x3c6>
 8004f82:	07db      	lsls	r3, r3, #31
 8004f84:	d53a      	bpl.n	8004ffc <_printf_float+0x43c>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4642      	mov	r2, r8
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	47b8      	blx	r7
 8004f90:	3001      	adds	r0, #1
 8004f92:	f43f ae74 	beq.w	8004c7e <_printf_float+0xbe>
 8004f96:	ee18 3a10 	vmov	r3, s16
 8004f9a:	4652      	mov	r2, sl
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f43f ae6b 	beq.w	8004c7e <_printf_float+0xbe>
 8004fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004fb4:	f7fb fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fb8:	b9d8      	cbnz	r0, 8004ff2 <_printf_float+0x432>
 8004fba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004fbe:	f108 0201 	add.w	r2, r8, #1
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b8      	blx	r7
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d10e      	bne.n	8004fea <_printf_float+0x42a>
 8004fcc:	e657      	b.n	8004c7e <_printf_float+0xbe>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4652      	mov	r2, sl
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f43f ae50 	beq.w	8004c7e <_printf_float+0xbe>
 8004fde:	f108 0801 	add.w	r8, r8, #1
 8004fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	4543      	cmp	r3, r8
 8004fe8:	dcf1      	bgt.n	8004fce <_printf_float+0x40e>
 8004fea:	464b      	mov	r3, r9
 8004fec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ff0:	e6da      	b.n	8004da8 <_printf_float+0x1e8>
 8004ff2:	f04f 0800 	mov.w	r8, #0
 8004ff6:	f104 0a1a 	add.w	sl, r4, #26
 8004ffa:	e7f2      	b.n	8004fe2 <_printf_float+0x422>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4642      	mov	r2, r8
 8005000:	e7df      	b.n	8004fc2 <_printf_float+0x402>
 8005002:	2301      	movs	r3, #1
 8005004:	464a      	mov	r2, r9
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	f43f ae36 	beq.w	8004c7e <_printf_float+0xbe>
 8005012:	f108 0801 	add.w	r8, r8, #1
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800501a:	1a5b      	subs	r3, r3, r1
 800501c:	4543      	cmp	r3, r8
 800501e:	dcf0      	bgt.n	8005002 <_printf_float+0x442>
 8005020:	e6f8      	b.n	8004e14 <_printf_float+0x254>
 8005022:	f04f 0800 	mov.w	r8, #0
 8005026:	f104 0919 	add.w	r9, r4, #25
 800502a:	e7f4      	b.n	8005016 <_printf_float+0x456>

0800502c <_printf_common>:
 800502c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005030:	4616      	mov	r6, r2
 8005032:	4699      	mov	r9, r3
 8005034:	688a      	ldr	r2, [r1, #8]
 8005036:	690b      	ldr	r3, [r1, #16]
 8005038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800503c:	4293      	cmp	r3, r2
 800503e:	bfb8      	it	lt
 8005040:	4613      	movlt	r3, r2
 8005042:	6033      	str	r3, [r6, #0]
 8005044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005048:	4607      	mov	r7, r0
 800504a:	460c      	mov	r4, r1
 800504c:	b10a      	cbz	r2, 8005052 <_printf_common+0x26>
 800504e:	3301      	adds	r3, #1
 8005050:	6033      	str	r3, [r6, #0]
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	0699      	lsls	r1, r3, #26
 8005056:	bf42      	ittt	mi
 8005058:	6833      	ldrmi	r3, [r6, #0]
 800505a:	3302      	addmi	r3, #2
 800505c:	6033      	strmi	r3, [r6, #0]
 800505e:	6825      	ldr	r5, [r4, #0]
 8005060:	f015 0506 	ands.w	r5, r5, #6
 8005064:	d106      	bne.n	8005074 <_printf_common+0x48>
 8005066:	f104 0a19 	add.w	sl, r4, #25
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	6832      	ldr	r2, [r6, #0]
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	42ab      	cmp	r3, r5
 8005072:	dc26      	bgt.n	80050c2 <_printf_common+0x96>
 8005074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005078:	1e13      	subs	r3, r2, #0
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	bf18      	it	ne
 800507e:	2301      	movne	r3, #1
 8005080:	0692      	lsls	r2, r2, #26
 8005082:	d42b      	bmi.n	80050dc <_printf_common+0xb0>
 8005084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005088:	4649      	mov	r1, r9
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	3001      	adds	r0, #1
 8005090:	d01e      	beq.n	80050d0 <_printf_common+0xa4>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	f003 0306 	and.w	r3, r3, #6
 800509a:	2b04      	cmp	r3, #4
 800509c:	bf02      	ittt	eq
 800509e:	68e5      	ldreq	r5, [r4, #12]
 80050a0:	6833      	ldreq	r3, [r6, #0]
 80050a2:	1aed      	subeq	r5, r5, r3
 80050a4:	68a3      	ldr	r3, [r4, #8]
 80050a6:	bf0c      	ite	eq
 80050a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ac:	2500      	movne	r5, #0
 80050ae:	4293      	cmp	r3, r2
 80050b0:	bfc4      	itt	gt
 80050b2:	1a9b      	subgt	r3, r3, r2
 80050b4:	18ed      	addgt	r5, r5, r3
 80050b6:	2600      	movs	r6, #0
 80050b8:	341a      	adds	r4, #26
 80050ba:	42b5      	cmp	r5, r6
 80050bc:	d11a      	bne.n	80050f4 <_printf_common+0xc8>
 80050be:	2000      	movs	r0, #0
 80050c0:	e008      	b.n	80050d4 <_printf_common+0xa8>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4652      	mov	r2, sl
 80050c6:	4649      	mov	r1, r9
 80050c8:	4638      	mov	r0, r7
 80050ca:	47c0      	blx	r8
 80050cc:	3001      	adds	r0, #1
 80050ce:	d103      	bne.n	80050d8 <_printf_common+0xac>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d8:	3501      	adds	r5, #1
 80050da:	e7c6      	b.n	800506a <_printf_common+0x3e>
 80050dc:	18e1      	adds	r1, r4, r3
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	2030      	movs	r0, #48	; 0x30
 80050e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050e6:	4422      	add	r2, r4
 80050e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f0:	3302      	adds	r3, #2
 80050f2:	e7c7      	b.n	8005084 <_printf_common+0x58>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4622      	mov	r2, r4
 80050f8:	4649      	mov	r1, r9
 80050fa:	4638      	mov	r0, r7
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d0e6      	beq.n	80050d0 <_printf_common+0xa4>
 8005102:	3601      	adds	r6, #1
 8005104:	e7d9      	b.n	80050ba <_printf_common+0x8e>
	...

08005108 <_printf_i>:
 8005108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	7e0f      	ldrb	r7, [r1, #24]
 800510e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005110:	2f78      	cmp	r7, #120	; 0x78
 8005112:	4691      	mov	r9, r2
 8005114:	4680      	mov	r8, r0
 8005116:	460c      	mov	r4, r1
 8005118:	469a      	mov	sl, r3
 800511a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800511e:	d807      	bhi.n	8005130 <_printf_i+0x28>
 8005120:	2f62      	cmp	r7, #98	; 0x62
 8005122:	d80a      	bhi.n	800513a <_printf_i+0x32>
 8005124:	2f00      	cmp	r7, #0
 8005126:	f000 80d4 	beq.w	80052d2 <_printf_i+0x1ca>
 800512a:	2f58      	cmp	r7, #88	; 0x58
 800512c:	f000 80c0 	beq.w	80052b0 <_printf_i+0x1a8>
 8005130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005138:	e03a      	b.n	80051b0 <_printf_i+0xa8>
 800513a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800513e:	2b15      	cmp	r3, #21
 8005140:	d8f6      	bhi.n	8005130 <_printf_i+0x28>
 8005142:	a101      	add	r1, pc, #4	; (adr r1, 8005148 <_printf_i+0x40>)
 8005144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005148:	080051a1 	.word	0x080051a1
 800514c:	080051b5 	.word	0x080051b5
 8005150:	08005131 	.word	0x08005131
 8005154:	08005131 	.word	0x08005131
 8005158:	08005131 	.word	0x08005131
 800515c:	08005131 	.word	0x08005131
 8005160:	080051b5 	.word	0x080051b5
 8005164:	08005131 	.word	0x08005131
 8005168:	08005131 	.word	0x08005131
 800516c:	08005131 	.word	0x08005131
 8005170:	08005131 	.word	0x08005131
 8005174:	080052b9 	.word	0x080052b9
 8005178:	080051e1 	.word	0x080051e1
 800517c:	08005273 	.word	0x08005273
 8005180:	08005131 	.word	0x08005131
 8005184:	08005131 	.word	0x08005131
 8005188:	080052db 	.word	0x080052db
 800518c:	08005131 	.word	0x08005131
 8005190:	080051e1 	.word	0x080051e1
 8005194:	08005131 	.word	0x08005131
 8005198:	08005131 	.word	0x08005131
 800519c:	0800527b 	.word	0x0800527b
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	602a      	str	r2, [r5, #0]
 80051a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b0:	2301      	movs	r3, #1
 80051b2:	e09f      	b.n	80052f4 <_printf_i+0x1ec>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	0607      	lsls	r7, r0, #24
 80051ba:	f103 0104 	add.w	r1, r3, #4
 80051be:	6029      	str	r1, [r5, #0]
 80051c0:	d501      	bpl.n	80051c6 <_printf_i+0xbe>
 80051c2:	681e      	ldr	r6, [r3, #0]
 80051c4:	e003      	b.n	80051ce <_printf_i+0xc6>
 80051c6:	0646      	lsls	r6, r0, #25
 80051c8:	d5fb      	bpl.n	80051c2 <_printf_i+0xba>
 80051ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	da03      	bge.n	80051da <_printf_i+0xd2>
 80051d2:	232d      	movs	r3, #45	; 0x2d
 80051d4:	4276      	negs	r6, r6
 80051d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051da:	485a      	ldr	r0, [pc, #360]	; (8005344 <_printf_i+0x23c>)
 80051dc:	230a      	movs	r3, #10
 80051de:	e012      	b.n	8005206 <_printf_i+0xfe>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	1d19      	adds	r1, r3, #4
 80051e6:	6029      	str	r1, [r5, #0]
 80051e8:	0605      	lsls	r5, r0, #24
 80051ea:	d501      	bpl.n	80051f0 <_printf_i+0xe8>
 80051ec:	681e      	ldr	r6, [r3, #0]
 80051ee:	e002      	b.n	80051f6 <_printf_i+0xee>
 80051f0:	0641      	lsls	r1, r0, #25
 80051f2:	d5fb      	bpl.n	80051ec <_printf_i+0xe4>
 80051f4:	881e      	ldrh	r6, [r3, #0]
 80051f6:	4853      	ldr	r0, [pc, #332]	; (8005344 <_printf_i+0x23c>)
 80051f8:	2f6f      	cmp	r7, #111	; 0x6f
 80051fa:	bf0c      	ite	eq
 80051fc:	2308      	moveq	r3, #8
 80051fe:	230a      	movne	r3, #10
 8005200:	2100      	movs	r1, #0
 8005202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005206:	6865      	ldr	r5, [r4, #4]
 8005208:	60a5      	str	r5, [r4, #8]
 800520a:	2d00      	cmp	r5, #0
 800520c:	bfa2      	ittt	ge
 800520e:	6821      	ldrge	r1, [r4, #0]
 8005210:	f021 0104 	bicge.w	r1, r1, #4
 8005214:	6021      	strge	r1, [r4, #0]
 8005216:	b90e      	cbnz	r6, 800521c <_printf_i+0x114>
 8005218:	2d00      	cmp	r5, #0
 800521a:	d04b      	beq.n	80052b4 <_printf_i+0x1ac>
 800521c:	4615      	mov	r5, r2
 800521e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005222:	fb03 6711 	mls	r7, r3, r1, r6
 8005226:	5dc7      	ldrb	r7, [r0, r7]
 8005228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800522c:	4637      	mov	r7, r6
 800522e:	42bb      	cmp	r3, r7
 8005230:	460e      	mov	r6, r1
 8005232:	d9f4      	bls.n	800521e <_printf_i+0x116>
 8005234:	2b08      	cmp	r3, #8
 8005236:	d10b      	bne.n	8005250 <_printf_i+0x148>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	07de      	lsls	r6, r3, #31
 800523c:	d508      	bpl.n	8005250 <_printf_i+0x148>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	6861      	ldr	r1, [r4, #4]
 8005242:	4299      	cmp	r1, r3
 8005244:	bfde      	ittt	le
 8005246:	2330      	movle	r3, #48	; 0x30
 8005248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800524c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005250:	1b52      	subs	r2, r2, r5
 8005252:	6122      	str	r2, [r4, #16]
 8005254:	f8cd a000 	str.w	sl, [sp]
 8005258:	464b      	mov	r3, r9
 800525a:	aa03      	add	r2, sp, #12
 800525c:	4621      	mov	r1, r4
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fee4 	bl	800502c <_printf_common>
 8005264:	3001      	adds	r0, #1
 8005266:	d14a      	bne.n	80052fe <_printf_i+0x1f6>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	b004      	add	sp, #16
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	4833      	ldr	r0, [pc, #204]	; (8005348 <_printf_i+0x240>)
 800527c:	2778      	movs	r7, #120	; 0x78
 800527e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	6829      	ldr	r1, [r5, #0]
 8005286:	061f      	lsls	r7, r3, #24
 8005288:	f851 6b04 	ldr.w	r6, [r1], #4
 800528c:	d402      	bmi.n	8005294 <_printf_i+0x18c>
 800528e:	065f      	lsls	r7, r3, #25
 8005290:	bf48      	it	mi
 8005292:	b2b6      	uxthmi	r6, r6
 8005294:	07df      	lsls	r7, r3, #31
 8005296:	bf48      	it	mi
 8005298:	f043 0320 	orrmi.w	r3, r3, #32
 800529c:	6029      	str	r1, [r5, #0]
 800529e:	bf48      	it	mi
 80052a0:	6023      	strmi	r3, [r4, #0]
 80052a2:	b91e      	cbnz	r6, 80052ac <_printf_i+0x1a4>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f023 0320 	bic.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2310      	movs	r3, #16
 80052ae:	e7a7      	b.n	8005200 <_printf_i+0xf8>
 80052b0:	4824      	ldr	r0, [pc, #144]	; (8005344 <_printf_i+0x23c>)
 80052b2:	e7e4      	b.n	800527e <_printf_i+0x176>
 80052b4:	4615      	mov	r5, r2
 80052b6:	e7bd      	b.n	8005234 <_printf_i+0x12c>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	6826      	ldr	r6, [r4, #0]
 80052bc:	6961      	ldr	r1, [r4, #20]
 80052be:	1d18      	adds	r0, r3, #4
 80052c0:	6028      	str	r0, [r5, #0]
 80052c2:	0635      	lsls	r5, r6, #24
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	d501      	bpl.n	80052cc <_printf_i+0x1c4>
 80052c8:	6019      	str	r1, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_printf_i+0x1ca>
 80052cc:	0670      	lsls	r0, r6, #25
 80052ce:	d5fb      	bpl.n	80052c8 <_printf_i+0x1c0>
 80052d0:	8019      	strh	r1, [r3, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	4615      	mov	r5, r2
 80052d8:	e7bc      	b.n	8005254 <_printf_i+0x14c>
 80052da:	682b      	ldr	r3, [r5, #0]
 80052dc:	1d1a      	adds	r2, r3, #4
 80052de:	602a      	str	r2, [r5, #0]
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	6862      	ldr	r2, [r4, #4]
 80052e4:	2100      	movs	r1, #0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f7fa ff72 	bl	80001d0 <memchr>
 80052ec:	b108      	cbz	r0, 80052f2 <_printf_i+0x1ea>
 80052ee:	1b40      	subs	r0, r0, r5
 80052f0:	6060      	str	r0, [r4, #4]
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	2300      	movs	r3, #0
 80052f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052fc:	e7aa      	b.n	8005254 <_printf_i+0x14c>
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	462a      	mov	r2, r5
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	47d0      	blx	sl
 8005308:	3001      	adds	r0, #1
 800530a:	d0ad      	beq.n	8005268 <_printf_i+0x160>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	079b      	lsls	r3, r3, #30
 8005310:	d413      	bmi.n	800533a <_printf_i+0x232>
 8005312:	68e0      	ldr	r0, [r4, #12]
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	4298      	cmp	r0, r3
 8005318:	bfb8      	it	lt
 800531a:	4618      	movlt	r0, r3
 800531c:	e7a6      	b.n	800526c <_printf_i+0x164>
 800531e:	2301      	movs	r3, #1
 8005320:	4632      	mov	r2, r6
 8005322:	4649      	mov	r1, r9
 8005324:	4640      	mov	r0, r8
 8005326:	47d0      	blx	sl
 8005328:	3001      	adds	r0, #1
 800532a:	d09d      	beq.n	8005268 <_printf_i+0x160>
 800532c:	3501      	adds	r5, #1
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	9903      	ldr	r1, [sp, #12]
 8005332:	1a5b      	subs	r3, r3, r1
 8005334:	42ab      	cmp	r3, r5
 8005336:	dcf2      	bgt.n	800531e <_printf_i+0x216>
 8005338:	e7eb      	b.n	8005312 <_printf_i+0x20a>
 800533a:	2500      	movs	r5, #0
 800533c:	f104 0619 	add.w	r6, r4, #25
 8005340:	e7f5      	b.n	800532e <_printf_i+0x226>
 8005342:	bf00      	nop
 8005344:	080083ec 	.word	0x080083ec
 8005348:	080083fd 	.word	0x080083fd

0800534c <std>:
 800534c:	2300      	movs	r3, #0
 800534e:	b510      	push	{r4, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	e9c0 3300 	strd	r3, r3, [r0]
 8005356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800535a:	6083      	str	r3, [r0, #8]
 800535c:	8181      	strh	r1, [r0, #12]
 800535e:	6643      	str	r3, [r0, #100]	; 0x64
 8005360:	81c2      	strh	r2, [r0, #14]
 8005362:	6183      	str	r3, [r0, #24]
 8005364:	4619      	mov	r1, r3
 8005366:	2208      	movs	r2, #8
 8005368:	305c      	adds	r0, #92	; 0x5c
 800536a:	f000 fa33 	bl	80057d4 <memset>
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <std+0x38>)
 8005370:	6263      	str	r3, [r4, #36]	; 0x24
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <std+0x3c>)
 8005374:	62a3      	str	r3, [r4, #40]	; 0x28
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <std+0x40>)
 8005378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800537a:	4b05      	ldr	r3, [pc, #20]	; (8005390 <std+0x44>)
 800537c:	6224      	str	r4, [r4, #32]
 800537e:	6323      	str	r3, [r4, #48]	; 0x30
 8005380:	bd10      	pop	{r4, pc}
 8005382:	bf00      	nop
 8005384:	08005621 	.word	0x08005621
 8005388:	08005647 	.word	0x08005647
 800538c:	0800567f 	.word	0x0800567f
 8005390:	080056a3 	.word	0x080056a3

08005394 <stdio_exit_handler>:
 8005394:	4a02      	ldr	r2, [pc, #8]	; (80053a0 <stdio_exit_handler+0xc>)
 8005396:	4903      	ldr	r1, [pc, #12]	; (80053a4 <stdio_exit_handler+0x10>)
 8005398:	4803      	ldr	r0, [pc, #12]	; (80053a8 <stdio_exit_handler+0x14>)
 800539a:	f000 b869 	b.w	8005470 <_fwalk_sglue>
 800539e:	bf00      	nop
 80053a0:	2000000c 	.word	0x2000000c
 80053a4:	08007c09 	.word	0x08007c09
 80053a8:	20000184 	.word	0x20000184

080053ac <cleanup_stdio>:
 80053ac:	6841      	ldr	r1, [r0, #4]
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <cleanup_stdio+0x34>)
 80053b0:	4299      	cmp	r1, r3
 80053b2:	b510      	push	{r4, lr}
 80053b4:	4604      	mov	r4, r0
 80053b6:	d001      	beq.n	80053bc <cleanup_stdio+0x10>
 80053b8:	f002 fc26 	bl	8007c08 <_fflush_r>
 80053bc:	68a1      	ldr	r1, [r4, #8]
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <cleanup_stdio+0x38>)
 80053c0:	4299      	cmp	r1, r3
 80053c2:	d002      	beq.n	80053ca <cleanup_stdio+0x1e>
 80053c4:	4620      	mov	r0, r4
 80053c6:	f002 fc1f 	bl	8007c08 <_fflush_r>
 80053ca:	68e1      	ldr	r1, [r4, #12]
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <cleanup_stdio+0x3c>)
 80053ce:	4299      	cmp	r1, r3
 80053d0:	d004      	beq.n	80053dc <cleanup_stdio+0x30>
 80053d2:	4620      	mov	r0, r4
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d8:	f002 bc16 	b.w	8007c08 <_fflush_r>
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	bf00      	nop
 80053e0:	20000750 	.word	0x20000750
 80053e4:	200007b8 	.word	0x200007b8
 80053e8:	20000820 	.word	0x20000820

080053ec <global_stdio_init.part.0>:
 80053ec:	b510      	push	{r4, lr}
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <global_stdio_init.part.0+0x30>)
 80053f0:	4c0b      	ldr	r4, [pc, #44]	; (8005420 <global_stdio_init.part.0+0x34>)
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <global_stdio_init.part.0+0x38>)
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	4620      	mov	r0, r4
 80053f8:	2200      	movs	r2, #0
 80053fa:	2104      	movs	r1, #4
 80053fc:	f7ff ffa6 	bl	800534c <std>
 8005400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005404:	2201      	movs	r2, #1
 8005406:	2109      	movs	r1, #9
 8005408:	f7ff ffa0 	bl	800534c <std>
 800540c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005410:	2202      	movs	r2, #2
 8005412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005416:	2112      	movs	r1, #18
 8005418:	f7ff bf98 	b.w	800534c <std>
 800541c:	20000888 	.word	0x20000888
 8005420:	20000750 	.word	0x20000750
 8005424:	08005395 	.word	0x08005395

08005428 <__sfp_lock_acquire>:
 8005428:	4801      	ldr	r0, [pc, #4]	; (8005430 <__sfp_lock_acquire+0x8>)
 800542a:	f000 ba65 	b.w	80058f8 <__retarget_lock_acquire_recursive>
 800542e:	bf00      	nop
 8005430:	20000891 	.word	0x20000891

08005434 <__sfp_lock_release>:
 8005434:	4801      	ldr	r0, [pc, #4]	; (800543c <__sfp_lock_release+0x8>)
 8005436:	f000 ba60 	b.w	80058fa <__retarget_lock_release_recursive>
 800543a:	bf00      	nop
 800543c:	20000891 	.word	0x20000891

08005440 <__sinit>:
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
 8005444:	f7ff fff0 	bl	8005428 <__sfp_lock_acquire>
 8005448:	6a23      	ldr	r3, [r4, #32]
 800544a:	b11b      	cbz	r3, 8005454 <__sinit+0x14>
 800544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005450:	f7ff bff0 	b.w	8005434 <__sfp_lock_release>
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <__sinit+0x28>)
 8005456:	6223      	str	r3, [r4, #32]
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <__sinit+0x2c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f5      	bne.n	800544c <__sinit+0xc>
 8005460:	f7ff ffc4 	bl	80053ec <global_stdio_init.part.0>
 8005464:	e7f2      	b.n	800544c <__sinit+0xc>
 8005466:	bf00      	nop
 8005468:	080053ad 	.word	0x080053ad
 800546c:	20000888 	.word	0x20000888

08005470 <_fwalk_sglue>:
 8005470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005474:	4607      	mov	r7, r0
 8005476:	4688      	mov	r8, r1
 8005478:	4614      	mov	r4, r2
 800547a:	2600      	movs	r6, #0
 800547c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005480:	f1b9 0901 	subs.w	r9, r9, #1
 8005484:	d505      	bpl.n	8005492 <_fwalk_sglue+0x22>
 8005486:	6824      	ldr	r4, [r4, #0]
 8005488:	2c00      	cmp	r4, #0
 800548a:	d1f7      	bne.n	800547c <_fwalk_sglue+0xc>
 800548c:	4630      	mov	r0, r6
 800548e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d907      	bls.n	80054a8 <_fwalk_sglue+0x38>
 8005498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800549c:	3301      	adds	r3, #1
 800549e:	d003      	beq.n	80054a8 <_fwalk_sglue+0x38>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c0      	blx	r8
 80054a6:	4306      	orrs	r6, r0
 80054a8:	3568      	adds	r5, #104	; 0x68
 80054aa:	e7e9      	b.n	8005480 <_fwalk_sglue+0x10>

080054ac <iprintf>:
 80054ac:	b40f      	push	{r0, r1, r2, r3}
 80054ae:	b507      	push	{r0, r1, r2, lr}
 80054b0:	4906      	ldr	r1, [pc, #24]	; (80054cc <iprintf+0x20>)
 80054b2:	ab04      	add	r3, sp, #16
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ba:	6881      	ldr	r1, [r0, #8]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	f002 f8b5 	bl	800762c <_vfiprintf_r>
 80054c2:	b003      	add	sp, #12
 80054c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c8:	b004      	add	sp, #16
 80054ca:	4770      	bx	lr
 80054cc:	200001d0 	.word	0x200001d0

080054d0 <_puts_r>:
 80054d0:	6a03      	ldr	r3, [r0, #32]
 80054d2:	b570      	push	{r4, r5, r6, lr}
 80054d4:	6884      	ldr	r4, [r0, #8]
 80054d6:	4605      	mov	r5, r0
 80054d8:	460e      	mov	r6, r1
 80054da:	b90b      	cbnz	r3, 80054e0 <_puts_r+0x10>
 80054dc:	f7ff ffb0 	bl	8005440 <__sinit>
 80054e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054e2:	07db      	lsls	r3, r3, #31
 80054e4:	d405      	bmi.n	80054f2 <_puts_r+0x22>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	0598      	lsls	r0, r3, #22
 80054ea:	d402      	bmi.n	80054f2 <_puts_r+0x22>
 80054ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ee:	f000 fa03 	bl	80058f8 <__retarget_lock_acquire_recursive>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	0719      	lsls	r1, r3, #28
 80054f6:	d513      	bpl.n	8005520 <_puts_r+0x50>
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	b18b      	cbz	r3, 8005520 <_puts_r+0x50>
 80054fc:	3e01      	subs	r6, #1
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005504:	3b01      	subs	r3, #1
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	b9e9      	cbnz	r1, 8005546 <_puts_r+0x76>
 800550a:	2b00      	cmp	r3, #0
 800550c:	da2e      	bge.n	800556c <_puts_r+0x9c>
 800550e:	4622      	mov	r2, r4
 8005510:	210a      	movs	r1, #10
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f8c9 	bl	80056aa <__swbuf_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d007      	beq.n	800552c <_puts_r+0x5c>
 800551c:	250a      	movs	r5, #10
 800551e:	e007      	b.n	8005530 <_puts_r+0x60>
 8005520:	4621      	mov	r1, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f000 f8fe 	bl	8005724 <__swsetup_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	d0e7      	beq.n	80054fc <_puts_r+0x2c>
 800552c:	f04f 35ff 	mov.w	r5, #4294967295
 8005530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005532:	07da      	lsls	r2, r3, #31
 8005534:	d405      	bmi.n	8005542 <_puts_r+0x72>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	059b      	lsls	r3, r3, #22
 800553a:	d402      	bmi.n	8005542 <_puts_r+0x72>
 800553c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800553e:	f000 f9dc 	bl	80058fa <__retarget_lock_release_recursive>
 8005542:	4628      	mov	r0, r5
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	2b00      	cmp	r3, #0
 8005548:	da04      	bge.n	8005554 <_puts_r+0x84>
 800554a:	69a2      	ldr	r2, [r4, #24]
 800554c:	429a      	cmp	r2, r3
 800554e:	dc06      	bgt.n	800555e <_puts_r+0x8e>
 8005550:	290a      	cmp	r1, #10
 8005552:	d004      	beq.n	800555e <_puts_r+0x8e>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	6022      	str	r2, [r4, #0]
 800555a:	7019      	strb	r1, [r3, #0]
 800555c:	e7cf      	b.n	80054fe <_puts_r+0x2e>
 800555e:	4622      	mov	r2, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f000 f8a2 	bl	80056aa <__swbuf_r>
 8005566:	3001      	adds	r0, #1
 8005568:	d1c9      	bne.n	80054fe <_puts_r+0x2e>
 800556a:	e7df      	b.n	800552c <_puts_r+0x5c>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	250a      	movs	r5, #10
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	6022      	str	r2, [r4, #0]
 8005574:	701d      	strb	r5, [r3, #0]
 8005576:	e7db      	b.n	8005530 <_puts_r+0x60>

08005578 <puts>:
 8005578:	4b02      	ldr	r3, [pc, #8]	; (8005584 <puts+0xc>)
 800557a:	4601      	mov	r1, r0
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	f7ff bfa7 	b.w	80054d0 <_puts_r>
 8005582:	bf00      	nop
 8005584:	200001d0 	.word	0x200001d0

08005588 <siprintf>:
 8005588:	b40e      	push	{r1, r2, r3}
 800558a:	b500      	push	{lr}
 800558c:	b09c      	sub	sp, #112	; 0x70
 800558e:	ab1d      	add	r3, sp, #116	; 0x74
 8005590:	9002      	str	r0, [sp, #8]
 8005592:	9006      	str	r0, [sp, #24]
 8005594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005598:	4809      	ldr	r0, [pc, #36]	; (80055c0 <siprintf+0x38>)
 800559a:	9107      	str	r1, [sp, #28]
 800559c:	9104      	str	r1, [sp, #16]
 800559e:	4909      	ldr	r1, [pc, #36]	; (80055c4 <siprintf+0x3c>)
 80055a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a4:	9105      	str	r1, [sp, #20]
 80055a6:	6800      	ldr	r0, [r0, #0]
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	a902      	add	r1, sp, #8
 80055ac:	f001 fd44 	bl	8007038 <_svfiprintf_r>
 80055b0:	9b02      	ldr	r3, [sp, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	b01c      	add	sp, #112	; 0x70
 80055b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055bc:	b003      	add	sp, #12
 80055be:	4770      	bx	lr
 80055c0:	200001d0 	.word	0x200001d0
 80055c4:	ffff0208 	.word	0xffff0208

080055c8 <siscanf>:
 80055c8:	b40e      	push	{r1, r2, r3}
 80055ca:	b510      	push	{r4, lr}
 80055cc:	b09f      	sub	sp, #124	; 0x7c
 80055ce:	ac21      	add	r4, sp, #132	; 0x84
 80055d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80055d8:	9201      	str	r2, [sp, #4]
 80055da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80055de:	9004      	str	r0, [sp, #16]
 80055e0:	9008      	str	r0, [sp, #32]
 80055e2:	f7fa fe45 	bl	8000270 <strlen>
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <siscanf+0x50>)
 80055e8:	9005      	str	r0, [sp, #20]
 80055ea:	9009      	str	r0, [sp, #36]	; 0x24
 80055ec:	930d      	str	r3, [sp, #52]	; 0x34
 80055ee:	480b      	ldr	r0, [pc, #44]	; (800561c <siscanf+0x54>)
 80055f0:	9a01      	ldr	r2, [sp, #4]
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	9403      	str	r4, [sp, #12]
 80055f6:	2300      	movs	r3, #0
 80055f8:	9311      	str	r3, [sp, #68]	; 0x44
 80055fa:	9316      	str	r3, [sp, #88]	; 0x58
 80055fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005600:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005604:	a904      	add	r1, sp, #16
 8005606:	4623      	mov	r3, r4
 8005608:	f001 fe6e 	bl	80072e8 <__ssvfiscanf_r>
 800560c:	b01f      	add	sp, #124	; 0x7c
 800560e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005612:	b003      	add	sp, #12
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	08005643 	.word	0x08005643
 800561c:	200001d0 	.word	0x200001d0

08005620 <__sread>:
 8005620:	b510      	push	{r4, lr}
 8005622:	460c      	mov	r4, r1
 8005624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005628:	f000 f918 	bl	800585c <_read_r>
 800562c:	2800      	cmp	r0, #0
 800562e:	bfab      	itete	ge
 8005630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005632:	89a3      	ldrhlt	r3, [r4, #12]
 8005634:	181b      	addge	r3, r3, r0
 8005636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800563a:	bfac      	ite	ge
 800563c:	6563      	strge	r3, [r4, #84]	; 0x54
 800563e:	81a3      	strhlt	r3, [r4, #12]
 8005640:	bd10      	pop	{r4, pc}

08005642 <__seofread>:
 8005642:	2000      	movs	r0, #0
 8005644:	4770      	bx	lr

08005646 <__swrite>:
 8005646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564a:	461f      	mov	r7, r3
 800564c:	898b      	ldrh	r3, [r1, #12]
 800564e:	05db      	lsls	r3, r3, #23
 8005650:	4605      	mov	r5, r0
 8005652:	460c      	mov	r4, r1
 8005654:	4616      	mov	r6, r2
 8005656:	d505      	bpl.n	8005664 <__swrite+0x1e>
 8005658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565c:	2302      	movs	r3, #2
 800565e:	2200      	movs	r2, #0
 8005660:	f000 f8ea 	bl	8005838 <_lseek_r>
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800566a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	4632      	mov	r2, r6
 8005672:	463b      	mov	r3, r7
 8005674:	4628      	mov	r0, r5
 8005676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	f000 b901 	b.w	8005880 <_write_r>

0800567e <__sseek>:
 800567e:	b510      	push	{r4, lr}
 8005680:	460c      	mov	r4, r1
 8005682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005686:	f000 f8d7 	bl	8005838 <_lseek_r>
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	bf15      	itete	ne
 8005690:	6560      	strne	r0, [r4, #84]	; 0x54
 8005692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800569a:	81a3      	strheq	r3, [r4, #12]
 800569c:	bf18      	it	ne
 800569e:	81a3      	strhne	r3, [r4, #12]
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <__sclose>:
 80056a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a6:	f000 b8b7 	b.w	8005818 <_close_r>

080056aa <__swbuf_r>:
 80056aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ac:	460e      	mov	r6, r1
 80056ae:	4614      	mov	r4, r2
 80056b0:	4605      	mov	r5, r0
 80056b2:	b118      	cbz	r0, 80056bc <__swbuf_r+0x12>
 80056b4:	6a03      	ldr	r3, [r0, #32]
 80056b6:	b90b      	cbnz	r3, 80056bc <__swbuf_r+0x12>
 80056b8:	f7ff fec2 	bl	8005440 <__sinit>
 80056bc:	69a3      	ldr	r3, [r4, #24]
 80056be:	60a3      	str	r3, [r4, #8]
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	071a      	lsls	r2, r3, #28
 80056c4:	d525      	bpl.n	8005712 <__swbuf_r+0x68>
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	b31b      	cbz	r3, 8005712 <__swbuf_r+0x68>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	6922      	ldr	r2, [r4, #16]
 80056ce:	1a98      	subs	r0, r3, r2
 80056d0:	6963      	ldr	r3, [r4, #20]
 80056d2:	b2f6      	uxtb	r6, r6
 80056d4:	4283      	cmp	r3, r0
 80056d6:	4637      	mov	r7, r6
 80056d8:	dc04      	bgt.n	80056e4 <__swbuf_r+0x3a>
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f002 fa93 	bl	8007c08 <_fflush_r>
 80056e2:	b9e0      	cbnz	r0, 800571e <__swbuf_r+0x74>
 80056e4:	68a3      	ldr	r3, [r4, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60a3      	str	r3, [r4, #8]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	6022      	str	r2, [r4, #0]
 80056f0:	701e      	strb	r6, [r3, #0]
 80056f2:	6962      	ldr	r2, [r4, #20]
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d004      	beq.n	8005704 <__swbuf_r+0x5a>
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	07db      	lsls	r3, r3, #31
 80056fe:	d506      	bpl.n	800570e <__swbuf_r+0x64>
 8005700:	2e0a      	cmp	r6, #10
 8005702:	d104      	bne.n	800570e <__swbuf_r+0x64>
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f002 fa7e 	bl	8007c08 <_fflush_r>
 800570c:	b938      	cbnz	r0, 800571e <__swbuf_r+0x74>
 800570e:	4638      	mov	r0, r7
 8005710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005712:	4621      	mov	r1, r4
 8005714:	4628      	mov	r0, r5
 8005716:	f000 f805 	bl	8005724 <__swsetup_r>
 800571a:	2800      	cmp	r0, #0
 800571c:	d0d5      	beq.n	80056ca <__swbuf_r+0x20>
 800571e:	f04f 37ff 	mov.w	r7, #4294967295
 8005722:	e7f4      	b.n	800570e <__swbuf_r+0x64>

08005724 <__swsetup_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4b2a      	ldr	r3, [pc, #168]	; (80057d0 <__swsetup_r+0xac>)
 8005728:	4605      	mov	r5, r0
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	460c      	mov	r4, r1
 800572e:	b118      	cbz	r0, 8005738 <__swsetup_r+0x14>
 8005730:	6a03      	ldr	r3, [r0, #32]
 8005732:	b90b      	cbnz	r3, 8005738 <__swsetup_r+0x14>
 8005734:	f7ff fe84 	bl	8005440 <__sinit>
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800573e:	0718      	lsls	r0, r3, #28
 8005740:	d422      	bmi.n	8005788 <__swsetup_r+0x64>
 8005742:	06d9      	lsls	r1, r3, #27
 8005744:	d407      	bmi.n	8005756 <__swsetup_r+0x32>
 8005746:	2309      	movs	r3, #9
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e034      	b.n	80057c0 <__swsetup_r+0x9c>
 8005756:	0758      	lsls	r0, r3, #29
 8005758:	d512      	bpl.n	8005780 <__swsetup_r+0x5c>
 800575a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575c:	b141      	cbz	r1, 8005770 <__swsetup_r+0x4c>
 800575e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005762:	4299      	cmp	r1, r3
 8005764:	d002      	beq.n	800576c <__swsetup_r+0x48>
 8005766:	4628      	mov	r0, r5
 8005768:	f000 ff70 	bl	800664c <_free_r>
 800576c:	2300      	movs	r3, #0
 800576e:	6363      	str	r3, [r4, #52]	; 0x34
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	2300      	movs	r3, #0
 800577a:	6063      	str	r3, [r4, #4]
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f043 0308 	orr.w	r3, r3, #8
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	6923      	ldr	r3, [r4, #16]
 800578a:	b94b      	cbnz	r3, 80057a0 <__swsetup_r+0x7c>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d003      	beq.n	80057a0 <__swsetup_r+0x7c>
 8005798:	4621      	mov	r1, r4
 800579a:	4628      	mov	r0, r5
 800579c:	f002 fa94 	bl	8007cc8 <__smakebuf_r>
 80057a0:	89a0      	ldrh	r0, [r4, #12]
 80057a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057a6:	f010 0301 	ands.w	r3, r0, #1
 80057aa:	d00a      	beq.n	80057c2 <__swsetup_r+0x9e>
 80057ac:	2300      	movs	r3, #0
 80057ae:	60a3      	str	r3, [r4, #8]
 80057b0:	6963      	ldr	r3, [r4, #20]
 80057b2:	425b      	negs	r3, r3
 80057b4:	61a3      	str	r3, [r4, #24]
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	b943      	cbnz	r3, 80057cc <__swsetup_r+0xa8>
 80057ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057be:	d1c4      	bne.n	800574a <__swsetup_r+0x26>
 80057c0:	bd38      	pop	{r3, r4, r5, pc}
 80057c2:	0781      	lsls	r1, r0, #30
 80057c4:	bf58      	it	pl
 80057c6:	6963      	ldrpl	r3, [r4, #20]
 80057c8:	60a3      	str	r3, [r4, #8]
 80057ca:	e7f4      	b.n	80057b6 <__swsetup_r+0x92>
 80057cc:	2000      	movs	r0, #0
 80057ce:	e7f7      	b.n	80057c0 <__swsetup_r+0x9c>
 80057d0:	200001d0 	.word	0x200001d0

080057d4 <memset>:
 80057d4:	4402      	add	r2, r0
 80057d6:	4603      	mov	r3, r0
 80057d8:	4293      	cmp	r3, r2
 80057da:	d100      	bne.n	80057de <memset+0xa>
 80057dc:	4770      	bx	lr
 80057de:	f803 1b01 	strb.w	r1, [r3], #1
 80057e2:	e7f9      	b.n	80057d8 <memset+0x4>

080057e4 <strstr>:
 80057e4:	780a      	ldrb	r2, [r1, #0]
 80057e6:	b570      	push	{r4, r5, r6, lr}
 80057e8:	b96a      	cbnz	r2, 8005806 <strstr+0x22>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d109      	bne.n	8005804 <strstr+0x20>
 80057f0:	460c      	mov	r4, r1
 80057f2:	4605      	mov	r5, r0
 80057f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f6      	beq.n	80057ea <strstr+0x6>
 80057fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005800:	429e      	cmp	r6, r3
 8005802:	d0f7      	beq.n	80057f4 <strstr+0x10>
 8005804:	3001      	adds	r0, #1
 8005806:	7803      	ldrb	r3, [r0, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ef      	bne.n	80057ec <strstr+0x8>
 800580c:	4618      	mov	r0, r3
 800580e:	e7ec      	b.n	80057ea <strstr+0x6>

08005810 <_localeconv_r>:
 8005810:	4800      	ldr	r0, [pc, #0]	; (8005814 <_localeconv_r+0x4>)
 8005812:	4770      	bx	lr
 8005814:	20000108 	.word	0x20000108

08005818 <_close_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d06      	ldr	r5, [pc, #24]	; (8005834 <_close_r+0x1c>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	f7fc f875 	bl	8001912 <_close>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_close_r+0x1a>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_close_r+0x1a>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	2000088c 	.word	0x2000088c

08005838 <_lseek_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d07      	ldr	r5, [pc, #28]	; (8005858 <_lseek_r+0x20>)
 800583c:	4604      	mov	r4, r0
 800583e:	4608      	mov	r0, r1
 8005840:	4611      	mov	r1, r2
 8005842:	2200      	movs	r2, #0
 8005844:	602a      	str	r2, [r5, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f7fc f88a 	bl	8001960 <_lseek>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_lseek_r+0x1e>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_lseek_r+0x1e>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	2000088c 	.word	0x2000088c

0800585c <_read_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	; (800587c <_read_r+0x20>)
 8005860:	4604      	mov	r4, r0
 8005862:	4608      	mov	r0, r1
 8005864:	4611      	mov	r1, r2
 8005866:	2200      	movs	r2, #0
 8005868:	602a      	str	r2, [r5, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	f7fc f834 	bl	80018d8 <_read>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_read_r+0x1e>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_read_r+0x1e>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	2000088c 	.word	0x2000088c

08005880 <_write_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d07      	ldr	r5, [pc, #28]	; (80058a0 <_write_r+0x20>)
 8005884:	4604      	mov	r4, r0
 8005886:	4608      	mov	r0, r1
 8005888:	4611      	mov	r1, r2
 800588a:	2200      	movs	r2, #0
 800588c:	602a      	str	r2, [r5, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	f7fb fb7f 	bl	8000f92 <_write>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d102      	bne.n	800589e <_write_r+0x1e>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	b103      	cbz	r3, 800589e <_write_r+0x1e>
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	bd38      	pop	{r3, r4, r5, pc}
 80058a0:	2000088c 	.word	0x2000088c

080058a4 <__errno>:
 80058a4:	4b01      	ldr	r3, [pc, #4]	; (80058ac <__errno+0x8>)
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	200001d0 	.word	0x200001d0

080058b0 <__libc_init_array>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4d0d      	ldr	r5, [pc, #52]	; (80058e8 <__libc_init_array+0x38>)
 80058b4:	4c0d      	ldr	r4, [pc, #52]	; (80058ec <__libc_init_array+0x3c>)
 80058b6:	1b64      	subs	r4, r4, r5
 80058b8:	10a4      	asrs	r4, r4, #2
 80058ba:	2600      	movs	r6, #0
 80058bc:	42a6      	cmp	r6, r4
 80058be:	d109      	bne.n	80058d4 <__libc_init_array+0x24>
 80058c0:	4d0b      	ldr	r5, [pc, #44]	; (80058f0 <__libc_init_array+0x40>)
 80058c2:	4c0c      	ldr	r4, [pc, #48]	; (80058f4 <__libc_init_array+0x44>)
 80058c4:	f002 fc8c 	bl	80081e0 <_init>
 80058c8:	1b64      	subs	r4, r4, r5
 80058ca:	10a4      	asrs	r4, r4, #2
 80058cc:	2600      	movs	r6, #0
 80058ce:	42a6      	cmp	r6, r4
 80058d0:	d105      	bne.n	80058de <__libc_init_array+0x2e>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d8:	4798      	blx	r3
 80058da:	3601      	adds	r6, #1
 80058dc:	e7ee      	b.n	80058bc <__libc_init_array+0xc>
 80058de:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e2:	4798      	blx	r3
 80058e4:	3601      	adds	r6, #1
 80058e6:	e7f2      	b.n	80058ce <__libc_init_array+0x1e>
 80058e8:	08008774 	.word	0x08008774
 80058ec:	08008774 	.word	0x08008774
 80058f0:	08008774 	.word	0x08008774
 80058f4:	08008778 	.word	0x08008778

080058f8 <__retarget_lock_acquire_recursive>:
 80058f8:	4770      	bx	lr

080058fa <__retarget_lock_release_recursive>:
 80058fa:	4770      	bx	lr

080058fc <memcpy>:
 80058fc:	440a      	add	r2, r1
 80058fe:	4291      	cmp	r1, r2
 8005900:	f100 33ff 	add.w	r3, r0, #4294967295
 8005904:	d100      	bne.n	8005908 <memcpy+0xc>
 8005906:	4770      	bx	lr
 8005908:	b510      	push	{r4, lr}
 800590a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800590e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005912:	4291      	cmp	r1, r2
 8005914:	d1f9      	bne.n	800590a <memcpy+0xe>
 8005916:	bd10      	pop	{r4, pc}

08005918 <__assert_func>:
 8005918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800591a:	4614      	mov	r4, r2
 800591c:	461a      	mov	r2, r3
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <__assert_func+0x2c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4605      	mov	r5, r0
 8005924:	68d8      	ldr	r0, [r3, #12]
 8005926:	b14c      	cbz	r4, 800593c <__assert_func+0x24>
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <__assert_func+0x30>)
 800592a:	9100      	str	r1, [sp, #0]
 800592c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005930:	4906      	ldr	r1, [pc, #24]	; (800594c <__assert_func+0x34>)
 8005932:	462b      	mov	r3, r5
 8005934:	f002 f990 	bl	8007c58 <fiprintf>
 8005938:	f002 fac2 	bl	8007ec0 <abort>
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <__assert_func+0x38>)
 800593e:	461c      	mov	r4, r3
 8005940:	e7f3      	b.n	800592a <__assert_func+0x12>
 8005942:	bf00      	nop
 8005944:	200001d0 	.word	0x200001d0
 8005948:	08008418 	.word	0x08008418
 800594c:	08008425 	.word	0x08008425
 8005950:	08008453 	.word	0x08008453

08005954 <quorem>:
 8005954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	6903      	ldr	r3, [r0, #16]
 800595a:	690c      	ldr	r4, [r1, #16]
 800595c:	42a3      	cmp	r3, r4
 800595e:	4607      	mov	r7, r0
 8005960:	db7e      	blt.n	8005a60 <quorem+0x10c>
 8005962:	3c01      	subs	r4, #1
 8005964:	f101 0814 	add.w	r8, r1, #20
 8005968:	f100 0514 	add.w	r5, r0, #20
 800596c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005976:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800597a:	3301      	adds	r3, #1
 800597c:	429a      	cmp	r2, r3
 800597e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005982:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005986:	fbb2 f6f3 	udiv	r6, r2, r3
 800598a:	d331      	bcc.n	80059f0 <quorem+0x9c>
 800598c:	f04f 0e00 	mov.w	lr, #0
 8005990:	4640      	mov	r0, r8
 8005992:	46ac      	mov	ip, r5
 8005994:	46f2      	mov	sl, lr
 8005996:	f850 2b04 	ldr.w	r2, [r0], #4
 800599a:	b293      	uxth	r3, r2
 800599c:	fb06 e303 	mla	r3, r6, r3, lr
 80059a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059a4:	0c1a      	lsrs	r2, r3, #16
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ebaa 0303 	sub.w	r3, sl, r3
 80059ac:	f8dc a000 	ldr.w	sl, [ip]
 80059b0:	fa13 f38a 	uxtah	r3, r3, sl
 80059b4:	fb06 220e 	mla	r2, r6, lr, r2
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	9b00      	ldr	r3, [sp, #0]
 80059bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059c0:	b292      	uxth	r2, r2
 80059c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80059ce:	4581      	cmp	r9, r0
 80059d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d4:	f84c 3b04 	str.w	r3, [ip], #4
 80059d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059dc:	d2db      	bcs.n	8005996 <quorem+0x42>
 80059de:	f855 300b 	ldr.w	r3, [r5, fp]
 80059e2:	b92b      	cbnz	r3, 80059f0 <quorem+0x9c>
 80059e4:	9b01      	ldr	r3, [sp, #4]
 80059e6:	3b04      	subs	r3, #4
 80059e8:	429d      	cmp	r5, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	d32c      	bcc.n	8005a48 <quorem+0xf4>
 80059ee:	613c      	str	r4, [r7, #16]
 80059f0:	4638      	mov	r0, r7
 80059f2:	f001 f9b9 	bl	8006d68 <__mcmp>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	db22      	blt.n	8005a40 <quorem+0xec>
 80059fa:	3601      	adds	r6, #1
 80059fc:	4629      	mov	r1, r5
 80059fe:	2000      	movs	r0, #0
 8005a00:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a04:	f8d1 c000 	ldr.w	ip, [r1]
 8005a08:	b293      	uxth	r3, r2
 8005a0a:	1ac3      	subs	r3, r0, r3
 8005a0c:	0c12      	lsrs	r2, r2, #16
 8005a0e:	fa13 f38c 	uxtah	r3, r3, ip
 8005a12:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a20:	45c1      	cmp	r9, r8
 8005a22:	f841 3b04 	str.w	r3, [r1], #4
 8005a26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a2a:	d2e9      	bcs.n	8005a00 <quorem+0xac>
 8005a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a34:	b922      	cbnz	r2, 8005a40 <quorem+0xec>
 8005a36:	3b04      	subs	r3, #4
 8005a38:	429d      	cmp	r5, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	d30a      	bcc.n	8005a54 <quorem+0x100>
 8005a3e:	613c      	str	r4, [r7, #16]
 8005a40:	4630      	mov	r0, r6
 8005a42:	b003      	add	sp, #12
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	3b04      	subs	r3, #4
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d1ce      	bne.n	80059ee <quorem+0x9a>
 8005a50:	3c01      	subs	r4, #1
 8005a52:	e7c9      	b.n	80059e8 <quorem+0x94>
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	3b04      	subs	r3, #4
 8005a58:	2a00      	cmp	r2, #0
 8005a5a:	d1f0      	bne.n	8005a3e <quorem+0xea>
 8005a5c:	3c01      	subs	r4, #1
 8005a5e:	e7eb      	b.n	8005a38 <quorem+0xe4>
 8005a60:	2000      	movs	r0, #0
 8005a62:	e7ee      	b.n	8005a42 <quorem+0xee>
 8005a64:	0000      	movs	r0, r0
	...

08005a68 <_dtoa_r>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	ed2d 8b04 	vpush	{d8-d9}
 8005a70:	69c5      	ldr	r5, [r0, #28]
 8005a72:	b093      	sub	sp, #76	; 0x4c
 8005a74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a78:	ec57 6b10 	vmov	r6, r7, d0
 8005a7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a80:	9107      	str	r1, [sp, #28]
 8005a82:	4604      	mov	r4, r0
 8005a84:	920a      	str	r2, [sp, #40]	; 0x28
 8005a86:	930d      	str	r3, [sp, #52]	; 0x34
 8005a88:	b975      	cbnz	r5, 8005aa8 <_dtoa_r+0x40>
 8005a8a:	2010      	movs	r0, #16
 8005a8c:	f000 fe2a 	bl	80066e4 <malloc>
 8005a90:	4602      	mov	r2, r0
 8005a92:	61e0      	str	r0, [r4, #28]
 8005a94:	b920      	cbnz	r0, 8005aa0 <_dtoa_r+0x38>
 8005a96:	4bae      	ldr	r3, [pc, #696]	; (8005d50 <_dtoa_r+0x2e8>)
 8005a98:	21ef      	movs	r1, #239	; 0xef
 8005a9a:	48ae      	ldr	r0, [pc, #696]	; (8005d54 <_dtoa_r+0x2ec>)
 8005a9c:	f7ff ff3c 	bl	8005918 <__assert_func>
 8005aa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aa4:	6005      	str	r5, [r0, #0]
 8005aa6:	60c5      	str	r5, [r0, #12]
 8005aa8:	69e3      	ldr	r3, [r4, #28]
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	b151      	cbz	r1, 8005ac4 <_dtoa_r+0x5c>
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	604a      	str	r2, [r1, #4]
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4093      	lsls	r3, r2
 8005ab6:	608b      	str	r3, [r1, #8]
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 ff19 	bl	80068f0 <_Bfree>
 8005abe:	69e3      	ldr	r3, [r4, #28]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	1e3b      	subs	r3, r7, #0
 8005ac6:	bfbb      	ittet	lt
 8005ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	9303      	strlt	r3, [sp, #12]
 8005ace:	2300      	movge	r3, #0
 8005ad0:	2201      	movlt	r2, #1
 8005ad2:	bfac      	ite	ge
 8005ad4:	f8c8 3000 	strge.w	r3, [r8]
 8005ad8:	f8c8 2000 	strlt.w	r2, [r8]
 8005adc:	4b9e      	ldr	r3, [pc, #632]	; (8005d58 <_dtoa_r+0x2f0>)
 8005ade:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ae2:	ea33 0308 	bics.w	r3, r3, r8
 8005ae6:	d11b      	bne.n	8005b20 <_dtoa_r+0xb8>
 8005ae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aea:	f242 730f 	movw	r3, #9999	; 0x270f
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005af4:	4333      	orrs	r3, r6
 8005af6:	f000 8593 	beq.w	8006620 <_dtoa_r+0xbb8>
 8005afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005afc:	b963      	cbnz	r3, 8005b18 <_dtoa_r+0xb0>
 8005afe:	4b97      	ldr	r3, [pc, #604]	; (8005d5c <_dtoa_r+0x2f4>)
 8005b00:	e027      	b.n	8005b52 <_dtoa_r+0xea>
 8005b02:	4b97      	ldr	r3, [pc, #604]	; (8005d60 <_dtoa_r+0x2f8>)
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	9800      	ldr	r0, [sp, #0]
 8005b0e:	b013      	add	sp, #76	; 0x4c
 8005b10:	ecbd 8b04 	vpop	{d8-d9}
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	4b90      	ldr	r3, [pc, #576]	; (8005d5c <_dtoa_r+0x2f4>)
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	3303      	adds	r3, #3
 8005b1e:	e7f3      	b.n	8005b08 <_dtoa_r+0xa0>
 8005b20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	ec51 0b17 	vmov	r0, r1, d7
 8005b2a:	eeb0 8a47 	vmov.f32	s16, s14
 8005b2e:	eef0 8a67 	vmov.f32	s17, s15
 8005b32:	2300      	movs	r3, #0
 8005b34:	f7fa ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b38:	4681      	mov	r9, r0
 8005b3a:	b160      	cbz	r0, 8005b56 <_dtoa_r+0xee>
 8005b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b3e:	2301      	movs	r3, #1
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8568 	beq.w	800661a <_dtoa_r+0xbb2>
 8005b4a:	4b86      	ldr	r3, [pc, #536]	; (8005d64 <_dtoa_r+0x2fc>)
 8005b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	e7da      	b.n	8005b0c <_dtoa_r+0xa4>
 8005b56:	aa10      	add	r2, sp, #64	; 0x40
 8005b58:	a911      	add	r1, sp, #68	; 0x44
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b60:	eef0 0a68 	vmov.f32	s1, s17
 8005b64:	f001 f9a6 	bl	8006eb4 <__d2b>
 8005b68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b6c:	4682      	mov	sl, r0
 8005b6e:	2d00      	cmp	r5, #0
 8005b70:	d07f      	beq.n	8005c72 <_dtoa_r+0x20a>
 8005b72:	ee18 3a90 	vmov	r3, s17
 8005b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b7e:	ec51 0b18 	vmov	r0, r1, d8
 8005b82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b8e:	4619      	mov	r1, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b75      	ldr	r3, [pc, #468]	; (8005d68 <_dtoa_r+0x300>)
 8005b94:	f7fa fb78 	bl	8000288 <__aeabi_dsub>
 8005b98:	a367      	add	r3, pc, #412	; (adr r3, 8005d38 <_dtoa_r+0x2d0>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fd2b 	bl	80005f8 <__aeabi_dmul>
 8005ba2:	a367      	add	r3, pc, #412	; (adr r3, 8005d40 <_dtoa_r+0x2d8>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f7fa fb70 	bl	800028c <__adddf3>
 8005bac:	4606      	mov	r6, r0
 8005bae:	4628      	mov	r0, r5
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	f7fa fcb7 	bl	8000524 <__aeabi_i2d>
 8005bb6:	a364      	add	r3, pc, #400	; (adr r3, 8005d48 <_dtoa_r+0x2e0>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fd1c 	bl	80005f8 <__aeabi_dmul>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	f7fa fb60 	bl	800028c <__adddf3>
 8005bcc:	4606      	mov	r6, r0
 8005bce:	460f      	mov	r7, r1
 8005bd0:	f7fa ffc2 	bl	8000b58 <__aeabi_d2iz>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4683      	mov	fp, r0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa ff7d 	bl	8000adc <__aeabi_dcmplt>
 8005be2:	b148      	cbz	r0, 8005bf8 <_dtoa_r+0x190>
 8005be4:	4658      	mov	r0, fp
 8005be6:	f7fa fc9d 	bl	8000524 <__aeabi_i2d>
 8005bea:	4632      	mov	r2, r6
 8005bec:	463b      	mov	r3, r7
 8005bee:	f7fa ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bf2:	b908      	cbnz	r0, 8005bf8 <_dtoa_r+0x190>
 8005bf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bf8:	f1bb 0f16 	cmp.w	fp, #22
 8005bfc:	d857      	bhi.n	8005cae <_dtoa_r+0x246>
 8005bfe:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <_dtoa_r+0x304>)
 8005c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	ec51 0b18 	vmov	r0, r1, d8
 8005c0c:	f7fa ff66 	bl	8000adc <__aeabi_dcmplt>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d04e      	beq.n	8005cb2 <_dtoa_r+0x24a>
 8005c14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c18:	2300      	movs	r3, #0
 8005c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c1e:	1b5b      	subs	r3, r3, r5
 8005c20:	1e5a      	subs	r2, r3, #1
 8005c22:	bf45      	ittet	mi
 8005c24:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c28:	9305      	strmi	r3, [sp, #20]
 8005c2a:	2300      	movpl	r3, #0
 8005c2c:	2300      	movmi	r3, #0
 8005c2e:	9206      	str	r2, [sp, #24]
 8005c30:	bf54      	ite	pl
 8005c32:	9305      	strpl	r3, [sp, #20]
 8005c34:	9306      	strmi	r3, [sp, #24]
 8005c36:	f1bb 0f00 	cmp.w	fp, #0
 8005c3a:	db3c      	blt.n	8005cb6 <_dtoa_r+0x24e>
 8005c3c:	9b06      	ldr	r3, [sp, #24]
 8005c3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c42:	445b      	add	r3, fp
 8005c44:	9306      	str	r3, [sp, #24]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9308      	str	r3, [sp, #32]
 8005c4a:	9b07      	ldr	r3, [sp, #28]
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	d868      	bhi.n	8005d22 <_dtoa_r+0x2ba>
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	bfc4      	itt	gt
 8005c54:	3b04      	subgt	r3, #4
 8005c56:	9307      	strgt	r3, [sp, #28]
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c5e:	bfcc      	ite	gt
 8005c60:	2500      	movgt	r5, #0
 8005c62:	2501      	movle	r5, #1
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	f200 8085 	bhi.w	8005d74 <_dtoa_r+0x30c>
 8005c6a:	e8df f003 	tbb	[pc, r3]
 8005c6e:	3b2e      	.short	0x3b2e
 8005c70:	5839      	.short	0x5839
 8005c72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c76:	441d      	add	r5, r3
 8005c78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	bfc1      	itttt	gt
 8005c80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c84:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005c8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c90:	bfd6      	itet	le
 8005c92:	f1c3 0320 	rsble	r3, r3, #32
 8005c96:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c9a:	fa06 f003 	lslle.w	r0, r6, r3
 8005c9e:	f7fa fc31 	bl	8000504 <__aeabi_ui2d>
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ca8:	3d01      	subs	r5, #1
 8005caa:	920e      	str	r2, [sp, #56]	; 0x38
 8005cac:	e76f      	b.n	8005b8e <_dtoa_r+0x126>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e7b3      	b.n	8005c1a <_dtoa_r+0x1b2>
 8005cb2:	900c      	str	r0, [sp, #48]	; 0x30
 8005cb4:	e7b2      	b.n	8005c1c <_dtoa_r+0x1b4>
 8005cb6:	9b05      	ldr	r3, [sp, #20]
 8005cb8:	eba3 030b 	sub.w	r3, r3, fp
 8005cbc:	9305      	str	r3, [sp, #20]
 8005cbe:	f1cb 0300 	rsb	r3, fp, #0
 8005cc2:	9308      	str	r3, [sp, #32]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc8:	e7bf      	b.n	8005c4a <_dtoa_r+0x1e2>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc52      	bgt.n	8005d7a <_dtoa_r+0x312>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	920a      	str	r2, [sp, #40]	; 0x28
 8005cde:	e00b      	b.n	8005cf8 <_dtoa_r+0x290>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e7f3      	b.n	8005ccc <_dtoa_r+0x264>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cea:	445b      	add	r3, fp
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	bfb8      	it	lt
 8005cf6:	2301      	movlt	r3, #1
 8005cf8:	69e0      	ldr	r0, [r4, #28]
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	f102 0614 	add.w	r6, r2, #20
 8005d02:	429e      	cmp	r6, r3
 8005d04:	d93d      	bls.n	8005d82 <_dtoa_r+0x31a>
 8005d06:	6041      	str	r1, [r0, #4]
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fdb1 	bl	8006870 <_Balloc>
 8005d0e:	9000      	str	r0, [sp, #0]
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d139      	bne.n	8005d88 <_dtoa_r+0x320>
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <_dtoa_r+0x308>)
 8005d16:	4602      	mov	r2, r0
 8005d18:	f240 11af 	movw	r1, #431	; 0x1af
 8005d1c:	e6bd      	b.n	8005a9a <_dtoa_r+0x32>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7e1      	b.n	8005ce6 <_dtoa_r+0x27e>
 8005d22:	2501      	movs	r5, #1
 8005d24:	2300      	movs	r3, #0
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	9509      	str	r5, [sp, #36]	; 0x24
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	2200      	movs	r2, #0
 8005d34:	2312      	movs	r3, #18
 8005d36:	e7d1      	b.n	8005cdc <_dtoa_r+0x274>
 8005d38:	636f4361 	.word	0x636f4361
 8005d3c:	3fd287a7 	.word	0x3fd287a7
 8005d40:	8b60c8b3 	.word	0x8b60c8b3
 8005d44:	3fc68a28 	.word	0x3fc68a28
 8005d48:	509f79fb 	.word	0x509f79fb
 8005d4c:	3fd34413 	.word	0x3fd34413
 8005d50:	08008461 	.word	0x08008461
 8005d54:	08008478 	.word	0x08008478
 8005d58:	7ff00000 	.word	0x7ff00000
 8005d5c:	0800845d 	.word	0x0800845d
 8005d60:	08008454 	.word	0x08008454
 8005d64:	08008765 	.word	0x08008765
 8005d68:	3ff80000 	.word	0x3ff80000
 8005d6c:	08008568 	.word	0x08008568
 8005d70:	080084d0 	.word	0x080084d0
 8005d74:	2301      	movs	r3, #1
 8005d76:	9309      	str	r3, [sp, #36]	; 0x24
 8005d78:	e7d7      	b.n	8005d2a <_dtoa_r+0x2c2>
 8005d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	e7ba      	b.n	8005cf8 <_dtoa_r+0x290>
 8005d82:	3101      	adds	r1, #1
 8005d84:	0052      	lsls	r2, r2, #1
 8005d86:	e7ba      	b.n	8005cfe <_dtoa_r+0x296>
 8005d88:	69e3      	ldr	r3, [r4, #28]
 8005d8a:	9a00      	ldr	r2, [sp, #0]
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	2b0e      	cmp	r3, #14
 8005d92:	f200 80a8 	bhi.w	8005ee6 <_dtoa_r+0x47e>
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	f000 80a5 	beq.w	8005ee6 <_dtoa_r+0x47e>
 8005d9c:	f1bb 0f00 	cmp.w	fp, #0
 8005da0:	dd38      	ble.n	8005e14 <_dtoa_r+0x3ac>
 8005da2:	4bc0      	ldr	r3, [pc, #768]	; (80060a4 <_dtoa_r+0x63c>)
 8005da4:	f00b 020f 	and.w	r2, fp, #15
 8005da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005db0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005db4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005db8:	d019      	beq.n	8005dee <_dtoa_r+0x386>
 8005dba:	4bbb      	ldr	r3, [pc, #748]	; (80060a8 <_dtoa_r+0x640>)
 8005dbc:	ec51 0b18 	vmov	r0, r1, d8
 8005dc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dc4:	f7fa fd42 	bl	800084c <__aeabi_ddiv>
 8005dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dcc:	f008 080f 	and.w	r8, r8, #15
 8005dd0:	2503      	movs	r5, #3
 8005dd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80060a8 <_dtoa_r+0x640>
 8005dd6:	f1b8 0f00 	cmp.w	r8, #0
 8005dda:	d10a      	bne.n	8005df2 <_dtoa_r+0x38a>
 8005ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de0:	4632      	mov	r2, r6
 8005de2:	463b      	mov	r3, r7
 8005de4:	f7fa fd32 	bl	800084c <__aeabi_ddiv>
 8005de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dec:	e02b      	b.n	8005e46 <_dtoa_r+0x3de>
 8005dee:	2502      	movs	r5, #2
 8005df0:	e7ef      	b.n	8005dd2 <_dtoa_r+0x36a>
 8005df2:	f018 0f01 	tst.w	r8, #1
 8005df6:	d008      	beq.n	8005e0a <_dtoa_r+0x3a2>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e00:	f7fa fbfa 	bl	80005f8 <__aeabi_dmul>
 8005e04:	3501      	adds	r5, #1
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e0e:	f109 0908 	add.w	r9, r9, #8
 8005e12:	e7e0      	b.n	8005dd6 <_dtoa_r+0x36e>
 8005e14:	f000 809f 	beq.w	8005f56 <_dtoa_r+0x4ee>
 8005e18:	f1cb 0600 	rsb	r6, fp, #0
 8005e1c:	4ba1      	ldr	r3, [pc, #644]	; (80060a4 <_dtoa_r+0x63c>)
 8005e1e:	4fa2      	ldr	r7, [pc, #648]	; (80060a8 <_dtoa_r+0x640>)
 8005e20:	f006 020f 	and.w	r2, r6, #15
 8005e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	ec51 0b18 	vmov	r0, r1, d8
 8005e30:	f7fa fbe2 	bl	80005f8 <__aeabi_dmul>
 8005e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e38:	1136      	asrs	r6, r6, #4
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2502      	movs	r5, #2
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	d17e      	bne.n	8005f40 <_dtoa_r+0x4d8>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1d0      	bne.n	8005de8 <_dtoa_r+0x380>
 8005e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8084 	beq.w	8005f5a <_dtoa_r+0x4f2>
 8005e52:	4b96      	ldr	r3, [pc, #600]	; (80060ac <_dtoa_r+0x644>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	4640      	mov	r0, r8
 8005e58:	4649      	mov	r1, r9
 8005e5a:	f7fa fe3f 	bl	8000adc <__aeabi_dcmplt>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d07b      	beq.n	8005f5a <_dtoa_r+0x4f2>
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d078      	beq.n	8005f5a <_dtoa_r+0x4f2>
 8005e68:	9b01      	ldr	r3, [sp, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dd39      	ble.n	8005ee2 <_dtoa_r+0x47a>
 8005e6e:	4b90      	ldr	r3, [pc, #576]	; (80060b0 <_dtoa_r+0x648>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	4640      	mov	r0, r8
 8005e74:	4649      	mov	r1, r9
 8005e76:	f7fa fbbf 	bl	80005f8 <__aeabi_dmul>
 8005e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e7e:	9e01      	ldr	r6, [sp, #4]
 8005e80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e84:	3501      	adds	r5, #1
 8005e86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f7fa fb4a 	bl	8000524 <__aeabi_i2d>
 8005e90:	4642      	mov	r2, r8
 8005e92:	464b      	mov	r3, r9
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	4b86      	ldr	r3, [pc, #536]	; (80060b4 <_dtoa_r+0x64c>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f7fa f9f6 	bl	800028c <__adddf3>
 8005ea0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	d158      	bne.n	8005f60 <_dtoa_r+0x4f8>
 8005eae:	4b82      	ldr	r3, [pc, #520]	; (80060b8 <_dtoa_r+0x650>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	f7fa f9e7 	bl	8000288 <__aeabi_dsub>
 8005eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	4689      	mov	r9, r1
 8005ec2:	f7fa fe29 	bl	8000b18 <__aeabi_dcmpgt>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f040 8296 	bne.w	80063f8 <_dtoa_r+0x990>
 8005ecc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa fe00 	bl	8000adc <__aeabi_dcmplt>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f040 8289 	bne.w	80063f4 <_dtoa_r+0x98c>
 8005ee2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f2c0 814e 	blt.w	800618a <_dtoa_r+0x722>
 8005eee:	f1bb 0f0e 	cmp.w	fp, #14
 8005ef2:	f300 814a 	bgt.w	800618a <_dtoa_r+0x722>
 8005ef6:	4b6b      	ldr	r3, [pc, #428]	; (80060a4 <_dtoa_r+0x63c>)
 8005ef8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f280 80dc 	bge.w	80060c0 <_dtoa_r+0x658>
 8005f08:	9b04      	ldr	r3, [sp, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f300 80d8 	bgt.w	80060c0 <_dtoa_r+0x658>
 8005f10:	f040 826f 	bne.w	80063f2 <_dtoa_r+0x98a>
 8005f14:	4b68      	ldr	r3, [pc, #416]	; (80060b8 <_dtoa_r+0x650>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fb6c 	bl	80005f8 <__aeabi_dmul>
 8005f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f24:	f7fa fdee 	bl	8000b04 <__aeabi_dcmpge>
 8005f28:	9e04      	ldr	r6, [sp, #16]
 8005f2a:	4637      	mov	r7, r6
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f040 8245 	bne.w	80063bc <_dtoa_r+0x954>
 8005f32:	9d00      	ldr	r5, [sp, #0]
 8005f34:	2331      	movs	r3, #49	; 0x31
 8005f36:	f805 3b01 	strb.w	r3, [r5], #1
 8005f3a:	f10b 0b01 	add.w	fp, fp, #1
 8005f3e:	e241      	b.n	80063c4 <_dtoa_r+0x95c>
 8005f40:	07f2      	lsls	r2, r6, #31
 8005f42:	d505      	bpl.n	8005f50 <_dtoa_r+0x4e8>
 8005f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	2301      	movs	r3, #1
 8005f50:	1076      	asrs	r6, r6, #1
 8005f52:	3708      	adds	r7, #8
 8005f54:	e773      	b.n	8005e3e <_dtoa_r+0x3d6>
 8005f56:	2502      	movs	r5, #2
 8005f58:	e775      	b.n	8005e46 <_dtoa_r+0x3de>
 8005f5a:	9e04      	ldr	r6, [sp, #16]
 8005f5c:	465f      	mov	r7, fp
 8005f5e:	e792      	b.n	8005e86 <_dtoa_r+0x41e>
 8005f60:	9900      	ldr	r1, [sp, #0]
 8005f62:	4b50      	ldr	r3, [pc, #320]	; (80060a4 <_dtoa_r+0x63c>)
 8005f64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f68:	4431      	add	r1, r6
 8005f6a:	9102      	str	r1, [sp, #8]
 8005f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f6e:	eeb0 9a47 	vmov.f32	s18, s14
 8005f72:	eef0 9a67 	vmov.f32	s19, s15
 8005f76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f7e:	2900      	cmp	r1, #0
 8005f80:	d044      	beq.n	800600c <_dtoa_r+0x5a4>
 8005f82:	494e      	ldr	r1, [pc, #312]	; (80060bc <_dtoa_r+0x654>)
 8005f84:	2000      	movs	r0, #0
 8005f86:	f7fa fc61 	bl	800084c <__aeabi_ddiv>
 8005f8a:	ec53 2b19 	vmov	r2, r3, d9
 8005f8e:	f7fa f97b 	bl	8000288 <__aeabi_dsub>
 8005f92:	9d00      	ldr	r5, [sp, #0]
 8005f94:	ec41 0b19 	vmov	d9, r0, r1
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f7fa fddc 	bl	8000b58 <__aeabi_d2iz>
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	f7fa fabf 	bl	8000524 <__aeabi_i2d>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f7fa f96b 	bl	8000288 <__aeabi_dsub>
 8005fb2:	3630      	adds	r6, #48	; 0x30
 8005fb4:	f805 6b01 	strb.w	r6, [r5], #1
 8005fb8:	ec53 2b19 	vmov	r2, r3, d9
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	f7fa fd8c 	bl	8000adc <__aeabi_dcmplt>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d164      	bne.n	8006092 <_dtoa_r+0x62a>
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	4937      	ldr	r1, [pc, #220]	; (80060ac <_dtoa_r+0x644>)
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f7fa f95a 	bl	8000288 <__aeabi_dsub>
 8005fd4:	ec53 2b19 	vmov	r2, r3, d9
 8005fd8:	f7fa fd80 	bl	8000adc <__aeabi_dcmplt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f040 80b6 	bne.w	800614e <_dtoa_r+0x6e6>
 8005fe2:	9b02      	ldr	r3, [sp, #8]
 8005fe4:	429d      	cmp	r5, r3
 8005fe6:	f43f af7c 	beq.w	8005ee2 <_dtoa_r+0x47a>
 8005fea:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <_dtoa_r+0x648>)
 8005fec:	ec51 0b19 	vmov	r0, r1, d9
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f7fa fb01 	bl	80005f8 <__aeabi_dmul>
 8005ff6:	4b2e      	ldr	r3, [pc, #184]	; (80060b0 <_dtoa_r+0x648>)
 8005ff8:	ec41 0b19 	vmov	d9, r0, r1
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa faf9 	bl	80005f8 <__aeabi_dmul>
 8006006:	4680      	mov	r8, r0
 8006008:	4689      	mov	r9, r1
 800600a:	e7c5      	b.n	8005f98 <_dtoa_r+0x530>
 800600c:	ec51 0b17 	vmov	r0, r1, d7
 8006010:	f7fa faf2 	bl	80005f8 <__aeabi_dmul>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	9d00      	ldr	r5, [sp, #0]
 8006018:	930f      	str	r3, [sp, #60]	; 0x3c
 800601a:	ec41 0b19 	vmov	d9, r0, r1
 800601e:	4649      	mov	r1, r9
 8006020:	4640      	mov	r0, r8
 8006022:	f7fa fd99 	bl	8000b58 <__aeabi_d2iz>
 8006026:	4606      	mov	r6, r0
 8006028:	f7fa fa7c 	bl	8000524 <__aeabi_i2d>
 800602c:	3630      	adds	r6, #48	; 0x30
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4640      	mov	r0, r8
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa f927 	bl	8000288 <__aeabi_dsub>
 800603a:	f805 6b01 	strb.w	r6, [r5], #1
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	429d      	cmp	r5, r3
 8006042:	4680      	mov	r8, r0
 8006044:	4689      	mov	r9, r1
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	d124      	bne.n	8006096 <_dtoa_r+0x62e>
 800604c:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <_dtoa_r+0x654>)
 800604e:	ec51 0b19 	vmov	r0, r1, d9
 8006052:	f7fa f91b 	bl	800028c <__adddf3>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 8006062:	2800      	cmp	r0, #0
 8006064:	d173      	bne.n	800614e <_dtoa_r+0x6e6>
 8006066:	ec53 2b19 	vmov	r2, r3, d9
 800606a:	4914      	ldr	r1, [pc, #80]	; (80060bc <_dtoa_r+0x654>)
 800606c:	2000      	movs	r0, #0
 800606e:	f7fa f90b 	bl	8000288 <__aeabi_dsub>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa fd2f 	bl	8000adc <__aeabi_dcmplt>
 800607e:	2800      	cmp	r0, #0
 8006080:	f43f af2f 	beq.w	8005ee2 <_dtoa_r+0x47a>
 8006084:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006086:	1e6b      	subs	r3, r5, #1
 8006088:	930f      	str	r3, [sp, #60]	; 0x3c
 800608a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800608e:	2b30      	cmp	r3, #48	; 0x30
 8006090:	d0f8      	beq.n	8006084 <_dtoa_r+0x61c>
 8006092:	46bb      	mov	fp, r7
 8006094:	e04a      	b.n	800612c <_dtoa_r+0x6c4>
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <_dtoa_r+0x648>)
 8006098:	f7fa faae 	bl	80005f8 <__aeabi_dmul>
 800609c:	4680      	mov	r8, r0
 800609e:	4689      	mov	r9, r1
 80060a0:	e7bd      	b.n	800601e <_dtoa_r+0x5b6>
 80060a2:	bf00      	nop
 80060a4:	08008568 	.word	0x08008568
 80060a8:	08008540 	.word	0x08008540
 80060ac:	3ff00000 	.word	0x3ff00000
 80060b0:	40240000 	.word	0x40240000
 80060b4:	401c0000 	.word	0x401c0000
 80060b8:	40140000 	.word	0x40140000
 80060bc:	3fe00000 	.word	0x3fe00000
 80060c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060c4:	9d00      	ldr	r5, [sp, #0]
 80060c6:	4642      	mov	r2, r8
 80060c8:	464b      	mov	r3, r9
 80060ca:	4630      	mov	r0, r6
 80060cc:	4639      	mov	r1, r7
 80060ce:	f7fa fbbd 	bl	800084c <__aeabi_ddiv>
 80060d2:	f7fa fd41 	bl	8000b58 <__aeabi_d2iz>
 80060d6:	9001      	str	r0, [sp, #4]
 80060d8:	f7fa fa24 	bl	8000524 <__aeabi_i2d>
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	f7fa fa8a 	bl	80005f8 <__aeabi_dmul>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4630      	mov	r0, r6
 80060ea:	4639      	mov	r1, r7
 80060ec:	f7fa f8cc 	bl	8000288 <__aeabi_dsub>
 80060f0:	9e01      	ldr	r6, [sp, #4]
 80060f2:	9f04      	ldr	r7, [sp, #16]
 80060f4:	3630      	adds	r6, #48	; 0x30
 80060f6:	f805 6b01 	strb.w	r6, [r5], #1
 80060fa:	9e00      	ldr	r6, [sp, #0]
 80060fc:	1bae      	subs	r6, r5, r6
 80060fe:	42b7      	cmp	r7, r6
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	d134      	bne.n	8006170 <_dtoa_r+0x708>
 8006106:	f7fa f8c1 	bl	800028c <__adddf3>
 800610a:	4642      	mov	r2, r8
 800610c:	464b      	mov	r3, r9
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	f7fa fd01 	bl	8000b18 <__aeabi_dcmpgt>
 8006116:	b9c8      	cbnz	r0, 800614c <_dtoa_r+0x6e4>
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006124:	b110      	cbz	r0, 800612c <_dtoa_r+0x6c4>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	07db      	lsls	r3, r3, #31
 800612a:	d40f      	bmi.n	800614c <_dtoa_r+0x6e4>
 800612c:	4651      	mov	r1, sl
 800612e:	4620      	mov	r0, r4
 8006130:	f000 fbde 	bl	80068f0 <_Bfree>
 8006134:	2300      	movs	r3, #0
 8006136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006138:	702b      	strb	r3, [r5, #0]
 800613a:	f10b 0301 	add.w	r3, fp, #1
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006142:	2b00      	cmp	r3, #0
 8006144:	f43f ace2 	beq.w	8005b0c <_dtoa_r+0xa4>
 8006148:	601d      	str	r5, [r3, #0]
 800614a:	e4df      	b.n	8005b0c <_dtoa_r+0xa4>
 800614c:	465f      	mov	r7, fp
 800614e:	462b      	mov	r3, r5
 8006150:	461d      	mov	r5, r3
 8006152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006156:	2a39      	cmp	r2, #57	; 0x39
 8006158:	d106      	bne.n	8006168 <_dtoa_r+0x700>
 800615a:	9a00      	ldr	r2, [sp, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d1f7      	bne.n	8006150 <_dtoa_r+0x6e8>
 8006160:	9900      	ldr	r1, [sp, #0]
 8006162:	2230      	movs	r2, #48	; 0x30
 8006164:	3701      	adds	r7, #1
 8006166:	700a      	strb	r2, [r1, #0]
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	3201      	adds	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e790      	b.n	8006092 <_dtoa_r+0x62a>
 8006170:	4ba3      	ldr	r3, [pc, #652]	; (8006400 <_dtoa_r+0x998>)
 8006172:	2200      	movs	r2, #0
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	2200      	movs	r2, #0
 800617a:	2300      	movs	r3, #0
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
 8006180:	f7fa fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006184:	2800      	cmp	r0, #0
 8006186:	d09e      	beq.n	80060c6 <_dtoa_r+0x65e>
 8006188:	e7d0      	b.n	800612c <_dtoa_r+0x6c4>
 800618a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618c:	2a00      	cmp	r2, #0
 800618e:	f000 80ca 	beq.w	8006326 <_dtoa_r+0x8be>
 8006192:	9a07      	ldr	r2, [sp, #28]
 8006194:	2a01      	cmp	r2, #1
 8006196:	f300 80ad 	bgt.w	80062f4 <_dtoa_r+0x88c>
 800619a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800619c:	2a00      	cmp	r2, #0
 800619e:	f000 80a5 	beq.w	80062ec <_dtoa_r+0x884>
 80061a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061a6:	9e08      	ldr	r6, [sp, #32]
 80061a8:	9d05      	ldr	r5, [sp, #20]
 80061aa:	9a05      	ldr	r2, [sp, #20]
 80061ac:	441a      	add	r2, r3
 80061ae:	9205      	str	r2, [sp, #20]
 80061b0:	9a06      	ldr	r2, [sp, #24]
 80061b2:	2101      	movs	r1, #1
 80061b4:	441a      	add	r2, r3
 80061b6:	4620      	mov	r0, r4
 80061b8:	9206      	str	r2, [sp, #24]
 80061ba:	f000 fc4f 	bl	8006a5c <__i2b>
 80061be:	4607      	mov	r7, r0
 80061c0:	b165      	cbz	r5, 80061dc <_dtoa_r+0x774>
 80061c2:	9b06      	ldr	r3, [sp, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd09      	ble.n	80061dc <_dtoa_r+0x774>
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	9a05      	ldr	r2, [sp, #20]
 80061cc:	bfa8      	it	ge
 80061ce:	462b      	movge	r3, r5
 80061d0:	1ad2      	subs	r2, r2, r3
 80061d2:	9205      	str	r2, [sp, #20]
 80061d4:	9a06      	ldr	r2, [sp, #24]
 80061d6:	1aed      	subs	r5, r5, r3
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	9306      	str	r3, [sp, #24]
 80061dc:	9b08      	ldr	r3, [sp, #32]
 80061de:	b1f3      	cbz	r3, 800621e <_dtoa_r+0x7b6>
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80a3 	beq.w	800632e <_dtoa_r+0x8c6>
 80061e8:	2e00      	cmp	r6, #0
 80061ea:	dd10      	ble.n	800620e <_dtoa_r+0x7a6>
 80061ec:	4639      	mov	r1, r7
 80061ee:	4632      	mov	r2, r6
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fcf3 	bl	8006bdc <__pow5mult>
 80061f6:	4652      	mov	r2, sl
 80061f8:	4601      	mov	r1, r0
 80061fa:	4607      	mov	r7, r0
 80061fc:	4620      	mov	r0, r4
 80061fe:	f000 fc43 	bl	8006a88 <__multiply>
 8006202:	4651      	mov	r1, sl
 8006204:	4680      	mov	r8, r0
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fb72 	bl	80068f0 <_Bfree>
 800620c:	46c2      	mov	sl, r8
 800620e:	9b08      	ldr	r3, [sp, #32]
 8006210:	1b9a      	subs	r2, r3, r6
 8006212:	d004      	beq.n	800621e <_dtoa_r+0x7b6>
 8006214:	4651      	mov	r1, sl
 8006216:	4620      	mov	r0, r4
 8006218:	f000 fce0 	bl	8006bdc <__pow5mult>
 800621c:	4682      	mov	sl, r0
 800621e:	2101      	movs	r1, #1
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fc1b 	bl	8006a5c <__i2b>
 8006226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	4606      	mov	r6, r0
 800622c:	f340 8081 	ble.w	8006332 <_dtoa_r+0x8ca>
 8006230:	461a      	mov	r2, r3
 8006232:	4601      	mov	r1, r0
 8006234:	4620      	mov	r0, r4
 8006236:	f000 fcd1 	bl	8006bdc <__pow5mult>
 800623a:	9b07      	ldr	r3, [sp, #28]
 800623c:	2b01      	cmp	r3, #1
 800623e:	4606      	mov	r6, r0
 8006240:	dd7a      	ble.n	8006338 <_dtoa_r+0x8d0>
 8006242:	f04f 0800 	mov.w	r8, #0
 8006246:	6933      	ldr	r3, [r6, #16]
 8006248:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800624c:	6918      	ldr	r0, [r3, #16]
 800624e:	f000 fbb7 	bl	80069c0 <__hi0bits>
 8006252:	f1c0 0020 	rsb	r0, r0, #32
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	4418      	add	r0, r3
 800625a:	f010 001f 	ands.w	r0, r0, #31
 800625e:	f000 8094 	beq.w	800638a <_dtoa_r+0x922>
 8006262:	f1c0 0320 	rsb	r3, r0, #32
 8006266:	2b04      	cmp	r3, #4
 8006268:	f340 8085 	ble.w	8006376 <_dtoa_r+0x90e>
 800626c:	9b05      	ldr	r3, [sp, #20]
 800626e:	f1c0 001c 	rsb	r0, r0, #28
 8006272:	4403      	add	r3, r0
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	9b06      	ldr	r3, [sp, #24]
 8006278:	4403      	add	r3, r0
 800627a:	4405      	add	r5, r0
 800627c:	9306      	str	r3, [sp, #24]
 800627e:	9b05      	ldr	r3, [sp, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	dd05      	ble.n	8006290 <_dtoa_r+0x828>
 8006284:	4651      	mov	r1, sl
 8006286:	461a      	mov	r2, r3
 8006288:	4620      	mov	r0, r4
 800628a:	f000 fd01 	bl	8006c90 <__lshift>
 800628e:	4682      	mov	sl, r0
 8006290:	9b06      	ldr	r3, [sp, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dd05      	ble.n	80062a2 <_dtoa_r+0x83a>
 8006296:	4631      	mov	r1, r6
 8006298:	461a      	mov	r2, r3
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fcf8 	bl	8006c90 <__lshift>
 80062a0:	4606      	mov	r6, r0
 80062a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d072      	beq.n	800638e <_dtoa_r+0x926>
 80062a8:	4631      	mov	r1, r6
 80062aa:	4650      	mov	r0, sl
 80062ac:	f000 fd5c 	bl	8006d68 <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	da6c      	bge.n	800638e <_dtoa_r+0x926>
 80062b4:	2300      	movs	r3, #0
 80062b6:	4651      	mov	r1, sl
 80062b8:	220a      	movs	r2, #10
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 fb3a 	bl	8006934 <__multadd>
 80062c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062c6:	4682      	mov	sl, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 81b0 	beq.w	800662e <_dtoa_r+0xbc6>
 80062ce:	2300      	movs	r3, #0
 80062d0:	4639      	mov	r1, r7
 80062d2:	220a      	movs	r2, #10
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fb2d 	bl	8006934 <__multadd>
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	4607      	mov	r7, r0
 80062e0:	f300 8096 	bgt.w	8006410 <_dtoa_r+0x9a8>
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dc59      	bgt.n	800639e <_dtoa_r+0x936>
 80062ea:	e091      	b.n	8006410 <_dtoa_r+0x9a8>
 80062ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062f2:	e758      	b.n	80061a6 <_dtoa_r+0x73e>
 80062f4:	9b04      	ldr	r3, [sp, #16]
 80062f6:	1e5e      	subs	r6, r3, #1
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	42b3      	cmp	r3, r6
 80062fc:	bfbf      	itttt	lt
 80062fe:	9b08      	ldrlt	r3, [sp, #32]
 8006300:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006302:	9608      	strlt	r6, [sp, #32]
 8006304:	1af3      	sublt	r3, r6, r3
 8006306:	bfb4      	ite	lt
 8006308:	18d2      	addlt	r2, r2, r3
 800630a:	1b9e      	subge	r6, r3, r6
 800630c:	9b04      	ldr	r3, [sp, #16]
 800630e:	bfbc      	itt	lt
 8006310:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006312:	2600      	movlt	r6, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfb7      	itett	lt
 8006318:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800631c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006320:	1a9d      	sublt	r5, r3, r2
 8006322:	2300      	movlt	r3, #0
 8006324:	e741      	b.n	80061aa <_dtoa_r+0x742>
 8006326:	9e08      	ldr	r6, [sp, #32]
 8006328:	9d05      	ldr	r5, [sp, #20]
 800632a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800632c:	e748      	b.n	80061c0 <_dtoa_r+0x758>
 800632e:	9a08      	ldr	r2, [sp, #32]
 8006330:	e770      	b.n	8006214 <_dtoa_r+0x7ac>
 8006332:	9b07      	ldr	r3, [sp, #28]
 8006334:	2b01      	cmp	r3, #1
 8006336:	dc19      	bgt.n	800636c <_dtoa_r+0x904>
 8006338:	9b02      	ldr	r3, [sp, #8]
 800633a:	b9bb      	cbnz	r3, 800636c <_dtoa_r+0x904>
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006342:	b99b      	cbnz	r3, 800636c <_dtoa_r+0x904>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	b183      	cbz	r3, 8006372 <_dtoa_r+0x90a>
 8006350:	9b05      	ldr	r3, [sp, #20]
 8006352:	3301      	adds	r3, #1
 8006354:	9305      	str	r3, [sp, #20]
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	3301      	adds	r3, #1
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	f04f 0801 	mov.w	r8, #1
 8006360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006362:	2b00      	cmp	r3, #0
 8006364:	f47f af6f 	bne.w	8006246 <_dtoa_r+0x7de>
 8006368:	2001      	movs	r0, #1
 800636a:	e774      	b.n	8006256 <_dtoa_r+0x7ee>
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	e7f6      	b.n	8006360 <_dtoa_r+0x8f8>
 8006372:	4698      	mov	r8, r3
 8006374:	e7f4      	b.n	8006360 <_dtoa_r+0x8f8>
 8006376:	d082      	beq.n	800627e <_dtoa_r+0x816>
 8006378:	9a05      	ldr	r2, [sp, #20]
 800637a:	331c      	adds	r3, #28
 800637c:	441a      	add	r2, r3
 800637e:	9205      	str	r2, [sp, #20]
 8006380:	9a06      	ldr	r2, [sp, #24]
 8006382:	441a      	add	r2, r3
 8006384:	441d      	add	r5, r3
 8006386:	9206      	str	r2, [sp, #24]
 8006388:	e779      	b.n	800627e <_dtoa_r+0x816>
 800638a:	4603      	mov	r3, r0
 800638c:	e7f4      	b.n	8006378 <_dtoa_r+0x910>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	dc37      	bgt.n	8006404 <_dtoa_r+0x99c>
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	2b02      	cmp	r3, #2
 8006398:	dd34      	ble.n	8006404 <_dtoa_r+0x99c>
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	b963      	cbnz	r3, 80063bc <_dtoa_r+0x954>
 80063a2:	4631      	mov	r1, r6
 80063a4:	2205      	movs	r2, #5
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 fac4 	bl	8006934 <__multadd>
 80063ac:	4601      	mov	r1, r0
 80063ae:	4606      	mov	r6, r0
 80063b0:	4650      	mov	r0, sl
 80063b2:	f000 fcd9 	bl	8006d68 <__mcmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f73f adbb 	bgt.w	8005f32 <_dtoa_r+0x4ca>
 80063bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063be:	9d00      	ldr	r5, [sp, #0]
 80063c0:	ea6f 0b03 	mvn.w	fp, r3
 80063c4:	f04f 0800 	mov.w	r8, #0
 80063c8:	4631      	mov	r1, r6
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 fa90 	bl	80068f0 <_Bfree>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	f43f aeab 	beq.w	800612c <_dtoa_r+0x6c4>
 80063d6:	f1b8 0f00 	cmp.w	r8, #0
 80063da:	d005      	beq.n	80063e8 <_dtoa_r+0x980>
 80063dc:	45b8      	cmp	r8, r7
 80063de:	d003      	beq.n	80063e8 <_dtoa_r+0x980>
 80063e0:	4641      	mov	r1, r8
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fa84 	bl	80068f0 <_Bfree>
 80063e8:	4639      	mov	r1, r7
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 fa80 	bl	80068f0 <_Bfree>
 80063f0:	e69c      	b.n	800612c <_dtoa_r+0x6c4>
 80063f2:	2600      	movs	r6, #0
 80063f4:	4637      	mov	r7, r6
 80063f6:	e7e1      	b.n	80063bc <_dtoa_r+0x954>
 80063f8:	46bb      	mov	fp, r7
 80063fa:	4637      	mov	r7, r6
 80063fc:	e599      	b.n	8005f32 <_dtoa_r+0x4ca>
 80063fe:	bf00      	nop
 8006400:	40240000 	.word	0x40240000
 8006404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 80c8 	beq.w	800659c <_dtoa_r+0xb34>
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	2d00      	cmp	r5, #0
 8006412:	dd05      	ble.n	8006420 <_dtoa_r+0x9b8>
 8006414:	4639      	mov	r1, r7
 8006416:	462a      	mov	r2, r5
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fc39 	bl	8006c90 <__lshift>
 800641e:	4607      	mov	r7, r0
 8006420:	f1b8 0f00 	cmp.w	r8, #0
 8006424:	d05b      	beq.n	80064de <_dtoa_r+0xa76>
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fa21 	bl	8006870 <_Balloc>
 800642e:	4605      	mov	r5, r0
 8006430:	b928      	cbnz	r0, 800643e <_dtoa_r+0x9d6>
 8006432:	4b83      	ldr	r3, [pc, #524]	; (8006640 <_dtoa_r+0xbd8>)
 8006434:	4602      	mov	r2, r0
 8006436:	f240 21ef 	movw	r1, #751	; 0x2ef
 800643a:	f7ff bb2e 	b.w	8005a9a <_dtoa_r+0x32>
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	3202      	adds	r2, #2
 8006442:	0092      	lsls	r2, r2, #2
 8006444:	f107 010c 	add.w	r1, r7, #12
 8006448:	300c      	adds	r0, #12
 800644a:	f7ff fa57 	bl	80058fc <memcpy>
 800644e:	2201      	movs	r2, #1
 8006450:	4629      	mov	r1, r5
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fc1c 	bl	8006c90 <__lshift>
 8006458:	9b00      	ldr	r3, [sp, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006462:	4413      	add	r3, r2
 8006464:	9308      	str	r3, [sp, #32]
 8006466:	9b02      	ldr	r3, [sp, #8]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	46b8      	mov	r8, r7
 800646e:	9306      	str	r3, [sp, #24]
 8006470:	4607      	mov	r7, r0
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	4631      	mov	r1, r6
 8006476:	3b01      	subs	r3, #1
 8006478:	4650      	mov	r0, sl
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	f7ff fa6a 	bl	8005954 <quorem>
 8006480:	4641      	mov	r1, r8
 8006482:	9002      	str	r0, [sp, #8]
 8006484:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006488:	4650      	mov	r0, sl
 800648a:	f000 fc6d 	bl	8006d68 <__mcmp>
 800648e:	463a      	mov	r2, r7
 8006490:	9005      	str	r0, [sp, #20]
 8006492:	4631      	mov	r1, r6
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fc83 	bl	8006da0 <__mdiff>
 800649a:	68c2      	ldr	r2, [r0, #12]
 800649c:	4605      	mov	r5, r0
 800649e:	bb02      	cbnz	r2, 80064e2 <_dtoa_r+0xa7a>
 80064a0:	4601      	mov	r1, r0
 80064a2:	4650      	mov	r0, sl
 80064a4:	f000 fc60 	bl	8006d68 <__mcmp>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4629      	mov	r1, r5
 80064ac:	4620      	mov	r0, r4
 80064ae:	9209      	str	r2, [sp, #36]	; 0x24
 80064b0:	f000 fa1e 	bl	80068f0 <_Bfree>
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b8:	9d04      	ldr	r5, [sp, #16]
 80064ba:	ea43 0102 	orr.w	r1, r3, r2
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	4319      	orrs	r1, r3
 80064c2:	d110      	bne.n	80064e6 <_dtoa_r+0xa7e>
 80064c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064c8:	d029      	beq.n	800651e <_dtoa_r+0xab6>
 80064ca:	9b05      	ldr	r3, [sp, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd02      	ble.n	80064d6 <_dtoa_r+0xa6e>
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	f883 9000 	strb.w	r9, [r3]
 80064dc:	e774      	b.n	80063c8 <_dtoa_r+0x960>
 80064de:	4638      	mov	r0, r7
 80064e0:	e7ba      	b.n	8006458 <_dtoa_r+0x9f0>
 80064e2:	2201      	movs	r2, #1
 80064e4:	e7e1      	b.n	80064aa <_dtoa_r+0xa42>
 80064e6:	9b05      	ldr	r3, [sp, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	db04      	blt.n	80064f6 <_dtoa_r+0xa8e>
 80064ec:	9907      	ldr	r1, [sp, #28]
 80064ee:	430b      	orrs	r3, r1
 80064f0:	9906      	ldr	r1, [sp, #24]
 80064f2:	430b      	orrs	r3, r1
 80064f4:	d120      	bne.n	8006538 <_dtoa_r+0xad0>
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	dded      	ble.n	80064d6 <_dtoa_r+0xa6e>
 80064fa:	4651      	mov	r1, sl
 80064fc:	2201      	movs	r2, #1
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 fbc6 	bl	8006c90 <__lshift>
 8006504:	4631      	mov	r1, r6
 8006506:	4682      	mov	sl, r0
 8006508:	f000 fc2e 	bl	8006d68 <__mcmp>
 800650c:	2800      	cmp	r0, #0
 800650e:	dc03      	bgt.n	8006518 <_dtoa_r+0xab0>
 8006510:	d1e1      	bne.n	80064d6 <_dtoa_r+0xa6e>
 8006512:	f019 0f01 	tst.w	r9, #1
 8006516:	d0de      	beq.n	80064d6 <_dtoa_r+0xa6e>
 8006518:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800651c:	d1d8      	bne.n	80064d0 <_dtoa_r+0xa68>
 800651e:	9a01      	ldr	r2, [sp, #4]
 8006520:	2339      	movs	r3, #57	; 0x39
 8006522:	7013      	strb	r3, [r2, #0]
 8006524:	462b      	mov	r3, r5
 8006526:	461d      	mov	r5, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800652e:	2a39      	cmp	r2, #57	; 0x39
 8006530:	d06c      	beq.n	800660c <_dtoa_r+0xba4>
 8006532:	3201      	adds	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e747      	b.n	80063c8 <_dtoa_r+0x960>
 8006538:	2a00      	cmp	r2, #0
 800653a:	dd07      	ble.n	800654c <_dtoa_r+0xae4>
 800653c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006540:	d0ed      	beq.n	800651e <_dtoa_r+0xab6>
 8006542:	9a01      	ldr	r2, [sp, #4]
 8006544:	f109 0301 	add.w	r3, r9, #1
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	e73d      	b.n	80063c8 <_dtoa_r+0x960>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	9a08      	ldr	r2, [sp, #32]
 8006550:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006554:	4293      	cmp	r3, r2
 8006556:	d043      	beq.n	80065e0 <_dtoa_r+0xb78>
 8006558:	4651      	mov	r1, sl
 800655a:	2300      	movs	r3, #0
 800655c:	220a      	movs	r2, #10
 800655e:	4620      	mov	r0, r4
 8006560:	f000 f9e8 	bl	8006934 <__multadd>
 8006564:	45b8      	cmp	r8, r7
 8006566:	4682      	mov	sl, r0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	f04f 020a 	mov.w	r2, #10
 8006570:	4641      	mov	r1, r8
 8006572:	4620      	mov	r0, r4
 8006574:	d107      	bne.n	8006586 <_dtoa_r+0xb1e>
 8006576:	f000 f9dd 	bl	8006934 <__multadd>
 800657a:	4680      	mov	r8, r0
 800657c:	4607      	mov	r7, r0
 800657e:	9b04      	ldr	r3, [sp, #16]
 8006580:	3301      	adds	r3, #1
 8006582:	9304      	str	r3, [sp, #16]
 8006584:	e775      	b.n	8006472 <_dtoa_r+0xa0a>
 8006586:	f000 f9d5 	bl	8006934 <__multadd>
 800658a:	4639      	mov	r1, r7
 800658c:	4680      	mov	r8, r0
 800658e:	2300      	movs	r3, #0
 8006590:	220a      	movs	r2, #10
 8006592:	4620      	mov	r0, r4
 8006594:	f000 f9ce 	bl	8006934 <__multadd>
 8006598:	4607      	mov	r7, r0
 800659a:	e7f0      	b.n	800657e <_dtoa_r+0xb16>
 800659c:	9b04      	ldr	r3, [sp, #16]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9d00      	ldr	r5, [sp, #0]
 80065a2:	4631      	mov	r1, r6
 80065a4:	4650      	mov	r0, sl
 80065a6:	f7ff f9d5 	bl	8005954 <quorem>
 80065aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	f805 9b01 	strb.w	r9, [r5], #1
 80065b4:	1aea      	subs	r2, r5, r3
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	4293      	cmp	r3, r2
 80065ba:	dd07      	ble.n	80065cc <_dtoa_r+0xb64>
 80065bc:	4651      	mov	r1, sl
 80065be:	2300      	movs	r3, #0
 80065c0:	220a      	movs	r2, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f9b6 	bl	8006934 <__multadd>
 80065c8:	4682      	mov	sl, r0
 80065ca:	e7ea      	b.n	80065a2 <_dtoa_r+0xb3a>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfc8      	it	gt
 80065d2:	461d      	movgt	r5, r3
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	bfd8      	it	le
 80065d8:	2501      	movle	r5, #1
 80065da:	441d      	add	r5, r3
 80065dc:	f04f 0800 	mov.w	r8, #0
 80065e0:	4651      	mov	r1, sl
 80065e2:	2201      	movs	r2, #1
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fb53 	bl	8006c90 <__lshift>
 80065ea:	4631      	mov	r1, r6
 80065ec:	4682      	mov	sl, r0
 80065ee:	f000 fbbb 	bl	8006d68 <__mcmp>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	dc96      	bgt.n	8006524 <_dtoa_r+0xabc>
 80065f6:	d102      	bne.n	80065fe <_dtoa_r+0xb96>
 80065f8:	f019 0f01 	tst.w	r9, #1
 80065fc:	d192      	bne.n	8006524 <_dtoa_r+0xabc>
 80065fe:	462b      	mov	r3, r5
 8006600:	461d      	mov	r5, r3
 8006602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006606:	2a30      	cmp	r2, #48	; 0x30
 8006608:	d0fa      	beq.n	8006600 <_dtoa_r+0xb98>
 800660a:	e6dd      	b.n	80063c8 <_dtoa_r+0x960>
 800660c:	9a00      	ldr	r2, [sp, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d189      	bne.n	8006526 <_dtoa_r+0xabe>
 8006612:	f10b 0b01 	add.w	fp, fp, #1
 8006616:	2331      	movs	r3, #49	; 0x31
 8006618:	e796      	b.n	8006548 <_dtoa_r+0xae0>
 800661a:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <_dtoa_r+0xbdc>)
 800661c:	f7ff ba99 	b.w	8005b52 <_dtoa_r+0xea>
 8006620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006622:	2b00      	cmp	r3, #0
 8006624:	f47f aa6d 	bne.w	8005b02 <_dtoa_r+0x9a>
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <_dtoa_r+0xbe0>)
 800662a:	f7ff ba92 	b.w	8005b52 <_dtoa_r+0xea>
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dcb5      	bgt.n	80065a0 <_dtoa_r+0xb38>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	2b02      	cmp	r3, #2
 8006638:	f73f aeb1 	bgt.w	800639e <_dtoa_r+0x936>
 800663c:	e7b0      	b.n	80065a0 <_dtoa_r+0xb38>
 800663e:	bf00      	nop
 8006640:	080084d0 	.word	0x080084d0
 8006644:	08008764 	.word	0x08008764
 8006648:	08008454 	.word	0x08008454

0800664c <_free_r>:
 800664c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800664e:	2900      	cmp	r1, #0
 8006650:	d044      	beq.n	80066dc <_free_r+0x90>
 8006652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006656:	9001      	str	r0, [sp, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f1a1 0404 	sub.w	r4, r1, #4
 800665e:	bfb8      	it	lt
 8006660:	18e4      	addlt	r4, r4, r3
 8006662:	f000 f8f9 	bl	8006858 <__malloc_lock>
 8006666:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <_free_r+0x94>)
 8006668:	9801      	ldr	r0, [sp, #4]
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	b933      	cbnz	r3, 800667c <_free_r+0x30>
 800666e:	6063      	str	r3, [r4, #4]
 8006670:	6014      	str	r4, [r2, #0]
 8006672:	b003      	add	sp, #12
 8006674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006678:	f000 b8f4 	b.w	8006864 <__malloc_unlock>
 800667c:	42a3      	cmp	r3, r4
 800667e:	d908      	bls.n	8006692 <_free_r+0x46>
 8006680:	6825      	ldr	r5, [r4, #0]
 8006682:	1961      	adds	r1, r4, r5
 8006684:	428b      	cmp	r3, r1
 8006686:	bf01      	itttt	eq
 8006688:	6819      	ldreq	r1, [r3, #0]
 800668a:	685b      	ldreq	r3, [r3, #4]
 800668c:	1949      	addeq	r1, r1, r5
 800668e:	6021      	streq	r1, [r4, #0]
 8006690:	e7ed      	b.n	800666e <_free_r+0x22>
 8006692:	461a      	mov	r2, r3
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	b10b      	cbz	r3, 800669c <_free_r+0x50>
 8006698:	42a3      	cmp	r3, r4
 800669a:	d9fa      	bls.n	8006692 <_free_r+0x46>
 800669c:	6811      	ldr	r1, [r2, #0]
 800669e:	1855      	adds	r5, r2, r1
 80066a0:	42a5      	cmp	r5, r4
 80066a2:	d10b      	bne.n	80066bc <_free_r+0x70>
 80066a4:	6824      	ldr	r4, [r4, #0]
 80066a6:	4421      	add	r1, r4
 80066a8:	1854      	adds	r4, r2, r1
 80066aa:	42a3      	cmp	r3, r4
 80066ac:	6011      	str	r1, [r2, #0]
 80066ae:	d1e0      	bne.n	8006672 <_free_r+0x26>
 80066b0:	681c      	ldr	r4, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	6053      	str	r3, [r2, #4]
 80066b6:	440c      	add	r4, r1
 80066b8:	6014      	str	r4, [r2, #0]
 80066ba:	e7da      	b.n	8006672 <_free_r+0x26>
 80066bc:	d902      	bls.n	80066c4 <_free_r+0x78>
 80066be:	230c      	movs	r3, #12
 80066c0:	6003      	str	r3, [r0, #0]
 80066c2:	e7d6      	b.n	8006672 <_free_r+0x26>
 80066c4:	6825      	ldr	r5, [r4, #0]
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	428b      	cmp	r3, r1
 80066ca:	bf04      	itt	eq
 80066cc:	6819      	ldreq	r1, [r3, #0]
 80066ce:	685b      	ldreq	r3, [r3, #4]
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	bf04      	itt	eq
 80066d4:	1949      	addeq	r1, r1, r5
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	6054      	str	r4, [r2, #4]
 80066da:	e7ca      	b.n	8006672 <_free_r+0x26>
 80066dc:	b003      	add	sp, #12
 80066de:	bd30      	pop	{r4, r5, pc}
 80066e0:	20000894 	.word	0x20000894

080066e4 <malloc>:
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <malloc+0xc>)
 80066e6:	4601      	mov	r1, r0
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f000 b823 	b.w	8006734 <_malloc_r>
 80066ee:	bf00      	nop
 80066f0:	200001d0 	.word	0x200001d0

080066f4 <sbrk_aligned>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4e0e      	ldr	r6, [pc, #56]	; (8006730 <sbrk_aligned+0x3c>)
 80066f8:	460c      	mov	r4, r1
 80066fa:	6831      	ldr	r1, [r6, #0]
 80066fc:	4605      	mov	r5, r0
 80066fe:	b911      	cbnz	r1, 8006706 <sbrk_aligned+0x12>
 8006700:	f001 fbce 	bl	8007ea0 <_sbrk_r>
 8006704:	6030      	str	r0, [r6, #0]
 8006706:	4621      	mov	r1, r4
 8006708:	4628      	mov	r0, r5
 800670a:	f001 fbc9 	bl	8007ea0 <_sbrk_r>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d00a      	beq.n	8006728 <sbrk_aligned+0x34>
 8006712:	1cc4      	adds	r4, r0, #3
 8006714:	f024 0403 	bic.w	r4, r4, #3
 8006718:	42a0      	cmp	r0, r4
 800671a:	d007      	beq.n	800672c <sbrk_aligned+0x38>
 800671c:	1a21      	subs	r1, r4, r0
 800671e:	4628      	mov	r0, r5
 8006720:	f001 fbbe 	bl	8007ea0 <_sbrk_r>
 8006724:	3001      	adds	r0, #1
 8006726:	d101      	bne.n	800672c <sbrk_aligned+0x38>
 8006728:	f04f 34ff 	mov.w	r4, #4294967295
 800672c:	4620      	mov	r0, r4
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	20000898 	.word	0x20000898

08006734 <_malloc_r>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	1ccd      	adds	r5, r1, #3
 800673a:	f025 0503 	bic.w	r5, r5, #3
 800673e:	3508      	adds	r5, #8
 8006740:	2d0c      	cmp	r5, #12
 8006742:	bf38      	it	cc
 8006744:	250c      	movcc	r5, #12
 8006746:	2d00      	cmp	r5, #0
 8006748:	4607      	mov	r7, r0
 800674a:	db01      	blt.n	8006750 <_malloc_r+0x1c>
 800674c:	42a9      	cmp	r1, r5
 800674e:	d905      	bls.n	800675c <_malloc_r+0x28>
 8006750:	230c      	movs	r3, #12
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	2600      	movs	r6, #0
 8006756:	4630      	mov	r0, r6
 8006758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006830 <_malloc_r+0xfc>
 8006760:	f000 f87a 	bl	8006858 <__malloc_lock>
 8006764:	f8d8 3000 	ldr.w	r3, [r8]
 8006768:	461c      	mov	r4, r3
 800676a:	bb5c      	cbnz	r4, 80067c4 <_malloc_r+0x90>
 800676c:	4629      	mov	r1, r5
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff ffc0 	bl	80066f4 <sbrk_aligned>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	4604      	mov	r4, r0
 8006778:	d155      	bne.n	8006826 <_malloc_r+0xf2>
 800677a:	f8d8 4000 	ldr.w	r4, [r8]
 800677e:	4626      	mov	r6, r4
 8006780:	2e00      	cmp	r6, #0
 8006782:	d145      	bne.n	8006810 <_malloc_r+0xdc>
 8006784:	2c00      	cmp	r4, #0
 8006786:	d048      	beq.n	800681a <_malloc_r+0xe6>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	4631      	mov	r1, r6
 800678c:	4638      	mov	r0, r7
 800678e:	eb04 0903 	add.w	r9, r4, r3
 8006792:	f001 fb85 	bl	8007ea0 <_sbrk_r>
 8006796:	4581      	cmp	r9, r0
 8006798:	d13f      	bne.n	800681a <_malloc_r+0xe6>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	1a6d      	subs	r5, r5, r1
 800679e:	4629      	mov	r1, r5
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff ffa7 	bl	80066f4 <sbrk_aligned>
 80067a6:	3001      	adds	r0, #1
 80067a8:	d037      	beq.n	800681a <_malloc_r+0xe6>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	442b      	add	r3, r5
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	f8d8 3000 	ldr.w	r3, [r8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d038      	beq.n	800682a <_malloc_r+0xf6>
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	42a2      	cmp	r2, r4
 80067bc:	d12b      	bne.n	8006816 <_malloc_r+0xe2>
 80067be:	2200      	movs	r2, #0
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	e00f      	b.n	80067e4 <_malloc_r+0xb0>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	1b52      	subs	r2, r2, r5
 80067c8:	d41f      	bmi.n	800680a <_malloc_r+0xd6>
 80067ca:	2a0b      	cmp	r2, #11
 80067cc:	d917      	bls.n	80067fe <_malloc_r+0xca>
 80067ce:	1961      	adds	r1, r4, r5
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	6025      	str	r5, [r4, #0]
 80067d4:	bf18      	it	ne
 80067d6:	6059      	strne	r1, [r3, #4]
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	bf08      	it	eq
 80067dc:	f8c8 1000 	streq.w	r1, [r8]
 80067e0:	5162      	str	r2, [r4, r5]
 80067e2:	604b      	str	r3, [r1, #4]
 80067e4:	4638      	mov	r0, r7
 80067e6:	f104 060b 	add.w	r6, r4, #11
 80067ea:	f000 f83b 	bl	8006864 <__malloc_unlock>
 80067ee:	f026 0607 	bic.w	r6, r6, #7
 80067f2:	1d23      	adds	r3, r4, #4
 80067f4:	1af2      	subs	r2, r6, r3
 80067f6:	d0ae      	beq.n	8006756 <_malloc_r+0x22>
 80067f8:	1b9b      	subs	r3, r3, r6
 80067fa:	50a3      	str	r3, [r4, r2]
 80067fc:	e7ab      	b.n	8006756 <_malloc_r+0x22>
 80067fe:	42a3      	cmp	r3, r4
 8006800:	6862      	ldr	r2, [r4, #4]
 8006802:	d1dd      	bne.n	80067c0 <_malloc_r+0x8c>
 8006804:	f8c8 2000 	str.w	r2, [r8]
 8006808:	e7ec      	b.n	80067e4 <_malloc_r+0xb0>
 800680a:	4623      	mov	r3, r4
 800680c:	6864      	ldr	r4, [r4, #4]
 800680e:	e7ac      	b.n	800676a <_malloc_r+0x36>
 8006810:	4634      	mov	r4, r6
 8006812:	6876      	ldr	r6, [r6, #4]
 8006814:	e7b4      	b.n	8006780 <_malloc_r+0x4c>
 8006816:	4613      	mov	r3, r2
 8006818:	e7cc      	b.n	80067b4 <_malloc_r+0x80>
 800681a:	230c      	movs	r3, #12
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4638      	mov	r0, r7
 8006820:	f000 f820 	bl	8006864 <__malloc_unlock>
 8006824:	e797      	b.n	8006756 <_malloc_r+0x22>
 8006826:	6025      	str	r5, [r4, #0]
 8006828:	e7dc      	b.n	80067e4 <_malloc_r+0xb0>
 800682a:	605b      	str	r3, [r3, #4]
 800682c:	deff      	udf	#255	; 0xff
 800682e:	bf00      	nop
 8006830:	20000894 	.word	0x20000894

08006834 <__ascii_mbtowc>:
 8006834:	b082      	sub	sp, #8
 8006836:	b901      	cbnz	r1, 800683a <__ascii_mbtowc+0x6>
 8006838:	a901      	add	r1, sp, #4
 800683a:	b142      	cbz	r2, 800684e <__ascii_mbtowc+0x1a>
 800683c:	b14b      	cbz	r3, 8006852 <__ascii_mbtowc+0x1e>
 800683e:	7813      	ldrb	r3, [r2, #0]
 8006840:	600b      	str	r3, [r1, #0]
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	1e10      	subs	r0, r2, #0
 8006846:	bf18      	it	ne
 8006848:	2001      	movne	r0, #1
 800684a:	b002      	add	sp, #8
 800684c:	4770      	bx	lr
 800684e:	4610      	mov	r0, r2
 8006850:	e7fb      	b.n	800684a <__ascii_mbtowc+0x16>
 8006852:	f06f 0001 	mvn.w	r0, #1
 8006856:	e7f8      	b.n	800684a <__ascii_mbtowc+0x16>

08006858 <__malloc_lock>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__malloc_lock+0x8>)
 800685a:	f7ff b84d 	b.w	80058f8 <__retarget_lock_acquire_recursive>
 800685e:	bf00      	nop
 8006860:	20000890 	.word	0x20000890

08006864 <__malloc_unlock>:
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <__malloc_unlock+0x8>)
 8006866:	f7ff b848 	b.w	80058fa <__retarget_lock_release_recursive>
 800686a:	bf00      	nop
 800686c:	20000890 	.word	0x20000890

08006870 <_Balloc>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	69c6      	ldr	r6, [r0, #28]
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	b976      	cbnz	r6, 8006898 <_Balloc+0x28>
 800687a:	2010      	movs	r0, #16
 800687c:	f7ff ff32 	bl	80066e4 <malloc>
 8006880:	4602      	mov	r2, r0
 8006882:	61e0      	str	r0, [r4, #28]
 8006884:	b920      	cbnz	r0, 8006890 <_Balloc+0x20>
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <_Balloc+0x78>)
 8006888:	4818      	ldr	r0, [pc, #96]	; (80068ec <_Balloc+0x7c>)
 800688a:	216b      	movs	r1, #107	; 0x6b
 800688c:	f7ff f844 	bl	8005918 <__assert_func>
 8006890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006894:	6006      	str	r6, [r0, #0]
 8006896:	60c6      	str	r6, [r0, #12]
 8006898:	69e6      	ldr	r6, [r4, #28]
 800689a:	68f3      	ldr	r3, [r6, #12]
 800689c:	b183      	cbz	r3, 80068c0 <_Balloc+0x50>
 800689e:	69e3      	ldr	r3, [r4, #28]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068a6:	b9b8      	cbnz	r0, 80068d8 <_Balloc+0x68>
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f605 	lsl.w	r6, r1, r5
 80068ae:	1d72      	adds	r2, r6, #5
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	4620      	mov	r0, r4
 80068b4:	f001 fb0b 	bl	8007ece <_calloc_r>
 80068b8:	b160      	cbz	r0, 80068d4 <_Balloc+0x64>
 80068ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068be:	e00e      	b.n	80068de <_Balloc+0x6e>
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	2104      	movs	r1, #4
 80068c4:	4620      	mov	r0, r4
 80068c6:	f001 fb02 	bl	8007ece <_calloc_r>
 80068ca:	69e3      	ldr	r3, [r4, #28]
 80068cc:	60f0      	str	r0, [r6, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e4      	bne.n	800689e <_Balloc+0x2e>
 80068d4:	2000      	movs	r0, #0
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	6802      	ldr	r2, [r0, #0]
 80068da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068de:	2300      	movs	r3, #0
 80068e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068e4:	e7f7      	b.n	80068d6 <_Balloc+0x66>
 80068e6:	bf00      	nop
 80068e8:	08008461 	.word	0x08008461
 80068ec:	080084e1 	.word	0x080084e1

080068f0 <_Bfree>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	69c6      	ldr	r6, [r0, #28]
 80068f4:	4605      	mov	r5, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	b976      	cbnz	r6, 8006918 <_Bfree+0x28>
 80068fa:	2010      	movs	r0, #16
 80068fc:	f7ff fef2 	bl	80066e4 <malloc>
 8006900:	4602      	mov	r2, r0
 8006902:	61e8      	str	r0, [r5, #28]
 8006904:	b920      	cbnz	r0, 8006910 <_Bfree+0x20>
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <_Bfree+0x3c>)
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <_Bfree+0x40>)
 800690a:	218f      	movs	r1, #143	; 0x8f
 800690c:	f7ff f804 	bl	8005918 <__assert_func>
 8006910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006914:	6006      	str	r6, [r0, #0]
 8006916:	60c6      	str	r6, [r0, #12]
 8006918:	b13c      	cbz	r4, 800692a <_Bfree+0x3a>
 800691a:	69eb      	ldr	r3, [r5, #28]
 800691c:	6862      	ldr	r2, [r4, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006924:	6021      	str	r1, [r4, #0]
 8006926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	08008461 	.word	0x08008461
 8006930:	080084e1 	.word	0x080084e1

08006934 <__multadd>:
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	690d      	ldr	r5, [r1, #16]
 800693a:	4607      	mov	r7, r0
 800693c:	460c      	mov	r4, r1
 800693e:	461e      	mov	r6, r3
 8006940:	f101 0c14 	add.w	ip, r1, #20
 8006944:	2000      	movs	r0, #0
 8006946:	f8dc 3000 	ldr.w	r3, [ip]
 800694a:	b299      	uxth	r1, r3
 800694c:	fb02 6101 	mla	r1, r2, r1, r6
 8006950:	0c1e      	lsrs	r6, r3, #16
 8006952:	0c0b      	lsrs	r3, r1, #16
 8006954:	fb02 3306 	mla	r3, r2, r6, r3
 8006958:	b289      	uxth	r1, r1
 800695a:	3001      	adds	r0, #1
 800695c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006960:	4285      	cmp	r5, r0
 8006962:	f84c 1b04 	str.w	r1, [ip], #4
 8006966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800696a:	dcec      	bgt.n	8006946 <__multadd+0x12>
 800696c:	b30e      	cbz	r6, 80069b2 <__multadd+0x7e>
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	42ab      	cmp	r3, r5
 8006972:	dc19      	bgt.n	80069a8 <__multadd+0x74>
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4638      	mov	r0, r7
 8006978:	3101      	adds	r1, #1
 800697a:	f7ff ff79 	bl	8006870 <_Balloc>
 800697e:	4680      	mov	r8, r0
 8006980:	b928      	cbnz	r0, 800698e <__multadd+0x5a>
 8006982:	4602      	mov	r2, r0
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <__multadd+0x84>)
 8006986:	480d      	ldr	r0, [pc, #52]	; (80069bc <__multadd+0x88>)
 8006988:	21ba      	movs	r1, #186	; 0xba
 800698a:	f7fe ffc5 	bl	8005918 <__assert_func>
 800698e:	6922      	ldr	r2, [r4, #16]
 8006990:	3202      	adds	r2, #2
 8006992:	f104 010c 	add.w	r1, r4, #12
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	300c      	adds	r0, #12
 800699a:	f7fe ffaf 	bl	80058fc <memcpy>
 800699e:	4621      	mov	r1, r4
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ffa5 	bl	80068f0 <_Bfree>
 80069a6:	4644      	mov	r4, r8
 80069a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069ac:	3501      	adds	r5, #1
 80069ae:	615e      	str	r6, [r3, #20]
 80069b0:	6125      	str	r5, [r4, #16]
 80069b2:	4620      	mov	r0, r4
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	080084d0 	.word	0x080084d0
 80069bc:	080084e1 	.word	0x080084e1

080069c0 <__hi0bits>:
 80069c0:	0c03      	lsrs	r3, r0, #16
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	b9d3      	cbnz	r3, 80069fc <__hi0bits+0x3c>
 80069c6:	0400      	lsls	r0, r0, #16
 80069c8:	2310      	movs	r3, #16
 80069ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069ce:	bf04      	itt	eq
 80069d0:	0200      	lsleq	r0, r0, #8
 80069d2:	3308      	addeq	r3, #8
 80069d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069d8:	bf04      	itt	eq
 80069da:	0100      	lsleq	r0, r0, #4
 80069dc:	3304      	addeq	r3, #4
 80069de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069e2:	bf04      	itt	eq
 80069e4:	0080      	lsleq	r0, r0, #2
 80069e6:	3302      	addeq	r3, #2
 80069e8:	2800      	cmp	r0, #0
 80069ea:	db05      	blt.n	80069f8 <__hi0bits+0x38>
 80069ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069f0:	f103 0301 	add.w	r3, r3, #1
 80069f4:	bf08      	it	eq
 80069f6:	2320      	moveq	r3, #32
 80069f8:	4618      	mov	r0, r3
 80069fa:	4770      	bx	lr
 80069fc:	2300      	movs	r3, #0
 80069fe:	e7e4      	b.n	80069ca <__hi0bits+0xa>

08006a00 <__lo0bits>:
 8006a00:	6803      	ldr	r3, [r0, #0]
 8006a02:	f013 0207 	ands.w	r2, r3, #7
 8006a06:	d00c      	beq.n	8006a22 <__lo0bits+0x22>
 8006a08:	07d9      	lsls	r1, r3, #31
 8006a0a:	d422      	bmi.n	8006a52 <__lo0bits+0x52>
 8006a0c:	079a      	lsls	r2, r3, #30
 8006a0e:	bf49      	itett	mi
 8006a10:	085b      	lsrmi	r3, r3, #1
 8006a12:	089b      	lsrpl	r3, r3, #2
 8006a14:	6003      	strmi	r3, [r0, #0]
 8006a16:	2201      	movmi	r2, #1
 8006a18:	bf5c      	itt	pl
 8006a1a:	6003      	strpl	r3, [r0, #0]
 8006a1c:	2202      	movpl	r2, #2
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4770      	bx	lr
 8006a22:	b299      	uxth	r1, r3
 8006a24:	b909      	cbnz	r1, 8006a2a <__lo0bits+0x2a>
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	2210      	movs	r2, #16
 8006a2a:	b2d9      	uxtb	r1, r3
 8006a2c:	b909      	cbnz	r1, 8006a32 <__lo0bits+0x32>
 8006a2e:	3208      	adds	r2, #8
 8006a30:	0a1b      	lsrs	r3, r3, #8
 8006a32:	0719      	lsls	r1, r3, #28
 8006a34:	bf04      	itt	eq
 8006a36:	091b      	lsreq	r3, r3, #4
 8006a38:	3204      	addeq	r2, #4
 8006a3a:	0799      	lsls	r1, r3, #30
 8006a3c:	bf04      	itt	eq
 8006a3e:	089b      	lsreq	r3, r3, #2
 8006a40:	3202      	addeq	r2, #2
 8006a42:	07d9      	lsls	r1, r3, #31
 8006a44:	d403      	bmi.n	8006a4e <__lo0bits+0x4e>
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	f102 0201 	add.w	r2, r2, #1
 8006a4c:	d003      	beq.n	8006a56 <__lo0bits+0x56>
 8006a4e:	6003      	str	r3, [r0, #0]
 8006a50:	e7e5      	b.n	8006a1e <__lo0bits+0x1e>
 8006a52:	2200      	movs	r2, #0
 8006a54:	e7e3      	b.n	8006a1e <__lo0bits+0x1e>
 8006a56:	2220      	movs	r2, #32
 8006a58:	e7e1      	b.n	8006a1e <__lo0bits+0x1e>
	...

08006a5c <__i2b>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	460c      	mov	r4, r1
 8006a60:	2101      	movs	r1, #1
 8006a62:	f7ff ff05 	bl	8006870 <_Balloc>
 8006a66:	4602      	mov	r2, r0
 8006a68:	b928      	cbnz	r0, 8006a76 <__i2b+0x1a>
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <__i2b+0x24>)
 8006a6c:	4805      	ldr	r0, [pc, #20]	; (8006a84 <__i2b+0x28>)
 8006a6e:	f240 1145 	movw	r1, #325	; 0x145
 8006a72:	f7fe ff51 	bl	8005918 <__assert_func>
 8006a76:	2301      	movs	r3, #1
 8006a78:	6144      	str	r4, [r0, #20]
 8006a7a:	6103      	str	r3, [r0, #16]
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	bf00      	nop
 8006a80:	080084d0 	.word	0x080084d0
 8006a84:	080084e1 	.word	0x080084e1

08006a88 <__multiply>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	4691      	mov	r9, r2
 8006a8e:	690a      	ldr	r2, [r1, #16]
 8006a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	bfb8      	it	lt
 8006a98:	460b      	movlt	r3, r1
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	bfbc      	itt	lt
 8006a9e:	464c      	movlt	r4, r9
 8006aa0:	4699      	movlt	r9, r3
 8006aa2:	6927      	ldr	r7, [r4, #16]
 8006aa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	6861      	ldr	r1, [r4, #4]
 8006aac:	eb07 060a 	add.w	r6, r7, sl
 8006ab0:	42b3      	cmp	r3, r6
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	bfb8      	it	lt
 8006ab6:	3101      	addlt	r1, #1
 8006ab8:	f7ff feda 	bl	8006870 <_Balloc>
 8006abc:	b930      	cbnz	r0, 8006acc <__multiply+0x44>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4b44      	ldr	r3, [pc, #272]	; (8006bd4 <__multiply+0x14c>)
 8006ac2:	4845      	ldr	r0, [pc, #276]	; (8006bd8 <__multiply+0x150>)
 8006ac4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ac8:	f7fe ff26 	bl	8005918 <__assert_func>
 8006acc:	f100 0514 	add.w	r5, r0, #20
 8006ad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4543      	cmp	r3, r8
 8006ada:	d321      	bcc.n	8006b20 <__multiply+0x98>
 8006adc:	f104 0314 	add.w	r3, r4, #20
 8006ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ae4:	f109 0314 	add.w	r3, r9, #20
 8006ae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006aec:	9202      	str	r2, [sp, #8]
 8006aee:	1b3a      	subs	r2, r7, r4
 8006af0:	3a15      	subs	r2, #21
 8006af2:	f022 0203 	bic.w	r2, r2, #3
 8006af6:	3204      	adds	r2, #4
 8006af8:	f104 0115 	add.w	r1, r4, #21
 8006afc:	428f      	cmp	r7, r1
 8006afe:	bf38      	it	cc
 8006b00:	2204      	movcc	r2, #4
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	9a02      	ldr	r2, [sp, #8]
 8006b06:	9303      	str	r3, [sp, #12]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d80c      	bhi.n	8006b26 <__multiply+0x9e>
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	dd03      	ble.n	8006b18 <__multiply+0x90>
 8006b10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05b      	beq.n	8006bd0 <__multiply+0x148>
 8006b18:	6106      	str	r6, [r0, #16]
 8006b1a:	b005      	add	sp, #20
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b20:	f843 2b04 	str.w	r2, [r3], #4
 8006b24:	e7d8      	b.n	8006ad8 <__multiply+0x50>
 8006b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b2a:	f1ba 0f00 	cmp.w	sl, #0
 8006b2e:	d024      	beq.n	8006b7a <__multiply+0xf2>
 8006b30:	f104 0e14 	add.w	lr, r4, #20
 8006b34:	46a9      	mov	r9, r5
 8006b36:	f04f 0c00 	mov.w	ip, #0
 8006b3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b3e:	f8d9 1000 	ldr.w	r1, [r9]
 8006b42:	fa1f fb82 	uxth.w	fp, r2
 8006b46:	b289      	uxth	r1, r1
 8006b48:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b50:	f8d9 2000 	ldr.w	r2, [r9]
 8006b54:	4461      	add	r1, ip
 8006b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b62:	b289      	uxth	r1, r1
 8006b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b68:	4577      	cmp	r7, lr
 8006b6a:	f849 1b04 	str.w	r1, [r9], #4
 8006b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b72:	d8e2      	bhi.n	8006b3a <__multiply+0xb2>
 8006b74:	9a01      	ldr	r2, [sp, #4]
 8006b76:	f845 c002 	str.w	ip, [r5, r2]
 8006b7a:	9a03      	ldr	r2, [sp, #12]
 8006b7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b80:	3304      	adds	r3, #4
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	d021      	beq.n	8006bcc <__multiply+0x144>
 8006b88:	6829      	ldr	r1, [r5, #0]
 8006b8a:	f104 0c14 	add.w	ip, r4, #20
 8006b8e:	46ae      	mov	lr, r5
 8006b90:	f04f 0a00 	mov.w	sl, #0
 8006b94:	f8bc b000 	ldrh.w	fp, [ip]
 8006b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8006ba0:	4452      	add	r2, sl
 8006ba2:	b289      	uxth	r1, r1
 8006ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8006bac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006bb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bb4:	f8be 1000 	ldrh.w	r1, [lr]
 8006bb8:	fb09 110a 	mla	r1, r9, sl, r1
 8006bbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bc0:	4567      	cmp	r7, ip
 8006bc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bc6:	d8e5      	bhi.n	8006b94 <__multiply+0x10c>
 8006bc8:	9a01      	ldr	r2, [sp, #4]
 8006bca:	50a9      	str	r1, [r5, r2]
 8006bcc:	3504      	adds	r5, #4
 8006bce:	e799      	b.n	8006b04 <__multiply+0x7c>
 8006bd0:	3e01      	subs	r6, #1
 8006bd2:	e79b      	b.n	8006b0c <__multiply+0x84>
 8006bd4:	080084d0 	.word	0x080084d0
 8006bd8:	080084e1 	.word	0x080084e1

08006bdc <__pow5mult>:
 8006bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be0:	4615      	mov	r5, r2
 8006be2:	f012 0203 	ands.w	r2, r2, #3
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	d007      	beq.n	8006bfc <__pow5mult+0x20>
 8006bec:	4c25      	ldr	r4, [pc, #148]	; (8006c84 <__pow5mult+0xa8>)
 8006bee:	3a01      	subs	r2, #1
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bf6:	f7ff fe9d 	bl	8006934 <__multadd>
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	10ad      	asrs	r5, r5, #2
 8006bfe:	d03d      	beq.n	8006c7c <__pow5mult+0xa0>
 8006c00:	69f4      	ldr	r4, [r6, #28]
 8006c02:	b97c      	cbnz	r4, 8006c24 <__pow5mult+0x48>
 8006c04:	2010      	movs	r0, #16
 8006c06:	f7ff fd6d 	bl	80066e4 <malloc>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	61f0      	str	r0, [r6, #28]
 8006c0e:	b928      	cbnz	r0, 8006c1c <__pow5mult+0x40>
 8006c10:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <__pow5mult+0xac>)
 8006c12:	481e      	ldr	r0, [pc, #120]	; (8006c8c <__pow5mult+0xb0>)
 8006c14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c18:	f7fe fe7e 	bl	8005918 <__assert_func>
 8006c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c20:	6004      	str	r4, [r0, #0]
 8006c22:	60c4      	str	r4, [r0, #12]
 8006c24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c2c:	b94c      	cbnz	r4, 8006c42 <__pow5mult+0x66>
 8006c2e:	f240 2171 	movw	r1, #625	; 0x271
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff ff12 	bl	8006a5c <__i2b>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c3e:	4604      	mov	r4, r0
 8006c40:	6003      	str	r3, [r0, #0]
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	07eb      	lsls	r3, r5, #31
 8006c48:	d50a      	bpl.n	8006c60 <__pow5mult+0x84>
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ff1a 	bl	8006a88 <__multiply>
 8006c54:	4639      	mov	r1, r7
 8006c56:	4680      	mov	r8, r0
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff fe49 	bl	80068f0 <_Bfree>
 8006c5e:	4647      	mov	r7, r8
 8006c60:	106d      	asrs	r5, r5, #1
 8006c62:	d00b      	beq.n	8006c7c <__pow5mult+0xa0>
 8006c64:	6820      	ldr	r0, [r4, #0]
 8006c66:	b938      	cbnz	r0, 8006c78 <__pow5mult+0x9c>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff ff0b 	bl	8006a88 <__multiply>
 8006c72:	6020      	str	r0, [r4, #0]
 8006c74:	f8c0 9000 	str.w	r9, [r0]
 8006c78:	4604      	mov	r4, r0
 8006c7a:	e7e4      	b.n	8006c46 <__pow5mult+0x6a>
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c82:	bf00      	nop
 8006c84:	08008630 	.word	0x08008630
 8006c88:	08008461 	.word	0x08008461
 8006c8c:	080084e1 	.word	0x080084e1

08006c90 <__lshift>:
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	460c      	mov	r4, r1
 8006c96:	6849      	ldr	r1, [r1, #4]
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	4691      	mov	r9, r2
 8006ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ca8:	f108 0601 	add.w	r6, r8, #1
 8006cac:	42b3      	cmp	r3, r6
 8006cae:	db0b      	blt.n	8006cc8 <__lshift+0x38>
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff fddd 	bl	8006870 <_Balloc>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	b948      	cbnz	r0, 8006cce <__lshift+0x3e>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	4b28      	ldr	r3, [pc, #160]	; (8006d60 <__lshift+0xd0>)
 8006cbe:	4829      	ldr	r0, [pc, #164]	; (8006d64 <__lshift+0xd4>)
 8006cc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006cc4:	f7fe fe28 	bl	8005918 <__assert_func>
 8006cc8:	3101      	adds	r1, #1
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	e7ee      	b.n	8006cac <__lshift+0x1c>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f100 0114 	add.w	r1, r0, #20
 8006cd4:	f100 0210 	add.w	r2, r0, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	4553      	cmp	r3, sl
 8006cdc:	db33      	blt.n	8006d46 <__lshift+0xb6>
 8006cde:	6920      	ldr	r0, [r4, #16]
 8006ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce4:	f104 0314 	add.w	r3, r4, #20
 8006ce8:	f019 091f 	ands.w	r9, r9, #31
 8006cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cf4:	d02b      	beq.n	8006d4e <__lshift+0xbe>
 8006cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8006cfa:	468a      	mov	sl, r1
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	fa00 f009 	lsl.w	r0, r0, r9
 8006d04:	4310      	orrs	r0, r2
 8006d06:	f84a 0b04 	str.w	r0, [sl], #4
 8006d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0e:	459c      	cmp	ip, r3
 8006d10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d14:	d8f3      	bhi.n	8006cfe <__lshift+0x6e>
 8006d16:	ebac 0304 	sub.w	r3, ip, r4
 8006d1a:	3b15      	subs	r3, #21
 8006d1c:	f023 0303 	bic.w	r3, r3, #3
 8006d20:	3304      	adds	r3, #4
 8006d22:	f104 0015 	add.w	r0, r4, #21
 8006d26:	4584      	cmp	ip, r0
 8006d28:	bf38      	it	cc
 8006d2a:	2304      	movcc	r3, #4
 8006d2c:	50ca      	str	r2, [r1, r3]
 8006d2e:	b10a      	cbz	r2, 8006d34 <__lshift+0xa4>
 8006d30:	f108 0602 	add.w	r6, r8, #2
 8006d34:	3e01      	subs	r6, #1
 8006d36:	4638      	mov	r0, r7
 8006d38:	612e      	str	r6, [r5, #16]
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	f7ff fdd8 	bl	80068f0 <_Bfree>
 8006d40:	4628      	mov	r0, r5
 8006d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	e7c5      	b.n	8006cda <__lshift+0x4a>
 8006d4e:	3904      	subs	r1, #4
 8006d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d58:	459c      	cmp	ip, r3
 8006d5a:	d8f9      	bhi.n	8006d50 <__lshift+0xc0>
 8006d5c:	e7ea      	b.n	8006d34 <__lshift+0xa4>
 8006d5e:	bf00      	nop
 8006d60:	080084d0 	.word	0x080084d0
 8006d64:	080084e1 	.word	0x080084e1

08006d68 <__mcmp>:
 8006d68:	b530      	push	{r4, r5, lr}
 8006d6a:	6902      	ldr	r2, [r0, #16]
 8006d6c:	690c      	ldr	r4, [r1, #16]
 8006d6e:	1b12      	subs	r2, r2, r4
 8006d70:	d10e      	bne.n	8006d90 <__mcmp+0x28>
 8006d72:	f100 0314 	add.w	r3, r0, #20
 8006d76:	3114      	adds	r1, #20
 8006d78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d88:	42a5      	cmp	r5, r4
 8006d8a:	d003      	beq.n	8006d94 <__mcmp+0x2c>
 8006d8c:	d305      	bcc.n	8006d9a <__mcmp+0x32>
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4610      	mov	r0, r2
 8006d92:	bd30      	pop	{r4, r5, pc}
 8006d94:	4283      	cmp	r3, r0
 8006d96:	d3f3      	bcc.n	8006d80 <__mcmp+0x18>
 8006d98:	e7fa      	b.n	8006d90 <__mcmp+0x28>
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	e7f7      	b.n	8006d90 <__mcmp+0x28>

08006da0 <__mdiff>:
 8006da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	460c      	mov	r4, r1
 8006da6:	4606      	mov	r6, r0
 8006da8:	4611      	mov	r1, r2
 8006daa:	4620      	mov	r0, r4
 8006dac:	4690      	mov	r8, r2
 8006dae:	f7ff ffdb 	bl	8006d68 <__mcmp>
 8006db2:	1e05      	subs	r5, r0, #0
 8006db4:	d110      	bne.n	8006dd8 <__mdiff+0x38>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff fd59 	bl	8006870 <_Balloc>
 8006dbe:	b930      	cbnz	r0, 8006dce <__mdiff+0x2e>
 8006dc0:	4b3a      	ldr	r3, [pc, #232]	; (8006eac <__mdiff+0x10c>)
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	f240 2137 	movw	r1, #567	; 0x237
 8006dc8:	4839      	ldr	r0, [pc, #228]	; (8006eb0 <__mdiff+0x110>)
 8006dca:	f7fe fda5 	bl	8005918 <__assert_func>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd8:	bfa4      	itt	ge
 8006dda:	4643      	movge	r3, r8
 8006ddc:	46a0      	movge	r8, r4
 8006dde:	4630      	mov	r0, r6
 8006de0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006de4:	bfa6      	itte	ge
 8006de6:	461c      	movge	r4, r3
 8006de8:	2500      	movge	r5, #0
 8006dea:	2501      	movlt	r5, #1
 8006dec:	f7ff fd40 	bl	8006870 <_Balloc>
 8006df0:	b920      	cbnz	r0, 8006dfc <__mdiff+0x5c>
 8006df2:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <__mdiff+0x10c>)
 8006df4:	4602      	mov	r2, r0
 8006df6:	f240 2145 	movw	r1, #581	; 0x245
 8006dfa:	e7e5      	b.n	8006dc8 <__mdiff+0x28>
 8006dfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e00:	6926      	ldr	r6, [r4, #16]
 8006e02:	60c5      	str	r5, [r0, #12]
 8006e04:	f104 0914 	add.w	r9, r4, #20
 8006e08:	f108 0514 	add.w	r5, r8, #20
 8006e0c:	f100 0e14 	add.w	lr, r0, #20
 8006e10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e18:	f108 0210 	add.w	r2, r8, #16
 8006e1c:	46f2      	mov	sl, lr
 8006e1e:	2100      	movs	r1, #0
 8006e20:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e28:	fa11 f88b 	uxtah	r8, r1, fp
 8006e2c:	b299      	uxth	r1, r3
 8006e2e:	0c1b      	lsrs	r3, r3, #16
 8006e30:	eba8 0801 	sub.w	r8, r8, r1
 8006e34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e3c:	fa1f f888 	uxth.w	r8, r8
 8006e40:	1419      	asrs	r1, r3, #16
 8006e42:	454e      	cmp	r6, r9
 8006e44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e48:	f84a 3b04 	str.w	r3, [sl], #4
 8006e4c:	d8e8      	bhi.n	8006e20 <__mdiff+0x80>
 8006e4e:	1b33      	subs	r3, r6, r4
 8006e50:	3b15      	subs	r3, #21
 8006e52:	f023 0303 	bic.w	r3, r3, #3
 8006e56:	3304      	adds	r3, #4
 8006e58:	3415      	adds	r4, #21
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	bf38      	it	cc
 8006e5e:	2304      	movcc	r3, #4
 8006e60:	441d      	add	r5, r3
 8006e62:	4473      	add	r3, lr
 8006e64:	469e      	mov	lr, r3
 8006e66:	462e      	mov	r6, r5
 8006e68:	4566      	cmp	r6, ip
 8006e6a:	d30e      	bcc.n	8006e8a <__mdiff+0xea>
 8006e6c:	f10c 0203 	add.w	r2, ip, #3
 8006e70:	1b52      	subs	r2, r2, r5
 8006e72:	f022 0203 	bic.w	r2, r2, #3
 8006e76:	3d03      	subs	r5, #3
 8006e78:	45ac      	cmp	ip, r5
 8006e7a:	bf38      	it	cc
 8006e7c:	2200      	movcc	r2, #0
 8006e7e:	4413      	add	r3, r2
 8006e80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e84:	b17a      	cbz	r2, 8006ea6 <__mdiff+0x106>
 8006e86:	6107      	str	r7, [r0, #16]
 8006e88:	e7a4      	b.n	8006dd4 <__mdiff+0x34>
 8006e8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e8e:	fa11 f288 	uxtah	r2, r1, r8
 8006e92:	1414      	asrs	r4, r2, #16
 8006e94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e9e:	f84e 2b04 	str.w	r2, [lr], #4
 8006ea2:	1421      	asrs	r1, r4, #16
 8006ea4:	e7e0      	b.n	8006e68 <__mdiff+0xc8>
 8006ea6:	3f01      	subs	r7, #1
 8006ea8:	e7ea      	b.n	8006e80 <__mdiff+0xe0>
 8006eaa:	bf00      	nop
 8006eac:	080084d0 	.word	0x080084d0
 8006eb0:	080084e1 	.word	0x080084e1

08006eb4 <__d2b>:
 8006eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	460f      	mov	r7, r1
 8006eba:	2101      	movs	r1, #1
 8006ebc:	ec59 8b10 	vmov	r8, r9, d0
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	f7ff fcd5 	bl	8006870 <_Balloc>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	b930      	cbnz	r0, 8006ed8 <__d2b+0x24>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <__d2b+0xac>)
 8006ece:	4825      	ldr	r0, [pc, #148]	; (8006f64 <__d2b+0xb0>)
 8006ed0:	f240 310f 	movw	r1, #783	; 0x30f
 8006ed4:	f7fe fd20 	bl	8005918 <__assert_func>
 8006ed8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006edc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ee0:	bb2d      	cbnz	r5, 8006f2e <__d2b+0x7a>
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	f1b8 0300 	subs.w	r3, r8, #0
 8006ee8:	d026      	beq.n	8006f38 <__d2b+0x84>
 8006eea:	4668      	mov	r0, sp
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	f7ff fd87 	bl	8006a00 <__lo0bits>
 8006ef2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ef6:	b1e8      	cbz	r0, 8006f34 <__d2b+0x80>
 8006ef8:	f1c0 0320 	rsb	r3, r0, #32
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	430b      	orrs	r3, r1
 8006f02:	40c2      	lsrs	r2, r0
 8006f04:	6163      	str	r3, [r4, #20]
 8006f06:	9201      	str	r2, [sp, #4]
 8006f08:	9b01      	ldr	r3, [sp, #4]
 8006f0a:	61a3      	str	r3, [r4, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2202      	movne	r2, #2
 8006f12:	2201      	moveq	r2, #1
 8006f14:	6122      	str	r2, [r4, #16]
 8006f16:	b1bd      	cbz	r5, 8006f48 <__d2b+0x94>
 8006f18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f1c:	4405      	add	r5, r0
 8006f1e:	603d      	str	r5, [r7, #0]
 8006f20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	4620      	mov	r0, r4
 8006f28:	b003      	add	sp, #12
 8006f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f32:	e7d6      	b.n	8006ee2 <__d2b+0x2e>
 8006f34:	6161      	str	r1, [r4, #20]
 8006f36:	e7e7      	b.n	8006f08 <__d2b+0x54>
 8006f38:	a801      	add	r0, sp, #4
 8006f3a:	f7ff fd61 	bl	8006a00 <__lo0bits>
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	6163      	str	r3, [r4, #20]
 8006f42:	3020      	adds	r0, #32
 8006f44:	2201      	movs	r2, #1
 8006f46:	e7e5      	b.n	8006f14 <__d2b+0x60>
 8006f48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f50:	6038      	str	r0, [r7, #0]
 8006f52:	6918      	ldr	r0, [r3, #16]
 8006f54:	f7ff fd34 	bl	80069c0 <__hi0bits>
 8006f58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f5c:	e7e2      	b.n	8006f24 <__d2b+0x70>
 8006f5e:	bf00      	nop
 8006f60:	080084d0 	.word	0x080084d0
 8006f64:	080084e1 	.word	0x080084e1

08006f68 <__ascii_wctomb>:
 8006f68:	b149      	cbz	r1, 8006f7e <__ascii_wctomb+0x16>
 8006f6a:	2aff      	cmp	r2, #255	; 0xff
 8006f6c:	bf85      	ittet	hi
 8006f6e:	238a      	movhi	r3, #138	; 0x8a
 8006f70:	6003      	strhi	r3, [r0, #0]
 8006f72:	700a      	strbls	r2, [r1, #0]
 8006f74:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f78:	bf98      	it	ls
 8006f7a:	2001      	movls	r0, #1
 8006f7c:	4770      	bx	lr
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4770      	bx	lr

08006f82 <__ssputs_r>:
 8006f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f86:	688e      	ldr	r6, [r1, #8]
 8006f88:	461f      	mov	r7, r3
 8006f8a:	42be      	cmp	r6, r7
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	4682      	mov	sl, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	4690      	mov	r8, r2
 8006f94:	d82c      	bhi.n	8006ff0 <__ssputs_r+0x6e>
 8006f96:	898a      	ldrh	r2, [r1, #12]
 8006f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f9c:	d026      	beq.n	8006fec <__ssputs_r+0x6a>
 8006f9e:	6965      	ldr	r5, [r4, #20]
 8006fa0:	6909      	ldr	r1, [r1, #16]
 8006fa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa6:	eba3 0901 	sub.w	r9, r3, r1
 8006faa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fae:	1c7b      	adds	r3, r7, #1
 8006fb0:	444b      	add	r3, r9
 8006fb2:	106d      	asrs	r5, r5, #1
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	bf38      	it	cc
 8006fb8:	461d      	movcc	r5, r3
 8006fba:	0553      	lsls	r3, r2, #21
 8006fbc:	d527      	bpl.n	800700e <__ssputs_r+0x8c>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7ff fbb8 	bl	8006734 <_malloc_r>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	b360      	cbz	r0, 8007022 <__ssputs_r+0xa0>
 8006fc8:	6921      	ldr	r1, [r4, #16]
 8006fca:	464a      	mov	r2, r9
 8006fcc:	f7fe fc96 	bl	80058fc <memcpy>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	6126      	str	r6, [r4, #16]
 8006fde:	6165      	str	r5, [r4, #20]
 8006fe0:	444e      	add	r6, r9
 8006fe2:	eba5 0509 	sub.w	r5, r5, r9
 8006fe6:	6026      	str	r6, [r4, #0]
 8006fe8:	60a5      	str	r5, [r4, #8]
 8006fea:	463e      	mov	r6, r7
 8006fec:	42be      	cmp	r6, r7
 8006fee:	d900      	bls.n	8006ff2 <__ssputs_r+0x70>
 8006ff0:	463e      	mov	r6, r7
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	f000 ff15 	bl	8007e26 <memmove>
 8006ffc:	68a3      	ldr	r3, [r4, #8]
 8006ffe:	1b9b      	subs	r3, r3, r6
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4433      	add	r3, r6
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	2000      	movs	r0, #0
 800700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700e:	462a      	mov	r2, r5
 8007010:	f000 ff73 	bl	8007efa <_realloc_r>
 8007014:	4606      	mov	r6, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d1e0      	bne.n	8006fdc <__ssputs_r+0x5a>
 800701a:	6921      	ldr	r1, [r4, #16]
 800701c:	4650      	mov	r0, sl
 800701e:	f7ff fb15 	bl	800664c <_free_r>
 8007022:	230c      	movs	r3, #12
 8007024:	f8ca 3000 	str.w	r3, [sl]
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	e7e9      	b.n	800700a <__ssputs_r+0x88>
	...

08007038 <_svfiprintf_r>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4698      	mov	r8, r3
 800703e:	898b      	ldrh	r3, [r1, #12]
 8007040:	061b      	lsls	r3, r3, #24
 8007042:	b09d      	sub	sp, #116	; 0x74
 8007044:	4607      	mov	r7, r0
 8007046:	460d      	mov	r5, r1
 8007048:	4614      	mov	r4, r2
 800704a:	d50e      	bpl.n	800706a <_svfiprintf_r+0x32>
 800704c:	690b      	ldr	r3, [r1, #16]
 800704e:	b963      	cbnz	r3, 800706a <_svfiprintf_r+0x32>
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	f7ff fb6f 	bl	8006734 <_malloc_r>
 8007056:	6028      	str	r0, [r5, #0]
 8007058:	6128      	str	r0, [r5, #16]
 800705a:	b920      	cbnz	r0, 8007066 <_svfiprintf_r+0x2e>
 800705c:	230c      	movs	r3, #12
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	e0d0      	b.n	8007208 <_svfiprintf_r+0x1d0>
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	616b      	str	r3, [r5, #20]
 800706a:	2300      	movs	r3, #0
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	2320      	movs	r3, #32
 8007070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007074:	f8cd 800c 	str.w	r8, [sp, #12]
 8007078:	2330      	movs	r3, #48	; 0x30
 800707a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007220 <_svfiprintf_r+0x1e8>
 800707e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007082:	f04f 0901 	mov.w	r9, #1
 8007086:	4623      	mov	r3, r4
 8007088:	469a      	mov	sl, r3
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	b10a      	cbz	r2, 8007094 <_svfiprintf_r+0x5c>
 8007090:	2a25      	cmp	r2, #37	; 0x25
 8007092:	d1f9      	bne.n	8007088 <_svfiprintf_r+0x50>
 8007094:	ebba 0b04 	subs.w	fp, sl, r4
 8007098:	d00b      	beq.n	80070b2 <_svfiprintf_r+0x7a>
 800709a:	465b      	mov	r3, fp
 800709c:	4622      	mov	r2, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ff6e 	bl	8006f82 <__ssputs_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	f000 80a9 	beq.w	80071fe <_svfiprintf_r+0x1c6>
 80070ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ae:	445a      	add	r2, fp
 80070b0:	9209      	str	r2, [sp, #36]	; 0x24
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a1 	beq.w	80071fe <_svfiprintf_r+0x1c6>
 80070bc:	2300      	movs	r3, #0
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c6:	f10a 0a01 	add.w	sl, sl, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d2:	931a      	str	r3, [sp, #104]	; 0x68
 80070d4:	4654      	mov	r4, sl
 80070d6:	2205      	movs	r2, #5
 80070d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070dc:	4850      	ldr	r0, [pc, #320]	; (8007220 <_svfiprintf_r+0x1e8>)
 80070de:	f7f9 f877 	bl	80001d0 <memchr>
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	b9d8      	cbnz	r0, 800711e <_svfiprintf_r+0xe6>
 80070e6:	06d0      	lsls	r0, r2, #27
 80070e8:	bf44      	itt	mi
 80070ea:	2320      	movmi	r3, #32
 80070ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f0:	0711      	lsls	r1, r2, #28
 80070f2:	bf44      	itt	mi
 80070f4:	232b      	movmi	r3, #43	; 0x2b
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fa:	f89a 3000 	ldrb.w	r3, [sl]
 80070fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007100:	d015      	beq.n	800712e <_svfiprintf_r+0xf6>
 8007102:	9a07      	ldr	r2, [sp, #28]
 8007104:	4654      	mov	r4, sl
 8007106:	2000      	movs	r0, #0
 8007108:	f04f 0c0a 	mov.w	ip, #10
 800710c:	4621      	mov	r1, r4
 800710e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007112:	3b30      	subs	r3, #48	; 0x30
 8007114:	2b09      	cmp	r3, #9
 8007116:	d94d      	bls.n	80071b4 <_svfiprintf_r+0x17c>
 8007118:	b1b0      	cbz	r0, 8007148 <_svfiprintf_r+0x110>
 800711a:	9207      	str	r2, [sp, #28]
 800711c:	e014      	b.n	8007148 <_svfiprintf_r+0x110>
 800711e:	eba0 0308 	sub.w	r3, r0, r8
 8007122:	fa09 f303 	lsl.w	r3, r9, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	46a2      	mov	sl, r4
 800712c:	e7d2      	b.n	80070d4 <_svfiprintf_r+0x9c>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d19      	adds	r1, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9103      	str	r1, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfbb      	ittet	lt
 800713a:	425b      	neglt	r3, r3
 800713c:	f042 0202 	orrlt.w	r2, r2, #2
 8007140:	9307      	strge	r3, [sp, #28]
 8007142:	9307      	strlt	r3, [sp, #28]
 8007144:	bfb8      	it	lt
 8007146:	9204      	strlt	r2, [sp, #16]
 8007148:	7823      	ldrb	r3, [r4, #0]
 800714a:	2b2e      	cmp	r3, #46	; 0x2e
 800714c:	d10c      	bne.n	8007168 <_svfiprintf_r+0x130>
 800714e:	7863      	ldrb	r3, [r4, #1]
 8007150:	2b2a      	cmp	r3, #42	; 0x2a
 8007152:	d134      	bne.n	80071be <_svfiprintf_r+0x186>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	9203      	str	r2, [sp, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfb8      	it	lt
 8007160:	f04f 33ff 	movlt.w	r3, #4294967295
 8007164:	3402      	adds	r4, #2
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007230 <_svfiprintf_r+0x1f8>
 800716c:	7821      	ldrb	r1, [r4, #0]
 800716e:	2203      	movs	r2, #3
 8007170:	4650      	mov	r0, sl
 8007172:	f7f9 f82d 	bl	80001d0 <memchr>
 8007176:	b138      	cbz	r0, 8007188 <_svfiprintf_r+0x150>
 8007178:	9b04      	ldr	r3, [sp, #16]
 800717a:	eba0 000a 	sub.w	r0, r0, sl
 800717e:	2240      	movs	r2, #64	; 0x40
 8007180:	4082      	lsls	r2, r0
 8007182:	4313      	orrs	r3, r2
 8007184:	3401      	adds	r4, #1
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	4825      	ldr	r0, [pc, #148]	; (8007224 <_svfiprintf_r+0x1ec>)
 800718e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007192:	2206      	movs	r2, #6
 8007194:	f7f9 f81c 	bl	80001d0 <memchr>
 8007198:	2800      	cmp	r0, #0
 800719a:	d038      	beq.n	800720e <_svfiprintf_r+0x1d6>
 800719c:	4b22      	ldr	r3, [pc, #136]	; (8007228 <_svfiprintf_r+0x1f0>)
 800719e:	bb1b      	cbnz	r3, 80071e8 <_svfiprintf_r+0x1b0>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	3307      	adds	r3, #7
 80071a4:	f023 0307 	bic.w	r3, r3, #7
 80071a8:	3308      	adds	r3, #8
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ae:	4433      	add	r3, r6
 80071b0:	9309      	str	r3, [sp, #36]	; 0x24
 80071b2:	e768      	b.n	8007086 <_svfiprintf_r+0x4e>
 80071b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b8:	460c      	mov	r4, r1
 80071ba:	2001      	movs	r0, #1
 80071bc:	e7a6      	b.n	800710c <_svfiprintf_r+0xd4>
 80071be:	2300      	movs	r3, #0
 80071c0:	3401      	adds	r4, #1
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	4619      	mov	r1, r3
 80071c6:	f04f 0c0a 	mov.w	ip, #10
 80071ca:	4620      	mov	r0, r4
 80071cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d0:	3a30      	subs	r2, #48	; 0x30
 80071d2:	2a09      	cmp	r2, #9
 80071d4:	d903      	bls.n	80071de <_svfiprintf_r+0x1a6>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0c6      	beq.n	8007168 <_svfiprintf_r+0x130>
 80071da:	9105      	str	r1, [sp, #20]
 80071dc:	e7c4      	b.n	8007168 <_svfiprintf_r+0x130>
 80071de:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e2:	4604      	mov	r4, r0
 80071e4:	2301      	movs	r3, #1
 80071e6:	e7f0      	b.n	80071ca <_svfiprintf_r+0x192>
 80071e8:	ab03      	add	r3, sp, #12
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	462a      	mov	r2, r5
 80071ee:	4b0f      	ldr	r3, [pc, #60]	; (800722c <_svfiprintf_r+0x1f4>)
 80071f0:	a904      	add	r1, sp, #16
 80071f2:	4638      	mov	r0, r7
 80071f4:	f7fd fce4 	bl	8004bc0 <_printf_float>
 80071f8:	1c42      	adds	r2, r0, #1
 80071fa:	4606      	mov	r6, r0
 80071fc:	d1d6      	bne.n	80071ac <_svfiprintf_r+0x174>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	065b      	lsls	r3, r3, #25
 8007202:	f53f af2d 	bmi.w	8007060 <_svfiprintf_r+0x28>
 8007206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007208:	b01d      	add	sp, #116	; 0x74
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	ab03      	add	r3, sp, #12
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	462a      	mov	r2, r5
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <_svfiprintf_r+0x1f4>)
 8007216:	a904      	add	r1, sp, #16
 8007218:	4638      	mov	r0, r7
 800721a:	f7fd ff75 	bl	8005108 <_printf_i>
 800721e:	e7eb      	b.n	80071f8 <_svfiprintf_r+0x1c0>
 8007220:	0800873d 	.word	0x0800873d
 8007224:	08008747 	.word	0x08008747
 8007228:	08004bc1 	.word	0x08004bc1
 800722c:	08006f83 	.word	0x08006f83
 8007230:	08008743 	.word	0x08008743

08007234 <_sungetc_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	1c4b      	adds	r3, r1, #1
 8007238:	4614      	mov	r4, r2
 800723a:	d103      	bne.n	8007244 <_sungetc_r+0x10>
 800723c:	f04f 35ff 	mov.w	r5, #4294967295
 8007240:	4628      	mov	r0, r5
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	8993      	ldrh	r3, [r2, #12]
 8007246:	f023 0320 	bic.w	r3, r3, #32
 800724a:	8193      	strh	r3, [r2, #12]
 800724c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	b2cd      	uxtb	r5, r1
 8007252:	b18b      	cbz	r3, 8007278 <_sungetc_r+0x44>
 8007254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007256:	4293      	cmp	r3, r2
 8007258:	dd08      	ble.n	800726c <_sungetc_r+0x38>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	6022      	str	r2, [r4, #0]
 8007260:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	3301      	adds	r3, #1
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	e7e9      	b.n	8007240 <_sungetc_r+0xc>
 800726c:	4621      	mov	r1, r4
 800726e:	f000 fda0 	bl	8007db2 <__submore>
 8007272:	2800      	cmp	r0, #0
 8007274:	d0f1      	beq.n	800725a <_sungetc_r+0x26>
 8007276:	e7e1      	b.n	800723c <_sungetc_r+0x8>
 8007278:	6921      	ldr	r1, [r4, #16]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	b151      	cbz	r1, 8007294 <_sungetc_r+0x60>
 800727e:	4299      	cmp	r1, r3
 8007280:	d208      	bcs.n	8007294 <_sungetc_r+0x60>
 8007282:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007286:	42a9      	cmp	r1, r5
 8007288:	d104      	bne.n	8007294 <_sungetc_r+0x60>
 800728a:	3b01      	subs	r3, #1
 800728c:	3201      	adds	r2, #1
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	6062      	str	r2, [r4, #4]
 8007292:	e7d5      	b.n	8007240 <_sungetc_r+0xc>
 8007294:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800729c:	6363      	str	r3, [r4, #52]	; 0x34
 800729e:	2303      	movs	r3, #3
 80072a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80072a2:	4623      	mov	r3, r4
 80072a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	2301      	movs	r3, #1
 80072ac:	e7dc      	b.n	8007268 <_sungetc_r+0x34>

080072ae <__ssrefill_r>:
 80072ae:	b510      	push	{r4, lr}
 80072b0:	460c      	mov	r4, r1
 80072b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80072b4:	b169      	cbz	r1, 80072d2 <__ssrefill_r+0x24>
 80072b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072ba:	4299      	cmp	r1, r3
 80072bc:	d001      	beq.n	80072c2 <__ssrefill_r+0x14>
 80072be:	f7ff f9c5 	bl	800664c <_free_r>
 80072c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072c4:	6063      	str	r3, [r4, #4]
 80072c6:	2000      	movs	r0, #0
 80072c8:	6360      	str	r0, [r4, #52]	; 0x34
 80072ca:	b113      	cbz	r3, 80072d2 <__ssrefill_r+0x24>
 80072cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	f043 0320 	orr.w	r3, r3, #32
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	e7f3      	b.n	80072d0 <__ssrefill_r+0x22>

080072e8 <__ssvfiscanf_r>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	460c      	mov	r4, r1
 80072ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80072f2:	2100      	movs	r1, #0
 80072f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80072f8:	49a6      	ldr	r1, [pc, #664]	; (8007594 <__ssvfiscanf_r+0x2ac>)
 80072fa:	91a0      	str	r1, [sp, #640]	; 0x280
 80072fc:	f10d 0804 	add.w	r8, sp, #4
 8007300:	49a5      	ldr	r1, [pc, #660]	; (8007598 <__ssvfiscanf_r+0x2b0>)
 8007302:	4fa6      	ldr	r7, [pc, #664]	; (800759c <__ssvfiscanf_r+0x2b4>)
 8007304:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80075a0 <__ssvfiscanf_r+0x2b8>
 8007308:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800730c:	4606      	mov	r6, r0
 800730e:	91a1      	str	r1, [sp, #644]	; 0x284
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	7813      	ldrb	r3, [r2, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 815a 	beq.w	80075ce <__ssvfiscanf_r+0x2e6>
 800731a:	5cf9      	ldrb	r1, [r7, r3]
 800731c:	f011 0108 	ands.w	r1, r1, #8
 8007320:	f102 0501 	add.w	r5, r2, #1
 8007324:	d019      	beq.n	800735a <__ssvfiscanf_r+0x72>
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	dd0f      	ble.n	800734c <__ssvfiscanf_r+0x64>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	781a      	ldrb	r2, [r3, #0]
 8007330:	5cba      	ldrb	r2, [r7, r2]
 8007332:	0712      	lsls	r2, r2, #28
 8007334:	d401      	bmi.n	800733a <__ssvfiscanf_r+0x52>
 8007336:	462a      	mov	r2, r5
 8007338:	e7eb      	b.n	8007312 <__ssvfiscanf_r+0x2a>
 800733a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800733c:	3201      	adds	r2, #1
 800733e:	9245      	str	r2, [sp, #276]	; 0x114
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	3301      	adds	r3, #1
 8007344:	3a01      	subs	r2, #1
 8007346:	6062      	str	r2, [r4, #4]
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	e7ec      	b.n	8007326 <__ssvfiscanf_r+0x3e>
 800734c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800734e:	4621      	mov	r1, r4
 8007350:	4630      	mov	r0, r6
 8007352:	4798      	blx	r3
 8007354:	2800      	cmp	r0, #0
 8007356:	d0e9      	beq.n	800732c <__ssvfiscanf_r+0x44>
 8007358:	e7ed      	b.n	8007336 <__ssvfiscanf_r+0x4e>
 800735a:	2b25      	cmp	r3, #37	; 0x25
 800735c:	d012      	beq.n	8007384 <__ssvfiscanf_r+0x9c>
 800735e:	469a      	mov	sl, r3
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f340 8091 	ble.w	800748a <__ssvfiscanf_r+0x1a2>
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	7813      	ldrb	r3, [r2, #0]
 800736c:	4553      	cmp	r3, sl
 800736e:	f040 812e 	bne.w	80075ce <__ssvfiscanf_r+0x2e6>
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	3b01      	subs	r3, #1
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800737a:	3201      	adds	r2, #1
 800737c:	3301      	adds	r3, #1
 800737e:	6022      	str	r2, [r4, #0]
 8007380:	9345      	str	r3, [sp, #276]	; 0x114
 8007382:	e7d8      	b.n	8007336 <__ssvfiscanf_r+0x4e>
 8007384:	9141      	str	r1, [sp, #260]	; 0x104
 8007386:	9143      	str	r1, [sp, #268]	; 0x10c
 8007388:	7853      	ldrb	r3, [r2, #1]
 800738a:	2b2a      	cmp	r3, #42	; 0x2a
 800738c:	bf02      	ittt	eq
 800738e:	2310      	moveq	r3, #16
 8007390:	1c95      	addeq	r5, r2, #2
 8007392:	9341      	streq	r3, [sp, #260]	; 0x104
 8007394:	220a      	movs	r2, #10
 8007396:	46aa      	mov	sl, r5
 8007398:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800739c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80073a0:	2b09      	cmp	r3, #9
 80073a2:	d91c      	bls.n	80073de <__ssvfiscanf_r+0xf6>
 80073a4:	487e      	ldr	r0, [pc, #504]	; (80075a0 <__ssvfiscanf_r+0x2b8>)
 80073a6:	2203      	movs	r2, #3
 80073a8:	f7f8 ff12 	bl	80001d0 <memchr>
 80073ac:	b138      	cbz	r0, 80073be <__ssvfiscanf_r+0xd6>
 80073ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80073b0:	eba0 0009 	sub.w	r0, r0, r9
 80073b4:	2301      	movs	r3, #1
 80073b6:	4083      	lsls	r3, r0
 80073b8:	4313      	orrs	r3, r2
 80073ba:	9341      	str	r3, [sp, #260]	; 0x104
 80073bc:	4655      	mov	r5, sl
 80073be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073c2:	2b78      	cmp	r3, #120	; 0x78
 80073c4:	d806      	bhi.n	80073d4 <__ssvfiscanf_r+0xec>
 80073c6:	2b57      	cmp	r3, #87	; 0x57
 80073c8:	d810      	bhi.n	80073ec <__ssvfiscanf_r+0x104>
 80073ca:	2b25      	cmp	r3, #37	; 0x25
 80073cc:	d0c7      	beq.n	800735e <__ssvfiscanf_r+0x76>
 80073ce:	d857      	bhi.n	8007480 <__ssvfiscanf_r+0x198>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d065      	beq.n	80074a0 <__ssvfiscanf_r+0x1b8>
 80073d4:	2303      	movs	r3, #3
 80073d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80073d8:	230a      	movs	r3, #10
 80073da:	9342      	str	r3, [sp, #264]	; 0x108
 80073dc:	e076      	b.n	80074cc <__ssvfiscanf_r+0x1e4>
 80073de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80073e0:	fb02 1103 	mla	r1, r2, r3, r1
 80073e4:	3930      	subs	r1, #48	; 0x30
 80073e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80073e8:	4655      	mov	r5, sl
 80073ea:	e7d4      	b.n	8007396 <__ssvfiscanf_r+0xae>
 80073ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80073f0:	2a20      	cmp	r2, #32
 80073f2:	d8ef      	bhi.n	80073d4 <__ssvfiscanf_r+0xec>
 80073f4:	a101      	add	r1, pc, #4	; (adr r1, 80073fc <__ssvfiscanf_r+0x114>)
 80073f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	080074af 	.word	0x080074af
 8007400:	080073d5 	.word	0x080073d5
 8007404:	080073d5 	.word	0x080073d5
 8007408:	0800750d 	.word	0x0800750d
 800740c:	080073d5 	.word	0x080073d5
 8007410:	080073d5 	.word	0x080073d5
 8007414:	080073d5 	.word	0x080073d5
 8007418:	080073d5 	.word	0x080073d5
 800741c:	080073d5 	.word	0x080073d5
 8007420:	080073d5 	.word	0x080073d5
 8007424:	080073d5 	.word	0x080073d5
 8007428:	08007523 	.word	0x08007523
 800742c:	08007509 	.word	0x08007509
 8007430:	08007487 	.word	0x08007487
 8007434:	08007487 	.word	0x08007487
 8007438:	08007487 	.word	0x08007487
 800743c:	080073d5 	.word	0x080073d5
 8007440:	080074c5 	.word	0x080074c5
 8007444:	080073d5 	.word	0x080073d5
 8007448:	080073d5 	.word	0x080073d5
 800744c:	080073d5 	.word	0x080073d5
 8007450:	080073d5 	.word	0x080073d5
 8007454:	08007533 	.word	0x08007533
 8007458:	08007501 	.word	0x08007501
 800745c:	080074a7 	.word	0x080074a7
 8007460:	080073d5 	.word	0x080073d5
 8007464:	080073d5 	.word	0x080073d5
 8007468:	0800752f 	.word	0x0800752f
 800746c:	080073d5 	.word	0x080073d5
 8007470:	08007509 	.word	0x08007509
 8007474:	080073d5 	.word	0x080073d5
 8007478:	080073d5 	.word	0x080073d5
 800747c:	080074af 	.word	0x080074af
 8007480:	3b45      	subs	r3, #69	; 0x45
 8007482:	2b02      	cmp	r3, #2
 8007484:	d8a6      	bhi.n	80073d4 <__ssvfiscanf_r+0xec>
 8007486:	2305      	movs	r3, #5
 8007488:	e01f      	b.n	80074ca <__ssvfiscanf_r+0x1e2>
 800748a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800748c:	4621      	mov	r1, r4
 800748e:	4630      	mov	r0, r6
 8007490:	4798      	blx	r3
 8007492:	2800      	cmp	r0, #0
 8007494:	f43f af68 	beq.w	8007368 <__ssvfiscanf_r+0x80>
 8007498:	9844      	ldr	r0, [sp, #272]	; 0x110
 800749a:	2800      	cmp	r0, #0
 800749c:	f040 808d 	bne.w	80075ba <__ssvfiscanf_r+0x2d2>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e08f      	b.n	80075c6 <__ssvfiscanf_r+0x2de>
 80074a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074a8:	f042 0220 	orr.w	r2, r2, #32
 80074ac:	9241      	str	r2, [sp, #260]	; 0x104
 80074ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b4:	9241      	str	r2, [sp, #260]	; 0x104
 80074b6:	2210      	movs	r2, #16
 80074b8:	2b6f      	cmp	r3, #111	; 0x6f
 80074ba:	9242      	str	r2, [sp, #264]	; 0x108
 80074bc:	bf34      	ite	cc
 80074be:	2303      	movcc	r3, #3
 80074c0:	2304      	movcs	r3, #4
 80074c2:	e002      	b.n	80074ca <__ssvfiscanf_r+0x1e2>
 80074c4:	2300      	movs	r3, #0
 80074c6:	9342      	str	r3, [sp, #264]	; 0x108
 80074c8:	2303      	movs	r3, #3
 80074ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dd3d      	ble.n	800754e <__ssvfiscanf_r+0x266>
 80074d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074d4:	0659      	lsls	r1, r3, #25
 80074d6:	d404      	bmi.n	80074e2 <__ssvfiscanf_r+0x1fa>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	5cba      	ldrb	r2, [r7, r2]
 80074de:	0712      	lsls	r2, r2, #28
 80074e0:	d43c      	bmi.n	800755c <__ssvfiscanf_r+0x274>
 80074e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	dc4b      	bgt.n	8007580 <__ssvfiscanf_r+0x298>
 80074e8:	466b      	mov	r3, sp
 80074ea:	4622      	mov	r2, r4
 80074ec:	a941      	add	r1, sp, #260	; 0x104
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 f9b6 	bl	8007860 <_scanf_chars>
 80074f4:	2801      	cmp	r0, #1
 80074f6:	d06a      	beq.n	80075ce <__ssvfiscanf_r+0x2e6>
 80074f8:	2802      	cmp	r0, #2
 80074fa:	f47f af1c 	bne.w	8007336 <__ssvfiscanf_r+0x4e>
 80074fe:	e7cb      	b.n	8007498 <__ssvfiscanf_r+0x1b0>
 8007500:	2308      	movs	r3, #8
 8007502:	9342      	str	r3, [sp, #264]	; 0x108
 8007504:	2304      	movs	r3, #4
 8007506:	e7e0      	b.n	80074ca <__ssvfiscanf_r+0x1e2>
 8007508:	220a      	movs	r2, #10
 800750a:	e7d5      	b.n	80074b8 <__ssvfiscanf_r+0x1d0>
 800750c:	4629      	mov	r1, r5
 800750e:	4640      	mov	r0, r8
 8007510:	f000 fc16 	bl	8007d40 <__sccl>
 8007514:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751a:	9341      	str	r3, [sp, #260]	; 0x104
 800751c:	4605      	mov	r5, r0
 800751e:	2301      	movs	r3, #1
 8007520:	e7d3      	b.n	80074ca <__ssvfiscanf_r+0x1e2>
 8007522:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007528:	9341      	str	r3, [sp, #260]	; 0x104
 800752a:	2300      	movs	r3, #0
 800752c:	e7cd      	b.n	80074ca <__ssvfiscanf_r+0x1e2>
 800752e:	2302      	movs	r3, #2
 8007530:	e7cb      	b.n	80074ca <__ssvfiscanf_r+0x1e2>
 8007532:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007534:	06c3      	lsls	r3, r0, #27
 8007536:	f53f aefe 	bmi.w	8007336 <__ssvfiscanf_r+0x4e>
 800753a:	9b00      	ldr	r3, [sp, #0]
 800753c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800753e:	1d19      	adds	r1, r3, #4
 8007540:	9100      	str	r1, [sp, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	07c0      	lsls	r0, r0, #31
 8007546:	bf4c      	ite	mi
 8007548:	801a      	strhmi	r2, [r3, #0]
 800754a:	601a      	strpl	r2, [r3, #0]
 800754c:	e6f3      	b.n	8007336 <__ssvfiscanf_r+0x4e>
 800754e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007550:	4621      	mov	r1, r4
 8007552:	4630      	mov	r0, r6
 8007554:	4798      	blx	r3
 8007556:	2800      	cmp	r0, #0
 8007558:	d0bb      	beq.n	80074d2 <__ssvfiscanf_r+0x1ea>
 800755a:	e79d      	b.n	8007498 <__ssvfiscanf_r+0x1b0>
 800755c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800755e:	3201      	adds	r2, #1
 8007560:	9245      	str	r2, [sp, #276]	; 0x114
 8007562:	6862      	ldr	r2, [r4, #4]
 8007564:	3a01      	subs	r2, #1
 8007566:	2a00      	cmp	r2, #0
 8007568:	6062      	str	r2, [r4, #4]
 800756a:	dd02      	ble.n	8007572 <__ssvfiscanf_r+0x28a>
 800756c:	3301      	adds	r3, #1
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	e7b2      	b.n	80074d8 <__ssvfiscanf_r+0x1f0>
 8007572:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007574:	4621      	mov	r1, r4
 8007576:	4630      	mov	r0, r6
 8007578:	4798      	blx	r3
 800757a:	2800      	cmp	r0, #0
 800757c:	d0ac      	beq.n	80074d8 <__ssvfiscanf_r+0x1f0>
 800757e:	e78b      	b.n	8007498 <__ssvfiscanf_r+0x1b0>
 8007580:	2b04      	cmp	r3, #4
 8007582:	dc0f      	bgt.n	80075a4 <__ssvfiscanf_r+0x2bc>
 8007584:	466b      	mov	r3, sp
 8007586:	4622      	mov	r2, r4
 8007588:	a941      	add	r1, sp, #260	; 0x104
 800758a:	4630      	mov	r0, r6
 800758c:	f000 f9c2 	bl	8007914 <_scanf_i>
 8007590:	e7b0      	b.n	80074f4 <__ssvfiscanf_r+0x20c>
 8007592:	bf00      	nop
 8007594:	08007235 	.word	0x08007235
 8007598:	080072af 	.word	0x080072af
 800759c:	0800863d 	.word	0x0800863d
 80075a0:	08008743 	.word	0x08008743
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <__ssvfiscanf_r+0x2ec>)
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f43f aec5 	beq.w	8007336 <__ssvfiscanf_r+0x4e>
 80075ac:	466b      	mov	r3, sp
 80075ae:	4622      	mov	r2, r4
 80075b0:	a941      	add	r1, sp, #260	; 0x104
 80075b2:	4630      	mov	r0, r6
 80075b4:	f3af 8000 	nop.w
 80075b8:	e79c      	b.n	80074f4 <__ssvfiscanf_r+0x20c>
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075c0:	bf18      	it	ne
 80075c2:	f04f 30ff 	movne.w	r0, #4294967295
 80075c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80075ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80075d0:	e7f9      	b.n	80075c6 <__ssvfiscanf_r+0x2de>
 80075d2:	bf00      	nop
 80075d4:	00000000 	.word	0x00000000

080075d8 <__sfputc_r>:
 80075d8:	6893      	ldr	r3, [r2, #8]
 80075da:	3b01      	subs	r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	b410      	push	{r4}
 80075e0:	6093      	str	r3, [r2, #8]
 80075e2:	da08      	bge.n	80075f6 <__sfputc_r+0x1e>
 80075e4:	6994      	ldr	r4, [r2, #24]
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	db01      	blt.n	80075ee <__sfputc_r+0x16>
 80075ea:	290a      	cmp	r1, #10
 80075ec:	d103      	bne.n	80075f6 <__sfputc_r+0x1e>
 80075ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f2:	f7fe b85a 	b.w	80056aa <__swbuf_r>
 80075f6:	6813      	ldr	r3, [r2, #0]
 80075f8:	1c58      	adds	r0, r3, #1
 80075fa:	6010      	str	r0, [r2, #0]
 80075fc:	7019      	strb	r1, [r3, #0]
 80075fe:	4608      	mov	r0, r1
 8007600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007604:	4770      	bx	lr

08007606 <__sfputs_r>:
 8007606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007608:	4606      	mov	r6, r0
 800760a:	460f      	mov	r7, r1
 800760c:	4614      	mov	r4, r2
 800760e:	18d5      	adds	r5, r2, r3
 8007610:	42ac      	cmp	r4, r5
 8007612:	d101      	bne.n	8007618 <__sfputs_r+0x12>
 8007614:	2000      	movs	r0, #0
 8007616:	e007      	b.n	8007628 <__sfputs_r+0x22>
 8007618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761c:	463a      	mov	r2, r7
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ffda 	bl	80075d8 <__sfputc_r>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d1f3      	bne.n	8007610 <__sfputs_r+0xa>
 8007628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800762c <_vfiprintf_r>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	460d      	mov	r5, r1
 8007632:	b09d      	sub	sp, #116	; 0x74
 8007634:	4614      	mov	r4, r2
 8007636:	4698      	mov	r8, r3
 8007638:	4606      	mov	r6, r0
 800763a:	b118      	cbz	r0, 8007644 <_vfiprintf_r+0x18>
 800763c:	6a03      	ldr	r3, [r0, #32]
 800763e:	b90b      	cbnz	r3, 8007644 <_vfiprintf_r+0x18>
 8007640:	f7fd fefe 	bl	8005440 <__sinit>
 8007644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007646:	07d9      	lsls	r1, r3, #31
 8007648:	d405      	bmi.n	8007656 <_vfiprintf_r+0x2a>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	059a      	lsls	r2, r3, #22
 800764e:	d402      	bmi.n	8007656 <_vfiprintf_r+0x2a>
 8007650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007652:	f7fe f951 	bl	80058f8 <__retarget_lock_acquire_recursive>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	d501      	bpl.n	8007660 <_vfiprintf_r+0x34>
 800765c:	692b      	ldr	r3, [r5, #16]
 800765e:	b99b      	cbnz	r3, 8007688 <_vfiprintf_r+0x5c>
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7fe f85e 	bl	8005724 <__swsetup_r>
 8007668:	b170      	cbz	r0, 8007688 <_vfiprintf_r+0x5c>
 800766a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800766c:	07dc      	lsls	r4, r3, #31
 800766e:	d504      	bpl.n	800767a <_vfiprintf_r+0x4e>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	b01d      	add	sp, #116	; 0x74
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	89ab      	ldrh	r3, [r5, #12]
 800767c:	0598      	lsls	r0, r3, #22
 800767e:	d4f7      	bmi.n	8007670 <_vfiprintf_r+0x44>
 8007680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007682:	f7fe f93a 	bl	80058fa <__retarget_lock_release_recursive>
 8007686:	e7f3      	b.n	8007670 <_vfiprintf_r+0x44>
 8007688:	2300      	movs	r3, #0
 800768a:	9309      	str	r3, [sp, #36]	; 0x24
 800768c:	2320      	movs	r3, #32
 800768e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007692:	f8cd 800c 	str.w	r8, [sp, #12]
 8007696:	2330      	movs	r3, #48	; 0x30
 8007698:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800784c <_vfiprintf_r+0x220>
 800769c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076a0:	f04f 0901 	mov.w	r9, #1
 80076a4:	4623      	mov	r3, r4
 80076a6:	469a      	mov	sl, r3
 80076a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ac:	b10a      	cbz	r2, 80076b2 <_vfiprintf_r+0x86>
 80076ae:	2a25      	cmp	r2, #37	; 0x25
 80076b0:	d1f9      	bne.n	80076a6 <_vfiprintf_r+0x7a>
 80076b2:	ebba 0b04 	subs.w	fp, sl, r4
 80076b6:	d00b      	beq.n	80076d0 <_vfiprintf_r+0xa4>
 80076b8:	465b      	mov	r3, fp
 80076ba:	4622      	mov	r2, r4
 80076bc:	4629      	mov	r1, r5
 80076be:	4630      	mov	r0, r6
 80076c0:	f7ff ffa1 	bl	8007606 <__sfputs_r>
 80076c4:	3001      	adds	r0, #1
 80076c6:	f000 80a9 	beq.w	800781c <_vfiprintf_r+0x1f0>
 80076ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076cc:	445a      	add	r2, fp
 80076ce:	9209      	str	r2, [sp, #36]	; 0x24
 80076d0:	f89a 3000 	ldrb.w	r3, [sl]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80a1 	beq.w	800781c <_vfiprintf_r+0x1f0>
 80076da:	2300      	movs	r3, #0
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076e4:	f10a 0a01 	add.w	sl, sl, #1
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	9307      	str	r3, [sp, #28]
 80076ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076f0:	931a      	str	r3, [sp, #104]	; 0x68
 80076f2:	4654      	mov	r4, sl
 80076f4:	2205      	movs	r2, #5
 80076f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fa:	4854      	ldr	r0, [pc, #336]	; (800784c <_vfiprintf_r+0x220>)
 80076fc:	f7f8 fd68 	bl	80001d0 <memchr>
 8007700:	9a04      	ldr	r2, [sp, #16]
 8007702:	b9d8      	cbnz	r0, 800773c <_vfiprintf_r+0x110>
 8007704:	06d1      	lsls	r1, r2, #27
 8007706:	bf44      	itt	mi
 8007708:	2320      	movmi	r3, #32
 800770a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800770e:	0713      	lsls	r3, r2, #28
 8007710:	bf44      	itt	mi
 8007712:	232b      	movmi	r3, #43	; 0x2b
 8007714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007718:	f89a 3000 	ldrb.w	r3, [sl]
 800771c:	2b2a      	cmp	r3, #42	; 0x2a
 800771e:	d015      	beq.n	800774c <_vfiprintf_r+0x120>
 8007720:	9a07      	ldr	r2, [sp, #28]
 8007722:	4654      	mov	r4, sl
 8007724:	2000      	movs	r0, #0
 8007726:	f04f 0c0a 	mov.w	ip, #10
 800772a:	4621      	mov	r1, r4
 800772c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007730:	3b30      	subs	r3, #48	; 0x30
 8007732:	2b09      	cmp	r3, #9
 8007734:	d94d      	bls.n	80077d2 <_vfiprintf_r+0x1a6>
 8007736:	b1b0      	cbz	r0, 8007766 <_vfiprintf_r+0x13a>
 8007738:	9207      	str	r2, [sp, #28]
 800773a:	e014      	b.n	8007766 <_vfiprintf_r+0x13a>
 800773c:	eba0 0308 	sub.w	r3, r0, r8
 8007740:	fa09 f303 	lsl.w	r3, r9, r3
 8007744:	4313      	orrs	r3, r2
 8007746:	9304      	str	r3, [sp, #16]
 8007748:	46a2      	mov	sl, r4
 800774a:	e7d2      	b.n	80076f2 <_vfiprintf_r+0xc6>
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	1d19      	adds	r1, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	9103      	str	r1, [sp, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bfbb      	ittet	lt
 8007758:	425b      	neglt	r3, r3
 800775a:	f042 0202 	orrlt.w	r2, r2, #2
 800775e:	9307      	strge	r3, [sp, #28]
 8007760:	9307      	strlt	r3, [sp, #28]
 8007762:	bfb8      	it	lt
 8007764:	9204      	strlt	r2, [sp, #16]
 8007766:	7823      	ldrb	r3, [r4, #0]
 8007768:	2b2e      	cmp	r3, #46	; 0x2e
 800776a:	d10c      	bne.n	8007786 <_vfiprintf_r+0x15a>
 800776c:	7863      	ldrb	r3, [r4, #1]
 800776e:	2b2a      	cmp	r3, #42	; 0x2a
 8007770:	d134      	bne.n	80077dc <_vfiprintf_r+0x1b0>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	1d1a      	adds	r2, r3, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	9203      	str	r2, [sp, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	bfb8      	it	lt
 800777e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007782:	3402      	adds	r4, #2
 8007784:	9305      	str	r3, [sp, #20]
 8007786:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800785c <_vfiprintf_r+0x230>
 800778a:	7821      	ldrb	r1, [r4, #0]
 800778c:	2203      	movs	r2, #3
 800778e:	4650      	mov	r0, sl
 8007790:	f7f8 fd1e 	bl	80001d0 <memchr>
 8007794:	b138      	cbz	r0, 80077a6 <_vfiprintf_r+0x17a>
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	eba0 000a 	sub.w	r0, r0, sl
 800779c:	2240      	movs	r2, #64	; 0x40
 800779e:	4082      	lsls	r2, r0
 80077a0:	4313      	orrs	r3, r2
 80077a2:	3401      	adds	r4, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077aa:	4829      	ldr	r0, [pc, #164]	; (8007850 <_vfiprintf_r+0x224>)
 80077ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077b0:	2206      	movs	r2, #6
 80077b2:	f7f8 fd0d 	bl	80001d0 <memchr>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d03f      	beq.n	800783a <_vfiprintf_r+0x20e>
 80077ba:	4b26      	ldr	r3, [pc, #152]	; (8007854 <_vfiprintf_r+0x228>)
 80077bc:	bb1b      	cbnz	r3, 8007806 <_vfiprintf_r+0x1da>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	3307      	adds	r3, #7
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	3308      	adds	r3, #8
 80077c8:	9303      	str	r3, [sp, #12]
 80077ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077cc:	443b      	add	r3, r7
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	e768      	b.n	80076a4 <_vfiprintf_r+0x78>
 80077d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d6:	460c      	mov	r4, r1
 80077d8:	2001      	movs	r0, #1
 80077da:	e7a6      	b.n	800772a <_vfiprintf_r+0xfe>
 80077dc:	2300      	movs	r3, #0
 80077de:	3401      	adds	r4, #1
 80077e0:	9305      	str	r3, [sp, #20]
 80077e2:	4619      	mov	r1, r3
 80077e4:	f04f 0c0a 	mov.w	ip, #10
 80077e8:	4620      	mov	r0, r4
 80077ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ee:	3a30      	subs	r2, #48	; 0x30
 80077f0:	2a09      	cmp	r2, #9
 80077f2:	d903      	bls.n	80077fc <_vfiprintf_r+0x1d0>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0c6      	beq.n	8007786 <_vfiprintf_r+0x15a>
 80077f8:	9105      	str	r1, [sp, #20]
 80077fa:	e7c4      	b.n	8007786 <_vfiprintf_r+0x15a>
 80077fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007800:	4604      	mov	r4, r0
 8007802:	2301      	movs	r3, #1
 8007804:	e7f0      	b.n	80077e8 <_vfiprintf_r+0x1bc>
 8007806:	ab03      	add	r3, sp, #12
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	462a      	mov	r2, r5
 800780c:	4b12      	ldr	r3, [pc, #72]	; (8007858 <_vfiprintf_r+0x22c>)
 800780e:	a904      	add	r1, sp, #16
 8007810:	4630      	mov	r0, r6
 8007812:	f7fd f9d5 	bl	8004bc0 <_printf_float>
 8007816:	4607      	mov	r7, r0
 8007818:	1c78      	adds	r0, r7, #1
 800781a:	d1d6      	bne.n	80077ca <_vfiprintf_r+0x19e>
 800781c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800781e:	07d9      	lsls	r1, r3, #31
 8007820:	d405      	bmi.n	800782e <_vfiprintf_r+0x202>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	059a      	lsls	r2, r3, #22
 8007826:	d402      	bmi.n	800782e <_vfiprintf_r+0x202>
 8007828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782a:	f7fe f866 	bl	80058fa <__retarget_lock_release_recursive>
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	065b      	lsls	r3, r3, #25
 8007832:	f53f af1d 	bmi.w	8007670 <_vfiprintf_r+0x44>
 8007836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007838:	e71c      	b.n	8007674 <_vfiprintf_r+0x48>
 800783a:	ab03      	add	r3, sp, #12
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	462a      	mov	r2, r5
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <_vfiprintf_r+0x22c>)
 8007842:	a904      	add	r1, sp, #16
 8007844:	4630      	mov	r0, r6
 8007846:	f7fd fc5f 	bl	8005108 <_printf_i>
 800784a:	e7e4      	b.n	8007816 <_vfiprintf_r+0x1ea>
 800784c:	0800873d 	.word	0x0800873d
 8007850:	08008747 	.word	0x08008747
 8007854:	08004bc1 	.word	0x08004bc1
 8007858:	08007607 	.word	0x08007607
 800785c:	08008743 	.word	0x08008743

08007860 <_scanf_chars>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	4615      	mov	r5, r2
 8007866:	688a      	ldr	r2, [r1, #8]
 8007868:	4680      	mov	r8, r0
 800786a:	460c      	mov	r4, r1
 800786c:	b932      	cbnz	r2, 800787c <_scanf_chars+0x1c>
 800786e:	698a      	ldr	r2, [r1, #24]
 8007870:	2a00      	cmp	r2, #0
 8007872:	bf0c      	ite	eq
 8007874:	2201      	moveq	r2, #1
 8007876:	f04f 32ff 	movne.w	r2, #4294967295
 800787a:	608a      	str	r2, [r1, #8]
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007910 <_scanf_chars+0xb0>
 8007882:	06d1      	lsls	r1, r2, #27
 8007884:	bf5f      	itttt	pl
 8007886:	681a      	ldrpl	r2, [r3, #0]
 8007888:	1d11      	addpl	r1, r2, #4
 800788a:	6019      	strpl	r1, [r3, #0]
 800788c:	6816      	ldrpl	r6, [r2, #0]
 800788e:	2700      	movs	r7, #0
 8007890:	69a0      	ldr	r0, [r4, #24]
 8007892:	b188      	cbz	r0, 80078b8 <_scanf_chars+0x58>
 8007894:	2801      	cmp	r0, #1
 8007896:	d107      	bne.n	80078a8 <_scanf_chars+0x48>
 8007898:	682a      	ldr	r2, [r5, #0]
 800789a:	7811      	ldrb	r1, [r2, #0]
 800789c:	6962      	ldr	r2, [r4, #20]
 800789e:	5c52      	ldrb	r2, [r2, r1]
 80078a0:	b952      	cbnz	r2, 80078b8 <_scanf_chars+0x58>
 80078a2:	2f00      	cmp	r7, #0
 80078a4:	d031      	beq.n	800790a <_scanf_chars+0xaa>
 80078a6:	e022      	b.n	80078ee <_scanf_chars+0x8e>
 80078a8:	2802      	cmp	r0, #2
 80078aa:	d120      	bne.n	80078ee <_scanf_chars+0x8e>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d41a      	bmi.n	80078ee <_scanf_chars+0x8e>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	06da      	lsls	r2, r3, #27
 80078bc:	bf5e      	ittt	pl
 80078be:	682b      	ldrpl	r3, [r5, #0]
 80078c0:	781b      	ldrbpl	r3, [r3, #0]
 80078c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80078c6:	682a      	ldr	r2, [r5, #0]
 80078c8:	686b      	ldr	r3, [r5, #4]
 80078ca:	3201      	adds	r2, #1
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	68a2      	ldr	r2, [r4, #8]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	3a01      	subs	r2, #1
 80078d4:	606b      	str	r3, [r5, #4]
 80078d6:	3701      	adds	r7, #1
 80078d8:	60a2      	str	r2, [r4, #8]
 80078da:	b142      	cbz	r2, 80078ee <_scanf_chars+0x8e>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dcd7      	bgt.n	8007890 <_scanf_chars+0x30>
 80078e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078e4:	4629      	mov	r1, r5
 80078e6:	4640      	mov	r0, r8
 80078e8:	4798      	blx	r3
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0d0      	beq.n	8007890 <_scanf_chars+0x30>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	f013 0310 	ands.w	r3, r3, #16
 80078f4:	d105      	bne.n	8007902 <_scanf_chars+0xa2>
 80078f6:	68e2      	ldr	r2, [r4, #12]
 80078f8:	3201      	adds	r2, #1
 80078fa:	60e2      	str	r2, [r4, #12]
 80078fc:	69a2      	ldr	r2, [r4, #24]
 80078fe:	b102      	cbz	r2, 8007902 <_scanf_chars+0xa2>
 8007900:	7033      	strb	r3, [r6, #0]
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	443b      	add	r3, r7
 8007906:	6123      	str	r3, [r4, #16]
 8007908:	2000      	movs	r0, #0
 800790a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790e:	bf00      	nop
 8007910:	0800863d 	.word	0x0800863d

08007914 <_scanf_i>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	4698      	mov	r8, r3
 800791a:	4b74      	ldr	r3, [pc, #464]	; (8007aec <_scanf_i+0x1d8>)
 800791c:	460c      	mov	r4, r1
 800791e:	4682      	mov	sl, r0
 8007920:	4616      	mov	r6, r2
 8007922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007926:	b087      	sub	sp, #28
 8007928:	ab03      	add	r3, sp, #12
 800792a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800792e:	4b70      	ldr	r3, [pc, #448]	; (8007af0 <_scanf_i+0x1dc>)
 8007930:	69a1      	ldr	r1, [r4, #24]
 8007932:	4a70      	ldr	r2, [pc, #448]	; (8007af4 <_scanf_i+0x1e0>)
 8007934:	2903      	cmp	r1, #3
 8007936:	bf18      	it	ne
 8007938:	461a      	movne	r2, r3
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	9201      	str	r2, [sp, #4]
 800793e:	1e5a      	subs	r2, r3, #1
 8007940:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007944:	bf88      	it	hi
 8007946:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800794a:	4627      	mov	r7, r4
 800794c:	bf82      	ittt	hi
 800794e:	eb03 0905 	addhi.w	r9, r3, r5
 8007952:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007956:	60a3      	strhi	r3, [r4, #8]
 8007958:	f857 3b1c 	ldr.w	r3, [r7], #28
 800795c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007960:	bf98      	it	ls
 8007962:	f04f 0900 	movls.w	r9, #0
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	463d      	mov	r5, r7
 800796a:	f04f 0b00 	mov.w	fp, #0
 800796e:	6831      	ldr	r1, [r6, #0]
 8007970:	ab03      	add	r3, sp, #12
 8007972:	7809      	ldrb	r1, [r1, #0]
 8007974:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007978:	2202      	movs	r2, #2
 800797a:	f7f8 fc29 	bl	80001d0 <memchr>
 800797e:	b328      	cbz	r0, 80079cc <_scanf_i+0xb8>
 8007980:	f1bb 0f01 	cmp.w	fp, #1
 8007984:	d159      	bne.n	8007a3a <_scanf_i+0x126>
 8007986:	6862      	ldr	r2, [r4, #4]
 8007988:	b92a      	cbnz	r2, 8007996 <_scanf_i+0x82>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	2308      	movs	r3, #8
 800798e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007992:	6063      	str	r3, [r4, #4]
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800799c:	6022      	str	r2, [r4, #0]
 800799e:	68a2      	ldr	r2, [r4, #8]
 80079a0:	1e51      	subs	r1, r2, #1
 80079a2:	60a1      	str	r1, [r4, #8]
 80079a4:	b192      	cbz	r2, 80079cc <_scanf_i+0xb8>
 80079a6:	6832      	ldr	r2, [r6, #0]
 80079a8:	1c51      	adds	r1, r2, #1
 80079aa:	6031      	str	r1, [r6, #0]
 80079ac:	7812      	ldrb	r2, [r2, #0]
 80079ae:	f805 2b01 	strb.w	r2, [r5], #1
 80079b2:	6872      	ldr	r2, [r6, #4]
 80079b4:	3a01      	subs	r2, #1
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	6072      	str	r2, [r6, #4]
 80079ba:	dc07      	bgt.n	80079cc <_scanf_i+0xb8>
 80079bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80079c0:	4631      	mov	r1, r6
 80079c2:	4650      	mov	r0, sl
 80079c4:	4790      	blx	r2
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f040 8085 	bne.w	8007ad6 <_scanf_i+0x1c2>
 80079cc:	f10b 0b01 	add.w	fp, fp, #1
 80079d0:	f1bb 0f03 	cmp.w	fp, #3
 80079d4:	d1cb      	bne.n	800796e <_scanf_i+0x5a>
 80079d6:	6863      	ldr	r3, [r4, #4]
 80079d8:	b90b      	cbnz	r3, 80079de <_scanf_i+0xca>
 80079da:	230a      	movs	r3, #10
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	6863      	ldr	r3, [r4, #4]
 80079e0:	4945      	ldr	r1, [pc, #276]	; (8007af8 <_scanf_i+0x1e4>)
 80079e2:	6960      	ldr	r0, [r4, #20]
 80079e4:	1ac9      	subs	r1, r1, r3
 80079e6:	f000 f9ab 	bl	8007d40 <__sccl>
 80079ea:	f04f 0b00 	mov.w	fp, #0
 80079ee:	68a3      	ldr	r3, [r4, #8]
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03d      	beq.n	8007a72 <_scanf_i+0x15e>
 80079f6:	6831      	ldr	r1, [r6, #0]
 80079f8:	6960      	ldr	r0, [r4, #20]
 80079fa:	f891 c000 	ldrb.w	ip, [r1]
 80079fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d035      	beq.n	8007a72 <_scanf_i+0x15e>
 8007a06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007a0a:	d124      	bne.n	8007a56 <_scanf_i+0x142>
 8007a0c:	0510      	lsls	r0, r2, #20
 8007a0e:	d522      	bpl.n	8007a56 <_scanf_i+0x142>
 8007a10:	f10b 0b01 	add.w	fp, fp, #1
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	d003      	beq.n	8007a22 <_scanf_i+0x10e>
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a20:	60a3      	str	r3, [r4, #8]
 8007a22:	6873      	ldr	r3, [r6, #4]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	6073      	str	r3, [r6, #4]
 8007a2a:	dd1b      	ble.n	8007a64 <_scanf_i+0x150>
 8007a2c:	6833      	ldr	r3, [r6, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	68a3      	ldr	r3, [r4, #8]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	60a3      	str	r3, [r4, #8]
 8007a38:	e7d9      	b.n	80079ee <_scanf_i+0xda>
 8007a3a:	f1bb 0f02 	cmp.w	fp, #2
 8007a3e:	d1ae      	bne.n	800799e <_scanf_i+0x8a>
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007a46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007a4a:	d1bf      	bne.n	80079cc <_scanf_i+0xb8>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a54:	e7a2      	b.n	800799c <_scanf_i+0x88>
 8007a56:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007a5a:	6022      	str	r2, [r4, #0]
 8007a5c:	780b      	ldrb	r3, [r1, #0]
 8007a5e:	f805 3b01 	strb.w	r3, [r5], #1
 8007a62:	e7de      	b.n	8007a22 <_scanf_i+0x10e>
 8007a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	4798      	blx	r3
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d0df      	beq.n	8007a32 <_scanf_i+0x11e>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	05d9      	lsls	r1, r3, #23
 8007a76:	d50d      	bpl.n	8007a94 <_scanf_i+0x180>
 8007a78:	42bd      	cmp	r5, r7
 8007a7a:	d909      	bls.n	8007a90 <_scanf_i+0x17c>
 8007a7c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a84:	4632      	mov	r2, r6
 8007a86:	4650      	mov	r0, sl
 8007a88:	4798      	blx	r3
 8007a8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007a8e:	464d      	mov	r5, r9
 8007a90:	42bd      	cmp	r5, r7
 8007a92:	d028      	beq.n	8007ae6 <_scanf_i+0x1d2>
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	f012 0210 	ands.w	r2, r2, #16
 8007a9a:	d113      	bne.n	8007ac4 <_scanf_i+0x1b0>
 8007a9c:	702a      	strb	r2, [r5, #0]
 8007a9e:	6863      	ldr	r3, [r4, #4]
 8007aa0:	9e01      	ldr	r6, [sp, #4]
 8007aa2:	4639      	mov	r1, r7
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	47b0      	blx	r6
 8007aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	1d1a      	adds	r2, r3, #4
 8007ab0:	f8c8 2000 	str.w	r2, [r8]
 8007ab4:	f011 0f20 	tst.w	r1, #32
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	d00f      	beq.n	8007adc <_scanf_i+0x1c8>
 8007abc:	6018      	str	r0, [r3, #0]
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60e3      	str	r3, [r4, #12]
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	1bed      	subs	r5, r5, r7
 8007ac8:	445d      	add	r5, fp
 8007aca:	442b      	add	r3, r5
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	2000      	movs	r0, #0
 8007ad0:	b007      	add	sp, #28
 8007ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	f04f 0b00 	mov.w	fp, #0
 8007ada:	e7ca      	b.n	8007a72 <_scanf_i+0x15e>
 8007adc:	07ca      	lsls	r2, r1, #31
 8007ade:	bf4c      	ite	mi
 8007ae0:	8018      	strhmi	r0, [r3, #0]
 8007ae2:	6018      	strpl	r0, [r3, #0]
 8007ae4:	e7eb      	b.n	8007abe <_scanf_i+0x1aa>
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	e7f2      	b.n	8007ad0 <_scanf_i+0x1bc>
 8007aea:	bf00      	nop
 8007aec:	08008388 	.word	0x08008388
 8007af0:	08008145 	.word	0x08008145
 8007af4:	0800805d 	.word	0x0800805d
 8007af8:	0800875e 	.word	0x0800875e

08007afc <__sflush_r>:
 8007afc:	898a      	ldrh	r2, [r1, #12]
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	4605      	mov	r5, r0
 8007b04:	0710      	lsls	r0, r2, #28
 8007b06:	460c      	mov	r4, r1
 8007b08:	d458      	bmi.n	8007bbc <__sflush_r+0xc0>
 8007b0a:	684b      	ldr	r3, [r1, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc05      	bgt.n	8007b1c <__sflush_r+0x20>
 8007b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dc02      	bgt.n	8007b1c <__sflush_r+0x20>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b1e:	2e00      	cmp	r6, #0
 8007b20:	d0f9      	beq.n	8007b16 <__sflush_r+0x1a>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b28:	682f      	ldr	r7, [r5, #0]
 8007b2a:	6a21      	ldr	r1, [r4, #32]
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	d032      	beq.n	8007b96 <__sflush_r+0x9a>
 8007b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	075a      	lsls	r2, r3, #29
 8007b36:	d505      	bpl.n	8007b44 <__sflush_r+0x48>
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	1ac0      	subs	r0, r0, r3
 8007b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b3e:	b10b      	cbz	r3, 8007b44 <__sflush_r+0x48>
 8007b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b42:	1ac0      	subs	r0, r0, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	4602      	mov	r2, r0
 8007b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b4a:	6a21      	ldr	r1, [r4, #32]
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b0      	blx	r6
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	d106      	bne.n	8007b64 <__sflush_r+0x68>
 8007b56:	6829      	ldr	r1, [r5, #0]
 8007b58:	291d      	cmp	r1, #29
 8007b5a:	d82b      	bhi.n	8007bb4 <__sflush_r+0xb8>
 8007b5c:	4a29      	ldr	r2, [pc, #164]	; (8007c04 <__sflush_r+0x108>)
 8007b5e:	410a      	asrs	r2, r1
 8007b60:	07d6      	lsls	r6, r2, #31
 8007b62:	d427      	bmi.n	8007bb4 <__sflush_r+0xb8>
 8007b64:	2200      	movs	r2, #0
 8007b66:	6062      	str	r2, [r4, #4]
 8007b68:	04d9      	lsls	r1, r3, #19
 8007b6a:	6922      	ldr	r2, [r4, #16]
 8007b6c:	6022      	str	r2, [r4, #0]
 8007b6e:	d504      	bpl.n	8007b7a <__sflush_r+0x7e>
 8007b70:	1c42      	adds	r2, r0, #1
 8007b72:	d101      	bne.n	8007b78 <__sflush_r+0x7c>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b903      	cbnz	r3, 8007b7a <__sflush_r+0x7e>
 8007b78:	6560      	str	r0, [r4, #84]	; 0x54
 8007b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b7c:	602f      	str	r7, [r5, #0]
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d0c9      	beq.n	8007b16 <__sflush_r+0x1a>
 8007b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b86:	4299      	cmp	r1, r3
 8007b88:	d002      	beq.n	8007b90 <__sflush_r+0x94>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f7fe fd5e 	bl	800664c <_free_r>
 8007b90:	2000      	movs	r0, #0
 8007b92:	6360      	str	r0, [r4, #52]	; 0x34
 8007b94:	e7c0      	b.n	8007b18 <__sflush_r+0x1c>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b0      	blx	r6
 8007b9c:	1c41      	adds	r1, r0, #1
 8007b9e:	d1c8      	bne.n	8007b32 <__sflush_r+0x36>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0c5      	beq.n	8007b32 <__sflush_r+0x36>
 8007ba6:	2b1d      	cmp	r3, #29
 8007ba8:	d001      	beq.n	8007bae <__sflush_r+0xb2>
 8007baa:	2b16      	cmp	r3, #22
 8007bac:	d101      	bne.n	8007bb2 <__sflush_r+0xb6>
 8007bae:	602f      	str	r7, [r5, #0]
 8007bb0:	e7b1      	b.n	8007b16 <__sflush_r+0x1a>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	e7ad      	b.n	8007b18 <__sflush_r+0x1c>
 8007bbc:	690f      	ldr	r7, [r1, #16]
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	d0a9      	beq.n	8007b16 <__sflush_r+0x1a>
 8007bc2:	0793      	lsls	r3, r2, #30
 8007bc4:	680e      	ldr	r6, [r1, #0]
 8007bc6:	bf08      	it	eq
 8007bc8:	694b      	ldreq	r3, [r1, #20]
 8007bca:	600f      	str	r7, [r1, #0]
 8007bcc:	bf18      	it	ne
 8007bce:	2300      	movne	r3, #0
 8007bd0:	eba6 0807 	sub.w	r8, r6, r7
 8007bd4:	608b      	str	r3, [r1, #8]
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	dd9c      	ble.n	8007b16 <__sflush_r+0x1a>
 8007bdc:	6a21      	ldr	r1, [r4, #32]
 8007bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007be0:	4643      	mov	r3, r8
 8007be2:	463a      	mov	r2, r7
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b0      	blx	r6
 8007be8:	2800      	cmp	r0, #0
 8007bea:	dc06      	bgt.n	8007bfa <__sflush_r+0xfe>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	e78e      	b.n	8007b18 <__sflush_r+0x1c>
 8007bfa:	4407      	add	r7, r0
 8007bfc:	eba8 0800 	sub.w	r8, r8, r0
 8007c00:	e7e9      	b.n	8007bd6 <__sflush_r+0xda>
 8007c02:	bf00      	nop
 8007c04:	dfbffffe 	.word	0xdfbffffe

08007c08 <_fflush_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	b913      	cbnz	r3, 8007c18 <_fflush_r+0x10>
 8007c12:	2500      	movs	r5, #0
 8007c14:	4628      	mov	r0, r5
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	b118      	cbz	r0, 8007c22 <_fflush_r+0x1a>
 8007c1a:	6a03      	ldr	r3, [r0, #32]
 8007c1c:	b90b      	cbnz	r3, 8007c22 <_fflush_r+0x1a>
 8007c1e:	f7fd fc0f 	bl	8005440 <__sinit>
 8007c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0f3      	beq.n	8007c12 <_fflush_r+0xa>
 8007c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c2c:	07d0      	lsls	r0, r2, #31
 8007c2e:	d404      	bmi.n	8007c3a <_fflush_r+0x32>
 8007c30:	0599      	lsls	r1, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_fflush_r+0x32>
 8007c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c36:	f7fd fe5f 	bl	80058f8 <__retarget_lock_acquire_recursive>
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7ff ff5d 	bl	8007afc <__sflush_r>
 8007c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c44:	07da      	lsls	r2, r3, #31
 8007c46:	4605      	mov	r5, r0
 8007c48:	d4e4      	bmi.n	8007c14 <_fflush_r+0xc>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	059b      	lsls	r3, r3, #22
 8007c4e:	d4e1      	bmi.n	8007c14 <_fflush_r+0xc>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f7fd fe52 	bl	80058fa <__retarget_lock_release_recursive>
 8007c56:	e7dd      	b.n	8007c14 <_fflush_r+0xc>

08007c58 <fiprintf>:
 8007c58:	b40e      	push	{r1, r2, r3}
 8007c5a:	b503      	push	{r0, r1, lr}
 8007c5c:	4601      	mov	r1, r0
 8007c5e:	ab03      	add	r3, sp, #12
 8007c60:	4805      	ldr	r0, [pc, #20]	; (8007c78 <fiprintf+0x20>)
 8007c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	f7ff fcdf 	bl	800762c <_vfiprintf_r>
 8007c6e:	b002      	add	sp, #8
 8007c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c74:	b003      	add	sp, #12
 8007c76:	4770      	bx	lr
 8007c78:	200001d0 	.word	0x200001d0

08007c7c <__swhatbuf_r>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	460c      	mov	r4, r1
 8007c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	b096      	sub	sp, #88	; 0x58
 8007c88:	4615      	mov	r5, r2
 8007c8a:	461e      	mov	r6, r3
 8007c8c:	da0d      	bge.n	8007caa <__swhatbuf_r+0x2e>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c94:	f04f 0100 	mov.w	r1, #0
 8007c98:	bf0c      	ite	eq
 8007c9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c9e:	2340      	movne	r3, #64	; 0x40
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	6031      	str	r1, [r6, #0]
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	b016      	add	sp, #88	; 0x58
 8007ca8:	bd70      	pop	{r4, r5, r6, pc}
 8007caa:	466a      	mov	r2, sp
 8007cac:	f000 f8d6 	bl	8007e5c <_fstat_r>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	dbec      	blt.n	8007c8e <__swhatbuf_r+0x12>
 8007cb4:	9901      	ldr	r1, [sp, #4]
 8007cb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cbe:	4259      	negs	r1, r3
 8007cc0:	4159      	adcs	r1, r3
 8007cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc6:	e7eb      	b.n	8007ca0 <__swhatbuf_r+0x24>

08007cc8 <__smakebuf_r>:
 8007cc8:	898b      	ldrh	r3, [r1, #12]
 8007cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ccc:	079d      	lsls	r5, r3, #30
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	d507      	bpl.n	8007ce4 <__smakebuf_r+0x1c>
 8007cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	6123      	str	r3, [r4, #16]
 8007cdc:	2301      	movs	r3, #1
 8007cde:	6163      	str	r3, [r4, #20]
 8007ce0:	b002      	add	sp, #8
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	ab01      	add	r3, sp, #4
 8007ce6:	466a      	mov	r2, sp
 8007ce8:	f7ff ffc8 	bl	8007c7c <__swhatbuf_r>
 8007cec:	9900      	ldr	r1, [sp, #0]
 8007cee:	4605      	mov	r5, r0
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7fe fd1f 	bl	8006734 <_malloc_r>
 8007cf6:	b948      	cbnz	r0, 8007d0c <__smakebuf_r+0x44>
 8007cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cfc:	059a      	lsls	r2, r3, #22
 8007cfe:	d4ef      	bmi.n	8007ce0 <__smakebuf_r+0x18>
 8007d00:	f023 0303 	bic.w	r3, r3, #3
 8007d04:	f043 0302 	orr.w	r3, r3, #2
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	e7e3      	b.n	8007cd4 <__smakebuf_r+0xc>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	6020      	str	r0, [r4, #0]
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	6163      	str	r3, [r4, #20]
 8007d1a:	9b01      	ldr	r3, [sp, #4]
 8007d1c:	6120      	str	r0, [r4, #16]
 8007d1e:	b15b      	cbz	r3, 8007d38 <__smakebuf_r+0x70>
 8007d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d24:	4630      	mov	r0, r6
 8007d26:	f000 f8ab 	bl	8007e80 <_isatty_r>
 8007d2a:	b128      	cbz	r0, 8007d38 <__smakebuf_r+0x70>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	431d      	orrs	r5, r3
 8007d3c:	81a5      	strh	r5, [r4, #12]
 8007d3e:	e7cf      	b.n	8007ce0 <__smakebuf_r+0x18>

08007d40 <__sccl>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	780b      	ldrb	r3, [r1, #0]
 8007d44:	4604      	mov	r4, r0
 8007d46:	2b5e      	cmp	r3, #94	; 0x5e
 8007d48:	bf0b      	itete	eq
 8007d4a:	784b      	ldrbeq	r3, [r1, #1]
 8007d4c:	1c4a      	addne	r2, r1, #1
 8007d4e:	1c8a      	addeq	r2, r1, #2
 8007d50:	2100      	movne	r1, #0
 8007d52:	bf08      	it	eq
 8007d54:	2101      	moveq	r1, #1
 8007d56:	3801      	subs	r0, #1
 8007d58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007d5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007d60:	42a8      	cmp	r0, r5
 8007d62:	d1fb      	bne.n	8007d5c <__sccl+0x1c>
 8007d64:	b90b      	cbnz	r3, 8007d6a <__sccl+0x2a>
 8007d66:	1e50      	subs	r0, r2, #1
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	f081 0101 	eor.w	r1, r1, #1
 8007d6e:	54e1      	strb	r1, [r4, r3]
 8007d70:	4610      	mov	r0, r2
 8007d72:	4602      	mov	r2, r0
 8007d74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d78:	2d2d      	cmp	r5, #45	; 0x2d
 8007d7a:	d005      	beq.n	8007d88 <__sccl+0x48>
 8007d7c:	2d5d      	cmp	r5, #93	; 0x5d
 8007d7e:	d016      	beq.n	8007dae <__sccl+0x6e>
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	d0f1      	beq.n	8007d68 <__sccl+0x28>
 8007d84:	462b      	mov	r3, r5
 8007d86:	e7f2      	b.n	8007d6e <__sccl+0x2e>
 8007d88:	7846      	ldrb	r6, [r0, #1]
 8007d8a:	2e5d      	cmp	r6, #93	; 0x5d
 8007d8c:	d0fa      	beq.n	8007d84 <__sccl+0x44>
 8007d8e:	42b3      	cmp	r3, r6
 8007d90:	dcf8      	bgt.n	8007d84 <__sccl+0x44>
 8007d92:	3002      	adds	r0, #2
 8007d94:	461a      	mov	r2, r3
 8007d96:	3201      	adds	r2, #1
 8007d98:	4296      	cmp	r6, r2
 8007d9a:	54a1      	strb	r1, [r4, r2]
 8007d9c:	dcfb      	bgt.n	8007d96 <__sccl+0x56>
 8007d9e:	1af2      	subs	r2, r6, r3
 8007da0:	3a01      	subs	r2, #1
 8007da2:	1c5d      	adds	r5, r3, #1
 8007da4:	42b3      	cmp	r3, r6
 8007da6:	bfa8      	it	ge
 8007da8:	2200      	movge	r2, #0
 8007daa:	18ab      	adds	r3, r5, r2
 8007dac:	e7e1      	b.n	8007d72 <__sccl+0x32>
 8007dae:	4610      	mov	r0, r2
 8007db0:	e7da      	b.n	8007d68 <__sccl+0x28>

08007db2 <__submore>:
 8007db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	460c      	mov	r4, r1
 8007db8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	d11d      	bne.n	8007dfe <__submore+0x4c>
 8007dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007dc6:	f7fe fcb5 	bl	8006734 <_malloc_r>
 8007dca:	b918      	cbnz	r0, 8007dd4 <__submore+0x22>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8007dda:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007dde:	6360      	str	r0, [r4, #52]	; 0x34
 8007de0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007de4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007de8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007df0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007df4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007df8:	6020      	str	r0, [r4, #0]
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7e8      	b.n	8007dd0 <__submore+0x1e>
 8007dfe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007e00:	0077      	lsls	r7, r6, #1
 8007e02:	463a      	mov	r2, r7
 8007e04:	f000 f879 	bl	8007efa <_realloc_r>
 8007e08:	4605      	mov	r5, r0
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d0de      	beq.n	8007dcc <__submore+0x1a>
 8007e0e:	eb00 0806 	add.w	r8, r0, r6
 8007e12:	4601      	mov	r1, r0
 8007e14:	4632      	mov	r2, r6
 8007e16:	4640      	mov	r0, r8
 8007e18:	f7fd fd70 	bl	80058fc <memcpy>
 8007e1c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007e20:	f8c4 8000 	str.w	r8, [r4]
 8007e24:	e7e9      	b.n	8007dfa <__submore+0x48>

08007e26 <memmove>:
 8007e26:	4288      	cmp	r0, r1
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	eb01 0402 	add.w	r4, r1, r2
 8007e2e:	d902      	bls.n	8007e36 <memmove+0x10>
 8007e30:	4284      	cmp	r4, r0
 8007e32:	4623      	mov	r3, r4
 8007e34:	d807      	bhi.n	8007e46 <memmove+0x20>
 8007e36:	1e43      	subs	r3, r0, #1
 8007e38:	42a1      	cmp	r1, r4
 8007e3a:	d008      	beq.n	8007e4e <memmove+0x28>
 8007e3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e44:	e7f8      	b.n	8007e38 <memmove+0x12>
 8007e46:	4402      	add	r2, r0
 8007e48:	4601      	mov	r1, r0
 8007e4a:	428a      	cmp	r2, r1
 8007e4c:	d100      	bne.n	8007e50 <memmove+0x2a>
 8007e4e:	bd10      	pop	{r4, pc}
 8007e50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e58:	e7f7      	b.n	8007e4a <memmove+0x24>
	...

08007e5c <_fstat_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d07      	ldr	r5, [pc, #28]	; (8007e7c <_fstat_r+0x20>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	f7f9 fd5e 	bl	800192a <_fstat>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d102      	bne.n	8007e78 <_fstat_r+0x1c>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	b103      	cbz	r3, 8007e78 <_fstat_r+0x1c>
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000088c 	.word	0x2000088c

08007e80 <_isatty_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d06      	ldr	r5, [pc, #24]	; (8007e9c <_isatty_r+0x1c>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7f9 fd5d 	bl	800194a <_isatty>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_isatty_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_isatty_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	2000088c 	.word	0x2000088c

08007ea0 <_sbrk_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_sbrk_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 fd66 	bl	800197c <_sbrk>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_sbrk_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_sbrk_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	2000088c 	.word	0x2000088c

08007ec0 <abort>:
 8007ec0:	b508      	push	{r3, lr}
 8007ec2:	2006      	movs	r0, #6
 8007ec4:	f000 f968 	bl	8008198 <raise>
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7f9 fcfb 	bl	80018c4 <_exit>

08007ece <_calloc_r>:
 8007ece:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ed0:	fba1 2402 	umull	r2, r4, r1, r2
 8007ed4:	b94c      	cbnz	r4, 8007eea <_calloc_r+0x1c>
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	9201      	str	r2, [sp, #4]
 8007eda:	f7fe fc2b 	bl	8006734 <_malloc_r>
 8007ede:	9a01      	ldr	r2, [sp, #4]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	b930      	cbnz	r0, 8007ef2 <_calloc_r+0x24>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	b003      	add	sp, #12
 8007ee8:	bd30      	pop	{r4, r5, pc}
 8007eea:	220c      	movs	r2, #12
 8007eec:	6002      	str	r2, [r0, #0]
 8007eee:	2500      	movs	r5, #0
 8007ef0:	e7f8      	b.n	8007ee4 <_calloc_r+0x16>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	f7fd fc6e 	bl	80057d4 <memset>
 8007ef8:	e7f4      	b.n	8007ee4 <_calloc_r+0x16>

08007efa <_realloc_r>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	4680      	mov	r8, r0
 8007f00:	4614      	mov	r4, r2
 8007f02:	460e      	mov	r6, r1
 8007f04:	b921      	cbnz	r1, 8007f10 <_realloc_r+0x16>
 8007f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	f7fe bc12 	b.w	8006734 <_malloc_r>
 8007f10:	b92a      	cbnz	r2, 8007f1e <_realloc_r+0x24>
 8007f12:	f7fe fb9b 	bl	800664c <_free_r>
 8007f16:	4625      	mov	r5, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1e:	f000 f957 	bl	80081d0 <_malloc_usable_size_r>
 8007f22:	4284      	cmp	r4, r0
 8007f24:	4607      	mov	r7, r0
 8007f26:	d802      	bhi.n	8007f2e <_realloc_r+0x34>
 8007f28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f2c:	d812      	bhi.n	8007f54 <_realloc_r+0x5a>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4640      	mov	r0, r8
 8007f32:	f7fe fbff 	bl	8006734 <_malloc_r>
 8007f36:	4605      	mov	r5, r0
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d0ed      	beq.n	8007f18 <_realloc_r+0x1e>
 8007f3c:	42bc      	cmp	r4, r7
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4631      	mov	r1, r6
 8007f42:	bf28      	it	cs
 8007f44:	463a      	movcs	r2, r7
 8007f46:	f7fd fcd9 	bl	80058fc <memcpy>
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	f7fe fb7d 	bl	800664c <_free_r>
 8007f52:	e7e1      	b.n	8007f18 <_realloc_r+0x1e>
 8007f54:	4635      	mov	r5, r6
 8007f56:	e7df      	b.n	8007f18 <_realloc_r+0x1e>

08007f58 <_strtol_l.constprop.0>:
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5e:	d001      	beq.n	8007f64 <_strtol_l.constprop.0+0xc>
 8007f60:	2b24      	cmp	r3, #36	; 0x24
 8007f62:	d906      	bls.n	8007f72 <_strtol_l.constprop.0+0x1a>
 8007f64:	f7fd fc9e 	bl	80058a4 <__errno>
 8007f68:	2316      	movs	r3, #22
 8007f6a:	6003      	str	r3, [r0, #0]
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008058 <_strtol_l.constprop.0+0x100>
 8007f76:	460d      	mov	r5, r1
 8007f78:	462e      	mov	r6, r5
 8007f7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f7e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007f82:	f017 0708 	ands.w	r7, r7, #8
 8007f86:	d1f7      	bne.n	8007f78 <_strtol_l.constprop.0+0x20>
 8007f88:	2c2d      	cmp	r4, #45	; 0x2d
 8007f8a:	d132      	bne.n	8007ff2 <_strtol_l.constprop.0+0x9a>
 8007f8c:	782c      	ldrb	r4, [r5, #0]
 8007f8e:	2701      	movs	r7, #1
 8007f90:	1cb5      	adds	r5, r6, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d05b      	beq.n	800804e <_strtol_l.constprop.0+0xf6>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d109      	bne.n	8007fae <_strtol_l.constprop.0+0x56>
 8007f9a:	2c30      	cmp	r4, #48	; 0x30
 8007f9c:	d107      	bne.n	8007fae <_strtol_l.constprop.0+0x56>
 8007f9e:	782c      	ldrb	r4, [r5, #0]
 8007fa0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fa4:	2c58      	cmp	r4, #88	; 0x58
 8007fa6:	d14d      	bne.n	8008044 <_strtol_l.constprop.0+0xec>
 8007fa8:	786c      	ldrb	r4, [r5, #1]
 8007faa:	2310      	movs	r3, #16
 8007fac:	3502      	adds	r5, #2
 8007fae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007fb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fb6:	f04f 0e00 	mov.w	lr, #0
 8007fba:	fbb8 f9f3 	udiv	r9, r8, r3
 8007fbe:	4676      	mov	r6, lr
 8007fc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007fc4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007fc8:	f1bc 0f09 	cmp.w	ip, #9
 8007fcc:	d816      	bhi.n	8007ffc <_strtol_l.constprop.0+0xa4>
 8007fce:	4664      	mov	r4, ip
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	dd24      	ble.n	800801e <_strtol_l.constprop.0+0xc6>
 8007fd4:	f1be 3fff 	cmp.w	lr, #4294967295
 8007fd8:	d008      	beq.n	8007fec <_strtol_l.constprop.0+0x94>
 8007fda:	45b1      	cmp	r9, r6
 8007fdc:	d31c      	bcc.n	8008018 <_strtol_l.constprop.0+0xc0>
 8007fde:	d101      	bne.n	8007fe4 <_strtol_l.constprop.0+0x8c>
 8007fe0:	45a2      	cmp	sl, r4
 8007fe2:	db19      	blt.n	8008018 <_strtol_l.constprop.0+0xc0>
 8007fe4:	fb06 4603 	mla	r6, r6, r3, r4
 8007fe8:	f04f 0e01 	mov.w	lr, #1
 8007fec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ff0:	e7e8      	b.n	8007fc4 <_strtol_l.constprop.0+0x6c>
 8007ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ff4:	bf04      	itt	eq
 8007ff6:	782c      	ldrbeq	r4, [r5, #0]
 8007ff8:	1cb5      	addeq	r5, r6, #2
 8007ffa:	e7ca      	b.n	8007f92 <_strtol_l.constprop.0+0x3a>
 8007ffc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008000:	f1bc 0f19 	cmp.w	ip, #25
 8008004:	d801      	bhi.n	800800a <_strtol_l.constprop.0+0xb2>
 8008006:	3c37      	subs	r4, #55	; 0x37
 8008008:	e7e2      	b.n	8007fd0 <_strtol_l.constprop.0+0x78>
 800800a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800800e:	f1bc 0f19 	cmp.w	ip, #25
 8008012:	d804      	bhi.n	800801e <_strtol_l.constprop.0+0xc6>
 8008014:	3c57      	subs	r4, #87	; 0x57
 8008016:	e7db      	b.n	8007fd0 <_strtol_l.constprop.0+0x78>
 8008018:	f04f 3eff 	mov.w	lr, #4294967295
 800801c:	e7e6      	b.n	8007fec <_strtol_l.constprop.0+0x94>
 800801e:	f1be 3fff 	cmp.w	lr, #4294967295
 8008022:	d105      	bne.n	8008030 <_strtol_l.constprop.0+0xd8>
 8008024:	2322      	movs	r3, #34	; 0x22
 8008026:	6003      	str	r3, [r0, #0]
 8008028:	4646      	mov	r6, r8
 800802a:	b942      	cbnz	r2, 800803e <_strtol_l.constprop.0+0xe6>
 800802c:	4630      	mov	r0, r6
 800802e:	e79e      	b.n	8007f6e <_strtol_l.constprop.0+0x16>
 8008030:	b107      	cbz	r7, 8008034 <_strtol_l.constprop.0+0xdc>
 8008032:	4276      	negs	r6, r6
 8008034:	2a00      	cmp	r2, #0
 8008036:	d0f9      	beq.n	800802c <_strtol_l.constprop.0+0xd4>
 8008038:	f1be 0f00 	cmp.w	lr, #0
 800803c:	d000      	beq.n	8008040 <_strtol_l.constprop.0+0xe8>
 800803e:	1e69      	subs	r1, r5, #1
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	e7f3      	b.n	800802c <_strtol_l.constprop.0+0xd4>
 8008044:	2430      	movs	r4, #48	; 0x30
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1b1      	bne.n	8007fae <_strtol_l.constprop.0+0x56>
 800804a:	2308      	movs	r3, #8
 800804c:	e7af      	b.n	8007fae <_strtol_l.constprop.0+0x56>
 800804e:	2c30      	cmp	r4, #48	; 0x30
 8008050:	d0a5      	beq.n	8007f9e <_strtol_l.constprop.0+0x46>
 8008052:	230a      	movs	r3, #10
 8008054:	e7ab      	b.n	8007fae <_strtol_l.constprop.0+0x56>
 8008056:	bf00      	nop
 8008058:	0800863d 	.word	0x0800863d

0800805c <_strtol_r>:
 800805c:	f7ff bf7c 	b.w	8007f58 <_strtol_l.constprop.0>

08008060 <_strtoul_l.constprop.0>:
 8008060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008064:	4f36      	ldr	r7, [pc, #216]	; (8008140 <_strtoul_l.constprop.0+0xe0>)
 8008066:	4686      	mov	lr, r0
 8008068:	460d      	mov	r5, r1
 800806a:	4628      	mov	r0, r5
 800806c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008070:	5d3e      	ldrb	r6, [r7, r4]
 8008072:	f016 0608 	ands.w	r6, r6, #8
 8008076:	d1f8      	bne.n	800806a <_strtoul_l.constprop.0+0xa>
 8008078:	2c2d      	cmp	r4, #45	; 0x2d
 800807a:	d130      	bne.n	80080de <_strtoul_l.constprop.0+0x7e>
 800807c:	782c      	ldrb	r4, [r5, #0]
 800807e:	2601      	movs	r6, #1
 8008080:	1c85      	adds	r5, r0, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d057      	beq.n	8008136 <_strtoul_l.constprop.0+0xd6>
 8008086:	2b10      	cmp	r3, #16
 8008088:	d109      	bne.n	800809e <_strtoul_l.constprop.0+0x3e>
 800808a:	2c30      	cmp	r4, #48	; 0x30
 800808c:	d107      	bne.n	800809e <_strtoul_l.constprop.0+0x3e>
 800808e:	7828      	ldrb	r0, [r5, #0]
 8008090:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008094:	2858      	cmp	r0, #88	; 0x58
 8008096:	d149      	bne.n	800812c <_strtoul_l.constprop.0+0xcc>
 8008098:	786c      	ldrb	r4, [r5, #1]
 800809a:	2310      	movs	r3, #16
 800809c:	3502      	adds	r5, #2
 800809e:	f04f 38ff 	mov.w	r8, #4294967295
 80080a2:	2700      	movs	r7, #0
 80080a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80080a8:	fb03 f908 	mul.w	r9, r3, r8
 80080ac:	ea6f 0909 	mvn.w	r9, r9
 80080b0:	4638      	mov	r0, r7
 80080b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80080b6:	f1bc 0f09 	cmp.w	ip, #9
 80080ba:	d815      	bhi.n	80080e8 <_strtoul_l.constprop.0+0x88>
 80080bc:	4664      	mov	r4, ip
 80080be:	42a3      	cmp	r3, r4
 80080c0:	dd23      	ble.n	800810a <_strtoul_l.constprop.0+0xaa>
 80080c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80080c6:	d007      	beq.n	80080d8 <_strtoul_l.constprop.0+0x78>
 80080c8:	4580      	cmp	r8, r0
 80080ca:	d31b      	bcc.n	8008104 <_strtoul_l.constprop.0+0xa4>
 80080cc:	d101      	bne.n	80080d2 <_strtoul_l.constprop.0+0x72>
 80080ce:	45a1      	cmp	r9, r4
 80080d0:	db18      	blt.n	8008104 <_strtoul_l.constprop.0+0xa4>
 80080d2:	fb00 4003 	mla	r0, r0, r3, r4
 80080d6:	2701      	movs	r7, #1
 80080d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080dc:	e7e9      	b.n	80080b2 <_strtoul_l.constprop.0+0x52>
 80080de:	2c2b      	cmp	r4, #43	; 0x2b
 80080e0:	bf04      	itt	eq
 80080e2:	782c      	ldrbeq	r4, [r5, #0]
 80080e4:	1c85      	addeq	r5, r0, #2
 80080e6:	e7cc      	b.n	8008082 <_strtoul_l.constprop.0+0x22>
 80080e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80080ec:	f1bc 0f19 	cmp.w	ip, #25
 80080f0:	d801      	bhi.n	80080f6 <_strtoul_l.constprop.0+0x96>
 80080f2:	3c37      	subs	r4, #55	; 0x37
 80080f4:	e7e3      	b.n	80080be <_strtoul_l.constprop.0+0x5e>
 80080f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080fa:	f1bc 0f19 	cmp.w	ip, #25
 80080fe:	d804      	bhi.n	800810a <_strtoul_l.constprop.0+0xaa>
 8008100:	3c57      	subs	r4, #87	; 0x57
 8008102:	e7dc      	b.n	80080be <_strtoul_l.constprop.0+0x5e>
 8008104:	f04f 37ff 	mov.w	r7, #4294967295
 8008108:	e7e6      	b.n	80080d8 <_strtoul_l.constprop.0+0x78>
 800810a:	1c7b      	adds	r3, r7, #1
 800810c:	d106      	bne.n	800811c <_strtoul_l.constprop.0+0xbc>
 800810e:	2322      	movs	r3, #34	; 0x22
 8008110:	f8ce 3000 	str.w	r3, [lr]
 8008114:	4638      	mov	r0, r7
 8008116:	b932      	cbnz	r2, 8008126 <_strtoul_l.constprop.0+0xc6>
 8008118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800811c:	b106      	cbz	r6, 8008120 <_strtoul_l.constprop.0+0xc0>
 800811e:	4240      	negs	r0, r0
 8008120:	2a00      	cmp	r2, #0
 8008122:	d0f9      	beq.n	8008118 <_strtoul_l.constprop.0+0xb8>
 8008124:	b107      	cbz	r7, 8008128 <_strtoul_l.constprop.0+0xc8>
 8008126:	1e69      	subs	r1, r5, #1
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	e7f5      	b.n	8008118 <_strtoul_l.constprop.0+0xb8>
 800812c:	2430      	movs	r4, #48	; 0x30
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1b5      	bne.n	800809e <_strtoul_l.constprop.0+0x3e>
 8008132:	2308      	movs	r3, #8
 8008134:	e7b3      	b.n	800809e <_strtoul_l.constprop.0+0x3e>
 8008136:	2c30      	cmp	r4, #48	; 0x30
 8008138:	d0a9      	beq.n	800808e <_strtoul_l.constprop.0+0x2e>
 800813a:	230a      	movs	r3, #10
 800813c:	e7af      	b.n	800809e <_strtoul_l.constprop.0+0x3e>
 800813e:	bf00      	nop
 8008140:	0800863d 	.word	0x0800863d

08008144 <_strtoul_r>:
 8008144:	f7ff bf8c 	b.w	8008060 <_strtoul_l.constprop.0>

08008148 <_raise_r>:
 8008148:	291f      	cmp	r1, #31
 800814a:	b538      	push	{r3, r4, r5, lr}
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	d904      	bls.n	800815c <_raise_r+0x14>
 8008152:	2316      	movs	r3, #22
 8008154:	6003      	str	r3, [r0, #0]
 8008156:	f04f 30ff 	mov.w	r0, #4294967295
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800815e:	b112      	cbz	r2, 8008166 <_raise_r+0x1e>
 8008160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008164:	b94b      	cbnz	r3, 800817a <_raise_r+0x32>
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f830 	bl	80081cc <_getpid_r>
 800816c:	462a      	mov	r2, r5
 800816e:	4601      	mov	r1, r0
 8008170:	4620      	mov	r0, r4
 8008172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008176:	f000 b817 	b.w	80081a8 <_kill_r>
 800817a:	2b01      	cmp	r3, #1
 800817c:	d00a      	beq.n	8008194 <_raise_r+0x4c>
 800817e:	1c59      	adds	r1, r3, #1
 8008180:	d103      	bne.n	800818a <_raise_r+0x42>
 8008182:	2316      	movs	r3, #22
 8008184:	6003      	str	r3, [r0, #0]
 8008186:	2001      	movs	r0, #1
 8008188:	e7e7      	b.n	800815a <_raise_r+0x12>
 800818a:	2400      	movs	r4, #0
 800818c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008190:	4628      	mov	r0, r5
 8008192:	4798      	blx	r3
 8008194:	2000      	movs	r0, #0
 8008196:	e7e0      	b.n	800815a <_raise_r+0x12>

08008198 <raise>:
 8008198:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <raise+0xc>)
 800819a:	4601      	mov	r1, r0
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	f7ff bfd3 	b.w	8008148 <_raise_r>
 80081a2:	bf00      	nop
 80081a4:	200001d0 	.word	0x200001d0

080081a8 <_kill_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	; (80081c8 <_kill_r+0x20>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	4611      	mov	r1, r2
 80081b4:	602b      	str	r3, [r5, #0]
 80081b6:	f7f9 fb75 	bl	80018a4 <_kill>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d102      	bne.n	80081c4 <_kill_r+0x1c>
 80081be:	682b      	ldr	r3, [r5, #0]
 80081c0:	b103      	cbz	r3, 80081c4 <_kill_r+0x1c>
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	bd38      	pop	{r3, r4, r5, pc}
 80081c6:	bf00      	nop
 80081c8:	2000088c 	.word	0x2000088c

080081cc <_getpid_r>:
 80081cc:	f7f9 bb62 	b.w	8001894 <_getpid>

080081d0 <_malloc_usable_size_r>:
 80081d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d4:	1f18      	subs	r0, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfbc      	itt	lt
 80081da:	580b      	ldrlt	r3, [r1, r0]
 80081dc:	18c0      	addlt	r0, r0, r3
 80081de:	4770      	bx	lr

080081e0 <_init>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

080081ec <_fini>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr
