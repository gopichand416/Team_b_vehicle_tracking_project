
gps_6m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000068  080058c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  080058c8  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba3b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dde  00000000  00000000  0002bb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b1  00000000  00000000  0002e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002680e  00000000  00000000  0002eac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c48e  00000000  00000000  000552cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e957a  00000000  00000000  0006175d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003354  00000000  00000000  0014acd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014e02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005670 	.word	0x08005670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005670 	.word	0x08005670

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
/* USER CODE BEGIN Includes */
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int _write(int file,char *ptr,int len)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
    int i=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e009      	b.n	80005f4 <_write+0x2a>
      ITM_SendChar((*ptr++));
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	60ba      	str	r2, [r7, #8]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffc7 	bl	800057c <ITM_SendChar>
    for(i=0;i<len;i++)
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	dbf1      	blt.n	80005e0 <_write+0x16>
    return len;
 80005fc:	687b      	ldr	r3, [r7, #4]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fba1 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f82b 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8c9 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f000 f8a9 	bl	8000770 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f877 	bl	8000710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,(uint8_t *)Rxdata,700);
 8000622:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <main+0x58>)
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x5c>)
 800062a:	f002 fc87 	bl	8002f3c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */
  int count  = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%d\n",count);
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <main+0x60>)
 8000636:	f003 fc2f 	bl	8003e98 <iprintf>
	  get_location();
 800063a:	f000 f901 	bl	8000840 <get_location>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800063e:	2120      	movs	r1, #32
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f001 f8f2 	bl	800182c <HAL_GPIO_TogglePin>
	  printf("%d\n",count++);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <main+0x60>)
 8000652:	f003 fc21 	bl	8003e98 <iprintf>
	  HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 fbf7 	bl	8000e4c <HAL_Delay>
	  printf("%d\n",count);
 800065e:	e7e8      	b.n	8000632 <main+0x2a>
 8000660:	20000154 	.word	0x20000154
 8000664:	20000084 	.word	0x20000084
 8000668:	08005688 	.word	0x08005688

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fd80 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000692:	f001 f8f3 	bl	800187c <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800069c:	f000 f9ae 	bl	80009fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ba:	230a      	movs	r3, #10
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f92a 	bl	8001928 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006da:	f000 f98f 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fcf2 	bl	80020e0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000702:	f000 f97b 	bl	80009fc <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	; 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART1_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART1_UART_Init+0x58>)
 800071c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART1_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART1_UART_Init+0x58>)
 8000754:	f002 fba4 	bl	8002ea0 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f94d 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000084 	.word	0x20000084
 800076c:	40013800 	.word	0x40013800

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_DMA_Init+0x38>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <MX_DMA_Init+0x38>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6493      	str	r3, [r2, #72]	; 0x48
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_DMA_Init+0x38>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	200f      	movs	r0, #15
 8000794:	f000 fc59 	bl	800104a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000798:	200f      	movs	r0, #15
 800079a:	f000 fc72 	bl	8001082 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_GPIO_Init+0x90>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <MX_GPIO_Init+0x90>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_GPIO_Init+0x90>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0x90>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0x90>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0x90>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_GPIO_Init+0x90>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <MX_GPIO_Init+0x90>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_GPIO_Init+0x90>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f000 fff3 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000816:	2320      	movs	r3, #32
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fe3a 	bl	80014a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <get_location>:
	Flag=1;
}


void get_location(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af02      	add	r7, sp, #8
	if(Flag ==1)
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <get_location+0xcc>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d15b      	bne.n	8000906 <get_location+0xc6>
	{
		Msgindex =0;
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <get_location+0xd0>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
		strcpy(Txdata,(char*)(Rxdata));
 8000854:	492f      	ldr	r1, [pc, #188]	; (8000914 <get_location+0xd4>)
 8000856:	4830      	ldr	r0, [pc, #192]	; (8000918 <get_location+0xd8>)
 8000858:	f003 fd22 	bl	80042a0 <strcpy>
		printf("%s\n",Rxdata);
 800085c:	482d      	ldr	r0, [pc, #180]	; (8000914 <get_location+0xd4>)
 800085e:	f003 fb81 	bl	8003f64 <puts>
		ptr=strstr(Txdata,"GPRMC");
 8000862:	492e      	ldr	r1, [pc, #184]	; (800091c <get_location+0xdc>)
 8000864:	482c      	ldr	r0, [pc, #176]	; (8000918 <get_location+0xd8>)
 8000866:	f003 fc93 	bl	8004190 <strstr>
 800086a:	4603      	mov	r3, r0
 800086c:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <get_location+0xe0>)
 800086e:	6013      	str	r3, [r2, #0]
		if(*ptr=='G')
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <get_location+0xe0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b47      	cmp	r3, #71	; 0x47
 8000878:	d13f      	bne.n	80008fa <get_location+0xba>
		{
			while(1)
			{
				GPS_Payload[Msgindex]=*ptr;
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <get_location+0xe0>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <get_location+0xd0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	7811      	ldrb	r1, [r2, #0]
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <get_location+0xe4>)
 8000886:	54d1      	strb	r1, [r2, r3]
				Msgindex++;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <get_location+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <get_location+0xd0>)
 8000890:	6013      	str	r3, [r2, #0]
				*ptr = *(ptr+Msgindex);
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <get_location+0xe0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <get_location+0xd0>)
 8000898:	6812      	ldr	r2, [r2, #0]
 800089a:	441a      	add	r2, r3
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <get_location+0xe0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	701a      	strb	r2, [r3, #0]

				if(*ptr == '\n')
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <get_location+0xe0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	d1e5      	bne.n	800087a <get_location+0x3a>
				{
					GPS_Payload[Msgindex]='\0';
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <get_location+0xd0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <get_location+0xe4>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	54d1      	strb	r1, [r2, r3]
					break;
 80008b8:	bf00      	nop
				}
			}
			sscanf(GPS_Payload,"GPRMC,%f,A,%f,N,%f,",&time,&Latitude,&Longtitude);
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <get_location+0xe8>)
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <get_location+0xec>)
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <get_location+0xf0>)
 80008c2:	491c      	ldr	r1, [pc, #112]	; (8000934 <get_location+0xf4>)
 80008c4:	4817      	ldr	r0, [pc, #92]	; (8000924 <get_location+0xe4>)
 80008c6:	f003 fb55 	bl	8003f74 <siscanf>
			Format_data(time, Latitude, Longtitude);
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <get_location+0xf0>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <get_location+0xec>)
 80008d2:	ed93 7a00 	vldr	s14, [r3]
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <get_location+0xe8>)
 80008d8:	edd3 6a00 	vldr	s13, [r3]
 80008dc:	eeb0 1a66 	vmov.f32	s2, s13
 80008e0:	eef0 0a47 	vmov.f32	s1, s14
 80008e4:	eeb0 0a67 	vmov.f32	s0, s15
 80008e8:	f000 f826 	bl	8000938 <Format_data>
			HAL_Delay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 faad 	bl	8000e4c <HAL_Delay>
			Flag=0;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <get_location+0xcc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]

		}
		else
			memset(Rxdata,0,sizeof(Rxdata));
	}
}
 80008f8:	e005      	b.n	8000906 <get_location+0xc6>
			memset(Rxdata,0,sizeof(Rxdata));
 80008fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80008fe:	2100      	movs	r1, #0
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <get_location+0xd4>)
 8000902:	f003 fc3d 	bl	8004180 <memset>
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000798 	.word	0x20000798
 8000910:	2000079c 	.word	0x2000079c
 8000914:	20000154 	.word	0x20000154
 8000918:	20000444 	.word	0x20000444
 800091c:	0800568c 	.word	0x0800568c
 8000920:	200007a0 	.word	0x200007a0
 8000924:	20000734 	.word	0x20000734
 8000928:	200007ac 	.word	0x200007ac
 800092c:	200007a8 	.word	0x200007a8
 8000930:	200007a4 	.word	0x200007a4
 8000934:	08005694 	.word	0x08005694

08000938 <Format_data>:


void Format_data(float Time ,float Lat , float Long)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	; 0x78
 800093c:	af00      	add	r7, sp, #0
 800093e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000942:	edc7 0a02 	vstr	s1, [r7, #8]
 8000946:	ed87 1a01 	vstr	s2, [r7, #4]
	char Data[100];
	Hours = (int)Time/10000;
 800094a:	edd7 7a03 	vldr	s15, [r7, #12]
 800094e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000952:	ee17 1a90 	vmov	r1, s15
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <Format_data+0xac>)
 8000958:	fb83 2301 	smull	r2, r3, r3, r1
 800095c:	131a      	asrs	r2, r3, #12
 800095e:	17cb      	asrs	r3, r1, #31
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <Format_data+0xb0>)
 8000964:	6013      	str	r3, [r2, #0]
	Min   = (int)(Time -(Hours * 10000))/100;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <Format_data+0xb0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f242 7210 	movw	r2, #10000	; 0x2710
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	ed97 7a03 	vldr	s14, [r7, #12]
 800097e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000986:	ee17 1a90 	vmov	r1, s15
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <Format_data+0xb4>)
 800098c:	fb83 2301 	smull	r2, r3, r3, r1
 8000990:	115a      	asrs	r2, r3, #5
 8000992:	17cb      	asrs	r3, r1, #31
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <Format_data+0xb8>)
 8000998:	6013      	str	r3, [r2, #0]
	Sec   = (int)(Time -((Hours * 10000)+(Min * 100)));
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <Format_data+0xb0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f242 7210 	movw	r2, #10000	; 0x2710
 80009a2:	fb03 f202 	mul.w	r2, r3, r2
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <Format_data+0xb8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2164      	movs	r1, #100	; 0x64
 80009ac:	fb01 f303 	mul.w	r3, r1, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80009be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009c6:	ee17 2a90 	vmov	r2, s15
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <Format_data+0xbc>)
 80009cc:	601a      	str	r2, [r3, #0]
	printf("%s",Data);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <Format_data+0xc0>)
 80009d6:	f003 fa5f 	bl	8003e98 <iprintf>
}
 80009da:	bf00      	nop
 80009dc:	3778      	adds	r7, #120	; 0x78
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	68db8bad 	.word	0x68db8bad
 80009e8:	200007b0 	.word	0x200007b0
 80009ec:	51eb851f 	.word	0x51eb851f
 80009f0:	200007b4 	.word	0x200007b4
 80009f4:	200007b8 	.word	0x200007b8
 80009f8:	080056a8 	.word	0x080056a8

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_MspInit+0x44>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x44>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6593      	str	r3, [r2, #88]	; 0x58
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ac      	sub	sp, #176	; 0xb0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2288      	movs	r2, #136	; 0x88
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 fb85 	bl	8004180 <memset>
  if(huart->Instance==USART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a36      	ldr	r2, [pc, #216]	; (8000b54 <HAL_UART_MspInit+0x104>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d165      	bne.n	8000b4c <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fd4b 	bl	8002528 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff ffb0 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_UART_MspInit+0x108>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa0:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <HAL_UART_MspInit+0x108>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <HAL_UART_MspInit+0x108>)
 8000aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <HAL_UART_MspInit+0x108>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <HAL_UART_MspInit+0x108>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_UART_MspInit+0x108>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000acc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f000 fcd7 	bl	80014a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <HAL_UART_MspInit+0x110>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b26:	2220      	movs	r2, #32
 8000b28:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b32:	f000 fac1 	bl	80010b8 <HAL_DMA_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000b3c:	f7ff ff5e 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b44:	675a      	str	r2, [r3, #116]	; 0x74
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_UART_MspInit+0x10c>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	37b0      	adds	r7, #176	; 0xb0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40013800 	.word	0x40013800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	2000010c 	.word	0x2000010c
 8000b60:	40020058 	.word	0x40020058

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f92c 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <DMA1_Channel5_IRQHandler+0x10>)
 8000bbe:	f000 fb93 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000010c 	.word	0x2000010c

08000bcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bde:	f3af 8000 	nop.w
 8000be2:	4601      	mov	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
  }

  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f003 fad2 	bl	8004248 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20018000 	.word	0x20018000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	200007bc 	.word	0x200007bc
 8000cd8:	20000910 	.word	0x20000910

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f003 fa91 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fc69 	bl	8000608 <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d44:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 8000d48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d4c:	20000910 	.word	0x20000910

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_Init+0x3c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_Init+0x3c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f962 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f80f 	bl	8000d94 <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f7ff fe41 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_InitTick+0x70>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f96d 	bl	800109e <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d809      	bhi.n	8000de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f937 	bl	800104a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0x74>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200007c0 	.word	0x200007c0

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200007c0 	.word	0x200007c0

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e098      	b.n	80011fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <HAL_DMA_Init+0x150>)
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d80f      	bhi.n	80010f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <HAL_DMA_Init+0x154>)
 80010de:	4413      	add	r3, r2
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_DMA_Init+0x158>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a48      	ldr	r2, [pc, #288]	; (8001214 <HAL_DMA_Init+0x15c>)
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
 80010f4:	e00e      	b.n	8001114 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b46      	ldr	r3, [pc, #280]	; (8001218 <HAL_DMA_Init+0x160>)
 80010fe:	4413      	add	r3, r2
 8001100:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_DMA_Init+0x158>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	009a      	lsls	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a42      	ldr	r2, [pc, #264]	; (800121c <HAL_DMA_Init+0x164>)
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800112a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800112e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800116e:	d039      	beq.n	80011e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_DMA_Init+0x15c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11a      	bne.n	80011b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <HAL_DMA_Init+0x168>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f003 031c 	and.w	r3, r3, #28
 8001186:	210f      	movs	r1, #15
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	4924      	ldr	r1, [pc, #144]	; (8001220 <HAL_DMA_Init+0x168>)
 8001190:	4013      	ands	r3, r2
 8001192:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_DMA_Init+0x168>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 031c 	and.w	r3, r3, #28
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	491d      	ldr	r1, [pc, #116]	; (8001220 <HAL_DMA_Init+0x168>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
 80011ae:	e019      	b.n	80011e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_DMA_Init+0x16c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f003 031c 	and.w	r3, r3, #28
 80011bc:	210f      	movs	r1, #15
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4917      	ldr	r1, [pc, #92]	; (8001224 <HAL_DMA_Init+0x16c>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_DMA_Init+0x16c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6859      	ldr	r1, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f003 031c 	and.w	r3, r3, #28
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	4911      	ldr	r1, [pc, #68]	; (8001224 <HAL_DMA_Init+0x16c>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40020407 	.word	0x40020407
 800120c:	bffdfff8 	.word	0xbffdfff8
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	40020000 	.word	0x40020000
 8001218:	bffdfbf8 	.word	0xbffdfbf8
 800121c:	40020400 	.word	0x40020400
 8001220:	400200a8 	.word	0x400200a8
 8001224:	400204a8 	.word	0x400204a8

08001228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_DMA_Start_IT+0x20>
 8001244:	2302      	movs	r3, #2
 8001246:	e04b      	b.n	80012e0 <HAL_DMA_Start_IT+0xb8>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d13a      	bne.n	80012d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2202      	movs	r2, #2
 8001260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f8e0 	bl	8001446 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 020e 	orr.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e00f      	b.n	80012c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0204 	bic.w	r2, r2, #4
 80012ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 020a 	orr.w	r2, r2, #10
 80012be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e005      	b.n	80012de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012da:	2302      	movs	r3, #2
 80012dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012de:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f003 031c 	and.w	r3, r3, #28
 8001308:	2204      	movs	r2, #4
 800130a:	409a      	lsls	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d026      	beq.n	8001362 <HAL_DMA_IRQHandler+0x7a>
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d021      	beq.n	8001362 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0204 	bic.w	r2, r2, #4
 800133a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 021c 	and.w	r2, r3, #28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2104      	movs	r1, #4
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	2b00      	cmp	r3, #0
 8001356:	d071      	beq.n	800143c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001360:	e06c      	b.n	800143c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 031c 	and.w	r3, r3, #28
 800136a:	2202      	movs	r2, #2
 800136c:	409a      	lsls	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d02e      	beq.n	80013d4 <HAL_DMA_IRQHandler+0xec>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d029      	beq.n	80013d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10b      	bne.n	80013a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 020a 	bic.w	r2, r2, #10
 800139c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 021c 	and.w	r2, r3, #28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2102      	movs	r1, #2
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d038      	beq.n	800143c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013d2:	e033      	b.n	800143c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f003 031c 	and.w	r3, r3, #28
 80013dc:	2208      	movs	r2, #8
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d02a      	beq.n	800143e <HAL_DMA_IRQHandler+0x156>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d025      	beq.n	800143e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 020e 	bic.w	r2, r2, #14
 8001400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 021c 	and.w	r2, r3, #28
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2101      	movs	r1, #1
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800143c:	bf00      	nop
 800143e:	bf00      	nop
}
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f003 021c 	and.w	r2, r3, #28
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d108      	bne.n	800148a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001488:	e007      	b.n	800149a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	60da      	str	r2, [r3, #12]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e17f      	b.n	80017b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8171 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <HAL_GPIO_Init+0x40>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d130      	bne.n	800154a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0201 	and.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b03      	cmp	r3, #3
 8001554:	d118      	bne.n	8001588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80ac 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_GPIO_Init+0x330>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <HAL_GPIO_Init+0x330>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_GPIO_Init+0x330>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001672:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <HAL_GPIO_Init+0x334>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x242>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_GPIO_Init+0x338>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x23e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_GPIO_Init+0x33c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x23a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x340>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x236>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x344>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x232>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x348>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x34c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x22a>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_GPIO_Init+0x334>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_GPIO_Init+0x350>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <HAL_GPIO_Init+0x350>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_GPIO_Init+0x350>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_GPIO_Init+0x350>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae78 	bne.w	80014b8 <HAL_GPIO_Init+0x10>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000800 	.word	0x48000800
 80017e8:	48000c00 	.word	0x48000c00
 80017ec:	48001000 	.word	0x48001000
 80017f0:	48001400 	.word	0x48001400
 80017f4:	48001800 	.word	0x48001800
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001818:	e002      	b.n	8001820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43d9      	mvns	r1, r3
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	400b      	ands	r3, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_PWREx_GetVoltageRange+0x18>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40007000 	.word	0x40007000

0800187c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188a:	d130      	bne.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001898:	d038      	beq.n	800190c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2232      	movs	r2, #50	; 0x32
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0c9b      	lsrs	r3, r3, #18
 80018bc:	3301      	adds	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	e002      	b.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d4:	d102      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f2      	bne.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e8:	d110      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e00f      	b.n	800190e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fa:	d007      	beq.n	800190c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000
 8001920:	20000000 	.word	0x20000000
 8001924:	431bde83 	.word	0x431bde83

08001928 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e3ca      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193a:	4b97      	ldr	r3, [pc, #604]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001944:	4b94      	ldr	r3, [pc, #592]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80e4 	beq.w	8001b24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <HAL_RCC_OscConfig+0x4a>
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	f040 808b 	bne.w	8001a80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	f040 8087 	bne.w	8001a80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001972:	4b89      	ldr	r3, [pc, #548]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x62>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e3a2      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1a      	ldr	r2, [r3, #32]
 800198e:	4b82      	ldr	r3, [pc, #520]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_RCC_OscConfig+0x7c>
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_OscConfig+0x88>
 80019a4:	4b7c      	ldr	r3, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d223      	bcs.n	80019fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fd55 	bl	8002468 <RCC_SetFlashLatencyFromMSIRange>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e383      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c8:	4b73      	ldr	r3, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a72      	ldr	r2, [pc, #456]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	496d      	ldr	r1, [pc, #436]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e6:	4b6c      	ldr	r3, [pc, #432]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	4968      	ldr	r1, [pc, #416]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
 80019fa:	e025      	b.n	8001a48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4960      	ldr	r1, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	495b      	ldr	r1, [pc, #364]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fd15 	bl	8002468 <RCC_SetFlashLatencyFromMSIRange>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e343      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a48:	f000 fc4a 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	4950      	ldr	r1, [pc, #320]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <HAL_RCC_OscConfig+0x278>)
 8001a66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a68:	4b4e      	ldr	r3, [pc, #312]	; (8001ba4 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f991 	bl	8000d94 <HAL_InitTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d052      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	e327      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d032      	beq.n	8001aee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a94:	f7ff f9ce 	bl	8000e34 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f9ca 	bl	8000e34 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e310      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4931      	ldr	r1, [pc, #196]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	492c      	ldr	r1, [pc, #176]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e01a      	b.n	8001b24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001afa:	f7ff f99b 	bl	8000e34 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b02:	f7ff f997 	bl	8000e34 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e2dd      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x1da>
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d074      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x21a>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d10e      	bne.n	8001b5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d10b      	bne.n	8001b5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d064      	beq.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d160      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e2ba      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x24a>
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e026      	b.n	8001bc0 <HAL_RCC_OscConfig+0x298>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7a:	d115      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x280>
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a02      	ldr	r2, [pc, #8]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x298>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	080056b8 	.word	0x080056b8
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	4ba0      	ldr	r3, [pc, #640]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a9f      	ldr	r2, [pc, #636]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b9d      	ldr	r3, [pc, #628]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a9c      	ldr	r2, [pc, #624]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f934 	bl	8000e34 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f930 	bl	8000e34 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e276      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2a8>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f920 	bl	8000e34 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f91c 	bl	8000e34 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e262      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2d0>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d060      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x310>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d116      	bne.n	8001c66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c38:	4b7c      	ldr	r3, [pc, #496]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x328>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e23f      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b76      	ldr	r3, [pc, #472]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	4973      	ldr	r1, [pc, #460]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	e040      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d023      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6e:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f8db 	bl	8000e34 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff f8d7 	bl	8000e34 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e21d      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c94:	4b65      	ldr	r3, [pc, #404]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	495f      	ldr	r1, [pc, #380]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e018      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a5c      	ldr	r2, [pc, #368]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f8b7 	bl	8000e34 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff f8b3 	bl	8000e34 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1f9      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f892 	bl	8000e34 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f88e 	bl	8000e34 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1d4      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ef      	beq.n	8001d14 <HAL_RCC_OscConfig+0x3ec>
 8001d34:	e01b      	b.n	8001d6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3c:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d46:	f7ff f875 	bl	8000e34 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f871 	bl	8000e34 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1b7      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ef      	bne.n	8001d4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a6 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	; 0x58
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da4:	2301      	movs	r3, #1
 8001da6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_OscConfig+0x508>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d118      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCC_OscConfig+0x508>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <HAL_RCC_OscConfig+0x508>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f838 	bl	8000e34 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7ff f834 	bl	8000e34 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e17a      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_RCC_OscConfig+0x508>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d108      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4d8>
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dfe:	e029      	b.n	8001e54 <HAL_RCC_OscConfig+0x52c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d115      	bne.n	8001e34 <HAL_RCC_OscConfig+0x50c>
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <HAL_RCC_OscConfig+0x504>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x52c>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	4b9c      	ldr	r3, [pc, #624]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	4a9b      	ldr	r2, [pc, #620]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e44:	4b98      	ldr	r3, [pc, #608]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a97      	ldr	r2, [pc, #604]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d016      	beq.n	8001e8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7fe ffea 	bl	8000e34 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7fe ffe6 	bl	8000e34 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e12a      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ed      	beq.n	8001e64 <HAL_RCC_OscConfig+0x53c>
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7fe ffd3 	bl	8000e34 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe ffcf 	bl	8000e34 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e113      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea8:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ed      	bne.n	8001e92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb6:	7ffb      	ldrb	r3, [r7, #31]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebc:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	4a79      	ldr	r2, [pc, #484]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80fe 	beq.w	80020ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	f040 80d0 	bne.w	800207c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001edc:	4b72      	ldr	r3, [pc, #456]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d130      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	3b01      	subs	r3, #1
 8001efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d127      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d11f      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f1c:	2a07      	cmp	r2, #7
 8001f1e:	bf14      	ite	ne
 8001f20:	2201      	movne	r2, #1
 8001f22:	2200      	moveq	r2, #0
 8001f24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d113      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d06e      	beq.n	8002030 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d069      	beq.n	800202c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0ad      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f80:	f7fe ff58 	bl	8000e34 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe ff54 	bl	8000e34 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e09a      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCC_OscConfig+0x784>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fb6:	3a01      	subs	r2, #1
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fc0:	0212      	lsls	r2, r2, #8
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fc8:	0852      	lsrs	r2, r2, #1
 8001fca:	3a01      	subs	r2, #1
 8001fcc:	0552      	lsls	r2, r2, #21
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fd4:	0852      	lsrs	r2, r2, #1
 8001fd6:	3a01      	subs	r2, #1
 8001fd8:	0652      	lsls	r2, r2, #25
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fe0:	0912      	lsrs	r2, r2, #4
 8001fe2:	0452      	lsls	r2, r2, #17
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	4930      	ldr	r1, [pc, #192]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002004:	f7fe ff16 	bl	8000e34 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe ff12 	bl	8000e34 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e058      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202a:	e050      	b.n	80020ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e04f      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d148      	bne.n	80020ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002054:	f7fe feee 	bl	8000e34 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe feea 	bl	8000e34 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e030      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x734>
 800207a:	e028      	b.n	80020ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d023      	beq.n	80020ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x780>)
 8002088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7fe fed1 	bl	8000e34 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	e00c      	b.n	80020b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe fecd 	bl	8000e34 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d905      	bls.n	80020b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_OscConfig+0x7b0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x7b0>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4905      	ldr	r1, [pc, #20]	; (80020d8 <HAL_RCC_OscConfig+0x7b0>)
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_OscConfig+0x7b4>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
 80020c8:	e001      	b.n	80020ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	feeefffc 	.word	0xfeeefffc

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0e7      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b75      	ldr	r3, [pc, #468]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b72      	ldr	r3, [pc, #456]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	4970      	ldr	r1, [pc, #448]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b6e      	ldr	r3, [pc, #440]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0cf      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4960      	ldr	r1, [pc, #384]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d04c      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d121      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0a6      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e09a      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002196:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e08e      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e086      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4943      	ldr	r1, [pc, #268]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fe34 	bl	8000e34 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fe30 	bl	8000e34 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e06e      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d010      	beq.n	8002226 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	429a      	cmp	r2, r3
 8002212:	d208      	bcs.n	8002226 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	492b      	ldr	r1, [pc, #172]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d210      	bcs.n	8002256 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 0207 	bic.w	r2, r3, #7
 800223c:	4923      	ldr	r1, [pc, #140]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_ClockConfig+0x1ec>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d001      	beq.n	8002256 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e036      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4918      	ldr	r1, [pc, #96]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4910      	ldr	r1, [pc, #64]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002294:	f000 f824 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	490b      	ldr	r1, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x1f4>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1fc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fd6b 	bl	8000d94 <HAL_InitTick>
 80022be:	4603      	mov	r3, r0
 80022c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80022c2:	7afb      	ldrb	r3, [r7, #11]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	080056b8 	.word	0x080056b8
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x34>
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d121      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d11e      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002314:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e005      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002344:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d102      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	e004      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d101      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002366:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d134      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0xa6>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d003      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0xac>
 8002384:	e005      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002388:	617b      	str	r3, [r7, #20]
      break;
 800238a:	e005      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800238e:	617b      	str	r3, [r7, #20]
      break;
 8002390:	e002      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	617b      	str	r3, [r7, #20]
      break;
 8002396:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	3301      	adds	r3, #1
 80023a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	fb03 f202 	mul.w	r2, r3, r2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	0e5b      	lsrs	r3, r3, #25
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	3301      	adds	r3, #1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023d8:	69bb      	ldr	r3, [r7, #24]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	080056d0 	.word	0x080056d0
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4904      	ldr	r1, [pc, #16]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	080056c8 	.word	0x080056c8

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002440:	f7ff ffda 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	080056c8 	.word	0x080056c8

08002468 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002480:	f7ff f9ee 	bl	8001860 <HAL_PWREx_GetVoltageRange>
 8002484:	6178      	str	r0, [r7, #20]
 8002486:	e014      	b.n	80024b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	4a24      	ldr	r2, [pc, #144]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002492:	6593      	str	r3, [r2, #88]	; 0x58
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024a0:	f7ff f9de 	bl	8001860 <HAL_PWREx_GetVoltageRange>
 80024a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b8:	d10b      	bne.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d919      	bls.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2ba0      	cmp	r3, #160	; 0xa0
 80024c4:	d902      	bls.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c6:	2302      	movs	r3, #2
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	e013      	b.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024cc:	2301      	movs	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e010      	b.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d902      	bls.n	80024de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024d8:	2303      	movs	r3, #3
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e00a      	b.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b80      	cmp	r3, #128	; 0x80
 80024e2:	d102      	bne.n	80024ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e4:	2302      	movs	r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	e004      	b.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b70      	cmp	r3, #112	; 0x70
 80024ee:	d101      	bne.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f0:	2301      	movs	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 0207 	bic.w	r2, r3, #7
 80024fc:	4909      	ldr	r1, [pc, #36]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002530:	2300      	movs	r3, #0
 8002532:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002534:	2300      	movs	r3, #0
 8002536:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002540:	2b00      	cmp	r3, #0
 8002542:	d041      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002548:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800254c:	d02a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800254e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002552:	d824      	bhi.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800255a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800255e:	d81e      	bhi.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002568:	d010      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800256a:	e018      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800256c:	4b86      	ldr	r3, [pc, #536]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a85      	ldr	r2, [pc, #532]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002578:	e015      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fabb 	bl	8002afc <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800258a:	e00c      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3320      	adds	r3, #32
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fba6 	bl	8002ce4 <RCCEx_PLLSAI2_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	74fb      	strb	r3, [r7, #19]
      break;
 80025a2:	e000      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ba:	4973      	ldr	r1, [pc, #460]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025c2:	e001      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d041      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025dc:	d02a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025e2:	d824      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ee:	d81e      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d010      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025fa:	e018      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025fc:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002608:	e015      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fa73 	bl	8002afc <RCCEx_PLLSAI1_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800261a:	e00c      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3320      	adds	r3, #32
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fb5e 	bl	8002ce4 <RCCEx_PLLSAI2_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800262c:	e003      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	74fb      	strb	r3, [r7, #19]
      break;
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800263c:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800264a:	494f      	ldr	r1, [pc, #316]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002652:	e001      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a0 	beq.w	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	4a40      	ldr	r2, [pc, #256]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268a:	6593      	str	r3, [r2, #88]	; 0x58
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002698:	2301      	movs	r3, #1
 800269a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fbc4 	bl	8000e34 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ae:	e009      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7fe fbc0 	bl	8000e34 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	74fb      	strb	r3, [r7, #19]
        break;
 80026c2:	e005      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d15c      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01f      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d019      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fb7f 	bl	8000e34 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002738:	e00b      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fb7b 	bl	8000e34 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d902      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	74fb      	strb	r3, [r7, #19]
            break;
 8002750:	e006      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ec      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002776:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800277e:	e009      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
 8002784:	e006      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002794:	7c7b      	ldrb	r3, [r7, #17]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4a9d      	ldr	r2, [pc, #628]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b2:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f023 0203 	bic.w	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	4994      	ldr	r1, [pc, #592]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d4:	4b8f      	ldr	r3, [pc, #572]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 020c 	bic.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	498c      	ldr	r1, [pc, #560]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f6:	4b87      	ldr	r3, [pc, #540]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4983      	ldr	r1, [pc, #524]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002818:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	497b      	ldr	r1, [pc, #492]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	4972      	ldr	r1, [pc, #456]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800285c:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	496a      	ldr	r1, [pc, #424]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	4961      	ldr	r1, [pc, #388]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028a0:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	4959      	ldr	r1, [pc, #356]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d0:	4950      	ldr	r1, [pc, #320]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	4948      	ldr	r1, [pc, #288]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	493f      	ldr	r1, [pc, #252]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d028      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002928:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002936:	4937      	ldr	r1, [pc, #220]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002946:	d106      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002948:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002952:	60d3      	str	r3, [r2, #12]
 8002954:	e011      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295e:	d10c      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f8c8 	bl	8002afc <RCCEx_PLLSAI1_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	491f      	ldr	r1, [pc, #124]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b0:	60d3      	str	r3, [r2, #12]
 80029b2:	e011      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f899 	bl	8002afc <RCCEx_PLLSAI1_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02b      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a02:	d109      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a02      	ldr	r2, [pc, #8]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0e:	60d3      	str	r3, [r2, #12]
 8002a10:	e014      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f867 	bl	8002afc <RCCEx_PLLSAI1_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02f      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a56:	4928      	ldr	r1, [pc, #160]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f844 	bl	8002afc <RCCEx_PLLSAI1_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d014      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	74bb      	strb	r3, [r7, #18]
 8002a82:	e011      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3320      	adds	r3, #32
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f925 	bl	8002ce4 <RCCEx_PLLSAI2_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac2:	490d      	ldr	r1, [pc, #52]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae6:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aee:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b0a:	4b75      	ldr	r3, [pc, #468]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d10d      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
       ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d047      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e044      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d018      	beq.n	8002b82 <RCCEx_PLLSAI1_Config+0x86>
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d825      	bhi.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d002      	beq.n	8002b5e <RCCEx_PLLSAI1_Config+0x62>
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d009      	beq.n	8002b70 <RCCEx_PLLSAI1_Config+0x74>
 8002b5c:	e020      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5e:	4b60      	ldr	r3, [pc, #384]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11d      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e01a      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b70:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d116      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b80:	e013      	b.n	8002baa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b82:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b9e:	e006      	b.n	8002bae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba4:	e004      	b.n	8002bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	4944      	ldr	r1, [pc, #272]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d17d      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe f926 	bl	8000e34 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bea:	e009      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bec:	f7fe f922 	bl	8000e34 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bfe:	e005      	b.n	8002c0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ef      	bne.n	8002bec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d160      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d111      	bne.n	8002c3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	0912      	lsrs	r2, r2, #4
 8002c30:	0452      	lsls	r2, r2, #17
 8002c32:	430a      	orrs	r2, r1
 8002c34:	492a      	ldr	r1, [pc, #168]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	610b      	str	r3, [r1, #16]
 8002c3a:	e027      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d112      	bne.n	8002c68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c42:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	0211      	lsls	r1, r2, #8
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6912      	ldr	r2, [r2, #16]
 8002c58:	0852      	lsrs	r2, r2, #1
 8002c5a:	3a01      	subs	r2, #1
 8002c5c:	0552      	lsls	r2, r2, #21
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	491f      	ldr	r1, [pc, #124]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	610b      	str	r3, [r1, #16]
 8002c66:	e011      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6952      	ldr	r2, [r2, #20]
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0652      	lsls	r2, r2, #25
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe f8cc 	bl	8000e34 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c9e:	e009      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ca0:	f7fe f8c8 	bl	8000e34 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d902      	bls.n	8002cb4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cb2:	e005      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ef      	beq.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d018      	beq.n	8002d30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d10d      	bne.n	8002d2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
       ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
       ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d047      	beq.n	8002dba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e044      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d018      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x86>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d825      	bhi.n	8002d88 <RCCEx_PLLSAI2_Config+0xa4>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d002      	beq.n	8002d46 <RCCEx_PLLSAI2_Config+0x62>
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d009      	beq.n	8002d58 <RCCEx_PLLSAI2_Config+0x74>
 8002d44:	e020      	b.n	8002d88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d46:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11d      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e01a      	b.n	8002d8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e013      	b.n	8002d92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d6a:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d86:	e006      	b.n	8002d96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e004      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	430b      	orrs	r3, r1
 8002db4:	4939      	ldr	r1, [pc, #228]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d167      	bne.n	8002e90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe f832 	bl	8000e34 <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd2:	e009      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd4:	f7fe f82e 	bl	8000e34 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	73fb      	strb	r3, [r7, #15]
        break;
 8002de6:	e005      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ef      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d14a      	bne.n	8002e90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d111      	bne.n	8002e24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	0211      	lsls	r1, r2, #8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	0912      	lsrs	r2, r2, #4
 8002e18:	0452      	lsls	r2, r2, #17
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	491f      	ldr	r1, [pc, #124]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	614b      	str	r3, [r1, #20]
 8002e22:	e011      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	0211      	lsls	r1, r2, #8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6912      	ldr	r2, [r2, #16]
 8002e3a:	0852      	lsrs	r2, r2, #1
 8002e3c:	3a01      	subs	r2, #1
 8002e3e:	0652      	lsls	r2, r2, #25
 8002e40:	430a      	orrs	r2, r1
 8002e42:	4916      	ldr	r1, [pc, #88]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fd ffee 	bl	8000e34 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e5a:	e009      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e5c:	f7fd ffea 	bl	8000e34 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e6e:	e005      	b.n	8002e7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4904      	ldr	r1, [pc, #16]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e040      	b.n	8002f34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fdc4 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fb56 	bl	8003598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f89b 	bl	8003028 <UART_SetConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e01b      	b.n	8002f34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fbd5 	bl	80036dc <UART_CheckIdleState>
 8002f32:	4603      	mov	r3, r0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d137      	bne.n	8002fc4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_UART_Receive_DMA+0x24>
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e030      	b.n	8002fc6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_UART_Receive_DMA+0x94>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01f      	beq.n	8002fb4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	69f9      	ldr	r1, [r7, #28]
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fc9e 	bl	80038fc <UART_Start_Receive_DMA>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3728      	adds	r7, #40	; 0x28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40008000 	.word	0x40008000

08002fd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4ba4      	ldr	r3, [pc, #656]	; (80032e8 <UART_SetConfig+0x2c0>)
 8003058:	4013      	ands	r3, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a99      	ldr	r2, [pc, #612]	; (80032ec <UART_SetConfig+0x2c4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	4313      	orrs	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <UART_SetConfig+0x2c8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d126      	bne.n	8003100 <UART_SetConfig+0xd8>
 80030b2:	4b90      	ldr	r3, [pc, #576]	; (80032f4 <UART_SetConfig+0x2cc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d81b      	bhi.n	80030f8 <UART_SetConfig+0xd0>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <UART_SetConfig+0xa0>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f1 	.word	0x080030f1
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e116      	b.n	800330e <UART_SetConfig+0x2e6>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e112      	b.n	800330e <UART_SetConfig+0x2e6>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e10e      	b.n	800330e <UART_SetConfig+0x2e6>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e10a      	b.n	800330e <UART_SetConfig+0x2e6>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e106      	b.n	800330e <UART_SetConfig+0x2e6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a7c      	ldr	r2, [pc, #496]	; (80032f8 <UART_SetConfig+0x2d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d138      	bne.n	800317c <UART_SetConfig+0x154>
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <UART_SetConfig+0x2cc>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d82d      	bhi.n	8003174 <UART_SetConfig+0x14c>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0xf8>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003155 	.word	0x08003155
 8003124:	08003175 	.word	0x08003175
 8003128:	08003175 	.word	0x08003175
 800312c:	08003175 	.word	0x08003175
 8003130:	08003165 	.word	0x08003165
 8003134:	08003175 	.word	0x08003175
 8003138:	08003175 	.word	0x08003175
 800313c:	08003175 	.word	0x08003175
 8003140:	0800315d 	.word	0x0800315d
 8003144:	08003175 	.word	0x08003175
 8003148:	08003175 	.word	0x08003175
 800314c:	08003175 	.word	0x08003175
 8003150:	0800316d 	.word	0x0800316d
 8003154:	2300      	movs	r3, #0
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315a:	e0d8      	b.n	800330e <UART_SetConfig+0x2e6>
 800315c:	2302      	movs	r3, #2
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e0d4      	b.n	800330e <UART_SetConfig+0x2e6>
 8003164:	2304      	movs	r3, #4
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e0d0      	b.n	800330e <UART_SetConfig+0x2e6>
 800316c:	2308      	movs	r3, #8
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	e0cc      	b.n	800330e <UART_SetConfig+0x2e6>
 8003174:	2310      	movs	r3, #16
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e0c8      	b.n	800330e <UART_SetConfig+0x2e6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <UART_SetConfig+0x2d4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d125      	bne.n	80031d2 <UART_SetConfig+0x1aa>
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d016      	beq.n	80031c2 <UART_SetConfig+0x19a>
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d818      	bhi.n	80031ca <UART_SetConfig+0x1a2>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d00a      	beq.n	80031b2 <UART_SetConfig+0x18a>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d814      	bhi.n	80031ca <UART_SetConfig+0x1a2>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <UART_SetConfig+0x182>
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d008      	beq.n	80031ba <UART_SetConfig+0x192>
 80031a8:	e00f      	b.n	80031ca <UART_SetConfig+0x1a2>
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b0:	e0ad      	b.n	800330e <UART_SetConfig+0x2e6>
 80031b2:	2302      	movs	r3, #2
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b8:	e0a9      	b.n	800330e <UART_SetConfig+0x2e6>
 80031ba:	2304      	movs	r3, #4
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c0:	e0a5      	b.n	800330e <UART_SetConfig+0x2e6>
 80031c2:	2308      	movs	r3, #8
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c8:	e0a1      	b.n	800330e <UART_SetConfig+0x2e6>
 80031ca:	2310      	movs	r3, #16
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d0:	e09d      	b.n	800330e <UART_SetConfig+0x2e6>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <UART_SetConfig+0x2d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <UART_SetConfig+0x200>
 80031dc:	4b45      	ldr	r3, [pc, #276]	; (80032f4 <UART_SetConfig+0x2cc>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031e6:	2bc0      	cmp	r3, #192	; 0xc0
 80031e8:	d016      	beq.n	8003218 <UART_SetConfig+0x1f0>
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d818      	bhi.n	8003220 <UART_SetConfig+0x1f8>
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d00a      	beq.n	8003208 <UART_SetConfig+0x1e0>
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d814      	bhi.n	8003220 <UART_SetConfig+0x1f8>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0x1d8>
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d008      	beq.n	8003210 <UART_SetConfig+0x1e8>
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x1f8>
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e082      	b.n	800330e <UART_SetConfig+0x2e6>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e07e      	b.n	800330e <UART_SetConfig+0x2e6>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e07a      	b.n	800330e <UART_SetConfig+0x2e6>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321e:	e076      	b.n	800330e <UART_SetConfig+0x2e6>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003226:	e072      	b.n	800330e <UART_SetConfig+0x2e6>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a35      	ldr	r2, [pc, #212]	; (8003304 <UART_SetConfig+0x2dc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12a      	bne.n	8003288 <UART_SetConfig+0x260>
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003240:	d01a      	beq.n	8003278 <UART_SetConfig+0x250>
 8003242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003246:	d81b      	bhi.n	8003280 <UART_SetConfig+0x258>
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	d00c      	beq.n	8003268 <UART_SetConfig+0x240>
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d815      	bhi.n	8003280 <UART_SetConfig+0x258>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x238>
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d008      	beq.n	8003270 <UART_SetConfig+0x248>
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x258>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e052      	b.n	800330e <UART_SetConfig+0x2e6>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e04e      	b.n	800330e <UART_SetConfig+0x2e6>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e04a      	b.n	800330e <UART_SetConfig+0x2e6>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e046      	b.n	800330e <UART_SetConfig+0x2e6>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e042      	b.n	800330e <UART_SetConfig+0x2e6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <UART_SetConfig+0x2c4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d13a      	bne.n	8003308 <UART_SetConfig+0x2e0>
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800329c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a0:	d01a      	beq.n	80032d8 <UART_SetConfig+0x2b0>
 80032a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a6:	d81b      	bhi.n	80032e0 <UART_SetConfig+0x2b8>
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ac:	d00c      	beq.n	80032c8 <UART_SetConfig+0x2a0>
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b2:	d815      	bhi.n	80032e0 <UART_SetConfig+0x2b8>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <UART_SetConfig+0x298>
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d008      	beq.n	80032d0 <UART_SetConfig+0x2a8>
 80032be:	e00f      	b.n	80032e0 <UART_SetConfig+0x2b8>
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e022      	b.n	800330e <UART_SetConfig+0x2e6>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e01e      	b.n	800330e <UART_SetConfig+0x2e6>
 80032d0:	2304      	movs	r3, #4
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d6:	e01a      	b.n	800330e <UART_SetConfig+0x2e6>
 80032d8:	2308      	movs	r3, #8
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e016      	b.n	800330e <UART_SetConfig+0x2e6>
 80032e0:	2310      	movs	r3, #16
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e012      	b.n	800330e <UART_SetConfig+0x2e6>
 80032e8:	efff69f3 	.word	0xefff69f3
 80032ec:	40008000 	.word	0x40008000
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40004400 	.word	0x40004400
 80032fc:	40004800 	.word	0x40004800
 8003300:	40004c00 	.word	0x40004c00
 8003304:	40005000 	.word	0x40005000
 8003308:	2310      	movs	r3, #16
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a9f      	ldr	r2, [pc, #636]	; (8003590 <UART_SetConfig+0x568>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d17a      	bne.n	800340e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800331c:	2b08      	cmp	r3, #8
 800331e:	d824      	bhi.n	800336a <UART_SetConfig+0x342>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <UART_SetConfig+0x300>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	0800334d 	.word	0x0800334d
 800332c:	0800336b 	.word	0x0800336b
 8003330:	08003355 	.word	0x08003355
 8003334:	0800336b 	.word	0x0800336b
 8003338:	0800335b 	.word	0x0800335b
 800333c:	0800336b 	.word	0x0800336b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800336b 	.word	0x0800336b
 8003348:	08003363 	.word	0x08003363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7ff f860 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003350:	61f8      	str	r0, [r7, #28]
        break;
 8003352:	e010      	b.n	8003376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003354:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <UART_SetConfig+0x56c>)
 8003356:	61fb      	str	r3, [r7, #28]
        break;
 8003358:	e00d      	b.n	8003376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7fe ffc1 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800335e:	61f8      	str	r0, [r7, #28]
        break;
 8003360:	e009      	b.n	8003376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	61fb      	str	r3, [r7, #28]
        break;
 8003368:	e005      	b.n	8003376 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80fb 	beq.w	8003574 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	429a      	cmp	r2, r3
 800338c:	d305      	bcc.n	800339a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d903      	bls.n	80033a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033a0:	e0e8      	b.n	8003574 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2200      	movs	r2, #0
 80033a6:	461c      	mov	r4, r3
 80033a8:	4615      	mov	r5, r2
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	022b      	lsls	r3, r5, #8
 80033b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033b8:	0222      	lsls	r2, r4, #8
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	6849      	ldr	r1, [r1, #4]
 80033be:	0849      	lsrs	r1, r1, #1
 80033c0:	2000      	movs	r0, #0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4681      	mov	r9, r0
 80033c6:	eb12 0a08 	adds.w	sl, r2, r8
 80033ca:	eb43 0b09 	adc.w	fp, r3, r9
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033dc:	4650      	mov	r0, sl
 80033de:	4659      	mov	r1, fp
 80033e0:	f7fc ff4e 	bl	8000280 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f2:	d308      	bcc.n	8003406 <UART_SetConfig+0x3de>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fa:	d204      	bcs.n	8003406 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e0b6      	b.n	8003574 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800340c:	e0b2      	b.n	8003574 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003416:	d15e      	bne.n	80034d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800341c:	2b08      	cmp	r3, #8
 800341e:	d828      	bhi.n	8003472 <UART_SetConfig+0x44a>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <UART_SetConfig+0x400>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800344d 	.word	0x0800344d
 800342c:	08003455 	.word	0x08003455
 8003430:	0800345d 	.word	0x0800345d
 8003434:	08003473 	.word	0x08003473
 8003438:	08003463 	.word	0x08003463
 800343c:	08003473 	.word	0x08003473
 8003440:	08003473 	.word	0x08003473
 8003444:	08003473 	.word	0x08003473
 8003448:	0800346b 	.word	0x0800346b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7fe ffe0 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003450:	61f8      	str	r0, [r7, #28]
        break;
 8003452:	e014      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7fe fff2 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8003458:	61f8      	str	r0, [r7, #28]
        break;
 800345a:	e010      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <UART_SetConfig+0x56c>)
 800345e:	61fb      	str	r3, [r7, #28]
        break;
 8003460:	e00d      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003462:	f7fe ff3d 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8003466:	61f8      	str	r0, [r7, #28]
        break;
 8003468:	e009      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e005      	b.n	800347e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800347c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d077      	beq.n	8003574 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005a      	lsls	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b0f      	cmp	r3, #15
 800349e:	d916      	bls.n	80034ce <UART_SetConfig+0x4a6>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a6:	d212      	bcs.n	80034ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	b29a      	uxth	r2, r3
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	8afa      	ldrh	r2, [r7, #22]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	e052      	b.n	8003574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034d4:	e04e      	b.n	8003574 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d827      	bhi.n	800352e <UART_SetConfig+0x506>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x4bc>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003519 	.word	0x08003519
 80034f0:	0800352f 	.word	0x0800352f
 80034f4:	0800351f 	.word	0x0800351f
 80034f8:	0800352f 	.word	0x0800352f
 80034fc:	0800352f 	.word	0x0800352f
 8003500:	0800352f 	.word	0x0800352f
 8003504:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7fe ff82 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 800350c:	61f8      	str	r0, [r7, #28]
        break;
 800350e:	e014      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7fe ff94 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8003514:	61f8      	str	r0, [r7, #28]
        break;
 8003516:	e010      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <UART_SetConfig+0x56c>)
 800351a:	61fb      	str	r3, [r7, #28]
        break;
 800351c:	e00d      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7fe fedf 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8003522:	61f8      	str	r0, [r7, #28]
        break;
 8003524:	e009      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	61fb      	str	r3, [r7, #28]
        break;
 800352c:	e005      	b.n	800353a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003538:	bf00      	nop
    }

    if (pclk != 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d019      	beq.n	8003574 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	085a      	lsrs	r2, r3, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	d909      	bls.n	800356e <UART_SetConfig+0x546>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d205      	bcs.n	800356e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	e002      	b.n	8003574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003580:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	40008000 	.word	0x40008000
 8003594:	00f42400 	.word	0x00f42400

08003598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01a      	beq.n	80036ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003696:	d10a      	bne.n	80036ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b098      	sub	sp, #96	; 0x60
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ec:	f7fd fba2 	bl	8000e34 <HAL_GetTick>
 80036f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d12e      	bne.n	800375e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f88c 	bl	800382c <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d021      	beq.n	800375e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372e:	653b      	str	r3, [r7, #80]	; 0x50
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
 800373a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800373e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e062      	b.n	8003824 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	d149      	bne.n	8003800 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f856 	bl	800382c <UART_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03c      	beq.n	8003800 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	623b      	str	r3, [r7, #32]
   return(result);
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
 80037a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e6      	bne.n	8003786 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037d8:	61fa      	str	r2, [r7, #28]
 80037da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	617b      	str	r3, [r7, #20]
   return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e5      	bne.n	80037b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e011      	b.n	8003824 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3758      	adds	r7, #88	; 0x58
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383c:	e049      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d045      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fd faf5 	bl	8000e34 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <UART_WaitOnFlagUntilTimeout+0x30>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e048      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d031      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b08      	cmp	r3, #8
 800387a:	d110      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2208      	movs	r2, #8
 8003882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f8ff 	bl	8003a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2208      	movs	r2, #8
 800388e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e029      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ac:	d111      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f8e5 	bl	8003a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00f      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d0a6      	beq.n	800383e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b096      	sub	sp, #88	; 0x58
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2222      	movs	r2, #34	; 0x22
 8003924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392c:	2b00      	cmp	r3, #0
 800392e:	d028      	beq.n	8003982 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	4a3e      	ldr	r2, [pc, #248]	; (8003a30 <UART_Start_Receive_DMA+0x134>)
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <UART_Start_Receive_DMA+0x138>)
 800393e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003944:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <UART_Start_Receive_DMA+0x13c>)
 8003946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	2200      	movs	r2, #0
 800394e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3324      	adds	r3, #36	; 0x24
 800395a:	4619      	mov	r1, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	461a      	mov	r2, r3
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	f7fd fc60 	bl	8001228 <HAL_DMA_Start_IT>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2210      	movs	r2, #16
 8003972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e051      	b.n	8003a26 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	657b      	str	r3, [r7, #84]	; 0x54
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e6      	bne.n	800398a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3308      	adds	r3, #8
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	653b      	str	r3, [r7, #80]	; 0x50
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3308      	adds	r3, #8
 80039da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039dc:	637a      	str	r2, [r7, #52]	; 0x34
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e5      	bne.n	80039bc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a10:	623a      	str	r2, [r7, #32]
 8003a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3758      	adds	r7, #88	; 0x58
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	08003b51 	.word	0x08003b51
 8003a34:	08003c7d 	.word	0x08003c7d
 8003a38:	08003cbb 	.word	0x08003cbb

08003a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003a7c:	bf00      	nop
 8003a7e:	3724      	adds	r7, #36	; 0x24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b095      	sub	sp, #84	; 0x54
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e5      	bne.n	8003ac2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d118      	bne.n	8003b30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f023 0310 	bic.w	r3, r3, #16
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e6      	bne.n	8003afe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b44:	bf00      	nop
 8003b46:	3754      	adds	r7, #84	; 0x54
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b09c      	sub	sp, #112	; 0x70
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d171      	bne.n	8003c50 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e5      	bne.n	8003ba6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c10:	2220      	movs	r2, #32
 8003c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d118      	bne.n	8003c50 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	2200      	movs	r2, #0
 8003c54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c64:	4619      	mov	r1, r3
 8003c66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c68:	f7ff f9d2 	bl	8003010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c6c:	e002      	b.n	8003c74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c70:	f7ff f9b0 	bl	8002fd4 <HAL_UART_RxCpltCallback>
}
 8003c74:	bf00      	nop
 8003c76:	3770      	adds	r7, #112	; 0x70
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d109      	bne.n	8003cac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff f9b3 	bl	8003010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003caa:	e002      	b.n	8003cb2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff f99b 	bl	8002fe8 <HAL_UART_RxHalfCpltCallback>
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d109      	bne.n	8003cf8 <UART_DMAError+0x3e>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b21      	cmp	r3, #33	; 0x21
 8003ce8:	d106      	bne.n	8003cf8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7ff fea2 	bl	8003a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d109      	bne.n	8003d1a <UART_DMAError+0x60>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b22      	cmp	r3, #34	; 0x22
 8003d0a:	d106      	bne.n	8003d1a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7ff feb7 	bl	8003a88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	f043 0210 	orr.w	r2, r3, #16
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff f966 	bl	8002ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <std>:
 8003d38:	2300      	movs	r3, #0
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d46:	6083      	str	r3, [r0, #8]
 8003d48:	8181      	strh	r1, [r0, #12]
 8003d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d4c:	81c2      	strh	r2, [r0, #14]
 8003d4e:	6183      	str	r3, [r0, #24]
 8003d50:	4619      	mov	r1, r3
 8003d52:	2208      	movs	r2, #8
 8003d54:	305c      	adds	r0, #92	; 0x5c
 8003d56:	f000 fa13 	bl	8004180 <memset>
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <std+0x38>)
 8003d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <std+0x3c>)
 8003d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <std+0x40>)
 8003d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <std+0x44>)
 8003d68:	6224      	str	r4, [r4, #32]
 8003d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	bf00      	nop
 8003d70:	08003fcd 	.word	0x08003fcd
 8003d74:	08003ff3 	.word	0x08003ff3
 8003d78:	0800402b 	.word	0x0800402b
 8003d7c:	0800404f 	.word	0x0800404f

08003d80 <stdio_exit_handler>:
 8003d80:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <stdio_exit_handler+0xc>)
 8003d82:	4903      	ldr	r1, [pc, #12]	; (8003d90 <stdio_exit_handler+0x10>)
 8003d84:	4803      	ldr	r0, [pc, #12]	; (8003d94 <stdio_exit_handler+0x14>)
 8003d86:	f000 b869 	b.w	8003e5c <_fwalk_sglue>
 8003d8a:	bf00      	nop
 8003d8c:	2000000c 	.word	0x2000000c
 8003d90:	08005195 	.word	0x08005195
 8003d94:	20000018 	.word	0x20000018

08003d98 <cleanup_stdio>:
 8003d98:	6841      	ldr	r1, [r0, #4]
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <cleanup_stdio+0x34>)
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	b510      	push	{r4, lr}
 8003da0:	4604      	mov	r4, r0
 8003da2:	d001      	beq.n	8003da8 <cleanup_stdio+0x10>
 8003da4:	f001 f9f6 	bl	8005194 <_fflush_r>
 8003da8:	68a1      	ldr	r1, [r4, #8]
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <cleanup_stdio+0x38>)
 8003dac:	4299      	cmp	r1, r3
 8003dae:	d002      	beq.n	8003db6 <cleanup_stdio+0x1e>
 8003db0:	4620      	mov	r0, r4
 8003db2:	f001 f9ef 	bl	8005194 <_fflush_r>
 8003db6:	68e1      	ldr	r1, [r4, #12]
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <cleanup_stdio+0x3c>)
 8003dba:	4299      	cmp	r1, r3
 8003dbc:	d004      	beq.n	8003dc8 <cleanup_stdio+0x30>
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc4:	f001 b9e6 	b.w	8005194 <_fflush_r>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	bf00      	nop
 8003dcc:	200007c4 	.word	0x200007c4
 8003dd0:	2000082c 	.word	0x2000082c
 8003dd4:	20000894 	.word	0x20000894

08003dd8 <global_stdio_init.part.0>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <global_stdio_init.part.0+0x30>)
 8003ddc:	4c0b      	ldr	r4, [pc, #44]	; (8003e0c <global_stdio_init.part.0+0x34>)
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <global_stdio_init.part.0+0x38>)
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	4620      	mov	r0, r4
 8003de4:	2200      	movs	r2, #0
 8003de6:	2104      	movs	r1, #4
 8003de8:	f7ff ffa6 	bl	8003d38 <std>
 8003dec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003df0:	2201      	movs	r2, #1
 8003df2:	2109      	movs	r1, #9
 8003df4:	f7ff ffa0 	bl	8003d38 <std>
 8003df8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e02:	2112      	movs	r1, #18
 8003e04:	f7ff bf98 	b.w	8003d38 <std>
 8003e08:	200008fc 	.word	0x200008fc
 8003e0c:	200007c4 	.word	0x200007c4
 8003e10:	08003d81 	.word	0x08003d81

08003e14 <__sfp_lock_acquire>:
 8003e14:	4801      	ldr	r0, [pc, #4]	; (8003e1c <__sfp_lock_acquire+0x8>)
 8003e16:	f000 ba41 	b.w	800429c <__retarget_lock_acquire_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	20000905 	.word	0x20000905

08003e20 <__sfp_lock_release>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__sfp_lock_release+0x8>)
 8003e22:	f000 ba3c 	b.w	800429e <__retarget_lock_release_recursive>
 8003e26:	bf00      	nop
 8003e28:	20000905 	.word	0x20000905

08003e2c <__sinit>:
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	4604      	mov	r4, r0
 8003e30:	f7ff fff0 	bl	8003e14 <__sfp_lock_acquire>
 8003e34:	6a23      	ldr	r3, [r4, #32]
 8003e36:	b11b      	cbz	r3, 8003e40 <__sinit+0x14>
 8003e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e3c:	f7ff bff0 	b.w	8003e20 <__sfp_lock_release>
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <__sinit+0x28>)
 8003e42:	6223      	str	r3, [r4, #32]
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <__sinit+0x2c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f5      	bne.n	8003e38 <__sinit+0xc>
 8003e4c:	f7ff ffc4 	bl	8003dd8 <global_stdio_init.part.0>
 8003e50:	e7f2      	b.n	8003e38 <__sinit+0xc>
 8003e52:	bf00      	nop
 8003e54:	08003d99 	.word	0x08003d99
 8003e58:	200008fc 	.word	0x200008fc

08003e5c <_fwalk_sglue>:
 8003e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e60:	4607      	mov	r7, r0
 8003e62:	4688      	mov	r8, r1
 8003e64:	4614      	mov	r4, r2
 8003e66:	2600      	movs	r6, #0
 8003e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e70:	d505      	bpl.n	8003e7e <_fwalk_sglue+0x22>
 8003e72:	6824      	ldr	r4, [r4, #0]
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	d1f7      	bne.n	8003e68 <_fwalk_sglue+0xc>
 8003e78:	4630      	mov	r0, r6
 8003e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7e:	89ab      	ldrh	r3, [r5, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d907      	bls.n	8003e94 <_fwalk_sglue+0x38>
 8003e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d003      	beq.n	8003e94 <_fwalk_sglue+0x38>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4638      	mov	r0, r7
 8003e90:	47c0      	blx	r8
 8003e92:	4306      	orrs	r6, r0
 8003e94:	3568      	adds	r5, #104	; 0x68
 8003e96:	e7e9      	b.n	8003e6c <_fwalk_sglue+0x10>

08003e98 <iprintf>:
 8003e98:	b40f      	push	{r0, r1, r2, r3}
 8003e9a:	b507      	push	{r0, r1, r2, lr}
 8003e9c:	4906      	ldr	r1, [pc, #24]	; (8003eb8 <iprintf+0x20>)
 8003e9e:	ab04      	add	r3, sp, #16
 8003ea0:	6808      	ldr	r0, [r1, #0]
 8003ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ea6:	6881      	ldr	r1, [r0, #8]
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	f000 fcf5 	bl	8004898 <_vfiprintf_r>
 8003eae:	b003      	add	sp, #12
 8003eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb4:	b004      	add	sp, #16
 8003eb6:	4770      	bx	lr
 8003eb8:	20000064 	.word	0x20000064

08003ebc <_puts_r>:
 8003ebc:	6a03      	ldr	r3, [r0, #32]
 8003ebe:	b570      	push	{r4, r5, r6, lr}
 8003ec0:	6884      	ldr	r4, [r0, #8]
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	460e      	mov	r6, r1
 8003ec6:	b90b      	cbnz	r3, 8003ecc <_puts_r+0x10>
 8003ec8:	f7ff ffb0 	bl	8003e2c <__sinit>
 8003ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ece:	07db      	lsls	r3, r3, #31
 8003ed0:	d405      	bmi.n	8003ede <_puts_r+0x22>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	0598      	lsls	r0, r3, #22
 8003ed6:	d402      	bmi.n	8003ede <_puts_r+0x22>
 8003ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eda:	f000 f9df 	bl	800429c <__retarget_lock_acquire_recursive>
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	0719      	lsls	r1, r3, #28
 8003ee2:	d513      	bpl.n	8003f0c <_puts_r+0x50>
 8003ee4:	6923      	ldr	r3, [r4, #16]
 8003ee6:	b18b      	cbz	r3, 8003f0c <_puts_r+0x50>
 8003ee8:	3e01      	subs	r6, #1
 8003eea:	68a3      	ldr	r3, [r4, #8]
 8003eec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60a3      	str	r3, [r4, #8]
 8003ef4:	b9e9      	cbnz	r1, 8003f32 <_puts_r+0x76>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da2e      	bge.n	8003f58 <_puts_r+0x9c>
 8003efa:	4622      	mov	r2, r4
 8003efc:	210a      	movs	r1, #10
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 f8a9 	bl	8004056 <__swbuf_r>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d007      	beq.n	8003f18 <_puts_r+0x5c>
 8003f08:	250a      	movs	r5, #10
 8003f0a:	e007      	b.n	8003f1c <_puts_r+0x60>
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f8de 	bl	80040d0 <__swsetup_r>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d0e7      	beq.n	8003ee8 <_puts_r+0x2c>
 8003f18:	f04f 35ff 	mov.w	r5, #4294967295
 8003f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1e:	07da      	lsls	r2, r3, #31
 8003f20:	d405      	bmi.n	8003f2e <_puts_r+0x72>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d402      	bmi.n	8003f2e <_puts_r+0x72>
 8003f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2a:	f000 f9b8 	bl	800429e <__retarget_lock_release_recursive>
 8003f2e:	4628      	mov	r0, r5
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da04      	bge.n	8003f40 <_puts_r+0x84>
 8003f36:	69a2      	ldr	r2, [r4, #24]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	dc06      	bgt.n	8003f4a <_puts_r+0x8e>
 8003f3c:	290a      	cmp	r1, #10
 8003f3e:	d004      	beq.n	8003f4a <_puts_r+0x8e>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	7019      	strb	r1, [r3, #0]
 8003f48:	e7cf      	b.n	8003eea <_puts_r+0x2e>
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f000 f882 	bl	8004056 <__swbuf_r>
 8003f52:	3001      	adds	r0, #1
 8003f54:	d1c9      	bne.n	8003eea <_puts_r+0x2e>
 8003f56:	e7df      	b.n	8003f18 <_puts_r+0x5c>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	250a      	movs	r5, #10
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	6022      	str	r2, [r4, #0]
 8003f60:	701d      	strb	r5, [r3, #0]
 8003f62:	e7db      	b.n	8003f1c <_puts_r+0x60>

08003f64 <puts>:
 8003f64:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <puts+0xc>)
 8003f66:	4601      	mov	r1, r0
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	f7ff bfa7 	b.w	8003ebc <_puts_r>
 8003f6e:	bf00      	nop
 8003f70:	20000064 	.word	0x20000064

08003f74 <siscanf>:
 8003f74:	b40e      	push	{r1, r2, r3}
 8003f76:	b510      	push	{r4, lr}
 8003f78:	b09f      	sub	sp, #124	; 0x7c
 8003f7a:	ac21      	add	r4, sp, #132	; 0x84
 8003f7c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003f80:	f854 2b04 	ldr.w	r2, [r4], #4
 8003f84:	9201      	str	r2, [sp, #4]
 8003f86:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003f8a:	9004      	str	r0, [sp, #16]
 8003f8c:	9008      	str	r0, [sp, #32]
 8003f8e:	f7fc f91f 	bl	80001d0 <strlen>
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <siscanf+0x50>)
 8003f94:	9005      	str	r0, [sp, #20]
 8003f96:	9009      	str	r0, [sp, #36]	; 0x24
 8003f98:	930d      	str	r3, [sp, #52]	; 0x34
 8003f9a:	480b      	ldr	r0, [pc, #44]	; (8003fc8 <siscanf+0x54>)
 8003f9c:	9a01      	ldr	r2, [sp, #4]
 8003f9e:	6800      	ldr	r0, [r0, #0]
 8003fa0:	9403      	str	r4, [sp, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9311      	str	r3, [sp, #68]	; 0x44
 8003fa6:	9316      	str	r3, [sp, #88]	; 0x58
 8003fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003fb0:	a904      	add	r1, sp, #16
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	f000 face 	bl	8004554 <__ssvfiscanf_r>
 8003fb8:	b01f      	add	sp, #124	; 0x7c
 8003fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbe:	b003      	add	sp, #12
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	20000064 	.word	0x20000064

08003fcc <__sread>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	460c      	mov	r4, r1
 8003fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd4:	f000 f914 	bl	8004200 <_read_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	bfab      	itete	ge
 8003fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fde:	89a3      	ldrhlt	r3, [r4, #12]
 8003fe0:	181b      	addge	r3, r3, r0
 8003fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fe6:	bfac      	ite	ge
 8003fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fea:	81a3      	strhlt	r3, [r4, #12]
 8003fec:	bd10      	pop	{r4, pc}

08003fee <__seofread>:
 8003fee:	2000      	movs	r0, #0
 8003ff0:	4770      	bx	lr

08003ff2 <__swrite>:
 8003ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	461f      	mov	r7, r3
 8003ff8:	898b      	ldrh	r3, [r1, #12]
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	4605      	mov	r5, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	4616      	mov	r6, r2
 8004002:	d505      	bpl.n	8004010 <__swrite+0x1e>
 8004004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004008:	2302      	movs	r3, #2
 800400a:	2200      	movs	r2, #0
 800400c:	f000 f8e6 	bl	80041dc <_lseek_r>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	4628      	mov	r0, r5
 8004022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004026:	f000 b8fd 	b.w	8004224 <_write_r>

0800402a <__sseek>:
 800402a:	b510      	push	{r4, lr}
 800402c:	460c      	mov	r4, r1
 800402e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004032:	f000 f8d3 	bl	80041dc <_lseek_r>
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	bf15      	itete	ne
 800403c:	6560      	strne	r0, [r4, #84]	; 0x54
 800403e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004046:	81a3      	strheq	r3, [r4, #12]
 8004048:	bf18      	it	ne
 800404a:	81a3      	strhne	r3, [r4, #12]
 800404c:	bd10      	pop	{r4, pc}

0800404e <__sclose>:
 800404e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004052:	f000 b8b3 	b.w	80041bc <_close_r>

08004056 <__swbuf_r>:
 8004056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004058:	460e      	mov	r6, r1
 800405a:	4614      	mov	r4, r2
 800405c:	4605      	mov	r5, r0
 800405e:	b118      	cbz	r0, 8004068 <__swbuf_r+0x12>
 8004060:	6a03      	ldr	r3, [r0, #32]
 8004062:	b90b      	cbnz	r3, 8004068 <__swbuf_r+0x12>
 8004064:	f7ff fee2 	bl	8003e2c <__sinit>
 8004068:	69a3      	ldr	r3, [r4, #24]
 800406a:	60a3      	str	r3, [r4, #8]
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	071a      	lsls	r2, r3, #28
 8004070:	d525      	bpl.n	80040be <__swbuf_r+0x68>
 8004072:	6923      	ldr	r3, [r4, #16]
 8004074:	b31b      	cbz	r3, 80040be <__swbuf_r+0x68>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	6922      	ldr	r2, [r4, #16]
 800407a:	1a98      	subs	r0, r3, r2
 800407c:	6963      	ldr	r3, [r4, #20]
 800407e:	b2f6      	uxtb	r6, r6
 8004080:	4283      	cmp	r3, r0
 8004082:	4637      	mov	r7, r6
 8004084:	dc04      	bgt.n	8004090 <__swbuf_r+0x3a>
 8004086:	4621      	mov	r1, r4
 8004088:	4628      	mov	r0, r5
 800408a:	f001 f883 	bl	8005194 <_fflush_r>
 800408e:	b9e0      	cbnz	r0, 80040ca <__swbuf_r+0x74>
 8004090:	68a3      	ldr	r3, [r4, #8]
 8004092:	3b01      	subs	r3, #1
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	6022      	str	r2, [r4, #0]
 800409c:	701e      	strb	r6, [r3, #0]
 800409e:	6962      	ldr	r2, [r4, #20]
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d004      	beq.n	80040b0 <__swbuf_r+0x5a>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	07db      	lsls	r3, r3, #31
 80040aa:	d506      	bpl.n	80040ba <__swbuf_r+0x64>
 80040ac:	2e0a      	cmp	r6, #10
 80040ae:	d104      	bne.n	80040ba <__swbuf_r+0x64>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	f001 f86e 	bl	8005194 <_fflush_r>
 80040b8:	b938      	cbnz	r0, 80040ca <__swbuf_r+0x74>
 80040ba:	4638      	mov	r0, r7
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 f805 	bl	80040d0 <__swsetup_r>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d0d5      	beq.n	8004076 <__swbuf_r+0x20>
 80040ca:	f04f 37ff 	mov.w	r7, #4294967295
 80040ce:	e7f4      	b.n	80040ba <__swbuf_r+0x64>

080040d0 <__swsetup_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <__swsetup_r+0xac>)
 80040d4:	4605      	mov	r5, r0
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	460c      	mov	r4, r1
 80040da:	b118      	cbz	r0, 80040e4 <__swsetup_r+0x14>
 80040dc:	6a03      	ldr	r3, [r0, #32]
 80040de:	b90b      	cbnz	r3, 80040e4 <__swsetup_r+0x14>
 80040e0:	f7ff fea4 	bl	8003e2c <__sinit>
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040ea:	0718      	lsls	r0, r3, #28
 80040ec:	d422      	bmi.n	8004134 <__swsetup_r+0x64>
 80040ee:	06d9      	lsls	r1, r3, #27
 80040f0:	d407      	bmi.n	8004102 <__swsetup_r+0x32>
 80040f2:	2309      	movs	r3, #9
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e034      	b.n	800416c <__swsetup_r+0x9c>
 8004102:	0758      	lsls	r0, r3, #29
 8004104:	d512      	bpl.n	800412c <__swsetup_r+0x5c>
 8004106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004108:	b141      	cbz	r1, 800411c <__swsetup_r+0x4c>
 800410a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800410e:	4299      	cmp	r1, r3
 8004110:	d002      	beq.n	8004118 <__swsetup_r+0x48>
 8004112:	4628      	mov	r0, r5
 8004114:	f000 f8cc 	bl	80042b0 <_free_r>
 8004118:	2300      	movs	r3, #0
 800411a:	6363      	str	r3, [r4, #52]	; 0x34
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	2300      	movs	r3, #0
 8004126:	6063      	str	r3, [r4, #4]
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	81a3      	strh	r3, [r4, #12]
 8004134:	6923      	ldr	r3, [r4, #16]
 8004136:	b94b      	cbnz	r3, 800414c <__swsetup_r+0x7c>
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800413e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004142:	d003      	beq.n	800414c <__swsetup_r+0x7c>
 8004144:	4621      	mov	r1, r4
 8004146:	4628      	mov	r0, r5
 8004148:	f001 f872 	bl	8005230 <__smakebuf_r>
 800414c:	89a0      	ldrh	r0, [r4, #12]
 800414e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004152:	f010 0301 	ands.w	r3, r0, #1
 8004156:	d00a      	beq.n	800416e <__swsetup_r+0x9e>
 8004158:	2300      	movs	r3, #0
 800415a:	60a3      	str	r3, [r4, #8]
 800415c:	6963      	ldr	r3, [r4, #20]
 800415e:	425b      	negs	r3, r3
 8004160:	61a3      	str	r3, [r4, #24]
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	b943      	cbnz	r3, 8004178 <__swsetup_r+0xa8>
 8004166:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800416a:	d1c4      	bne.n	80040f6 <__swsetup_r+0x26>
 800416c:	bd38      	pop	{r3, r4, r5, pc}
 800416e:	0781      	lsls	r1, r0, #30
 8004170:	bf58      	it	pl
 8004172:	6963      	ldrpl	r3, [r4, #20]
 8004174:	60a3      	str	r3, [r4, #8]
 8004176:	e7f4      	b.n	8004162 <__swsetup_r+0x92>
 8004178:	2000      	movs	r0, #0
 800417a:	e7f7      	b.n	800416c <__swsetup_r+0x9c>
 800417c:	20000064 	.word	0x20000064

08004180 <memset>:
 8004180:	4402      	add	r2, r0
 8004182:	4603      	mov	r3, r0
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	f803 1b01 	strb.w	r1, [r3], #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <strstr>:
 8004190:	780a      	ldrb	r2, [r1, #0]
 8004192:	b570      	push	{r4, r5, r6, lr}
 8004194:	b96a      	cbnz	r2, 80041b2 <strstr+0x22>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	429a      	cmp	r2, r3
 800419a:	d109      	bne.n	80041b0 <strstr+0x20>
 800419c:	460c      	mov	r4, r1
 800419e:	4605      	mov	r5, r0
 80041a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f6      	beq.n	8004196 <strstr+0x6>
 80041a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80041ac:	429e      	cmp	r6, r3
 80041ae:	d0f7      	beq.n	80041a0 <strstr+0x10>
 80041b0:	3001      	adds	r0, #1
 80041b2:	7803      	ldrb	r3, [r0, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ef      	bne.n	8004198 <strstr+0x8>
 80041b8:	4618      	mov	r0, r3
 80041ba:	e7ec      	b.n	8004196 <strstr+0x6>

080041bc <_close_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4d06      	ldr	r5, [pc, #24]	; (80041d8 <_close_r+0x1c>)
 80041c0:	2300      	movs	r3, #0
 80041c2:	4604      	mov	r4, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f7fc fd1d 	bl	8000c06 <_close>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_close_r+0x1a>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_close_r+0x1a>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	20000900 	.word	0x20000900

080041dc <_lseek_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d07      	ldr	r5, [pc, #28]	; (80041fc <_lseek_r+0x20>)
 80041e0:	4604      	mov	r4, r0
 80041e2:	4608      	mov	r0, r1
 80041e4:	4611      	mov	r1, r2
 80041e6:	2200      	movs	r2, #0
 80041e8:	602a      	str	r2, [r5, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f7fc fd32 	bl	8000c54 <_lseek>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_lseek_r+0x1e>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_lseek_r+0x1e>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000900 	.word	0x20000900

08004200 <_read_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4d07      	ldr	r5, [pc, #28]	; (8004220 <_read_r+0x20>)
 8004204:	4604      	mov	r4, r0
 8004206:	4608      	mov	r0, r1
 8004208:	4611      	mov	r1, r2
 800420a:	2200      	movs	r2, #0
 800420c:	602a      	str	r2, [r5, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	f7fc fcdc 	bl	8000bcc <_read>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_read_r+0x1e>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_read_r+0x1e>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	20000900 	.word	0x20000900

08004224 <_write_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	; (8004244 <_write_r+0x20>)
 8004228:	4604      	mov	r4, r0
 800422a:	4608      	mov	r0, r1
 800422c:	4611      	mov	r1, r2
 800422e:	2200      	movs	r2, #0
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7fc f9c9 	bl	80005ca <_write>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_write_r+0x1e>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_write_r+0x1e>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	20000900 	.word	0x20000900

08004248 <__errno>:
 8004248:	4b01      	ldr	r3, [pc, #4]	; (8004250 <__errno+0x8>)
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000064 	.word	0x20000064

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4d0d      	ldr	r5, [pc, #52]	; (800428c <__libc_init_array+0x38>)
 8004258:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <__libc_init_array+0x3c>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	2600      	movs	r6, #0
 8004260:	42a6      	cmp	r6, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	4d0b      	ldr	r5, [pc, #44]	; (8004294 <__libc_init_array+0x40>)
 8004266:	4c0c      	ldr	r4, [pc, #48]	; (8004298 <__libc_init_array+0x44>)
 8004268:	f001 fa02 	bl	8005670 <_init>
 800426c:	1b64      	subs	r4, r4, r5
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	2600      	movs	r6, #0
 8004272:	42a6      	cmp	r6, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	f855 3b04 	ldr.w	r3, [r5], #4
 800427c:	4798      	blx	r3
 800427e:	3601      	adds	r6, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	f855 3b04 	ldr.w	r3, [r5], #4
 8004286:	4798      	blx	r3
 8004288:	3601      	adds	r6, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	08005858 	.word	0x08005858
 8004290:	08005858 	.word	0x08005858
 8004294:	08005858 	.word	0x08005858
 8004298:	0800585c 	.word	0x0800585c

0800429c <__retarget_lock_acquire_recursive>:
 800429c:	4770      	bx	lr

0800429e <__retarget_lock_release_recursive>:
 800429e:	4770      	bx	lr

080042a0 <strcpy>:
 80042a0:	4603      	mov	r3, r0
 80042a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042a6:	f803 2b01 	strb.w	r2, [r3], #1
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	d1f9      	bne.n	80042a2 <strcpy+0x2>
 80042ae:	4770      	bx	lr

080042b0 <_free_r>:
 80042b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042b2:	2900      	cmp	r1, #0
 80042b4:	d044      	beq.n	8004340 <_free_r+0x90>
 80042b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ba:	9001      	str	r0, [sp, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f1a1 0404 	sub.w	r4, r1, #4
 80042c2:	bfb8      	it	lt
 80042c4:	18e4      	addlt	r4, r4, r3
 80042c6:	f000 f8df 	bl	8004488 <__malloc_lock>
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <_free_r+0x94>)
 80042cc:	9801      	ldr	r0, [sp, #4]
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	b933      	cbnz	r3, 80042e0 <_free_r+0x30>
 80042d2:	6063      	str	r3, [r4, #4]
 80042d4:	6014      	str	r4, [r2, #0]
 80042d6:	b003      	add	sp, #12
 80042d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042dc:	f000 b8da 	b.w	8004494 <__malloc_unlock>
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d908      	bls.n	80042f6 <_free_r+0x46>
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	1961      	adds	r1, r4, r5
 80042e8:	428b      	cmp	r3, r1
 80042ea:	bf01      	itttt	eq
 80042ec:	6819      	ldreq	r1, [r3, #0]
 80042ee:	685b      	ldreq	r3, [r3, #4]
 80042f0:	1949      	addeq	r1, r1, r5
 80042f2:	6021      	streq	r1, [r4, #0]
 80042f4:	e7ed      	b.n	80042d2 <_free_r+0x22>
 80042f6:	461a      	mov	r2, r3
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b10b      	cbz	r3, 8004300 <_free_r+0x50>
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d9fa      	bls.n	80042f6 <_free_r+0x46>
 8004300:	6811      	ldr	r1, [r2, #0]
 8004302:	1855      	adds	r5, r2, r1
 8004304:	42a5      	cmp	r5, r4
 8004306:	d10b      	bne.n	8004320 <_free_r+0x70>
 8004308:	6824      	ldr	r4, [r4, #0]
 800430a:	4421      	add	r1, r4
 800430c:	1854      	adds	r4, r2, r1
 800430e:	42a3      	cmp	r3, r4
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	d1e0      	bne.n	80042d6 <_free_r+0x26>
 8004314:	681c      	ldr	r4, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	6053      	str	r3, [r2, #4]
 800431a:	440c      	add	r4, r1
 800431c:	6014      	str	r4, [r2, #0]
 800431e:	e7da      	b.n	80042d6 <_free_r+0x26>
 8004320:	d902      	bls.n	8004328 <_free_r+0x78>
 8004322:	230c      	movs	r3, #12
 8004324:	6003      	str	r3, [r0, #0]
 8004326:	e7d6      	b.n	80042d6 <_free_r+0x26>
 8004328:	6825      	ldr	r5, [r4, #0]
 800432a:	1961      	adds	r1, r4, r5
 800432c:	428b      	cmp	r3, r1
 800432e:	bf04      	itt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	6063      	str	r3, [r4, #4]
 8004336:	bf04      	itt	eq
 8004338:	1949      	addeq	r1, r1, r5
 800433a:	6021      	streq	r1, [r4, #0]
 800433c:	6054      	str	r4, [r2, #4]
 800433e:	e7ca      	b.n	80042d6 <_free_r+0x26>
 8004340:	b003      	add	sp, #12
 8004342:	bd30      	pop	{r4, r5, pc}
 8004344:	20000908 	.word	0x20000908

08004348 <sbrk_aligned>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4e0e      	ldr	r6, [pc, #56]	; (8004384 <sbrk_aligned+0x3c>)
 800434c:	460c      	mov	r4, r1
 800434e:	6831      	ldr	r1, [r6, #0]
 8004350:	4605      	mov	r5, r0
 8004352:	b911      	cbnz	r1, 800435a <sbrk_aligned+0x12>
 8004354:	f001 f83e 	bl	80053d4 <_sbrk_r>
 8004358:	6030      	str	r0, [r6, #0]
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f001 f839 	bl	80053d4 <_sbrk_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	d00a      	beq.n	800437c <sbrk_aligned+0x34>
 8004366:	1cc4      	adds	r4, r0, #3
 8004368:	f024 0403 	bic.w	r4, r4, #3
 800436c:	42a0      	cmp	r0, r4
 800436e:	d007      	beq.n	8004380 <sbrk_aligned+0x38>
 8004370:	1a21      	subs	r1, r4, r0
 8004372:	4628      	mov	r0, r5
 8004374:	f001 f82e 	bl	80053d4 <_sbrk_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d101      	bne.n	8004380 <sbrk_aligned+0x38>
 800437c:	f04f 34ff 	mov.w	r4, #4294967295
 8004380:	4620      	mov	r0, r4
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	2000090c 	.word	0x2000090c

08004388 <_malloc_r>:
 8004388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800438c:	1ccd      	adds	r5, r1, #3
 800438e:	f025 0503 	bic.w	r5, r5, #3
 8004392:	3508      	adds	r5, #8
 8004394:	2d0c      	cmp	r5, #12
 8004396:	bf38      	it	cc
 8004398:	250c      	movcc	r5, #12
 800439a:	2d00      	cmp	r5, #0
 800439c:	4607      	mov	r7, r0
 800439e:	db01      	blt.n	80043a4 <_malloc_r+0x1c>
 80043a0:	42a9      	cmp	r1, r5
 80043a2:	d905      	bls.n	80043b0 <_malloc_r+0x28>
 80043a4:	230c      	movs	r3, #12
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	2600      	movs	r6, #0
 80043aa:	4630      	mov	r0, r6
 80043ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004484 <_malloc_r+0xfc>
 80043b4:	f000 f868 	bl	8004488 <__malloc_lock>
 80043b8:	f8d8 3000 	ldr.w	r3, [r8]
 80043bc:	461c      	mov	r4, r3
 80043be:	bb5c      	cbnz	r4, 8004418 <_malloc_r+0x90>
 80043c0:	4629      	mov	r1, r5
 80043c2:	4638      	mov	r0, r7
 80043c4:	f7ff ffc0 	bl	8004348 <sbrk_aligned>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	4604      	mov	r4, r0
 80043cc:	d155      	bne.n	800447a <_malloc_r+0xf2>
 80043ce:	f8d8 4000 	ldr.w	r4, [r8]
 80043d2:	4626      	mov	r6, r4
 80043d4:	2e00      	cmp	r6, #0
 80043d6:	d145      	bne.n	8004464 <_malloc_r+0xdc>
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d048      	beq.n	800446e <_malloc_r+0xe6>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	4631      	mov	r1, r6
 80043e0:	4638      	mov	r0, r7
 80043e2:	eb04 0903 	add.w	r9, r4, r3
 80043e6:	f000 fff5 	bl	80053d4 <_sbrk_r>
 80043ea:	4581      	cmp	r9, r0
 80043ec:	d13f      	bne.n	800446e <_malloc_r+0xe6>
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	1a6d      	subs	r5, r5, r1
 80043f2:	4629      	mov	r1, r5
 80043f4:	4638      	mov	r0, r7
 80043f6:	f7ff ffa7 	bl	8004348 <sbrk_aligned>
 80043fa:	3001      	adds	r0, #1
 80043fc:	d037      	beq.n	800446e <_malloc_r+0xe6>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	442b      	add	r3, r5
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	f8d8 3000 	ldr.w	r3, [r8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d038      	beq.n	800447e <_malloc_r+0xf6>
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	42a2      	cmp	r2, r4
 8004410:	d12b      	bne.n	800446a <_malloc_r+0xe2>
 8004412:	2200      	movs	r2, #0
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e00f      	b.n	8004438 <_malloc_r+0xb0>
 8004418:	6822      	ldr	r2, [r4, #0]
 800441a:	1b52      	subs	r2, r2, r5
 800441c:	d41f      	bmi.n	800445e <_malloc_r+0xd6>
 800441e:	2a0b      	cmp	r2, #11
 8004420:	d917      	bls.n	8004452 <_malloc_r+0xca>
 8004422:	1961      	adds	r1, r4, r5
 8004424:	42a3      	cmp	r3, r4
 8004426:	6025      	str	r5, [r4, #0]
 8004428:	bf18      	it	ne
 800442a:	6059      	strne	r1, [r3, #4]
 800442c:	6863      	ldr	r3, [r4, #4]
 800442e:	bf08      	it	eq
 8004430:	f8c8 1000 	streq.w	r1, [r8]
 8004434:	5162      	str	r2, [r4, r5]
 8004436:	604b      	str	r3, [r1, #4]
 8004438:	4638      	mov	r0, r7
 800443a:	f104 060b 	add.w	r6, r4, #11
 800443e:	f000 f829 	bl	8004494 <__malloc_unlock>
 8004442:	f026 0607 	bic.w	r6, r6, #7
 8004446:	1d23      	adds	r3, r4, #4
 8004448:	1af2      	subs	r2, r6, r3
 800444a:	d0ae      	beq.n	80043aa <_malloc_r+0x22>
 800444c:	1b9b      	subs	r3, r3, r6
 800444e:	50a3      	str	r3, [r4, r2]
 8004450:	e7ab      	b.n	80043aa <_malloc_r+0x22>
 8004452:	42a3      	cmp	r3, r4
 8004454:	6862      	ldr	r2, [r4, #4]
 8004456:	d1dd      	bne.n	8004414 <_malloc_r+0x8c>
 8004458:	f8c8 2000 	str.w	r2, [r8]
 800445c:	e7ec      	b.n	8004438 <_malloc_r+0xb0>
 800445e:	4623      	mov	r3, r4
 8004460:	6864      	ldr	r4, [r4, #4]
 8004462:	e7ac      	b.n	80043be <_malloc_r+0x36>
 8004464:	4634      	mov	r4, r6
 8004466:	6876      	ldr	r6, [r6, #4]
 8004468:	e7b4      	b.n	80043d4 <_malloc_r+0x4c>
 800446a:	4613      	mov	r3, r2
 800446c:	e7cc      	b.n	8004408 <_malloc_r+0x80>
 800446e:	230c      	movs	r3, #12
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4638      	mov	r0, r7
 8004474:	f000 f80e 	bl	8004494 <__malloc_unlock>
 8004478:	e797      	b.n	80043aa <_malloc_r+0x22>
 800447a:	6025      	str	r5, [r4, #0]
 800447c:	e7dc      	b.n	8004438 <_malloc_r+0xb0>
 800447e:	605b      	str	r3, [r3, #4]
 8004480:	deff      	udf	#255	; 0xff
 8004482:	bf00      	nop
 8004484:	20000908 	.word	0x20000908

08004488 <__malloc_lock>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__malloc_lock+0x8>)
 800448a:	f7ff bf07 	b.w	800429c <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	20000904 	.word	0x20000904

08004494 <__malloc_unlock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_unlock+0x8>)
 8004496:	f7ff bf02 	b.w	800429e <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	20000904 	.word	0x20000904

080044a0 <_sungetc_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	1c4b      	adds	r3, r1, #1
 80044a4:	4614      	mov	r4, r2
 80044a6:	d103      	bne.n	80044b0 <_sungetc_r+0x10>
 80044a8:	f04f 35ff 	mov.w	r5, #4294967295
 80044ac:	4628      	mov	r0, r5
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	8993      	ldrh	r3, [r2, #12]
 80044b2:	f023 0320 	bic.w	r3, r3, #32
 80044b6:	8193      	strh	r3, [r2, #12]
 80044b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	b2cd      	uxtb	r5, r1
 80044be:	b18b      	cbz	r3, 80044e4 <_sungetc_r+0x44>
 80044c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044c2:	4293      	cmp	r3, r2
 80044c4:	dd08      	ble.n	80044d8 <_sungetc_r+0x38>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	6022      	str	r2, [r4, #0]
 80044cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	e7e9      	b.n	80044ac <_sungetc_r+0xc>
 80044d8:	4621      	mov	r1, r4
 80044da:	f000 ff1e 	bl	800531a <__submore>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d0f1      	beq.n	80044c6 <_sungetc_r+0x26>
 80044e2:	e7e1      	b.n	80044a8 <_sungetc_r+0x8>
 80044e4:	6921      	ldr	r1, [r4, #16]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	b151      	cbz	r1, 8004500 <_sungetc_r+0x60>
 80044ea:	4299      	cmp	r1, r3
 80044ec:	d208      	bcs.n	8004500 <_sungetc_r+0x60>
 80044ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80044f2:	42a9      	cmp	r1, r5
 80044f4:	d104      	bne.n	8004500 <_sungetc_r+0x60>
 80044f6:	3b01      	subs	r3, #1
 80044f8:	3201      	adds	r2, #1
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	6062      	str	r2, [r4, #4]
 80044fe:	e7d5      	b.n	80044ac <_sungetc_r+0xc>
 8004500:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004508:	6363      	str	r3, [r4, #52]	; 0x34
 800450a:	2303      	movs	r3, #3
 800450c:	63a3      	str	r3, [r4, #56]	; 0x38
 800450e:	4623      	mov	r3, r4
 8004510:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	2301      	movs	r3, #1
 8004518:	e7dc      	b.n	80044d4 <_sungetc_r+0x34>

0800451a <__ssrefill_r>:
 800451a:	b510      	push	{r4, lr}
 800451c:	460c      	mov	r4, r1
 800451e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004520:	b169      	cbz	r1, 800453e <__ssrefill_r+0x24>
 8004522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004526:	4299      	cmp	r1, r3
 8004528:	d001      	beq.n	800452e <__ssrefill_r+0x14>
 800452a:	f7ff fec1 	bl	80042b0 <_free_r>
 800452e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004530:	6063      	str	r3, [r4, #4]
 8004532:	2000      	movs	r0, #0
 8004534:	6360      	str	r0, [r4, #52]	; 0x34
 8004536:	b113      	cbz	r3, 800453e <__ssrefill_r+0x24>
 8004538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	bd10      	pop	{r4, pc}
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f043 0320 	orr.w	r3, r3, #32
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	f04f 30ff 	mov.w	r0, #4294967295
 8004552:	e7f3      	b.n	800453c <__ssrefill_r+0x22>

08004554 <__ssvfiscanf_r>:
 8004554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004558:	460c      	mov	r4, r1
 800455a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800455e:	2100      	movs	r1, #0
 8004560:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004564:	49a6      	ldr	r1, [pc, #664]	; (8004800 <__ssvfiscanf_r+0x2ac>)
 8004566:	91a0      	str	r1, [sp, #640]	; 0x280
 8004568:	f10d 0804 	add.w	r8, sp, #4
 800456c:	49a5      	ldr	r1, [pc, #660]	; (8004804 <__ssvfiscanf_r+0x2b0>)
 800456e:	4fa6      	ldr	r7, [pc, #664]	; (8004808 <__ssvfiscanf_r+0x2b4>)
 8004570:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800480c <__ssvfiscanf_r+0x2b8>
 8004574:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004578:	4606      	mov	r6, r0
 800457a:	91a1      	str	r1, [sp, #644]	; 0x284
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	7813      	ldrb	r3, [r2, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 815a 	beq.w	800483a <__ssvfiscanf_r+0x2e6>
 8004586:	5cf9      	ldrb	r1, [r7, r3]
 8004588:	f011 0108 	ands.w	r1, r1, #8
 800458c:	f102 0501 	add.w	r5, r2, #1
 8004590:	d019      	beq.n	80045c6 <__ssvfiscanf_r+0x72>
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dd0f      	ble.n	80045b8 <__ssvfiscanf_r+0x64>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	5cba      	ldrb	r2, [r7, r2]
 800459e:	0712      	lsls	r2, r2, #28
 80045a0:	d401      	bmi.n	80045a6 <__ssvfiscanf_r+0x52>
 80045a2:	462a      	mov	r2, r5
 80045a4:	e7eb      	b.n	800457e <__ssvfiscanf_r+0x2a>
 80045a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045a8:	3201      	adds	r2, #1
 80045aa:	9245      	str	r2, [sp, #276]	; 0x114
 80045ac:	6862      	ldr	r2, [r4, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	3a01      	subs	r2, #1
 80045b2:	6062      	str	r2, [r4, #4]
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	e7ec      	b.n	8004592 <__ssvfiscanf_r+0x3e>
 80045b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80045ba:	4621      	mov	r1, r4
 80045bc:	4630      	mov	r0, r6
 80045be:	4798      	blx	r3
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d0e9      	beq.n	8004598 <__ssvfiscanf_r+0x44>
 80045c4:	e7ed      	b.n	80045a2 <__ssvfiscanf_r+0x4e>
 80045c6:	2b25      	cmp	r3, #37	; 0x25
 80045c8:	d012      	beq.n	80045f0 <__ssvfiscanf_r+0x9c>
 80045ca:	469a      	mov	sl, r3
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f340 8091 	ble.w	80046f6 <__ssvfiscanf_r+0x1a2>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	7813      	ldrb	r3, [r2, #0]
 80045d8:	4553      	cmp	r3, sl
 80045da:	f040 812e 	bne.w	800483a <__ssvfiscanf_r+0x2e6>
 80045de:	6863      	ldr	r3, [r4, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80045e6:	3201      	adds	r2, #1
 80045e8:	3301      	adds	r3, #1
 80045ea:	6022      	str	r2, [r4, #0]
 80045ec:	9345      	str	r3, [sp, #276]	; 0x114
 80045ee:	e7d8      	b.n	80045a2 <__ssvfiscanf_r+0x4e>
 80045f0:	9141      	str	r1, [sp, #260]	; 0x104
 80045f2:	9143      	str	r1, [sp, #268]	; 0x10c
 80045f4:	7853      	ldrb	r3, [r2, #1]
 80045f6:	2b2a      	cmp	r3, #42	; 0x2a
 80045f8:	bf02      	ittt	eq
 80045fa:	2310      	moveq	r3, #16
 80045fc:	1c95      	addeq	r5, r2, #2
 80045fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8004600:	220a      	movs	r2, #10
 8004602:	46aa      	mov	sl, r5
 8004604:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004608:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800460c:	2b09      	cmp	r3, #9
 800460e:	d91c      	bls.n	800464a <__ssvfiscanf_r+0xf6>
 8004610:	487e      	ldr	r0, [pc, #504]	; (800480c <__ssvfiscanf_r+0x2b8>)
 8004612:	2203      	movs	r2, #3
 8004614:	f7fb fde4 	bl	80001e0 <memchr>
 8004618:	b138      	cbz	r0, 800462a <__ssvfiscanf_r+0xd6>
 800461a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800461c:	eba0 0009 	sub.w	r0, r0, r9
 8004620:	2301      	movs	r3, #1
 8004622:	4083      	lsls	r3, r0
 8004624:	4313      	orrs	r3, r2
 8004626:	9341      	str	r3, [sp, #260]	; 0x104
 8004628:	4655      	mov	r5, sl
 800462a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800462e:	2b78      	cmp	r3, #120	; 0x78
 8004630:	d806      	bhi.n	8004640 <__ssvfiscanf_r+0xec>
 8004632:	2b57      	cmp	r3, #87	; 0x57
 8004634:	d810      	bhi.n	8004658 <__ssvfiscanf_r+0x104>
 8004636:	2b25      	cmp	r3, #37	; 0x25
 8004638:	d0c7      	beq.n	80045ca <__ssvfiscanf_r+0x76>
 800463a:	d857      	bhi.n	80046ec <__ssvfiscanf_r+0x198>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d065      	beq.n	800470c <__ssvfiscanf_r+0x1b8>
 8004640:	2303      	movs	r3, #3
 8004642:	9347      	str	r3, [sp, #284]	; 0x11c
 8004644:	230a      	movs	r3, #10
 8004646:	9342      	str	r3, [sp, #264]	; 0x108
 8004648:	e076      	b.n	8004738 <__ssvfiscanf_r+0x1e4>
 800464a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800464c:	fb02 1103 	mla	r1, r2, r3, r1
 8004650:	3930      	subs	r1, #48	; 0x30
 8004652:	9143      	str	r1, [sp, #268]	; 0x10c
 8004654:	4655      	mov	r5, sl
 8004656:	e7d4      	b.n	8004602 <__ssvfiscanf_r+0xae>
 8004658:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800465c:	2a20      	cmp	r2, #32
 800465e:	d8ef      	bhi.n	8004640 <__ssvfiscanf_r+0xec>
 8004660:	a101      	add	r1, pc, #4	; (adr r1, 8004668 <__ssvfiscanf_r+0x114>)
 8004662:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800471b 	.word	0x0800471b
 800466c:	08004641 	.word	0x08004641
 8004670:	08004641 	.word	0x08004641
 8004674:	08004779 	.word	0x08004779
 8004678:	08004641 	.word	0x08004641
 800467c:	08004641 	.word	0x08004641
 8004680:	08004641 	.word	0x08004641
 8004684:	08004641 	.word	0x08004641
 8004688:	08004641 	.word	0x08004641
 800468c:	08004641 	.word	0x08004641
 8004690:	08004641 	.word	0x08004641
 8004694:	0800478f 	.word	0x0800478f
 8004698:	08004775 	.word	0x08004775
 800469c:	080046f3 	.word	0x080046f3
 80046a0:	080046f3 	.word	0x080046f3
 80046a4:	080046f3 	.word	0x080046f3
 80046a8:	08004641 	.word	0x08004641
 80046ac:	08004731 	.word	0x08004731
 80046b0:	08004641 	.word	0x08004641
 80046b4:	08004641 	.word	0x08004641
 80046b8:	08004641 	.word	0x08004641
 80046bc:	08004641 	.word	0x08004641
 80046c0:	0800479f 	.word	0x0800479f
 80046c4:	0800476d 	.word	0x0800476d
 80046c8:	08004713 	.word	0x08004713
 80046cc:	08004641 	.word	0x08004641
 80046d0:	08004641 	.word	0x08004641
 80046d4:	0800479b 	.word	0x0800479b
 80046d8:	08004641 	.word	0x08004641
 80046dc:	08004775 	.word	0x08004775
 80046e0:	08004641 	.word	0x08004641
 80046e4:	08004641 	.word	0x08004641
 80046e8:	0800471b 	.word	0x0800471b
 80046ec:	3b45      	subs	r3, #69	; 0x45
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d8a6      	bhi.n	8004640 <__ssvfiscanf_r+0xec>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e01f      	b.n	8004736 <__ssvfiscanf_r+0x1e2>
 80046f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80046f8:	4621      	mov	r1, r4
 80046fa:	4630      	mov	r0, r6
 80046fc:	4798      	blx	r3
 80046fe:	2800      	cmp	r0, #0
 8004700:	f43f af68 	beq.w	80045d4 <__ssvfiscanf_r+0x80>
 8004704:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004706:	2800      	cmp	r0, #0
 8004708:	f040 808d 	bne.w	8004826 <__ssvfiscanf_r+0x2d2>
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	e08f      	b.n	8004832 <__ssvfiscanf_r+0x2de>
 8004712:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004714:	f042 0220 	orr.w	r2, r2, #32
 8004718:	9241      	str	r2, [sp, #260]	; 0x104
 800471a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800471c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004720:	9241      	str	r2, [sp, #260]	; 0x104
 8004722:	2210      	movs	r2, #16
 8004724:	2b6f      	cmp	r3, #111	; 0x6f
 8004726:	9242      	str	r2, [sp, #264]	; 0x108
 8004728:	bf34      	ite	cc
 800472a:	2303      	movcc	r3, #3
 800472c:	2304      	movcs	r3, #4
 800472e:	e002      	b.n	8004736 <__ssvfiscanf_r+0x1e2>
 8004730:	2300      	movs	r3, #0
 8004732:	9342      	str	r3, [sp, #264]	; 0x108
 8004734:	2303      	movs	r3, #3
 8004736:	9347      	str	r3, [sp, #284]	; 0x11c
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	dd3d      	ble.n	80047ba <__ssvfiscanf_r+0x266>
 800473e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004740:	0659      	lsls	r1, r3, #25
 8004742:	d404      	bmi.n	800474e <__ssvfiscanf_r+0x1fa>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	5cba      	ldrb	r2, [r7, r2]
 800474a:	0712      	lsls	r2, r2, #28
 800474c:	d43c      	bmi.n	80047c8 <__ssvfiscanf_r+0x274>
 800474e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004750:	2b02      	cmp	r3, #2
 8004752:	dc4b      	bgt.n	80047ec <__ssvfiscanf_r+0x298>
 8004754:	466b      	mov	r3, sp
 8004756:	4622      	mov	r2, r4
 8004758:	a941      	add	r1, sp, #260	; 0x104
 800475a:	4630      	mov	r0, r6
 800475c:	f000 fb46 	bl	8004dec <_scanf_chars>
 8004760:	2801      	cmp	r0, #1
 8004762:	d06a      	beq.n	800483a <__ssvfiscanf_r+0x2e6>
 8004764:	2802      	cmp	r0, #2
 8004766:	f47f af1c 	bne.w	80045a2 <__ssvfiscanf_r+0x4e>
 800476a:	e7cb      	b.n	8004704 <__ssvfiscanf_r+0x1b0>
 800476c:	2308      	movs	r3, #8
 800476e:	9342      	str	r3, [sp, #264]	; 0x108
 8004770:	2304      	movs	r3, #4
 8004772:	e7e0      	b.n	8004736 <__ssvfiscanf_r+0x1e2>
 8004774:	220a      	movs	r2, #10
 8004776:	e7d5      	b.n	8004724 <__ssvfiscanf_r+0x1d0>
 8004778:	4629      	mov	r1, r5
 800477a:	4640      	mov	r0, r8
 800477c:	f000 fd94 	bl	80052a8 <__sccl>
 8004780:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004786:	9341      	str	r3, [sp, #260]	; 0x104
 8004788:	4605      	mov	r5, r0
 800478a:	2301      	movs	r3, #1
 800478c:	e7d3      	b.n	8004736 <__ssvfiscanf_r+0x1e2>
 800478e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004794:	9341      	str	r3, [sp, #260]	; 0x104
 8004796:	2300      	movs	r3, #0
 8004798:	e7cd      	b.n	8004736 <__ssvfiscanf_r+0x1e2>
 800479a:	2302      	movs	r3, #2
 800479c:	e7cb      	b.n	8004736 <__ssvfiscanf_r+0x1e2>
 800479e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80047a0:	06c3      	lsls	r3, r0, #27
 80047a2:	f53f aefe 	bmi.w	80045a2 <__ssvfiscanf_r+0x4e>
 80047a6:	9b00      	ldr	r3, [sp, #0]
 80047a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80047aa:	1d19      	adds	r1, r3, #4
 80047ac:	9100      	str	r1, [sp, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	07c0      	lsls	r0, r0, #31
 80047b2:	bf4c      	ite	mi
 80047b4:	801a      	strhmi	r2, [r3, #0]
 80047b6:	601a      	strpl	r2, [r3, #0]
 80047b8:	e6f3      	b.n	80045a2 <__ssvfiscanf_r+0x4e>
 80047ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047bc:	4621      	mov	r1, r4
 80047be:	4630      	mov	r0, r6
 80047c0:	4798      	blx	r3
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d0bb      	beq.n	800473e <__ssvfiscanf_r+0x1ea>
 80047c6:	e79d      	b.n	8004704 <__ssvfiscanf_r+0x1b0>
 80047c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80047ca:	3201      	adds	r2, #1
 80047cc:	9245      	str	r2, [sp, #276]	; 0x114
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	3a01      	subs	r2, #1
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	6062      	str	r2, [r4, #4]
 80047d6:	dd02      	ble.n	80047de <__ssvfiscanf_r+0x28a>
 80047d8:	3301      	adds	r3, #1
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	e7b2      	b.n	8004744 <__ssvfiscanf_r+0x1f0>
 80047de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047e0:	4621      	mov	r1, r4
 80047e2:	4630      	mov	r0, r6
 80047e4:	4798      	blx	r3
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d0ac      	beq.n	8004744 <__ssvfiscanf_r+0x1f0>
 80047ea:	e78b      	b.n	8004704 <__ssvfiscanf_r+0x1b0>
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	dc0f      	bgt.n	8004810 <__ssvfiscanf_r+0x2bc>
 80047f0:	466b      	mov	r3, sp
 80047f2:	4622      	mov	r2, r4
 80047f4:	a941      	add	r1, sp, #260	; 0x104
 80047f6:	4630      	mov	r0, r6
 80047f8:	f000 fb52 	bl	8004ea0 <_scanf_i>
 80047fc:	e7b0      	b.n	8004760 <__ssvfiscanf_r+0x20c>
 80047fe:	bf00      	nop
 8004800:	080044a1 	.word	0x080044a1
 8004804:	0800451b 	.word	0x0800451b
 8004808:	0800574f 	.word	0x0800574f
 800480c:	08005700 	.word	0x08005700
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <__ssvfiscanf_r+0x2ec>)
 8004812:	2b00      	cmp	r3, #0
 8004814:	f43f aec5 	beq.w	80045a2 <__ssvfiscanf_r+0x4e>
 8004818:	466b      	mov	r3, sp
 800481a:	4622      	mov	r2, r4
 800481c:	a941      	add	r1, sp, #260	; 0x104
 800481e:	4630      	mov	r0, r6
 8004820:	f3af 8000 	nop.w
 8004824:	e79c      	b.n	8004760 <__ssvfiscanf_r+0x20c>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f013 0f40 	tst.w	r3, #64	; 0x40
 800482c:	bf18      	it	ne
 800482e:	f04f 30ff 	movne.w	r0, #4294967295
 8004832:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800483c:	e7f9      	b.n	8004832 <__ssvfiscanf_r+0x2de>
 800483e:	bf00      	nop
 8004840:	00000000 	.word	0x00000000

08004844 <__sfputc_r>:
 8004844:	6893      	ldr	r3, [r2, #8]
 8004846:	3b01      	subs	r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	b410      	push	{r4}
 800484c:	6093      	str	r3, [r2, #8]
 800484e:	da08      	bge.n	8004862 <__sfputc_r+0x1e>
 8004850:	6994      	ldr	r4, [r2, #24]
 8004852:	42a3      	cmp	r3, r4
 8004854:	db01      	blt.n	800485a <__sfputc_r+0x16>
 8004856:	290a      	cmp	r1, #10
 8004858:	d103      	bne.n	8004862 <__sfputc_r+0x1e>
 800485a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800485e:	f7ff bbfa 	b.w	8004056 <__swbuf_r>
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	1c58      	adds	r0, r3, #1
 8004866:	6010      	str	r0, [r2, #0]
 8004868:	7019      	strb	r1, [r3, #0]
 800486a:	4608      	mov	r0, r1
 800486c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004870:	4770      	bx	lr

08004872 <__sfputs_r>:
 8004872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
 8004878:	4614      	mov	r4, r2
 800487a:	18d5      	adds	r5, r2, r3
 800487c:	42ac      	cmp	r4, r5
 800487e:	d101      	bne.n	8004884 <__sfputs_r+0x12>
 8004880:	2000      	movs	r0, #0
 8004882:	e007      	b.n	8004894 <__sfputs_r+0x22>
 8004884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004888:	463a      	mov	r2, r7
 800488a:	4630      	mov	r0, r6
 800488c:	f7ff ffda 	bl	8004844 <__sfputc_r>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d1f3      	bne.n	800487c <__sfputs_r+0xa>
 8004894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004898 <_vfiprintf_r>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	460d      	mov	r5, r1
 800489e:	b09d      	sub	sp, #116	; 0x74
 80048a0:	4614      	mov	r4, r2
 80048a2:	4698      	mov	r8, r3
 80048a4:	4606      	mov	r6, r0
 80048a6:	b118      	cbz	r0, 80048b0 <_vfiprintf_r+0x18>
 80048a8:	6a03      	ldr	r3, [r0, #32]
 80048aa:	b90b      	cbnz	r3, 80048b0 <_vfiprintf_r+0x18>
 80048ac:	f7ff fabe 	bl	8003e2c <__sinit>
 80048b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b2:	07d9      	lsls	r1, r3, #31
 80048b4:	d405      	bmi.n	80048c2 <_vfiprintf_r+0x2a>
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	059a      	lsls	r2, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_vfiprintf_r+0x2a>
 80048bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048be:	f7ff fced 	bl	800429c <__retarget_lock_acquire_recursive>
 80048c2:	89ab      	ldrh	r3, [r5, #12]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	d501      	bpl.n	80048cc <_vfiprintf_r+0x34>
 80048c8:	692b      	ldr	r3, [r5, #16]
 80048ca:	b99b      	cbnz	r3, 80048f4 <_vfiprintf_r+0x5c>
 80048cc:	4629      	mov	r1, r5
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7ff fbfe 	bl	80040d0 <__swsetup_r>
 80048d4:	b170      	cbz	r0, 80048f4 <_vfiprintf_r+0x5c>
 80048d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048d8:	07dc      	lsls	r4, r3, #31
 80048da:	d504      	bpl.n	80048e6 <_vfiprintf_r+0x4e>
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	b01d      	add	sp, #116	; 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	89ab      	ldrh	r3, [r5, #12]
 80048e8:	0598      	lsls	r0, r3, #22
 80048ea:	d4f7      	bmi.n	80048dc <_vfiprintf_r+0x44>
 80048ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048ee:	f7ff fcd6 	bl	800429e <__retarget_lock_release_recursive>
 80048f2:	e7f3      	b.n	80048dc <_vfiprintf_r+0x44>
 80048f4:	2300      	movs	r3, #0
 80048f6:	9309      	str	r3, [sp, #36]	; 0x24
 80048f8:	2320      	movs	r3, #32
 80048fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004902:	2330      	movs	r3, #48	; 0x30
 8004904:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004ab8 <_vfiprintf_r+0x220>
 8004908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800490c:	f04f 0901 	mov.w	r9, #1
 8004910:	4623      	mov	r3, r4
 8004912:	469a      	mov	sl, r3
 8004914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004918:	b10a      	cbz	r2, 800491e <_vfiprintf_r+0x86>
 800491a:	2a25      	cmp	r2, #37	; 0x25
 800491c:	d1f9      	bne.n	8004912 <_vfiprintf_r+0x7a>
 800491e:	ebba 0b04 	subs.w	fp, sl, r4
 8004922:	d00b      	beq.n	800493c <_vfiprintf_r+0xa4>
 8004924:	465b      	mov	r3, fp
 8004926:	4622      	mov	r2, r4
 8004928:	4629      	mov	r1, r5
 800492a:	4630      	mov	r0, r6
 800492c:	f7ff ffa1 	bl	8004872 <__sfputs_r>
 8004930:	3001      	adds	r0, #1
 8004932:	f000 80a9 	beq.w	8004a88 <_vfiprintf_r+0x1f0>
 8004936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004938:	445a      	add	r2, fp
 800493a:	9209      	str	r2, [sp, #36]	; 0x24
 800493c:	f89a 3000 	ldrb.w	r3, [sl]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a1 	beq.w	8004a88 <_vfiprintf_r+0x1f0>
 8004946:	2300      	movs	r3, #0
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004950:	f10a 0a01 	add.w	sl, sl, #1
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	9307      	str	r3, [sp, #28]
 8004958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800495c:	931a      	str	r3, [sp, #104]	; 0x68
 800495e:	4654      	mov	r4, sl
 8004960:	2205      	movs	r2, #5
 8004962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004966:	4854      	ldr	r0, [pc, #336]	; (8004ab8 <_vfiprintf_r+0x220>)
 8004968:	f7fb fc3a 	bl	80001e0 <memchr>
 800496c:	9a04      	ldr	r2, [sp, #16]
 800496e:	b9d8      	cbnz	r0, 80049a8 <_vfiprintf_r+0x110>
 8004970:	06d1      	lsls	r1, r2, #27
 8004972:	bf44      	itt	mi
 8004974:	2320      	movmi	r3, #32
 8004976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497a:	0713      	lsls	r3, r2, #28
 800497c:	bf44      	itt	mi
 800497e:	232b      	movmi	r3, #43	; 0x2b
 8004980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004984:	f89a 3000 	ldrb.w	r3, [sl]
 8004988:	2b2a      	cmp	r3, #42	; 0x2a
 800498a:	d015      	beq.n	80049b8 <_vfiprintf_r+0x120>
 800498c:	9a07      	ldr	r2, [sp, #28]
 800498e:	4654      	mov	r4, sl
 8004990:	2000      	movs	r0, #0
 8004992:	f04f 0c0a 	mov.w	ip, #10
 8004996:	4621      	mov	r1, r4
 8004998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499c:	3b30      	subs	r3, #48	; 0x30
 800499e:	2b09      	cmp	r3, #9
 80049a0:	d94d      	bls.n	8004a3e <_vfiprintf_r+0x1a6>
 80049a2:	b1b0      	cbz	r0, 80049d2 <_vfiprintf_r+0x13a>
 80049a4:	9207      	str	r2, [sp, #28]
 80049a6:	e014      	b.n	80049d2 <_vfiprintf_r+0x13a>
 80049a8:	eba0 0308 	sub.w	r3, r0, r8
 80049ac:	fa09 f303 	lsl.w	r3, r9, r3
 80049b0:	4313      	orrs	r3, r2
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	46a2      	mov	sl, r4
 80049b6:	e7d2      	b.n	800495e <_vfiprintf_r+0xc6>
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	1d19      	adds	r1, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	9103      	str	r1, [sp, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfbb      	ittet	lt
 80049c4:	425b      	neglt	r3, r3
 80049c6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ca:	9307      	strge	r3, [sp, #28]
 80049cc:	9307      	strlt	r3, [sp, #28]
 80049ce:	bfb8      	it	lt
 80049d0:	9204      	strlt	r2, [sp, #16]
 80049d2:	7823      	ldrb	r3, [r4, #0]
 80049d4:	2b2e      	cmp	r3, #46	; 0x2e
 80049d6:	d10c      	bne.n	80049f2 <_vfiprintf_r+0x15a>
 80049d8:	7863      	ldrb	r3, [r4, #1]
 80049da:	2b2a      	cmp	r3, #42	; 0x2a
 80049dc:	d134      	bne.n	8004a48 <_vfiprintf_r+0x1b0>
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	1d1a      	adds	r2, r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	9203      	str	r2, [sp, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfb8      	it	lt
 80049ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80049ee:	3402      	adds	r4, #2
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ac8 <_vfiprintf_r+0x230>
 80049f6:	7821      	ldrb	r1, [r4, #0]
 80049f8:	2203      	movs	r2, #3
 80049fa:	4650      	mov	r0, sl
 80049fc:	f7fb fbf0 	bl	80001e0 <memchr>
 8004a00:	b138      	cbz	r0, 8004a12 <_vfiprintf_r+0x17a>
 8004a02:	9b04      	ldr	r3, [sp, #16]
 8004a04:	eba0 000a 	sub.w	r0, r0, sl
 8004a08:	2240      	movs	r2, #64	; 0x40
 8004a0a:	4082      	lsls	r2, r0
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a16:	4829      	ldr	r0, [pc, #164]	; (8004abc <_vfiprintf_r+0x224>)
 8004a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a1c:	2206      	movs	r2, #6
 8004a1e:	f7fb fbdf 	bl	80001e0 <memchr>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d03f      	beq.n	8004aa6 <_vfiprintf_r+0x20e>
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <_vfiprintf_r+0x228>)
 8004a28:	bb1b      	cbnz	r3, 8004a72 <_vfiprintf_r+0x1da>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	3308      	adds	r3, #8
 8004a34:	9303      	str	r3, [sp, #12]
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	443b      	add	r3, r7
 8004a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3c:	e768      	b.n	8004910 <_vfiprintf_r+0x78>
 8004a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a42:	460c      	mov	r4, r1
 8004a44:	2001      	movs	r0, #1
 8004a46:	e7a6      	b.n	8004996 <_vfiprintf_r+0xfe>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f04f 0c0a 	mov.w	ip, #10
 8004a54:	4620      	mov	r0, r4
 8004a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5a:	3a30      	subs	r2, #48	; 0x30
 8004a5c:	2a09      	cmp	r2, #9
 8004a5e:	d903      	bls.n	8004a68 <_vfiprintf_r+0x1d0>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0c6      	beq.n	80049f2 <_vfiprintf_r+0x15a>
 8004a64:	9105      	str	r1, [sp, #20]
 8004a66:	e7c4      	b.n	80049f2 <_vfiprintf_r+0x15a>
 8004a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e7f0      	b.n	8004a54 <_vfiprintf_r+0x1bc>
 8004a72:	ab03      	add	r3, sp, #12
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	462a      	mov	r2, r5
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <_vfiprintf_r+0x22c>)
 8004a7a:	a904      	add	r1, sp, #16
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f3af 8000 	nop.w
 8004a82:	4607      	mov	r7, r0
 8004a84:	1c78      	adds	r0, r7, #1
 8004a86:	d1d6      	bne.n	8004a36 <_vfiprintf_r+0x19e>
 8004a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a8a:	07d9      	lsls	r1, r3, #31
 8004a8c:	d405      	bmi.n	8004a9a <_vfiprintf_r+0x202>
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	059a      	lsls	r2, r3, #22
 8004a92:	d402      	bmi.n	8004a9a <_vfiprintf_r+0x202>
 8004a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a96:	f7ff fc02 	bl	800429e <__retarget_lock_release_recursive>
 8004a9a:	89ab      	ldrh	r3, [r5, #12]
 8004a9c:	065b      	lsls	r3, r3, #25
 8004a9e:	f53f af1d 	bmi.w	80048dc <_vfiprintf_r+0x44>
 8004aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aa4:	e71c      	b.n	80048e0 <_vfiprintf_r+0x48>
 8004aa6:	ab03      	add	r3, sp, #12
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	462a      	mov	r2, r5
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <_vfiprintf_r+0x22c>)
 8004aae:	a904      	add	r1, sp, #16
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 f879 	bl	8004ba8 <_printf_i>
 8004ab6:	e7e4      	b.n	8004a82 <_vfiprintf_r+0x1ea>
 8004ab8:	08005704 	.word	0x08005704
 8004abc:	0800570a 	.word	0x0800570a
 8004ac0:	00000000 	.word	0x00000000
 8004ac4:	08004873 	.word	0x08004873
 8004ac8:	08005700 	.word	0x08005700

08004acc <_printf_common>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	4699      	mov	r9, r3
 8004ad4:	688a      	ldr	r2, [r1, #8]
 8004ad6:	690b      	ldr	r3, [r1, #16]
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bfb8      	it	lt
 8004ae0:	4613      	movlt	r3, r2
 8004ae2:	6033      	str	r3, [r6, #0]
 8004ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ae8:	4607      	mov	r7, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	b10a      	cbz	r2, 8004af2 <_printf_common+0x26>
 8004aee:	3301      	adds	r3, #1
 8004af0:	6033      	str	r3, [r6, #0]
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	0699      	lsls	r1, r3, #26
 8004af6:	bf42      	ittt	mi
 8004af8:	6833      	ldrmi	r3, [r6, #0]
 8004afa:	3302      	addmi	r3, #2
 8004afc:	6033      	strmi	r3, [r6, #0]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	f015 0506 	ands.w	r5, r5, #6
 8004b04:	d106      	bne.n	8004b14 <_printf_common+0x48>
 8004b06:	f104 0a19 	add.w	sl, r4, #25
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	6832      	ldr	r2, [r6, #0]
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dc26      	bgt.n	8004b62 <_printf_common+0x96>
 8004b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b18:	1e13      	subs	r3, r2, #0
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	bf18      	it	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	0692      	lsls	r2, r2, #26
 8004b22:	d42b      	bmi.n	8004b7c <_printf_common+0xb0>
 8004b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b28:	4649      	mov	r1, r9
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d01e      	beq.n	8004b70 <_printf_common+0xa4>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	6922      	ldr	r2, [r4, #16]
 8004b36:	f003 0306 	and.w	r3, r3, #6
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	bf02      	ittt	eq
 8004b3e:	68e5      	ldreq	r5, [r4, #12]
 8004b40:	6833      	ldreq	r3, [r6, #0]
 8004b42:	1aed      	subeq	r5, r5, r3
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	bf0c      	ite	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	2500      	movne	r5, #0
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bfc4      	itt	gt
 8004b52:	1a9b      	subgt	r3, r3, r2
 8004b54:	18ed      	addgt	r5, r5, r3
 8004b56:	2600      	movs	r6, #0
 8004b58:	341a      	adds	r4, #26
 8004b5a:	42b5      	cmp	r5, r6
 8004b5c:	d11a      	bne.n	8004b94 <_printf_common+0xc8>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e008      	b.n	8004b74 <_printf_common+0xa8>
 8004b62:	2301      	movs	r3, #1
 8004b64:	4652      	mov	r2, sl
 8004b66:	4649      	mov	r1, r9
 8004b68:	4638      	mov	r0, r7
 8004b6a:	47c0      	blx	r8
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d103      	bne.n	8004b78 <_printf_common+0xac>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b78:	3501      	adds	r5, #1
 8004b7a:	e7c6      	b.n	8004b0a <_printf_common+0x3e>
 8004b7c:	18e1      	adds	r1, r4, r3
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	2030      	movs	r0, #48	; 0x30
 8004b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b86:	4422      	add	r2, r4
 8004b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b90:	3302      	adds	r3, #2
 8004b92:	e7c7      	b.n	8004b24 <_printf_common+0x58>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4622      	mov	r2, r4
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d0e6      	beq.n	8004b70 <_printf_common+0xa4>
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7d9      	b.n	8004b5a <_printf_common+0x8e>
	...

08004ba8 <_printf_i>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	7e0f      	ldrb	r7, [r1, #24]
 8004bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb0:	2f78      	cmp	r7, #120	; 0x78
 8004bb2:	4691      	mov	r9, r2
 8004bb4:	4680      	mov	r8, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	469a      	mov	sl, r3
 8004bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bbe:	d807      	bhi.n	8004bd0 <_printf_i+0x28>
 8004bc0:	2f62      	cmp	r7, #98	; 0x62
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x32>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	f000 80d4 	beq.w	8004d72 <_printf_i+0x1ca>
 8004bca:	2f58      	cmp	r7, #88	; 0x58
 8004bcc:	f000 80c0 	beq.w	8004d50 <_printf_i+0x1a8>
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd8:	e03a      	b.n	8004c50 <_printf_i+0xa8>
 8004bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bde:	2b15      	cmp	r3, #21
 8004be0:	d8f6      	bhi.n	8004bd0 <_printf_i+0x28>
 8004be2:	a101      	add	r1, pc, #4	; (adr r1, 8004be8 <_printf_i+0x40>)
 8004be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004bd1 	.word	0x08004bd1
 8004bf4:	08004bd1 	.word	0x08004bd1
 8004bf8:	08004bd1 	.word	0x08004bd1
 8004bfc:	08004bd1 	.word	0x08004bd1
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004bd1 	.word	0x08004bd1
 8004c08:	08004bd1 	.word	0x08004bd1
 8004c0c:	08004bd1 	.word	0x08004bd1
 8004c10:	08004bd1 	.word	0x08004bd1
 8004c14:	08004d59 	.word	0x08004d59
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004d13 	.word	0x08004d13
 8004c20:	08004bd1 	.word	0x08004bd1
 8004c24:	08004bd1 	.word	0x08004bd1
 8004c28:	08004d7b 	.word	0x08004d7b
 8004c2c:	08004bd1 	.word	0x08004bd1
 8004c30:	08004c81 	.word	0x08004c81
 8004c34:	08004bd1 	.word	0x08004bd1
 8004c38:	08004bd1 	.word	0x08004bd1
 8004c3c:	08004d1b 	.word	0x08004d1b
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	602a      	str	r2, [r5, #0]
 8004c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c50:	2301      	movs	r3, #1
 8004c52:	e09f      	b.n	8004d94 <_printf_i+0x1ec>
 8004c54:	6820      	ldr	r0, [r4, #0]
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	0607      	lsls	r7, r0, #24
 8004c5a:	f103 0104 	add.w	r1, r3, #4
 8004c5e:	6029      	str	r1, [r5, #0]
 8004c60:	d501      	bpl.n	8004c66 <_printf_i+0xbe>
 8004c62:	681e      	ldr	r6, [r3, #0]
 8004c64:	e003      	b.n	8004c6e <_printf_i+0xc6>
 8004c66:	0646      	lsls	r6, r0, #25
 8004c68:	d5fb      	bpl.n	8004c62 <_printf_i+0xba>
 8004c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	da03      	bge.n	8004c7a <_printf_i+0xd2>
 8004c72:	232d      	movs	r3, #45	; 0x2d
 8004c74:	4276      	negs	r6, r6
 8004c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7a:	485a      	ldr	r0, [pc, #360]	; (8004de4 <_printf_i+0x23c>)
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	e012      	b.n	8004ca6 <_printf_i+0xfe>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6029      	str	r1, [r5, #0]
 8004c88:	0605      	lsls	r5, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xe8>
 8004c8c:	681e      	ldr	r6, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <_printf_i+0xee>
 8004c90:	0641      	lsls	r1, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xe4>
 8004c94:	881e      	ldrh	r6, [r3, #0]
 8004c96:	4853      	ldr	r0, [pc, #332]	; (8004de4 <_printf_i+0x23c>)
 8004c98:	2f6f      	cmp	r7, #111	; 0x6f
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2308      	moveq	r3, #8
 8004c9e:	230a      	movne	r3, #10
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ca6:	6865      	ldr	r5, [r4, #4]
 8004ca8:	60a5      	str	r5, [r4, #8]
 8004caa:	2d00      	cmp	r5, #0
 8004cac:	bfa2      	ittt	ge
 8004cae:	6821      	ldrge	r1, [r4, #0]
 8004cb0:	f021 0104 	bicge.w	r1, r1, #4
 8004cb4:	6021      	strge	r1, [r4, #0]
 8004cb6:	b90e      	cbnz	r6, 8004cbc <_printf_i+0x114>
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	d04b      	beq.n	8004d54 <_printf_i+0x1ac>
 8004cbc:	4615      	mov	r5, r2
 8004cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc6:	5dc7      	ldrb	r7, [r0, r7]
 8004cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ccc:	4637      	mov	r7, r6
 8004cce:	42bb      	cmp	r3, r7
 8004cd0:	460e      	mov	r6, r1
 8004cd2:	d9f4      	bls.n	8004cbe <_printf_i+0x116>
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d10b      	bne.n	8004cf0 <_printf_i+0x148>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07de      	lsls	r6, r3, #31
 8004cdc:	d508      	bpl.n	8004cf0 <_printf_i+0x148>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	6861      	ldr	r1, [r4, #4]
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	bfde      	ittt	le
 8004ce6:	2330      	movle	r3, #48	; 0x30
 8004ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf0:	1b52      	subs	r2, r2, r5
 8004cf2:	6122      	str	r2, [r4, #16]
 8004cf4:	f8cd a000 	str.w	sl, [sp]
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	aa03      	add	r2, sp, #12
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4640      	mov	r0, r8
 8004d00:	f7ff fee4 	bl	8004acc <_printf_common>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d14a      	bne.n	8004d9e <_printf_i+0x1f6>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	b004      	add	sp, #16
 8004d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	f043 0320 	orr.w	r3, r3, #32
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	4833      	ldr	r0, [pc, #204]	; (8004de8 <_printf_i+0x240>)
 8004d1c:	2778      	movs	r7, #120	; 0x78
 8004d1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	6829      	ldr	r1, [r5, #0]
 8004d26:	061f      	lsls	r7, r3, #24
 8004d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d2c:	d402      	bmi.n	8004d34 <_printf_i+0x18c>
 8004d2e:	065f      	lsls	r7, r3, #25
 8004d30:	bf48      	it	mi
 8004d32:	b2b6      	uxthmi	r6, r6
 8004d34:	07df      	lsls	r7, r3, #31
 8004d36:	bf48      	it	mi
 8004d38:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3c:	6029      	str	r1, [r5, #0]
 8004d3e:	bf48      	it	mi
 8004d40:	6023      	strmi	r3, [r4, #0]
 8004d42:	b91e      	cbnz	r6, 8004d4c <_printf_i+0x1a4>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f023 0320 	bic.w	r3, r3, #32
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	e7a7      	b.n	8004ca0 <_printf_i+0xf8>
 8004d50:	4824      	ldr	r0, [pc, #144]	; (8004de4 <_printf_i+0x23c>)
 8004d52:	e7e4      	b.n	8004d1e <_printf_i+0x176>
 8004d54:	4615      	mov	r5, r2
 8004d56:	e7bd      	b.n	8004cd4 <_printf_i+0x12c>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	6826      	ldr	r6, [r4, #0]
 8004d5c:	6961      	ldr	r1, [r4, #20]
 8004d5e:	1d18      	adds	r0, r3, #4
 8004d60:	6028      	str	r0, [r5, #0]
 8004d62:	0635      	lsls	r5, r6, #24
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	d501      	bpl.n	8004d6c <_printf_i+0x1c4>
 8004d68:	6019      	str	r1, [r3, #0]
 8004d6a:	e002      	b.n	8004d72 <_printf_i+0x1ca>
 8004d6c:	0670      	lsls	r0, r6, #25
 8004d6e:	d5fb      	bpl.n	8004d68 <_printf_i+0x1c0>
 8004d70:	8019      	strh	r1, [r3, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	4615      	mov	r5, r2
 8004d78:	e7bc      	b.n	8004cf4 <_printf_i+0x14c>
 8004d7a:	682b      	ldr	r3, [r5, #0]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	602a      	str	r2, [r5, #0]
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	2100      	movs	r1, #0
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7fb fa2a 	bl	80001e0 <memchr>
 8004d8c:	b108      	cbz	r0, 8004d92 <_printf_i+0x1ea>
 8004d8e:	1b40      	subs	r0, r0, r5
 8004d90:	6060      	str	r0, [r4, #4]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	6123      	str	r3, [r4, #16]
 8004d96:	2300      	movs	r3, #0
 8004d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9c:	e7aa      	b.n	8004cf4 <_printf_i+0x14c>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	462a      	mov	r2, r5
 8004da2:	4649      	mov	r1, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	47d0      	blx	sl
 8004da8:	3001      	adds	r0, #1
 8004daa:	d0ad      	beq.n	8004d08 <_printf_i+0x160>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	079b      	lsls	r3, r3, #30
 8004db0:	d413      	bmi.n	8004dda <_printf_i+0x232>
 8004db2:	68e0      	ldr	r0, [r4, #12]
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	4298      	cmp	r0, r3
 8004db8:	bfb8      	it	lt
 8004dba:	4618      	movlt	r0, r3
 8004dbc:	e7a6      	b.n	8004d0c <_printf_i+0x164>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	47d0      	blx	sl
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d09d      	beq.n	8004d08 <_printf_i+0x160>
 8004dcc:	3501      	adds	r5, #1
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	9903      	ldr	r1, [sp, #12]
 8004dd2:	1a5b      	subs	r3, r3, r1
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dcf2      	bgt.n	8004dbe <_printf_i+0x216>
 8004dd8:	e7eb      	b.n	8004db2 <_printf_i+0x20a>
 8004dda:	2500      	movs	r5, #0
 8004ddc:	f104 0619 	add.w	r6, r4, #25
 8004de0:	e7f5      	b.n	8004dce <_printf_i+0x226>
 8004de2:	bf00      	nop
 8004de4:	08005711 	.word	0x08005711
 8004de8:	08005722 	.word	0x08005722

08004dec <_scanf_chars>:
 8004dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df0:	4615      	mov	r5, r2
 8004df2:	688a      	ldr	r2, [r1, #8]
 8004df4:	4680      	mov	r8, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b932      	cbnz	r2, 8004e08 <_scanf_chars+0x1c>
 8004dfa:	698a      	ldr	r2, [r1, #24]
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	bf0c      	ite	eq
 8004e00:	2201      	moveq	r2, #1
 8004e02:	f04f 32ff 	movne.w	r2, #4294967295
 8004e06:	608a      	str	r2, [r1, #8]
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004e9c <_scanf_chars+0xb0>
 8004e0e:	06d1      	lsls	r1, r2, #27
 8004e10:	bf5f      	itttt	pl
 8004e12:	681a      	ldrpl	r2, [r3, #0]
 8004e14:	1d11      	addpl	r1, r2, #4
 8004e16:	6019      	strpl	r1, [r3, #0]
 8004e18:	6816      	ldrpl	r6, [r2, #0]
 8004e1a:	2700      	movs	r7, #0
 8004e1c:	69a0      	ldr	r0, [r4, #24]
 8004e1e:	b188      	cbz	r0, 8004e44 <_scanf_chars+0x58>
 8004e20:	2801      	cmp	r0, #1
 8004e22:	d107      	bne.n	8004e34 <_scanf_chars+0x48>
 8004e24:	682a      	ldr	r2, [r5, #0]
 8004e26:	7811      	ldrb	r1, [r2, #0]
 8004e28:	6962      	ldr	r2, [r4, #20]
 8004e2a:	5c52      	ldrb	r2, [r2, r1]
 8004e2c:	b952      	cbnz	r2, 8004e44 <_scanf_chars+0x58>
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d031      	beq.n	8004e96 <_scanf_chars+0xaa>
 8004e32:	e022      	b.n	8004e7a <_scanf_chars+0x8e>
 8004e34:	2802      	cmp	r0, #2
 8004e36:	d120      	bne.n	8004e7a <_scanf_chars+0x8e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004e40:	071b      	lsls	r3, r3, #28
 8004e42:	d41a      	bmi.n	8004e7a <_scanf_chars+0x8e>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	06da      	lsls	r2, r3, #27
 8004e48:	bf5e      	ittt	pl
 8004e4a:	682b      	ldrpl	r3, [r5, #0]
 8004e4c:	781b      	ldrbpl	r3, [r3, #0]
 8004e4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004e52:	682a      	ldr	r2, [r5, #0]
 8004e54:	686b      	ldr	r3, [r5, #4]
 8004e56:	3201      	adds	r2, #1
 8004e58:	602a      	str	r2, [r5, #0]
 8004e5a:	68a2      	ldr	r2, [r4, #8]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	3a01      	subs	r2, #1
 8004e60:	606b      	str	r3, [r5, #4]
 8004e62:	3701      	adds	r7, #1
 8004e64:	60a2      	str	r2, [r4, #8]
 8004e66:	b142      	cbz	r2, 8004e7a <_scanf_chars+0x8e>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dcd7      	bgt.n	8004e1c <_scanf_chars+0x30>
 8004e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e70:	4629      	mov	r1, r5
 8004e72:	4640      	mov	r0, r8
 8004e74:	4798      	blx	r3
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d0d0      	beq.n	8004e1c <_scanf_chars+0x30>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	f013 0310 	ands.w	r3, r3, #16
 8004e80:	d105      	bne.n	8004e8e <_scanf_chars+0xa2>
 8004e82:	68e2      	ldr	r2, [r4, #12]
 8004e84:	3201      	adds	r2, #1
 8004e86:	60e2      	str	r2, [r4, #12]
 8004e88:	69a2      	ldr	r2, [r4, #24]
 8004e8a:	b102      	cbz	r2, 8004e8e <_scanf_chars+0xa2>
 8004e8c:	7033      	strb	r3, [r6, #0]
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	443b      	add	r3, r7
 8004e92:	6123      	str	r3, [r4, #16]
 8004e94:	2000      	movs	r0, #0
 8004e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800574f 	.word	0x0800574f

08004ea0 <_scanf_i>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	4698      	mov	r8, r3
 8004ea6:	4b74      	ldr	r3, [pc, #464]	; (8005078 <_scanf_i+0x1d8>)
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	4682      	mov	sl, r0
 8004eac:	4616      	mov	r6, r2
 8004eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	ab03      	add	r3, sp, #12
 8004eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004eba:	4b70      	ldr	r3, [pc, #448]	; (800507c <_scanf_i+0x1dc>)
 8004ebc:	69a1      	ldr	r1, [r4, #24]
 8004ebe:	4a70      	ldr	r2, [pc, #448]	; (8005080 <_scanf_i+0x1e0>)
 8004ec0:	2903      	cmp	r1, #3
 8004ec2:	bf18      	it	ne
 8004ec4:	461a      	movne	r2, r3
 8004ec6:	68a3      	ldr	r3, [r4, #8]
 8004ec8:	9201      	str	r2, [sp, #4]
 8004eca:	1e5a      	subs	r2, r3, #1
 8004ecc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ed0:	bf88      	it	hi
 8004ed2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004ed6:	4627      	mov	r7, r4
 8004ed8:	bf82      	ittt	hi
 8004eda:	eb03 0905 	addhi.w	r9, r3, r5
 8004ede:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004ee2:	60a3      	strhi	r3, [r4, #8]
 8004ee4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004ee8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004eec:	bf98      	it	ls
 8004eee:	f04f 0900 	movls.w	r9, #0
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	463d      	mov	r5, r7
 8004ef6:	f04f 0b00 	mov.w	fp, #0
 8004efa:	6831      	ldr	r1, [r6, #0]
 8004efc:	ab03      	add	r3, sp, #12
 8004efe:	7809      	ldrb	r1, [r1, #0]
 8004f00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f7fb f96b 	bl	80001e0 <memchr>
 8004f0a:	b328      	cbz	r0, 8004f58 <_scanf_i+0xb8>
 8004f0c:	f1bb 0f01 	cmp.w	fp, #1
 8004f10:	d159      	bne.n	8004fc6 <_scanf_i+0x126>
 8004f12:	6862      	ldr	r2, [r4, #4]
 8004f14:	b92a      	cbnz	r2, 8004f22 <_scanf_i+0x82>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	6063      	str	r3, [r4, #4]
 8004f20:	6022      	str	r2, [r4, #0]
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	68a2      	ldr	r2, [r4, #8]
 8004f2c:	1e51      	subs	r1, r2, #1
 8004f2e:	60a1      	str	r1, [r4, #8]
 8004f30:	b192      	cbz	r2, 8004f58 <_scanf_i+0xb8>
 8004f32:	6832      	ldr	r2, [r6, #0]
 8004f34:	1c51      	adds	r1, r2, #1
 8004f36:	6031      	str	r1, [r6, #0]
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	f805 2b01 	strb.w	r2, [r5], #1
 8004f3e:	6872      	ldr	r2, [r6, #4]
 8004f40:	3a01      	subs	r2, #1
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	6072      	str	r2, [r6, #4]
 8004f46:	dc07      	bgt.n	8004f58 <_scanf_i+0xb8>
 8004f48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4650      	mov	r0, sl
 8004f50:	4790      	blx	r2
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f040 8085 	bne.w	8005062 <_scanf_i+0x1c2>
 8004f58:	f10b 0b01 	add.w	fp, fp, #1
 8004f5c:	f1bb 0f03 	cmp.w	fp, #3
 8004f60:	d1cb      	bne.n	8004efa <_scanf_i+0x5a>
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	b90b      	cbnz	r3, 8004f6a <_scanf_i+0xca>
 8004f66:	230a      	movs	r3, #10
 8004f68:	6063      	str	r3, [r4, #4]
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	4945      	ldr	r1, [pc, #276]	; (8005084 <_scanf_i+0x1e4>)
 8004f6e:	6960      	ldr	r0, [r4, #20]
 8004f70:	1ac9      	subs	r1, r1, r3
 8004f72:	f000 f999 	bl	80052a8 <__sccl>
 8004f76:	f04f 0b00 	mov.w	fp, #0
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d03d      	beq.n	8004ffe <_scanf_i+0x15e>
 8004f82:	6831      	ldr	r1, [r6, #0]
 8004f84:	6960      	ldr	r0, [r4, #20]
 8004f86:	f891 c000 	ldrb.w	ip, [r1]
 8004f8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d035      	beq.n	8004ffe <_scanf_i+0x15e>
 8004f92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004f96:	d124      	bne.n	8004fe2 <_scanf_i+0x142>
 8004f98:	0510      	lsls	r0, r2, #20
 8004f9a:	d522      	bpl.n	8004fe2 <_scanf_i+0x142>
 8004f9c:	f10b 0b01 	add.w	fp, fp, #1
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	d003      	beq.n	8004fae <_scanf_i+0x10e>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fac:	60a3      	str	r3, [r4, #8]
 8004fae:	6873      	ldr	r3, [r6, #4]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	6073      	str	r3, [r6, #4]
 8004fb6:	dd1b      	ble.n	8004ff0 <_scanf_i+0x150>
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	6033      	str	r3, [r6, #0]
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60a3      	str	r3, [r4, #8]
 8004fc4:	e7d9      	b.n	8004f7a <_scanf_i+0xda>
 8004fc6:	f1bb 0f02 	cmp.w	fp, #2
 8004fca:	d1ae      	bne.n	8004f2a <_scanf_i+0x8a>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004fd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004fd6:	d1bf      	bne.n	8004f58 <_scanf_i+0xb8>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	6063      	str	r3, [r4, #4]
 8004fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe0:	e7a2      	b.n	8004f28 <_scanf_i+0x88>
 8004fe2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	780b      	ldrb	r3, [r1, #0]
 8004fea:	f805 3b01 	strb.w	r3, [r5], #1
 8004fee:	e7de      	b.n	8004fae <_scanf_i+0x10e>
 8004ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	4798      	blx	r3
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d0df      	beq.n	8004fbe <_scanf_i+0x11e>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	05d9      	lsls	r1, r3, #23
 8005002:	d50d      	bpl.n	8005020 <_scanf_i+0x180>
 8005004:	42bd      	cmp	r5, r7
 8005006:	d909      	bls.n	800501c <_scanf_i+0x17c>
 8005008:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800500c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005010:	4632      	mov	r2, r6
 8005012:	4650      	mov	r0, sl
 8005014:	4798      	blx	r3
 8005016:	f105 39ff 	add.w	r9, r5, #4294967295
 800501a:	464d      	mov	r5, r9
 800501c:	42bd      	cmp	r5, r7
 800501e:	d028      	beq.n	8005072 <_scanf_i+0x1d2>
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	f012 0210 	ands.w	r2, r2, #16
 8005026:	d113      	bne.n	8005050 <_scanf_i+0x1b0>
 8005028:	702a      	strb	r2, [r5, #0]
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	9e01      	ldr	r6, [sp, #4]
 800502e:	4639      	mov	r1, r7
 8005030:	4650      	mov	r0, sl
 8005032:	47b0      	blx	r6
 8005034:	f8d8 3000 	ldr.w	r3, [r8]
 8005038:	6821      	ldr	r1, [r4, #0]
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	f8c8 2000 	str.w	r2, [r8]
 8005040:	f011 0f20 	tst.w	r1, #32
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	d00f      	beq.n	8005068 <_scanf_i+0x1c8>
 8005048:	6018      	str	r0, [r3, #0]
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60e3      	str	r3, [r4, #12]
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	1bed      	subs	r5, r5, r7
 8005054:	445d      	add	r5, fp
 8005056:	442b      	add	r3, r5
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	2000      	movs	r0, #0
 800505c:	b007      	add	sp, #28
 800505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	f04f 0b00 	mov.w	fp, #0
 8005066:	e7ca      	b.n	8004ffe <_scanf_i+0x15e>
 8005068:	07ca      	lsls	r2, r1, #31
 800506a:	bf4c      	ite	mi
 800506c:	8018      	strhmi	r0, [r3, #0]
 800506e:	6018      	strpl	r0, [r3, #0]
 8005070:	e7eb      	b.n	800504a <_scanf_i+0x1aa>
 8005072:	2001      	movs	r0, #1
 8005074:	e7f2      	b.n	800505c <_scanf_i+0x1bc>
 8005076:	bf00      	nop
 8005078:	080056ac 	.word	0x080056ac
 800507c:	0800565d 	.word	0x0800565d
 8005080:	08005575 	.word	0x08005575
 8005084:	08005743 	.word	0x08005743

08005088 <__sflush_r>:
 8005088:	898a      	ldrh	r2, [r1, #12]
 800508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508e:	4605      	mov	r5, r0
 8005090:	0710      	lsls	r0, r2, #28
 8005092:	460c      	mov	r4, r1
 8005094:	d458      	bmi.n	8005148 <__sflush_r+0xc0>
 8005096:	684b      	ldr	r3, [r1, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	dc05      	bgt.n	80050a8 <__sflush_r+0x20>
 800509c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	dc02      	bgt.n	80050a8 <__sflush_r+0x20>
 80050a2:	2000      	movs	r0, #0
 80050a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	d0f9      	beq.n	80050a2 <__sflush_r+0x1a>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050b4:	682f      	ldr	r7, [r5, #0]
 80050b6:	6a21      	ldr	r1, [r4, #32]
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	d032      	beq.n	8005122 <__sflush_r+0x9a>
 80050bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	075a      	lsls	r2, r3, #29
 80050c2:	d505      	bpl.n	80050d0 <__sflush_r+0x48>
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	1ac0      	subs	r0, r0, r3
 80050c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050ca:	b10b      	cbz	r3, 80050d0 <__sflush_r+0x48>
 80050cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ce:	1ac0      	subs	r0, r0, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	4602      	mov	r2, r0
 80050d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050d6:	6a21      	ldr	r1, [r4, #32]
 80050d8:	4628      	mov	r0, r5
 80050da:	47b0      	blx	r6
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	d106      	bne.n	80050f0 <__sflush_r+0x68>
 80050e2:	6829      	ldr	r1, [r5, #0]
 80050e4:	291d      	cmp	r1, #29
 80050e6:	d82b      	bhi.n	8005140 <__sflush_r+0xb8>
 80050e8:	4a29      	ldr	r2, [pc, #164]	; (8005190 <__sflush_r+0x108>)
 80050ea:	410a      	asrs	r2, r1
 80050ec:	07d6      	lsls	r6, r2, #31
 80050ee:	d427      	bmi.n	8005140 <__sflush_r+0xb8>
 80050f0:	2200      	movs	r2, #0
 80050f2:	6062      	str	r2, [r4, #4]
 80050f4:	04d9      	lsls	r1, r3, #19
 80050f6:	6922      	ldr	r2, [r4, #16]
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	d504      	bpl.n	8005106 <__sflush_r+0x7e>
 80050fc:	1c42      	adds	r2, r0, #1
 80050fe:	d101      	bne.n	8005104 <__sflush_r+0x7c>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b903      	cbnz	r3, 8005106 <__sflush_r+0x7e>
 8005104:	6560      	str	r0, [r4, #84]	; 0x54
 8005106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005108:	602f      	str	r7, [r5, #0]
 800510a:	2900      	cmp	r1, #0
 800510c:	d0c9      	beq.n	80050a2 <__sflush_r+0x1a>
 800510e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005112:	4299      	cmp	r1, r3
 8005114:	d002      	beq.n	800511c <__sflush_r+0x94>
 8005116:	4628      	mov	r0, r5
 8005118:	f7ff f8ca 	bl	80042b0 <_free_r>
 800511c:	2000      	movs	r0, #0
 800511e:	6360      	str	r0, [r4, #52]	; 0x34
 8005120:	e7c0      	b.n	80050a4 <__sflush_r+0x1c>
 8005122:	2301      	movs	r3, #1
 8005124:	4628      	mov	r0, r5
 8005126:	47b0      	blx	r6
 8005128:	1c41      	adds	r1, r0, #1
 800512a:	d1c8      	bne.n	80050be <__sflush_r+0x36>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0c5      	beq.n	80050be <__sflush_r+0x36>
 8005132:	2b1d      	cmp	r3, #29
 8005134:	d001      	beq.n	800513a <__sflush_r+0xb2>
 8005136:	2b16      	cmp	r3, #22
 8005138:	d101      	bne.n	800513e <__sflush_r+0xb6>
 800513a:	602f      	str	r7, [r5, #0]
 800513c:	e7b1      	b.n	80050a2 <__sflush_r+0x1a>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005144:	81a3      	strh	r3, [r4, #12]
 8005146:	e7ad      	b.n	80050a4 <__sflush_r+0x1c>
 8005148:	690f      	ldr	r7, [r1, #16]
 800514a:	2f00      	cmp	r7, #0
 800514c:	d0a9      	beq.n	80050a2 <__sflush_r+0x1a>
 800514e:	0793      	lsls	r3, r2, #30
 8005150:	680e      	ldr	r6, [r1, #0]
 8005152:	bf08      	it	eq
 8005154:	694b      	ldreq	r3, [r1, #20]
 8005156:	600f      	str	r7, [r1, #0]
 8005158:	bf18      	it	ne
 800515a:	2300      	movne	r3, #0
 800515c:	eba6 0807 	sub.w	r8, r6, r7
 8005160:	608b      	str	r3, [r1, #8]
 8005162:	f1b8 0f00 	cmp.w	r8, #0
 8005166:	dd9c      	ble.n	80050a2 <__sflush_r+0x1a>
 8005168:	6a21      	ldr	r1, [r4, #32]
 800516a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800516c:	4643      	mov	r3, r8
 800516e:	463a      	mov	r2, r7
 8005170:	4628      	mov	r0, r5
 8005172:	47b0      	blx	r6
 8005174:	2800      	cmp	r0, #0
 8005176:	dc06      	bgt.n	8005186 <__sflush_r+0xfe>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	e78e      	b.n	80050a4 <__sflush_r+0x1c>
 8005186:	4407      	add	r7, r0
 8005188:	eba8 0800 	sub.w	r8, r8, r0
 800518c:	e7e9      	b.n	8005162 <__sflush_r+0xda>
 800518e:	bf00      	nop
 8005190:	dfbffffe 	.word	0xdfbffffe

08005194 <_fflush_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	4605      	mov	r5, r0
 800519a:	460c      	mov	r4, r1
 800519c:	b913      	cbnz	r3, 80051a4 <_fflush_r+0x10>
 800519e:	2500      	movs	r5, #0
 80051a0:	4628      	mov	r0, r5
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	b118      	cbz	r0, 80051ae <_fflush_r+0x1a>
 80051a6:	6a03      	ldr	r3, [r0, #32]
 80051a8:	b90b      	cbnz	r3, 80051ae <_fflush_r+0x1a>
 80051aa:	f7fe fe3f 	bl	8003e2c <__sinit>
 80051ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f3      	beq.n	800519e <_fflush_r+0xa>
 80051b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051b8:	07d0      	lsls	r0, r2, #31
 80051ba:	d404      	bmi.n	80051c6 <_fflush_r+0x32>
 80051bc:	0599      	lsls	r1, r3, #22
 80051be:	d402      	bmi.n	80051c6 <_fflush_r+0x32>
 80051c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c2:	f7ff f86b 	bl	800429c <__retarget_lock_acquire_recursive>
 80051c6:	4628      	mov	r0, r5
 80051c8:	4621      	mov	r1, r4
 80051ca:	f7ff ff5d 	bl	8005088 <__sflush_r>
 80051ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d0:	07da      	lsls	r2, r3, #31
 80051d2:	4605      	mov	r5, r0
 80051d4:	d4e4      	bmi.n	80051a0 <_fflush_r+0xc>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	059b      	lsls	r3, r3, #22
 80051da:	d4e1      	bmi.n	80051a0 <_fflush_r+0xc>
 80051dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051de:	f7ff f85e 	bl	800429e <__retarget_lock_release_recursive>
 80051e2:	e7dd      	b.n	80051a0 <_fflush_r+0xc>

080051e4 <__swhatbuf_r>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	460c      	mov	r4, r1
 80051e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ec:	2900      	cmp	r1, #0
 80051ee:	b096      	sub	sp, #88	; 0x58
 80051f0:	4615      	mov	r5, r2
 80051f2:	461e      	mov	r6, r3
 80051f4:	da0d      	bge.n	8005212 <__swhatbuf_r+0x2e>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	bf0c      	ite	eq
 8005202:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005206:	2340      	movne	r3, #64	; 0x40
 8005208:	2000      	movs	r0, #0
 800520a:	6031      	str	r1, [r6, #0]
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	b016      	add	sp, #88	; 0x58
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	466a      	mov	r2, sp
 8005214:	f000 f8bc 	bl	8005390 <_fstat_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	dbec      	blt.n	80051f6 <__swhatbuf_r+0x12>
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005222:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005226:	4259      	negs	r1, r3
 8005228:	4159      	adcs	r1, r3
 800522a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522e:	e7eb      	b.n	8005208 <__swhatbuf_r+0x24>

08005230 <__smakebuf_r>:
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005234:	079d      	lsls	r5, r3, #30
 8005236:	4606      	mov	r6, r0
 8005238:	460c      	mov	r4, r1
 800523a:	d507      	bpl.n	800524c <__smakebuf_r+0x1c>
 800523c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2301      	movs	r3, #1
 8005246:	6163      	str	r3, [r4, #20]
 8005248:	b002      	add	sp, #8
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	ab01      	add	r3, sp, #4
 800524e:	466a      	mov	r2, sp
 8005250:	f7ff ffc8 	bl	80051e4 <__swhatbuf_r>
 8005254:	9900      	ldr	r1, [sp, #0]
 8005256:	4605      	mov	r5, r0
 8005258:	4630      	mov	r0, r6
 800525a:	f7ff f895 	bl	8004388 <_malloc_r>
 800525e:	b948      	cbnz	r0, 8005274 <__smakebuf_r+0x44>
 8005260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005264:	059a      	lsls	r2, r3, #22
 8005266:	d4ef      	bmi.n	8005248 <__smakebuf_r+0x18>
 8005268:	f023 0303 	bic.w	r3, r3, #3
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	e7e3      	b.n	800523c <__smakebuf_r+0xc>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	6020      	str	r0, [r4, #0]
 8005278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	6163      	str	r3, [r4, #20]
 8005282:	9b01      	ldr	r3, [sp, #4]
 8005284:	6120      	str	r0, [r4, #16]
 8005286:	b15b      	cbz	r3, 80052a0 <__smakebuf_r+0x70>
 8005288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528c:	4630      	mov	r0, r6
 800528e:	f000 f891 	bl	80053b4 <_isatty_r>
 8005292:	b128      	cbz	r0, 80052a0 <__smakebuf_r+0x70>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	431d      	orrs	r5, r3
 80052a4:	81a5      	strh	r5, [r4, #12]
 80052a6:	e7cf      	b.n	8005248 <__smakebuf_r+0x18>

080052a8 <__sccl>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	780b      	ldrb	r3, [r1, #0]
 80052ac:	4604      	mov	r4, r0
 80052ae:	2b5e      	cmp	r3, #94	; 0x5e
 80052b0:	bf0b      	itete	eq
 80052b2:	784b      	ldrbeq	r3, [r1, #1]
 80052b4:	1c4a      	addne	r2, r1, #1
 80052b6:	1c8a      	addeq	r2, r1, #2
 80052b8:	2100      	movne	r1, #0
 80052ba:	bf08      	it	eq
 80052bc:	2101      	moveq	r1, #1
 80052be:	3801      	subs	r0, #1
 80052c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80052c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80052c8:	42a8      	cmp	r0, r5
 80052ca:	d1fb      	bne.n	80052c4 <__sccl+0x1c>
 80052cc:	b90b      	cbnz	r3, 80052d2 <__sccl+0x2a>
 80052ce:	1e50      	subs	r0, r2, #1
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	f081 0101 	eor.w	r1, r1, #1
 80052d6:	54e1      	strb	r1, [r4, r3]
 80052d8:	4610      	mov	r0, r2
 80052da:	4602      	mov	r2, r0
 80052dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052e0:	2d2d      	cmp	r5, #45	; 0x2d
 80052e2:	d005      	beq.n	80052f0 <__sccl+0x48>
 80052e4:	2d5d      	cmp	r5, #93	; 0x5d
 80052e6:	d016      	beq.n	8005316 <__sccl+0x6e>
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	d0f1      	beq.n	80052d0 <__sccl+0x28>
 80052ec:	462b      	mov	r3, r5
 80052ee:	e7f2      	b.n	80052d6 <__sccl+0x2e>
 80052f0:	7846      	ldrb	r6, [r0, #1]
 80052f2:	2e5d      	cmp	r6, #93	; 0x5d
 80052f4:	d0fa      	beq.n	80052ec <__sccl+0x44>
 80052f6:	42b3      	cmp	r3, r6
 80052f8:	dcf8      	bgt.n	80052ec <__sccl+0x44>
 80052fa:	3002      	adds	r0, #2
 80052fc:	461a      	mov	r2, r3
 80052fe:	3201      	adds	r2, #1
 8005300:	4296      	cmp	r6, r2
 8005302:	54a1      	strb	r1, [r4, r2]
 8005304:	dcfb      	bgt.n	80052fe <__sccl+0x56>
 8005306:	1af2      	subs	r2, r6, r3
 8005308:	3a01      	subs	r2, #1
 800530a:	1c5d      	adds	r5, r3, #1
 800530c:	42b3      	cmp	r3, r6
 800530e:	bfa8      	it	ge
 8005310:	2200      	movge	r2, #0
 8005312:	18ab      	adds	r3, r5, r2
 8005314:	e7e1      	b.n	80052da <__sccl+0x32>
 8005316:	4610      	mov	r0, r2
 8005318:	e7da      	b.n	80052d0 <__sccl+0x28>

0800531a <__submore>:
 800531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	460c      	mov	r4, r1
 8005320:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005326:	4299      	cmp	r1, r3
 8005328:	d11d      	bne.n	8005366 <__submore+0x4c>
 800532a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800532e:	f7ff f82b 	bl	8004388 <_malloc_r>
 8005332:	b918      	cbnz	r0, 800533c <__submore+0x22>
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005340:	63a3      	str	r3, [r4, #56]	; 0x38
 8005342:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005346:	6360      	str	r0, [r4, #52]	; 0x34
 8005348:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800534c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005350:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005354:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005358:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800535c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005360:	6020      	str	r0, [r4, #0]
 8005362:	2000      	movs	r0, #0
 8005364:	e7e8      	b.n	8005338 <__submore+0x1e>
 8005366:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005368:	0077      	lsls	r7, r6, #1
 800536a:	463a      	mov	r2, r7
 800536c:	f000 f850 	bl	8005410 <_realloc_r>
 8005370:	4605      	mov	r5, r0
 8005372:	2800      	cmp	r0, #0
 8005374:	d0de      	beq.n	8005334 <__submore+0x1a>
 8005376:	eb00 0806 	add.w	r8, r0, r6
 800537a:	4601      	mov	r1, r0
 800537c:	4632      	mov	r2, r6
 800537e:	4640      	mov	r0, r8
 8005380:	f000 f838 	bl	80053f4 <memcpy>
 8005384:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005388:	f8c4 8000 	str.w	r8, [r4]
 800538c:	e7e9      	b.n	8005362 <__submore+0x48>
	...

08005390 <_fstat_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d07      	ldr	r5, [pc, #28]	; (80053b0 <_fstat_r+0x20>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	f7fb fc3e 	bl	8000c1e <_fstat>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d102      	bne.n	80053ac <_fstat_r+0x1c>
 80053a6:	682b      	ldr	r3, [r5, #0]
 80053a8:	b103      	cbz	r3, 80053ac <_fstat_r+0x1c>
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	bd38      	pop	{r3, r4, r5, pc}
 80053ae:	bf00      	nop
 80053b0:	20000900 	.word	0x20000900

080053b4 <_isatty_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4d06      	ldr	r5, [pc, #24]	; (80053d0 <_isatty_r+0x1c>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	602b      	str	r3, [r5, #0]
 80053c0:	f7fb fc3d 	bl	8000c3e <_isatty>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_isatty_r+0x1a>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_isatty_r+0x1a>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	20000900 	.word	0x20000900

080053d4 <_sbrk_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d06      	ldr	r5, [pc, #24]	; (80053f0 <_sbrk_r+0x1c>)
 80053d8:	2300      	movs	r3, #0
 80053da:	4604      	mov	r4, r0
 80053dc:	4608      	mov	r0, r1
 80053de:	602b      	str	r3, [r5, #0]
 80053e0:	f7fb fc46 	bl	8000c70 <_sbrk>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_sbrk_r+0x1a>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_sbrk_r+0x1a>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	20000900 	.word	0x20000900

080053f4 <memcpy>:
 80053f4:	440a      	add	r2, r1
 80053f6:	4291      	cmp	r1, r2
 80053f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053fc:	d100      	bne.n	8005400 <memcpy+0xc>
 80053fe:	4770      	bx	lr
 8005400:	b510      	push	{r4, lr}
 8005402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800540a:	4291      	cmp	r1, r2
 800540c:	d1f9      	bne.n	8005402 <memcpy+0xe>
 800540e:	bd10      	pop	{r4, pc}

08005410 <_realloc_r>:
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	4680      	mov	r8, r0
 8005416:	4614      	mov	r4, r2
 8005418:	460e      	mov	r6, r1
 800541a:	b921      	cbnz	r1, 8005426 <_realloc_r+0x16>
 800541c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	4611      	mov	r1, r2
 8005422:	f7fe bfb1 	b.w	8004388 <_malloc_r>
 8005426:	b92a      	cbnz	r2, 8005434 <_realloc_r+0x24>
 8005428:	f7fe ff42 	bl	80042b0 <_free_r>
 800542c:	4625      	mov	r5, r4
 800542e:	4628      	mov	r0, r5
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	f000 f914 	bl	8005660 <_malloc_usable_size_r>
 8005438:	4284      	cmp	r4, r0
 800543a:	4607      	mov	r7, r0
 800543c:	d802      	bhi.n	8005444 <_realloc_r+0x34>
 800543e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005442:	d812      	bhi.n	800546a <_realloc_r+0x5a>
 8005444:	4621      	mov	r1, r4
 8005446:	4640      	mov	r0, r8
 8005448:	f7fe ff9e 	bl	8004388 <_malloc_r>
 800544c:	4605      	mov	r5, r0
 800544e:	2800      	cmp	r0, #0
 8005450:	d0ed      	beq.n	800542e <_realloc_r+0x1e>
 8005452:	42bc      	cmp	r4, r7
 8005454:	4622      	mov	r2, r4
 8005456:	4631      	mov	r1, r6
 8005458:	bf28      	it	cs
 800545a:	463a      	movcs	r2, r7
 800545c:	f7ff ffca 	bl	80053f4 <memcpy>
 8005460:	4631      	mov	r1, r6
 8005462:	4640      	mov	r0, r8
 8005464:	f7fe ff24 	bl	80042b0 <_free_r>
 8005468:	e7e1      	b.n	800542e <_realloc_r+0x1e>
 800546a:	4635      	mov	r5, r6
 800546c:	e7df      	b.n	800542e <_realloc_r+0x1e>
	...

08005470 <_strtol_l.constprop.0>:
 8005470:	2b01      	cmp	r3, #1
 8005472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005476:	d001      	beq.n	800547c <_strtol_l.constprop.0+0xc>
 8005478:	2b24      	cmp	r3, #36	; 0x24
 800547a:	d906      	bls.n	800548a <_strtol_l.constprop.0+0x1a>
 800547c:	f7fe fee4 	bl	8004248 <__errno>
 8005480:	2316      	movs	r3, #22
 8005482:	6003      	str	r3, [r0, #0]
 8005484:	2000      	movs	r0, #0
 8005486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005570 <_strtol_l.constprop.0+0x100>
 800548e:	460d      	mov	r5, r1
 8005490:	462e      	mov	r6, r5
 8005492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005496:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800549a:	f017 0708 	ands.w	r7, r7, #8
 800549e:	d1f7      	bne.n	8005490 <_strtol_l.constprop.0+0x20>
 80054a0:	2c2d      	cmp	r4, #45	; 0x2d
 80054a2:	d132      	bne.n	800550a <_strtol_l.constprop.0+0x9a>
 80054a4:	782c      	ldrb	r4, [r5, #0]
 80054a6:	2701      	movs	r7, #1
 80054a8:	1cb5      	adds	r5, r6, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d05b      	beq.n	8005566 <_strtol_l.constprop.0+0xf6>
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d109      	bne.n	80054c6 <_strtol_l.constprop.0+0x56>
 80054b2:	2c30      	cmp	r4, #48	; 0x30
 80054b4:	d107      	bne.n	80054c6 <_strtol_l.constprop.0+0x56>
 80054b6:	782c      	ldrb	r4, [r5, #0]
 80054b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80054bc:	2c58      	cmp	r4, #88	; 0x58
 80054be:	d14d      	bne.n	800555c <_strtol_l.constprop.0+0xec>
 80054c0:	786c      	ldrb	r4, [r5, #1]
 80054c2:	2310      	movs	r3, #16
 80054c4:	3502      	adds	r5, #2
 80054c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80054ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80054ce:	f04f 0e00 	mov.w	lr, #0
 80054d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80054d6:	4676      	mov	r6, lr
 80054d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80054dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80054e0:	f1bc 0f09 	cmp.w	ip, #9
 80054e4:	d816      	bhi.n	8005514 <_strtol_l.constprop.0+0xa4>
 80054e6:	4664      	mov	r4, ip
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	dd24      	ble.n	8005536 <_strtol_l.constprop.0+0xc6>
 80054ec:	f1be 3fff 	cmp.w	lr, #4294967295
 80054f0:	d008      	beq.n	8005504 <_strtol_l.constprop.0+0x94>
 80054f2:	45b1      	cmp	r9, r6
 80054f4:	d31c      	bcc.n	8005530 <_strtol_l.constprop.0+0xc0>
 80054f6:	d101      	bne.n	80054fc <_strtol_l.constprop.0+0x8c>
 80054f8:	45a2      	cmp	sl, r4
 80054fa:	db19      	blt.n	8005530 <_strtol_l.constprop.0+0xc0>
 80054fc:	fb06 4603 	mla	r6, r6, r3, r4
 8005500:	f04f 0e01 	mov.w	lr, #1
 8005504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005508:	e7e8      	b.n	80054dc <_strtol_l.constprop.0+0x6c>
 800550a:	2c2b      	cmp	r4, #43	; 0x2b
 800550c:	bf04      	itt	eq
 800550e:	782c      	ldrbeq	r4, [r5, #0]
 8005510:	1cb5      	addeq	r5, r6, #2
 8005512:	e7ca      	b.n	80054aa <_strtol_l.constprop.0+0x3a>
 8005514:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005518:	f1bc 0f19 	cmp.w	ip, #25
 800551c:	d801      	bhi.n	8005522 <_strtol_l.constprop.0+0xb2>
 800551e:	3c37      	subs	r4, #55	; 0x37
 8005520:	e7e2      	b.n	80054e8 <_strtol_l.constprop.0+0x78>
 8005522:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005526:	f1bc 0f19 	cmp.w	ip, #25
 800552a:	d804      	bhi.n	8005536 <_strtol_l.constprop.0+0xc6>
 800552c:	3c57      	subs	r4, #87	; 0x57
 800552e:	e7db      	b.n	80054e8 <_strtol_l.constprop.0+0x78>
 8005530:	f04f 3eff 	mov.w	lr, #4294967295
 8005534:	e7e6      	b.n	8005504 <_strtol_l.constprop.0+0x94>
 8005536:	f1be 3fff 	cmp.w	lr, #4294967295
 800553a:	d105      	bne.n	8005548 <_strtol_l.constprop.0+0xd8>
 800553c:	2322      	movs	r3, #34	; 0x22
 800553e:	6003      	str	r3, [r0, #0]
 8005540:	4646      	mov	r6, r8
 8005542:	b942      	cbnz	r2, 8005556 <_strtol_l.constprop.0+0xe6>
 8005544:	4630      	mov	r0, r6
 8005546:	e79e      	b.n	8005486 <_strtol_l.constprop.0+0x16>
 8005548:	b107      	cbz	r7, 800554c <_strtol_l.constprop.0+0xdc>
 800554a:	4276      	negs	r6, r6
 800554c:	2a00      	cmp	r2, #0
 800554e:	d0f9      	beq.n	8005544 <_strtol_l.constprop.0+0xd4>
 8005550:	f1be 0f00 	cmp.w	lr, #0
 8005554:	d000      	beq.n	8005558 <_strtol_l.constprop.0+0xe8>
 8005556:	1e69      	subs	r1, r5, #1
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	e7f3      	b.n	8005544 <_strtol_l.constprop.0+0xd4>
 800555c:	2430      	movs	r4, #48	; 0x30
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1b1      	bne.n	80054c6 <_strtol_l.constprop.0+0x56>
 8005562:	2308      	movs	r3, #8
 8005564:	e7af      	b.n	80054c6 <_strtol_l.constprop.0+0x56>
 8005566:	2c30      	cmp	r4, #48	; 0x30
 8005568:	d0a5      	beq.n	80054b6 <_strtol_l.constprop.0+0x46>
 800556a:	230a      	movs	r3, #10
 800556c:	e7ab      	b.n	80054c6 <_strtol_l.constprop.0+0x56>
 800556e:	bf00      	nop
 8005570:	0800574f 	.word	0x0800574f

08005574 <_strtol_r>:
 8005574:	f7ff bf7c 	b.w	8005470 <_strtol_l.constprop.0>

08005578 <_strtoul_l.constprop.0>:
 8005578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800557c:	4f36      	ldr	r7, [pc, #216]	; (8005658 <_strtoul_l.constprop.0+0xe0>)
 800557e:	4686      	mov	lr, r0
 8005580:	460d      	mov	r5, r1
 8005582:	4628      	mov	r0, r5
 8005584:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005588:	5d3e      	ldrb	r6, [r7, r4]
 800558a:	f016 0608 	ands.w	r6, r6, #8
 800558e:	d1f8      	bne.n	8005582 <_strtoul_l.constprop.0+0xa>
 8005590:	2c2d      	cmp	r4, #45	; 0x2d
 8005592:	d130      	bne.n	80055f6 <_strtoul_l.constprop.0+0x7e>
 8005594:	782c      	ldrb	r4, [r5, #0]
 8005596:	2601      	movs	r6, #1
 8005598:	1c85      	adds	r5, r0, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d057      	beq.n	800564e <_strtoul_l.constprop.0+0xd6>
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d109      	bne.n	80055b6 <_strtoul_l.constprop.0+0x3e>
 80055a2:	2c30      	cmp	r4, #48	; 0x30
 80055a4:	d107      	bne.n	80055b6 <_strtoul_l.constprop.0+0x3e>
 80055a6:	7828      	ldrb	r0, [r5, #0]
 80055a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80055ac:	2858      	cmp	r0, #88	; 0x58
 80055ae:	d149      	bne.n	8005644 <_strtoul_l.constprop.0+0xcc>
 80055b0:	786c      	ldrb	r4, [r5, #1]
 80055b2:	2310      	movs	r3, #16
 80055b4:	3502      	adds	r5, #2
 80055b6:	f04f 38ff 	mov.w	r8, #4294967295
 80055ba:	2700      	movs	r7, #0
 80055bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80055c0:	fb03 f908 	mul.w	r9, r3, r8
 80055c4:	ea6f 0909 	mvn.w	r9, r9
 80055c8:	4638      	mov	r0, r7
 80055ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80055ce:	f1bc 0f09 	cmp.w	ip, #9
 80055d2:	d815      	bhi.n	8005600 <_strtoul_l.constprop.0+0x88>
 80055d4:	4664      	mov	r4, ip
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	dd23      	ble.n	8005622 <_strtoul_l.constprop.0+0xaa>
 80055da:	f1b7 3fff 	cmp.w	r7, #4294967295
 80055de:	d007      	beq.n	80055f0 <_strtoul_l.constprop.0+0x78>
 80055e0:	4580      	cmp	r8, r0
 80055e2:	d31b      	bcc.n	800561c <_strtoul_l.constprop.0+0xa4>
 80055e4:	d101      	bne.n	80055ea <_strtoul_l.constprop.0+0x72>
 80055e6:	45a1      	cmp	r9, r4
 80055e8:	db18      	blt.n	800561c <_strtoul_l.constprop.0+0xa4>
 80055ea:	fb00 4003 	mla	r0, r0, r3, r4
 80055ee:	2701      	movs	r7, #1
 80055f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055f4:	e7e9      	b.n	80055ca <_strtoul_l.constprop.0+0x52>
 80055f6:	2c2b      	cmp	r4, #43	; 0x2b
 80055f8:	bf04      	itt	eq
 80055fa:	782c      	ldrbeq	r4, [r5, #0]
 80055fc:	1c85      	addeq	r5, r0, #2
 80055fe:	e7cc      	b.n	800559a <_strtoul_l.constprop.0+0x22>
 8005600:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005604:	f1bc 0f19 	cmp.w	ip, #25
 8005608:	d801      	bhi.n	800560e <_strtoul_l.constprop.0+0x96>
 800560a:	3c37      	subs	r4, #55	; 0x37
 800560c:	e7e3      	b.n	80055d6 <_strtoul_l.constprop.0+0x5e>
 800560e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005612:	f1bc 0f19 	cmp.w	ip, #25
 8005616:	d804      	bhi.n	8005622 <_strtoul_l.constprop.0+0xaa>
 8005618:	3c57      	subs	r4, #87	; 0x57
 800561a:	e7dc      	b.n	80055d6 <_strtoul_l.constprop.0+0x5e>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295
 8005620:	e7e6      	b.n	80055f0 <_strtoul_l.constprop.0+0x78>
 8005622:	1c7b      	adds	r3, r7, #1
 8005624:	d106      	bne.n	8005634 <_strtoul_l.constprop.0+0xbc>
 8005626:	2322      	movs	r3, #34	; 0x22
 8005628:	f8ce 3000 	str.w	r3, [lr]
 800562c:	4638      	mov	r0, r7
 800562e:	b932      	cbnz	r2, 800563e <_strtoul_l.constprop.0+0xc6>
 8005630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005634:	b106      	cbz	r6, 8005638 <_strtoul_l.constprop.0+0xc0>
 8005636:	4240      	negs	r0, r0
 8005638:	2a00      	cmp	r2, #0
 800563a:	d0f9      	beq.n	8005630 <_strtoul_l.constprop.0+0xb8>
 800563c:	b107      	cbz	r7, 8005640 <_strtoul_l.constprop.0+0xc8>
 800563e:	1e69      	subs	r1, r5, #1
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	e7f5      	b.n	8005630 <_strtoul_l.constprop.0+0xb8>
 8005644:	2430      	movs	r4, #48	; 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1b5      	bne.n	80055b6 <_strtoul_l.constprop.0+0x3e>
 800564a:	2308      	movs	r3, #8
 800564c:	e7b3      	b.n	80055b6 <_strtoul_l.constprop.0+0x3e>
 800564e:	2c30      	cmp	r4, #48	; 0x30
 8005650:	d0a9      	beq.n	80055a6 <_strtoul_l.constprop.0+0x2e>
 8005652:	230a      	movs	r3, #10
 8005654:	e7af      	b.n	80055b6 <_strtoul_l.constprop.0+0x3e>
 8005656:	bf00      	nop
 8005658:	0800574f 	.word	0x0800574f

0800565c <_strtoul_r>:
 800565c:	f7ff bf8c 	b.w	8005578 <_strtoul_l.constprop.0>

08005660 <_malloc_usable_size_r>:
 8005660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005664:	1f18      	subs	r0, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	bfbc      	itt	lt
 800566a:	580b      	ldrlt	r3, [r1, r0]
 800566c:	18c0      	addlt	r0, r0, r3
 800566e:	4770      	bx	lr

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr
