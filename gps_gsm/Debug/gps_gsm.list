
gps_gsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0800bcd0  0800bcd0  0001bcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c75c  0800c75c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c764  0800c764  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c768  0800c768  0001c768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc8  20000210  0800c978  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd8  0800c978  00020dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe3a  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbe  00000000  00000000  00030076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00032c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000338d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bf2  00000000  00000000  00034450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108ae  00000000  00000000  0005c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb937  00000000  00000000  0006c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a54  00000000  00000000  00158278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcb4 	.word	0x0800bcb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800bcb4 	.word	0x0800bcb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <gsm_init>:
uint8_t response[20];
char *data1;
uint8_t var=0;
char *str;
int gsm_init()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	uint8_t state=0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
	uint8_t substate=0;
 8001002:	2300      	movs	r3, #0
 8001004:	73bb      	strb	r3, [r7, #14]
	int count=20;
 8001006:	2314      	movs	r3, #20
 8001008:	60bb      	str	r3, [r7, #8]
	while(count--)
 800100a:	e2a0      	b.n	800154e <gsm_init+0x556>
	{
	switch(state)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b07      	cmp	r3, #7
 8001010:	f200 8298 	bhi.w	8001544 <gsm_init+0x54c>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <gsm_init+0x24>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	0800103d 	.word	0x0800103d
 8001020:	080010b7 	.word	0x080010b7
 8001024:	08001123 	.word	0x08001123
 8001028:	080011a9 	.word	0x080011a9
 800102c:	08001231 	.word	0x08001231
 8001030:	080012c5 	.word	0x080012c5
 8001034:	080013b7 	.word	0x080013b7
 8001038:	08001493 	.word	0x08001493
	{
			  	  case 0:
			  	  {
			  		  switch(substate)
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8285 	bne.w	800154e <gsm_init+0x556>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 8001044:	48a2      	ldr	r0, [pc, #648]	; (80012d0 <gsm_init+0x2d8>)
 8001046:	f000 fcc9 	bl	80019dc <send_to_gsm>
 800104a:	4603      	mov	r3, r0
 800104c:	4aa1      	ldr	r2, [pc, #644]	; (80012d4 <gsm_init+0x2dc>)
 800104e:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("ATE0 \n");
 8001050:	48a1      	ldr	r0, [pc, #644]	; (80012d8 <gsm_init+0x2e0>)
 8001052:	f006 fbef 	bl	8007834 <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 8001056:	4b9f      	ldr	r3, [pc, #636]	; (80012d4 <gsm_init+0x2dc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	49a0      	ldr	r1, [pc, #640]	; (80012dc <gsm_init+0x2e4>)
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fc9c 	bl	800799a <strstr>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00d      	beq.n	8001084 <gsm_init+0x8c>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	7bba      	ldrb	r2, [r7, #14]
 800106c:	4619      	mov	r1, r3
 800106e:	489c      	ldr	r0, [pc, #624]	; (80012e0 <gsm_init+0x2e8>)
 8001070:	f006 fb5a 	bl	8007728 <iprintf>
			  				printf("ATE0 OK \n");
 8001074:	489b      	ldr	r0, [pc, #620]	; (80012e4 <gsm_init+0x2ec>)
 8001076:	f006 fbdd 	bl	8007834 <puts>
			  				  state=1;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8001082:	e016      	b.n	80010b2 <gsm_init+0xba>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <gsm_init+0x2dc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2206      	movs	r2, #6
 800108a:	4997      	ldr	r1, [pc, #604]	; (80012e8 <gsm_init+0x2f0>)
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fc70 	bl	8007972 <strncmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <gsm_init+0xba>
			  				printf("state = %d substate = %d \n",state,substate);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	7bba      	ldrb	r2, [r7, #14]
 800109c:	4619      	mov	r1, r3
 800109e:	4890      	ldr	r0, [pc, #576]	; (80012e0 <gsm_init+0x2e8>)
 80010a0:	f006 fb42 	bl	8007728 <iprintf>
			  				printf("ATE0 ERROR \n");
 80010a4:	4891      	ldr	r0, [pc, #580]	; (80012ec <gsm_init+0x2f4>)
 80010a6:	f006 fbc5 	bl	8007834 <puts>
			  				  state=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73bb      	strb	r3, [r7, #14]
			  			  break;
 80010b2:	bf00      	nop
			  		  }
			  		  break;
 80010b4:	e24b      	b.n	800154e <gsm_init+0x556>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d132      	bne.n	8001122 <gsm_init+0x12a>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 80010bc:	488c      	ldr	r0, [pc, #560]	; (80012f0 <gsm_init+0x2f8>)
 80010be:	f000 fc8d 	bl	80019dc <send_to_gsm>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <gsm_init+0x2dc>)
 80010c6:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 80010c8:	488a      	ldr	r0, [pc, #552]	; (80012f4 <gsm_init+0x2fc>)
 80010ca:	f006 fbb3 	bl	8007834 <puts>
			  			  HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f001 fe7b 	bl	8002dcc <HAL_Delay>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <gsm_init+0x2dc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2206      	movs	r2, #6
 80010dc:	497f      	ldr	r1, [pc, #508]	; (80012dc <gsm_init+0x2e4>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fc47 	bl	8007972 <strncmp>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <gsm_init+0x10e>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	7bba      	ldrb	r2, [r7, #14]
 80010ee:	4619      	mov	r1, r3
 80010f0:	487b      	ldr	r0, [pc, #492]	; (80012e0 <gsm_init+0x2e8>)
 80010f2:	f006 fb19 	bl	8007728 <iprintf>
			  				printf("CMEE=2 OK \n");
 80010f6:	4880      	ldr	r0, [pc, #512]	; (80012f8 <gsm_init+0x300>)
 80010f8:	f006 fb9c 	bl	8007834 <puts>
			  				  state=2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 8001100:	2300      	movs	r3, #0
 8001102:	73bb      	strb	r3, [r7, #14]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8001104:	e00c      	b.n	8001120 <gsm_init+0x128>
			  				printf("state = %d substate = %d \n",state,substate);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	7bba      	ldrb	r2, [r7, #14]
 800110a:	4619      	mov	r1, r3
 800110c:	4874      	ldr	r0, [pc, #464]	; (80012e0 <gsm_init+0x2e8>)
 800110e:	f006 fb0b 	bl	8007728 <iprintf>
			  				printf("CMEE=2 OK \n");
 8001112:	4879      	ldr	r0, [pc, #484]	; (80012f8 <gsm_init+0x300>)
 8001114:	f006 fb8e 	bl	8007834 <puts>
			  				  state=0;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001120:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d13f      	bne.n	80011a8 <gsm_init+0x1b0>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 8001128:	4874      	ldr	r0, [pc, #464]	; (80012fc <gsm_init+0x304>)
 800112a:	f000 fc57 	bl	80019dc <send_to_gsm>
 800112e:	4603      	mov	r3, r0
 8001130:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <gsm_init+0x2dc>)
 8001132:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("CPIN \n");
 8001134:	4872      	ldr	r0, [pc, #456]	; (8001300 <gsm_init+0x308>)
 8001136:	f006 fb7d 	bl	8007834 <puts>
			  			  if((strstr(str,"READY")!=NULL))
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <gsm_init+0x2dc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4971      	ldr	r1, [pc, #452]	; (8001304 <gsm_init+0x30c>)
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fc2a 	bl	800799a <strstr>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00d      	beq.n	8001168 <gsm_init+0x170>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	7bba      	ldrb	r2, [r7, #14]
 8001150:	4619      	mov	r1, r3
 8001152:	4863      	ldr	r0, [pc, #396]	; (80012e0 <gsm_init+0x2e8>)
 8001154:	f006 fae8 	bl	8007728 <iprintf>
			  				printf("CPIN READY \n");
 8001158:	486b      	ldr	r0, [pc, #428]	; (8001308 <gsm_init+0x310>)
 800115a:	f006 fb6b 	bl	8007834 <puts>
			  			      state=3;
 800115e:	2303      	movs	r3, #3
 8001160:	73fb      	strb	r3, [r7, #15]
			  			      substate=0;
 8001162:	2300      	movs	r3, #0
 8001164:	73bb      	strb	r3, [r7, #14]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=0;
			 	  			substate=0;
			  			  }
			  			  break;
 8001166:	e01e      	b.n	80011a6 <gsm_init+0x1ae>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001168:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <gsm_init+0x2dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2206      	movs	r2, #6
 800116e:	495e      	ldr	r1, [pc, #376]	; (80012e8 <gsm_init+0x2f0>)
 8001170:	4618      	mov	r0, r3
 8001172:	f006 fbfe 	bl	8007972 <strncmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <gsm_init+0x19a>
			  				printf("state = %d substate = %d \n",state,substate);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	7bba      	ldrb	r2, [r7, #14]
 8001180:	4619      	mov	r1, r3
 8001182:	4857      	ldr	r0, [pc, #348]	; (80012e0 <gsm_init+0x2e8>)
 8001184:	f006 fad0 	bl	8007728 <iprintf>
			  				state=0;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001190:	e009      	b.n	80011a6 <gsm_init+0x1ae>
			  				printf("state = %d substate = %d \n",state,substate);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	7bba      	ldrb	r2, [r7, #14]
 8001196:	4619      	mov	r1, r3
 8001198:	4851      	ldr	r0, [pc, #324]	; (80012e0 <gsm_init+0x2e8>)
 800119a:	f006 fac5 	bl	8007728 <iprintf>
			  	  			state=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
			 	  			substate=0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73bb      	strb	r3, [r7, #14]
			  			  break;
 80011a6:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 81cf 	bne.w	800154e <gsm_init+0x556>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 80011b0:	4856      	ldr	r0, [pc, #344]	; (800130c <gsm_init+0x314>)
 80011b2:	f000 fc13 	bl	80019dc <send_to_gsm>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <gsm_init+0x2dc>)
 80011ba:	6013      	str	r3, [r2, #0]
			  				  //HAL_Delay(1000);
			  				  printf("CAQ \n");
 80011bc:	4854      	ldr	r0, [pc, #336]	; (8001310 <gsm_init+0x318>)
 80011be:	f006 fb39 	bl	8007834 <puts>
			  				  int e=check_signal(str);
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <gsm_init+0x2dc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fa3e 	bl	8001648 <check_signal>
 80011cc:	6078      	str	r0, [r7, #4]
			  				  if((strstr(str,"OK")!=NULL))
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <gsm_init+0x2dc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4950      	ldr	r1, [pc, #320]	; (8001314 <gsm_init+0x31c>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 fbe0 	bl	800799a <strstr>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01b      	beq.n	8001218 <gsm_init+0x220>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	7bba      	ldrb	r2, [r7, #14]
 80011e4:	4619      	mov	r1, r3
 80011e6:	483e      	ldr	r0, [pc, #248]	; (80012e0 <gsm_init+0x2e8>)
 80011e8:	f006 fa9e 	bl	8007728 <iprintf>
			  					  printf("CAQ OK\n");
 80011ec:	484a      	ldr	r0, [pc, #296]	; (8001318 <gsm_init+0x320>)
 80011ee:	f006 fb21 	bl	8007834 <puts>
			  					  if(e==0)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <gsm_init+0x210>
			  					  {
			  						  printf("signal OK\n");
 80011f8:	4848      	ldr	r0, [pc, #288]	; (800131c <gsm_init+0x324>)
 80011fa:	f006 fb1b 	bl	8007834 <puts>
			  						  state=4;
 80011fe:	2304      	movs	r3, #4
 8001200:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 8001202:	2300      	movs	r3, #0
 8001204:	73bb      	strb	r3, [r7, #14]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=0;
			  					  substate=0;
			  				  }
			  				  break;
 8001206:	e011      	b.n	800122c <gsm_init+0x234>
			  						  printf("signal NOT OK\n");
 8001208:	4845      	ldr	r0, [pc, #276]	; (8001320 <gsm_init+0x328>)
 800120a:	f006 fb13 	bl	8007834 <puts>
			  						  state=3;
 800120e:	2303      	movs	r3, #3
 8001210:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 8001212:	2300      	movs	r3, #0
 8001214:	73bb      	strb	r3, [r7, #14]
			  				  break;
 8001216:	e009      	b.n	800122c <gsm_init+0x234>
			  					  printf("state = %d substate = %d \n",state,substate);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	7bba      	ldrb	r2, [r7, #14]
 800121c:	4619      	mov	r1, r3
 800121e:	4830      	ldr	r0, [pc, #192]	; (80012e0 <gsm_init+0x2e8>)
 8001220:	f006 fa82 	bl	8007728 <iprintf>
			  					  state=0;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
			  					  substate=0;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
			  				  break;
 800122c:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 800122e:	e18e      	b.n	800154e <gsm_init+0x556>
				  	case 4:
				  	{
				  		switch(substate)
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <gsm_init+0x244>
 8001236:	2b01      	cmp	r3, #1
 8001238:	d02f      	beq.n	800129a <gsm_init+0x2a2>
				  				 state=0;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 800123a:	e042      	b.n	80012c2 <gsm_init+0x2ca>
				  			  str =send_to_gsm("AT+CREG?\r");
 800123c:	4839      	ldr	r0, [pc, #228]	; (8001324 <gsm_init+0x32c>)
 800123e:	f000 fbcd 	bl	80019dc <send_to_gsm>
 8001242:	4603      	mov	r3, r0
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <gsm_init+0x2dc>)
 8001246:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <gsm_init+0x330>)
 800124a:	f006 faf3 	bl	8007834 <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <gsm_init+0x2dc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4936      	ldr	r1, [pc, #216]	; (800132c <gsm_init+0x334>)
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fba0 	bl	800799a <strstr>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d111      	bne.n	8001284 <gsm_init+0x28c>
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <gsm_init+0x2dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4932      	ldr	r1, [pc, #200]	; (8001330 <gsm_init+0x338>)
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fb97 	bl	800799a <strstr>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <gsm_init+0x28c>
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <gsm_init+0x2dc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	492f      	ldr	r1, [pc, #188]	; (8001334 <gsm_init+0x33c>)
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fb8e 	bl	800799a <strstr>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <gsm_init+0x29c>
				  				  state=5;
 8001284:	2305      	movs	r3, #5
 8001286:	73fb      	strb	r3, [r7, #15]
				  				  substate=0;
 8001288:	2300      	movs	r3, #0
 800128a:	73bb      	strb	r3, [r7, #14]
				  				  printf("match found\n");
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <gsm_init+0x340>)
 800128e:	f006 fad1 	bl	8007834 <puts>
				  			  break;
 8001292:	e016      	b.n	80012c2 <gsm_init+0x2ca>
				  				  substate=1;
 8001294:	2301      	movs	r3, #1
 8001296:	73bb      	strb	r3, [r7, #14]
				  			  break;
 8001298:	e013      	b.n	80012c2 <gsm_init+0x2ca>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <gsm_init+0x2dc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2206      	movs	r2, #6
 80012a0:	4911      	ldr	r1, [pc, #68]	; (80012e8 <gsm_init+0x2f0>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f006 fb65 	bl	8007972 <strncmp>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <gsm_init+0x2c0>
				  				 state=0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012b6:	e003      	b.n	80012c0 <gsm_init+0x2c8>
				  				 state=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012c0:	bf00      	nop
				  		}
				  		break;
 80012c2:	e144      	b.n	800154e <gsm_init+0x556>
				  	}

				  	case 5:
				  		switch(substate)
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d038      	beq.n	800133c <gsm_init+0x344>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d059      	beq.n	8001382 <gsm_init+0x38a>
				  				state=0;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 80012ce:	e071      	b.n	80013b4 <gsm_init+0x3bc>
 80012d0:	0800bcd0 	.word	0x0800bcd0
 80012d4:	200002f4 	.word	0x200002f4
 80012d8:	0800bcd8 	.word	0x0800bcd8
 80012dc:	0800bce0 	.word	0x0800bce0
 80012e0:	0800bce8 	.word	0x0800bce8
 80012e4:	0800bd04 	.word	0x0800bd04
 80012e8:	0800bd10 	.word	0x0800bd10
 80012ec:	0800bd1c 	.word	0x0800bd1c
 80012f0:	0800bd28 	.word	0x0800bd28
 80012f4:	0800bd34 	.word	0x0800bd34
 80012f8:	0800bd3c 	.word	0x0800bd3c
 80012fc:	0800bd48 	.word	0x0800bd48
 8001300:	0800bd54 	.word	0x0800bd54
 8001304:	0800bd5c 	.word	0x0800bd5c
 8001308:	0800bd64 	.word	0x0800bd64
 800130c:	0800bd70 	.word	0x0800bd70
 8001310:	0800bd78 	.word	0x0800bd78
 8001314:	0800bd80 	.word	0x0800bd80
 8001318:	0800bd84 	.word	0x0800bd84
 800131c:	0800bd8c 	.word	0x0800bd8c
 8001320:	0800bd98 	.word	0x0800bd98
 8001324:	0800bda8 	.word	0x0800bda8
 8001328:	0800bdb4 	.word	0x0800bdb4
 800132c:	0800bdbc 	.word	0x0800bdbc
 8001330:	0800bdc0 	.word	0x0800bdc0
 8001334:	0800bdc4 	.word	0x0800bdc4
 8001338:	0800bdc8 	.word	0x0800bdc8
				  			str = send_to_gsm("AT+CGREG?\r");
 800133c:	4889      	ldr	r0, [pc, #548]	; (8001564 <gsm_init+0x56c>)
 800133e:	f000 fb4d 	bl	80019dc <send_to_gsm>
 8001342:	4603      	mov	r3, r0
 8001344:	4a88      	ldr	r2, [pc, #544]	; (8001568 <gsm_init+0x570>)
 8001346:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 8001348:	4b87      	ldr	r3, [pc, #540]	; (8001568 <gsm_init+0x570>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4987      	ldr	r1, [pc, #540]	; (800156c <gsm_init+0x574>)
 800134e:	4618      	mov	r0, r3
 8001350:	f006 fb23 	bl	800799a <strstr>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <gsm_init+0x374>
 800135a:	4b83      	ldr	r3, [pc, #524]	; (8001568 <gsm_init+0x570>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4984      	ldr	r1, [pc, #528]	; (8001570 <gsm_init+0x578>)
 8001360:	4618      	mov	r0, r3
 8001362:	f006 fb1a 	bl	800799a <strstr>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <gsm_init+0x384>
				  				state=6;
 800136c:	2306      	movs	r3, #6
 800136e:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 8001370:	2300      	movs	r3, #0
 8001372:	73bb      	strb	r3, [r7, #14]
				  				printf("match found\n");
 8001374:	487f      	ldr	r0, [pc, #508]	; (8001574 <gsm_init+0x57c>)
 8001376:	f006 fa5d 	bl	8007834 <puts>
				  			break;
 800137a:	e01b      	b.n	80013b4 <gsm_init+0x3bc>
				  				substate=1;
 800137c:	2301      	movs	r3, #1
 800137e:	73bb      	strb	r3, [r7, #14]
				  			break;
 8001380:	e018      	b.n	80013b4 <gsm_init+0x3bc>
				  			str = send_to_gsm("AT+CGREG=1\r");
 8001382:	487d      	ldr	r0, [pc, #500]	; (8001578 <gsm_init+0x580>)
 8001384:	f000 fb2a 	bl	80019dc <send_to_gsm>
 8001388:	4603      	mov	r3, r0
 800138a:	4a77      	ldr	r2, [pc, #476]	; (8001568 <gsm_init+0x570>)
 800138c:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <gsm_init+0x570>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	497a      	ldr	r1, [pc, #488]	; (800157c <gsm_init+0x584>)
 8001394:	4618      	mov	r0, r3
 8001396:	f006 fb00 	bl	800799a <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <gsm_init+0x3b2>
				  				state=5;
 80013a0:	2305      	movs	r3, #5
 80013a2:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013a8:	e003      	b.n	80013b2 <gsm_init+0x3ba>
				  				state=0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013b2:	bf00      	nop
				  		}
				  		break;
 80013b4:	e0cb      	b.n	800154e <gsm_init+0x556>

				  	case 6:
				  		{
				  			switch(substate)
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d04a      	beq.n	8001452 <gsm_init+0x45a>
 80013bc:	2b02      	cmp	r3, #2
 80013be:	f300 80c6 	bgt.w	800154e <gsm_init+0x556>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <gsm_init+0x3d4>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d026      	beq.n	8001418 <gsm_init+0x420>
 80013ca:	e0c0      	b.n	800154e <gsm_init+0x556>
				  			{
				  			case 0:
				  				str = send_to_gsm("AT+COPS?\r");
 80013cc:	486c      	ldr	r0, [pc, #432]	; (8001580 <gsm_init+0x588>)
 80013ce:	f000 fb05 	bl	80019dc <send_to_gsm>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a64      	ldr	r2, [pc, #400]	; (8001568 <gsm_init+0x570>)
 80013d6:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("COPS?\n");
 80013d8:	486a      	ldr	r0, [pc, #424]	; (8001584 <gsm_init+0x58c>)
 80013da:	f006 fa2b 	bl	8007834 <puts>
				  				if((strstr(str,"40449")!=NULL))
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <gsm_init+0x570>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4969      	ldr	r1, [pc, #420]	; (8001588 <gsm_init+0x590>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 fad8 	bl	800799a <strstr>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <gsm_init+0x40e>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4865      	ldr	r0, [pc, #404]	; (800158c <gsm_init+0x594>)
 80013f8:	f006 f996 	bl	8007728 <iprintf>
				  					state=7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	73fb      	strb	r3, [r7, #15]
				  					substate=1;
 8001400:	2301      	movs	r3, #1
 8001402:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=1;
				  				}
				  				break;
 8001404:	e044      	b.n	8001490 <gsm_init+0x498>
				  					printf("state = %d substate = %d \n",state,substate);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	7bba      	ldrb	r2, [r7, #14]
 800140a:	4619      	mov	r1, r3
 800140c:	485f      	ldr	r0, [pc, #380]	; (800158c <gsm_init+0x594>)
 800140e:	f006 f98b 	bl	8007728 <iprintf>
				  					substate=1;
 8001412:	2301      	movs	r3, #1
 8001414:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001416:	e03b      	b.n	8001490 <gsm_init+0x498>
				  			case 1:
				  				if((strstr(str,"405854")!=NULL))
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <gsm_init+0x570>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	495c      	ldr	r1, [pc, #368]	; (8001590 <gsm_init+0x598>)
 800141e:	4618      	mov	r0, r3
 8001420:	f006 fabb 	bl	800799a <strstr>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <gsm_init+0x448>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	4619      	mov	r1, r3
 8001430:	4856      	ldr	r0, [pc, #344]	; (800158c <gsm_init+0x594>)
 8001432:	f006 f979 	bl	8007728 <iprintf>
				  					state=7;
 8001436:	2307      	movs	r3, #7
 8001438:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=2;
				  				}
				  				break;
 800143e:	e027      	b.n	8001490 <gsm_init+0x498>
				  					printf("state = %d substate = %d \n",state,substate);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	7bba      	ldrb	r2, [r7, #14]
 8001444:	4619      	mov	r1, r3
 8001446:	4851      	ldr	r0, [pc, #324]	; (800158c <gsm_init+0x594>)
 8001448:	f006 f96e 	bl	8007728 <iprintf>
				  					substate=2;
 800144c:	2302      	movs	r3, #2
 800144e:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001450:	e01e      	b.n	8001490 <gsm_init+0x498>
				  			case 2:
				  				if((strstr(str,"ERROR")!=NULL))
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <gsm_init+0x570>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	494f      	ldr	r1, [pc, #316]	; (8001594 <gsm_init+0x59c>)
 8001458:	4618      	mov	r0, r3
 800145a:	f006 fa9e 	bl	800799a <strstr>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <gsm_init+0x482>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	7bba      	ldrb	r2, [r7, #14]
 8001468:	4619      	mov	r1, r3
 800146a:	4848      	ldr	r0, [pc, #288]	; (800158c <gsm_init+0x594>)
 800146c:	f006 f95c 	bl	8007728 <iprintf>
				  					state=0;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001474:	2300      	movs	r3, #0
 8001476:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 8001478:	e009      	b.n	800148e <gsm_init+0x496>
				  					printf("state = %d substate = %d \n",state,substate);
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	7bba      	ldrb	r2, [r7, #14]
 800147e:	4619      	mov	r1, r3
 8001480:	4842      	ldr	r0, [pc, #264]	; (800158c <gsm_init+0x594>)
 8001482:	f006 f951 	bl	8007728 <iprintf>
				  					state=0;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800148a:	2300      	movs	r3, #0
 800148c:	73bb      	strb	r3, [r7, #14]
				  				break;
 800148e:	bf00      	nop

				  			}
				  			break;
 8001490:	e05d      	b.n	800154e <gsm_init+0x556>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <gsm_init+0x4a6>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d029      	beq.n	80014f0 <gsm_init+0x4f8>
 800149c:	e057      	b.n	800154e <gsm_init+0x556>
				  			{
				  			case 0:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 800149e:	483e      	ldr	r0, [pc, #248]	; (8001598 <gsm_init+0x5a0>)
 80014a0:	f000 fa9c 	bl	80019dc <send_to_gsm>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a30      	ldr	r2, [pc, #192]	; (8001568 <gsm_init+0x570>)
 80014a8:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1 jio\n");
 80014aa:	483c      	ldr	r0, [pc, #240]	; (800159c <gsm_init+0x5a4>)
 80014ac:	f006 f9c2 	bl	8007834 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <gsm_init+0x570>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2206      	movs	r2, #6
 80014b6:	493a      	ldr	r1, [pc, #232]	; (80015a0 <gsm_init+0x5a8>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fa5a 	bl	8007972 <strncmp>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <gsm_init+0x4e2>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	7bba      	ldrb	r2, [r7, #14]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4830      	ldr	r0, [pc, #192]	; (800158c <gsm_init+0x594>)
 80014cc:	f006 f92c 	bl	8007728 <iprintf>
				  					state=8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  				break;
 80014d8:	e033      	b.n	8001542 <gsm_init+0x54a>
				  					printf("state = %d substate = %d \n",state,substate);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	7bba      	ldrb	r2, [r7, #14]
 80014de:	4619      	mov	r1, r3
 80014e0:	482a      	ldr	r0, [pc, #168]	; (800158c <gsm_init+0x594>)
 80014e2:	f006 f921 	bl	8007728 <iprintf>
				  					state=6;
 80014e6:	2306      	movs	r3, #6
 80014e8:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73bb      	strb	r3, [r7, #14]
				  				break;
 80014ee:	e028      	b.n	8001542 <gsm_init+0x54a>
				  			case 1:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 80014f0:	482c      	ldr	r0, [pc, #176]	; (80015a4 <gsm_init+0x5ac>)
 80014f2:	f000 fa73 	bl	80019dc <send_to_gsm>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <gsm_init+0x570>)
 80014fa:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1 airtel\n");
 80014fc:	482a      	ldr	r0, [pc, #168]	; (80015a8 <gsm_init+0x5b0>)
 80014fe:	f006 f999 	bl	8007834 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <gsm_init+0x570>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2206      	movs	r2, #6
 8001508:	4925      	ldr	r1, [pc, #148]	; (80015a0 <gsm_init+0x5a8>)
 800150a:	4618      	mov	r0, r3
 800150c:	f006 fa31 	bl	8007972 <strncmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10a      	bne.n	800152c <gsm_init+0x534>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	7bba      	ldrb	r2, [r7, #14]
 800151a:	4619      	mov	r1, r3
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <gsm_init+0x594>)
 800151e:	f006 f903 	bl	8007728 <iprintf>
				  					state=8;
 8001522:	2308      	movs	r3, #8
 8001524:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 800152a:	e009      	b.n	8001540 <gsm_init+0x548>
				  					printf("state = %d substate = %d \n",state,substate);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	7bba      	ldrb	r2, [r7, #14]
 8001530:	4619      	mov	r1, r3
 8001532:	4816      	ldr	r0, [pc, #88]	; (800158c <gsm_init+0x594>)
 8001534:	f006 f8f8 	bl	8007728 <iprintf>
				  					state=0;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800153c:	2300      	movs	r3, #0
 800153e:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001540:	bf00      	nop
				  			}

				  			break;
 8001542:	e004      	b.n	800154e <gsm_init+0x556>

				  		}


				  		default:
				  			printf("completed work \n");
 8001544:	4819      	ldr	r0, [pc, #100]	; (80015ac <gsm_init+0x5b4>)
 8001546:	f006 f975 	bl	8007834 <puts>
				  			return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e006      	b.n	800155c <gsm_init+0x564>
	while(count--)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f47f ad59 	bne.w	800100c <gsm_init+0x14>
			  	  }
	}
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	0800bdd4 	.word	0x0800bdd4
 8001568:	200002f4 	.word	0x200002f4
 800156c:	0800bdbc 	.word	0x0800bdbc
 8001570:	0800bde0 	.word	0x0800bde0
 8001574:	0800bdc8 	.word	0x0800bdc8
 8001578:	0800bde4 	.word	0x0800bde4
 800157c:	0800bd80 	.word	0x0800bd80
 8001580:	0800bdf0 	.word	0x0800bdf0
 8001584:	0800bdfc 	.word	0x0800bdfc
 8001588:	0800be04 	.word	0x0800be04
 800158c:	0800bce8 	.word	0x0800bce8
 8001590:	0800be0c 	.word	0x0800be0c
 8001594:	0800be14 	.word	0x0800be14
 8001598:	0800be1c 	.word	0x0800be1c
 800159c:	0800be38 	.word	0x0800be38
 80015a0:	0800bce0 	.word	0x0800bce0
 80015a4:	0800be48 	.word	0x0800be48
 80015a8:	0800be6c 	.word	0x0800be6c
 80015ac:	0800be80 	.word	0x0800be80

080015b0 <check_server_connection>:
int check_server_connection()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
	int state=0,substate=0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
	int time_out=30;
 80015be:	231e      	movs	r3, #30
 80015c0:	607b      	str	r3, [r7, #4]
	while(time_out)
 80015c2:	e02d      	b.n	8001620 <check_server_connection+0x70>
	{
		switch(state)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <check_server_connection+0x22>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d014      	beq.n	80015fa <check_server_connection+0x4a>
 80015d0:	e026      	b.n	8001620 <check_server_connection+0x70>
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN?\r");
 80015d2:	4817      	ldr	r0, [pc, #92]	; (8001630 <check_server_connection+0x80>)
 80015d4:	f000 fa02 	bl	80019dc <send_to_gsm>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <check_server_connection+0x84>)
 80015dc:	6013      	str	r3, [r2, #0]
			if(strstr(str,"ERROR")!=NULL)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <check_server_connection+0x84>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4915      	ldr	r1, [pc, #84]	; (8001638 <check_server_connection+0x88>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 f9d8 	bl	800799a <strstr>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <check_server_connection+0x46>
			{
				state=0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e001      	b.n	80015fa <check_server_connection+0x4a>
			}
			else
			{
				substate=1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
			}
		case 1:
			if(strstr(str,"139.59.78.252")!=NULL)
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <check_server_connection+0x84>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	490f      	ldr	r1, [pc, #60]	; (800163c <check_server_connection+0x8c>)
 8001600:	4618      	mov	r0, r3
 8001602:	f006 f9ca 	bl	800799a <strstr>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <check_server_connection+0x66>
			{
				printf("tcp connection established\n");
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <check_server_connection+0x90>)
 800160e:	f006 f911 	bl	8007834 <puts>
				return 0;
 8001612:	2300      	movs	r3, #0
 8001614:	e008      	b.n	8001628 <check_server_connection+0x78>
			}
			else
			{
				printf("tcp connection NOT established\n");
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <check_server_connection+0x94>)
 8001618:	f006 f90c 	bl	8007834 <puts>
				return 1;
 800161c:	2301      	movs	r3, #1
 800161e:	e003      	b.n	8001628 <check_server_connection+0x78>
	while(time_out)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ce      	bne.n	80015c4 <check_server_connection+0x14>
			}

		}
	}
	return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	0800be90 	.word	0x0800be90
 8001634:	200002f4 	.word	0x200002f4
 8001638:	0800be14 	.word	0x0800be14
 800163c:	0800bea0 	.word	0x0800bea0
 8001640:	0800beb0 	.word	0x0800beb0
 8001644:	0800becc 	.word	0x0800becc

08001648 <check_signal>:


}

int check_signal(char *str)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8001654:	e04b      	b.n	80016ee <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b20      	cmp	r3, #32
 8001662:	d120      	bne.n	80016a6 <check_signal+0x5e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3b02      	subs	r3, #2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b3a      	cmp	r3, #58	; 0x3a
 8001670:	d119      	bne.n	80016a6 <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b2f      	cmp	r3, #47	; 0x2f
 800167c:	d805      	bhi.n	800168a <check_signal+0x42>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b39      	cmp	r3, #57	; 0x39
 8001688:	d80d      	bhi.n	80016a6 <check_signal+0x5e>
		{
			rssi=str+i;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4833      	ldr	r0, [pc, #204]	; (8001770 <check_signal+0x128>)
 80016a2:	f006 f841 	bl	8007728 <iprintf>
		}
	    }
	    if(str[i-1]==',')
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b2c      	cmp	r3, #44	; 0x2c
 80016b2:	d119      	bne.n	80016e8 <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b2f      	cmp	r3, #47	; 0x2f
 80016be:	d805      	bhi.n	80016cc <check_signal+0x84>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b39      	cmp	r3, #57	; 0x39
 80016ca:	d80d      	bhi.n	80016e8 <check_signal+0xa0>
		        {
		        	ber=str+i;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3301      	adds	r3, #1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4824      	ldr	r0, [pc, #144]	; (8001774 <check_signal+0x12c>)
 80016e4:	f006 f820 	bl	8007728 <iprintf>
	        	}

	    }
		i++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ad      	bne.n	8001656 <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	481b      	ldr	r0, [pc, #108]	; (8001778 <check_signal+0x130>)
 800170a:	f006 f80d 	bl	8007728 <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	3301      	adds	r3, #1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <check_signal+0x134>)
 800171e:	f006 f803 	bl	8007728 <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b39      	cmp	r3, #57	; 0x39
 8001728:	d11d      	bne.n	8001766 <check_signal+0x11e>
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b39      	cmp	r3, #57	; 0x39
 8001732:	d118      	bne.n	8001766 <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b31      	cmp	r3, #49	; 0x31
 800173a:	d803      	bhi.n	8001744 <check_signal+0xfc>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b38      	cmp	r3, #56	; 0x38
 8001742:	d80e      	bhi.n	8001762 <check_signal+0x11a>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b2f      	cmp	r3, #47	; 0x2f
 800174c:	d804      	bhi.n	8001758 <check_signal+0x110>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b39      	cmp	r3, #57	; 0x39
 8001756:	d804      	bhi.n	8001762 <check_signal+0x11a>
	    {
	    printf("ok");
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <check_signal+0x138>)
 800175a:	f005 ffe5 	bl	8007728 <iprintf>
	    return 0;
 800175e:	2300      	movs	r3, #0
 8001760:	e002      	b.n	8001768 <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 8001766:	2301      	movs	r3, #1
	}
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800befc 	.word	0x0800befc
 8001774:	0800bf08 	.word	0x0800bf08
 8001778:	0800bf14 	.word	0x0800bf14
 800177c:	0800bf24 	.word	0x0800bf24
 8001780:	0800bf34 	.word	0x0800bf34

08001784 <connect_tcp_server>:

int connect_tcp_server()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
	int state=0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	int substate=0;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
	int count=10;
 8001792:	230a      	movs	r3, #10
 8001794:	607b      	str	r3, [r7, #4]
	while(count--)
 8001796:	e0f3      	b.n	8001980 <connect_tcp_server+0x1fc>
	{
	switch(state)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b02      	cmp	r3, #2
 800179c:	f000 8086 	beq.w	80018ac <connect_tcp_server+0x128>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f300 80e7 	bgt.w	8001976 <connect_tcp_server+0x1f2>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <connect_tcp_server+0x32>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d036      	beq.n	8001822 <connect_tcp_server+0x9e>
 80017b4:	e0df      	b.n	8001976 <connect_tcp_server+0x1f2>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <connect_tcp_server+0x40>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d017      	beq.n	80017f2 <connect_tcp_server+0x6e>
 80017c2:	e0dd      	b.n	8001980 <connect_tcp_server+0x1fc>
	case 0:
	{
		switch(substate)
		{
		case 0:
			str=send_to_gsm("AT+CIPMODE?\r\n");
 80017c4:	4875      	ldr	r0, [pc, #468]	; (800199c <connect_tcp_server+0x218>)
 80017c6:	f000 f909 	bl	80019dc <send_to_gsm>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a74      	ldr	r2, [pc, #464]	; (80019a0 <connect_tcp_server+0x21c>)
 80017ce:	6013      	str	r3, [r2, #0]
			if(strstr(str,"+CIPMODE: 0"))
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <connect_tcp_server+0x21c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4973      	ldr	r1, [pc, #460]	; (80019a4 <connect_tcp_server+0x220>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 f8df 	bl	800799a <strstr>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <connect_tcp_server+0x68>
			{
				state=1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
				substate=0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=1;
			}
			break;
 80017ea:	e019      	b.n	8001820 <connect_tcp_server+0x9c>
				substate=1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
			break;
 80017f0:	e016      	b.n	8001820 <connect_tcp_server+0x9c>
		case 1:
			str=send_to_gsm("AT+CIPMODE=0\r\n");
 80017f2:	486d      	ldr	r0, [pc, #436]	; (80019a8 <connect_tcp_server+0x224>)
 80017f4:	f000 f8f2 	bl	80019dc <send_to_gsm>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a69      	ldr	r2, [pc, #420]	; (80019a0 <connect_tcp_server+0x21c>)
 80017fc:	6013      	str	r3, [r2, #0]
			if(strstr(str,"OK"))
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <connect_tcp_server+0x21c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	496a      	ldr	r1, [pc, #424]	; (80019ac <connect_tcp_server+0x228>)
 8001804:	4618      	mov	r0, r3
 8001806:	f006 f8c8 	bl	800799a <strstr>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <connect_tcp_server+0x96>
			{
				state=0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=0;
			}
			break;
 8001818:	e001      	b.n	800181e <connect_tcp_server+0x9a>
				substate=0;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
			break;
 800181e:	bf00      	nop
		}
		break;
 8001820:	e0ae      	b.n	8001980 <connect_tcp_server+0x1fc>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <connect_tcp_server+0xac>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d025      	beq.n	800187a <connect_tcp_server+0xf6>
 800182e:	e0a7      	b.n	8001980 <connect_tcp_server+0x1fc>
	case 1:
	{
		switch(substate)
		{
		case 0:
			str = send_to_gsm("AT+NETOPEN\r\n");
 8001830:	485f      	ldr	r0, [pc, #380]	; (80019b0 <connect_tcp_server+0x22c>)
 8001832:	f000 f8d3 	bl	80019dc <send_to_gsm>
 8001836:	4603      	mov	r3, r0
 8001838:	4a59      	ldr	r2, [pc, #356]	; (80019a0 <connect_tcp_server+0x21c>)
 800183a:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("NETOPEN\n");
 800183c:	485d      	ldr	r0, [pc, #372]	; (80019b4 <connect_tcp_server+0x230>)
 800183e:	f005 fff9 	bl	8007834 <puts>
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <connect_tcp_server+0x21c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2206      	movs	r2, #6
 8001848:	495b      	ldr	r1, [pc, #364]	; (80019b8 <connect_tcp_server+0x234>)
 800184a:	4618      	mov	r0, r3
 800184c:	f006 f891 	bl	8007972 <strncmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <connect_tcp_server+0xe6>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	68f9      	ldr	r1, [r7, #12]
 800185a:	4858      	ldr	r0, [pc, #352]	; (80019bc <connect_tcp_server+0x238>)
 800185c:	f005 ff64 	bl	8007728 <iprintf>
				state=2;
 8001860:	2302      	movs	r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
			else
			{
				printf("state = %d substate = %d \n",state,substate);
				substate=1;
			}
			break;
 8001868:	e01f      	b.n	80018aa <connect_tcp_server+0x126>
				printf("state = %d substate = %d \n",state,substate);
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	4853      	ldr	r0, [pc, #332]	; (80019bc <connect_tcp_server+0x238>)
 8001870:	f005 ff5a 	bl	8007728 <iprintf>
				substate=1;
 8001874:	2301      	movs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
			break;
 8001878:	e017      	b.n	80018aa <connect_tcp_server+0x126>
		case 1:
			if((strstr(str,"Network is already opened")!=NULL))
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <connect_tcp_server+0x21c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4950      	ldr	r1, [pc, #320]	; (80019c0 <connect_tcp_server+0x23c>)
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f88a 	bl	800799a <strstr>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <connect_tcp_server+0x11c>
			{
				printf("state = %d substate = %d \n",state,substate);
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	484a      	ldr	r0, [pc, #296]	; (80019bc <connect_tcp_server+0x238>)
 8001892:	f005 ff49 	bl	8007728 <iprintf>
				state=2;
 8001896:	2302      	movs	r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
				substate=0;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
			else
			{
				state=0;
				substate=0;
			}
			break;
 800189e:	e003      	b.n	80018a8 <connect_tcp_server+0x124>
				state=0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
			break;
 80018a8:	bf00      	nop

		}
		break;
 80018aa:	e069      	b.n	8001980 <connect_tcp_server+0x1fc>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d044      	beq.n	800193c <connect_tcp_server+0x1b8>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	dc63      	bgt.n	8001980 <connect_tcp_server+0x1fc>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <connect_tcp_server+0x142>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d024      	beq.n	800190e <connect_tcp_server+0x18a>
 80018c4:	e05c      	b.n	8001980 <connect_tcp_server+0x1fc>
	case 2:
	{
		switch(substate)
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",52102\r");
 80018c6:	483f      	ldr	r0, [pc, #252]	; (80019c4 <connect_tcp_server+0x240>)
 80018c8:	f000 f888 	bl	80019dc <send_to_gsm>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <connect_tcp_server+0x21c>)
 80018d0:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("CIPOPEN\n");
 80018d2:	483d      	ldr	r0, [pc, #244]	; (80019c8 <connect_tcp_server+0x244>)
 80018d4:	f005 ffae 	bl	8007834 <puts>
			if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <connect_tcp_server+0x21c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	493b      	ldr	r1, [pc, #236]	; (80019cc <connect_tcp_server+0x248>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 f85b 	bl	800799a <strstr>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <connect_tcp_server+0x17a>
				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
			{
				printf("state = %d substate = %d \n",state,substate);
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	4833      	ldr	r0, [pc, #204]	; (80019bc <connect_tcp_server+0x238>)
 80018f0:	f005 ff1a 	bl	8007728 <iprintf>
				state=3;
 80018f4:	2303      	movs	r3, #3
 80018f6:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=1;
			}
			break;
 80018fc:	e03a      	b.n	8001974 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	482e      	ldr	r0, [pc, #184]	; (80019bc <connect_tcp_server+0x238>)
 8001904:	f005 ff10 	bl	8007728 <iprintf>
				substate=1;
 8001908:	2301      	movs	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
			break;
 800190c:	e032      	b.n	8001974 <connect_tcp_server+0x1f0>
		case 1:
			if(check_server_connection()==0)
 800190e:	f7ff fe4f 	bl	80015b0 <check_server_connection>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <connect_tcp_server+0x1a8>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	4827      	ldr	r0, [pc, #156]	; (80019bc <connect_tcp_server+0x238>)
 800191e:	f005 ff03 	bl	8007728 <iprintf>
				state=3;
 8001922:	2303      	movs	r3, #3
 8001924:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=2;
			}
			break;
 800192a:	e023      	b.n	8001974 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	4822      	ldr	r0, [pc, #136]	; (80019bc <connect_tcp_server+0x238>)
 8001932:	f005 fef9 	bl	8007728 <iprintf>
				substate=2;
 8001936:	2302      	movs	r3, #2
 8001938:	60bb      	str	r3, [r7, #8]
			break;
 800193a:	e01b      	b.n	8001974 <connect_tcp_server+0x1f0>
		case 2:
			//if((strstr(str,"ERROR")!=NULL))
			if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <connect_tcp_server+0x21c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2206      	movs	r2, #6
 8001942:	4923      	ldr	r1, [pc, #140]	; (80019d0 <connect_tcp_server+0x24c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f006 f814 	bl	8007972 <strncmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <connect_tcp_server+0x1dc>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	4819      	ldr	r0, [pc, #100]	; (80019bc <connect_tcp_server+0x238>)
 8001956:	f005 fee7 	bl	8007728 <iprintf>
				//state=3;
				substate=0;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				state=0;
				substate=0;
			}
			break;
 800195e:	e008      	b.n	8001972 <connect_tcp_server+0x1ee>
				printf("state = %d substate = %d \n",state,substate);
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	4815      	ldr	r0, [pc, #84]	; (80019bc <connect_tcp_server+0x238>)
 8001966:	f005 fedf 	bl	8007728 <iprintf>
				state=0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
				substate=0;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
			break;
 8001972:	bf00      	nop


		}
		break;
 8001974:	e004      	b.n	8001980 <connect_tcp_server+0x1fc>
	}
	default:
		printf("opened successfulyy\n");
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <connect_tcp_server+0x250>)
 8001978:	f005 ff5c 	bl	8007834 <puts>
		return 0;
 800197c:	2300      	movs	r3, #0
 800197e:	e009      	b.n	8001994 <connect_tcp_server+0x210>
	while(count--)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f af06 	bne.w	8001798 <connect_tcp_server+0x14>
	}
}
	printf("Time out\n");
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <connect_tcp_server+0x254>)
 800198e:	f005 ff51 	bl	8007834 <puts>

	return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	0800bf38 	.word	0x0800bf38
 80019a0:	200002f4 	.word	0x200002f4
 80019a4:	0800bf48 	.word	0x0800bf48
 80019a8:	0800bf54 	.word	0x0800bf54
 80019ac:	0800bd80 	.word	0x0800bd80
 80019b0:	0800bf64 	.word	0x0800bf64
 80019b4:	0800bf74 	.word	0x0800bf74
 80019b8:	0800bce0 	.word	0x0800bce0
 80019bc:	0800bce8 	.word	0x0800bce8
 80019c0:	0800bf7c 	.word	0x0800bf7c
 80019c4:	0800bf98 	.word	0x0800bf98
 80019c8:	0800bfc4 	.word	0x0800bfc4
 80019cc:	0800bfcc 	.word	0x0800bfcc
 80019d0:	0800bd10 	.word	0x0800bd10
 80019d4:	0800bfdc 	.word	0x0800bfdc
 80019d8:	0800bff0 	.word	0x0800bff0

080019dc <send_to_gsm>:
	return -1;
}


char *send_to_gsm(char * command)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 80019e4:	22c8      	movs	r2, #200	; 0xc8
 80019e6:	2100      	movs	r1, #0
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <send_to_gsm+0x4c>)
 80019ea:	f005 f81b 	bl	8006a24 <memset>
	 printf("tx start\n");
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <send_to_gsm+0x50>)
 80019f0:	f005 ff20 	bl	8007834 <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7fe fbeb 	bl	80001d0 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <send_to_gsm+0x54>)
 8001a04:	f003 fc14 	bl	8005230 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	22c8      	movs	r2, #200	; 0xc8
 8001a0e:	4906      	ldr	r1, [pc, #24]	; (8001a28 <send_to_gsm+0x4c>)
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <send_to_gsm+0x54>)
 8001a12:	f003 fb3b 	bl	800508c <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8001a16:	4904      	ldr	r1, [pc, #16]	; (8001a28 <send_to_gsm+0x4c>)
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <send_to_gsm+0x58>)
 8001a1a:	f005 fe85 	bl	8007728 <iprintf>
	 return (char *)rx;
 8001a1e:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <send_to_gsm+0x4c>)
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000022c 	.word	0x2000022c
 8001a2c:	0800c02c 	.word	0x0800c02c
 8001a30:	200002f8 	.word	0x200002f8
 8001a34:	0800c038 	.word	0x0800c038

08001a38 <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
		char buf[20];
		memset(buf,'\0',sizeof(buf));
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2214      	movs	r2, #20
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 ffea 	bl	8006a24 <memset>
		sprintf(buf, "AT+CIPSEND=0,%d\r", strlen(mes));
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe fbbd 	bl	80001d0 <strlen>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4922      	ldr	r1, [pc, #136]	; (8001ae8 <send_mesg_to_server+0xb0>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fef6 	bl	8007850 <siprintf>
		memset(rx,'\0',sizeof(rx));
 8001a64:	22c8      	movs	r2, #200	; 0xc8
 8001a66:	2100      	movs	r1, #0
 8001a68:	4820      	ldr	r0, [pc, #128]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a6a:	f004 ffdb 	bl	8006a24 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)buf,16);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2210      	movs	r2, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	481e      	ldr	r0, [pc, #120]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001a78:	f003 fbda 	bl	8005230 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001a7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a80:	22c8      	movs	r2, #200	; 0xc8
 8001a82:	491a      	ldr	r1, [pc, #104]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a84:	481a      	ldr	r0, [pc, #104]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001a86:	f003 fb01 	bl	800508c <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001a8a:	4918      	ldr	r1, [pc, #96]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a8c:	4819      	ldr	r0, [pc, #100]	; (8001af4 <send_mesg_to_server+0xbc>)
 8001a8e:	f005 fe4b 	bl	8007728 <iprintf>
		memset(rx,'\0',sizeof(rx));
 8001a92:	22c8      	movs	r2, #200	; 0xc8
 8001a94:	2100      	movs	r1, #0
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a98:	f004 ffc4 	bl	8006a24 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)mes,size);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001aa6:	f003 fbc3 	bl	8005230 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001aaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001aae:	22c8      	movs	r2, #200	; 0xc8
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <send_mesg_to_server+0xb4>)
 8001ab2:	480f      	ldr	r0, [pc, #60]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001ab4:	f003 faea 	bl	800508c <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <send_mesg_to_server+0xb4>)
 8001aba:	480e      	ldr	r0, [pc, #56]	; (8001af4 <send_mesg_to_server+0xbc>)
 8001abc:	f005 fe34 	bl	8007728 <iprintf>
		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 8001ac0:	490d      	ldr	r1, [pc, #52]	; (8001af8 <send_mesg_to_server+0xc0>)
 8001ac2:	480a      	ldr	r0, [pc, #40]	; (8001aec <send_mesg_to_server+0xb4>)
 8001ac4:	f005 ff69 	bl	800799a <strstr>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <send_mesg_to_server+0xa0>
		{
			printf("mesg send successfully\n");
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <send_mesg_to_server+0xc4>)
 8001ad0:	f005 feb0 	bl	8007834 <puts>
			return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e003      	b.n	8001ae0 <send_mesg_to_server+0xa8>
		}
		else
		{
			printf("mesg NOT send\n");
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <send_mesg_to_server+0xc8>)
 8001ada:	f005 feab 	bl	8007834 <puts>
			return 1;
 8001ade:	2301      	movs	r3, #1
		}
	return 1;
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800c044 	.word	0x0800c044
 8001aec:	2000022c 	.word	0x2000022c
 8001af0:	200002f8 	.word	0x200002f8
 8001af4:	0800c058 	.word	0x0800c058
 8001af8:	0800bce0 	.word	0x0800bce0
 8001afc:	0800c06c 	.word	0x0800c06c
 8001b00:	0800c084 	.word	0x0800c084

08001b04 <writeStringToFlash>:
#include "INT_Flash.h"
#include "stm32l4xx_hal.h"
#include<string.h>
/************ writing data to flash memory ********/
void writeStringToFlash(uint64_t address, const char* str) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8001b10:	f001 fb7c 	bl	800320c <HAL_FLASH_Unlock>

    // Calculate the length of the string
    uint32_t len = strlen(str);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7fe fb5b 	bl	80001d0 <strlen>
 8001b1a:	61f8      	str	r0, [r7, #28]

    // Ensure the length is even to write complete double words
    if (len % 8 != 0) {
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <writeStringToFlash+0x2c>
        len += (8 - len % 8);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f023 0307 	bic.w	r3, r3, #7
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	61fb      	str	r3, [r7, #28]
    }

    // Write the string to flash
    for (uint32_t i = 0; i < len; i += 8) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	e019      	b.n	8001b6a <writeStringToFlash+0x66>
        uint64_t data = 0;
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        memcpy(&data, str + i, 8);
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	18d1      	adds	r1, r2, r3
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 ff5a 	bl	8006a08 <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	18d1      	adds	r1, r2, r3
 8001b5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f001 fae8 	bl	8003134 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < len; i += 8) {
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	3308      	adds	r3, #8
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3e1      	bcc.n	8001b36 <writeStringToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8001b72:	f001 fb6d 	bl	8003250 <HAL_FLASH_Lock>
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <readDataFromFlash>:


/***************reading data from flash memory **************/
void readDataFromFlash(uint64_t address, char* buffer, uint64_t dataSize)
{
 8001b7e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b82:	b08d      	sub	sp, #52	; 0x34
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b8a:	60fa      	str	r2, [r7, #12]
	uint32_t i,j=0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < dataSize; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b94:	e03d      	b.n	8001c12 <readDataFromFlash+0x94>
	{
	       uint64_t data = *(__IO uint64_t*)address;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	       // Copy each byte from the 64-bit data
	               for (int k = 0; k < 8; k++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	e023      	b.n	8001bee <readDataFromFlash+0x70>
	                   if (j < dataSize - 1) {  // Ensure not to overflow the buffer
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	469a      	mov	sl, r3
 8001bac:	4693      	mov	fp, r2
 8001bae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bb2:	1e54      	subs	r4, r2, #1
 8001bb4:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001bb8:	45a2      	cmp	sl, r4
 8001bba:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001bbe:	d207      	bcs.n	8001bd0 <readDataFromFlash+0x52>
	                       buffer[j++] = (char)(data & 0xFF);
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bce:	701a      	strb	r2, [r3, #0]
	                   }
	                   data >>= 8;
 8001bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	0a02      	lsrs	r2, r0, #8
 8001bde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001be2:	0a0b      	lsrs	r3, r1, #8
 8001be4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	               for (int k = 0; k < 8; k++) {
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	ddd8      	ble.n	8001ba6 <readDataFromFlash+0x28>
	               }
	       address += 8;
 8001bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bf8:	f112 0108 	adds.w	r1, r2, #8
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	f143 0300 	adc.w	r3, r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < dataSize; i++)
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	2200      	movs	r2, #0
 8001c16:	4698      	mov	r8, r3
 8001c18:	4691      	mov	r9, r2
 8001c1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c1e:	4590      	cmp	r8, r2
 8001c20:	eb79 0303 	sbcs.w	r3, r9, r3
 8001c24:	d3b7      	bcc.n	8001b96 <readDataFromFlash+0x18>
	}
	buffer[i] = '\0';
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	4413      	add	r3, r2
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

}
 8001c30:	bf00      	nop
 8001c32:	3734      	adds	r7, #52	; 0x34
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c3a:	4770      	bx	lr

08001c3c <eraseFlashPage>:



/**************Erasing data from flash memory ****************/
void eraseFlashPage(uint64_t pageAddress) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	e9c7 0100 	strd	r0, r1, [r7]
    FLASH_EraseInitTypeDef eraseConfig;
    uint32_t pageError;

    eraseConfig.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
    eraseConfig.Page        = pageAddress / FLASH_PAGE_SIZE; // Specify the page number, not the address
 8001c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	0ac2      	lsrs	r2, r0, #11
 8001c58:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001c5c:	0acb      	lsrs	r3, r1, #11
 8001c5e:	4613      	mov	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
    eraseConfig.Banks       = FLASH_BANK_2; // Specify the bank
 8001c62:	2302      	movs	r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
    eraseConfig.NbPages     = 1; // Number of pages to erase
 8001c66:	2301      	movs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 8001c6a:	f001 facf 	bl	800320c <HAL_FLASH_Unlock>

    HAL_FLASHEx_Erase(&eraseConfig, &pageError);
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fbab 	bl	80033d4 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8001c7e:	f001 fae7 	bl	8003250 <HAL_FLASH_Lock>
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_UART_RxCpltCallback>:
int Flag=0;
extern uint8_t flag ;
extern gpsdata gps;
extern int gps_status;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_UART_RxCpltCallback+0x24>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d105      	bne.n	8001ca8 <HAL_UART_RxCpltCallback+0x1c>
    {
        // Process the received data
    	//printf("data is %s\n",gps.Data);
//        gpsData(&gps);
    	gps_status = gpsData(&gps);
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_RxCpltCallback+0x28>)
 8001c9e:	f000 f829 	bl	8001cf4 <gpsData>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_UART_RxCpltCallback+0x2c>)
 8001ca6:	6013      	str	r3, [r2, #0]
    }
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000400 	.word	0x20000400
 8001cb4:	200009e0 	.word	0x200009e0
 8001cb8:	20000004 	.word	0x20000004

08001cbc <get_gps_data>:

int get_gps_data()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
//	memset(gps.Data,'\0',sizeof(gps.Data));
//	char b[1000];
//	memset(b,'\0',sizeof(b));
//	char Rx_buff[750];
	HAL_UART_Receive_IT(&huart1,(uint8_t*)gps.Data,750);
 8001cc0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <get_gps_data+0x28>)
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <get_gps_data+0x2c>)
 8001cc8:	f003 fb20 	bl	800530c <HAL_UART_Receive_IT>
	//strcpy(gps.Data,Rx_buff);
	//memset(Rx_buff,'\0',750);
//	HAL_Delay(5000);
		  {
//							printf("%s\n",b);
				printf("received start from MODULE\n");
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <get_gps_data+0x30>)
 8001cce:	f005 fdb1 	bl	8007834 <puts>
			    printf("%s\n",gps.Data);
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <get_gps_data+0x28>)
 8001cd4:	f005 fdae 	bl	8007834 <puts>
			    printf("received end  from MODULE\n");
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <get_gps_data+0x34>)
 8001cda:	f005 fdab 	bl	8007834 <puts>
			    return 0;
 8001cde:	2300      	movs	r3, #0
		  }
//	else
//	{
//		return 1;
//	}
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000a08 	.word	0x20000a08
 8001ce8:	20000400 	.word	0x20000400
 8001cec:	0800c094 	.word	0x0800c094
 8001cf0:	0800c0b0 	.word	0x0800c0b0

08001cf4 <gpsData>:

int gpsData(gpsdata* data)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af04      	add	r7, sp, #16
 8001cfa:	6078      	str	r0, [r7, #4]
	char *current_flag;
	int counter;
	int comma = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
	printf("in func\n");
 8001d00:	4861      	ldr	r0, [pc, #388]	; (8001e88 <gpsData+0x194>)
 8001d02:	f005 fd97 	bl	8007834 <puts>
			//HAL_UART_Receive(&GpsData->UartPort,(uint8_t*)GpsData->Data,700,HAL_MAX_DELAY);
	current_flag=strstr(data->Data,"GNGGA");
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3328      	adds	r3, #40	; 0x28
 8001d0a:	4960      	ldr	r1, [pc, #384]	; (8001e8c <gpsData+0x198>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f005 fe44 	bl	800799a <strstr>
 8001d12:	60b8      	str	r0, [r7, #8]
	//printf("string found\n");
	if(*current_flag=='G')
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b47      	cmp	r3, #71	; 0x47
 8001d1a:	f040 80ac 	bne.w	8001e76 <gpsData+0x182>
	{
	   counter=0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8001d22:	e00d      	b.n	8001d40 <gpsData+0x4c>
	   {
		   data->particular_flag_data[counter]=*(current_flag+counter);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	7819      	ldrb	r1, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4413      	add	r3, r2
 8001d32:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001d36:	460a      	mov	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
		   counter++;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b2a      	cmp	r3, #42	; 0x2a
 8001d4a:	d1eb      	bne.n	8001d24 <gpsData+0x30>
	   }
	    printf(" string is %s", data->particular_flag_data);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001d52:	4619      	mov	r1, r3
 8001d54:	484e      	ldr	r0, [pc, #312]	; (8001e90 <gpsData+0x19c>)
 8001d56:	f005 fce7 	bl	8007728 <iprintf>
		sprintf(data->buffer,"%s",data->particular_flag_data);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f203 3016 	addw	r0, r3, #790	; 0x316
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001d66:	461a      	mov	r2, r3
 8001d68:	494a      	ldr	r1, [pc, #296]	; (8001e94 <gpsData+0x1a0>)
 8001d6a:	f005 fd71 	bl	8007850 <siprintf>
		sscanf(data->buffer,"GNGGA,%lf,%f,%c,%f,%c,%d,",&data->time,&data->latitude,&data->N_OR_S,&data->longitude,&data->E_OR_W,&data->fix);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f203 3416 	addw	r4, r3, #790	; 0x316
 8001d74:	687d      	ldr	r5, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 0608 	add.w	r6, r3, #8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3321      	adds	r3, #33	; 0x21
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	320c      	adds	r2, #12
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	3122      	adds	r1, #34	; 0x22
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	3024      	adds	r0, #36	; 0x24
 8001d8c:	9003      	str	r0, [sp, #12]
 8001d8e:	9102      	str	r1, [sp, #8]
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4633      	mov	r3, r6
 8001d96:	462a      	mov	r2, r5
 8001d98:	493f      	ldr	r1, [pc, #252]	; (8001e98 <gpsData+0x1a4>)
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f005 fd78 	bl	8007890 <siscanf>
        printf("lat:%f\n",data->latitude);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbcf 	bl	8000548 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	483b      	ldr	r0, [pc, #236]	; (8001e9c <gpsData+0x1a8>)
 8001db0:	f005 fcba 	bl	8007728 <iprintf>
        printf("lon:%f\n",data->longitude);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbc5 	bl	8000548 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4837      	ldr	r0, [pc, #220]	; (8001ea0 <gpsData+0x1ac>)
 8001dc4:	f005 fcb0 	bl	8007728 <iprintf>


		current_flag=strstr(data->Data,"RMC");
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3328      	adds	r3, #40	; 0x28
 8001dcc:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <gpsData+0x1b0>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fde3 	bl	800799a <strstr>
 8001dd4:	60b8      	str	r0, [r7, #8]
			//printf("string found\n");
			if(*current_flag=='R')
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b52      	cmp	r3, #82	; 0x52
 8001ddc:	d132      	bne.n	8001e44 <gpsData+0x150>
			{
				printf("\nrmc ->%d\n",*current_flag);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	4830      	ldr	r0, [pc, #192]	; (8001ea8 <gpsData+0x1b4>)
 8001de6:	f005 fc9f 	bl	8007728 <iprintf>
				counter=0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]

				while(comma < 9) {
 8001dee:	e00e      	b.n	8001e0e <gpsData+0x11a>
					if(*(current_flag + counter) == ',')
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b2c      	cmp	r3, #44	; 0x2c
 8001dfa:	d102      	bne.n	8001e02 <gpsData+0x10e>
						comma++;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	613b      	str	r3, [r7, #16]
					counter++;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
					if(comma == 9)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d003      	beq.n	8001e16 <gpsData+0x122>
				while(comma < 9) {
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	dded      	ble.n	8001df0 <gpsData+0xfc>
 8001e14:	e000      	b.n	8001e18 <gpsData+0x124>
						break;
 8001e16:	bf00      	nop

				}

				for(int i=counter; i < counter+7; i++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e00d      	b.n	8001e3a <gpsData+0x146>
					data->Date[i-counter]= *(current_flag+i);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	441a      	add	r2, r3
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1acb      	subs	r3, r1, r3
 8001e2a:	7811      	ldrb	r1, [r2, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	460a      	mov	r2, r1
 8001e32:	761a      	strb	r2, [r3, #24]
				for(int i=counter; i < counter+7; i++)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	ddec      	ble.n	8001e1e <gpsData+0x12a>
			}


		if(data->fix==1||data->fix==2||data->fix==6)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d007      	beq.n	8001e5c <gpsData+0x168>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <gpsData+0x168>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2b06      	cmp	r3, #6
 8001e5a:	d107      	bne.n	8001e6c <gpsData+0x178>
		{
			printf("valid fix\n");
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <gpsData+0x1b8>)
 8001e5e:	f005 fce9 	bl	8007834 <puts>
			gps_data_extraction(data);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f828 	bl	8001eb8 <gps_data_extraction>
			return 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e008      	b.n	8001e7e <gpsData+0x18a>

		}
		else
		{
			printf("invalid signal no fix\n");
 8001e6c:	4810      	ldr	r0, [pc, #64]	; (8001eb0 <gpsData+0x1bc>)
 8001e6e:	f005 fce1 	bl	8007834 <puts>
			return 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e003      	b.n	8001e7e <gpsData+0x18a>
		}
	 }
	else
	{
		printf("no data\n");
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <gpsData+0x1c0>)
 8001e78:	f005 fcdc 	bl	8007834 <puts>
		return 1;
 8001e7c:	2301      	movs	r3, #1
	}
	return 1;
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	0800c0cc 	.word	0x0800c0cc
 8001e8c:	0800c0d4 	.word	0x0800c0d4
 8001e90:	0800c0dc 	.word	0x0800c0dc
 8001e94:	0800c0ec 	.word	0x0800c0ec
 8001e98:	0800c0f0 	.word	0x0800c0f0
 8001e9c:	0800c10c 	.word	0x0800c10c
 8001ea0:	0800c114 	.word	0x0800c114
 8001ea4:	0800c11c 	.word	0x0800c11c
 8001ea8:	0800c120 	.word	0x0800c120
 8001eac:	0800c12c 	.word	0x0800c12c
 8001eb0:	0800c138 	.word	0x0800c138
 8001eb4:	0800c150 	.word	0x0800c150

08001eb8 <gps_data_extraction>:
void gps_data_extraction(gpsdata* data)
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	b09d      	sub	sp, #116	; 0x74
 8001ebc:	af0a      	add	r7, sp, #40	; 0x28
 8001ebe:	6078      	str	r0, [r7, #4]
	double Deg_Val=0.0,Min_Val=0.0,Sec_Val=0.0,lon=0.0,lat=0.0;
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int hr,min,sec;
	//int hours, minutes, seconds;

	lon=data->longitude;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	lat=data->latitude;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if((data->E_OR_W=='E' && data->N_OR_S=='S')||(data->E_OR_W=='W' && data->N_OR_S=='N'))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001f26:	2b45      	cmp	r3, #69	; 0x45
 8001f28:	d104      	bne.n	8001f34 <gps_data_extraction+0x7c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f30:	2b53      	cmp	r3, #83	; 0x53
 8001f32:	d00b      	beq.n	8001f4c <gps_data_extraction+0x94>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001f3a:	2b57      	cmp	r3, #87	; 0x57
 8001f3c:	f040 8115 	bne.w	800216a <gps_data_extraction+0x2b2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f46:	2b4e      	cmp	r3, #78	; 0x4e
 8001f48:	f040 810f 	bne.w	800216a <gps_data_extraction+0x2b2>
	{
		Deg_Val=(int)(lon/100);
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4bbd      	ldr	r3, [pc, #756]	; (8002248 <gps_data_extraction+0x390>)
 8001f52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f56:	f7fe fc79 	bl	800084c <__aeabi_ddiv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fdf9 	bl	8000b58 <__aeabi_d2iz>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fadb 	bl	8000524 <__aeabi_i2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lon-(Deg_Val*100));
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	4bb3      	ldr	r3, [pc, #716]	; (8002248 <gps_data_extraction+0x390>)
 8001f7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f80:	f7fe fb3a 	bl	80005f8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f8c:	f7fe f97c 	bl	8000288 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fdde 	bl	8000b58 <__aeabi_d2iz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fac0 	bl	8000524 <__aeabi_i2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lon-(Deg_Val*100))-Min_Val)*100;
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4ba5      	ldr	r3, [pc, #660]	; (8002248 <gps_data_extraction+0x390>)
 8001fb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fb6:	f7fe fb1f 	bl	80005f8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fc2:	f7fe f961 	bl	8000288 <__aeabi_dsub>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fd2:	f7fe f959 	bl	8000288 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b99      	ldr	r3, [pc, #612]	; (8002248 <gps_data_extraction+0x390>)
 8001fe4:	f7fe fb08 	bl	80005f8 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->longitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree))*-1;
 8001ff0:	a38f      	add	r3, pc, #572	; (adr r3, 8002230 <gps_data_extraction+0x378>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ffa:	f7fe fafd 	bl	80005f8 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800200a:	f7fe f93f 	bl	800028c <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	a388      	add	r3, pc, #544	; (adr r3, 8002238 <gps_data_extraction+0x380>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002020:	f7fe faea 	bl	80005f8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe f92e 	bl	800028c <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f7fe fdd6 	bl	8000be8 <__aeabi_d2f>
 800203c:	4603      	mov	r3, r0
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef1 7a67 	vneg.f32	s15, s15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	edc3 7a03 	vstr	s15, [r3, #12]
		printf("longitude : %f\n",data->longitude);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa79 	bl	8000548 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	487c      	ldr	r0, [pc, #496]	; (800224c <gps_data_extraction+0x394>)
 800205c:	f005 fb64 	bl	8007728 <iprintf>

		Deg_Val=(int)((lat/100));
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b78      	ldr	r3, [pc, #480]	; (8002248 <gps_data_extraction+0x390>)
 8002066:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800206a:	f7fe fbef 	bl	800084c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd6f 	bl	8000b58 <__aeabi_d2iz>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa51 	bl	8000524 <__aeabi_i2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lat-(Deg_Val*100));
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b6e      	ldr	r3, [pc, #440]	; (8002248 <gps_data_extraction+0x390>)
 8002090:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002094:	f7fe fab0 	bl	80005f8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020a0:	f7fe f8f2 	bl	8000288 <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fd54 	bl	8000b58 <__aeabi_d2iz>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa36 	bl	8000524 <__aeabi_i2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lat-(Deg_Val*100))-Min_Val)*10;
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b60      	ldr	r3, [pc, #384]	; (8002248 <gps_data_extraction+0x390>)
 80020c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020ca:	f7fe fa95 	bl	80005f8 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020d6:	f7fe f8d7 	bl	8000288 <__aeabi_dsub>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020e6:	f7fe f8cf 	bl	8000288 <__aeabi_dsub>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <gps_data_extraction+0x398>)
 80020f8:	f7fe fa7e 	bl	80005f8 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->latitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree));
 8002104:	a34a      	add	r3, pc, #296	; (adr r3, 8002230 <gps_data_extraction+0x378>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800210e:	f7fe fa73 	bl	80005f8 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800211e:	f7fe f8b5 	bl	800028c <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	a343      	add	r3, pc, #268	; (adr r3, 8002238 <gps_data_extraction+0x380>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002134:	f7fe fa60 	bl	80005f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8a4 	bl	800028c <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd4c 	bl	8000be8 <__aeabi_d2f>
 8002150:	4602      	mov	r2, r0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]
		printf("latitude : %f\n",data->latitude);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9f4 	bl	8000548 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	483b      	ldr	r0, [pc, #236]	; (8002254 <gps_data_extraction+0x39c>)
 8002166:	f005 fadf 	bl	8007728 <iprintf>
	}
    hr=(int)((data->time)/10000);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002170:	a333      	add	r3, pc, #204	; (adr r3, 8002240 <gps_data_extraction+0x388>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fb69 	bl	800084c <__aeabi_ddiv>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fce9 	bl	8000b58 <__aeabi_d2iz>
 8002186:	4603      	mov	r3, r0
 8002188:	617b      	str	r3, [r7, #20]
   	min=(int)(data->time-(hr*10000))/100;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f242 7210 	movw	r2, #10000	; 0x2710
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9c2 	bl	8000524 <__aeabi_i2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4620      	mov	r0, r4
 80021a6:	4629      	mov	r1, r5
 80021a8:	f7fe f86e 	bl	8000288 <__aeabi_dsub>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fcd0 	bl	8000b58 <__aeabi_d2iz>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <gps_data_extraction+0x3a0>)
 80021bc:	fb82 1203 	smull	r1, r2, r2, r3
 80021c0:	1152      	asrs	r2, r2, #5
 80021c2:	17db      	asrs	r3, r3, #31
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	613b      	str	r3, [r7, #16]
   	sec=(int)(data->time-((hr*10000)+(min*100)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80021d4:	fb03 f202 	mul.w	r2, r3, r2
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f99e 	bl	8000524 <__aeabi_i2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f84a 	bl	8000288 <__aeabi_dsub>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fcac 	bl	8000b58 <__aeabi_d2iz>
 8002200:	4603      	mov	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]
   	int ist_hr = hr + 5;  // 5 hours difference
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3305      	adds	r3, #5
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
   	int ist_min = min + 30;  // 30 minutes difference
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	331e      	adds	r3, #30
 800220e:	643b      	str	r3, [r7, #64]	; 0x40
    if(ist_hr>=24)
 8002210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002212:	2b17      	cmp	r3, #23
 8002214:	dd02      	ble.n	800221c <gps_data_extraction+0x364>
    {
    	ist_hr-=24;
 8002216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002218:	3b18      	subs	r3, #24
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
    }
   	// Adjusting for overflow
   	if (ist_min >= 60) {
 800221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221e:	2b3b      	cmp	r3, #59	; 0x3b
 8002220:	dd1c      	ble.n	800225c <gps_data_extraction+0x3a4>
   	    ist_hr++;
 8002222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002224:	3301      	adds	r3, #1
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
   	    ist_min -= 60;
 8002228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222a:	3b3c      	subs	r3, #60	; 0x3c
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
 800222e:	e015      	b.n	800225c <gps_data_extraction+0x3a4>
 8002230:	111fba11 	.word	0x111fba11
 8002234:	3f911111 	.word	0x3f911111
 8002238:	78d949ab 	.word	0x78d949ab
 800223c:	3f323456 	.word	0x3f323456
 8002240:	00000000 	.word	0x00000000
 8002244:	40c38800 	.word	0x40c38800
 8002248:	40590000 	.word	0x40590000
 800224c:	0800c158 	.word	0x0800c158
 8002250:	40240000 	.word	0x40240000
 8002254:	0800c168 	.word	0x0800c168
 8002258:	51eb851f 	.word	0x51eb851f
//	        // Format and store in gpsData
//	     sprintf(data->time, "%02d:%02d:%02d", hours, minutes, seconds);
			//sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":%s,\nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);

//		sprintf(json_str,"latitude:%f %c,longitude:%f %c,time:%d:%d:%d,Date = %s\n",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date);
		sprintf(json_str,"\n{\n\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\": %d:%d:%d \n \"Date\" = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f971 	bl	8000548 <__aeabi_f2d>
 8002266:	4604      	mov	r4, r0
 8002268:	460d      	mov	r5, r1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002270:	461e      	mov	r6, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002286:	4608      	mov	r0, r1
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	3118      	adds	r1, #24
 800228c:	9108      	str	r1, [sp, #32]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	9107      	str	r1, [sp, #28]
 8002292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002294:	9106      	str	r1, [sp, #24]
 8002296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002298:	9105      	str	r1, [sp, #20]
 800229a:	9004      	str	r0, [sp, #16]
 800229c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022a0:	9600      	str	r6, [sp, #0]
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	4906      	ldr	r1, [pc, #24]	; (80022c0 <gps_data_extraction+0x408>)
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <gps_data_extraction+0x40c>)
 80022aa:	f005 fad1 	bl	8007850 <siprintf>
//	     sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":\"%lf \" \nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);
	     printf("json format is %s\n",json_str);
 80022ae:	4905      	ldr	r1, [pc, #20]	; (80022c4 <gps_data_extraction+0x40c>)
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <gps_data_extraction+0x410>)
 80022b2:	f005 fa39 	bl	8007728 <iprintf>

}
 80022b6:	bf00      	nop
 80022b8:	374c      	adds	r7, #76	; 0x4c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800c178 	.word	0x0800c178
 80022c4:	20000590 	.word	0x20000590
 80022c8:	0800c1c4 	.word	0x0800c1c4

080022cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80022e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80022ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80022f4:	e000      	b.n	80022f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80022f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80022f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f9      	beq.n	80022f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002302:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_write>:
#include"INT_Flash.h"

#define FLASH_START_ADDRESS 0x08080000

int _write(int file,char *ptr,int len)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
    int i=0;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e009      	b.n	8002344 <_write+0x2a>
      ITM_SendChar((*ptr++));
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ffc7 	bl	80022cc <ITM_SendChar>
    for(i=0;i<len;i++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf1      	blt.n	8002330 <_write+0x16>
    return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <get_gsm_init>:
gpsdata gps;



int get_gsm_init()
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
	if(gsm_init()==0)
 800235a:	f7fe fe4d 	bl	8000ff8 <gsm_init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <get_gsm_init+0x20>
	{
		if(connect_tcp_server()==0)
 8002364:	f7ff fa0e 	bl	8001784 <connect_tcp_server>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <get_gsm_init+0x1c>
				return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e002      	b.n	8002378 <get_gsm_init+0x22>
			else
				return 1;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <get_gsm_init+0x22>
	}
	else
	{
		return 1;
 8002376:	2301      	movs	r3, #1
	}


}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}

0800237c <gsm_actual_server>:


void gsm_actual_server()
  {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
      int count = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
     while(count<2)
 8002386:	e00e      	b.n	80023a6 <gsm_actual_server+0x2a>
     {
     if(get_gsm_init() == 0)
 8002388:	f7ff ffe5 	bl	8002356 <get_gsm_init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <gsm_actual_server+0x1e>
     {
            gsm_status = 0;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <gsm_actual_server+0x3c>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
            break;
 8002398:	e009      	b.n	80023ae <gsm_actual_server+0x32>
        }
        else
        {
            count++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3301      	adds	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
            gsm_status = 1;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <gsm_actual_server+0x3c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
     while(count<2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	dded      	ble.n	8002388 <gsm_actual_server+0xc>
        }
    }
  }
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000

080023bc <main>:
int main(void)
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af02      	add	r7, sp, #8
  HAL_Init();
 80023c2:	f000 fc87 	bl	8002cd4 <HAL_Init>

  SystemClock_Config();
 80023c6:	f000 f8bd 	bl	8002544 <SystemClock_Config>

  MX_GPIO_Init();
 80023ca:	f000 f9fd 	bl	80027c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023ce:	f000 f99b 	bl	8002708 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80023d2:	f000 f909 	bl	80025e8 <MX_UART4_Init>
  MX_UART5_Init();
 80023d6:	f000 f937 	bl	8002648 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80023da:	f000 f965 	bl	80026a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80023de:	f000 f9c3 	bl	8002768 <MX_USART3_UART_Init>

  eraseFlashPage(FLASH_START_ADDRESS);
 80023e2:	484a      	ldr	r0, [pc, #296]	; (800250c <main+0x150>)
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	f7ff fc28 	bl	8001c3c <eraseFlashPage>


  int inactive_count = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	607b      	str	r3, [r7, #4]

          gsm_actual_server();
 80023f0:	f7ff ffc4 	bl	800237c <gsm_actual_server>

        while (1)
        {
        	memset(json_str,'\0',100);
 80023f4:	2264      	movs	r2, #100	; 0x64
 80023f6:	2100      	movs	r1, #0
 80023f8:	4845      	ldr	r0, [pc, #276]	; (8002510 <main+0x154>)
 80023fa:	f004 fb13 	bl	8006a24 <memset>
        	length = 0;
 80023fe:	4b45      	ldr	r3, [pc, #276]	; (8002514 <main+0x158>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
            // memset gps data and json string
            get_gps_data();
 8002404:	f7ff fc5a 	bl	8001cbc <get_gps_data>
            printf("json data %s\n",json_str);
 8002408:	4941      	ldr	r1, [pc, #260]	; (8002510 <main+0x154>)
 800240a:	4843      	ldr	r0, [pc, #268]	; (8002518 <main+0x15c>)
 800240c:	f005 f98c 	bl	8007728 <iprintf>
            length = strlen(json_str);
 8002410:	483f      	ldr	r0, [pc, #252]	; (8002510 <main+0x154>)
 8002412:	f7fd fedd 	bl	80001d0 <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <main+0x158>)
 800241c:	601a      	str	r2, [r3, #0]
            printf("length of json string %d data %s\n",length,json_str);
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <main+0x158>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <main+0x154>)
 8002424:	4619      	mov	r1, r3
 8002426:	483d      	ldr	r0, [pc, #244]	; (800251c <main+0x160>)
 8002428:	f005 f97e 	bl	8007728 <iprintf>
            printf("gps_status %d\n",gps_status);
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <main+0x164>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	483c      	ldr	r0, [pc, #240]	; (8002524 <main+0x168>)
 8002434:	f005 f978 	bl	8007728 <iprintf>
            if(gps_status==0)
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <main+0x164>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d15a      	bne.n	80024f6 <main+0x13a>
            {
                if(check_server_connection()==0)
 8002440:	f7ff f8b6 	bl	80015b0 <check_server_connection>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <main+0xbc>
                {
                    mesg_status = send_mesg_to_server(json_str,length);
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <main+0x158>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	482f      	ldr	r0, [pc, #188]	; (8002510 <main+0x154>)
 8002452:	f7ff faf1 	bl	8001a38 <send_mesg_to_server>
 8002456:	4603      	mov	r3, r0
 8002458:	4a33      	ldr	r2, [pc, #204]	; (8002528 <main+0x16c>)
 800245a:	6013      	str	r3, [r2, #0]
                    if(mesg_status == 1)
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <main+0x16c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d103      	bne.n	800246c <main+0xb0>
                    {
                            gsm_status = 1;
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <main+0x170>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e008      	b.n	800247e <main+0xc2>
                    }
                    else
                    {
                    	gsm_status = 0;
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <main+0x170>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
                        inactive_count = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	e002      	b.n	800247e <main+0xc2>
                    }
                }

                else
                {
                		 gsm_status = 1;
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <main+0x170>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]
                }

                if(gsm_status==1)
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <main+0x170>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d12f      	bne.n	80024e6 <main+0x12a>
                {
                	eraseFlashPage(FLASH_START_ADDRESS);
 8002486:	4821      	ldr	r0, [pc, #132]	; (800250c <main+0x150>)
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	f7ff fbd6 	bl	8001c3c <eraseFlashPage>
                	HAL_Delay(1000);
 8002490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002494:	f000 fc9a 	bl	8002dcc <HAL_Delay>
                    writeStringToFlash(FLASH_START_ADDRESS,json_str);
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <main+0x154>)
 800249a:	481c      	ldr	r0, [pc, #112]	; (800250c <main+0x150>)
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	f7ff fb30 	bl	8001b04 <writeStringToFlash>
                    inactive_count++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3301      	adds	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
                    HAL_Delay(500);
 80024aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ae:	f000 fc8d 	bl	8002dcc <HAL_Delay>
                    readDataFromFlash(FLASH_START_ADDRESS, read_json, strlen(json_str)+1);
 80024b2:	4817      	ldr	r0, [pc, #92]	; (8002510 <main+0x154>)
 80024b4:	f7fd fe8c 	bl	80001d0 <strlen>
 80024b8:	4603      	mov	r3, r0
 80024ba:	3301      	adds	r3, #1
 80024bc:	2200      	movs	r2, #0
 80024be:	461c      	mov	r4, r3
 80024c0:	4615      	mov	r5, r2
 80024c2:	e9cd 4500 	strd	r4, r5, [sp]
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <main+0x174>)
 80024c8:	4810      	ldr	r0, [pc, #64]	; (800250c <main+0x150>)
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	f7ff fb56 	bl	8001b7e <readDataFromFlash>
                    printf("From Flash\n");
 80024d2:	4818      	ldr	r0, [pc, #96]	; (8002534 <main+0x178>)
 80024d4:	f005 f9ae 	bl	8007834 <puts>
                    printf("%s",read_json);
 80024d8:	4915      	ldr	r1, [pc, #84]	; (8002530 <main+0x174>)
 80024da:	4817      	ldr	r0, [pc, #92]	; (8002538 <main+0x17c>)
 80024dc:	f005 f924 	bl	8007728 <iprintf>
                    printf("end from flash\n");
 80024e0:	4816      	ldr	r0, [pc, #88]	; (800253c <main+0x180>)
 80024e2:	f005 f9a7 	bl	8007834 <puts>
                }

                if(inactive_count>10)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	dd0a      	ble.n	8002502 <main+0x146>
                	 * {
                	 * 		send fom flash to server
                	 * 		inactive_count = 0;
                	 * 	}
                	 */
                    gsm_actual_server();
 80024ec:	f7ff ff46 	bl	800237c <gsm_actual_server>
                    // handle sending data from flash to server
                    inactive_count = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	e005      	b.n	8002502 <main+0x146>
                }
            }

            else
            {
                printf("gps issue\n");
 80024f6:	4812      	ldr	r0, [pc, #72]	; (8002540 <main+0x184>)
 80024f8:	f005 f99c 	bl	8007834 <puts>

                gps_status = 1;
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <main+0x164>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]
            }


            HAL_Delay(3000);
 8002502:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002506:	f000 fc61 	bl	8002dcc <HAL_Delay>
        	memset(json_str,'\0',100);
 800250a:	e773      	b.n	80023f4 <main+0x38>
 800250c:	08080000 	.word	0x08080000
 8002510:	20000590 	.word	0x20000590
 8002514:	2000058c 	.word	0x2000058c
 8002518:	0800c1d8 	.word	0x0800c1d8
 800251c:	0800c1e8 	.word	0x0800c1e8
 8002520:	20000004 	.word	0x20000004
 8002524:	0800c20c 	.word	0x0800c20c
 8002528:	20000008 	.word	0x20000008
 800252c:	20000000 	.word	0x20000000
 8002530:	200005f4 	.word	0x200005f4
 8002534:	0800c21c 	.word	0x0800c21c
 8002538:	0800c228 	.word	0x0800c228
 800253c:	0800c22c 	.word	0x0800c22c
 8002540:	0800c23c 	.word	0x0800c23c

08002544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b096      	sub	sp, #88	; 0x58
 8002548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	2244      	movs	r2, #68	; 0x44
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fa66 	bl	8006a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002566:	f44f 7000 	mov.w	r0, #512	; 0x200
 800256a:	f001 fa2f 	bl	80039cc <HAL_PWREx_ControlVoltageScaling>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002574:	f000 f958 	bl	8002828 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002578:	2302      	movs	r3, #2
 800257a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002580:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002582:	2310      	movs	r3, #16
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002586:	2302      	movs	r3, #2
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800258a:	2302      	movs	r3, #2
 800258c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002592:	230a      	movs	r3, #10
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002596:	2307      	movs	r3, #7
 8002598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800259a:	2302      	movs	r3, #2
 800259c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800259e:	2302      	movs	r3, #2
 80025a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fa66 	bl	8003a78 <HAL_RCC_OscConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80025b2:	f000 f939 	bl	8002828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b6:	230f      	movs	r3, #15
 80025b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ba:	2303      	movs	r3, #3
 80025bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	2104      	movs	r1, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fe2e 	bl	8004230 <HAL_RCC_ClockConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025da:	f000 f925 	bl	8002828 <Error_Handler>
  }
}
 80025de:	bf00      	nop
 80025e0:	3758      	adds	r7, #88	; 0x58
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_UART4_Init+0x58>)
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <MX_UART4_Init+0x5c>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_UART4_Init+0x58>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_UART4_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_UART4_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_UART4_Init+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_UART4_Init+0x58>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_UART4_Init+0x58>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_UART4_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_UART4_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_UART4_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_UART4_Init+0x58>)
 800262c:	f002 fce0 	bl	8004ff0 <HAL_UART_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002636:	f000 f8f7 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200002f8 	.word	0x200002f8
 8002644:	40004c00 	.word	0x40004c00

08002648 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_UART5_Init+0x58>)
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <MX_UART5_Init+0x5c>)
 8002650:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_UART5_Init+0x58>)
 8002654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002658:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_UART5_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_UART5_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_UART5_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_UART5_Init+0x58>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_UART5_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_UART5_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_UART5_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_UART5_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_UART5_Init+0x58>)
 800268c:	f002 fcb0 	bl	8004ff0 <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002696:	f000 f8c7 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000037c 	.word	0x2000037c
 80026a4:	40005000 	.word	0x40005000

080026a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <MX_USART1_UART_Init+0x5c>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_USART1_UART_Init+0x58>)
 80026ec:	f002 fc80 	bl	8004ff0 <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026f6:	f000 f897 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000400 	.word	0x20000400
 8002704:	40013800 	.word	0x40013800

08002708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_USART2_UART_Init+0x58>)
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <MX_USART2_UART_Init+0x5c>)
 8002710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <MX_USART2_UART_Init+0x58>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_USART2_UART_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_USART2_UART_Init+0x58>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_USART2_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_USART2_UART_Init+0x58>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_USART2_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_USART2_UART_Init+0x58>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_USART2_UART_Init+0x58>)
 800274c:	f002 fc50 	bl	8004ff0 <HAL_UART_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002756:	f000 f867 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000484 	.word	0x20000484
 8002764:	40004400 	.word	0x40004400

08002768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <MX_USART3_UART_Init+0x5c>)
 8002770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 8002774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_USART3_UART_Init+0x58>)
 80027ac:	f002 fc20 	bl	8004ff0 <HAL_UART_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027b6:	f000 f837 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000508 	.word	0x20000508
 80027c4:	40004800 	.word	0x40004800

080027c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_GPIO_Init+0x5c>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a14      	ldr	r2, [pc, #80]	; (8002824 <MX_GPIO_Init+0x5c>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_GPIO_Init+0x5c>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_GPIO_Init+0x5c>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <MX_GPIO_Init+0x5c>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_GPIO_Init+0x5c>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_GPIO_Init+0x5c>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <MX_GPIO_Init+0x5c>)
 8002804:	f043 0308 	orr.w	r3, r3, #8
 8002808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_GPIO_Init+0x5c>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000

08002828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800282c:	b672      	cpsid	i
}
 800282e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002830:	e7fe      	b.n	8002830 <Error_Handler+0x8>
	...

08002834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_MspInit+0x44>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_MspInit+0x44>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6613      	str	r3, [r2, #96]	; 0x60
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_MspInit+0x44>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_MspInit+0x44>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	4a08      	ldr	r2, [pc, #32]	; (8002878 <HAL_MspInit+0x44>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_MspInit+0x44>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0b0      	sub	sp, #192	; 0xc0
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	2288      	movs	r2, #136	; 0x88
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f8c1 	bl	8006a24 <memset>
  if(huart->Instance==UART4)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6f      	ldr	r2, [pc, #444]	; (8002a64 <HAL_UART_MspInit+0x1e8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d144      	bne.n	8002936 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80028ac:	2308      	movs	r3, #8
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fedd 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028c4:	f7ff ffb0 	bl	8002828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028c8:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a66      	ldr	r2, [pc, #408]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80028ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e0:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028f8:	2303      	movs	r3, #3
 80028fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002910:	2308      	movs	r3, #8
 8002912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002920:	f000 fe9c 	bl	800365c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2034      	movs	r0, #52	; 0x34
 800292a:	f000 fb4e 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800292e:	2034      	movs	r0, #52	; 0x34
 8002930:	f000 fb67 	bl	8003002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002934:	e092      	b.n	8002a5c <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_UART_MspInit+0x1f0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d145      	bne.n	80029cc <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002944:	2300      	movs	r3, #0
 8002946:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4618      	mov	r0, r3
 800294e:	f001 fe93 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002958:	f7ff ff66 	bl	8002828 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800295c:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	4a41      	ldr	r2, [pc, #260]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002966:	6613      	str	r3, [r2, #96]	; 0x60
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	4a3b      	ldr	r2, [pc, #236]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800298c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029a6:	2307      	movs	r3, #7
 80029a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029b0:	4619      	mov	r1, r3
 80029b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b6:	f000 fe51 	bl	800365c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	2025      	movs	r0, #37	; 0x25
 80029c0:	f000 fb03 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029c4:	2025      	movs	r0, #37	; 0x25
 80029c6:	f000 fb1c 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 80029ca:	e047      	b.n	8002a5c <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_UART_MspInit+0x1f4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d142      	bne.n	8002a5c <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029d6:	2304      	movs	r3, #4
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029da:	2300      	movs	r3, #0
 80029dc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fe48 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_UART_MspInit+0x176>
      Error_Handler();
 80029ee:	f7ff ff1b 	bl	8002828 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_UART_MspInit+0x1ec>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a22:	2330      	movs	r3, #48	; 0x30
 8002a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a44:	4619      	mov	r1, r3
 8002a46:	480b      	ldr	r0, [pc, #44]	; (8002a74 <HAL_UART_MspInit+0x1f8>)
 8002a48:	f000 fe08 	bl	800365c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2027      	movs	r0, #39	; 0x27
 8002a52:	f000 faba 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a56:	2027      	movs	r0, #39	; 0x27
 8002a58:	f000 fad3 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8002a5c:	bf00      	nop
 8002a5e:	37c0      	adds	r7, #192	; 0xc0
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40004c00 	.word	0x40004c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40004800 	.word	0x40004800
 8002a74:	48000800 	.word	0x48000800

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <NMI_Handler+0x4>

08002a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac4:	f000 f962 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <USART1_IRQHandler+0x10>)
 8002ad2:	f002 fc71 	bl	80053b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000400 	.word	0x20000400

08002ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <USART3_IRQHandler+0x10>)
 8002ae6:	f002 fc67 	bl	80053b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000508 	.word	0x20000508

08002af4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <UART4_IRQHandler+0x10>)
 8002afa:	f002 fc5d 	bl	80053b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200002f8 	.word	0x200002f8

08002b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return 1;
 8002b0c:	2301      	movs	r3, #1
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_kill>:

int _kill(int pid, int sig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b22:	f003 ff47 	bl	80069b4 <__errno>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2216      	movs	r2, #22
 8002b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_exit>:

void _exit (int status)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ffe7 	bl	8002b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b4a:	e7fe      	b.n	8002b4a <_exit+0x12>

08002b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	e00a      	b.n	8002b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b5e:	f3af 8000 	nop.w
 8002b62:	4601      	mov	r1, r0
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	60ba      	str	r2, [r7, #8]
 8002b6a:	b2ca      	uxtb	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	dbf0      	blt.n	8002b5e <_read+0x12>
  }

  return len;
 8002b7c:	687b      	ldr	r3, [r7, #4]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bae:	605a      	str	r2, [r3, #4]
  return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_isatty>:

int _isatty(int file)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <_sbrk+0x5c>)
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <_sbrk+0x60>)
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <_sbrk+0x64>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <_sbrk+0x68>)
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <_sbrk+0x64>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d207      	bcs.n	8002c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c20:	f003 fec8 	bl	80069b4 <__errno>
 8002c24:	4603      	mov	r3, r0
 8002c26:	220c      	movs	r2, #12
 8002c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	e009      	b.n	8002c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <_sbrk+0x64>)
 8002c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20018000 	.word	0x20018000
 8002c50:	00000400 	.word	0x00000400
 8002c54:	20000dc0 	.word	0x20000dc0
 8002c58:	20000dd8 	.word	0x20000dd8

08002c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <SystemInit+0x20>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <SystemInit+0x20>)
 8002c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c84:	f7ff ffea 	bl	8002c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8a:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <LoopForever+0xe>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <LoopForever+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cae:	f003 fe87 	bl	80069c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cb2:	f7ff fb83 	bl	80023bc <main>

08002cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cb6:	e7fe      	b.n	8002cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002cc4:	0800c76c 	.word	0x0800c76c
  ldr r2, =_sbss
 8002cc8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002ccc:	20000dd8 	.word	0x20000dd8

08002cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd0:	e7fe      	b.n	8002cd0 <ADC1_2_IRQHandler>
	...

08002cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_Init+0x3c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_Init+0x3c>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cea:	2003      	movs	r0, #3
 8002cec:	f000 f962 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f000 f80f 	bl	8002d14 <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	e001      	b.n	8002d06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d02:	f7ff fd97 	bl	8002834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d06:	79fb      	ldrb	r3, [r7, #7]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_InitTick+0x6c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d023      	beq.n	8002d70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_InitTick+0x70>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_InitTick+0x6c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f96d 	bl	800301e <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d809      	bhi.n	8002d64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d50:	2200      	movs	r2, #0
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f000 f937 	bl	8002fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_InitTick+0x74>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e007      	b.n	8002d74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e004      	b.n	8002d74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e001      	b.n	8002d74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000014 	.word	0x20000014
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	20000010 	.word	0x20000010

08002d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_IncTick+0x20>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_IncTick+0x24>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_IncTick+0x24>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000014 	.word	0x20000014
 8002db0:	20000dc4 	.word	0x20000dc4

08002db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return uwTick;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_GetTick+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000dc4 	.word	0x20000dc4

08002dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff ffee 	bl	8002db4 <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d005      	beq.n	8002df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_Delay+0x44>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df2:	bf00      	nop
 8002df4:	f7ff ffde 	bl	8002db4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8f7      	bhi.n	8002df4 <HAL_Delay+0x28>
  {
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000014 	.word	0x20000014

08002e14 <__NVIC_SetPriorityGrouping>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e46:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_GetPriorityGrouping>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_EnableIRQ>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db0b      	blt.n	8002ea2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4907      	ldr	r1, [pc, #28]	; (8002eb0 <__NVIC_EnableIRQ+0x38>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2001      	movs	r0, #1
 8002e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0a      	blt.n	8002ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	490c      	ldr	r1, [pc, #48]	; (8002f00 <__NVIC_SetPriority+0x4c>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002edc:	e00a      	b.n	8002ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4908      	ldr	r1, [pc, #32]	; (8002f04 <__NVIC_SetPriority+0x50>)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	3b04      	subs	r3, #4
 8002eec:	0112      	lsls	r2, r2, #4
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	761a      	strb	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <NVIC_EncodePriority>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f1c3 0307 	rsb	r3, r3, #7
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf28      	it	cs
 8002f26:	2304      	movcs	r3, #4
 8002f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d902      	bls.n	8002f38 <NVIC_EncodePriority+0x30>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3b03      	subs	r3, #3
 8002f36:	e000      	b.n	8002f3a <NVIC_EncodePriority+0x32>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	4313      	orrs	r3, r2
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	; 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <SysTick_Config>:
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f80:	d301      	bcc.n	8002f86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00f      	b.n	8002fa6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <SysTick_Config+0x40>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8e:	210f      	movs	r1, #15
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f7ff ff8e 	bl	8002eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <SysTick_Config+0x40>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <SysTick_Config+0x40>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff29 	bl	8002e14 <__NVIC_SetPriorityGrouping>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fdc:	f7ff ff3e 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8002fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7ff ff8e 	bl	8002f08 <NVIC_EncodePriority>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff5d 	bl	8002eb4 <__NVIC_SetPriority>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff31 	bl	8002e78 <__NVIC_EnableIRQ>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffa2 	bl	8002f70 <SysTick_Config>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d008      	beq.n	8003060 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2204      	movs	r2, #4
 8003052:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e022      	b.n	80030a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 020e 	bic.w	r2, r2, #14
 800306e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f003 021c 	and.w	r2, r3, #28
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d005      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e029      	b.n	800312a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 020e 	bic.w	r2, r2, #14
 80030e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 021c 	and.w	r2, r3, #28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
    }
  }
  return status;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_FLASH_Program+0xd0>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_FLASH_Program+0x1e>
 800314e:	2302      	movs	r3, #2
 8003150:	e053      	b.n	80031fa <HAL_FLASH_Program+0xc6>
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_FLASH_Program+0xd0>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800315c:	f000 f888 	bl	8003270 <FLASH_WaitForLastOperation>
 8003160:	4603      	mov	r3, r0
 8003162:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d143      	bne.n	80031f2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_FLASH_Program+0xd0>)
 800316c:	2200      	movs	r2, #0
 800316e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_FLASH_Program+0xd4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_FLASH_Program+0xd4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <HAL_FLASH_Program+0xd4>)
 8003182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003186:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003188:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_FLASH_Program+0xd0>)
 800318a:	2202      	movs	r2, #2
 800318c:	771a      	strb	r2, [r3, #28]
 800318e:	e002      	b.n	8003196 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_FLASH_Program+0xd0>)
 8003192:	2200      	movs	r2, #0
 8003194:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800319c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a0:	68b8      	ldr	r0, [r7, #8]
 80031a2:	f000 f8bb 	bl	800331c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80031a6:	2301      	movs	r3, #1
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e010      	b.n	80031ce <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d002      	beq.n	80031b8 <HAL_FLASH_Program+0x84>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d10a      	bne.n	80031ce <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	68b8      	ldr	r0, [r7, #8]
 80031be:	f000 f8d3 	bl	8003368 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d102      	bne.n	80031ce <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80031c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031cc:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031d2:	f000 f84d 	bl	8003270 <FLASH_WaitForLastOperation>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_FLASH_Program+0xd4>)
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <HAL_FLASH_Program+0xd4>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80031ee:	f000 f9eb 	bl	80035c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <HAL_FLASH_Program+0xd0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000018 	.word	0x20000018
 8003208:	40022000 	.word	0x40022000

0800320c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_FLASH_Unlock+0x38>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da0b      	bge.n	8003236 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_FLASH_Unlock+0x38>)
 8003220:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_FLASH_Unlock+0x3c>)
 8003222:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_FLASH_Unlock+0x38>)
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_FLASH_Unlock+0x40>)
 8003228:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_FLASH_Unlock+0x38>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	da01      	bge.n	8003236 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003236:	79fb      	ldrb	r3, [r7, #7]
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40022000 	.word	0x40022000
 8003248:	45670123 	.word	0x45670123
 800324c:	cdef89ab 	.word	0xcdef89ab

08003250 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_FLASH_Lock+0x1c>)
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_FLASH_Lock+0x1c>)
 800325a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800325e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40022000 	.word	0x40022000

08003270 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fd9c 	bl	8002db4 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800327e:	e00d      	b.n	800329c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d009      	beq.n	800329c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003288:	f7ff fd94 	bl	8002db4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d801      	bhi.n	800329c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e037      	b.n	800330c <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1eb      	bne.n	8003280 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01e      	beq.n	80032f8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <FLASH_WaitForLastOperation+0xa8>)
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <FLASH_WaitForLastOperation+0xa8>)
 80032c4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <FLASH_WaitForLastOperation+0x70>
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80032da:	490e      	ldr	r1, [pc, #56]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	618b      	str	r3, [r1, #24]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <FLASH_WaitForLastOperation+0x84>
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032f2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e009      	b.n	800330c <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <FLASH_WaitForLastOperation+0xa4>)
 8003306:	2201      	movs	r2, #1
 8003308:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40022000 	.word	0x40022000
 8003318:	20000018 	.word	0x20000018

0800331c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <FLASH_Program_DoubleWord+0x48>)
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <FLASH_Program_DoubleWord+0x48>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800333a:	f3bf 8f6f 	isb	sy
}
 800333e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	000a      	movs	r2, r1
 800334e:	2300      	movs	r3, #0
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	3104      	adds	r1, #4
 8003354:	4613      	mov	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40022000 	.word	0x40022000

08003368 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <FLASH_Program_Fast+0x68>)
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <FLASH_Program_Fast+0x68>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003388:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338a:	f3ef 8310 	mrs	r3, PRIMASK
 800338e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003390:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003394:	b672      	cpsid	i
}
 8003396:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	3304      	adds	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3304      	adds	r3, #4
 80033aa:	617b      	str	r3, [r7, #20]
    row_index--;
 80033ac:	7ffb      	ldrb	r3, [r7, #31]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ef      	bne.n	8003398 <FLASH_Program_Fast+0x30>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80033c4:	bf00      	nop
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40022000 	.word	0x40022000

080033d4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033de:	4b49      	ldr	r3, [pc, #292]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_FLASHEx_Erase+0x16>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e087      	b.n	80034fa <HAL_FLASHEx_Erase+0x126>
 80033ea:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033f4:	f7ff ff3c 	bl	8003270 <FLASH_WaitForLastOperation>
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d177      	bne.n	80034f2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003402:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 8003404:	2200      	movs	r2, #0
 8003406:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003414:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 8003426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800342c:	4b35      	ldr	r3, [pc, #212]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 800342e:	2203      	movs	r2, #3
 8003430:	771a      	strb	r2, [r3, #28]
 8003432:	e016      	b.n	8003462 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 8003436:	2201      	movs	r2, #1
 8003438:	771a      	strb	r2, [r3, #28]
 800343a:	e012      	b.n	8003462 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800343c:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 800344e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003452:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 8003456:	2202      	movs	r2, #2
 8003458:	771a      	strb	r2, [r3, #28]
 800345a:	e002      	b.n	8003462 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d113      	bne.n	8003492 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f84c 	bl	800350c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003474:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003478:	f7ff fefa 	bl	8003270 <FLASH_WaitForLastOperation>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003480:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 8003486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6153      	str	r3, [r2, #20]
 8003490:	e02d      	b.n	80034ee <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	e01d      	b.n	80034de <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4619      	mov	r1, r3
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f000 f857 	bl	800355c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034b2:	f7ff fedd 	bl	8003270 <FLASH_WaitForLastOperation>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <HAL_FLASHEx_Erase+0x134>)
 80034c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034c4:	f023 0302 	bic.w	r3, r3, #2
 80034c8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	601a      	str	r2, [r3, #0]
          break;
 80034d6:	e00a      	b.n	80034ee <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3301      	adds	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3d9      	bcc.n	80034a2 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80034ee:	f000 f86b 	bl	80035c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_FLASHEx_Erase+0x130>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000018 	.word	0x20000018
 8003508:	40022000 	.word	0x40022000

0800350c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <FLASH_MassErase+0x4c>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <FLASH_MassErase+0x4c>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <FLASH_MassErase+0x4c>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <FLASH_MassErase+0x4c>)
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <FLASH_MassErase+0x4c>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <FLASH_MassErase+0x4c>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354a:	6153      	str	r3, [r2, #20]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40022000 	.word	0x40022000

0800355c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <FLASH_PageErase+0x68>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <FLASH_PageErase+0x68>)
 8003576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800357a:	6153      	str	r3, [r2, #20]
 800357c:	e005      	b.n	800358a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <FLASH_PageErase+0x68>)
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <FLASH_PageErase+0x68>)
 8003584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003588:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <FLASH_PageErase+0x68>)
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <FLASH_PageErase+0x68>)
 800359c:	4313      	orrs	r3, r2
 800359e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <FLASH_PageErase+0x68>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <FLASH_PageErase+0x68>)
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <FLASH_PageErase+0x68>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <FLASH_PageErase+0x68>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	6153      	str	r3, [r2, #20]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40022000 	.word	0x40022000

080035c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <FLASH_FlushCaches+0x8c>)
 80035d0:	7f1b      	ldrb	r3, [r3, #28]
 80035d2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <FLASH_FlushCaches+0x18>
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d117      	bne.n	8003610 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <FLASH_FlushCaches+0x90>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <FLASH_FlushCaches+0x90>)
 80035e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <FLASH_FlushCaches+0x90>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <FLASH_FlushCaches+0x90>)
 80035f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <FLASH_FlushCaches+0x90>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a16      	ldr	r2, [pc, #88]	; (8003658 <FLASH_FlushCaches+0x90>)
 80035fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003602:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <FLASH_FlushCaches+0x90>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <FLASH_FlushCaches+0x90>)
 800360a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d002      	beq.n	800361c <FLASH_FlushCaches+0x54>
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d111      	bne.n	8003640 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <FLASH_FlushCaches+0x90>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <FLASH_FlushCaches+0x90>)
 8003622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <FLASH_FlushCaches+0x90>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <FLASH_FlushCaches+0x90>)
 800362e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003632:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <FLASH_FlushCaches+0x90>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a07      	ldr	r2, [pc, #28]	; (8003658 <FLASH_FlushCaches+0x90>)
 800363a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <FLASH_FlushCaches+0x8c>)
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000018 	.word	0x20000018
 8003658:	40022000 	.word	0x40022000

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366a:	e17f      	b.n	800396c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8171 	beq.w	8003966 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d005      	beq.n	800369c <HAL_GPIO_Init+0x40>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d130      	bne.n	80036fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036d2:	2201      	movs	r2, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 0201 	and.w	r2, r3, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d118      	bne.n	800373c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003710:	2201      	movs	r2, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f003 0201 	and.w	r2, r3, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b03      	cmp	r3, #3
 8003746:	d017      	beq.n	8003778 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d123      	bne.n	80037cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80ac 	beq.w	8003966 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380e:	4b5f      	ldr	r3, [pc, #380]	; (800398c <HAL_GPIO_Init+0x330>)
 8003810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003812:	4a5e      	ldr	r2, [pc, #376]	; (800398c <HAL_GPIO_Init+0x330>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6613      	str	r3, [r2, #96]	; 0x60
 800381a:	4b5c      	ldr	r3, [pc, #368]	; (800398c <HAL_GPIO_Init+0x330>)
 800381c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003826:	4a5a      	ldr	r2, [pc, #360]	; (8003990 <HAL_GPIO_Init+0x334>)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x242>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_GPIO_Init+0x338>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x23e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_GPIO_Init+0x33c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x23a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_GPIO_Init+0x340>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x236>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_GPIO_Init+0x344>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x232>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_GPIO_Init+0x348>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x22e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_GPIO_Init+0x34c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x22a>
 8003882:	2306      	movs	r3, #6
 8003884:	e00c      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 8003886:	2307      	movs	r3, #7
 8003888:	e00a      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800388a:	2305      	movs	r3, #5
 800388c:	e008      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800388e:	2304      	movs	r3, #4
 8003890:	e006      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 8003892:	2303      	movs	r3, #3
 8003894:	e004      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 8003896:	2302      	movs	r3, #2
 8003898:	e002      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_GPIO_Init+0x244>
 800389e:	2300      	movs	r3, #0
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	f002 0203 	and.w	r2, r2, #3
 80038a6:	0092      	lsls	r2, r2, #2
 80038a8:	4093      	lsls	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038b0:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_GPIO_Init+0x334>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	3302      	adds	r3, #2
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_GPIO_Init+0x350>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038e2:	4a32      	ldr	r2, [pc, #200]	; (80039ac <HAL_GPIO_Init+0x350>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038e8:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_GPIO_Init+0x350>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <HAL_GPIO_Init+0x350>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_GPIO_Init+0x350>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_GPIO_Init+0x350>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_GPIO_Init+0x350>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003960:	4a12      	ldr	r2, [pc, #72]	; (80039ac <HAL_GPIO_Init+0x350>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f ae78 	bne.w	800366c <HAL_GPIO_Init+0x10>
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	40010000 	.word	0x40010000
 8003994:	48000400 	.word	0x48000400
 8003998:	48000800 	.word	0x48000800
 800399c:	48000c00 	.word	0x48000c00
 80039a0:	48001000 	.word	0x48001000
 80039a4:	48001400 	.word	0x48001400
 80039a8:	48001800 	.word	0x48001800
 80039ac:	40010400 	.word	0x40010400

080039b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40007000 	.word	0x40007000

080039cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039da:	d130      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039dc:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d038      	beq.n	8003a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2232      	movs	r2, #50	; 0x32
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9b      	lsrs	r3, r3, #18
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a10:	e002      	b.n	8003a18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d102      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f2      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a38:	d110      	bne.n	8003a5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e00f      	b.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d007      	beq.n	8003a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a54:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	431bde83 	.word	0x431bde83

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e3ca      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8a:	4b97      	ldr	r3, [pc, #604]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a94:	4b94      	ldr	r3, [pc, #592]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80e4 	beq.w	8003c74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x4a>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	f040 808b 	bne.w	8003bd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 8087 	bne.w	8003bd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ac2:	4b89      	ldr	r3, [pc, #548]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x62>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e3a2      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCC_OscConfig+0x7c>
 8003aea:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_OscConfig+0x88>
 8003af4:	4b7c      	ldr	r3, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d223      	bcs.n	8003b4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fd55 	bl	80045b8 <RCC_SetFlashLatencyFromMSIRange>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e383      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b18:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	f043 0308 	orr.w	r3, r3, #8
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b70      	ldr	r3, [pc, #448]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	496d      	ldr	r1, [pc, #436]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	4968      	ldr	r1, [pc, #416]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
 8003b4a:	e025      	b.n	8003b98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b4c:	4b66      	ldr	r3, [pc, #408]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a65      	ldr	r2, [pc, #404]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b52:	f043 0308 	orr.w	r3, r3, #8
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4960      	ldr	r1, [pc, #384]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	495b      	ldr	r1, [pc, #364]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd15 	bl	80045b8 <RCC_SetFlashLatencyFromMSIRange>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e343      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b98:	f000 fc4a 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	4950      	ldr	r1, [pc, #320]	; (8003cec <HAL_RCC_OscConfig+0x274>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	4a4e      	ldr	r2, [pc, #312]	; (8003cf0 <HAL_RCC_OscConfig+0x278>)
 8003bb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f8a9 	bl	8002d14 <HAL_InitTick>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d052      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	e327      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d032      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a42      	ldr	r2, [pc, #264]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003be4:	f7ff f8e6 	bl	8002db4 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bec:	f7ff f8e2 	bl	8002db4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e310      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a36      	ldr	r2, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4931      	ldr	r1, [pc, #196]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c28:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	492c      	ldr	r1, [pc, #176]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
 8003c3c:	e01a      	b.n	8003c74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a29      	ldr	r2, [pc, #164]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c4a:	f7ff f8b3 	bl	8002db4 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c52:	f7ff f8af 	bl	8002db4 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e2dd      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x1da>
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d074      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x21a>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d10e      	bne.n	8003caa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d10b      	bne.n	8003caa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d064      	beq.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d160      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e2ba      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x24a>
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	e026      	b.n	8003d10 <HAL_RCC_OscConfig+0x298>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cca:	d115      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x280>
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a02      	ldr	r2, [pc, #8]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e014      	b.n	8003d10 <HAL_RCC_OscConfig+0x298>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	0800c254 	.word	0x0800c254
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	20000010 	.word	0x20000010
 8003cf8:	4ba0      	ldr	r3, [pc, #640]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a9f      	ldr	r2, [pc, #636]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b9d      	ldr	r3, [pc, #628]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a9c      	ldr	r2, [pc, #624]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7ff f84c 	bl	8002db4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7ff f848 	bl	8002db4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e276      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d32:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x2a8>
 8003d3e:	e014      	b.n	8003d6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7ff f838 	bl	8002db4 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d48:	f7ff f834 	bl	8002db4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e262      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d5a:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2d0>
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d060      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_OscConfig+0x310>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d119      	bne.n	8003db6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d116      	bne.n	8003db6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d88:	4b7c      	ldr	r3, [pc, #496]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_OscConfig+0x328>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e23f      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	4973      	ldr	r1, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db4:	e040      	b.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d023      	beq.n	8003e06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbe:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6e      	ldr	r2, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fe fff3 	bl	8002db4 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fe ffef 	bl	8002db4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e21d      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de4:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	495f      	ldr	r1, [pc, #380]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	e018      	b.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5c      	ldr	r2, [pc, #368]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fe ffcf 	bl	8002db4 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fe ffcb 	bl	8002db4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1f9      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d03c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01c      	beq.n	8003e86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fe ffaa 	bl	8002db4 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fe ffa6 	bl	8002db4 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1d4      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ef      	beq.n	8003e64 <HAL_RCC_OscConfig+0x3ec>
 8003e84:	e01b      	b.n	8003ebe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fe ff8d 	bl	8002db4 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9e:	f7fe ff89 	bl	8002db4 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e1b7      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ef      	bne.n	8003e9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80a6 	beq.w	8004018 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee8:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCC_OscConfig+0x508>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d118      	bne.n	8003f36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f04:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_RCC_OscConfig+0x508>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_RCC_OscConfig+0x508>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f10:	f7fe ff50 	bl	8002db4 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f7fe ff4c 	bl	8002db4 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e17a      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <HAL_RCC_OscConfig+0x508>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4d8>
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f4e:	e029      	b.n	8003fa4 <HAL_RCC_OscConfig+0x52c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b05      	cmp	r3, #5
 8003f56:	d115      	bne.n	8003f84 <HAL_RCC_OscConfig+0x50c>
 8003f58:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a03      	ldr	r2, [pc, #12]	; (8003f7c <HAL_RCC_OscConfig+0x504>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f78:	e014      	b.n	8003fa4 <HAL_RCC_OscConfig+0x52c>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
 8003f84:	4b9c      	ldr	r3, [pc, #624]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	4a9b      	ldr	r2, [pc, #620]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f94:	4b98      	ldr	r3, [pc, #608]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a97      	ldr	r2, [pc, #604]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d016      	beq.n	8003fda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fe ff02 	bl	8002db4 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fe fefe 	bl	8002db4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e12a      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fca:	4b8b      	ldr	r3, [pc, #556]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ed      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x53c>
 8003fd8:	e015      	b.n	8004006 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fe feeb 	bl	8002db4 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fe fee7 	bl	8002db4 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e113      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff8:	4b7f      	ldr	r3, [pc, #508]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ed      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004006:	7ffb      	ldrb	r3, [r7, #31]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b7a      	ldr	r3, [pc, #488]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	4a79      	ldr	r2, [pc, #484]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004016:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80fe 	beq.w	800421e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	2b02      	cmp	r3, #2
 8004028:	f040 80d0 	bne.w	80041cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800402c:	4b72      	ldr	r3, [pc, #456]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 0203 	and.w	r2, r3, #3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	429a      	cmp	r2, r3
 800403e:	d130      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	3b01      	subs	r3, #1
 800404c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d127      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d11f      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800406c:	2a07      	cmp	r2, #7
 800406e:	bf14      	ite	ne
 8004070:	2201      	movne	r2, #1
 8004072:	2200      	moveq	r2, #0
 8004074:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004076:	4293      	cmp	r3, r2
 8004078:	d113      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d109      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d06e      	beq.n	8004180 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d069      	beq.n	800417c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ad      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a4b      	ldr	r2, [pc, #300]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040d0:	f7fe fe70 	bl	8002db4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe fe6c 	bl	8002db4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e09a      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ea:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_RCC_OscConfig+0x784>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004106:	3a01      	subs	r2, #1
 8004108:	0112      	lsls	r2, r2, #4
 800410a:	4311      	orrs	r1, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004110:	0212      	lsls	r2, r2, #8
 8004112:	4311      	orrs	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004118:	0852      	lsrs	r2, r2, #1
 800411a:	3a01      	subs	r2, #1
 800411c:	0552      	lsls	r2, r2, #21
 800411e:	4311      	orrs	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004124:	0852      	lsrs	r2, r2, #1
 8004126:	3a01      	subs	r2, #1
 8004128:	0652      	lsls	r2, r2, #25
 800412a:	4311      	orrs	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004130:	0912      	lsrs	r2, r2, #4
 8004132:	0452      	lsls	r2, r2, #17
 8004134:	430a      	orrs	r2, r1
 8004136:	4930      	ldr	r1, [pc, #192]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8004138:	4313      	orrs	r3, r2
 800413a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800413c:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8004142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004146:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800414e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004154:	f7fe fe2e 	bl	8002db4 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe fe2a 	bl	8002db4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e058      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800417a:	e050      	b.n	800421e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e04f      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d148      	bne.n	800421e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800418c:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041a4:	f7fe fe06 	bl	8002db4 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fe fe02 	bl	8002db4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e030      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x734>
 80041ca:	e028      	b.n	800421e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d023      	beq.n	800421a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <HAL_RCC_OscConfig+0x780>)
 80041d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fe fde9 	bl	8002db4 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e4:	e00c      	b.n	8004200 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fe fde5 	bl	8002db4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d905      	bls.n	8004200 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e013      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
 80041f8:	40021000 	.word	0x40021000
 80041fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_OscConfig+0x7b0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ec      	bne.n	80041e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x7b0>)
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	4905      	ldr	r1, [pc, #20]	; (8004228 <HAL_RCC_OscConfig+0x7b0>)
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_OscConfig+0x7b4>)
 8004214:	4013      	ands	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
 8004218:	e001      	b.n	800421e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	feeefffc 	.word	0xfeeefffc

08004230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0e7      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b75      	ldr	r3, [pc, #468]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d910      	bls.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	4970      	ldr	r1, [pc, #448]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b6e      	ldr	r3, [pc, #440]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0cf      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	4b66      	ldr	r3, [pc, #408]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428c:	429a      	cmp	r2, r3
 800428e:	d908      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4960      	ldr	r1, [pc, #384]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04c      	beq.n	8004348 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b6:	4b5a      	ldr	r3, [pc, #360]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d121      	bne.n	8004306 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0a6      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ce:	4b54      	ldr	r3, [pc, #336]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d115      	bne.n	8004306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e09a      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e6:	4b4e      	ldr	r3, [pc, #312]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e08e      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e086      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4943      	ldr	r1, [pc, #268]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fe fd4c 	bl	8002db4 <HAL_GetTick>
 800431c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	e00a      	b.n	8004336 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe fd48 	bl	8002db4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e06e      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	4b3a      	ldr	r3, [pc, #232]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 020c 	and.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	429a      	cmp	r2, r3
 8004346:	d1eb      	bne.n	8004320 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004360:	429a      	cmp	r2, r3
 8004362:	d208      	bcs.n	8004376 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	492b      	ldr	r1, [pc, #172]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d210      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 0207 	bic.w	r2, r3, #7
 800438c:	4923      	ldr	r1, [pc, #140]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_ClockConfig+0x1ec>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e036      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4918      	ldr	r1, [pc, #96]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4910      	ldr	r1, [pc, #64]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e4:	f000 f824 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_ClockConfig+0x1f0>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	490b      	ldr	r1, [pc, #44]	; (8004424 <HAL_RCC_ClockConfig+0x1f4>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_ClockConfig+0x1f8>)
 8004402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_ClockConfig+0x1fc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe fc83 	bl	8002d14 <HAL_InitTick>
 800440e:	4603      	mov	r3, r0
 8004410:	72fb      	strb	r3, [r7, #11]

  return status;
 8004412:	7afb      	ldrb	r3, [r7, #11]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40022000 	.word	0x40022000
 8004420:	40021000 	.word	0x40021000
 8004424:	0800c254 	.word	0x0800c254
 8004428:	2000000c 	.word	0x2000000c
 800442c:	20000010 	.word	0x20000010

08004430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443e:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x34>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d121      	bne.n	80044a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d11e      	bne.n	80044a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004464:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004470:	4b31      	ldr	r3, [pc, #196]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 8004472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e005      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004480:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800448c:	4a2b      	ldr	r2, [pc, #172]	; (800453c <HAL_RCC_GetSysClockFreq+0x10c>)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004494:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d102      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <HAL_RCC_GetSysClockFreq+0x110>)
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e004      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_RCC_GetSysClockFreq+0x114>)
 80044b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d134      	bne.n	8004528 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d003      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0xac>
 80044d4:	e005      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <HAL_RCC_GetSysClockFreq+0x110>)
 80044d8:	617b      	str	r3, [r7, #20]
      break;
 80044da:	e005      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_RCC_GetSysClockFreq+0x114>)
 80044de:	617b      	str	r3, [r7, #20]
      break;
 80044e0:	e002      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	617b      	str	r3, [r7, #20]
      break;
 80044e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044e8:	4b13      	ldr	r3, [pc, #76]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	3301      	adds	r3, #1
 80044f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	fb03 f202 	mul.w	r2, r3, r2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_RCC_GetSysClockFreq+0x108>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	0e5b      	lsrs	r3, r3, #25
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	3301      	adds	r3, #1
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004528:	69bb      	ldr	r3, [r7, #24]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3724      	adds	r7, #36	; 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	0800c26c 	.word	0x0800c26c
 8004540:	00f42400 	.word	0x00f42400
 8004544:	007a1200 	.word	0x007a1200

08004548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <HAL_RCC_GetHCLKFreq+0x14>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	2000000c 	.word	0x2000000c

08004560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004564:	f7ff fff0 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4904      	ldr	r1, [pc, #16]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	0800c264 	.word	0x0800c264

0800458c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004590:	f7ff ffda 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	0adb      	lsrs	r3, r3, #11
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4904      	ldr	r1, [pc, #16]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	0800c264 	.word	0x0800c264

080045b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045d0:	f7ff f9ee 	bl	80039b0 <HAL_PWREx_GetVoltageRange>
 80045d4:	6178      	str	r0, [r7, #20]
 80045d6:	e014      	b.n	8004602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	4a24      	ldr	r2, [pc, #144]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6593      	str	r3, [r2, #88]	; 0x58
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045f0:	f7ff f9de 	bl	80039b0 <HAL_PWREx_GetVoltageRange>
 80045f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004600:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d10b      	bne.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	d919      	bls.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2ba0      	cmp	r3, #160	; 0xa0
 8004614:	d902      	bls.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004616:	2302      	movs	r3, #2
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e013      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800461c:	2301      	movs	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e010      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b80      	cmp	r3, #128	; 0x80
 8004626:	d902      	bls.n	800462e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004628:	2303      	movs	r3, #3
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e00a      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d102      	bne.n	800463a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004634:	2302      	movs	r3, #2
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	e004      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b70      	cmp	r3, #112	; 0x70
 800463e:	d101      	bne.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004640:	2301      	movs	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 0207 	bic.w	r2, r3, #7
 800464c:	4909      	ldr	r1, [pc, #36]	; (8004674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	429a      	cmp	r2, r3
 8004660:	d001      	beq.n	8004666 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	40022000 	.word	0x40022000

08004678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004680:	2300      	movs	r3, #0
 8004682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004684:	2300      	movs	r3, #0
 8004686:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004690:	2b00      	cmp	r3, #0
 8004692:	d041      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004698:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800469c:	d02a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800469e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046a2:	d824      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a8:	d008      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ae:	d81e      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d010      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ba:	e018      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046bc:	4b86      	ldr	r3, [pc, #536]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a85      	ldr	r2, [pc, #532]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046c8:	e015      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fabb 	bl	8004c4c <RCCEx_PLLSAI1_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046da:	e00c      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3320      	adds	r3, #32
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fba6 	bl	8004e34 <RCCEx_PLLSAI2_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	74fb      	strb	r3, [r7, #19]
      break;
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046fc:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800470a:	4973      	ldr	r1, [pc, #460]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004712:	e001      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d041      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004728:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800472c:	d02a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800472e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004732:	d824      	bhi.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800473a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473e:	d81e      	bhi.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004748:	d010      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800474a:	e018      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800474c:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a61      	ldr	r2, [pc, #388]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004756:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004758:	e015      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fa73 	bl	8004c4c <RCCEx_PLLSAI1_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800476a:	e00c      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3320      	adds	r3, #32
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb5e 	bl	8004e34 <RCCEx_PLLSAI2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	74fb      	strb	r3, [r7, #19]
      break;
 8004782:	e000      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800478c:	4b52      	ldr	r3, [pc, #328]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	494f      	ldr	r1, [pc, #316]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047a2:	e001      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a0 	beq.w	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047ba:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00d      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
 80047dc:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ec:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047f8:	f7fe fadc 	bl	8002db4 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047fe:	e009      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004800:	f7fe fad8 	bl	8002db4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d902      	bls.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	74fb      	strb	r3, [r7, #19]
        break;
 8004812:	e005      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004814:	4b31      	ldr	r3, [pc, #196]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ef      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d15c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004826:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01f      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	d019      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a20      	ldr	r2, [pc, #128]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fe fa97 	bl	8002db4 <HAL_GetTick>
 8004886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004888:	e00b      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488a:	f7fe fa93 	bl	8002db4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d902      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	74fb      	strb	r3, [r7, #19]
            break;
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ec      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048ce:	e009      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	74bb      	strb	r3, [r7, #18]
 80048d4:	e006      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e4:	7c7b      	ldrb	r3, [r7, #17]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ea:	4b9e      	ldr	r3, [pc, #632]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	4a9d      	ldr	r2, [pc, #628]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004902:	4b98      	ldr	r3, [pc, #608]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f023 0203 	bic.w	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	4994      	ldr	r1, [pc, #592]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004924:	4b8f      	ldr	r3, [pc, #572]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f023 020c 	bic.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	498c      	ldr	r1, [pc, #560]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004946:	4b87      	ldr	r3, [pc, #540]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	4983      	ldr	r1, [pc, #524]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004968:	4b7e      	ldr	r3, [pc, #504]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	497b      	ldr	r1, [pc, #492]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800498a:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004998:	4972      	ldr	r1, [pc, #456]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ac:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	496a      	ldr	r1, [pc, #424]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ce:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	4961      	ldr	r1, [pc, #388]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049f0:	4b5c      	ldr	r3, [pc, #368]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	4959      	ldr	r1, [pc, #356]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a12:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	4950      	ldr	r1, [pc, #320]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a34:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	4948      	ldr	r1, [pc, #288]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a56:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a64:	493f      	ldr	r1, [pc, #252]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d028      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a78:	4b3a      	ldr	r3, [pc, #232]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	4937      	ldr	r1, [pc, #220]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a98:	4b32      	ldr	r3, [pc, #200]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4a31      	ldr	r2, [pc, #196]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa2:	60d3      	str	r3, [r2, #12]
 8004aa4:	e011      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aae:	d10c      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f8c8 	bl	8004c4c <RCCEx_PLLSAI1_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ac6:	7cfb      	ldrb	r3, [r7, #19]
 8004ac8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d028      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	491f      	ldr	r1, [pc, #124]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af4:	d106      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af6:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b00:	60d3      	str	r3, [r2, #12]
 8004b02:	e011      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f899 	bl	8004c4c <RCCEx_PLLSAI1_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d02b      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b42:	4908      	ldr	r1, [pc, #32]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b52:	d109      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a02      	ldr	r2, [pc, #8]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5e:	60d3      	str	r3, [r2, #12]
 8004b60:	e014      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2101      	movs	r1, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f867 	bl	8004c4c <RCCEx_PLLSAI1_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02f      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba6:	4928      	ldr	r1, [pc, #160]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f844 	bl	8004c4c <RCCEx_PLLSAI1_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d014      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	74bb      	strb	r3, [r7, #18]
 8004bd2:	e011      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3320      	adds	r3, #32
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 f925 	bl	8004e34 <RCCEx_PLLSAI2_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c12:	490d      	ldr	r1, [pc, #52]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c36:	4904      	ldr	r1, [pc, #16]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000

08004c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c5a:	4b75      	ldr	r3, [pc, #468]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d018      	beq.n	8004c98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c66:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0203 	and.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d10d      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
       ||
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c7e:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d047      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
 8004c96:	e044      	b.n	8004d22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d018      	beq.n	8004cd2 <RCCEx_PLLSAI1_Config+0x86>
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d825      	bhi.n	8004cf0 <RCCEx_PLLSAI1_Config+0xa4>
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d002      	beq.n	8004cae <RCCEx_PLLSAI1_Config+0x62>
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d009      	beq.n	8004cc0 <RCCEx_PLLSAI1_Config+0x74>
 8004cac:	e020      	b.n	8004cf0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cae:	4b60      	ldr	r3, [pc, #384]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d11d      	bne.n	8004cf6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cbe:	e01a      	b.n	8004cf6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d116      	bne.n	8004cfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd0:	e013      	b.n	8004cfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cd2:	4b57      	ldr	r3, [pc, #348]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cde:	4b54      	ldr	r3, [pc, #336]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cee:	e006      	b.n	8004cfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e004      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d06:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6819      	ldr	r1, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	4944      	ldr	r1, [pc, #272]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d17d      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d28:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a40      	ldr	r2, [pc, #256]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d34:	f7fe f83e 	bl	8002db4 <HAL_GetTick>
 8004d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d3a:	e009      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d3c:	f7fe f83a 	bl	8002db4 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d902      	bls.n	8004d50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d4e:	e005      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d50:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ef      	bne.n	8004d3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d160      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d68:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6892      	ldr	r2, [r2, #8]
 8004d78:	0211      	lsls	r1, r2, #8
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68d2      	ldr	r2, [r2, #12]
 8004d7e:	0912      	lsrs	r2, r2, #4
 8004d80:	0452      	lsls	r2, r2, #17
 8004d82:	430a      	orrs	r2, r1
 8004d84:	492a      	ldr	r1, [pc, #168]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	610b      	str	r3, [r1, #16]
 8004d8a:	e027      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d112      	bne.n	8004db8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6892      	ldr	r2, [r2, #8]
 8004da2:	0211      	lsls	r1, r2, #8
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6912      	ldr	r2, [r2, #16]
 8004da8:	0852      	lsrs	r2, r2, #1
 8004daa:	3a01      	subs	r2, #1
 8004dac:	0552      	lsls	r2, r2, #21
 8004dae:	430a      	orrs	r2, r1
 8004db0:	491f      	ldr	r1, [pc, #124]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
 8004db6:	e011      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	0211      	lsls	r1, r2, #8
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6952      	ldr	r2, [r2, #20]
 8004dce:	0852      	lsrs	r2, r2, #1
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	0652      	lsls	r2, r2, #25
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4916      	ldr	r1, [pc, #88]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd ffe4 	bl	8002db4 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df0:	f7fd ffe0 	bl	8002db4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
          break;
 8004e02:	e005      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	4904      	ldr	r1, [pc, #16]	; (8004e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000

08004e34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e42:	4b6a      	ldr	r3, [pc, #424]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e4e:	4b67      	ldr	r3, [pc, #412]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0203 	and.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d10d      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
       ||
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e66:	4b61      	ldr	r3, [pc, #388]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
       ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d047      	beq.n	8004f0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	e044      	b.n	8004f0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d018      	beq.n	8004eba <RCCEx_PLLSAI2_Config+0x86>
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d825      	bhi.n	8004ed8 <RCCEx_PLLSAI2_Config+0xa4>
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d002      	beq.n	8004e96 <RCCEx_PLLSAI2_Config+0x62>
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d009      	beq.n	8004ea8 <RCCEx_PLLSAI2_Config+0x74>
 8004e94:	e020      	b.n	8004ed8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e96:	4b55      	ldr	r3, [pc, #340]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d11d      	bne.n	8004ede <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea6:	e01a      	b.n	8004ede <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d116      	bne.n	8004ee2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb8:	e013      	b.n	8004ee2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eba:	4b4c      	ldr	r3, [pc, #304]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10f      	bne.n	8004ee6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ed6:	e006      	b.n	8004ee6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e004      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10d      	bne.n	8004f0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	430b      	orrs	r3, r1
 8004f04:	4939      	ldr	r1, [pc, #228]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d167      	bne.n	8004fe0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f10:	4b36      	ldr	r3, [pc, #216]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a35      	ldr	r2, [pc, #212]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1c:	f7fd ff4a 	bl	8002db4 <HAL_GetTick>
 8004f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f22:	e009      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f24:	f7fd ff46 	bl	8002db4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d902      	bls.n	8004f38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	73fb      	strb	r3, [r7, #15]
        break;
 8004f36:	e005      	b.n	8004f44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ef      	bne.n	8004f24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d14a      	bne.n	8004fe0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d111      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f50:	4b26      	ldr	r3, [pc, #152]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6892      	ldr	r2, [r2, #8]
 8004f60:	0211      	lsls	r1, r2, #8
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	0912      	lsrs	r2, r2, #4
 8004f68:	0452      	lsls	r2, r2, #17
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	491f      	ldr	r1, [pc, #124]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	614b      	str	r3, [r1, #20]
 8004f72:	e011      	b.n	8004f98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f74:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6892      	ldr	r2, [r2, #8]
 8004f84:	0211      	lsls	r1, r2, #8
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6912      	ldr	r2, [r2, #16]
 8004f8a:	0852      	lsrs	r2, r2, #1
 8004f8c:	3a01      	subs	r2, #1
 8004f8e:	0652      	lsls	r2, r2, #25
 8004f90:	430a      	orrs	r2, r1
 8004f92:	4916      	ldr	r1, [pc, #88]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f98:	4b14      	ldr	r3, [pc, #80]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fd ff06 	bl	8002db4 <HAL_GetTick>
 8004fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004faa:	e009      	b.n	8004fc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fac:	f7fd ff02 	bl	8002db4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d902      	bls.n	8004fc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8004fbe:	e005      	b.n	8004fcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ef      	beq.n	8004fac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4904      	ldr	r1, [pc, #16]	; (8004fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000

08004ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e040      	b.n	8005084 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fd fc32 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	; 0x24
 800501c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fcc4 	bl	80059bc <UART_SetConfig>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e022      	b.n	8005084 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 ff70 	bl	8005f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fff7 	bl	8006070 <UART_CheckIdleState>
 8005082:	4603      	mov	r3, r0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	f040 80bf 	bne.w	8005224 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_UART_Receive+0x26>
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0b7      	b.n	8005226 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_UART_Receive+0x38>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e0b0      	b.n	8005226 <HAL_UART_Receive+0x19a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2222      	movs	r2, #34	; 0x22
 80050d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050e0:	f7fd fe68 	bl	8002db4 <HAL_GetTick>
 80050e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	d10e      	bne.n	800511e <HAL_UART_Receive+0x92>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_UART_Receive+0x88>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800510e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005112:	e02d      	b.n	8005170 <HAL_UART_Receive+0xe4>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	22ff      	movs	r2, #255	; 0xff
 8005118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800511c:	e028      	b.n	8005170 <HAL_UART_Receive+0xe4>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <HAL_UART_Receive+0xb6>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_UART_Receive+0xac>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	22ff      	movs	r2, #255	; 0xff
 8005132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005136:	e01b      	b.n	8005170 <HAL_UART_Receive+0xe4>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	227f      	movs	r2, #127	; 0x7f
 800513c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005140:	e016      	b.n	8005170 <HAL_UART_Receive+0xe4>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514a:	d10d      	bne.n	8005168 <HAL_UART_Receive+0xdc>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_UART_Receive+0xd2>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	227f      	movs	r2, #127	; 0x7f
 8005158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800515c:	e008      	b.n	8005170 <HAL_UART_Receive+0xe4>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	223f      	movs	r2, #63	; 0x3f
 8005162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005166:	e003      	b.n	8005170 <HAL_UART_Receive+0xe4>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005176:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d108      	bne.n	8005194 <HAL_UART_Receive+0x108>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e003      	b.n	800519c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80051a4:	e033      	b.n	800520e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2120      	movs	r1, #32
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 ffa6 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e032      	b.n	8005226 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10c      	bne.n	80051e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	8a7b      	ldrh	r3, [r7, #18]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	3302      	adds	r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e00d      	b.n	80051fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	8a7b      	ldrh	r3, [r7, #18]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4013      	ands	r3, r2
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3301      	adds	r3, #1
 80051fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1c5      	bne.n	80051a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005230:	b480      	push	{r7}
 8005232:	b08b      	sub	sp, #44	; 0x2c
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005242:	2b20      	cmp	r3, #32
 8005244:	d156      	bne.n	80052f4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_UART_Transmit_IT+0x22>
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e04f      	b.n	80052f6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit_IT+0x34>
 8005260:	2302      	movs	r3, #2
 8005262:	e048      	b.n	80052f6 <HAL_UART_Transmit_IT+0xc6>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2221      	movs	r2, #33	; 0x21
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	d107      	bne.n	80052b0 <HAL_UART_Transmit_IT+0x80>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a16      	ldr	r2, [pc, #88]	; (8005304 <HAL_UART_Transmit_IT+0xd4>)
 80052ac:	669a      	str	r2, [r3, #104]	; 0x68
 80052ae:	e002      	b.n	80052b6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <HAL_UART_Transmit_IT+0xd8>)
 80052b4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	613b      	str	r3, [r7, #16]
   return(result);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	69f9      	ldr	r1, [r7, #28]
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	372c      	adds	r7, #44	; 0x2c
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	080065cb 	.word	0x080065cb
 8005308:	08006513 	.word	0x08006513

0800530c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531e:	2b20      	cmp	r3, #32
 8005320:	d142      	bne.n	80053a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_Receive_IT+0x22>
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e03b      	b.n	80053aa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Receive_IT+0x34>
 800533c:	2302      	movs	r3, #2
 800533e:	e034      	b.n	80053aa <HAL_UART_Receive_IT+0x9e>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <HAL_UART_Receive_IT+0xa8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d01f      	beq.n	8005398 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	613b      	str	r3, [r7, #16]
   return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	623b      	str	r3, [r7, #32]
 8005386:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	69f9      	ldr	r1, [r7, #28]
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	61bb      	str	r3, [r7, #24]
   return(result);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e6      	bne.n	8005366 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	461a      	mov	r2, r3
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 ff74 	bl	800628c <UART_Start_Receive_IT>
 80053a4:	4603      	mov	r3, r0
 80053a6:	e000      	b.n	80053aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40008000 	.word	0x40008000

080053b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b0ba      	sub	sp, #232	; 0xe8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80053e6:	4013      	ands	r3, r2
 80053e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d115      	bne.n	8005420 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00f      	beq.n	8005420 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d009      	beq.n	8005420 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 82a6 	beq.w	8005962 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
      }
      return;
 800541e:	e2a0      	b.n	8005962 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8117 	beq.w	8005658 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005436:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800543a:	4b85      	ldr	r3, [pc, #532]	; (8005650 <HAL_UART_IRQHandler+0x298>)
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 810a 	beq.w	8005658 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d011      	beq.n	8005474 <HAL_UART_IRQHandler+0xbc>
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2201      	movs	r2, #1
 8005462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546a:	f043 0201 	orr.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d011      	beq.n	80054a4 <HAL_UART_IRQHandler+0xec>
 8005480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2202      	movs	r2, #2
 8005492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800549a:	f043 0204 	orr.w	r2, r3, #4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d011      	beq.n	80054d4 <HAL_UART_IRQHandler+0x11c>
 80054b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2204      	movs	r2, #4
 80054c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ca:	f043 0202 	orr.w	r2, r3, #2
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2208      	movs	r2, #8
 80054fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	f043 0208 	orr.w	r2, r3, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005518:	2b00      	cmp	r3, #0
 800551a:	d012      	beq.n	8005542 <HAL_UART_IRQHandler+0x18a>
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00c      	beq.n	8005542 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 820c 	beq.w	8005966 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800555a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d005      	beq.n	800559a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005592:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04f      	beq.n	800563a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 ff40 	bl	8006420 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d141      	bne.n	8005632 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1d9      	bne.n	80055ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d013      	beq.n	800562a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <HAL_UART_IRQHandler+0x29c>)
 8005608:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd fd4f 	bl	80030b2 <HAL_DMA_Abort_IT>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d017      	beq.n	800564a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	e00f      	b.n	800564a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9b0 	bl	8005990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00b      	b.n	800564a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9ac 	bl	8005990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e007      	b.n	800564a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9a8 	bl	8005990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005648:	e18d      	b.n	8005966 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564a:	bf00      	nop
    return;
 800564c:	e18b      	b.n	8005966 <HAL_UART_IRQHandler+0x5ae>
 800564e:	bf00      	nop
 8005650:	04000120 	.word	0x04000120
 8005654:	080064e7 	.word	0x080064e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 8146 	bne.w	80058ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 813f 	beq.w	80058ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8138 	beq.w	80058ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2210      	movs	r2, #16
 8005684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	f040 80b4 	bne.w	80057fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 815f 	beq.w	800596a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056b6:	429a      	cmp	r2, r3
 80056b8:	f080 8157 	bcs.w	800596a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f040 8085 	bne.w	80057e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005706:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800570e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800571a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1da      	bne.n	80056d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005746:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800574a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800574e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e1      	bne.n	8005722 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800576e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e3      	bne.n	800575e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80057c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e4      	bne.n	80057a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fd fc2a 	bl	8003036 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8d4 	bl	80059a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057fc:	e0b5      	b.n	800596a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580a:	b29b      	uxth	r3, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80a7 	beq.w	800596e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a2 	beq.w	800596e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800583e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800584c:	647b      	str	r3, [r7, #68]	; 0x44
 800584e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800585a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e4      	bne.n	800582a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	623b      	str	r3, [r7, #32]
   return(result);
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005884:	633a      	str	r2, [r7, #48]	; 0x30
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800588a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e3      	bne.n	8005860 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	617b      	str	r3, [r7, #20]
   return(result);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e4      	bne.n	80058aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f85c 	bl	80059a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ec:	e03f      	b.n	800596e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00e      	beq.n	8005918 <HAL_UART_IRQHandler+0x560>
 80058fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800590e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 f844 	bl	800699e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005916:	e02d      	b.n	8005974 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00e      	beq.n	8005942 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01c      	beq.n	8005972 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
    }
    return;
 8005940:	e017      	b.n	8005972 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d012      	beq.n	8005974 <HAL_UART_IRQHandler+0x5bc>
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00c      	beq.n	8005974 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fe95 	bl	800668a <UART_EndTransmit_IT>
    return;
 8005960:	e008      	b.n	8005974 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005962:	bf00      	nop
 8005964:	e006      	b.n	8005974 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005966:	bf00      	nop
 8005968:	e004      	b.n	8005974 <HAL_UART_IRQHandler+0x5bc>
      return;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <HAL_UART_IRQHandler+0x5bc>
      return;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005972:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005974:	37e8      	adds	r7, #232	; 0xe8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop

0800597c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c0:	b08a      	sub	sp, #40	; 0x28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	431a      	orrs	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4ba4      	ldr	r3, [pc, #656]	; (8005c7c <UART_SetConfig+0x2c0>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a99      	ldr	r2, [pc, #612]	; (8005c80 <UART_SetConfig+0x2c4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	4313      	orrs	r3, r2
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a90      	ldr	r2, [pc, #576]	; (8005c84 <UART_SetConfig+0x2c8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d126      	bne.n	8005a94 <UART_SetConfig+0xd8>
 8005a46:	4b90      	ldr	r3, [pc, #576]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d81b      	bhi.n	8005a8c <UART_SetConfig+0xd0>
 8005a54:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <UART_SetConfig+0xa0>)
 8005a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5a:	bf00      	nop
 8005a5c:	08005a6d 	.word	0x08005a6d
 8005a60:	08005a7d 	.word	0x08005a7d
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a85 	.word	0x08005a85
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e116      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e112      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e10e      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005a84:	2308      	movs	r3, #8
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e10a      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e106      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a7c      	ldr	r2, [pc, #496]	; (8005c8c <UART_SetConfig+0x2d0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d138      	bne.n	8005b10 <UART_SetConfig+0x154>
 8005a9e:	4b7a      	ldr	r3, [pc, #488]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	d82d      	bhi.n	8005b08 <UART_SetConfig+0x14c>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0xf8>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ae9 	.word	0x08005ae9
 8005ab8:	08005b09 	.word	0x08005b09
 8005abc:	08005b09 	.word	0x08005b09
 8005ac0:	08005b09 	.word	0x08005b09
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005b09 	.word	0x08005b09
 8005acc:	08005b09 	.word	0x08005b09
 8005ad0:	08005b09 	.word	0x08005b09
 8005ad4:	08005af1 	.word	0x08005af1
 8005ad8:	08005b09 	.word	0x08005b09
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aee:	e0d8      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e0d4      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e0d0      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e0cc      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e0c8      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a5e      	ldr	r2, [pc, #376]	; (8005c90 <UART_SetConfig+0x2d4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d125      	bne.n	8005b66 <UART_SetConfig+0x1aa>
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	d016      	beq.n	8005b56 <UART_SetConfig+0x19a>
 8005b28:	2b30      	cmp	r3, #48	; 0x30
 8005b2a:	d818      	bhi.n	8005b5e <UART_SetConfig+0x1a2>
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d00a      	beq.n	8005b46 <UART_SetConfig+0x18a>
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d814      	bhi.n	8005b5e <UART_SetConfig+0x1a2>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <UART_SetConfig+0x182>
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d008      	beq.n	8005b4e <UART_SetConfig+0x192>
 8005b3c:	e00f      	b.n	8005b5e <UART_SetConfig+0x1a2>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b44:	e0ad      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b46:	2302      	movs	r3, #2
 8005b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4c:	e0a9      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b4e:	2304      	movs	r3, #4
 8005b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b54:	e0a5      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b56:	2308      	movs	r3, #8
 8005b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5c:	e0a1      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b5e:	2310      	movs	r3, #16
 8005b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b64:	e09d      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a4a      	ldr	r2, [pc, #296]	; (8005c94 <UART_SetConfig+0x2d8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d125      	bne.n	8005bbc <UART_SetConfig+0x200>
 8005b70:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b7c:	d016      	beq.n	8005bac <UART_SetConfig+0x1f0>
 8005b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b80:	d818      	bhi.n	8005bb4 <UART_SetConfig+0x1f8>
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d00a      	beq.n	8005b9c <UART_SetConfig+0x1e0>
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d814      	bhi.n	8005bb4 <UART_SetConfig+0x1f8>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <UART_SetConfig+0x1d8>
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d008      	beq.n	8005ba4 <UART_SetConfig+0x1e8>
 8005b92:	e00f      	b.n	8005bb4 <UART_SetConfig+0x1f8>
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9a:	e082      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba2:	e07e      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005baa:	e07a      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005bac:	2308      	movs	r3, #8
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb2:	e076      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bba:	e072      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a35      	ldr	r2, [pc, #212]	; (8005c98 <UART_SetConfig+0x2dc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d12a      	bne.n	8005c1c <UART_SetConfig+0x260>
 8005bc6:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd4:	d01a      	beq.n	8005c0c <UART_SetConfig+0x250>
 8005bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bda:	d81b      	bhi.n	8005c14 <UART_SetConfig+0x258>
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be0:	d00c      	beq.n	8005bfc <UART_SetConfig+0x240>
 8005be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be6:	d815      	bhi.n	8005c14 <UART_SetConfig+0x258>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <UART_SetConfig+0x238>
 8005bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf0:	d008      	beq.n	8005c04 <UART_SetConfig+0x248>
 8005bf2:	e00f      	b.n	8005c14 <UART_SetConfig+0x258>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfa:	e052      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c02:	e04e      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c04:	2304      	movs	r3, #4
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c0a:	e04a      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c12:	e046      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1a:	e042      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <UART_SetConfig+0x2c4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d13a      	bne.n	8005c9c <UART_SetConfig+0x2e0>
 8005c26:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c34:	d01a      	beq.n	8005c6c <UART_SetConfig+0x2b0>
 8005c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c3a:	d81b      	bhi.n	8005c74 <UART_SetConfig+0x2b8>
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c40:	d00c      	beq.n	8005c5c <UART_SetConfig+0x2a0>
 8005c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c46:	d815      	bhi.n	8005c74 <UART_SetConfig+0x2b8>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <UART_SetConfig+0x298>
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d008      	beq.n	8005c64 <UART_SetConfig+0x2a8>
 8005c52:	e00f      	b.n	8005c74 <UART_SetConfig+0x2b8>
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5a:	e022      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c62:	e01e      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c64:	2304      	movs	r3, #4
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6a:	e01a      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c72:	e016      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c74:	2310      	movs	r3, #16
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7a:	e012      	b.n	8005ca2 <UART_SetConfig+0x2e6>
 8005c7c:	efff69f3 	.word	0xefff69f3
 8005c80:	40008000 	.word	0x40008000
 8005c84:	40013800 	.word	0x40013800
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40004400 	.word	0x40004400
 8005c90:	40004800 	.word	0x40004800
 8005c94:	40004c00 	.word	0x40004c00
 8005c98:	40005000 	.word	0x40005000
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a9f      	ldr	r2, [pc, #636]	; (8005f24 <UART_SetConfig+0x568>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d17a      	bne.n	8005da2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d824      	bhi.n	8005cfe <UART_SetConfig+0x342>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0x300>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005cff 	.word	0x08005cff
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005cff 	.word	0x08005cff
 8005ccc:	08005cef 	.word	0x08005cef
 8005cd0:	08005cff 	.word	0x08005cff
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005cff 	.word	0x08005cff
 8005cdc:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f7fe fc3e 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8005ce4:	61f8      	str	r0, [r7, #28]
        break;
 8005ce6:	e010      	b.n	8005d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <UART_SetConfig+0x56c>)
 8005cea:	61fb      	str	r3, [r7, #28]
        break;
 8005cec:	e00d      	b.n	8005d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fe fb9f 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8005cf2:	61f8      	str	r0, [r7, #28]
        break;
 8005cf4:	e009      	b.n	8005d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	61fb      	str	r3, [r7, #28]
        break;
 8005cfc:	e005      	b.n	8005d0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80fb 	beq.w	8005f08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d305      	bcc.n	8005d2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d903      	bls.n	8005d36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d34:	e0e8      	b.n	8005f08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	461c      	mov	r4, r3
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	022b      	lsls	r3, r5, #8
 8005d48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d4c:	0222      	lsls	r2, r4, #8
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	6849      	ldr	r1, [r1, #4]
 8005d52:	0849      	lsrs	r1, r1, #1
 8005d54:	2000      	movs	r0, #0
 8005d56:	4688      	mov	r8, r1
 8005d58:	4681      	mov	r9, r0
 8005d5a:	eb12 0a08 	adds.w	sl, r2, r8
 8005d5e:	eb43 0b09 	adc.w	fp, r3, r9
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	603b      	str	r3, [r7, #0]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d70:	4650      	mov	r0, sl
 8005d72:	4659      	mov	r1, fp
 8005d74:	f7fa ff88 	bl	8000c88 <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d86:	d308      	bcc.n	8005d9a <UART_SetConfig+0x3de>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d204      	bcs.n	8005d9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	60da      	str	r2, [r3, #12]
 8005d98:	e0b6      	b.n	8005f08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005da0:	e0b2      	b.n	8005f08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d15e      	bne.n	8005e6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d828      	bhi.n	8005e06 <UART_SetConfig+0x44a>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x400>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005de9 	.word	0x08005de9
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005e07 	.word	0x08005e07
 8005dcc:	08005df7 	.word	0x08005df7
 8005dd0:	08005e07 	.word	0x08005e07
 8005dd4:	08005e07 	.word	0x08005e07
 8005dd8:	08005e07 	.word	0x08005e07
 8005ddc:	08005dff 	.word	0x08005dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de0:	f7fe fbbe 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8005de4:	61f8      	str	r0, [r7, #28]
        break;
 8005de6:	e014      	b.n	8005e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7fe fbd0 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 8005dec:	61f8      	str	r0, [r7, #28]
        break;
 8005dee:	e010      	b.n	8005e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df0:	4b4d      	ldr	r3, [pc, #308]	; (8005f28 <UART_SetConfig+0x56c>)
 8005df2:	61fb      	str	r3, [r7, #28]
        break;
 8005df4:	e00d      	b.n	8005e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df6:	f7fe fb1b 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8005dfa:	61f8      	str	r0, [r7, #28]
        break;
 8005dfc:	e009      	b.n	8005e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e02:	61fb      	str	r3, [r7, #28]
        break;
 8005e04:	e005      	b.n	8005e12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d077      	beq.n	8005f08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005a      	lsls	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b0f      	cmp	r3, #15
 8005e32:	d916      	bls.n	8005e62 <UART_SetConfig+0x4a6>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3a:	d212      	bcs.n	8005e62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f023 030f 	bic.w	r3, r3, #15
 8005e44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	8afb      	ldrh	r3, [r7, #22]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	8afa      	ldrh	r2, [r7, #22]
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	e052      	b.n	8005f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e68:	e04e      	b.n	8005f08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d827      	bhi.n	8005ec2 <UART_SetConfig+0x506>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0x4bc>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005eb3 	.word	0x08005eb3
 8005e8c:	08005ec3 	.word	0x08005ec3
 8005e90:	08005ec3 	.word	0x08005ec3
 8005e94:	08005ec3 	.word	0x08005ec3
 8005e98:	08005ebb 	.word	0x08005ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e9c:	f7fe fb60 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8005ea0:	61f8      	str	r0, [r7, #28]
        break;
 8005ea2:	e014      	b.n	8005ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea4:	f7fe fb72 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 8005ea8:	61f8      	str	r0, [r7, #28]
        break;
 8005eaa:	e010      	b.n	8005ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <UART_SetConfig+0x56c>)
 8005eae:	61fb      	str	r3, [r7, #28]
        break;
 8005eb0:	e00d      	b.n	8005ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb2:	f7fe fabd 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8005eb6:	61f8      	str	r0, [r7, #28]
        break;
 8005eb8:	e009      	b.n	8005ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	61fb      	str	r3, [r7, #28]
        break;
 8005ec0:	e005      	b.n	8005ece <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d019      	beq.n	8005f08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	085a      	lsrs	r2, r3, #1
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b0f      	cmp	r3, #15
 8005eec:	d909      	bls.n	8005f02 <UART_SetConfig+0x546>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d205      	bcs.n	8005f02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e002      	b.n	8005f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3728      	adds	r7, #40	; 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f22:	bf00      	nop
 8005f24:	40008000 	.word	0x40008000
 8005f28:	00f42400 	.word	0x00f42400

08005f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01a      	beq.n	8006042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800602a:	d10a      	bne.n	8006042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	605a      	str	r2, [r3, #4]
  }
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af02      	add	r7, sp, #8
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006080:	f7fc fe98 	bl	8002db4 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b08      	cmp	r3, #8
 8006092:	d10e      	bne.n	80060b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f82d 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e023      	b.n	80060fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d10e      	bne.n	80060de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f817 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e00d      	b.n	80060fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b09c      	sub	sp, #112	; 0x70
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006112:	e0a5      	b.n	8006260 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	f000 80a1 	beq.w	8006260 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fc fe49 	bl	8002db4 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <UART_WaitOnFlagUntilTimeout+0x32>
 800612e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006130:	2b00      	cmp	r3, #0
 8006132:	d13e      	bne.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006148:	667b      	str	r3, [r7, #100]	; 0x64
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006154:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006158:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e6      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	663b      	str	r3, [r7, #96]	; 0x60
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006186:	64ba      	str	r2, [r7, #72]	; 0x48
 8006188:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800618c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e5      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e067      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d04f      	beq.n	8006260 <UART_WaitOnFlagUntilTimeout+0x15e>
      {

    	  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ce:	d147      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e6      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	613b      	str	r3, [r7, #16]
   return(result);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	66bb      	str	r3, [r7, #104]	; 0x68
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800622c:	623a      	str	r2, [r7, #32]
 800622e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	61bb      	str	r3, [r7, #24]
   return(result);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e010      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	bf0c      	ite	eq
 8006270:	2301      	moveq	r3, #1
 8006272:	2300      	movne	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	429a      	cmp	r2, r3
 800627c:	f43f af4a 	beq.w	8006114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3770      	adds	r7, #112	; 0x70
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800628c:	b480      	push	{r7}
 800628e:	b097      	sub	sp, #92	; 0x5c
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d10e      	bne.n	80062de <UART_Start_Receive_IT+0x52>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <UART_Start_Receive_IT+0x48>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d2:	e02d      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062dc:	e028      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <UART_Start_Receive_IT+0x76>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <UART_Start_Receive_IT+0x6c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062f6:	e01b      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	227f      	movs	r2, #127	; 0x7f
 80062fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006300:	e016      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630a:	d10d      	bne.n	8006328 <UART_Start_Receive_IT+0x9c>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <UART_Start_Receive_IT+0x92>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	227f      	movs	r2, #127	; 0x7f
 8006318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631c:	e008      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	223f      	movs	r2, #63	; 0x3f
 8006322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006326:	e003      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2222      	movs	r2, #34	; 0x22
 800633c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	657b      	str	r3, [r7, #84]	; 0x54
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800635e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006360:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800636c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637a:	d107      	bne.n	800638c <UART_Start_Receive_IT+0x100>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a24      	ldr	r2, [pc, #144]	; (8006418 <UART_Start_Receive_IT+0x18c>)
 8006388:	665a      	str	r2, [r3, #100]	; 0x64
 800638a:	e002      	b.n	8006392 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <UART_Start_Receive_IT+0x190>)
 8006390:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d019      	beq.n	80063d6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
 80063c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_Start_Receive_IT+0x116>
 80063d4:	e018      	b.n	8006408 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	613b      	str	r3, [r7, #16]
   return(result);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f043 0320 	orr.w	r3, r3, #32
 80063ea:	653b      	str	r3, [r7, #80]	; 0x50
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69f9      	ldr	r1, [r7, #28]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	61bb      	str	r3, [r7, #24]
   return(result);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	375c      	adds	r7, #92	; 0x5c
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	0800683f 	.word	0x0800683f
 800641c:	080066df 	.word	0x080066df

08006420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b095      	sub	sp, #84	; 0x54
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006446:	643b      	str	r3, [r7, #64]	; 0x40
 8006448:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800644c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e6      	bne.n	8006428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	61fb      	str	r3, [r7, #28]
   return(result);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	2b01      	cmp	r3, #1
 8006494:	d118      	bne.n	80064c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f023 0310 	bic.w	r3, r3, #16
 80064aa:	647b      	str	r3, [r7, #68]	; 0x44
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6979      	ldr	r1, [r7, #20]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	613b      	str	r3, [r7, #16]
   return(result);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80064da:	bf00      	nop
 80064dc:	3754      	adds	r7, #84	; 0x54
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff fa43 	bl	8005990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006512:	b480      	push	{r7}
 8006514:	b08f      	sub	sp, #60	; 0x3c
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800651e:	2b21      	cmp	r3, #33	; 0x21
 8006520:	d14d      	bne.n	80065be <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d132      	bne.n	8006594 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	61fb      	str	r3, [r7, #28]
   return(result);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006542:	637b      	str	r3, [r7, #52]	; 0x34
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e6      	bne.n	800652e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	60bb      	str	r3, [r7, #8]
   return(result);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6979      	ldr	r1, [r7, #20]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	613b      	str	r3, [r7, #16]
   return(result);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e6      	bne.n	8006560 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006592:	e014      	b.n	80065be <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	b292      	uxth	r2, r2
 80065a0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80065be:	bf00      	nop
 80065c0:	373c      	adds	r7, #60	; 0x3c
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b091      	sub	sp, #68	; 0x44
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d6:	2b21      	cmp	r3, #33	; 0x21
 80065d8:	d151      	bne.n	800667e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d132      	bne.n	800664c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	623b      	str	r3, [r7, #32]
   return(result);
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
 8006606:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800660a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e6      	bne.n	80065e6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	60fb      	str	r3, [r7, #12]
   return(result);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	69b9      	ldr	r1, [r7, #24]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	617b      	str	r3, [r7, #20]
   return(result);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800664a:	e018      	b.n	800667e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	881a      	ldrh	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800665e:	b292      	uxth	r2, r2
 8006660:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	1c9a      	adds	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800667e:	bf00      	nop
 8006680:	3744      	adds	r7, #68	; 0x44
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b088      	sub	sp, #32
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6979      	ldr	r1, [r7, #20]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	613b      	str	r3, [r7, #16]
   return(result);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e6      	bne.n	8006692 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff f953 	bl	800597c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d6:	bf00      	nop
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b096      	sub	sp, #88	; 0x58
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f4:	2b22      	cmp	r3, #34	; 0x22
 80066f6:	f040 8094 	bne.w	8006822 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006700:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006704:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006708:	b2d9      	uxtb	r1, r3
 800670a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	400a      	ands	r2, r1
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d179      	bne.n	8006836 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006756:	653b      	str	r3, [r7, #80]	; 0x50
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006760:	647b      	str	r3, [r7, #68]	; 0x44
 8006762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800676e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	623b      	str	r3, [r7, #32]
   return(result);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3308      	adds	r3, #8
 8006792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006794:	633a      	str	r2, [r7, #48]	; 0x30
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d12e      	bne.n	800681a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0310 	bic.w	r3, r3, #16
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	69b9      	ldr	r1, [r7, #24]
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	617b      	str	r3, [r7, #20]
   return(result);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e6      	bne.n	80067c2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d103      	bne.n	800680a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2210      	movs	r2, #16
 8006808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff f8c6 	bl	80059a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006818:	e00d      	b.n	8006836 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fb fa36 	bl	8001c8c <HAL_UART_RxCpltCallback>
}
 8006820:	e009      	b.n	8006836 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	8b1b      	ldrh	r3, [r3, #24]
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0208 	orr.w	r2, r2, #8
 8006832:	b292      	uxth	r2, r2
 8006834:	831a      	strh	r2, [r3, #24]
}
 8006836:	bf00      	nop
 8006838:	3758      	adds	r7, #88	; 0x58
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b096      	sub	sp, #88	; 0x58
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800684c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006854:	2b22      	cmp	r3, #34	; 0x22
 8006856:	f040 8094 	bne.w	8006982 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006860:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800686a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800686e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006872:	4013      	ands	r3, r2
 8006874:	b29a      	uxth	r2, r3
 8006876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006878:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d179      	bne.n	8006996 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	643b      	str	r3, [r7, #64]	; 0x40
 80068c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006918:	2b01      	cmp	r3, #1
 800691a:	d12e      	bne.n	800697a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f023 0310 	bic.w	r3, r3, #16
 8006936:	647b      	str	r3, [r7, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6979      	ldr	r1, [r7, #20]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	613b      	str	r3, [r7, #16]
   return(result);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b10      	cmp	r3, #16
 8006960:	d103      	bne.n	800696a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2210      	movs	r2, #16
 8006968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff f816 	bl	80059a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006978:	e00d      	b.n	8006996 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fb f986 	bl	8001c8c <HAL_UART_RxCpltCallback>
}
 8006980:	e009      	b.n	8006996 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	8b1b      	ldrh	r3, [r3, #24]
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0208 	orr.w	r2, r2, #8
 8006992:	b292      	uxth	r2, r2
 8006994:	831a      	strh	r2, [r3, #24]
}
 8006996:	bf00      	nop
 8006998:	3758      	adds	r7, #88	; 0x58
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <__errno>:
 80069b4:	4b01      	ldr	r3, [pc, #4]	; (80069bc <__errno+0x8>)
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000038 	.word	0x20000038

080069c0 <__libc_init_array>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	4d0d      	ldr	r5, [pc, #52]	; (80069f8 <__libc_init_array+0x38>)
 80069c4:	4c0d      	ldr	r4, [pc, #52]	; (80069fc <__libc_init_array+0x3c>)
 80069c6:	1b64      	subs	r4, r4, r5
 80069c8:	10a4      	asrs	r4, r4, #2
 80069ca:	2600      	movs	r6, #0
 80069cc:	42a6      	cmp	r6, r4
 80069ce:	d109      	bne.n	80069e4 <__libc_init_array+0x24>
 80069d0:	4d0b      	ldr	r5, [pc, #44]	; (8006a00 <__libc_init_array+0x40>)
 80069d2:	4c0c      	ldr	r4, [pc, #48]	; (8006a04 <__libc_init_array+0x44>)
 80069d4:	f005 f96e 	bl	800bcb4 <_init>
 80069d8:	1b64      	subs	r4, r4, r5
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	2600      	movs	r6, #0
 80069de:	42a6      	cmp	r6, r4
 80069e0:	d105      	bne.n	80069ee <__libc_init_array+0x2e>
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e8:	4798      	blx	r3
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7ee      	b.n	80069cc <__libc_init_array+0xc>
 80069ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f2:	4798      	blx	r3
 80069f4:	3601      	adds	r6, #1
 80069f6:	e7f2      	b.n	80069de <__libc_init_array+0x1e>
 80069f8:	0800c764 	.word	0x0800c764
 80069fc:	0800c764 	.word	0x0800c764
 8006a00:	0800c764 	.word	0x0800c764
 8006a04:	0800c768 	.word	0x0800c768

08006a08 <memcpy>:
 8006a08:	440a      	add	r2, r1
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a10:	d100      	bne.n	8006a14 <memcpy+0xc>
 8006a12:	4770      	bx	lr
 8006a14:	b510      	push	{r4, lr}
 8006a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a1e:	4291      	cmp	r1, r2
 8006a20:	d1f9      	bne.n	8006a16 <memcpy+0xe>
 8006a22:	bd10      	pop	{r4, pc}

08006a24 <memset>:
 8006a24:	4402      	add	r2, r0
 8006a26:	4603      	mov	r3, r0
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <memset+0xa>
 8006a2c:	4770      	bx	lr
 8006a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a32:	e7f9      	b.n	8006a28 <memset+0x4>

08006a34 <__cvt>:
 8006a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	ec55 4b10 	vmov	r4, r5, d0
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	460e      	mov	r6, r1
 8006a40:	4619      	mov	r1, r3
 8006a42:	462b      	mov	r3, r5
 8006a44:	bfbb      	ittet	lt
 8006a46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a4a:	461d      	movlt	r5, r3
 8006a4c:	2300      	movge	r3, #0
 8006a4e:	232d      	movlt	r3, #45	; 0x2d
 8006a50:	700b      	strb	r3, [r1, #0]
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a58:	4691      	mov	r9, r2
 8006a5a:	f023 0820 	bic.w	r8, r3, #32
 8006a5e:	bfbc      	itt	lt
 8006a60:	4622      	movlt	r2, r4
 8006a62:	4614      	movlt	r4, r2
 8006a64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a68:	d005      	beq.n	8006a76 <__cvt+0x42>
 8006a6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a6e:	d100      	bne.n	8006a72 <__cvt+0x3e>
 8006a70:	3601      	adds	r6, #1
 8006a72:	2102      	movs	r1, #2
 8006a74:	e000      	b.n	8006a78 <__cvt+0x44>
 8006a76:	2103      	movs	r1, #3
 8006a78:	ab03      	add	r3, sp, #12
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	ab02      	add	r3, sp, #8
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	ec45 4b10 	vmov	d0, r4, r5
 8006a84:	4653      	mov	r3, sl
 8006a86:	4632      	mov	r2, r6
 8006a88:	f001 ffba 	bl	8008a00 <_dtoa_r>
 8006a8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a90:	4607      	mov	r7, r0
 8006a92:	d102      	bne.n	8006a9a <__cvt+0x66>
 8006a94:	f019 0f01 	tst.w	r9, #1
 8006a98:	d022      	beq.n	8006ae0 <__cvt+0xac>
 8006a9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a9e:	eb07 0906 	add.w	r9, r7, r6
 8006aa2:	d110      	bne.n	8006ac6 <__cvt+0x92>
 8006aa4:	783b      	ldrb	r3, [r7, #0]
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	d10a      	bne.n	8006ac0 <__cvt+0x8c>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7fa f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab6:	b918      	cbnz	r0, 8006ac0 <__cvt+0x8c>
 8006ab8:	f1c6 0601 	rsb	r6, r6, #1
 8006abc:	f8ca 6000 	str.w	r6, [sl]
 8006ac0:	f8da 3000 	ldr.w	r3, [sl]
 8006ac4:	4499      	add	r9, r3
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad2:	b108      	cbz	r0, 8006ad8 <__cvt+0xa4>
 8006ad4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ad8:	2230      	movs	r2, #48	; 0x30
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	454b      	cmp	r3, r9
 8006ade:	d307      	bcc.n	8006af0 <__cvt+0xbc>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae4:	1bdb      	subs	r3, r3, r7
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	b004      	add	sp, #16
 8006aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	9103      	str	r1, [sp, #12]
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e7f0      	b.n	8006ada <__cvt+0xa6>

08006af8 <__exponent>:
 8006af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afa:	4603      	mov	r3, r0
 8006afc:	2900      	cmp	r1, #0
 8006afe:	bfb8      	it	lt
 8006b00:	4249      	neglt	r1, r1
 8006b02:	f803 2b02 	strb.w	r2, [r3], #2
 8006b06:	bfb4      	ite	lt
 8006b08:	222d      	movlt	r2, #45	; 0x2d
 8006b0a:	222b      	movge	r2, #43	; 0x2b
 8006b0c:	2909      	cmp	r1, #9
 8006b0e:	7042      	strb	r2, [r0, #1]
 8006b10:	dd2a      	ble.n	8006b68 <__exponent+0x70>
 8006b12:	f10d 0407 	add.w	r4, sp, #7
 8006b16:	46a4      	mov	ip, r4
 8006b18:	270a      	movs	r7, #10
 8006b1a:	46a6      	mov	lr, r4
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b22:	fb07 1516 	mls	r5, r7, r6, r1
 8006b26:	3530      	adds	r5, #48	; 0x30
 8006b28:	2a63      	cmp	r2, #99	; 0x63
 8006b2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b32:	4631      	mov	r1, r6
 8006b34:	dcf1      	bgt.n	8006b1a <__exponent+0x22>
 8006b36:	3130      	adds	r1, #48	; 0x30
 8006b38:	f1ae 0502 	sub.w	r5, lr, #2
 8006b3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b40:	1c44      	adds	r4, r0, #1
 8006b42:	4629      	mov	r1, r5
 8006b44:	4561      	cmp	r1, ip
 8006b46:	d30a      	bcc.n	8006b5e <__exponent+0x66>
 8006b48:	f10d 0209 	add.w	r2, sp, #9
 8006b4c:	eba2 020e 	sub.w	r2, r2, lr
 8006b50:	4565      	cmp	r5, ip
 8006b52:	bf88      	it	hi
 8006b54:	2200      	movhi	r2, #0
 8006b56:	4413      	add	r3, r2
 8006b58:	1a18      	subs	r0, r3, r0
 8006b5a:	b003      	add	sp, #12
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b66:	e7ed      	b.n	8006b44 <__exponent+0x4c>
 8006b68:	2330      	movs	r3, #48	; 0x30
 8006b6a:	3130      	adds	r1, #48	; 0x30
 8006b6c:	7083      	strb	r3, [r0, #2]
 8006b6e:	70c1      	strb	r1, [r0, #3]
 8006b70:	1d03      	adds	r3, r0, #4
 8006b72:	e7f1      	b.n	8006b58 <__exponent+0x60>

08006b74 <_printf_float>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	ed2d 8b02 	vpush	{d8}
 8006b7c:	b08d      	sub	sp, #52	; 0x34
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b84:	4616      	mov	r6, r2
 8006b86:	461f      	mov	r7, r3
 8006b88:	4605      	mov	r5, r0
 8006b8a:	f003 fa4d 	bl	800a028 <_localeconv_r>
 8006b8e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b92:	4650      	mov	r0, sl
 8006b94:	f7f9 fb1c 	bl	80001d0 <strlen>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ba8:	3307      	adds	r3, #7
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	f103 0208 	add.w	r2, r3, #8
 8006bb2:	f8c8 2000 	str.w	r2, [r8]
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bcc:	ee08 0a10 	vmov	s16, r0
 8006bd0:	4b9f      	ldr	r3, [pc, #636]	; (8006e50 <_printf_float+0x2dc>)
 8006bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	f7f9 ffa7 	bl	8000b2c <__aeabi_dcmpun>
 8006bde:	bb88      	cbnz	r0, 8006c44 <_printf_float+0xd0>
 8006be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be4:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <_printf_float+0x2dc>)
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	f7f9 ff81 	bl	8000af0 <__aeabi_dcmple>
 8006bee:	bb48      	cbnz	r0, 8006c44 <_printf_float+0xd0>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 ff70 	bl	8000adc <__aeabi_dcmplt>
 8006bfc:	b110      	cbz	r0, 8006c04 <_printf_float+0x90>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	4b93      	ldr	r3, [pc, #588]	; (8006e54 <_printf_float+0x2e0>)
 8006c06:	4894      	ldr	r0, [pc, #592]	; (8006e58 <_printf_float+0x2e4>)
 8006c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c0c:	bf94      	ite	ls
 8006c0e:	4698      	movls	r8, r3
 8006c10:	4680      	movhi	r8, r0
 8006c12:	2303      	movs	r3, #3
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	f023 0204 	bic.w	r2, r3, #4
 8006c1c:	6022      	str	r2, [r4, #0]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	9700      	str	r7, [sp, #0]
 8006c24:	4633      	mov	r3, r6
 8006c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f9d8 	bl	8006fe0 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f040 8090 	bne.w	8006d56 <_printf_float+0x1e2>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b00d      	add	sp, #52	; 0x34
 8006c3c:	ecbd 8b02 	vpop	{d8}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff6e 	bl	8000b2c <__aeabi_dcmpun>
 8006c50:	b140      	cbz	r0, 8006c64 <_printf_float+0xf0>
 8006c52:	464b      	mov	r3, r9
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfbc      	itt	lt
 8006c58:	232d      	movlt	r3, #45	; 0x2d
 8006c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c5e:	487f      	ldr	r0, [pc, #508]	; (8006e5c <_printf_float+0x2e8>)
 8006c60:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <_printf_float+0x2ec>)
 8006c62:	e7d1      	b.n	8006c08 <_printf_float+0x94>
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d13f      	bne.n	8006cf0 <_printf_float+0x17c>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	ab0a      	add	r3, sp, #40	; 0x28
 8006c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c86:	ab09      	add	r3, sp, #36	; 0x24
 8006c88:	ec49 8b10 	vmov	d0, r8, r9
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7ff fecd 	bl	8006a34 <__cvt>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	2b47      	cmp	r3, #71	; 0x47
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	d108      	bne.n	8006cb6 <_printf_float+0x142>
 8006ca4:	1cc8      	adds	r0, r1, #3
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x13a>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	dd41      	ble.n	8006d32 <_printf_float+0x1be>
 8006cae:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cb2:	fa5f fb8b 	uxtb.w	fp, fp
 8006cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cba:	d820      	bhi.n	8006cfe <_printf_float+0x18a>
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	465a      	mov	r2, fp
 8006cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cc6:	f7ff ff17 	bl	8006af8 <__exponent>
 8006cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ccc:	1813      	adds	r3, r2, r0
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	dc02      	bgt.n	8006cdc <_printf_float+0x168>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	07d2      	lsls	r2, r2, #31
 8006cda:	d501      	bpl.n	8006ce0 <_printf_float+0x16c>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d09c      	beq.n	8006c22 <_printf_float+0xae>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cee:	e798      	b.n	8006c22 <_printf_float+0xae>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a47      	cmp	r2, #71	; 0x47
 8006cf4:	d1be      	bne.n	8006c74 <_printf_float+0x100>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1bc      	bne.n	8006c74 <_printf_float+0x100>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7b9      	b.n	8006c72 <_printf_float+0xfe>
 8006cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d02:	d118      	bne.n	8006d36 <_printf_float+0x1c2>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	dd0b      	ble.n	8006d22 <_printf_float+0x1ae>
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	b913      	cbnz	r3, 8006d14 <_printf_float+0x1a0>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d0      	lsls	r0, r2, #31
 8006d12:	d502      	bpl.n	8006d1a <_printf_float+0x1a6>
 8006d14:	3301      	adds	r3, #1
 8006d16:	440b      	add	r3, r1
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	e7de      	b.n	8006ce0 <_printf_float+0x16c>
 8006d22:	b913      	cbnz	r3, 8006d2a <_printf_float+0x1b6>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d501      	bpl.n	8006d2e <_printf_float+0x1ba>
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	e7f4      	b.n	8006d18 <_printf_float+0x1a4>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f2      	b.n	8006d18 <_printf_float+0x1a4>
 8006d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	db05      	blt.n	8006d48 <_printf_float+0x1d4>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6121      	str	r1, [r4, #16]
 8006d40:	07d8      	lsls	r0, r3, #31
 8006d42:	d5ea      	bpl.n	8006d1a <_printf_float+0x1a6>
 8006d44:	1c4b      	adds	r3, r1, #1
 8006d46:	e7e7      	b.n	8006d18 <_printf_float+0x1a4>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	bfd4      	ite	le
 8006d4c:	f1c1 0202 	rsble	r2, r1, #2
 8006d50:	2201      	movgt	r2, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	e7e0      	b.n	8006d18 <_printf_float+0x1a4>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	055a      	lsls	r2, r3, #21
 8006d5a:	d407      	bmi.n	8006d6c <_printf_float+0x1f8>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	d12c      	bne.n	8006dc4 <_printf_float+0x250>
 8006d6a:	e764      	b.n	8006c36 <_printf_float+0xc2>
 8006d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d70:	f240 80e0 	bls.w	8006f34 <_printf_float+0x3c0>
 8006d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f7f9 fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d034      	beq.n	8006dee <_printf_float+0x27a>
 8006d84:	4a37      	ldr	r2, [pc, #220]	; (8006e64 <_printf_float+0x2f0>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af51 	beq.w	8006c36 <_printf_float+0xc2>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	db02      	blt.n	8006da2 <_printf_float+0x22e>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07d8      	lsls	r0, r3, #31
 8006da0:	d510      	bpl.n	8006dc4 <_printf_float+0x250>
 8006da2:	ee18 3a10 	vmov	r3, s16
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af41 	beq.w	8006c36 <_printf_float+0xc2>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	f104 091a 	add.w	r9, r4, #26
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	dc09      	bgt.n	8006dd8 <_printf_float+0x264>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	f100 8105 	bmi.w	8006fd6 <_printf_float+0x462>
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	4618      	movlt	r0, r3
 8006dd6:	e730      	b.n	8006c3a <_printf_float+0xc6>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	464a      	mov	r2, r9
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af27 	beq.w	8006c36 <_printf_float+0xc2>
 8006de8:	f108 0801 	add.w	r8, r8, #1
 8006dec:	e7e6      	b.n	8006dbc <_printf_float+0x248>
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc39      	bgt.n	8006e68 <_printf_float+0x2f4>
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <_printf_float+0x2f0>)
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af19 	beq.w	8006c36 <_printf_float+0xc2>
 8006e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <_printf_float+0x29e>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d5d8      	bpl.n	8006dc4 <_printf_float+0x250>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af09 	beq.w	8006c36 <_printf_float+0xc2>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	425b      	negs	r3, r3
 8006e30:	454b      	cmp	r3, r9
 8006e32:	dc01      	bgt.n	8006e38 <_printf_float+0x2c4>
 8006e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e36:	e792      	b.n	8006d5e <_printf_float+0x1ea>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aef7 	beq.w	8006c36 <_printf_float+0xc2>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7ee      	b.n	8006e2c <_printf_float+0x2b8>
 8006e4e:	bf00      	nop
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	0800c2a0 	.word	0x0800c2a0
 8006e58:	0800c2a4 	.word	0x0800c2a4
 8006e5c:	0800c2ac 	.word	0x0800c2ac
 8006e60:	0800c2a8 	.word	0x0800c2a8
 8006e64:	0800c709 	.word	0x0800c709
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bfa8      	it	ge
 8006e70:	461a      	movge	r2, r3
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	4691      	mov	r9, r2
 8006e76:	dc37      	bgt.n	8006ee8 <_printf_float+0x374>
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e80:	f104 021a 	add.w	r2, r4, #26
 8006e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	eba3 0309 	sub.w	r3, r3, r9
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	dc33      	bgt.n	8006ef8 <_printf_float+0x384>
 8006e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e94:	429a      	cmp	r2, r3
 8006e96:	db3b      	blt.n	8006f10 <_printf_float+0x39c>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07da      	lsls	r2, r3, #31
 8006e9c:	d438      	bmi.n	8006f10 <_printf_float+0x39c>
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	9a05      	ldr	r2, [sp, #20]
 8006ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea4:	1a9a      	subs	r2, r3, r2
 8006ea6:	eba3 0901 	sub.w	r9, r3, r1
 8006eaa:	4591      	cmp	r9, r2
 8006eac:	bfa8      	it	ge
 8006eae:	4691      	movge	r9, r2
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	dc35      	bgt.n	8006f22 <_printf_float+0x3ae>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebe:	f104 0a1a 	add.w	sl, r4, #26
 8006ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	eba3 0309 	sub.w	r3, r3, r9
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	f77f af79 	ble.w	8006dc4 <_printf_float+0x250>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aeaa 	beq.w	8006c36 <_printf_float+0xc2>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ec      	b.n	8006ec2 <_printf_float+0x34e>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	4631      	mov	r1, r6
 8006eec:	4642      	mov	r2, r8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d1c0      	bne.n	8006e78 <_printf_float+0x304>
 8006ef6:	e69e      	b.n	8006c36 <_printf_float+0xc2>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f ae97 	beq.w	8006c36 <_printf_float+0xc2>
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e7b9      	b.n	8006e84 <_printf_float+0x310>
 8006f10:	ee18 3a10 	vmov	r3, s16
 8006f14:	4652      	mov	r2, sl
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1be      	bne.n	8006e9e <_printf_float+0x32a>
 8006f20:	e689      	b.n	8006c36 <_printf_float+0xc2>
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	464b      	mov	r3, r9
 8006f26:	4442      	add	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c1      	bne.n	8006eb6 <_printf_float+0x342>
 8006f32:	e680      	b.n	8006c36 <_printf_float+0xc2>
 8006f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	dc01      	bgt.n	8006f3e <_printf_float+0x3ca>
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d538      	bpl.n	8006fb0 <_printf_float+0x43c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4642      	mov	r2, r8
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae74 	beq.w	8006c36 <_printf_float+0xc2>
 8006f4e:	ee18 3a10 	vmov	r3, s16
 8006f52:	4652      	mov	r2, sl
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae6b 	beq.w	8006c36 <_printf_float+0xc2>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f7f9 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_printf_float+0x432>
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f70:	f108 0201 	add.w	r2, r8, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d10e      	bne.n	8006f9e <_printf_float+0x42a>
 8006f80:	e659      	b.n	8006c36 <_printf_float+0xc2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4652      	mov	r2, sl
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae52 	beq.w	8006c36 <_printf_float+0xc2>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4543      	cmp	r3, r8
 8006f9c:	dcf1      	bgt.n	8006f82 <_printf_float+0x40e>
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa4:	e6dc      	b.n	8006d60 <_printf_float+0x1ec>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 0a1a 	add.w	sl, r4, #26
 8006fae:	e7f2      	b.n	8006f96 <_printf_float+0x422>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	e7df      	b.n	8006f76 <_printf_float+0x402>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	464a      	mov	r2, r9
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae38 	beq.w	8006c36 <_printf_float+0xc2>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fce:	1a5b      	subs	r3, r3, r1
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	dcf0      	bgt.n	8006fb6 <_printf_float+0x442>
 8006fd4:	e6fa      	b.n	8006dcc <_printf_float+0x258>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f104 0919 	add.w	r9, r4, #25
 8006fde:	e7f4      	b.n	8006fca <_printf_float+0x456>

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	4699      	mov	r9, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bfb8      	it	lt
 8006ff4:	4613      	movlt	r3, r2
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	b10a      	cbz	r2, 8007006 <_printf_common+0x26>
 8007002:	3301      	adds	r3, #1
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	0699      	lsls	r1, r3, #26
 800700a:	bf42      	ittt	mi
 800700c:	6833      	ldrmi	r3, [r6, #0]
 800700e:	3302      	addmi	r3, #2
 8007010:	6033      	strmi	r3, [r6, #0]
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	f015 0506 	ands.w	r5, r5, #6
 8007018:	d106      	bne.n	8007028 <_printf_common+0x48>
 800701a:	f104 0a19 	add.w	sl, r4, #25
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6832      	ldr	r2, [r6, #0]
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc26      	bgt.n	8007076 <_printf_common+0x96>
 8007028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800702c:	1e13      	subs	r3, r2, #0
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	bf18      	it	ne
 8007032:	2301      	movne	r3, #1
 8007034:	0692      	lsls	r2, r2, #26
 8007036:	d42b      	bmi.n	8007090 <_printf_common+0xb0>
 8007038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800703c:	4649      	mov	r1, r9
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d01e      	beq.n	8007084 <_printf_common+0xa4>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	68e5      	ldr	r5, [r4, #12]
 800704a:	6832      	ldr	r2, [r6, #0]
 800704c:	f003 0306 	and.w	r3, r3, #6
 8007050:	2b04      	cmp	r3, #4
 8007052:	bf08      	it	eq
 8007054:	1aad      	subeq	r5, r5, r2
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	bf0c      	ite	eq
 800705c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007060:	2500      	movne	r5, #0
 8007062:	4293      	cmp	r3, r2
 8007064:	bfc4      	itt	gt
 8007066:	1a9b      	subgt	r3, r3, r2
 8007068:	18ed      	addgt	r5, r5, r3
 800706a:	2600      	movs	r6, #0
 800706c:	341a      	adds	r4, #26
 800706e:	42b5      	cmp	r5, r6
 8007070:	d11a      	bne.n	80070a8 <_printf_common+0xc8>
 8007072:	2000      	movs	r0, #0
 8007074:	e008      	b.n	8007088 <_printf_common+0xa8>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4649      	mov	r1, r9
 800707c:	4638      	mov	r0, r7
 800707e:	47c0      	blx	r8
 8007080:	3001      	adds	r0, #1
 8007082:	d103      	bne.n	800708c <_printf_common+0xac>
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	3501      	adds	r5, #1
 800708e:	e7c6      	b.n	800701e <_printf_common+0x3e>
 8007090:	18e1      	adds	r1, r4, r3
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	2030      	movs	r0, #48	; 0x30
 8007096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709a:	4422      	add	r2, r4
 800709c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a4:	3302      	adds	r3, #2
 80070a6:	e7c7      	b.n	8007038 <_printf_common+0x58>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4622      	mov	r2, r4
 80070ac:	4649      	mov	r1, r9
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c0      	blx	r8
 80070b2:	3001      	adds	r0, #1
 80070b4:	d0e6      	beq.n	8007084 <_printf_common+0xa4>
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7d9      	b.n	800706e <_printf_common+0x8e>
	...

080070bc <_printf_i>:
 80070bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	7e0f      	ldrb	r7, [r1, #24]
 80070c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070c4:	2f78      	cmp	r7, #120	; 0x78
 80070c6:	4691      	mov	r9, r2
 80070c8:	4680      	mov	r8, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	469a      	mov	sl, r3
 80070ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070d2:	d807      	bhi.n	80070e4 <_printf_i+0x28>
 80070d4:	2f62      	cmp	r7, #98	; 0x62
 80070d6:	d80a      	bhi.n	80070ee <_printf_i+0x32>
 80070d8:	2f00      	cmp	r7, #0
 80070da:	f000 80d8 	beq.w	800728e <_printf_i+0x1d2>
 80070de:	2f58      	cmp	r7, #88	; 0x58
 80070e0:	f000 80a3 	beq.w	800722a <_printf_i+0x16e>
 80070e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070ec:	e03a      	b.n	8007164 <_printf_i+0xa8>
 80070ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070f2:	2b15      	cmp	r3, #21
 80070f4:	d8f6      	bhi.n	80070e4 <_printf_i+0x28>
 80070f6:	a101      	add	r1, pc, #4	; (adr r1, 80070fc <_printf_i+0x40>)
 80070f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070fc:	08007155 	.word	0x08007155
 8007100:	08007169 	.word	0x08007169
 8007104:	080070e5 	.word	0x080070e5
 8007108:	080070e5 	.word	0x080070e5
 800710c:	080070e5 	.word	0x080070e5
 8007110:	080070e5 	.word	0x080070e5
 8007114:	08007169 	.word	0x08007169
 8007118:	080070e5 	.word	0x080070e5
 800711c:	080070e5 	.word	0x080070e5
 8007120:	080070e5 	.word	0x080070e5
 8007124:	080070e5 	.word	0x080070e5
 8007128:	08007275 	.word	0x08007275
 800712c:	08007199 	.word	0x08007199
 8007130:	08007257 	.word	0x08007257
 8007134:	080070e5 	.word	0x080070e5
 8007138:	080070e5 	.word	0x080070e5
 800713c:	08007297 	.word	0x08007297
 8007140:	080070e5 	.word	0x080070e5
 8007144:	08007199 	.word	0x08007199
 8007148:	080070e5 	.word	0x080070e5
 800714c:	080070e5 	.word	0x080070e5
 8007150:	0800725f 	.word	0x0800725f
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	602a      	str	r2, [r5, #0]
 800715c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007164:	2301      	movs	r3, #1
 8007166:	e0a3      	b.n	80072b0 <_printf_i+0x1f4>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	6829      	ldr	r1, [r5, #0]
 800716c:	0606      	lsls	r6, r0, #24
 800716e:	f101 0304 	add.w	r3, r1, #4
 8007172:	d50a      	bpl.n	800718a <_printf_i+0xce>
 8007174:	680e      	ldr	r6, [r1, #0]
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	2e00      	cmp	r6, #0
 800717a:	da03      	bge.n	8007184 <_printf_i+0xc8>
 800717c:	232d      	movs	r3, #45	; 0x2d
 800717e:	4276      	negs	r6, r6
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007184:	485e      	ldr	r0, [pc, #376]	; (8007300 <_printf_i+0x244>)
 8007186:	230a      	movs	r3, #10
 8007188:	e019      	b.n	80071be <_printf_i+0x102>
 800718a:	680e      	ldr	r6, [r1, #0]
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007192:	bf18      	it	ne
 8007194:	b236      	sxthne	r6, r6
 8007196:	e7ef      	b.n	8007178 <_printf_i+0xbc>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	6029      	str	r1, [r5, #0]
 80071a0:	0601      	lsls	r1, r0, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xec>
 80071a4:	681e      	ldr	r6, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0xf2>
 80071a8:	0646      	lsls	r6, r0, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xe8>
 80071ac:	881e      	ldrh	r6, [r3, #0]
 80071ae:	4854      	ldr	r0, [pc, #336]	; (8007300 <_printf_i+0x244>)
 80071b0:	2f6f      	cmp	r7, #111	; 0x6f
 80071b2:	bf0c      	ite	eq
 80071b4:	2308      	moveq	r3, #8
 80071b6:	230a      	movne	r3, #10
 80071b8:	2100      	movs	r1, #0
 80071ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071be:	6865      	ldr	r5, [r4, #4]
 80071c0:	60a5      	str	r5, [r4, #8]
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	bfa2      	ittt	ge
 80071c6:	6821      	ldrge	r1, [r4, #0]
 80071c8:	f021 0104 	bicge.w	r1, r1, #4
 80071cc:	6021      	strge	r1, [r4, #0]
 80071ce:	b90e      	cbnz	r6, 80071d4 <_printf_i+0x118>
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	d04d      	beq.n	8007270 <_printf_i+0x1b4>
 80071d4:	4615      	mov	r5, r2
 80071d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071da:	fb03 6711 	mls	r7, r3, r1, r6
 80071de:	5dc7      	ldrb	r7, [r0, r7]
 80071e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071e4:	4637      	mov	r7, r6
 80071e6:	42bb      	cmp	r3, r7
 80071e8:	460e      	mov	r6, r1
 80071ea:	d9f4      	bls.n	80071d6 <_printf_i+0x11a>
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d10b      	bne.n	8007208 <_printf_i+0x14c>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07de      	lsls	r6, r3, #31
 80071f4:	d508      	bpl.n	8007208 <_printf_i+0x14c>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4299      	cmp	r1, r3
 80071fc:	bfde      	ittt	le
 80071fe:	2330      	movle	r3, #48	; 0x30
 8007200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007208:	1b52      	subs	r2, r2, r5
 800720a:	6122      	str	r2, [r4, #16]
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	464b      	mov	r3, r9
 8007212:	aa03      	add	r2, sp, #12
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f7ff fee2 	bl	8006fe0 <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	d14c      	bne.n	80072ba <_printf_i+0x1fe>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	b004      	add	sp, #16
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	4835      	ldr	r0, [pc, #212]	; (8007300 <_printf_i+0x244>)
 800722c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007230:	6829      	ldr	r1, [r5, #0]
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	f851 6b04 	ldr.w	r6, [r1], #4
 8007238:	6029      	str	r1, [r5, #0]
 800723a:	061d      	lsls	r5, r3, #24
 800723c:	d514      	bpl.n	8007268 <_printf_i+0x1ac>
 800723e:	07df      	lsls	r7, r3, #31
 8007240:	bf44      	itt	mi
 8007242:	f043 0320 	orrmi.w	r3, r3, #32
 8007246:	6023      	strmi	r3, [r4, #0]
 8007248:	b91e      	cbnz	r6, 8007252 <_printf_i+0x196>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f023 0320 	bic.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2310      	movs	r3, #16
 8007254:	e7b0      	b.n	80071b8 <_printf_i+0xfc>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f043 0320 	orr.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	2378      	movs	r3, #120	; 0x78
 8007260:	4828      	ldr	r0, [pc, #160]	; (8007304 <_printf_i+0x248>)
 8007262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007266:	e7e3      	b.n	8007230 <_printf_i+0x174>
 8007268:	0659      	lsls	r1, r3, #25
 800726a:	bf48      	it	mi
 800726c:	b2b6      	uxthmi	r6, r6
 800726e:	e7e6      	b.n	800723e <_printf_i+0x182>
 8007270:	4615      	mov	r5, r2
 8007272:	e7bb      	b.n	80071ec <_printf_i+0x130>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	6826      	ldr	r6, [r4, #0]
 8007278:	6961      	ldr	r1, [r4, #20]
 800727a:	1d18      	adds	r0, r3, #4
 800727c:	6028      	str	r0, [r5, #0]
 800727e:	0635      	lsls	r5, r6, #24
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	d501      	bpl.n	8007288 <_printf_i+0x1cc>
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0x1d2>
 8007288:	0670      	lsls	r0, r6, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0x1c8>
 800728c:	8019      	strh	r1, [r3, #0]
 800728e:	2300      	movs	r3, #0
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	4615      	mov	r5, r2
 8007294:	e7ba      	b.n	800720c <_printf_i+0x150>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	602a      	str	r2, [r5, #0]
 800729c:	681d      	ldr	r5, [r3, #0]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7f8 ff9c 	bl	80001e0 <memchr>
 80072a8:	b108      	cbz	r0, 80072ae <_printf_i+0x1f2>
 80072aa:	1b40      	subs	r0, r0, r5
 80072ac:	6060      	str	r0, [r4, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b8:	e7a8      	b.n	800720c <_printf_i+0x150>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	462a      	mov	r2, r5
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0ab      	beq.n	8007220 <_printf_i+0x164>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	079b      	lsls	r3, r3, #30
 80072cc:	d413      	bmi.n	80072f6 <_printf_i+0x23a>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	4298      	cmp	r0, r3
 80072d4:	bfb8      	it	lt
 80072d6:	4618      	movlt	r0, r3
 80072d8:	e7a4      	b.n	8007224 <_printf_i+0x168>
 80072da:	2301      	movs	r3, #1
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d09b      	beq.n	8007220 <_printf_i+0x164>
 80072e8:	3501      	adds	r5, #1
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	9903      	ldr	r1, [sp, #12]
 80072ee:	1a5b      	subs	r3, r3, r1
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dcf2      	bgt.n	80072da <_printf_i+0x21e>
 80072f4:	e7eb      	b.n	80072ce <_printf_i+0x212>
 80072f6:	2500      	movs	r5, #0
 80072f8:	f104 0619 	add.w	r6, r4, #25
 80072fc:	e7f5      	b.n	80072ea <_printf_i+0x22e>
 80072fe:	bf00      	nop
 8007300:	0800c2b0 	.word	0x0800c2b0
 8007304:	0800c2c1 	.word	0x0800c2c1

08007308 <_scanf_float>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b087      	sub	sp, #28
 800730e:	4617      	mov	r7, r2
 8007310:	9303      	str	r3, [sp, #12]
 8007312:	688b      	ldr	r3, [r1, #8]
 8007314:	1e5a      	subs	r2, r3, #1
 8007316:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800731a:	bf83      	ittte	hi
 800731c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007320:	195b      	addhi	r3, r3, r5
 8007322:	9302      	strhi	r3, [sp, #8]
 8007324:	2300      	movls	r3, #0
 8007326:	bf86      	itte	hi
 8007328:	f240 135d 	movwhi	r3, #349	; 0x15d
 800732c:	608b      	strhi	r3, [r1, #8]
 800732e:	9302      	strls	r3, [sp, #8]
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	468b      	mov	fp, r1
 8007334:	2500      	movs	r5, #0
 8007336:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800733a:	f84b 3b1c 	str.w	r3, [fp], #28
 800733e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007342:	4680      	mov	r8, r0
 8007344:	460c      	mov	r4, r1
 8007346:	465e      	mov	r6, fp
 8007348:	46aa      	mov	sl, r5
 800734a:	46a9      	mov	r9, r5
 800734c:	9501      	str	r5, [sp, #4]
 800734e:	68a2      	ldr	r2, [r4, #8]
 8007350:	b152      	cbz	r2, 8007368 <_scanf_float+0x60>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b4e      	cmp	r3, #78	; 0x4e
 8007358:	d864      	bhi.n	8007424 <_scanf_float+0x11c>
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d83c      	bhi.n	80073d8 <_scanf_float+0xd0>
 800735e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007362:	b2c8      	uxtb	r0, r1
 8007364:	280e      	cmp	r0, #14
 8007366:	d93a      	bls.n	80073de <_scanf_float+0xd6>
 8007368:	f1b9 0f00 	cmp.w	r9, #0
 800736c:	d003      	beq.n	8007376 <_scanf_float+0x6e>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737a:	f1ba 0f01 	cmp.w	sl, #1
 800737e:	f200 8113 	bhi.w	80075a8 <_scanf_float+0x2a0>
 8007382:	455e      	cmp	r6, fp
 8007384:	f200 8105 	bhi.w	8007592 <_scanf_float+0x28a>
 8007388:	2501      	movs	r5, #1
 800738a:	4628      	mov	r0, r5
 800738c:	b007      	add	sp, #28
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007396:	2a0d      	cmp	r2, #13
 8007398:	d8e6      	bhi.n	8007368 <_scanf_float+0x60>
 800739a:	a101      	add	r1, pc, #4	; (adr r1, 80073a0 <_scanf_float+0x98>)
 800739c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073a0:	080074df 	.word	0x080074df
 80073a4:	08007369 	.word	0x08007369
 80073a8:	08007369 	.word	0x08007369
 80073ac:	08007369 	.word	0x08007369
 80073b0:	0800753f 	.word	0x0800753f
 80073b4:	08007517 	.word	0x08007517
 80073b8:	08007369 	.word	0x08007369
 80073bc:	08007369 	.word	0x08007369
 80073c0:	080074ed 	.word	0x080074ed
 80073c4:	08007369 	.word	0x08007369
 80073c8:	08007369 	.word	0x08007369
 80073cc:	08007369 	.word	0x08007369
 80073d0:	08007369 	.word	0x08007369
 80073d4:	080074a5 	.word	0x080074a5
 80073d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073dc:	e7db      	b.n	8007396 <_scanf_float+0x8e>
 80073de:	290e      	cmp	r1, #14
 80073e0:	d8c2      	bhi.n	8007368 <_scanf_float+0x60>
 80073e2:	a001      	add	r0, pc, #4	; (adr r0, 80073e8 <_scanf_float+0xe0>)
 80073e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073e8:	08007497 	.word	0x08007497
 80073ec:	08007369 	.word	0x08007369
 80073f0:	08007497 	.word	0x08007497
 80073f4:	0800752b 	.word	0x0800752b
 80073f8:	08007369 	.word	0x08007369
 80073fc:	08007445 	.word	0x08007445
 8007400:	08007481 	.word	0x08007481
 8007404:	08007481 	.word	0x08007481
 8007408:	08007481 	.word	0x08007481
 800740c:	08007481 	.word	0x08007481
 8007410:	08007481 	.word	0x08007481
 8007414:	08007481 	.word	0x08007481
 8007418:	08007481 	.word	0x08007481
 800741c:	08007481 	.word	0x08007481
 8007420:	08007481 	.word	0x08007481
 8007424:	2b6e      	cmp	r3, #110	; 0x6e
 8007426:	d809      	bhi.n	800743c <_scanf_float+0x134>
 8007428:	2b60      	cmp	r3, #96	; 0x60
 800742a:	d8b2      	bhi.n	8007392 <_scanf_float+0x8a>
 800742c:	2b54      	cmp	r3, #84	; 0x54
 800742e:	d077      	beq.n	8007520 <_scanf_float+0x218>
 8007430:	2b59      	cmp	r3, #89	; 0x59
 8007432:	d199      	bne.n	8007368 <_scanf_float+0x60>
 8007434:	2d07      	cmp	r5, #7
 8007436:	d197      	bne.n	8007368 <_scanf_float+0x60>
 8007438:	2508      	movs	r5, #8
 800743a:	e029      	b.n	8007490 <_scanf_float+0x188>
 800743c:	2b74      	cmp	r3, #116	; 0x74
 800743e:	d06f      	beq.n	8007520 <_scanf_float+0x218>
 8007440:	2b79      	cmp	r3, #121	; 0x79
 8007442:	e7f6      	b.n	8007432 <_scanf_float+0x12a>
 8007444:	6821      	ldr	r1, [r4, #0]
 8007446:	05c8      	lsls	r0, r1, #23
 8007448:	d51a      	bpl.n	8007480 <_scanf_float+0x178>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007450:	6021      	str	r1, [r4, #0]
 8007452:	f109 0901 	add.w	r9, r9, #1
 8007456:	b11b      	cbz	r3, 8007460 <_scanf_float+0x158>
 8007458:	3b01      	subs	r3, #1
 800745a:	3201      	adds	r2, #1
 800745c:	9302      	str	r3, [sp, #8]
 800745e:	60a2      	str	r2, [r4, #8]
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	3b01      	subs	r3, #1
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	3301      	adds	r3, #1
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3b01      	subs	r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	f340 8084 	ble.w	8007580 <_scanf_float+0x278>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	e766      	b.n	800734e <_scanf_float+0x46>
 8007480:	eb1a 0f05 	cmn.w	sl, r5
 8007484:	f47f af70 	bne.w	8007368 <_scanf_float+0x60>
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	f806 3b01 	strb.w	r3, [r6], #1
 8007494:	e7e4      	b.n	8007460 <_scanf_float+0x158>
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	0610      	lsls	r0, r2, #24
 800749a:	f57f af65 	bpl.w	8007368 <_scanf_float+0x60>
 800749e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a2:	e7f4      	b.n	800748e <_scanf_float+0x186>
 80074a4:	f1ba 0f00 	cmp.w	sl, #0
 80074a8:	d10e      	bne.n	80074c8 <_scanf_float+0x1c0>
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	d10e      	bne.n	80074ce <_scanf_float+0x1c6>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074ba:	d108      	bne.n	80074ce <_scanf_float+0x1c6>
 80074bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074c0:	6022      	str	r2, [r4, #0]
 80074c2:	f04f 0a01 	mov.w	sl, #1
 80074c6:	e7e3      	b.n	8007490 <_scanf_float+0x188>
 80074c8:	f1ba 0f02 	cmp.w	sl, #2
 80074cc:	d055      	beq.n	800757a <_scanf_float+0x272>
 80074ce:	2d01      	cmp	r5, #1
 80074d0:	d002      	beq.n	80074d8 <_scanf_float+0x1d0>
 80074d2:	2d04      	cmp	r5, #4
 80074d4:	f47f af48 	bne.w	8007368 <_scanf_float+0x60>
 80074d8:	3501      	adds	r5, #1
 80074da:	b2ed      	uxtb	r5, r5
 80074dc:	e7d8      	b.n	8007490 <_scanf_float+0x188>
 80074de:	f1ba 0f01 	cmp.w	sl, #1
 80074e2:	f47f af41 	bne.w	8007368 <_scanf_float+0x60>
 80074e6:	f04f 0a02 	mov.w	sl, #2
 80074ea:	e7d1      	b.n	8007490 <_scanf_float+0x188>
 80074ec:	b97d      	cbnz	r5, 800750e <_scanf_float+0x206>
 80074ee:	f1b9 0f00 	cmp.w	r9, #0
 80074f2:	f47f af3c 	bne.w	800736e <_scanf_float+0x66>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007500:	f47f af39 	bne.w	8007376 <_scanf_float+0x6e>
 8007504:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	2501      	movs	r5, #1
 800750c:	e7c0      	b.n	8007490 <_scanf_float+0x188>
 800750e:	2d03      	cmp	r5, #3
 8007510:	d0e2      	beq.n	80074d8 <_scanf_float+0x1d0>
 8007512:	2d05      	cmp	r5, #5
 8007514:	e7de      	b.n	80074d4 <_scanf_float+0x1cc>
 8007516:	2d02      	cmp	r5, #2
 8007518:	f47f af26 	bne.w	8007368 <_scanf_float+0x60>
 800751c:	2503      	movs	r5, #3
 800751e:	e7b7      	b.n	8007490 <_scanf_float+0x188>
 8007520:	2d06      	cmp	r5, #6
 8007522:	f47f af21 	bne.w	8007368 <_scanf_float+0x60>
 8007526:	2507      	movs	r5, #7
 8007528:	e7b2      	b.n	8007490 <_scanf_float+0x188>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	0591      	lsls	r1, r2, #22
 800752e:	f57f af1b 	bpl.w	8007368 <_scanf_float+0x60>
 8007532:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	f8cd 9004 	str.w	r9, [sp, #4]
 800753c:	e7a8      	b.n	8007490 <_scanf_float+0x188>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007544:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007548:	d006      	beq.n	8007558 <_scanf_float+0x250>
 800754a:	0550      	lsls	r0, r2, #21
 800754c:	f57f af0c 	bpl.w	8007368 <_scanf_float+0x60>
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	f43f af0f 	beq.w	8007376 <_scanf_float+0x6e>
 8007558:	0591      	lsls	r1, r2, #22
 800755a:	bf58      	it	pl
 800755c:	9901      	ldrpl	r1, [sp, #4]
 800755e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007562:	bf58      	it	pl
 8007564:	eba9 0101 	subpl.w	r1, r9, r1
 8007568:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800756c:	bf58      	it	pl
 800756e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	f04f 0900 	mov.w	r9, #0
 8007578:	e78a      	b.n	8007490 <_scanf_float+0x188>
 800757a:	f04f 0a03 	mov.w	sl, #3
 800757e:	e787      	b.n	8007490 <_scanf_float+0x188>
 8007580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007584:	4639      	mov	r1, r7
 8007586:	4640      	mov	r0, r8
 8007588:	4798      	blx	r3
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f aedf 	beq.w	800734e <_scanf_float+0x46>
 8007590:	e6ea      	b.n	8007368 <_scanf_float+0x60>
 8007592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800759a:	463a      	mov	r2, r7
 800759c:	4640      	mov	r0, r8
 800759e:	4798      	blx	r3
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	e6ec      	b.n	8007382 <_scanf_float+0x7a>
 80075a8:	1e6b      	subs	r3, r5, #1
 80075aa:	2b06      	cmp	r3, #6
 80075ac:	d825      	bhi.n	80075fa <_scanf_float+0x2f2>
 80075ae:	2d02      	cmp	r5, #2
 80075b0:	d836      	bhi.n	8007620 <_scanf_float+0x318>
 80075b2:	455e      	cmp	r6, fp
 80075b4:	f67f aee8 	bls.w	8007388 <_scanf_float+0x80>
 80075b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c0:	463a      	mov	r2, r7
 80075c2:	4640      	mov	r0, r8
 80075c4:	4798      	blx	r3
 80075c6:	6923      	ldr	r3, [r4, #16]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	e7f1      	b.n	80075b2 <_scanf_float+0x2aa>
 80075ce:	9802      	ldr	r0, [sp, #8]
 80075d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075d8:	9002      	str	r0, [sp, #8]
 80075da:	463a      	mov	r2, r7
 80075dc:	4640      	mov	r0, r8
 80075de:	4798      	blx	r3
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ea:	fa5f fa8a 	uxtb.w	sl, sl
 80075ee:	f1ba 0f02 	cmp.w	sl, #2
 80075f2:	d1ec      	bne.n	80075ce <_scanf_float+0x2c6>
 80075f4:	3d03      	subs	r5, #3
 80075f6:	b2ed      	uxtb	r5, r5
 80075f8:	1b76      	subs	r6, r6, r5
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	05da      	lsls	r2, r3, #23
 80075fe:	d52f      	bpl.n	8007660 <_scanf_float+0x358>
 8007600:	055b      	lsls	r3, r3, #21
 8007602:	d510      	bpl.n	8007626 <_scanf_float+0x31e>
 8007604:	455e      	cmp	r6, fp
 8007606:	f67f aebf 	bls.w	8007388 <_scanf_float+0x80>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800760e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007612:	463a      	mov	r2, r7
 8007614:	4640      	mov	r0, r8
 8007616:	4798      	blx	r3
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	3b01      	subs	r3, #1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	e7f1      	b.n	8007604 <_scanf_float+0x2fc>
 8007620:	46aa      	mov	sl, r5
 8007622:	9602      	str	r6, [sp, #8]
 8007624:	e7df      	b.n	80075e6 <_scanf_float+0x2de>
 8007626:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	2965      	cmp	r1, #101	; 0x65
 800762e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007632:	f106 35ff 	add.w	r5, r6, #4294967295
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	d00c      	beq.n	8007654 <_scanf_float+0x34c>
 800763a:	2945      	cmp	r1, #69	; 0x45
 800763c:	d00a      	beq.n	8007654 <_scanf_float+0x34c>
 800763e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007642:	463a      	mov	r2, r7
 8007644:	4640      	mov	r0, r8
 8007646:	4798      	blx	r3
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800764e:	3b01      	subs	r3, #1
 8007650:	1eb5      	subs	r5, r6, #2
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007658:	463a      	mov	r2, r7
 800765a:	4640      	mov	r0, r8
 800765c:	4798      	blx	r3
 800765e:	462e      	mov	r6, r5
 8007660:	6825      	ldr	r5, [r4, #0]
 8007662:	f015 0510 	ands.w	r5, r5, #16
 8007666:	d159      	bne.n	800771c <_scanf_float+0x414>
 8007668:	7035      	strb	r5, [r6, #0]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007674:	d11b      	bne.n	80076ae <_scanf_float+0x3a6>
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	454b      	cmp	r3, r9
 800767a:	eba3 0209 	sub.w	r2, r3, r9
 800767e:	d123      	bne.n	80076c8 <_scanf_float+0x3c0>
 8007680:	2200      	movs	r2, #0
 8007682:	4659      	mov	r1, fp
 8007684:	4640      	mov	r0, r8
 8007686:	f000 ffc1 	bl	800860c <_strtod_r>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	f012 0f02 	tst.w	r2, #2
 8007692:	ec57 6b10 	vmov	r6, r7, d0
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	d021      	beq.n	80076de <_scanf_float+0x3d6>
 800769a:	9903      	ldr	r1, [sp, #12]
 800769c:	1d1a      	adds	r2, r3, #4
 800769e:	600a      	str	r2, [r1, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	e9c3 6700 	strd	r6, r7, [r3]
 80076a6:	68e3      	ldr	r3, [r4, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60e3      	str	r3, [r4, #12]
 80076ac:	e66d      	b.n	800738a <_scanf_float+0x82>
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0e5      	beq.n	8007680 <_scanf_float+0x378>
 80076b4:	9905      	ldr	r1, [sp, #20]
 80076b6:	230a      	movs	r3, #10
 80076b8:	462a      	mov	r2, r5
 80076ba:	3101      	adds	r1, #1
 80076bc:	4640      	mov	r0, r8
 80076be:	f001 f82d 	bl	800871c <_strtol_r>
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	9e05      	ldr	r6, [sp, #20]
 80076c6:	1ac2      	subs	r2, r0, r3
 80076c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076cc:	429e      	cmp	r6, r3
 80076ce:	bf28      	it	cs
 80076d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076d4:	4912      	ldr	r1, [pc, #72]	; (8007720 <_scanf_float+0x418>)
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f8ba 	bl	8007850 <siprintf>
 80076dc:	e7d0      	b.n	8007680 <_scanf_float+0x378>
 80076de:	9903      	ldr	r1, [sp, #12]
 80076e0:	f012 0f04 	tst.w	r2, #4
 80076e4:	f103 0204 	add.w	r2, r3, #4
 80076e8:	600a      	str	r2, [r1, #0]
 80076ea:	d1d9      	bne.n	80076a0 <_scanf_float+0x398>
 80076ec:	f8d3 8000 	ldr.w	r8, [r3]
 80076f0:	ee10 2a10 	vmov	r2, s0
 80076f4:	ee10 0a10 	vmov	r0, s0
 80076f8:	463b      	mov	r3, r7
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f9 fa16 	bl	8000b2c <__aeabi_dcmpun>
 8007700:	b128      	cbz	r0, 800770e <_scanf_float+0x406>
 8007702:	4808      	ldr	r0, [pc, #32]	; (8007724 <_scanf_float+0x41c>)
 8007704:	f000 f89e 	bl	8007844 <nanf>
 8007708:	ed88 0a00 	vstr	s0, [r8]
 800770c:	e7cb      	b.n	80076a6 <_scanf_float+0x39e>
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f9 fa69 	bl	8000be8 <__aeabi_d2f>
 8007716:	f8c8 0000 	str.w	r0, [r8]
 800771a:	e7c4      	b.n	80076a6 <_scanf_float+0x39e>
 800771c:	2500      	movs	r5, #0
 800771e:	e634      	b.n	800738a <_scanf_float+0x82>
 8007720:	0800c2d2 	.word	0x0800c2d2
 8007724:	0800c75b 	.word	0x0800c75b

08007728 <iprintf>:
 8007728:	b40f      	push	{r0, r1, r2, r3}
 800772a:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <iprintf+0x2c>)
 800772c:	b513      	push	{r0, r1, r4, lr}
 800772e:	681c      	ldr	r4, [r3, #0]
 8007730:	b124      	cbz	r4, 800773c <iprintf+0x14>
 8007732:	69a3      	ldr	r3, [r4, #24]
 8007734:	b913      	cbnz	r3, 800773c <iprintf+0x14>
 8007736:	4620      	mov	r0, r4
 8007738:	f002 f86a 	bl	8009810 <__sinit>
 800773c:	ab05      	add	r3, sp, #20
 800773e:	9a04      	ldr	r2, [sp, #16]
 8007740:	68a1      	ldr	r1, [r4, #8]
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	4620      	mov	r0, r4
 8007746:	f003 fe19 	bl	800b37c <_vfiprintf_r>
 800774a:	b002      	add	sp, #8
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	b004      	add	sp, #16
 8007752:	4770      	bx	lr
 8007754:	20000038 	.word	0x20000038

08007758 <_puts_r>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	460e      	mov	r6, r1
 800775c:	4605      	mov	r5, r0
 800775e:	b118      	cbz	r0, 8007768 <_puts_r+0x10>
 8007760:	6983      	ldr	r3, [r0, #24]
 8007762:	b90b      	cbnz	r3, 8007768 <_puts_r+0x10>
 8007764:	f002 f854 	bl	8009810 <__sinit>
 8007768:	69ab      	ldr	r3, [r5, #24]
 800776a:	68ac      	ldr	r4, [r5, #8]
 800776c:	b913      	cbnz	r3, 8007774 <_puts_r+0x1c>
 800776e:	4628      	mov	r0, r5
 8007770:	f002 f84e 	bl	8009810 <__sinit>
 8007774:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <_puts_r+0xd0>)
 8007776:	429c      	cmp	r4, r3
 8007778:	d120      	bne.n	80077bc <_puts_r+0x64>
 800777a:	686c      	ldr	r4, [r5, #4]
 800777c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d405      	bmi.n	800778e <_puts_r+0x36>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	0598      	lsls	r0, r3, #22
 8007786:	d402      	bmi.n	800778e <_puts_r+0x36>
 8007788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778a:	f002 fc52 	bl	800a032 <__retarget_lock_acquire_recursive>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	0719      	lsls	r1, r3, #28
 8007792:	d51d      	bpl.n	80077d0 <_puts_r+0x78>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	b1db      	cbz	r3, 80077d0 <_puts_r+0x78>
 8007798:	3e01      	subs	r6, #1
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077a0:	3b01      	subs	r3, #1
 80077a2:	60a3      	str	r3, [r4, #8]
 80077a4:	bb39      	cbnz	r1, 80077f6 <_puts_r+0x9e>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da38      	bge.n	800781c <_puts_r+0xc4>
 80077aa:	4622      	mov	r2, r4
 80077ac:	210a      	movs	r1, #10
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 ffb6 	bl	8008720 <__swbuf_r>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d011      	beq.n	80077dc <_puts_r+0x84>
 80077b8:	250a      	movs	r5, #10
 80077ba:	e011      	b.n	80077e0 <_puts_r+0x88>
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <_puts_r+0xd4>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d101      	bne.n	80077c6 <_puts_r+0x6e>
 80077c2:	68ac      	ldr	r4, [r5, #8]
 80077c4:	e7da      	b.n	800777c <_puts_r+0x24>
 80077c6:	4b1a      	ldr	r3, [pc, #104]	; (8007830 <_puts_r+0xd8>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	bf08      	it	eq
 80077cc:	68ec      	ldreq	r4, [r5, #12]
 80077ce:	e7d5      	b.n	800777c <_puts_r+0x24>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f001 f808 	bl	80087e8 <__swsetup_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0dd      	beq.n	8007798 <_puts_r+0x40>
 80077dc:	f04f 35ff 	mov.w	r5, #4294967295
 80077e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e2:	07da      	lsls	r2, r3, #31
 80077e4:	d405      	bmi.n	80077f2 <_puts_r+0x9a>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	059b      	lsls	r3, r3, #22
 80077ea:	d402      	bmi.n	80077f2 <_puts_r+0x9a>
 80077ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ee:	f002 fc21 	bl	800a034 <__retarget_lock_release_recursive>
 80077f2:	4628      	mov	r0, r5
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	da04      	bge.n	8007804 <_puts_r+0xac>
 80077fa:	69a2      	ldr	r2, [r4, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	dc06      	bgt.n	800780e <_puts_r+0xb6>
 8007800:	290a      	cmp	r1, #10
 8007802:	d004      	beq.n	800780e <_puts_r+0xb6>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	6022      	str	r2, [r4, #0]
 800780a:	7019      	strb	r1, [r3, #0]
 800780c:	e7c5      	b.n	800779a <_puts_r+0x42>
 800780e:	4622      	mov	r2, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 ff85 	bl	8008720 <__swbuf_r>
 8007816:	3001      	adds	r0, #1
 8007818:	d1bf      	bne.n	800779a <_puts_r+0x42>
 800781a:	e7df      	b.n	80077dc <_puts_r+0x84>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	250a      	movs	r5, #10
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	701d      	strb	r5, [r3, #0]
 8007826:	e7db      	b.n	80077e0 <_puts_r+0x88>
 8007828:	0800c4dc 	.word	0x0800c4dc
 800782c:	0800c4fc 	.word	0x0800c4fc
 8007830:	0800c4bc 	.word	0x0800c4bc

08007834 <puts>:
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <puts+0xc>)
 8007836:	4601      	mov	r1, r0
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f7ff bf8d 	b.w	8007758 <_puts_r>
 800783e:	bf00      	nop
 8007840:	20000038 	.word	0x20000038

08007844 <nanf>:
 8007844:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800784c <nanf+0x8>
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	7fc00000 	.word	0x7fc00000

08007850 <siprintf>:
 8007850:	b40e      	push	{r1, r2, r3}
 8007852:	b500      	push	{lr}
 8007854:	b09c      	sub	sp, #112	; 0x70
 8007856:	ab1d      	add	r3, sp, #116	; 0x74
 8007858:	9002      	str	r0, [sp, #8]
 800785a:	9006      	str	r0, [sp, #24]
 800785c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007860:	4809      	ldr	r0, [pc, #36]	; (8007888 <siprintf+0x38>)
 8007862:	9107      	str	r1, [sp, #28]
 8007864:	9104      	str	r1, [sp, #16]
 8007866:	4909      	ldr	r1, [pc, #36]	; (800788c <siprintf+0x3c>)
 8007868:	f853 2b04 	ldr.w	r2, [r3], #4
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	6800      	ldr	r0, [r0, #0]
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	a902      	add	r1, sp, #8
 8007874:	f003 fa86 	bl	800ad84 <_svfiprintf_r>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	b01c      	add	sp, #112	; 0x70
 8007880:	f85d eb04 	ldr.w	lr, [sp], #4
 8007884:	b003      	add	sp, #12
 8007886:	4770      	bx	lr
 8007888:	20000038 	.word	0x20000038
 800788c:	ffff0208 	.word	0xffff0208

08007890 <siscanf>:
 8007890:	b40e      	push	{r1, r2, r3}
 8007892:	b510      	push	{r4, lr}
 8007894:	b09f      	sub	sp, #124	; 0x7c
 8007896:	ac21      	add	r4, sp, #132	; 0x84
 8007898:	f44f 7101 	mov.w	r1, #516	; 0x204
 800789c:	f854 2b04 	ldr.w	r2, [r4], #4
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80078a6:	9004      	str	r0, [sp, #16]
 80078a8:	9008      	str	r0, [sp, #32]
 80078aa:	f7f8 fc91 	bl	80001d0 <strlen>
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <siscanf+0x50>)
 80078b0:	9005      	str	r0, [sp, #20]
 80078b2:	9009      	str	r0, [sp, #36]	; 0x24
 80078b4:	930d      	str	r3, [sp, #52]	; 0x34
 80078b6:	480b      	ldr	r0, [pc, #44]	; (80078e4 <siscanf+0x54>)
 80078b8:	9a01      	ldr	r2, [sp, #4]
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	9403      	str	r4, [sp, #12]
 80078be:	2300      	movs	r3, #0
 80078c0:	9311      	str	r3, [sp, #68]	; 0x44
 80078c2:	9316      	str	r3, [sp, #88]	; 0x58
 80078c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80078cc:	a904      	add	r1, sp, #16
 80078ce:	4623      	mov	r3, r4
 80078d0:	f003 fbb2 	bl	800b038 <__ssvfiscanf_r>
 80078d4:	b01f      	add	sp, #124	; 0x7c
 80078d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078da:	b003      	add	sp, #12
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	0800790b 	.word	0x0800790b
 80078e4:	20000038 	.word	0x20000038

080078e8 <__sread>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	460c      	mov	r4, r1
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	f003 ffc6 	bl	800b880 <_read_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	bfab      	itete	ge
 80078f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078fa:	89a3      	ldrhlt	r3, [r4, #12]
 80078fc:	181b      	addge	r3, r3, r0
 80078fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007902:	bfac      	ite	ge
 8007904:	6563      	strge	r3, [r4, #84]	; 0x54
 8007906:	81a3      	strhlt	r3, [r4, #12]
 8007908:	bd10      	pop	{r4, pc}

0800790a <__seofread>:
 800790a:	2000      	movs	r0, #0
 800790c:	4770      	bx	lr

0800790e <__swrite>:
 800790e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007912:	461f      	mov	r7, r3
 8007914:	898b      	ldrh	r3, [r1, #12]
 8007916:	05db      	lsls	r3, r3, #23
 8007918:	4605      	mov	r5, r0
 800791a:	460c      	mov	r4, r1
 800791c:	4616      	mov	r6, r2
 800791e:	d505      	bpl.n	800792c <__swrite+0x1e>
 8007920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007924:	2302      	movs	r3, #2
 8007926:	2200      	movs	r2, #0
 8007928:	f002 fb86 	bl	800a038 <_lseek_r>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	4632      	mov	r2, r6
 800793a:	463b      	mov	r3, r7
 800793c:	4628      	mov	r0, r5
 800793e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007942:	f000 bf3f 	b.w	80087c4 <_write_r>

08007946 <__sseek>:
 8007946:	b510      	push	{r4, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794e:	f002 fb73 	bl	800a038 <_lseek_r>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	bf15      	itete	ne
 8007958:	6560      	strne	r0, [r4, #84]	; 0x54
 800795a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800795e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007962:	81a3      	strheq	r3, [r4, #12]
 8007964:	bf18      	it	ne
 8007966:	81a3      	strhne	r3, [r4, #12]
 8007968:	bd10      	pop	{r4, pc}

0800796a <__sclose>:
 800796a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796e:	f000 bfa9 	b.w	80088c4 <_close_r>

08007972 <strncmp>:
 8007972:	b510      	push	{r4, lr}
 8007974:	b17a      	cbz	r2, 8007996 <strncmp+0x24>
 8007976:	4603      	mov	r3, r0
 8007978:	3901      	subs	r1, #1
 800797a:	1884      	adds	r4, r0, r2
 800797c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007980:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007984:	4290      	cmp	r0, r2
 8007986:	d101      	bne.n	800798c <strncmp+0x1a>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d101      	bne.n	8007990 <strncmp+0x1e>
 800798c:	1a80      	subs	r0, r0, r2
 800798e:	bd10      	pop	{r4, pc}
 8007990:	2800      	cmp	r0, #0
 8007992:	d1f3      	bne.n	800797c <strncmp+0xa>
 8007994:	e7fa      	b.n	800798c <strncmp+0x1a>
 8007996:	4610      	mov	r0, r2
 8007998:	e7f9      	b.n	800798e <strncmp+0x1c>

0800799a <strstr>:
 800799a:	780a      	ldrb	r2, [r1, #0]
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	b96a      	cbnz	r2, 80079bc <strstr+0x22>
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d109      	bne.n	80079ba <strstr+0x20>
 80079a6:	460c      	mov	r4, r1
 80079a8:	4605      	mov	r5, r0
 80079aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0f6      	beq.n	80079a0 <strstr+0x6>
 80079b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80079b6:	429e      	cmp	r6, r3
 80079b8:	d0f7      	beq.n	80079aa <strstr+0x10>
 80079ba:	3001      	adds	r0, #1
 80079bc:	7803      	ldrb	r3, [r0, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1ef      	bne.n	80079a2 <strstr+0x8>
 80079c2:	4618      	mov	r0, r3
 80079c4:	e7ec      	b.n	80079a0 <strstr+0x6>

080079c6 <sulp>:
 80079c6:	b570      	push	{r4, r5, r6, lr}
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	ec45 4b10 	vmov	d0, r4, r5
 80079d0:	4616      	mov	r6, r2
 80079d2:	f002 ff35 	bl	800a840 <__ulp>
 80079d6:	ec51 0b10 	vmov	r0, r1, d0
 80079da:	b17e      	cbz	r6, 80079fc <sulp+0x36>
 80079dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd09      	ble.n	80079fc <sulp+0x36>
 80079e8:	051b      	lsls	r3, r3, #20
 80079ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079ee:	2400      	movs	r4, #0
 80079f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079f4:	4622      	mov	r2, r4
 80079f6:	462b      	mov	r3, r5
 80079f8:	f7f8 fdfe 	bl	80005f8 <__aeabi_dmul>
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a00 <_strtod_l>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	b09d      	sub	sp, #116	; 0x74
 8007a0a:	461f      	mov	r7, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9318      	str	r3, [sp, #96]	; 0x60
 8007a10:	4ba2      	ldr	r3, [pc, #648]	; (8007c9c <_strtod_l+0x29c>)
 8007a12:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	4688      	mov	r8, r1
 8007a1e:	f7f8 fbd7 	bl	80001d0 <strlen>
 8007a22:	f04f 0a00 	mov.w	sl, #0
 8007a26:	4605      	mov	r5, r0
 8007a28:	f04f 0b00 	mov.w	fp, #0
 8007a2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	2a2b      	cmp	r2, #43	; 0x2b
 8007a36:	d04e      	beq.n	8007ad6 <_strtod_l+0xd6>
 8007a38:	d83b      	bhi.n	8007ab2 <_strtod_l+0xb2>
 8007a3a:	2a0d      	cmp	r2, #13
 8007a3c:	d834      	bhi.n	8007aa8 <_strtod_l+0xa8>
 8007a3e:	2a08      	cmp	r2, #8
 8007a40:	d834      	bhi.n	8007aac <_strtod_l+0xac>
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d03e      	beq.n	8007ac4 <_strtod_l+0xc4>
 8007a46:	2300      	movs	r3, #0
 8007a48:	930a      	str	r3, [sp, #40]	; 0x28
 8007a4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a4c:	7833      	ldrb	r3, [r6, #0]
 8007a4e:	2b30      	cmp	r3, #48	; 0x30
 8007a50:	f040 80b0 	bne.w	8007bb4 <_strtod_l+0x1b4>
 8007a54:	7873      	ldrb	r3, [r6, #1]
 8007a56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a5a:	2b58      	cmp	r3, #88	; 0x58
 8007a5c:	d168      	bne.n	8007b30 <_strtod_l+0x130>
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	ab18      	add	r3, sp, #96	; 0x60
 8007a64:	9702      	str	r7, [sp, #8]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4a8d      	ldr	r2, [pc, #564]	; (8007ca0 <_strtod_l+0x2a0>)
 8007a6a:	ab19      	add	r3, sp, #100	; 0x64
 8007a6c:	a917      	add	r1, sp, #92	; 0x5c
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f001 ffd2 	bl	8009a18 <__gethex>
 8007a74:	f010 0707 	ands.w	r7, r0, #7
 8007a78:	4605      	mov	r5, r0
 8007a7a:	d005      	beq.n	8007a88 <_strtod_l+0x88>
 8007a7c:	2f06      	cmp	r7, #6
 8007a7e:	d12c      	bne.n	8007ada <_strtod_l+0xda>
 8007a80:	3601      	adds	r6, #1
 8007a82:	2300      	movs	r3, #0
 8007a84:	9617      	str	r6, [sp, #92]	; 0x5c
 8007a86:	930a      	str	r3, [sp, #40]	; 0x28
 8007a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f040 8590 	bne.w	80085b0 <_strtod_l+0xbb0>
 8007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a92:	b1eb      	cbz	r3, 8007ad0 <_strtod_l+0xd0>
 8007a94:	4652      	mov	r2, sl
 8007a96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a9a:	ec43 2b10 	vmov	d0, r2, r3
 8007a9e:	b01d      	add	sp, #116	; 0x74
 8007aa0:	ecbd 8b02 	vpop	{d8}
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	2a20      	cmp	r2, #32
 8007aaa:	d1cc      	bne.n	8007a46 <_strtod_l+0x46>
 8007aac:	3301      	adds	r3, #1
 8007aae:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ab0:	e7be      	b.n	8007a30 <_strtod_l+0x30>
 8007ab2:	2a2d      	cmp	r2, #45	; 0x2d
 8007ab4:	d1c7      	bne.n	8007a46 <_strtod_l+0x46>
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1c2      	bne.n	8007a4a <_strtod_l+0x4a>
 8007ac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ac6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 856e 	bne.w	80085ac <_strtod_l+0xbac>
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	465b      	mov	r3, fp
 8007ad4:	e7e1      	b.n	8007a9a <_strtod_l+0x9a>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	e7ee      	b.n	8007ab8 <_strtod_l+0xb8>
 8007ada:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007adc:	b13a      	cbz	r2, 8007aee <_strtod_l+0xee>
 8007ade:	2135      	movs	r1, #53	; 0x35
 8007ae0:	a81a      	add	r0, sp, #104	; 0x68
 8007ae2:	f002 ffb8 	bl	800aa56 <__copybits>
 8007ae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f002 fb77 	bl	800a1dc <_Bfree>
 8007aee:	3f01      	subs	r7, #1
 8007af0:	2f04      	cmp	r7, #4
 8007af2:	d806      	bhi.n	8007b02 <_strtod_l+0x102>
 8007af4:	e8df f007 	tbb	[pc, r7]
 8007af8:	1714030a 	.word	0x1714030a
 8007afc:	0a          	.byte	0x0a
 8007afd:	00          	.byte	0x00
 8007afe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b02:	0728      	lsls	r0, r5, #28
 8007b04:	d5c0      	bpl.n	8007a88 <_strtod_l+0x88>
 8007b06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b0a:	e7bd      	b.n	8007a88 <_strtod_l+0x88>
 8007b0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b1e:	e7f0      	b.n	8007b02 <_strtod_l+0x102>
 8007b20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007ca4 <_strtod_l+0x2a4>
 8007b24:	e7ed      	b.n	8007b02 <_strtod_l+0x102>
 8007b26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b2a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b2e:	e7e8      	b.n	8007b02 <_strtod_l+0x102>
 8007b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b30      	cmp	r3, #48	; 0x30
 8007b3a:	d0f9      	beq.n	8007b30 <_strtod_l+0x130>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0a3      	beq.n	8007a88 <_strtod_l+0x88>
 8007b40:	2301      	movs	r3, #1
 8007b42:	f04f 0900 	mov.w	r9, #0
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b4a:	9308      	str	r3, [sp, #32]
 8007b4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b50:	464f      	mov	r7, r9
 8007b52:	220a      	movs	r2, #10
 8007b54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b56:	7806      	ldrb	r6, [r0, #0]
 8007b58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b5c:	b2d9      	uxtb	r1, r3
 8007b5e:	2909      	cmp	r1, #9
 8007b60:	d92a      	bls.n	8007bb8 <_strtod_l+0x1b8>
 8007b62:	9905      	ldr	r1, [sp, #20]
 8007b64:	462a      	mov	r2, r5
 8007b66:	f7ff ff04 	bl	8007972 <strncmp>
 8007b6a:	b398      	cbz	r0, 8007bd4 <_strtod_l+0x1d4>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4632      	mov	r2, r6
 8007b70:	463d      	mov	r5, r7
 8007b72:	9005      	str	r0, [sp, #20]
 8007b74:	4603      	mov	r3, r0
 8007b76:	2a65      	cmp	r2, #101	; 0x65
 8007b78:	d001      	beq.n	8007b7e <_strtod_l+0x17e>
 8007b7a:	2a45      	cmp	r2, #69	; 0x45
 8007b7c:	d118      	bne.n	8007bb0 <_strtod_l+0x1b0>
 8007b7e:	b91d      	cbnz	r5, 8007b88 <_strtod_l+0x188>
 8007b80:	9a04      	ldr	r2, [sp, #16]
 8007b82:	4302      	orrs	r2, r0
 8007b84:	d09e      	beq.n	8007ac4 <_strtod_l+0xc4>
 8007b86:	2500      	movs	r5, #0
 8007b88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007b8c:	f108 0201 	add.w	r2, r8, #1
 8007b90:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007b96:	2a2b      	cmp	r2, #43	; 0x2b
 8007b98:	d075      	beq.n	8007c86 <_strtod_l+0x286>
 8007b9a:	2a2d      	cmp	r2, #45	; 0x2d
 8007b9c:	d07b      	beq.n	8007c96 <_strtod_l+0x296>
 8007b9e:	f04f 0c00 	mov.w	ip, #0
 8007ba2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ba6:	2909      	cmp	r1, #9
 8007ba8:	f240 8082 	bls.w	8007cb0 <_strtod_l+0x2b0>
 8007bac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	e09d      	b.n	8007cf0 <_strtod_l+0x2f0>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e7c4      	b.n	8007b42 <_strtod_l+0x142>
 8007bb8:	2f08      	cmp	r7, #8
 8007bba:	bfd8      	it	le
 8007bbc:	9907      	ldrle	r1, [sp, #28]
 8007bbe:	f100 0001 	add.w	r0, r0, #1
 8007bc2:	bfda      	itte	le
 8007bc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bc8:	9307      	strle	r3, [sp, #28]
 8007bca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007bce:	3701      	adds	r7, #1
 8007bd0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007bd2:	e7bf      	b.n	8007b54 <_strtod_l+0x154>
 8007bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bd6:	195a      	adds	r2, r3, r5
 8007bd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bda:	5d5a      	ldrb	r2, [r3, r5]
 8007bdc:	2f00      	cmp	r7, #0
 8007bde:	d037      	beq.n	8007c50 <_strtod_l+0x250>
 8007be0:	9005      	str	r0, [sp, #20]
 8007be2:	463d      	mov	r5, r7
 8007be4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007be8:	2b09      	cmp	r3, #9
 8007bea:	d912      	bls.n	8007c12 <_strtod_l+0x212>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e7c2      	b.n	8007b76 <_strtod_l+0x176>
 8007bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bf6:	785a      	ldrb	r2, [r3, #1]
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	2a30      	cmp	r2, #48	; 0x30
 8007bfc:	d0f8      	beq.n	8007bf0 <_strtod_l+0x1f0>
 8007bfe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	f200 84d9 	bhi.w	80085ba <_strtod_l+0xbba>
 8007c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c0a:	9005      	str	r0, [sp, #20]
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	9308      	str	r3, [sp, #32]
 8007c10:	4605      	mov	r5, r0
 8007c12:	3a30      	subs	r2, #48	; 0x30
 8007c14:	f100 0301 	add.w	r3, r0, #1
 8007c18:	d014      	beq.n	8007c44 <_strtod_l+0x244>
 8007c1a:	9905      	ldr	r1, [sp, #20]
 8007c1c:	4419      	add	r1, r3
 8007c1e:	9105      	str	r1, [sp, #20]
 8007c20:	462b      	mov	r3, r5
 8007c22:	eb00 0e05 	add.w	lr, r0, r5
 8007c26:	210a      	movs	r1, #10
 8007c28:	4573      	cmp	r3, lr
 8007c2a:	d113      	bne.n	8007c54 <_strtod_l+0x254>
 8007c2c:	182b      	adds	r3, r5, r0
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	f105 0501 	add.w	r5, r5, #1
 8007c34:	4405      	add	r5, r0
 8007c36:	dc1c      	bgt.n	8007c72 <_strtod_l+0x272>
 8007c38:	9907      	ldr	r1, [sp, #28]
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	fb03 2301 	mla	r3, r3, r1, r2
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c46:	1c51      	adds	r1, r2, #1
 8007c48:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c4a:	7852      	ldrb	r2, [r2, #1]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	e7c9      	b.n	8007be4 <_strtod_l+0x1e4>
 8007c50:	4638      	mov	r0, r7
 8007c52:	e7d2      	b.n	8007bfa <_strtod_l+0x1fa>
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	dc04      	bgt.n	8007c62 <_strtod_l+0x262>
 8007c58:	9e07      	ldr	r6, [sp, #28]
 8007c5a:	434e      	muls	r6, r1
 8007c5c:	9607      	str	r6, [sp, #28]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	e7e2      	b.n	8007c28 <_strtod_l+0x228>
 8007c62:	f103 0c01 	add.w	ip, r3, #1
 8007c66:	f1bc 0f10 	cmp.w	ip, #16
 8007c6a:	bfd8      	it	le
 8007c6c:	fb01 f909 	mulle.w	r9, r1, r9
 8007c70:	e7f5      	b.n	8007c5e <_strtod_l+0x25e>
 8007c72:	2d10      	cmp	r5, #16
 8007c74:	bfdc      	itt	le
 8007c76:	230a      	movle	r3, #10
 8007c78:	fb03 2909 	mlale	r9, r3, r9, r2
 8007c7c:	e7e1      	b.n	8007c42 <_strtod_l+0x242>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9305      	str	r3, [sp, #20]
 8007c82:	2301      	movs	r3, #1
 8007c84:	e77c      	b.n	8007b80 <_strtod_l+0x180>
 8007c86:	f04f 0c00 	mov.w	ip, #0
 8007c8a:	f108 0202 	add.w	r2, r8, #2
 8007c8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007c94:	e785      	b.n	8007ba2 <_strtod_l+0x1a2>
 8007c96:	f04f 0c01 	mov.w	ip, #1
 8007c9a:	e7f6      	b.n	8007c8a <_strtod_l+0x28a>
 8007c9c:	0800c584 	.word	0x0800c584
 8007ca0:	0800c2d8 	.word	0x0800c2d8
 8007ca4:	7ff00000 	.word	0x7ff00000
 8007ca8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007caa:	1c51      	adds	r1, r2, #1
 8007cac:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cae:	7852      	ldrb	r2, [r2, #1]
 8007cb0:	2a30      	cmp	r2, #48	; 0x30
 8007cb2:	d0f9      	beq.n	8007ca8 <_strtod_l+0x2a8>
 8007cb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cb8:	2908      	cmp	r1, #8
 8007cba:	f63f af79 	bhi.w	8007bb0 <_strtod_l+0x1b0>
 8007cbe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cc4:	9206      	str	r2, [sp, #24]
 8007cc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cc8:	1c51      	adds	r1, r2, #1
 8007cca:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ccc:	7852      	ldrb	r2, [r2, #1]
 8007cce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007cd2:	2e09      	cmp	r6, #9
 8007cd4:	d937      	bls.n	8007d46 <_strtod_l+0x346>
 8007cd6:	9e06      	ldr	r6, [sp, #24]
 8007cd8:	1b89      	subs	r1, r1, r6
 8007cda:	2908      	cmp	r1, #8
 8007cdc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007ce0:	dc02      	bgt.n	8007ce8 <_strtod_l+0x2e8>
 8007ce2:	4576      	cmp	r6, lr
 8007ce4:	bfa8      	it	ge
 8007ce6:	4676      	movge	r6, lr
 8007ce8:	f1bc 0f00 	cmp.w	ip, #0
 8007cec:	d000      	beq.n	8007cf0 <_strtod_l+0x2f0>
 8007cee:	4276      	negs	r6, r6
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	d14d      	bne.n	8007d90 <_strtod_l+0x390>
 8007cf4:	9904      	ldr	r1, [sp, #16]
 8007cf6:	4301      	orrs	r1, r0
 8007cf8:	f47f aec6 	bne.w	8007a88 <_strtod_l+0x88>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f47f aee1 	bne.w	8007ac4 <_strtod_l+0xc4>
 8007d02:	2a69      	cmp	r2, #105	; 0x69
 8007d04:	d027      	beq.n	8007d56 <_strtod_l+0x356>
 8007d06:	dc24      	bgt.n	8007d52 <_strtod_l+0x352>
 8007d08:	2a49      	cmp	r2, #73	; 0x49
 8007d0a:	d024      	beq.n	8007d56 <_strtod_l+0x356>
 8007d0c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d0e:	f47f aed9 	bne.w	8007ac4 <_strtod_l+0xc4>
 8007d12:	499f      	ldr	r1, [pc, #636]	; (8007f90 <_strtod_l+0x590>)
 8007d14:	a817      	add	r0, sp, #92	; 0x5c
 8007d16:	f002 f8d7 	bl	8009ec8 <__match>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f43f aed2 	beq.w	8007ac4 <_strtod_l+0xc4>
 8007d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b28      	cmp	r3, #40	; 0x28
 8007d26:	d12d      	bne.n	8007d84 <_strtod_l+0x384>
 8007d28:	499a      	ldr	r1, [pc, #616]	; (8007f94 <_strtod_l+0x594>)
 8007d2a:	aa1a      	add	r2, sp, #104	; 0x68
 8007d2c:	a817      	add	r0, sp, #92	; 0x5c
 8007d2e:	f002 f8df 	bl	8009ef0 <__hexnan>
 8007d32:	2805      	cmp	r0, #5
 8007d34:	d126      	bne.n	8007d84 <_strtod_l+0x384>
 8007d36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d44:	e6a0      	b.n	8007a88 <_strtod_l+0x88>
 8007d46:	210a      	movs	r1, #10
 8007d48:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d50:	e7b9      	b.n	8007cc6 <_strtod_l+0x2c6>
 8007d52:	2a6e      	cmp	r2, #110	; 0x6e
 8007d54:	e7db      	b.n	8007d0e <_strtod_l+0x30e>
 8007d56:	4990      	ldr	r1, [pc, #576]	; (8007f98 <_strtod_l+0x598>)
 8007d58:	a817      	add	r0, sp, #92	; 0x5c
 8007d5a:	f002 f8b5 	bl	8009ec8 <__match>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f43f aeb0 	beq.w	8007ac4 <_strtod_l+0xc4>
 8007d64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d66:	498d      	ldr	r1, [pc, #564]	; (8007f9c <_strtod_l+0x59c>)
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	a817      	add	r0, sp, #92	; 0x5c
 8007d6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d6e:	f002 f8ab 	bl	8009ec8 <__match>
 8007d72:	b910      	cbnz	r0, 8007d7a <_strtod_l+0x37a>
 8007d74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d76:	3301      	adds	r3, #1
 8007d78:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007fac <_strtod_l+0x5ac>
 8007d7e:	f04f 0a00 	mov.w	sl, #0
 8007d82:	e681      	b.n	8007a88 <_strtod_l+0x88>
 8007d84:	4886      	ldr	r0, [pc, #536]	; (8007fa0 <_strtod_l+0x5a0>)
 8007d86:	f003 fd8f 	bl	800b8a8 <nan>
 8007d8a:	ec5b ab10 	vmov	sl, fp, d0
 8007d8e:	e67b      	b.n	8007a88 <_strtod_l+0x88>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	9807      	ldr	r0, [sp, #28]
 8007d94:	1af3      	subs	r3, r6, r3
 8007d96:	2f00      	cmp	r7, #0
 8007d98:	bf08      	it	eq
 8007d9a:	462f      	moveq	r7, r5
 8007d9c:	2d10      	cmp	r5, #16
 8007d9e:	9306      	str	r3, [sp, #24]
 8007da0:	46a8      	mov	r8, r5
 8007da2:	bfa8      	it	ge
 8007da4:	f04f 0810 	movge.w	r8, #16
 8007da8:	f7f8 fbac 	bl	8000504 <__aeabi_ui2d>
 8007dac:	2d09      	cmp	r5, #9
 8007dae:	4682      	mov	sl, r0
 8007db0:	468b      	mov	fp, r1
 8007db2:	dd13      	ble.n	8007ddc <_strtod_l+0x3dc>
 8007db4:	4b7b      	ldr	r3, [pc, #492]	; (8007fa4 <_strtod_l+0x5a4>)
 8007db6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dbe:	f7f8 fc1b 	bl	80005f8 <__aeabi_dmul>
 8007dc2:	4682      	mov	sl, r0
 8007dc4:	4648      	mov	r0, r9
 8007dc6:	468b      	mov	fp, r1
 8007dc8:	f7f8 fb9c 	bl	8000504 <__aeabi_ui2d>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	4659      	mov	r1, fp
 8007dd4:	f7f8 fa5a 	bl	800028c <__adddf3>
 8007dd8:	4682      	mov	sl, r0
 8007dda:	468b      	mov	fp, r1
 8007ddc:	2d0f      	cmp	r5, #15
 8007dde:	dc38      	bgt.n	8007e52 <_strtod_l+0x452>
 8007de0:	9b06      	ldr	r3, [sp, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f43f ae50 	beq.w	8007a88 <_strtod_l+0x88>
 8007de8:	dd24      	ble.n	8007e34 <_strtod_l+0x434>
 8007dea:	2b16      	cmp	r3, #22
 8007dec:	dc0b      	bgt.n	8007e06 <_strtod_l+0x406>
 8007dee:	496d      	ldr	r1, [pc, #436]	; (8007fa4 <_strtod_l+0x5a4>)
 8007df0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df8:	4652      	mov	r2, sl
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	f7f8 fbfc 	bl	80005f8 <__aeabi_dmul>
 8007e00:	4682      	mov	sl, r0
 8007e02:	468b      	mov	fp, r1
 8007e04:	e640      	b.n	8007a88 <_strtod_l+0x88>
 8007e06:	9a06      	ldr	r2, [sp, #24]
 8007e08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	db20      	blt.n	8007e52 <_strtod_l+0x452>
 8007e10:	4c64      	ldr	r4, [pc, #400]	; (8007fa4 <_strtod_l+0x5a4>)
 8007e12:	f1c5 050f 	rsb	r5, r5, #15
 8007e16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e22:	f7f8 fbe9 	bl	80005f8 <__aeabi_dmul>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	1b5d      	subs	r5, r3, r5
 8007e2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e32:	e7e3      	b.n	8007dfc <_strtod_l+0x3fc>
 8007e34:	9b06      	ldr	r3, [sp, #24]
 8007e36:	3316      	adds	r3, #22
 8007e38:	db0b      	blt.n	8007e52 <_strtod_l+0x452>
 8007e3a:	9b05      	ldr	r3, [sp, #20]
 8007e3c:	1b9e      	subs	r6, r3, r6
 8007e3e:	4b59      	ldr	r3, [pc, #356]	; (8007fa4 <_strtod_l+0x5a4>)
 8007e40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e48:	4650      	mov	r0, sl
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f7f8 fcfe 	bl	800084c <__aeabi_ddiv>
 8007e50:	e7d6      	b.n	8007e00 <_strtod_l+0x400>
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	eba5 0808 	sub.w	r8, r5, r8
 8007e58:	4498      	add	r8, r3
 8007e5a:	f1b8 0f00 	cmp.w	r8, #0
 8007e5e:	dd74      	ble.n	8007f4a <_strtod_l+0x54a>
 8007e60:	f018 030f 	ands.w	r3, r8, #15
 8007e64:	d00a      	beq.n	8007e7c <_strtod_l+0x47c>
 8007e66:	494f      	ldr	r1, [pc, #316]	; (8007fa4 <_strtod_l+0x5a4>)
 8007e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	465b      	mov	r3, fp
 8007e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	4682      	mov	sl, r0
 8007e7a:	468b      	mov	fp, r1
 8007e7c:	f038 080f 	bics.w	r8, r8, #15
 8007e80:	d04f      	beq.n	8007f22 <_strtod_l+0x522>
 8007e82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e86:	dd22      	ble.n	8007ece <_strtod_l+0x4ce>
 8007e88:	2500      	movs	r5, #0
 8007e8a:	462e      	mov	r6, r5
 8007e8c:	9507      	str	r5, [sp, #28]
 8007e8e:	9505      	str	r5, [sp, #20]
 8007e90:	2322      	movs	r3, #34	; 0x22
 8007e92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007fac <_strtod_l+0x5ac>
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	f04f 0a00 	mov.w	sl, #0
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f43f adf2 	beq.w	8007a88 <_strtod_l+0x88>
 8007ea4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f002 f998 	bl	800a1dc <_Bfree>
 8007eac:	9905      	ldr	r1, [sp, #20]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f002 f994 	bl	800a1dc <_Bfree>
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f002 f990 	bl	800a1dc <_Bfree>
 8007ebc:	9907      	ldr	r1, [sp, #28]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f002 f98c 	bl	800a1dc <_Bfree>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f002 f988 	bl	800a1dc <_Bfree>
 8007ecc:	e5dc      	b.n	8007a88 <_strtod_l+0x88>
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <_strtod_l+0x5a8>)
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	4699      	mov	r9, r3
 8007ede:	f1b8 0f01 	cmp.w	r8, #1
 8007ee2:	dc21      	bgt.n	8007f28 <_strtod_l+0x528>
 8007ee4:	b10b      	cbz	r3, 8007eea <_strtod_l+0x4ea>
 8007ee6:	4682      	mov	sl, r0
 8007ee8:	468b      	mov	fp, r1
 8007eea:	4b2f      	ldr	r3, [pc, #188]	; (8007fa8 <_strtod_l+0x5a8>)
 8007eec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007ef0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	465b      	mov	r3, fp
 8007ef8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007efc:	f7f8 fb7c 	bl	80005f8 <__aeabi_dmul>
 8007f00:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <_strtod_l+0x5ac>)
 8007f02:	460a      	mov	r2, r1
 8007f04:	400b      	ands	r3, r1
 8007f06:	492a      	ldr	r1, [pc, #168]	; (8007fb0 <_strtod_l+0x5b0>)
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	d8bc      	bhi.n	8007e88 <_strtod_l+0x488>
 8007f0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f12:	428b      	cmp	r3, r1
 8007f14:	bf86      	itte	hi
 8007f16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007fb4 <_strtod_l+0x5b4>
 8007f1a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f22:	2300      	movs	r3, #0
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	e084      	b.n	8008032 <_strtod_l+0x632>
 8007f28:	f018 0f01 	tst.w	r8, #1
 8007f2c:	d005      	beq.n	8007f3a <_strtod_l+0x53a>
 8007f2e:	9b04      	ldr	r3, [sp, #16]
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	9a04      	ldr	r2, [sp, #16]
 8007f3c:	3208      	adds	r2, #8
 8007f3e:	f109 0901 	add.w	r9, r9, #1
 8007f42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f46:	9204      	str	r2, [sp, #16]
 8007f48:	e7c9      	b.n	8007ede <_strtod_l+0x4de>
 8007f4a:	d0ea      	beq.n	8007f22 <_strtod_l+0x522>
 8007f4c:	f1c8 0800 	rsb	r8, r8, #0
 8007f50:	f018 020f 	ands.w	r2, r8, #15
 8007f54:	d00a      	beq.n	8007f6c <_strtod_l+0x56c>
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <_strtod_l+0x5a4>)
 8007f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	4659      	mov	r1, fp
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fc72 	bl	800084c <__aeabi_ddiv>
 8007f68:	4682      	mov	sl, r0
 8007f6a:	468b      	mov	fp, r1
 8007f6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f70:	d0d7      	beq.n	8007f22 <_strtod_l+0x522>
 8007f72:	f1b8 0f1f 	cmp.w	r8, #31
 8007f76:	dd1f      	ble.n	8007fb8 <_strtod_l+0x5b8>
 8007f78:	2500      	movs	r5, #0
 8007f7a:	462e      	mov	r6, r5
 8007f7c:	9507      	str	r5, [sp, #28]
 8007f7e:	9505      	str	r5, [sp, #20]
 8007f80:	2322      	movs	r3, #34	; 0x22
 8007f82:	f04f 0a00 	mov.w	sl, #0
 8007f86:	f04f 0b00 	mov.w	fp, #0
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	e786      	b.n	8007e9c <_strtod_l+0x49c>
 8007f8e:	bf00      	nop
 8007f90:	0800c2ad 	.word	0x0800c2ad
 8007f94:	0800c2ec 	.word	0x0800c2ec
 8007f98:	0800c2a5 	.word	0x0800c2a5
 8007f9c:	0800c42c 	.word	0x0800c42c
 8007fa0:	0800c75b 	.word	0x0800c75b
 8007fa4:	0800c620 	.word	0x0800c620
 8007fa8:	0800c5f8 	.word	0x0800c5f8
 8007fac:	7ff00000 	.word	0x7ff00000
 8007fb0:	7ca00000 	.word	0x7ca00000
 8007fb4:	7fefffff 	.word	0x7fefffff
 8007fb8:	f018 0310 	ands.w	r3, r8, #16
 8007fbc:	bf18      	it	ne
 8007fbe:	236a      	movne	r3, #106	; 0x6a
 8007fc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008370 <_strtod_l+0x970>
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	4650      	mov	r0, sl
 8007fc8:	4659      	mov	r1, fp
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f018 0f01 	tst.w	r8, #1
 8007fd0:	d004      	beq.n	8007fdc <_strtod_l+0x5dc>
 8007fd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007fd6:	f7f8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007fe0:	f109 0908 	add.w	r9, r9, #8
 8007fe4:	d1f2      	bne.n	8007fcc <_strtod_l+0x5cc>
 8007fe6:	b10b      	cbz	r3, 8007fec <_strtod_l+0x5ec>
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	b1c3      	cbz	r3, 8008022 <_strtod_l+0x622>
 8007ff0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007ff4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	dd11      	ble.n	8008022 <_strtod_l+0x622>
 8007ffe:	2b1f      	cmp	r3, #31
 8008000:	f340 8124 	ble.w	800824c <_strtod_l+0x84c>
 8008004:	2b34      	cmp	r3, #52	; 0x34
 8008006:	bfde      	ittt	le
 8008008:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800800c:	f04f 33ff 	movle.w	r3, #4294967295
 8008010:	fa03 f202 	lslle.w	r2, r3, r2
 8008014:	f04f 0a00 	mov.w	sl, #0
 8008018:	bfcc      	ite	gt
 800801a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800801e:	ea02 0b01 	andle.w	fp, r2, r1
 8008022:	2200      	movs	r2, #0
 8008024:	2300      	movs	r3, #0
 8008026:	4650      	mov	r0, sl
 8008028:	4659      	mov	r1, fp
 800802a:	f7f8 fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800802e:	2800      	cmp	r0, #0
 8008030:	d1a2      	bne.n	8007f78 <_strtod_l+0x578>
 8008032:	9b07      	ldr	r3, [sp, #28]
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	9908      	ldr	r1, [sp, #32]
 8008038:	462b      	mov	r3, r5
 800803a:	463a      	mov	r2, r7
 800803c:	4620      	mov	r0, r4
 800803e:	f002 f935 	bl	800a2ac <__s2b>
 8008042:	9007      	str	r0, [sp, #28]
 8008044:	2800      	cmp	r0, #0
 8008046:	f43f af1f 	beq.w	8007e88 <_strtod_l+0x488>
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	1b9e      	subs	r6, r3, r6
 800804e:	9b06      	ldr	r3, [sp, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	bfb4      	ite	lt
 8008054:	4633      	movlt	r3, r6
 8008056:	2300      	movge	r3, #0
 8008058:	930c      	str	r3, [sp, #48]	; 0x30
 800805a:	9b06      	ldr	r3, [sp, #24]
 800805c:	2500      	movs	r5, #0
 800805e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008062:	9312      	str	r3, [sp, #72]	; 0x48
 8008064:	462e      	mov	r6, r5
 8008066:	9b07      	ldr	r3, [sp, #28]
 8008068:	4620      	mov	r0, r4
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	f002 f876 	bl	800a15c <_Balloc>
 8008070:	9005      	str	r0, [sp, #20]
 8008072:	2800      	cmp	r0, #0
 8008074:	f43f af0c 	beq.w	8007e90 <_strtod_l+0x490>
 8008078:	9b07      	ldr	r3, [sp, #28]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	3202      	adds	r2, #2
 800807e:	f103 010c 	add.w	r1, r3, #12
 8008082:	0092      	lsls	r2, r2, #2
 8008084:	300c      	adds	r0, #12
 8008086:	f7fe fcbf 	bl	8006a08 <memcpy>
 800808a:	ec4b ab10 	vmov	d0, sl, fp
 800808e:	aa1a      	add	r2, sp, #104	; 0x68
 8008090:	a919      	add	r1, sp, #100	; 0x64
 8008092:	4620      	mov	r0, r4
 8008094:	f002 fc50 	bl	800a938 <__d2b>
 8008098:	ec4b ab18 	vmov	d8, sl, fp
 800809c:	9018      	str	r0, [sp, #96]	; 0x60
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f aef6 	beq.w	8007e90 <_strtod_l+0x490>
 80080a4:	2101      	movs	r1, #1
 80080a6:	4620      	mov	r0, r4
 80080a8:	f002 f99a 	bl	800a3e0 <__i2b>
 80080ac:	4606      	mov	r6, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f aeee 	beq.w	8007e90 <_strtod_l+0x490>
 80080b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080b6:	9904      	ldr	r1, [sp, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfab      	itete	ge
 80080bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80080be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80080c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80080c6:	bfac      	ite	ge
 80080c8:	eb03 0902 	addge.w	r9, r3, r2
 80080cc:	1ad7      	sublt	r7, r2, r3
 80080ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080d0:	eba3 0801 	sub.w	r8, r3, r1
 80080d4:	4490      	add	r8, r2
 80080d6:	4ba1      	ldr	r3, [pc, #644]	; (800835c <_strtod_l+0x95c>)
 80080d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80080dc:	4598      	cmp	r8, r3
 80080de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080e2:	f280 80c7 	bge.w	8008274 <_strtod_l+0x874>
 80080e6:	eba3 0308 	sub.w	r3, r3, r8
 80080ea:	2b1f      	cmp	r3, #31
 80080ec:	eba2 0203 	sub.w	r2, r2, r3
 80080f0:	f04f 0101 	mov.w	r1, #1
 80080f4:	f300 80b1 	bgt.w	800825a <_strtod_l+0x85a>
 80080f8:	fa01 f303 	lsl.w	r3, r1, r3
 80080fc:	930d      	str	r3, [sp, #52]	; 0x34
 80080fe:	2300      	movs	r3, #0
 8008100:	9308      	str	r3, [sp, #32]
 8008102:	eb09 0802 	add.w	r8, r9, r2
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	45c1      	cmp	r9, r8
 800810a:	4417      	add	r7, r2
 800810c:	441f      	add	r7, r3
 800810e:	464b      	mov	r3, r9
 8008110:	bfa8      	it	ge
 8008112:	4643      	movge	r3, r8
 8008114:	42bb      	cmp	r3, r7
 8008116:	bfa8      	it	ge
 8008118:	463b      	movge	r3, r7
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfc2      	ittt	gt
 800811e:	eba8 0803 	subgt.w	r8, r8, r3
 8008122:	1aff      	subgt	r7, r7, r3
 8008124:	eba9 0903 	subgt.w	r9, r9, r3
 8008128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800812a:	2b00      	cmp	r3, #0
 800812c:	dd17      	ble.n	800815e <_strtod_l+0x75e>
 800812e:	4631      	mov	r1, r6
 8008130:	461a      	mov	r2, r3
 8008132:	4620      	mov	r0, r4
 8008134:	f002 fa14 	bl	800a560 <__pow5mult>
 8008138:	4606      	mov	r6, r0
 800813a:	2800      	cmp	r0, #0
 800813c:	f43f aea8 	beq.w	8007e90 <_strtod_l+0x490>
 8008140:	4601      	mov	r1, r0
 8008142:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008144:	4620      	mov	r0, r4
 8008146:	f002 f961 	bl	800a40c <__multiply>
 800814a:	900b      	str	r0, [sp, #44]	; 0x2c
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f ae9f 	beq.w	8007e90 <_strtod_l+0x490>
 8008152:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008154:	4620      	mov	r0, r4
 8008156:	f002 f841 	bl	800a1dc <_Bfree>
 800815a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815c:	9318      	str	r3, [sp, #96]	; 0x60
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	f300 808c 	bgt.w	800827e <_strtod_l+0x87e>
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dd08      	ble.n	800817e <_strtod_l+0x77e>
 800816c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800816e:	9905      	ldr	r1, [sp, #20]
 8008170:	4620      	mov	r0, r4
 8008172:	f002 f9f5 	bl	800a560 <__pow5mult>
 8008176:	9005      	str	r0, [sp, #20]
 8008178:	2800      	cmp	r0, #0
 800817a:	f43f ae89 	beq.w	8007e90 <_strtod_l+0x490>
 800817e:	2f00      	cmp	r7, #0
 8008180:	dd08      	ble.n	8008194 <_strtod_l+0x794>
 8008182:	9905      	ldr	r1, [sp, #20]
 8008184:	463a      	mov	r2, r7
 8008186:	4620      	mov	r0, r4
 8008188:	f002 fa44 	bl	800a614 <__lshift>
 800818c:	9005      	str	r0, [sp, #20]
 800818e:	2800      	cmp	r0, #0
 8008190:	f43f ae7e 	beq.w	8007e90 <_strtod_l+0x490>
 8008194:	f1b9 0f00 	cmp.w	r9, #0
 8008198:	dd08      	ble.n	80081ac <_strtod_l+0x7ac>
 800819a:	4631      	mov	r1, r6
 800819c:	464a      	mov	r2, r9
 800819e:	4620      	mov	r0, r4
 80081a0:	f002 fa38 	bl	800a614 <__lshift>
 80081a4:	4606      	mov	r6, r0
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f43f ae72 	beq.w	8007e90 <_strtod_l+0x490>
 80081ac:	9a05      	ldr	r2, [sp, #20]
 80081ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081b0:	4620      	mov	r0, r4
 80081b2:	f002 fabb 	bl	800a72c <__mdiff>
 80081b6:	4605      	mov	r5, r0
 80081b8:	2800      	cmp	r0, #0
 80081ba:	f43f ae69 	beq.w	8007e90 <_strtod_l+0x490>
 80081be:	68c3      	ldr	r3, [r0, #12]
 80081c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081c2:	2300      	movs	r3, #0
 80081c4:	60c3      	str	r3, [r0, #12]
 80081c6:	4631      	mov	r1, r6
 80081c8:	f002 fa94 	bl	800a6f4 <__mcmp>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	da60      	bge.n	8008292 <_strtod_l+0x892>
 80081d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d2:	ea53 030a 	orrs.w	r3, r3, sl
 80081d6:	f040 8082 	bne.w	80082de <_strtod_l+0x8de>
 80081da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d17d      	bne.n	80082de <_strtod_l+0x8de>
 80081e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081e6:	0d1b      	lsrs	r3, r3, #20
 80081e8:	051b      	lsls	r3, r3, #20
 80081ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081ee:	d976      	bls.n	80082de <_strtod_l+0x8de>
 80081f0:	696b      	ldr	r3, [r5, #20]
 80081f2:	b913      	cbnz	r3, 80081fa <_strtod_l+0x7fa>
 80081f4:	692b      	ldr	r3, [r5, #16]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	dd71      	ble.n	80082de <_strtod_l+0x8de>
 80081fa:	4629      	mov	r1, r5
 80081fc:	2201      	movs	r2, #1
 80081fe:	4620      	mov	r0, r4
 8008200:	f002 fa08 	bl	800a614 <__lshift>
 8008204:	4631      	mov	r1, r6
 8008206:	4605      	mov	r5, r0
 8008208:	f002 fa74 	bl	800a6f4 <__mcmp>
 800820c:	2800      	cmp	r0, #0
 800820e:	dd66      	ble.n	80082de <_strtod_l+0x8de>
 8008210:	9904      	ldr	r1, [sp, #16]
 8008212:	4a53      	ldr	r2, [pc, #332]	; (8008360 <_strtod_l+0x960>)
 8008214:	465b      	mov	r3, fp
 8008216:	2900      	cmp	r1, #0
 8008218:	f000 8081 	beq.w	800831e <_strtod_l+0x91e>
 800821c:	ea02 010b 	and.w	r1, r2, fp
 8008220:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008224:	dc7b      	bgt.n	800831e <_strtod_l+0x91e>
 8008226:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800822a:	f77f aea9 	ble.w	8007f80 <_strtod_l+0x580>
 800822e:	4b4d      	ldr	r3, [pc, #308]	; (8008364 <_strtod_l+0x964>)
 8008230:	4650      	mov	r0, sl
 8008232:	4659      	mov	r1, fp
 8008234:	2200      	movs	r2, #0
 8008236:	f7f8 f9df 	bl	80005f8 <__aeabi_dmul>
 800823a:	460b      	mov	r3, r1
 800823c:	4303      	orrs	r3, r0
 800823e:	bf08      	it	eq
 8008240:	2322      	moveq	r3, #34	; 0x22
 8008242:	4682      	mov	sl, r0
 8008244:	468b      	mov	fp, r1
 8008246:	bf08      	it	eq
 8008248:	6023      	streq	r3, [r4, #0]
 800824a:	e62b      	b.n	8007ea4 <_strtod_l+0x4a4>
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	ea03 0a0a 	and.w	sl, r3, sl
 8008258:	e6e3      	b.n	8008022 <_strtod_l+0x622>
 800825a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800825e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008262:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008266:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800826a:	fa01 f308 	lsl.w	r3, r1, r8
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	910d      	str	r1, [sp, #52]	; 0x34
 8008272:	e746      	b.n	8008102 <_strtod_l+0x702>
 8008274:	2300      	movs	r3, #0
 8008276:	9308      	str	r3, [sp, #32]
 8008278:	2301      	movs	r3, #1
 800827a:	930d      	str	r3, [sp, #52]	; 0x34
 800827c:	e741      	b.n	8008102 <_strtod_l+0x702>
 800827e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008280:	4642      	mov	r2, r8
 8008282:	4620      	mov	r0, r4
 8008284:	f002 f9c6 	bl	800a614 <__lshift>
 8008288:	9018      	str	r0, [sp, #96]	; 0x60
 800828a:	2800      	cmp	r0, #0
 800828c:	f47f af6b 	bne.w	8008166 <_strtod_l+0x766>
 8008290:	e5fe      	b.n	8007e90 <_strtod_l+0x490>
 8008292:	465f      	mov	r7, fp
 8008294:	d16e      	bne.n	8008374 <_strtod_l+0x974>
 8008296:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800829c:	b342      	cbz	r2, 80082f0 <_strtod_l+0x8f0>
 800829e:	4a32      	ldr	r2, [pc, #200]	; (8008368 <_strtod_l+0x968>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d128      	bne.n	80082f6 <_strtod_l+0x8f6>
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	4651      	mov	r1, sl
 80082a8:	b1eb      	cbz	r3, 80082e6 <_strtod_l+0x8e6>
 80082aa:	4b2d      	ldr	r3, [pc, #180]	; (8008360 <_strtod_l+0x960>)
 80082ac:	403b      	ands	r3, r7
 80082ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	d819      	bhi.n	80082ec <_strtod_l+0x8ec>
 80082b8:	0d1b      	lsrs	r3, r3, #20
 80082ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d117      	bne.n	80082f6 <_strtod_l+0x8f6>
 80082c6:	4b29      	ldr	r3, [pc, #164]	; (800836c <_strtod_l+0x96c>)
 80082c8:	429f      	cmp	r7, r3
 80082ca:	d102      	bne.n	80082d2 <_strtod_l+0x8d2>
 80082cc:	3101      	adds	r1, #1
 80082ce:	f43f addf 	beq.w	8007e90 <_strtod_l+0x490>
 80082d2:	4b23      	ldr	r3, [pc, #140]	; (8008360 <_strtod_l+0x960>)
 80082d4:	403b      	ands	r3, r7
 80082d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80082da:	f04f 0a00 	mov.w	sl, #0
 80082de:	9b04      	ldr	r3, [sp, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1a4      	bne.n	800822e <_strtod_l+0x82e>
 80082e4:	e5de      	b.n	8007ea4 <_strtod_l+0x4a4>
 80082e6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ea:	e7ea      	b.n	80082c2 <_strtod_l+0x8c2>
 80082ec:	4613      	mov	r3, r2
 80082ee:	e7e8      	b.n	80082c2 <_strtod_l+0x8c2>
 80082f0:	ea53 030a 	orrs.w	r3, r3, sl
 80082f4:	d08c      	beq.n	8008210 <_strtod_l+0x810>
 80082f6:	9b08      	ldr	r3, [sp, #32]
 80082f8:	b1db      	cbz	r3, 8008332 <_strtod_l+0x932>
 80082fa:	423b      	tst	r3, r7
 80082fc:	d0ef      	beq.n	80082de <_strtod_l+0x8de>
 80082fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008300:	9a04      	ldr	r2, [sp, #16]
 8008302:	4650      	mov	r0, sl
 8008304:	4659      	mov	r1, fp
 8008306:	b1c3      	cbz	r3, 800833a <_strtod_l+0x93a>
 8008308:	f7ff fb5d 	bl	80079c6 <sulp>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	ec51 0b18 	vmov	r0, r1, d8
 8008314:	f7f7 ffba 	bl	800028c <__adddf3>
 8008318:	4682      	mov	sl, r0
 800831a:	468b      	mov	fp, r1
 800831c:	e7df      	b.n	80082de <_strtod_l+0x8de>
 800831e:	4013      	ands	r3, r2
 8008320:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008324:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008328:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800832c:	f04f 3aff 	mov.w	sl, #4294967295
 8008330:	e7d5      	b.n	80082de <_strtod_l+0x8de>
 8008332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008334:	ea13 0f0a 	tst.w	r3, sl
 8008338:	e7e0      	b.n	80082fc <_strtod_l+0x8fc>
 800833a:	f7ff fb44 	bl	80079c6 <sulp>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	ec51 0b18 	vmov	r0, r1, d8
 8008346:	f7f7 ff9f 	bl	8000288 <__aeabi_dsub>
 800834a:	2200      	movs	r2, #0
 800834c:	2300      	movs	r3, #0
 800834e:	4682      	mov	sl, r0
 8008350:	468b      	mov	fp, r1
 8008352:	f7f8 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008356:	2800      	cmp	r0, #0
 8008358:	d0c1      	beq.n	80082de <_strtod_l+0x8de>
 800835a:	e611      	b.n	8007f80 <_strtod_l+0x580>
 800835c:	fffffc02 	.word	0xfffffc02
 8008360:	7ff00000 	.word	0x7ff00000
 8008364:	39500000 	.word	0x39500000
 8008368:	000fffff 	.word	0x000fffff
 800836c:	7fefffff 	.word	0x7fefffff
 8008370:	0800c300 	.word	0x0800c300
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	f002 fb3a 	bl	800a9f0 <__ratio>
 800837c:	ec59 8b10 	vmov	r8, r9, d0
 8008380:	ee10 0a10 	vmov	r0, s0
 8008384:	2200      	movs	r2, #0
 8008386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800838a:	4649      	mov	r1, r9
 800838c:	f7f8 fbb0 	bl	8000af0 <__aeabi_dcmple>
 8008390:	2800      	cmp	r0, #0
 8008392:	d07a      	beq.n	800848a <_strtod_l+0xa8a>
 8008394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d04a      	beq.n	8008430 <_strtod_l+0xa30>
 800839a:	4b95      	ldr	r3, [pc, #596]	; (80085f0 <_strtod_l+0xbf0>)
 800839c:	2200      	movs	r2, #0
 800839e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80085f0 <_strtod_l+0xbf0>
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	4b92      	ldr	r3, [pc, #584]	; (80085f4 <_strtod_l+0xbf4>)
 80083ac:	403b      	ands	r3, r7
 80083ae:	930d      	str	r3, [sp, #52]	; 0x34
 80083b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083b2:	4b91      	ldr	r3, [pc, #580]	; (80085f8 <_strtod_l+0xbf8>)
 80083b4:	429a      	cmp	r2, r3
 80083b6:	f040 80b0 	bne.w	800851a <_strtod_l+0xb1a>
 80083ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083c2:	ec4b ab10 	vmov	d0, sl, fp
 80083c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083ca:	f002 fa39 	bl	800a840 <__ulp>
 80083ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083d2:	ec53 2b10 	vmov	r2, r3, d0
 80083d6:	f7f8 f90f 	bl	80005f8 <__aeabi_dmul>
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	f7f7 ff55 	bl	800028c <__adddf3>
 80083e2:	460b      	mov	r3, r1
 80083e4:	4983      	ldr	r1, [pc, #524]	; (80085f4 <_strtod_l+0xbf4>)
 80083e6:	4a85      	ldr	r2, [pc, #532]	; (80085fc <_strtod_l+0xbfc>)
 80083e8:	4019      	ands	r1, r3
 80083ea:	4291      	cmp	r1, r2
 80083ec:	4682      	mov	sl, r0
 80083ee:	d960      	bls.n	80084b2 <_strtod_l+0xab2>
 80083f0:	ee18 3a90 	vmov	r3, s17
 80083f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d104      	bne.n	8008406 <_strtod_l+0xa06>
 80083fc:	ee18 3a10 	vmov	r3, s16
 8008400:	3301      	adds	r3, #1
 8008402:	f43f ad45 	beq.w	8007e90 <_strtod_l+0x490>
 8008406:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008608 <_strtod_l+0xc08>
 800840a:	f04f 3aff 	mov.w	sl, #4294967295
 800840e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008410:	4620      	mov	r0, r4
 8008412:	f001 fee3 	bl	800a1dc <_Bfree>
 8008416:	9905      	ldr	r1, [sp, #20]
 8008418:	4620      	mov	r0, r4
 800841a:	f001 fedf 	bl	800a1dc <_Bfree>
 800841e:	4631      	mov	r1, r6
 8008420:	4620      	mov	r0, r4
 8008422:	f001 fedb 	bl	800a1dc <_Bfree>
 8008426:	4629      	mov	r1, r5
 8008428:	4620      	mov	r0, r4
 800842a:	f001 fed7 	bl	800a1dc <_Bfree>
 800842e:	e61a      	b.n	8008066 <_strtod_l+0x666>
 8008430:	f1ba 0f00 	cmp.w	sl, #0
 8008434:	d11b      	bne.n	800846e <_strtod_l+0xa6e>
 8008436:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800843a:	b9f3      	cbnz	r3, 800847a <_strtod_l+0xa7a>
 800843c:	4b6c      	ldr	r3, [pc, #432]	; (80085f0 <_strtod_l+0xbf0>)
 800843e:	2200      	movs	r2, #0
 8008440:	4640      	mov	r0, r8
 8008442:	4649      	mov	r1, r9
 8008444:	f7f8 fb4a 	bl	8000adc <__aeabi_dcmplt>
 8008448:	b9d0      	cbnz	r0, 8008480 <_strtod_l+0xa80>
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	4b6c      	ldr	r3, [pc, #432]	; (8008600 <_strtod_l+0xc00>)
 8008450:	2200      	movs	r2, #0
 8008452:	f7f8 f8d1 	bl	80005f8 <__aeabi_dmul>
 8008456:	4680      	mov	r8, r0
 8008458:	4689      	mov	r9, r1
 800845a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800845e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008462:	9315      	str	r3, [sp, #84]	; 0x54
 8008464:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008468:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800846c:	e79d      	b.n	80083aa <_strtod_l+0x9aa>
 800846e:	f1ba 0f01 	cmp.w	sl, #1
 8008472:	d102      	bne.n	800847a <_strtod_l+0xa7a>
 8008474:	2f00      	cmp	r7, #0
 8008476:	f43f ad83 	beq.w	8007f80 <_strtod_l+0x580>
 800847a:	4b62      	ldr	r3, [pc, #392]	; (8008604 <_strtod_l+0xc04>)
 800847c:	2200      	movs	r2, #0
 800847e:	e78e      	b.n	800839e <_strtod_l+0x99e>
 8008480:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008600 <_strtod_l+0xc00>
 8008484:	f04f 0800 	mov.w	r8, #0
 8008488:	e7e7      	b.n	800845a <_strtod_l+0xa5a>
 800848a:	4b5d      	ldr	r3, [pc, #372]	; (8008600 <_strtod_l+0xc00>)
 800848c:	4640      	mov	r0, r8
 800848e:	4649      	mov	r1, r9
 8008490:	2200      	movs	r2, #0
 8008492:	f7f8 f8b1 	bl	80005f8 <__aeabi_dmul>
 8008496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008498:	4680      	mov	r8, r0
 800849a:	4689      	mov	r9, r1
 800849c:	b933      	cbnz	r3, 80084ac <_strtod_l+0xaac>
 800849e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084a2:	900e      	str	r0, [sp, #56]	; 0x38
 80084a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084aa:	e7dd      	b.n	8008468 <_strtod_l+0xa68>
 80084ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80084b0:	e7f9      	b.n	80084a6 <_strtod_l+0xaa6>
 80084b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1a8      	bne.n	800840e <_strtod_l+0xa0e>
 80084bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084c2:	0d1b      	lsrs	r3, r3, #20
 80084c4:	051b      	lsls	r3, r3, #20
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d1a1      	bne.n	800840e <_strtod_l+0xa0e>
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f8 fbf3 	bl	8000cb8 <__aeabi_d2lz>
 80084d2:	f7f8 f863 	bl	800059c <__aeabi_l2d>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f7 fed3 	bl	8000288 <__aeabi_dsub>
 80084e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084e8:	ea43 030a 	orr.w	r3, r3, sl
 80084ec:	4313      	orrs	r3, r2
 80084ee:	4680      	mov	r8, r0
 80084f0:	4689      	mov	r9, r1
 80084f2:	d055      	beq.n	80085a0 <_strtod_l+0xba0>
 80084f4:	a336      	add	r3, pc, #216	; (adr r3, 80085d0 <_strtod_l+0xbd0>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f8 faef 	bl	8000adc <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	f47f acd0 	bne.w	8007ea4 <_strtod_l+0x4a4>
 8008504:	a334      	add	r3, pc, #208	; (adr r3, 80085d8 <_strtod_l+0xbd8>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f8 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 8008512:	2800      	cmp	r0, #0
 8008514:	f43f af7b 	beq.w	800840e <_strtod_l+0xa0e>
 8008518:	e4c4      	b.n	8007ea4 <_strtod_l+0x4a4>
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	b333      	cbz	r3, 800856c <_strtod_l+0xb6c>
 800851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008520:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008524:	d822      	bhi.n	800856c <_strtod_l+0xb6c>
 8008526:	a32e      	add	r3, pc, #184	; (adr r3, 80085e0 <_strtod_l+0xbe0>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f8 fade 	bl	8000af0 <__aeabi_dcmple>
 8008534:	b1a0      	cbz	r0, 8008560 <_strtod_l+0xb60>
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	f7f8 fb35 	bl	8000ba8 <__aeabi_d2uiz>
 800853e:	2801      	cmp	r0, #1
 8008540:	bf38      	it	cc
 8008542:	2001      	movcc	r0, #1
 8008544:	f7f7 ffde 	bl	8000504 <__aeabi_ui2d>
 8008548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	bb23      	cbnz	r3, 800859a <_strtod_l+0xb9a>
 8008550:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008554:	9010      	str	r0, [sp, #64]	; 0x40
 8008556:	9311      	str	r3, [sp, #68]	; 0x44
 8008558:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800855c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008564:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	9309      	str	r3, [sp, #36]	; 0x24
 800856c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008570:	eeb0 0a48 	vmov.f32	s0, s16
 8008574:	eef0 0a68 	vmov.f32	s1, s17
 8008578:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800857c:	f002 f960 	bl	800a840 <__ulp>
 8008580:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008584:	ec53 2b10 	vmov	r2, r3, d0
 8008588:	f7f8 f836 	bl	80005f8 <__aeabi_dmul>
 800858c:	ec53 2b18 	vmov	r2, r3, d8
 8008590:	f7f7 fe7c 	bl	800028c <__adddf3>
 8008594:	4682      	mov	sl, r0
 8008596:	468b      	mov	fp, r1
 8008598:	e78d      	b.n	80084b6 <_strtod_l+0xab6>
 800859a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800859e:	e7db      	b.n	8008558 <_strtod_l+0xb58>
 80085a0:	a311      	add	r3, pc, #68	; (adr r3, 80085e8 <_strtod_l+0xbe8>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f8 fa99 	bl	8000adc <__aeabi_dcmplt>
 80085aa:	e7b2      	b.n	8008512 <_strtod_l+0xb12>
 80085ac:	2300      	movs	r3, #0
 80085ae:	930a      	str	r3, [sp, #40]	; 0x28
 80085b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	f7ff ba6b 	b.w	8007a90 <_strtod_l+0x90>
 80085ba:	2a65      	cmp	r2, #101	; 0x65
 80085bc:	f43f ab5f 	beq.w	8007c7e <_strtod_l+0x27e>
 80085c0:	2a45      	cmp	r2, #69	; 0x45
 80085c2:	f43f ab5c 	beq.w	8007c7e <_strtod_l+0x27e>
 80085c6:	2301      	movs	r3, #1
 80085c8:	f7ff bb94 	b.w	8007cf4 <_strtod_l+0x2f4>
 80085cc:	f3af 8000 	nop.w
 80085d0:	94a03595 	.word	0x94a03595
 80085d4:	3fdfffff 	.word	0x3fdfffff
 80085d8:	35afe535 	.word	0x35afe535
 80085dc:	3fe00000 	.word	0x3fe00000
 80085e0:	ffc00000 	.word	0xffc00000
 80085e4:	41dfffff 	.word	0x41dfffff
 80085e8:	94a03595 	.word	0x94a03595
 80085ec:	3fcfffff 	.word	0x3fcfffff
 80085f0:	3ff00000 	.word	0x3ff00000
 80085f4:	7ff00000 	.word	0x7ff00000
 80085f8:	7fe00000 	.word	0x7fe00000
 80085fc:	7c9fffff 	.word	0x7c9fffff
 8008600:	3fe00000 	.word	0x3fe00000
 8008604:	bff00000 	.word	0xbff00000
 8008608:	7fefffff 	.word	0x7fefffff

0800860c <_strtod_r>:
 800860c:	4b01      	ldr	r3, [pc, #4]	; (8008614 <_strtod_r+0x8>)
 800860e:	f7ff b9f7 	b.w	8007a00 <_strtod_l>
 8008612:	bf00      	nop
 8008614:	200000a0 	.word	0x200000a0

08008618 <_strtol_l.constprop.0>:
 8008618:	2b01      	cmp	r3, #1
 800861a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861e:	d001      	beq.n	8008624 <_strtol_l.constprop.0+0xc>
 8008620:	2b24      	cmp	r3, #36	; 0x24
 8008622:	d906      	bls.n	8008632 <_strtol_l.constprop.0+0x1a>
 8008624:	f7fe f9c6 	bl	80069b4 <__errno>
 8008628:	2316      	movs	r3, #22
 800862a:	6003      	str	r3, [r0, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008718 <_strtol_l.constprop.0+0x100>
 8008636:	460d      	mov	r5, r1
 8008638:	462e      	mov	r6, r5
 800863a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800863e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008642:	f017 0708 	ands.w	r7, r7, #8
 8008646:	d1f7      	bne.n	8008638 <_strtol_l.constprop.0+0x20>
 8008648:	2c2d      	cmp	r4, #45	; 0x2d
 800864a:	d132      	bne.n	80086b2 <_strtol_l.constprop.0+0x9a>
 800864c:	782c      	ldrb	r4, [r5, #0]
 800864e:	2701      	movs	r7, #1
 8008650:	1cb5      	adds	r5, r6, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d05b      	beq.n	800870e <_strtol_l.constprop.0+0xf6>
 8008656:	2b10      	cmp	r3, #16
 8008658:	d109      	bne.n	800866e <_strtol_l.constprop.0+0x56>
 800865a:	2c30      	cmp	r4, #48	; 0x30
 800865c:	d107      	bne.n	800866e <_strtol_l.constprop.0+0x56>
 800865e:	782c      	ldrb	r4, [r5, #0]
 8008660:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008664:	2c58      	cmp	r4, #88	; 0x58
 8008666:	d14d      	bne.n	8008704 <_strtol_l.constprop.0+0xec>
 8008668:	786c      	ldrb	r4, [r5, #1]
 800866a:	2310      	movs	r3, #16
 800866c:	3502      	adds	r5, #2
 800866e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008672:	f108 38ff 	add.w	r8, r8, #4294967295
 8008676:	f04f 0c00 	mov.w	ip, #0
 800867a:	fbb8 f9f3 	udiv	r9, r8, r3
 800867e:	4666      	mov	r6, ip
 8008680:	fb03 8a19 	mls	sl, r3, r9, r8
 8008684:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008688:	f1be 0f09 	cmp.w	lr, #9
 800868c:	d816      	bhi.n	80086bc <_strtol_l.constprop.0+0xa4>
 800868e:	4674      	mov	r4, lr
 8008690:	42a3      	cmp	r3, r4
 8008692:	dd24      	ble.n	80086de <_strtol_l.constprop.0+0xc6>
 8008694:	f1bc 0f00 	cmp.w	ip, #0
 8008698:	db1e      	blt.n	80086d8 <_strtol_l.constprop.0+0xc0>
 800869a:	45b1      	cmp	r9, r6
 800869c:	d31c      	bcc.n	80086d8 <_strtol_l.constprop.0+0xc0>
 800869e:	d101      	bne.n	80086a4 <_strtol_l.constprop.0+0x8c>
 80086a0:	45a2      	cmp	sl, r4
 80086a2:	db19      	blt.n	80086d8 <_strtol_l.constprop.0+0xc0>
 80086a4:	fb06 4603 	mla	r6, r6, r3, r4
 80086a8:	f04f 0c01 	mov.w	ip, #1
 80086ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086b0:	e7e8      	b.n	8008684 <_strtol_l.constprop.0+0x6c>
 80086b2:	2c2b      	cmp	r4, #43	; 0x2b
 80086b4:	bf04      	itt	eq
 80086b6:	782c      	ldrbeq	r4, [r5, #0]
 80086b8:	1cb5      	addeq	r5, r6, #2
 80086ba:	e7ca      	b.n	8008652 <_strtol_l.constprop.0+0x3a>
 80086bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086c0:	f1be 0f19 	cmp.w	lr, #25
 80086c4:	d801      	bhi.n	80086ca <_strtol_l.constprop.0+0xb2>
 80086c6:	3c37      	subs	r4, #55	; 0x37
 80086c8:	e7e2      	b.n	8008690 <_strtol_l.constprop.0+0x78>
 80086ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086ce:	f1be 0f19 	cmp.w	lr, #25
 80086d2:	d804      	bhi.n	80086de <_strtol_l.constprop.0+0xc6>
 80086d4:	3c57      	subs	r4, #87	; 0x57
 80086d6:	e7db      	b.n	8008690 <_strtol_l.constprop.0+0x78>
 80086d8:	f04f 3cff 	mov.w	ip, #4294967295
 80086dc:	e7e6      	b.n	80086ac <_strtol_l.constprop.0+0x94>
 80086de:	f1bc 0f00 	cmp.w	ip, #0
 80086e2:	da05      	bge.n	80086f0 <_strtol_l.constprop.0+0xd8>
 80086e4:	2322      	movs	r3, #34	; 0x22
 80086e6:	6003      	str	r3, [r0, #0]
 80086e8:	4646      	mov	r6, r8
 80086ea:	b942      	cbnz	r2, 80086fe <_strtol_l.constprop.0+0xe6>
 80086ec:	4630      	mov	r0, r6
 80086ee:	e79e      	b.n	800862e <_strtol_l.constprop.0+0x16>
 80086f0:	b107      	cbz	r7, 80086f4 <_strtol_l.constprop.0+0xdc>
 80086f2:	4276      	negs	r6, r6
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	d0f9      	beq.n	80086ec <_strtol_l.constprop.0+0xd4>
 80086f8:	f1bc 0f00 	cmp.w	ip, #0
 80086fc:	d000      	beq.n	8008700 <_strtol_l.constprop.0+0xe8>
 80086fe:	1e69      	subs	r1, r5, #1
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	e7f3      	b.n	80086ec <_strtol_l.constprop.0+0xd4>
 8008704:	2430      	movs	r4, #48	; 0x30
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1b1      	bne.n	800866e <_strtol_l.constprop.0+0x56>
 800870a:	2308      	movs	r3, #8
 800870c:	e7af      	b.n	800866e <_strtol_l.constprop.0+0x56>
 800870e:	2c30      	cmp	r4, #48	; 0x30
 8008710:	d0a5      	beq.n	800865e <_strtol_l.constprop.0+0x46>
 8008712:	230a      	movs	r3, #10
 8008714:	e7ab      	b.n	800866e <_strtol_l.constprop.0+0x56>
 8008716:	bf00      	nop
 8008718:	0800c329 	.word	0x0800c329

0800871c <_strtol_r>:
 800871c:	f7ff bf7c 	b.w	8008618 <_strtol_l.constprop.0>

08008720 <__swbuf_r>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	460e      	mov	r6, r1
 8008724:	4614      	mov	r4, r2
 8008726:	4605      	mov	r5, r0
 8008728:	b118      	cbz	r0, 8008732 <__swbuf_r+0x12>
 800872a:	6983      	ldr	r3, [r0, #24]
 800872c:	b90b      	cbnz	r3, 8008732 <__swbuf_r+0x12>
 800872e:	f001 f86f 	bl	8009810 <__sinit>
 8008732:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <__swbuf_r+0x98>)
 8008734:	429c      	cmp	r4, r3
 8008736:	d12b      	bne.n	8008790 <__swbuf_r+0x70>
 8008738:	686c      	ldr	r4, [r5, #4]
 800873a:	69a3      	ldr	r3, [r4, #24]
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	071a      	lsls	r2, r3, #28
 8008742:	d52f      	bpl.n	80087a4 <__swbuf_r+0x84>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	b36b      	cbz	r3, 80087a4 <__swbuf_r+0x84>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	1ac0      	subs	r0, r0, r3
 800874e:	6963      	ldr	r3, [r4, #20]
 8008750:	b2f6      	uxtb	r6, r6
 8008752:	4283      	cmp	r3, r0
 8008754:	4637      	mov	r7, r6
 8008756:	dc04      	bgt.n	8008762 <__swbuf_r+0x42>
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 ffc4 	bl	80096e8 <_fflush_r>
 8008760:	bb30      	cbnz	r0, 80087b0 <__swbuf_r+0x90>
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	3b01      	subs	r3, #1
 8008766:	60a3      	str	r3, [r4, #8]
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	701e      	strb	r6, [r3, #0]
 8008770:	6963      	ldr	r3, [r4, #20]
 8008772:	3001      	adds	r0, #1
 8008774:	4283      	cmp	r3, r0
 8008776:	d004      	beq.n	8008782 <__swbuf_r+0x62>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	07db      	lsls	r3, r3, #31
 800877c:	d506      	bpl.n	800878c <__swbuf_r+0x6c>
 800877e:	2e0a      	cmp	r6, #10
 8008780:	d104      	bne.n	800878c <__swbuf_r+0x6c>
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 ffaf 	bl	80096e8 <_fflush_r>
 800878a:	b988      	cbnz	r0, 80087b0 <__swbuf_r+0x90>
 800878c:	4638      	mov	r0, r7
 800878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <__swbuf_r+0x9c>)
 8008792:	429c      	cmp	r4, r3
 8008794:	d101      	bne.n	800879a <__swbuf_r+0x7a>
 8008796:	68ac      	ldr	r4, [r5, #8]
 8008798:	e7cf      	b.n	800873a <__swbuf_r+0x1a>
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <__swbuf_r+0xa0>)
 800879c:	429c      	cmp	r4, r3
 800879e:	bf08      	it	eq
 80087a0:	68ec      	ldreq	r4, [r5, #12]
 80087a2:	e7ca      	b.n	800873a <__swbuf_r+0x1a>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f81e 	bl	80087e8 <__swsetup_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0cb      	beq.n	8008748 <__swbuf_r+0x28>
 80087b0:	f04f 37ff 	mov.w	r7, #4294967295
 80087b4:	e7ea      	b.n	800878c <__swbuf_r+0x6c>
 80087b6:	bf00      	nop
 80087b8:	0800c4dc 	.word	0x0800c4dc
 80087bc:	0800c4fc 	.word	0x0800c4fc
 80087c0:	0800c4bc 	.word	0x0800c4bc

080087c4 <_write_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	; (80087e4 <_write_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7f9 fda1 	bl	800231a <_write>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_write_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_write_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000dd4 	.word	0x20000dd4

080087e8 <__swsetup_r>:
 80087e8:	4b32      	ldr	r3, [pc, #200]	; (80088b4 <__swsetup_r+0xcc>)
 80087ea:	b570      	push	{r4, r5, r6, lr}
 80087ec:	681d      	ldr	r5, [r3, #0]
 80087ee:	4606      	mov	r6, r0
 80087f0:	460c      	mov	r4, r1
 80087f2:	b125      	cbz	r5, 80087fe <__swsetup_r+0x16>
 80087f4:	69ab      	ldr	r3, [r5, #24]
 80087f6:	b913      	cbnz	r3, 80087fe <__swsetup_r+0x16>
 80087f8:	4628      	mov	r0, r5
 80087fa:	f001 f809 	bl	8009810 <__sinit>
 80087fe:	4b2e      	ldr	r3, [pc, #184]	; (80088b8 <__swsetup_r+0xd0>)
 8008800:	429c      	cmp	r4, r3
 8008802:	d10f      	bne.n	8008824 <__swsetup_r+0x3c>
 8008804:	686c      	ldr	r4, [r5, #4]
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880c:	0719      	lsls	r1, r3, #28
 800880e:	d42c      	bmi.n	800886a <__swsetup_r+0x82>
 8008810:	06dd      	lsls	r5, r3, #27
 8008812:	d411      	bmi.n	8008838 <__swsetup_r+0x50>
 8008814:	2309      	movs	r3, #9
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	e03e      	b.n	80088a2 <__swsetup_r+0xba>
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <__swsetup_r+0xd4>)
 8008826:	429c      	cmp	r4, r3
 8008828:	d101      	bne.n	800882e <__swsetup_r+0x46>
 800882a:	68ac      	ldr	r4, [r5, #8]
 800882c:	e7eb      	b.n	8008806 <__swsetup_r+0x1e>
 800882e:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <__swsetup_r+0xd8>)
 8008830:	429c      	cmp	r4, r3
 8008832:	bf08      	it	eq
 8008834:	68ec      	ldreq	r4, [r5, #12]
 8008836:	e7e6      	b.n	8008806 <__swsetup_r+0x1e>
 8008838:	0758      	lsls	r0, r3, #29
 800883a:	d512      	bpl.n	8008862 <__swsetup_r+0x7a>
 800883c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883e:	b141      	cbz	r1, 8008852 <__swsetup_r+0x6a>
 8008840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008844:	4299      	cmp	r1, r3
 8008846:	d002      	beq.n	800884e <__swsetup_r+0x66>
 8008848:	4630      	mov	r0, r6
 800884a:	f002 f95f 	bl	800ab0c <_free_r>
 800884e:	2300      	movs	r3, #0
 8008850:	6363      	str	r3, [r4, #52]	; 0x34
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	2300      	movs	r3, #0
 800885c:	6063      	str	r3, [r4, #4]
 800885e:	6923      	ldr	r3, [r4, #16]
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f043 0308 	orr.w	r3, r3, #8
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	b94b      	cbnz	r3, 8008882 <__swsetup_r+0x9a>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008878:	d003      	beq.n	8008882 <__swsetup_r+0x9a>
 800887a:	4621      	mov	r1, r4
 800887c:	4630      	mov	r0, r6
 800887e:	f001 fc13 	bl	800a0a8 <__smakebuf_r>
 8008882:	89a0      	ldrh	r0, [r4, #12]
 8008884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008888:	f010 0301 	ands.w	r3, r0, #1
 800888c:	d00a      	beq.n	80088a4 <__swsetup_r+0xbc>
 800888e:	2300      	movs	r3, #0
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	6963      	ldr	r3, [r4, #20]
 8008894:	425b      	negs	r3, r3
 8008896:	61a3      	str	r3, [r4, #24]
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	b943      	cbnz	r3, 80088ae <__swsetup_r+0xc6>
 800889c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088a0:	d1ba      	bne.n	8008818 <__swsetup_r+0x30>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	0781      	lsls	r1, r0, #30
 80088a6:	bf58      	it	pl
 80088a8:	6963      	ldrpl	r3, [r4, #20]
 80088aa:	60a3      	str	r3, [r4, #8]
 80088ac:	e7f4      	b.n	8008898 <__swsetup_r+0xb0>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e7f7      	b.n	80088a2 <__swsetup_r+0xba>
 80088b2:	bf00      	nop
 80088b4:	20000038 	.word	0x20000038
 80088b8:	0800c4dc 	.word	0x0800c4dc
 80088bc:	0800c4fc 	.word	0x0800c4fc
 80088c0:	0800c4bc 	.word	0x0800c4bc

080088c4 <_close_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d06      	ldr	r5, [pc, #24]	; (80088e0 <_close_r+0x1c>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7fa f959 	bl	8002b86 <_close>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_close_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_close_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	20000dd4 	.word	0x20000dd4

080088e4 <quorem>:
 80088e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	6903      	ldr	r3, [r0, #16]
 80088ea:	690c      	ldr	r4, [r1, #16]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	4607      	mov	r7, r0
 80088f0:	f2c0 8081 	blt.w	80089f6 <quorem+0x112>
 80088f4:	3c01      	subs	r4, #1
 80088f6:	f101 0814 	add.w	r8, r1, #20
 80088fa:	f100 0514 	add.w	r5, r0, #20
 80088fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008908:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800890c:	3301      	adds	r3, #1
 800890e:	429a      	cmp	r2, r3
 8008910:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008914:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008918:	fbb2 f6f3 	udiv	r6, r2, r3
 800891c:	d331      	bcc.n	8008982 <quorem+0x9e>
 800891e:	f04f 0e00 	mov.w	lr, #0
 8008922:	4640      	mov	r0, r8
 8008924:	46ac      	mov	ip, r5
 8008926:	46f2      	mov	sl, lr
 8008928:	f850 2b04 	ldr.w	r2, [r0], #4
 800892c:	b293      	uxth	r3, r2
 800892e:	fb06 e303 	mla	r3, r6, r3, lr
 8008932:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008936:	b29b      	uxth	r3, r3
 8008938:	ebaa 0303 	sub.w	r3, sl, r3
 800893c:	f8dc a000 	ldr.w	sl, [ip]
 8008940:	0c12      	lsrs	r2, r2, #16
 8008942:	fa13 f38a 	uxtah	r3, r3, sl
 8008946:	fb06 e202 	mla	r2, r6, r2, lr
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	9b00      	ldr	r3, [sp, #0]
 800894e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008952:	b292      	uxth	r2, r2
 8008954:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800895c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008960:	4581      	cmp	r9, r0
 8008962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008966:	f84c 3b04 	str.w	r3, [ip], #4
 800896a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800896e:	d2db      	bcs.n	8008928 <quorem+0x44>
 8008970:	f855 300b 	ldr.w	r3, [r5, fp]
 8008974:	b92b      	cbnz	r3, 8008982 <quorem+0x9e>
 8008976:	9b01      	ldr	r3, [sp, #4]
 8008978:	3b04      	subs	r3, #4
 800897a:	429d      	cmp	r5, r3
 800897c:	461a      	mov	r2, r3
 800897e:	d32e      	bcc.n	80089de <quorem+0xfa>
 8008980:	613c      	str	r4, [r7, #16]
 8008982:	4638      	mov	r0, r7
 8008984:	f001 feb6 	bl	800a6f4 <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	db24      	blt.n	80089d6 <quorem+0xf2>
 800898c:	3601      	adds	r6, #1
 800898e:	4628      	mov	r0, r5
 8008990:	f04f 0c00 	mov.w	ip, #0
 8008994:	f858 2b04 	ldr.w	r2, [r8], #4
 8008998:	f8d0 e000 	ldr.w	lr, [r0]
 800899c:	b293      	uxth	r3, r2
 800899e:	ebac 0303 	sub.w	r3, ip, r3
 80089a2:	0c12      	lsrs	r2, r2, #16
 80089a4:	fa13 f38e 	uxtah	r3, r3, lr
 80089a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b6:	45c1      	cmp	r9, r8
 80089b8:	f840 3b04 	str.w	r3, [r0], #4
 80089bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089c0:	d2e8      	bcs.n	8008994 <quorem+0xb0>
 80089c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ca:	b922      	cbnz	r2, 80089d6 <quorem+0xf2>
 80089cc:	3b04      	subs	r3, #4
 80089ce:	429d      	cmp	r5, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	d30a      	bcc.n	80089ea <quorem+0x106>
 80089d4:	613c      	str	r4, [r7, #16]
 80089d6:	4630      	mov	r0, r6
 80089d8:	b003      	add	sp, #12
 80089da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089de:	6812      	ldr	r2, [r2, #0]
 80089e0:	3b04      	subs	r3, #4
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	d1cc      	bne.n	8008980 <quorem+0x9c>
 80089e6:	3c01      	subs	r4, #1
 80089e8:	e7c7      	b.n	800897a <quorem+0x96>
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d1f0      	bne.n	80089d4 <quorem+0xf0>
 80089f2:	3c01      	subs	r4, #1
 80089f4:	e7eb      	b.n	80089ce <quorem+0xea>
 80089f6:	2000      	movs	r0, #0
 80089f8:	e7ee      	b.n	80089d8 <quorem+0xf4>
 80089fa:	0000      	movs	r0, r0
 80089fc:	0000      	movs	r0, r0
	...

08008a00 <_dtoa_r>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	ed2d 8b04 	vpush	{d8-d9}
 8008a08:	ec57 6b10 	vmov	r6, r7, d0
 8008a0c:	b093      	sub	sp, #76	; 0x4c
 8008a0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a14:	9106      	str	r1, [sp, #24]
 8008a16:	ee10 aa10 	vmov	sl, s0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a20:	46bb      	mov	fp, r7
 8008a22:	b975      	cbnz	r5, 8008a42 <_dtoa_r+0x42>
 8008a24:	2010      	movs	r0, #16
 8008a26:	f001 fb7f 	bl	800a128 <malloc>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6260      	str	r0, [r4, #36]	; 0x24
 8008a2e:	b920      	cbnz	r0, 8008a3a <_dtoa_r+0x3a>
 8008a30:	4ba7      	ldr	r3, [pc, #668]	; (8008cd0 <_dtoa_r+0x2d0>)
 8008a32:	21ea      	movs	r1, #234	; 0xea
 8008a34:	48a7      	ldr	r0, [pc, #668]	; (8008cd4 <_dtoa_r+0x2d4>)
 8008a36:	f003 f843 	bl	800bac0 <__assert_func>
 8008a3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a3e:	6005      	str	r5, [r0, #0]
 8008a40:	60c5      	str	r5, [r0, #12]
 8008a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a44:	6819      	ldr	r1, [r3, #0]
 8008a46:	b151      	cbz	r1, 8008a5e <_dtoa_r+0x5e>
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	604a      	str	r2, [r1, #4]
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4093      	lsls	r3, r2
 8008a50:	608b      	str	r3, [r1, #8]
 8008a52:	4620      	mov	r0, r4
 8008a54:	f001 fbc2 	bl	800a1dc <_Bfree>
 8008a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	1e3b      	subs	r3, r7, #0
 8008a60:	bfaa      	itet	ge
 8008a62:	2300      	movge	r3, #0
 8008a64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a68:	f8c8 3000 	strge.w	r3, [r8]
 8008a6c:	4b9a      	ldr	r3, [pc, #616]	; (8008cd8 <_dtoa_r+0x2d8>)
 8008a6e:	bfbc      	itt	lt
 8008a70:	2201      	movlt	r2, #1
 8008a72:	f8c8 2000 	strlt.w	r2, [r8]
 8008a76:	ea33 030b 	bics.w	r3, r3, fp
 8008a7a:	d11b      	bne.n	8008ab4 <_dtoa_r+0xb4>
 8008a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a88:	4333      	orrs	r3, r6
 8008a8a:	f000 8592 	beq.w	80095b2 <_dtoa_r+0xbb2>
 8008a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a90:	b963      	cbnz	r3, 8008aac <_dtoa_r+0xac>
 8008a92:	4b92      	ldr	r3, [pc, #584]	; (8008cdc <_dtoa_r+0x2dc>)
 8008a94:	e022      	b.n	8008adc <_dtoa_r+0xdc>
 8008a96:	4b92      	ldr	r3, [pc, #584]	; (8008ce0 <_dtoa_r+0x2e0>)
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	b013      	add	sp, #76	; 0x4c
 8008aa4:	ecbd 8b04 	vpop	{d8-d9}
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	4b8b      	ldr	r3, [pc, #556]	; (8008cdc <_dtoa_r+0x2dc>)
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	3303      	adds	r3, #3
 8008ab2:	e7f3      	b.n	8008a9c <_dtoa_r+0x9c>
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4650      	mov	r0, sl
 8008aba:	4659      	mov	r1, fp
 8008abc:	f7f8 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac0:	ec4b ab19 	vmov	d9, sl, fp
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	b158      	cbz	r0, 8008ae0 <_dtoa_r+0xe0>
 8008ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aca:	2301      	movs	r3, #1
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 856b 	beq.w	80095ac <_dtoa_r+0xbac>
 8008ad6:	4883      	ldr	r0, [pc, #524]	; (8008ce4 <_dtoa_r+0x2e4>)
 8008ad8:	6018      	str	r0, [r3, #0]
 8008ada:	1e43      	subs	r3, r0, #1
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	e7df      	b.n	8008aa0 <_dtoa_r+0xa0>
 8008ae0:	ec4b ab10 	vmov	d0, sl, fp
 8008ae4:	aa10      	add	r2, sp, #64	; 0x40
 8008ae6:	a911      	add	r1, sp, #68	; 0x44
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f001 ff25 	bl	800a938 <__d2b>
 8008aee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008af2:	ee08 0a10 	vmov	s16, r0
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	f000 8084 	beq.w	8008c04 <_dtoa_r+0x204>
 8008afc:	ee19 3a90 	vmov	r3, s19
 8008b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b08:	4656      	mov	r6, sl
 8008b0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b16:	4b74      	ldr	r3, [pc, #464]	; (8008ce8 <_dtoa_r+0x2e8>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fbb3 	bl	8000288 <__aeabi_dsub>
 8008b22:	a365      	add	r3, pc, #404	; (adr r3, 8008cb8 <_dtoa_r+0x2b8>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	a364      	add	r3, pc, #400	; (adr r3, 8008cc0 <_dtoa_r+0x2c0>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f7f7 fbab 	bl	800028c <__adddf3>
 8008b36:	4606      	mov	r6, r0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	f7f7 fcf2 	bl	8000524 <__aeabi_i2d>
 8008b40:	a361      	add	r3, pc, #388	; (adr r3, 8008cc8 <_dtoa_r+0x2c8>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	f7f7 fb9b 	bl	800028c <__adddf3>
 8008b56:	4606      	mov	r6, r0
 8008b58:	460f      	mov	r7, r1
 8008b5a:	f7f7 fffd 	bl	8000b58 <__aeabi_d2iz>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	9000      	str	r0, [sp, #0]
 8008b62:	2300      	movs	r3, #0
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 ffb8 	bl	8000adc <__aeabi_dcmplt>
 8008b6c:	b150      	cbz	r0, 8008b84 <_dtoa_r+0x184>
 8008b6e:	9800      	ldr	r0, [sp, #0]
 8008b70:	f7f7 fcd8 	bl	8000524 <__aeabi_i2d>
 8008b74:	4632      	mov	r2, r6
 8008b76:	463b      	mov	r3, r7
 8008b78:	f7f7 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b7c:	b910      	cbnz	r0, 8008b84 <_dtoa_r+0x184>
 8008b7e:	9b00      	ldr	r3, [sp, #0]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	9b00      	ldr	r3, [sp, #0]
 8008b86:	2b16      	cmp	r3, #22
 8008b88:	d85a      	bhi.n	8008c40 <_dtoa_r+0x240>
 8008b8a:	9a00      	ldr	r2, [sp, #0]
 8008b8c:	4b57      	ldr	r3, [pc, #348]	; (8008cec <_dtoa_r+0x2ec>)
 8008b8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	ec51 0b19 	vmov	r0, r1, d9
 8008b9a:	f7f7 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d050      	beq.n	8008c44 <_dtoa_r+0x244>
 8008ba2:	9b00      	ldr	r3, [sp, #0]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bae:	1b5d      	subs	r5, r3, r5
 8008bb0:	1e6b      	subs	r3, r5, #1
 8008bb2:	9305      	str	r3, [sp, #20]
 8008bb4:	bf45      	ittet	mi
 8008bb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bba:	9304      	strmi	r3, [sp, #16]
 8008bbc:	2300      	movpl	r3, #0
 8008bbe:	2300      	movmi	r3, #0
 8008bc0:	bf4c      	ite	mi
 8008bc2:	9305      	strmi	r3, [sp, #20]
 8008bc4:	9304      	strpl	r3, [sp, #16]
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	db3d      	blt.n	8008c48 <_dtoa_r+0x248>
 8008bcc:	9b05      	ldr	r3, [sp, #20]
 8008bce:	9a00      	ldr	r2, [sp, #0]
 8008bd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008bd2:	4413      	add	r3, r2
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9307      	str	r3, [sp, #28]
 8008bda:	9b06      	ldr	r3, [sp, #24]
 8008bdc:	2b09      	cmp	r3, #9
 8008bde:	f200 8089 	bhi.w	8008cf4 <_dtoa_r+0x2f4>
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	bfc4      	itt	gt
 8008be6:	3b04      	subgt	r3, #4
 8008be8:	9306      	strgt	r3, [sp, #24]
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	f1a3 0302 	sub.w	r3, r3, #2
 8008bf0:	bfcc      	ite	gt
 8008bf2:	2500      	movgt	r5, #0
 8008bf4:	2501      	movle	r5, #1
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	f200 8087 	bhi.w	8008d0a <_dtoa_r+0x30a>
 8008bfc:	e8df f003 	tbb	[pc, r3]
 8008c00:	59383a2d 	.word	0x59383a2d
 8008c04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c08:	441d      	add	r5, r3
 8008c0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	bfc1      	itttt	gt
 8008c12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c22:	bfda      	itte	le
 8008c24:	f1c3 0320 	rsble	r3, r3, #32
 8008c28:	fa06 f003 	lslle.w	r0, r6, r3
 8008c2c:	4318      	orrgt	r0, r3
 8008c2e:	f7f7 fc69 	bl	8000504 <__aeabi_ui2d>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4606      	mov	r6, r0
 8008c36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c3a:	3d01      	subs	r5, #1
 8008c3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c3e:	e76a      	b.n	8008b16 <_dtoa_r+0x116>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e7b2      	b.n	8008baa <_dtoa_r+0x1aa>
 8008c44:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c46:	e7b1      	b.n	8008bac <_dtoa_r+0x1ac>
 8008c48:	9b04      	ldr	r3, [sp, #16]
 8008c4a:	9a00      	ldr	r2, [sp, #0]
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	4253      	negs	r3, r2
 8008c52:	9307      	str	r3, [sp, #28]
 8008c54:	2300      	movs	r3, #0
 8008c56:	930a      	str	r3, [sp, #40]	; 0x28
 8008c58:	e7bf      	b.n	8008bda <_dtoa_r+0x1da>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9308      	str	r3, [sp, #32]
 8008c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc55      	bgt.n	8008d10 <_dtoa_r+0x310>
 8008c64:	2301      	movs	r3, #1
 8008c66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c6e:	e00c      	b.n	8008c8a <_dtoa_r+0x28a>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e7f3      	b.n	8008c5c <_dtoa_r+0x25c>
 8008c74:	2300      	movs	r3, #0
 8008c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c78:	9308      	str	r3, [sp, #32]
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	3301      	adds	r3, #1
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	bfb8      	it	lt
 8008c88:	2301      	movlt	r3, #1
 8008c8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	6042      	str	r2, [r0, #4]
 8008c90:	2204      	movs	r2, #4
 8008c92:	f102 0614 	add.w	r6, r2, #20
 8008c96:	429e      	cmp	r6, r3
 8008c98:	6841      	ldr	r1, [r0, #4]
 8008c9a:	d93d      	bls.n	8008d18 <_dtoa_r+0x318>
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f001 fa5d 	bl	800a15c <_Balloc>
 8008ca2:	9001      	str	r0, [sp, #4]
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d13b      	bne.n	8008d20 <_dtoa_r+0x320>
 8008ca8:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <_dtoa_r+0x2f0>)
 8008caa:	4602      	mov	r2, r0
 8008cac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cb0:	e6c0      	b.n	8008a34 <_dtoa_r+0x34>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e7df      	b.n	8008c76 <_dtoa_r+0x276>
 8008cb6:	bf00      	nop
 8008cb8:	636f4361 	.word	0x636f4361
 8008cbc:	3fd287a7 	.word	0x3fd287a7
 8008cc0:	8b60c8b3 	.word	0x8b60c8b3
 8008cc4:	3fc68a28 	.word	0x3fc68a28
 8008cc8:	509f79fb 	.word	0x509f79fb
 8008ccc:	3fd34413 	.word	0x3fd34413
 8008cd0:	0800c436 	.word	0x0800c436
 8008cd4:	0800c44d 	.word	0x0800c44d
 8008cd8:	7ff00000 	.word	0x7ff00000
 8008cdc:	0800c432 	.word	0x0800c432
 8008ce0:	0800c429 	.word	0x0800c429
 8008ce4:	0800c70a 	.word	0x0800c70a
 8008ce8:	3ff80000 	.word	0x3ff80000
 8008cec:	0800c620 	.word	0x0800c620
 8008cf0:	0800c4a8 	.word	0x0800c4a8
 8008cf4:	2501      	movs	r5, #1
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9306      	str	r3, [sp, #24]
 8008cfa:	9508      	str	r5, [sp, #32]
 8008cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008d00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d04:	2200      	movs	r2, #0
 8008d06:	2312      	movs	r3, #18
 8008d08:	e7b0      	b.n	8008c6c <_dtoa_r+0x26c>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	9308      	str	r3, [sp, #32]
 8008d0e:	e7f5      	b.n	8008cfc <_dtoa_r+0x2fc>
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d16:	e7b8      	b.n	8008c8a <_dtoa_r+0x28a>
 8008d18:	3101      	adds	r1, #1
 8008d1a:	6041      	str	r1, [r0, #4]
 8008d1c:	0052      	lsls	r2, r2, #1
 8008d1e:	e7b8      	b.n	8008c92 <_dtoa_r+0x292>
 8008d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d22:	9a01      	ldr	r2, [sp, #4]
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	2b0e      	cmp	r3, #14
 8008d2a:	f200 809d 	bhi.w	8008e68 <_dtoa_r+0x468>
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	f000 809a 	beq.w	8008e68 <_dtoa_r+0x468>
 8008d34:	9b00      	ldr	r3, [sp, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dd32      	ble.n	8008da0 <_dtoa_r+0x3a0>
 8008d3a:	4ab7      	ldr	r2, [pc, #732]	; (8009018 <_dtoa_r+0x618>)
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	05d8      	lsls	r0, r3, #23
 8008d4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d50:	d516      	bpl.n	8008d80 <_dtoa_r+0x380>
 8008d52:	4bb2      	ldr	r3, [pc, #712]	; (800901c <_dtoa_r+0x61c>)
 8008d54:	ec51 0b19 	vmov	r0, r1, d9
 8008d58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d5c:	f7f7 fd76 	bl	800084c <__aeabi_ddiv>
 8008d60:	f007 070f 	and.w	r7, r7, #15
 8008d64:	4682      	mov	sl, r0
 8008d66:	468b      	mov	fp, r1
 8008d68:	2503      	movs	r5, #3
 8008d6a:	4eac      	ldr	r6, [pc, #688]	; (800901c <_dtoa_r+0x61c>)
 8008d6c:	b957      	cbnz	r7, 8008d84 <_dtoa_r+0x384>
 8008d6e:	4642      	mov	r2, r8
 8008d70:	464b      	mov	r3, r9
 8008d72:	4650      	mov	r0, sl
 8008d74:	4659      	mov	r1, fp
 8008d76:	f7f7 fd69 	bl	800084c <__aeabi_ddiv>
 8008d7a:	4682      	mov	sl, r0
 8008d7c:	468b      	mov	fp, r1
 8008d7e:	e028      	b.n	8008dd2 <_dtoa_r+0x3d2>
 8008d80:	2502      	movs	r5, #2
 8008d82:	e7f2      	b.n	8008d6a <_dtoa_r+0x36a>
 8008d84:	07f9      	lsls	r1, r7, #31
 8008d86:	d508      	bpl.n	8008d9a <_dtoa_r+0x39a>
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d90:	f7f7 fc32 	bl	80005f8 <__aeabi_dmul>
 8008d94:	3501      	adds	r5, #1
 8008d96:	4680      	mov	r8, r0
 8008d98:	4689      	mov	r9, r1
 8008d9a:	107f      	asrs	r7, r7, #1
 8008d9c:	3608      	adds	r6, #8
 8008d9e:	e7e5      	b.n	8008d6c <_dtoa_r+0x36c>
 8008da0:	f000 809b 	beq.w	8008eda <_dtoa_r+0x4da>
 8008da4:	9b00      	ldr	r3, [sp, #0]
 8008da6:	4f9d      	ldr	r7, [pc, #628]	; (800901c <_dtoa_r+0x61c>)
 8008da8:	425e      	negs	r6, r3
 8008daa:	4b9b      	ldr	r3, [pc, #620]	; (8009018 <_dtoa_r+0x618>)
 8008dac:	f006 020f 	and.w	r2, r6, #15
 8008db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	ec51 0b19 	vmov	r0, r1, d9
 8008dbc:	f7f7 fc1c 	bl	80005f8 <__aeabi_dmul>
 8008dc0:	1136      	asrs	r6, r6, #4
 8008dc2:	4682      	mov	sl, r0
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2502      	movs	r5, #2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	d17a      	bne.n	8008ec4 <_dtoa_r+0x4c4>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1d3      	bne.n	8008d7a <_dtoa_r+0x37a>
 8008dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 8082 	beq.w	8008ede <_dtoa_r+0x4de>
 8008dda:	4b91      	ldr	r3, [pc, #580]	; (8009020 <_dtoa_r+0x620>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4650      	mov	r0, sl
 8008de0:	4659      	mov	r1, fp
 8008de2:	f7f7 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d079      	beq.n	8008ede <_dtoa_r+0x4de>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d076      	beq.n	8008ede <_dtoa_r+0x4de>
 8008df0:	9b02      	ldr	r3, [sp, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dd36      	ble.n	8008e64 <_dtoa_r+0x464>
 8008df6:	9b00      	ldr	r3, [sp, #0]
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	1e5f      	subs	r7, r3, #1
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4b88      	ldr	r3, [pc, #544]	; (8009024 <_dtoa_r+0x624>)
 8008e02:	f7f7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8008e06:	9e02      	ldr	r6, [sp, #8]
 8008e08:	4682      	mov	sl, r0
 8008e0a:	468b      	mov	fp, r1
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7f7 fb88 	bl	8000524 <__aeabi_i2d>
 8008e14:	4652      	mov	r2, sl
 8008e16:	465b      	mov	r3, fp
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	4b82      	ldr	r3, [pc, #520]	; (8009028 <_dtoa_r+0x628>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	46d0      	mov	r8, sl
 8008e26:	46d9      	mov	r9, fp
 8008e28:	4682      	mov	sl, r0
 8008e2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e2e:	2e00      	cmp	r6, #0
 8008e30:	d158      	bne.n	8008ee4 <_dtoa_r+0x4e4>
 8008e32:	4b7e      	ldr	r3, [pc, #504]	; (800902c <_dtoa_r+0x62c>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fa25 	bl	8000288 <__aeabi_dsub>
 8008e3e:	4652      	mov	r2, sl
 8008e40:	465b      	mov	r3, fp
 8008e42:	4680      	mov	r8, r0
 8008e44:	4689      	mov	r9, r1
 8008e46:	f7f7 fe67 	bl	8000b18 <__aeabi_dcmpgt>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	f040 8295 	bne.w	800937a <_dtoa_r+0x97a>
 8008e50:	4652      	mov	r2, sl
 8008e52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e56:	4640      	mov	r0, r8
 8008e58:	4649      	mov	r1, r9
 8008e5a:	f7f7 fe3f 	bl	8000adc <__aeabi_dcmplt>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f040 8289 	bne.w	8009376 <_dtoa_r+0x976>
 8008e64:	ec5b ab19 	vmov	sl, fp, d9
 8008e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f2c0 8148 	blt.w	8009100 <_dtoa_r+0x700>
 8008e70:	9a00      	ldr	r2, [sp, #0]
 8008e72:	2a0e      	cmp	r2, #14
 8008e74:	f300 8144 	bgt.w	8009100 <_dtoa_r+0x700>
 8008e78:	4b67      	ldr	r3, [pc, #412]	; (8009018 <_dtoa_r+0x618>)
 8008e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f280 80d5 	bge.w	8009034 <_dtoa_r+0x634>
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f300 80d1 	bgt.w	8009034 <_dtoa_r+0x634>
 8008e92:	f040 826f 	bne.w	8009374 <_dtoa_r+0x974>
 8008e96:	4b65      	ldr	r3, [pc, #404]	; (800902c <_dtoa_r+0x62c>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 fbab 	bl	80005f8 <__aeabi_dmul>
 8008ea2:	4652      	mov	r2, sl
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	f7f7 fe2d 	bl	8000b04 <__aeabi_dcmpge>
 8008eaa:	9e03      	ldr	r6, [sp, #12]
 8008eac:	4637      	mov	r7, r6
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f040 8245 	bne.w	800933e <_dtoa_r+0x93e>
 8008eb4:	9d01      	ldr	r5, [sp, #4]
 8008eb6:	2331      	movs	r3, #49	; 0x31
 8008eb8:	f805 3b01 	strb.w	r3, [r5], #1
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	e240      	b.n	8009346 <_dtoa_r+0x946>
 8008ec4:	07f2      	lsls	r2, r6, #31
 8008ec6:	d505      	bpl.n	8008ed4 <_dtoa_r+0x4d4>
 8008ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ecc:	f7f7 fb94 	bl	80005f8 <__aeabi_dmul>
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	1076      	asrs	r6, r6, #1
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	e777      	b.n	8008dca <_dtoa_r+0x3ca>
 8008eda:	2502      	movs	r5, #2
 8008edc:	e779      	b.n	8008dd2 <_dtoa_r+0x3d2>
 8008ede:	9f00      	ldr	r7, [sp, #0]
 8008ee0:	9e03      	ldr	r6, [sp, #12]
 8008ee2:	e794      	b.n	8008e0e <_dtoa_r+0x40e>
 8008ee4:	9901      	ldr	r1, [sp, #4]
 8008ee6:	4b4c      	ldr	r3, [pc, #304]	; (8009018 <_dtoa_r+0x618>)
 8008ee8:	4431      	add	r1, r6
 8008eea:	910d      	str	r1, [sp, #52]	; 0x34
 8008eec:	9908      	ldr	r1, [sp, #32]
 8008eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ef2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d043      	beq.n	8008f82 <_dtoa_r+0x582>
 8008efa:	494d      	ldr	r1, [pc, #308]	; (8009030 <_dtoa_r+0x630>)
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7f7 fca5 	bl	800084c <__aeabi_ddiv>
 8008f02:	4652      	mov	r2, sl
 8008f04:	465b      	mov	r3, fp
 8008f06:	f7f7 f9bf 	bl	8000288 <__aeabi_dsub>
 8008f0a:	9d01      	ldr	r5, [sp, #4]
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	468b      	mov	fp, r1
 8008f10:	4649      	mov	r1, r9
 8008f12:	4640      	mov	r0, r8
 8008f14:	f7f7 fe20 	bl	8000b58 <__aeabi_d2iz>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	f7f7 fb03 	bl	8000524 <__aeabi_i2d>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 f9af 	bl	8000288 <__aeabi_dsub>
 8008f2a:	3630      	adds	r6, #48	; 0x30
 8008f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f30:	4652      	mov	r2, sl
 8008f32:	465b      	mov	r3, fp
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	f7f7 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d163      	bne.n	8009008 <_dtoa_r+0x608>
 8008f40:	4642      	mov	r2, r8
 8008f42:	464b      	mov	r3, r9
 8008f44:	4936      	ldr	r1, [pc, #216]	; (8009020 <_dtoa_r+0x620>)
 8008f46:	2000      	movs	r0, #0
 8008f48:	f7f7 f99e 	bl	8000288 <__aeabi_dsub>
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	f7f7 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f040 80b5 	bne.w	80090c4 <_dtoa_r+0x6c4>
 8008f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	d081      	beq.n	8008e64 <_dtoa_r+0x464>
 8008f60:	4b30      	ldr	r3, [pc, #192]	; (8009024 <_dtoa_r+0x624>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	4650      	mov	r0, sl
 8008f66:	4659      	mov	r1, fp
 8008f68:	f7f7 fb46 	bl	80005f8 <__aeabi_dmul>
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <_dtoa_r+0x624>)
 8008f6e:	4682      	mov	sl, r0
 8008f70:	468b      	mov	fp, r1
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	2200      	movs	r2, #0
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	4689      	mov	r9, r1
 8008f80:	e7c6      	b.n	8008f10 <_dtoa_r+0x510>
 8008f82:	4650      	mov	r0, sl
 8008f84:	4659      	mov	r1, fp
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f8c:	9d01      	ldr	r5, [sp, #4]
 8008f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f90:	4682      	mov	sl, r0
 8008f92:	468b      	mov	fp, r1
 8008f94:	4649      	mov	r1, r9
 8008f96:	4640      	mov	r0, r8
 8008f98:	f7f7 fdde 	bl	8000b58 <__aeabi_d2iz>
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	f7f7 fac1 	bl	8000524 <__aeabi_i2d>
 8008fa2:	3630      	adds	r6, #48	; 0x30
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	f7f7 f96c 	bl	8000288 <__aeabi_dsub>
 8008fb0:	f805 6b01 	strb.w	r6, [r5], #1
 8008fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4689      	mov	r9, r1
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	d124      	bne.n	800900c <_dtoa_r+0x60c>
 8008fc2:	4b1b      	ldr	r3, [pc, #108]	; (8009030 <_dtoa_r+0x630>)
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	4659      	mov	r1, fp
 8008fc8:	f7f7 f960 	bl	800028c <__adddf3>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	f7f7 fda0 	bl	8000b18 <__aeabi_dcmpgt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d173      	bne.n	80090c4 <_dtoa_r+0x6c4>
 8008fdc:	4652      	mov	r2, sl
 8008fde:	465b      	mov	r3, fp
 8008fe0:	4913      	ldr	r1, [pc, #76]	; (8009030 <_dtoa_r+0x630>)
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f7f7 f950 	bl	8000288 <__aeabi_dsub>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 fd74 	bl	8000adc <__aeabi_dcmplt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f af35 	beq.w	8008e64 <_dtoa_r+0x464>
 8008ffa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ffc:	1e6b      	subs	r3, r5, #1
 8008ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009000:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009004:	2b30      	cmp	r3, #48	; 0x30
 8009006:	d0f8      	beq.n	8008ffa <_dtoa_r+0x5fa>
 8009008:	9700      	str	r7, [sp, #0]
 800900a:	e049      	b.n	80090a0 <_dtoa_r+0x6a0>
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <_dtoa_r+0x624>)
 800900e:	f7f7 faf3 	bl	80005f8 <__aeabi_dmul>
 8009012:	4680      	mov	r8, r0
 8009014:	4689      	mov	r9, r1
 8009016:	e7bd      	b.n	8008f94 <_dtoa_r+0x594>
 8009018:	0800c620 	.word	0x0800c620
 800901c:	0800c5f8 	.word	0x0800c5f8
 8009020:	3ff00000 	.word	0x3ff00000
 8009024:	40240000 	.word	0x40240000
 8009028:	401c0000 	.word	0x401c0000
 800902c:	40140000 	.word	0x40140000
 8009030:	3fe00000 	.word	0x3fe00000
 8009034:	9d01      	ldr	r5, [sp, #4]
 8009036:	4656      	mov	r6, sl
 8009038:	465f      	mov	r7, fp
 800903a:	4642      	mov	r2, r8
 800903c:	464b      	mov	r3, r9
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 fc03 	bl	800084c <__aeabi_ddiv>
 8009046:	f7f7 fd87 	bl	8000b58 <__aeabi_d2iz>
 800904a:	4682      	mov	sl, r0
 800904c:	f7f7 fa6a 	bl	8000524 <__aeabi_i2d>
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	f7f7 fad0 	bl	80005f8 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	f805 6b01 	strb.w	r6, [r5], #1
 800906c:	9e01      	ldr	r6, [sp, #4]
 800906e:	9f03      	ldr	r7, [sp, #12]
 8009070:	1bae      	subs	r6, r5, r6
 8009072:	42b7      	cmp	r7, r6
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	d135      	bne.n	80090e6 <_dtoa_r+0x6e6>
 800907a:	f7f7 f907 	bl	800028c <__adddf3>
 800907e:	4642      	mov	r2, r8
 8009080:	464b      	mov	r3, r9
 8009082:	4606      	mov	r6, r0
 8009084:	460f      	mov	r7, r1
 8009086:	f7f7 fd47 	bl	8000b18 <__aeabi_dcmpgt>
 800908a:	b9d0      	cbnz	r0, 80090c2 <_dtoa_r+0x6c2>
 800908c:	4642      	mov	r2, r8
 800908e:	464b      	mov	r3, r9
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009098:	b110      	cbz	r0, 80090a0 <_dtoa_r+0x6a0>
 800909a:	f01a 0f01 	tst.w	sl, #1
 800909e:	d110      	bne.n	80090c2 <_dtoa_r+0x6c2>
 80090a0:	4620      	mov	r0, r4
 80090a2:	ee18 1a10 	vmov	r1, s16
 80090a6:	f001 f899 	bl	800a1dc <_Bfree>
 80090aa:	2300      	movs	r3, #0
 80090ac:	9800      	ldr	r0, [sp, #0]
 80090ae:	702b      	strb	r3, [r5, #0]
 80090b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090b2:	3001      	adds	r0, #1
 80090b4:	6018      	str	r0, [r3, #0]
 80090b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f43f acf1 	beq.w	8008aa0 <_dtoa_r+0xa0>
 80090be:	601d      	str	r5, [r3, #0]
 80090c0:	e4ee      	b.n	8008aa0 <_dtoa_r+0xa0>
 80090c2:	9f00      	ldr	r7, [sp, #0]
 80090c4:	462b      	mov	r3, r5
 80090c6:	461d      	mov	r5, r3
 80090c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090cc:	2a39      	cmp	r2, #57	; 0x39
 80090ce:	d106      	bne.n	80090de <_dtoa_r+0x6de>
 80090d0:	9a01      	ldr	r2, [sp, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d1f7      	bne.n	80090c6 <_dtoa_r+0x6c6>
 80090d6:	9901      	ldr	r1, [sp, #4]
 80090d8:	2230      	movs	r2, #48	; 0x30
 80090da:	3701      	adds	r7, #1
 80090dc:	700a      	strb	r2, [r1, #0]
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	3201      	adds	r2, #1
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	e790      	b.n	8009008 <_dtoa_r+0x608>
 80090e6:	4ba6      	ldr	r3, [pc, #664]	; (8009380 <_dtoa_r+0x980>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	f7f7 fa85 	bl	80005f8 <__aeabi_dmul>
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	4606      	mov	r6, r0
 80090f4:	460f      	mov	r7, r1
 80090f6:	f7f7 fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d09d      	beq.n	800903a <_dtoa_r+0x63a>
 80090fe:	e7cf      	b.n	80090a0 <_dtoa_r+0x6a0>
 8009100:	9a08      	ldr	r2, [sp, #32]
 8009102:	2a00      	cmp	r2, #0
 8009104:	f000 80d7 	beq.w	80092b6 <_dtoa_r+0x8b6>
 8009108:	9a06      	ldr	r2, [sp, #24]
 800910a:	2a01      	cmp	r2, #1
 800910c:	f300 80ba 	bgt.w	8009284 <_dtoa_r+0x884>
 8009110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009112:	2a00      	cmp	r2, #0
 8009114:	f000 80b2 	beq.w	800927c <_dtoa_r+0x87c>
 8009118:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800911c:	9e07      	ldr	r6, [sp, #28]
 800911e:	9d04      	ldr	r5, [sp, #16]
 8009120:	9a04      	ldr	r2, [sp, #16]
 8009122:	441a      	add	r2, r3
 8009124:	9204      	str	r2, [sp, #16]
 8009126:	9a05      	ldr	r2, [sp, #20]
 8009128:	2101      	movs	r1, #1
 800912a:	441a      	add	r2, r3
 800912c:	4620      	mov	r0, r4
 800912e:	9205      	str	r2, [sp, #20]
 8009130:	f001 f956 	bl	800a3e0 <__i2b>
 8009134:	4607      	mov	r7, r0
 8009136:	2d00      	cmp	r5, #0
 8009138:	dd0c      	ble.n	8009154 <_dtoa_r+0x754>
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	dd09      	ble.n	8009154 <_dtoa_r+0x754>
 8009140:	42ab      	cmp	r3, r5
 8009142:	9a04      	ldr	r2, [sp, #16]
 8009144:	bfa8      	it	ge
 8009146:	462b      	movge	r3, r5
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	9204      	str	r2, [sp, #16]
 800914c:	9a05      	ldr	r2, [sp, #20]
 800914e:	1aed      	subs	r5, r5, r3
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	b31b      	cbz	r3, 80091a0 <_dtoa_r+0x7a0>
 8009158:	9b08      	ldr	r3, [sp, #32]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 80af 	beq.w	80092be <_dtoa_r+0x8be>
 8009160:	2e00      	cmp	r6, #0
 8009162:	dd13      	ble.n	800918c <_dtoa_r+0x78c>
 8009164:	4639      	mov	r1, r7
 8009166:	4632      	mov	r2, r6
 8009168:	4620      	mov	r0, r4
 800916a:	f001 f9f9 	bl	800a560 <__pow5mult>
 800916e:	ee18 2a10 	vmov	r2, s16
 8009172:	4601      	mov	r1, r0
 8009174:	4607      	mov	r7, r0
 8009176:	4620      	mov	r0, r4
 8009178:	f001 f948 	bl	800a40c <__multiply>
 800917c:	ee18 1a10 	vmov	r1, s16
 8009180:	4680      	mov	r8, r0
 8009182:	4620      	mov	r0, r4
 8009184:	f001 f82a 	bl	800a1dc <_Bfree>
 8009188:	ee08 8a10 	vmov	s16, r8
 800918c:	9b07      	ldr	r3, [sp, #28]
 800918e:	1b9a      	subs	r2, r3, r6
 8009190:	d006      	beq.n	80091a0 <_dtoa_r+0x7a0>
 8009192:	ee18 1a10 	vmov	r1, s16
 8009196:	4620      	mov	r0, r4
 8009198:	f001 f9e2 	bl	800a560 <__pow5mult>
 800919c:	ee08 0a10 	vmov	s16, r0
 80091a0:	2101      	movs	r1, #1
 80091a2:	4620      	mov	r0, r4
 80091a4:	f001 f91c 	bl	800a3e0 <__i2b>
 80091a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	4606      	mov	r6, r0
 80091ae:	f340 8088 	ble.w	80092c2 <_dtoa_r+0x8c2>
 80091b2:	461a      	mov	r2, r3
 80091b4:	4601      	mov	r1, r0
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 f9d2 	bl	800a560 <__pow5mult>
 80091bc:	9b06      	ldr	r3, [sp, #24]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	4606      	mov	r6, r0
 80091c2:	f340 8081 	ble.w	80092c8 <_dtoa_r+0x8c8>
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	6933      	ldr	r3, [r6, #16]
 80091cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091d0:	6918      	ldr	r0, [r3, #16]
 80091d2:	f001 f8b5 	bl	800a340 <__hi0bits>
 80091d6:	f1c0 0020 	rsb	r0, r0, #32
 80091da:	9b05      	ldr	r3, [sp, #20]
 80091dc:	4418      	add	r0, r3
 80091de:	f010 001f 	ands.w	r0, r0, #31
 80091e2:	f000 8092 	beq.w	800930a <_dtoa_r+0x90a>
 80091e6:	f1c0 0320 	rsb	r3, r0, #32
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	f340 808a 	ble.w	8009304 <_dtoa_r+0x904>
 80091f0:	f1c0 001c 	rsb	r0, r0, #28
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	4403      	add	r3, r0
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9b05      	ldr	r3, [sp, #20]
 80091fc:	4403      	add	r3, r0
 80091fe:	4405      	add	r5, r0
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	9b04      	ldr	r3, [sp, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd07      	ble.n	8009218 <_dtoa_r+0x818>
 8009208:	ee18 1a10 	vmov	r1, s16
 800920c:	461a      	mov	r2, r3
 800920e:	4620      	mov	r0, r4
 8009210:	f001 fa00 	bl	800a614 <__lshift>
 8009214:	ee08 0a10 	vmov	s16, r0
 8009218:	9b05      	ldr	r3, [sp, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd05      	ble.n	800922a <_dtoa_r+0x82a>
 800921e:	4631      	mov	r1, r6
 8009220:	461a      	mov	r2, r3
 8009222:	4620      	mov	r0, r4
 8009224:	f001 f9f6 	bl	800a614 <__lshift>
 8009228:	4606      	mov	r6, r0
 800922a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d06e      	beq.n	800930e <_dtoa_r+0x90e>
 8009230:	ee18 0a10 	vmov	r0, s16
 8009234:	4631      	mov	r1, r6
 8009236:	f001 fa5d 	bl	800a6f4 <__mcmp>
 800923a:	2800      	cmp	r0, #0
 800923c:	da67      	bge.n	800930e <_dtoa_r+0x90e>
 800923e:	9b00      	ldr	r3, [sp, #0]
 8009240:	3b01      	subs	r3, #1
 8009242:	ee18 1a10 	vmov	r1, s16
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	220a      	movs	r2, #10
 800924a:	2300      	movs	r3, #0
 800924c:	4620      	mov	r0, r4
 800924e:	f000 ffe7 	bl	800a220 <__multadd>
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	ee08 0a10 	vmov	s16, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 81b1 	beq.w	80095c0 <_dtoa_r+0xbc0>
 800925e:	2300      	movs	r3, #0
 8009260:	4639      	mov	r1, r7
 8009262:	220a      	movs	r2, #10
 8009264:	4620      	mov	r0, r4
 8009266:	f000 ffdb 	bl	800a220 <__multadd>
 800926a:	9b02      	ldr	r3, [sp, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	4607      	mov	r7, r0
 8009270:	f300 808e 	bgt.w	8009390 <_dtoa_r+0x990>
 8009274:	9b06      	ldr	r3, [sp, #24]
 8009276:	2b02      	cmp	r3, #2
 8009278:	dc51      	bgt.n	800931e <_dtoa_r+0x91e>
 800927a:	e089      	b.n	8009390 <_dtoa_r+0x990>
 800927c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800927e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009282:	e74b      	b.n	800911c <_dtoa_r+0x71c>
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	1e5e      	subs	r6, r3, #1
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	42b3      	cmp	r3, r6
 800928c:	bfbf      	itttt	lt
 800928e:	9b07      	ldrlt	r3, [sp, #28]
 8009290:	9607      	strlt	r6, [sp, #28]
 8009292:	1af2      	sublt	r2, r6, r3
 8009294:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009296:	bfb6      	itet	lt
 8009298:	189b      	addlt	r3, r3, r2
 800929a:	1b9e      	subge	r6, r3, r6
 800929c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	bfb8      	it	lt
 80092a2:	2600      	movlt	r6, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bfb7      	itett	lt
 80092a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092b0:	1a9d      	sublt	r5, r3, r2
 80092b2:	2300      	movlt	r3, #0
 80092b4:	e734      	b.n	8009120 <_dtoa_r+0x720>
 80092b6:	9e07      	ldr	r6, [sp, #28]
 80092b8:	9d04      	ldr	r5, [sp, #16]
 80092ba:	9f08      	ldr	r7, [sp, #32]
 80092bc:	e73b      	b.n	8009136 <_dtoa_r+0x736>
 80092be:	9a07      	ldr	r2, [sp, #28]
 80092c0:	e767      	b.n	8009192 <_dtoa_r+0x792>
 80092c2:	9b06      	ldr	r3, [sp, #24]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	dc18      	bgt.n	80092fa <_dtoa_r+0x8fa>
 80092c8:	f1ba 0f00 	cmp.w	sl, #0
 80092cc:	d115      	bne.n	80092fa <_dtoa_r+0x8fa>
 80092ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092d2:	b993      	cbnz	r3, 80092fa <_dtoa_r+0x8fa>
 80092d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092d8:	0d1b      	lsrs	r3, r3, #20
 80092da:	051b      	lsls	r3, r3, #20
 80092dc:	b183      	cbz	r3, 8009300 <_dtoa_r+0x900>
 80092de:	9b04      	ldr	r3, [sp, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	9b05      	ldr	r3, [sp, #20]
 80092e6:	3301      	adds	r3, #1
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	f04f 0801 	mov.w	r8, #1
 80092ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f47f af6a 	bne.w	80091ca <_dtoa_r+0x7ca>
 80092f6:	2001      	movs	r0, #1
 80092f8:	e76f      	b.n	80091da <_dtoa_r+0x7da>
 80092fa:	f04f 0800 	mov.w	r8, #0
 80092fe:	e7f6      	b.n	80092ee <_dtoa_r+0x8ee>
 8009300:	4698      	mov	r8, r3
 8009302:	e7f4      	b.n	80092ee <_dtoa_r+0x8ee>
 8009304:	f43f af7d 	beq.w	8009202 <_dtoa_r+0x802>
 8009308:	4618      	mov	r0, r3
 800930a:	301c      	adds	r0, #28
 800930c:	e772      	b.n	80091f4 <_dtoa_r+0x7f4>
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	dc37      	bgt.n	8009384 <_dtoa_r+0x984>
 8009314:	9b06      	ldr	r3, [sp, #24]
 8009316:	2b02      	cmp	r3, #2
 8009318:	dd34      	ble.n	8009384 <_dtoa_r+0x984>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	9302      	str	r3, [sp, #8]
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	b96b      	cbnz	r3, 800933e <_dtoa_r+0x93e>
 8009322:	4631      	mov	r1, r6
 8009324:	2205      	movs	r2, #5
 8009326:	4620      	mov	r0, r4
 8009328:	f000 ff7a 	bl	800a220 <__multadd>
 800932c:	4601      	mov	r1, r0
 800932e:	4606      	mov	r6, r0
 8009330:	ee18 0a10 	vmov	r0, s16
 8009334:	f001 f9de 	bl	800a6f4 <__mcmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	f73f adbb 	bgt.w	8008eb4 <_dtoa_r+0x4b4>
 800933e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009340:	9d01      	ldr	r5, [sp, #4]
 8009342:	43db      	mvns	r3, r3
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	4631      	mov	r1, r6
 800934c:	4620      	mov	r0, r4
 800934e:	f000 ff45 	bl	800a1dc <_Bfree>
 8009352:	2f00      	cmp	r7, #0
 8009354:	f43f aea4 	beq.w	80090a0 <_dtoa_r+0x6a0>
 8009358:	f1b8 0f00 	cmp.w	r8, #0
 800935c:	d005      	beq.n	800936a <_dtoa_r+0x96a>
 800935e:	45b8      	cmp	r8, r7
 8009360:	d003      	beq.n	800936a <_dtoa_r+0x96a>
 8009362:	4641      	mov	r1, r8
 8009364:	4620      	mov	r0, r4
 8009366:	f000 ff39 	bl	800a1dc <_Bfree>
 800936a:	4639      	mov	r1, r7
 800936c:	4620      	mov	r0, r4
 800936e:	f000 ff35 	bl	800a1dc <_Bfree>
 8009372:	e695      	b.n	80090a0 <_dtoa_r+0x6a0>
 8009374:	2600      	movs	r6, #0
 8009376:	4637      	mov	r7, r6
 8009378:	e7e1      	b.n	800933e <_dtoa_r+0x93e>
 800937a:	9700      	str	r7, [sp, #0]
 800937c:	4637      	mov	r7, r6
 800937e:	e599      	b.n	8008eb4 <_dtoa_r+0x4b4>
 8009380:	40240000 	.word	0x40240000
 8009384:	9b08      	ldr	r3, [sp, #32]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 80ca 	beq.w	8009520 <_dtoa_r+0xb20>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	9302      	str	r3, [sp, #8]
 8009390:	2d00      	cmp	r5, #0
 8009392:	dd05      	ble.n	80093a0 <_dtoa_r+0x9a0>
 8009394:	4639      	mov	r1, r7
 8009396:	462a      	mov	r2, r5
 8009398:	4620      	mov	r0, r4
 800939a:	f001 f93b 	bl	800a614 <__lshift>
 800939e:	4607      	mov	r7, r0
 80093a0:	f1b8 0f00 	cmp.w	r8, #0
 80093a4:	d05b      	beq.n	800945e <_dtoa_r+0xa5e>
 80093a6:	6879      	ldr	r1, [r7, #4]
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fed7 	bl	800a15c <_Balloc>
 80093ae:	4605      	mov	r5, r0
 80093b0:	b928      	cbnz	r0, 80093be <_dtoa_r+0x9be>
 80093b2:	4b87      	ldr	r3, [pc, #540]	; (80095d0 <_dtoa_r+0xbd0>)
 80093b4:	4602      	mov	r2, r0
 80093b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093ba:	f7ff bb3b 	b.w	8008a34 <_dtoa_r+0x34>
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	3202      	adds	r2, #2
 80093c2:	0092      	lsls	r2, r2, #2
 80093c4:	f107 010c 	add.w	r1, r7, #12
 80093c8:	300c      	adds	r0, #12
 80093ca:	f7fd fb1d 	bl	8006a08 <memcpy>
 80093ce:	2201      	movs	r2, #1
 80093d0:	4629      	mov	r1, r5
 80093d2:	4620      	mov	r0, r4
 80093d4:	f001 f91e 	bl	800a614 <__lshift>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	f103 0901 	add.w	r9, r3, #1
 80093de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093e2:	4413      	add	r3, r2
 80093e4:	9305      	str	r3, [sp, #20]
 80093e6:	f00a 0301 	and.w	r3, sl, #1
 80093ea:	46b8      	mov	r8, r7
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	4607      	mov	r7, r0
 80093f0:	4631      	mov	r1, r6
 80093f2:	ee18 0a10 	vmov	r0, s16
 80093f6:	f7ff fa75 	bl	80088e4 <quorem>
 80093fa:	4641      	mov	r1, r8
 80093fc:	9002      	str	r0, [sp, #8]
 80093fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009402:	ee18 0a10 	vmov	r0, s16
 8009406:	f001 f975 	bl	800a6f4 <__mcmp>
 800940a:	463a      	mov	r2, r7
 800940c:	9003      	str	r0, [sp, #12]
 800940e:	4631      	mov	r1, r6
 8009410:	4620      	mov	r0, r4
 8009412:	f001 f98b 	bl	800a72c <__mdiff>
 8009416:	68c2      	ldr	r2, [r0, #12]
 8009418:	f109 3bff 	add.w	fp, r9, #4294967295
 800941c:	4605      	mov	r5, r0
 800941e:	bb02      	cbnz	r2, 8009462 <_dtoa_r+0xa62>
 8009420:	4601      	mov	r1, r0
 8009422:	ee18 0a10 	vmov	r0, s16
 8009426:	f001 f965 	bl	800a6f4 <__mcmp>
 800942a:	4602      	mov	r2, r0
 800942c:	4629      	mov	r1, r5
 800942e:	4620      	mov	r0, r4
 8009430:	9207      	str	r2, [sp, #28]
 8009432:	f000 fed3 	bl	800a1dc <_Bfree>
 8009436:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800943a:	ea43 0102 	orr.w	r1, r3, r2
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	430b      	orrs	r3, r1
 8009442:	464d      	mov	r5, r9
 8009444:	d10f      	bne.n	8009466 <_dtoa_r+0xa66>
 8009446:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800944a:	d02a      	beq.n	80094a2 <_dtoa_r+0xaa2>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd02      	ble.n	8009458 <_dtoa_r+0xa58>
 8009452:	9b02      	ldr	r3, [sp, #8]
 8009454:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009458:	f88b a000 	strb.w	sl, [fp]
 800945c:	e775      	b.n	800934a <_dtoa_r+0x94a>
 800945e:	4638      	mov	r0, r7
 8009460:	e7ba      	b.n	80093d8 <_dtoa_r+0x9d8>
 8009462:	2201      	movs	r2, #1
 8009464:	e7e2      	b.n	800942c <_dtoa_r+0xa2c>
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	db04      	blt.n	8009476 <_dtoa_r+0xa76>
 800946c:	9906      	ldr	r1, [sp, #24]
 800946e:	430b      	orrs	r3, r1
 8009470:	9904      	ldr	r1, [sp, #16]
 8009472:	430b      	orrs	r3, r1
 8009474:	d122      	bne.n	80094bc <_dtoa_r+0xabc>
 8009476:	2a00      	cmp	r2, #0
 8009478:	ddee      	ble.n	8009458 <_dtoa_r+0xa58>
 800947a:	ee18 1a10 	vmov	r1, s16
 800947e:	2201      	movs	r2, #1
 8009480:	4620      	mov	r0, r4
 8009482:	f001 f8c7 	bl	800a614 <__lshift>
 8009486:	4631      	mov	r1, r6
 8009488:	ee08 0a10 	vmov	s16, r0
 800948c:	f001 f932 	bl	800a6f4 <__mcmp>
 8009490:	2800      	cmp	r0, #0
 8009492:	dc03      	bgt.n	800949c <_dtoa_r+0xa9c>
 8009494:	d1e0      	bne.n	8009458 <_dtoa_r+0xa58>
 8009496:	f01a 0f01 	tst.w	sl, #1
 800949a:	d0dd      	beq.n	8009458 <_dtoa_r+0xa58>
 800949c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094a0:	d1d7      	bne.n	8009452 <_dtoa_r+0xa52>
 80094a2:	2339      	movs	r3, #57	; 0x39
 80094a4:	f88b 3000 	strb.w	r3, [fp]
 80094a8:	462b      	mov	r3, r5
 80094aa:	461d      	mov	r5, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094b2:	2a39      	cmp	r2, #57	; 0x39
 80094b4:	d071      	beq.n	800959a <_dtoa_r+0xb9a>
 80094b6:	3201      	adds	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e746      	b.n	800934a <_dtoa_r+0x94a>
 80094bc:	2a00      	cmp	r2, #0
 80094be:	dd07      	ble.n	80094d0 <_dtoa_r+0xad0>
 80094c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094c4:	d0ed      	beq.n	80094a2 <_dtoa_r+0xaa2>
 80094c6:	f10a 0301 	add.w	r3, sl, #1
 80094ca:	f88b 3000 	strb.w	r3, [fp]
 80094ce:	e73c      	b.n	800934a <_dtoa_r+0x94a>
 80094d0:	9b05      	ldr	r3, [sp, #20]
 80094d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094d6:	4599      	cmp	r9, r3
 80094d8:	d047      	beq.n	800956a <_dtoa_r+0xb6a>
 80094da:	ee18 1a10 	vmov	r1, s16
 80094de:	2300      	movs	r3, #0
 80094e0:	220a      	movs	r2, #10
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 fe9c 	bl	800a220 <__multadd>
 80094e8:	45b8      	cmp	r8, r7
 80094ea:	ee08 0a10 	vmov	s16, r0
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	f04f 020a 	mov.w	r2, #10
 80094f6:	4641      	mov	r1, r8
 80094f8:	4620      	mov	r0, r4
 80094fa:	d106      	bne.n	800950a <_dtoa_r+0xb0a>
 80094fc:	f000 fe90 	bl	800a220 <__multadd>
 8009500:	4680      	mov	r8, r0
 8009502:	4607      	mov	r7, r0
 8009504:	f109 0901 	add.w	r9, r9, #1
 8009508:	e772      	b.n	80093f0 <_dtoa_r+0x9f0>
 800950a:	f000 fe89 	bl	800a220 <__multadd>
 800950e:	4639      	mov	r1, r7
 8009510:	4680      	mov	r8, r0
 8009512:	2300      	movs	r3, #0
 8009514:	220a      	movs	r2, #10
 8009516:	4620      	mov	r0, r4
 8009518:	f000 fe82 	bl	800a220 <__multadd>
 800951c:	4607      	mov	r7, r0
 800951e:	e7f1      	b.n	8009504 <_dtoa_r+0xb04>
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	9302      	str	r3, [sp, #8]
 8009524:	9d01      	ldr	r5, [sp, #4]
 8009526:	ee18 0a10 	vmov	r0, s16
 800952a:	4631      	mov	r1, r6
 800952c:	f7ff f9da 	bl	80088e4 <quorem>
 8009530:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	f805 ab01 	strb.w	sl, [r5], #1
 800953a:	1aea      	subs	r2, r5, r3
 800953c:	9b02      	ldr	r3, [sp, #8]
 800953e:	4293      	cmp	r3, r2
 8009540:	dd09      	ble.n	8009556 <_dtoa_r+0xb56>
 8009542:	ee18 1a10 	vmov	r1, s16
 8009546:	2300      	movs	r3, #0
 8009548:	220a      	movs	r2, #10
 800954a:	4620      	mov	r0, r4
 800954c:	f000 fe68 	bl	800a220 <__multadd>
 8009550:	ee08 0a10 	vmov	s16, r0
 8009554:	e7e7      	b.n	8009526 <_dtoa_r+0xb26>
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfc8      	it	gt
 800955c:	461d      	movgt	r5, r3
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	bfd8      	it	le
 8009562:	2501      	movle	r5, #1
 8009564:	441d      	add	r5, r3
 8009566:	f04f 0800 	mov.w	r8, #0
 800956a:	ee18 1a10 	vmov	r1, s16
 800956e:	2201      	movs	r2, #1
 8009570:	4620      	mov	r0, r4
 8009572:	f001 f84f 	bl	800a614 <__lshift>
 8009576:	4631      	mov	r1, r6
 8009578:	ee08 0a10 	vmov	s16, r0
 800957c:	f001 f8ba 	bl	800a6f4 <__mcmp>
 8009580:	2800      	cmp	r0, #0
 8009582:	dc91      	bgt.n	80094a8 <_dtoa_r+0xaa8>
 8009584:	d102      	bne.n	800958c <_dtoa_r+0xb8c>
 8009586:	f01a 0f01 	tst.w	sl, #1
 800958a:	d18d      	bne.n	80094a8 <_dtoa_r+0xaa8>
 800958c:	462b      	mov	r3, r5
 800958e:	461d      	mov	r5, r3
 8009590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009594:	2a30      	cmp	r2, #48	; 0x30
 8009596:	d0fa      	beq.n	800958e <_dtoa_r+0xb8e>
 8009598:	e6d7      	b.n	800934a <_dtoa_r+0x94a>
 800959a:	9a01      	ldr	r2, [sp, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d184      	bne.n	80094aa <_dtoa_r+0xaaa>
 80095a0:	9b00      	ldr	r3, [sp, #0]
 80095a2:	3301      	adds	r3, #1
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	2331      	movs	r3, #49	; 0x31
 80095a8:	7013      	strb	r3, [r2, #0]
 80095aa:	e6ce      	b.n	800934a <_dtoa_r+0x94a>
 80095ac:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <_dtoa_r+0xbd4>)
 80095ae:	f7ff ba95 	b.w	8008adc <_dtoa_r+0xdc>
 80095b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f47f aa6e 	bne.w	8008a96 <_dtoa_r+0x96>
 80095ba:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <_dtoa_r+0xbd8>)
 80095bc:	f7ff ba8e 	b.w	8008adc <_dtoa_r+0xdc>
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dcae      	bgt.n	8009524 <_dtoa_r+0xb24>
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	f73f aea8 	bgt.w	800931e <_dtoa_r+0x91e>
 80095ce:	e7a9      	b.n	8009524 <_dtoa_r+0xb24>
 80095d0:	0800c4a8 	.word	0x0800c4a8
 80095d4:	0800c709 	.word	0x0800c709
 80095d8:	0800c429 	.word	0x0800c429

080095dc <__sflush_r>:
 80095dc:	898a      	ldrh	r2, [r1, #12]
 80095de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	4605      	mov	r5, r0
 80095e4:	0710      	lsls	r0, r2, #28
 80095e6:	460c      	mov	r4, r1
 80095e8:	d458      	bmi.n	800969c <__sflush_r+0xc0>
 80095ea:	684b      	ldr	r3, [r1, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc05      	bgt.n	80095fc <__sflush_r+0x20>
 80095f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dc02      	bgt.n	80095fc <__sflush_r+0x20>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d0f9      	beq.n	80095f6 <__sflush_r+0x1a>
 8009602:	2300      	movs	r3, #0
 8009604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009608:	682f      	ldr	r7, [r5, #0]
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	d032      	beq.n	8009674 <__sflush_r+0x98>
 800960e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	075a      	lsls	r2, r3, #29
 8009614:	d505      	bpl.n	8009622 <__sflush_r+0x46>
 8009616:	6863      	ldr	r3, [r4, #4]
 8009618:	1ac0      	subs	r0, r0, r3
 800961a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800961c:	b10b      	cbz	r3, 8009622 <__sflush_r+0x46>
 800961e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009620:	1ac0      	subs	r0, r0, r3
 8009622:	2300      	movs	r3, #0
 8009624:	4602      	mov	r2, r0
 8009626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009628:	6a21      	ldr	r1, [r4, #32]
 800962a:	4628      	mov	r0, r5
 800962c:	47b0      	blx	r6
 800962e:	1c43      	adds	r3, r0, #1
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	d106      	bne.n	8009642 <__sflush_r+0x66>
 8009634:	6829      	ldr	r1, [r5, #0]
 8009636:	291d      	cmp	r1, #29
 8009638:	d82c      	bhi.n	8009694 <__sflush_r+0xb8>
 800963a:	4a2a      	ldr	r2, [pc, #168]	; (80096e4 <__sflush_r+0x108>)
 800963c:	40ca      	lsrs	r2, r1
 800963e:	07d6      	lsls	r6, r2, #31
 8009640:	d528      	bpl.n	8009694 <__sflush_r+0xb8>
 8009642:	2200      	movs	r2, #0
 8009644:	6062      	str	r2, [r4, #4]
 8009646:	04d9      	lsls	r1, r3, #19
 8009648:	6922      	ldr	r2, [r4, #16]
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	d504      	bpl.n	8009658 <__sflush_r+0x7c>
 800964e:	1c42      	adds	r2, r0, #1
 8009650:	d101      	bne.n	8009656 <__sflush_r+0x7a>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	b903      	cbnz	r3, 8009658 <__sflush_r+0x7c>
 8009656:	6560      	str	r0, [r4, #84]	; 0x54
 8009658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965a:	602f      	str	r7, [r5, #0]
 800965c:	2900      	cmp	r1, #0
 800965e:	d0ca      	beq.n	80095f6 <__sflush_r+0x1a>
 8009660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009664:	4299      	cmp	r1, r3
 8009666:	d002      	beq.n	800966e <__sflush_r+0x92>
 8009668:	4628      	mov	r0, r5
 800966a:	f001 fa4f 	bl	800ab0c <_free_r>
 800966e:	2000      	movs	r0, #0
 8009670:	6360      	str	r0, [r4, #52]	; 0x34
 8009672:	e7c1      	b.n	80095f8 <__sflush_r+0x1c>
 8009674:	6a21      	ldr	r1, [r4, #32]
 8009676:	2301      	movs	r3, #1
 8009678:	4628      	mov	r0, r5
 800967a:	47b0      	blx	r6
 800967c:	1c41      	adds	r1, r0, #1
 800967e:	d1c7      	bne.n	8009610 <__sflush_r+0x34>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0c4      	beq.n	8009610 <__sflush_r+0x34>
 8009686:	2b1d      	cmp	r3, #29
 8009688:	d001      	beq.n	800968e <__sflush_r+0xb2>
 800968a:	2b16      	cmp	r3, #22
 800968c:	d101      	bne.n	8009692 <__sflush_r+0xb6>
 800968e:	602f      	str	r7, [r5, #0]
 8009690:	e7b1      	b.n	80095f6 <__sflush_r+0x1a>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7ad      	b.n	80095f8 <__sflush_r+0x1c>
 800969c:	690f      	ldr	r7, [r1, #16]
 800969e:	2f00      	cmp	r7, #0
 80096a0:	d0a9      	beq.n	80095f6 <__sflush_r+0x1a>
 80096a2:	0793      	lsls	r3, r2, #30
 80096a4:	680e      	ldr	r6, [r1, #0]
 80096a6:	bf08      	it	eq
 80096a8:	694b      	ldreq	r3, [r1, #20]
 80096aa:	600f      	str	r7, [r1, #0]
 80096ac:	bf18      	it	ne
 80096ae:	2300      	movne	r3, #0
 80096b0:	eba6 0807 	sub.w	r8, r6, r7
 80096b4:	608b      	str	r3, [r1, #8]
 80096b6:	f1b8 0f00 	cmp.w	r8, #0
 80096ba:	dd9c      	ble.n	80095f6 <__sflush_r+0x1a>
 80096bc:	6a21      	ldr	r1, [r4, #32]
 80096be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096c0:	4643      	mov	r3, r8
 80096c2:	463a      	mov	r2, r7
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b0      	blx	r6
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dc06      	bgt.n	80096da <__sflush_r+0xfe>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e78e      	b.n	80095f8 <__sflush_r+0x1c>
 80096da:	4407      	add	r7, r0
 80096dc:	eba8 0800 	sub.w	r8, r8, r0
 80096e0:	e7e9      	b.n	80096b6 <__sflush_r+0xda>
 80096e2:	bf00      	nop
 80096e4:	20400001 	.word	0x20400001

080096e8 <_fflush_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	690b      	ldr	r3, [r1, #16]
 80096ec:	4605      	mov	r5, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	b913      	cbnz	r3, 80096f8 <_fflush_r+0x10>
 80096f2:	2500      	movs	r5, #0
 80096f4:	4628      	mov	r0, r5
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	b118      	cbz	r0, 8009702 <_fflush_r+0x1a>
 80096fa:	6983      	ldr	r3, [r0, #24]
 80096fc:	b90b      	cbnz	r3, 8009702 <_fflush_r+0x1a>
 80096fe:	f000 f887 	bl	8009810 <__sinit>
 8009702:	4b14      	ldr	r3, [pc, #80]	; (8009754 <_fflush_r+0x6c>)
 8009704:	429c      	cmp	r4, r3
 8009706:	d11b      	bne.n	8009740 <_fflush_r+0x58>
 8009708:	686c      	ldr	r4, [r5, #4]
 800970a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0ef      	beq.n	80096f2 <_fflush_r+0xa>
 8009712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009714:	07d0      	lsls	r0, r2, #31
 8009716:	d404      	bmi.n	8009722 <_fflush_r+0x3a>
 8009718:	0599      	lsls	r1, r3, #22
 800971a:	d402      	bmi.n	8009722 <_fflush_r+0x3a>
 800971c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800971e:	f000 fc88 	bl	800a032 <__retarget_lock_acquire_recursive>
 8009722:	4628      	mov	r0, r5
 8009724:	4621      	mov	r1, r4
 8009726:	f7ff ff59 	bl	80095dc <__sflush_r>
 800972a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800972c:	07da      	lsls	r2, r3, #31
 800972e:	4605      	mov	r5, r0
 8009730:	d4e0      	bmi.n	80096f4 <_fflush_r+0xc>
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	059b      	lsls	r3, r3, #22
 8009736:	d4dd      	bmi.n	80096f4 <_fflush_r+0xc>
 8009738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800973a:	f000 fc7b 	bl	800a034 <__retarget_lock_release_recursive>
 800973e:	e7d9      	b.n	80096f4 <_fflush_r+0xc>
 8009740:	4b05      	ldr	r3, [pc, #20]	; (8009758 <_fflush_r+0x70>)
 8009742:	429c      	cmp	r4, r3
 8009744:	d101      	bne.n	800974a <_fflush_r+0x62>
 8009746:	68ac      	ldr	r4, [r5, #8]
 8009748:	e7df      	b.n	800970a <_fflush_r+0x22>
 800974a:	4b04      	ldr	r3, [pc, #16]	; (800975c <_fflush_r+0x74>)
 800974c:	429c      	cmp	r4, r3
 800974e:	bf08      	it	eq
 8009750:	68ec      	ldreq	r4, [r5, #12]
 8009752:	e7da      	b.n	800970a <_fflush_r+0x22>
 8009754:	0800c4dc 	.word	0x0800c4dc
 8009758:	0800c4fc 	.word	0x0800c4fc
 800975c:	0800c4bc 	.word	0x0800c4bc

08009760 <std>:
 8009760:	2300      	movs	r3, #0
 8009762:	b510      	push	{r4, lr}
 8009764:	4604      	mov	r4, r0
 8009766:	e9c0 3300 	strd	r3, r3, [r0]
 800976a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800976e:	6083      	str	r3, [r0, #8]
 8009770:	8181      	strh	r1, [r0, #12]
 8009772:	6643      	str	r3, [r0, #100]	; 0x64
 8009774:	81c2      	strh	r2, [r0, #14]
 8009776:	6183      	str	r3, [r0, #24]
 8009778:	4619      	mov	r1, r3
 800977a:	2208      	movs	r2, #8
 800977c:	305c      	adds	r0, #92	; 0x5c
 800977e:	f7fd f951 	bl	8006a24 <memset>
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <std+0x38>)
 8009784:	6263      	str	r3, [r4, #36]	; 0x24
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <std+0x3c>)
 8009788:	62a3      	str	r3, [r4, #40]	; 0x28
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <std+0x40>)
 800978c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800978e:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <std+0x44>)
 8009790:	6224      	str	r4, [r4, #32]
 8009792:	6323      	str	r3, [r4, #48]	; 0x30
 8009794:	bd10      	pop	{r4, pc}
 8009796:	bf00      	nop
 8009798:	080078e9 	.word	0x080078e9
 800979c:	0800790f 	.word	0x0800790f
 80097a0:	08007947 	.word	0x08007947
 80097a4:	0800796b 	.word	0x0800796b

080097a8 <_cleanup_r>:
 80097a8:	4901      	ldr	r1, [pc, #4]	; (80097b0 <_cleanup_r+0x8>)
 80097aa:	f000 b8af 	b.w	800990c <_fwalk_reent>
 80097ae:	bf00      	nop
 80097b0:	080096e9 	.word	0x080096e9

080097b4 <__sfmoreglue>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	2268      	movs	r2, #104	; 0x68
 80097b8:	1e4d      	subs	r5, r1, #1
 80097ba:	4355      	muls	r5, r2
 80097bc:	460e      	mov	r6, r1
 80097be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097c2:	f001 fa0f 	bl	800abe4 <_malloc_r>
 80097c6:	4604      	mov	r4, r0
 80097c8:	b140      	cbz	r0, 80097dc <__sfmoreglue+0x28>
 80097ca:	2100      	movs	r1, #0
 80097cc:	e9c0 1600 	strd	r1, r6, [r0]
 80097d0:	300c      	adds	r0, #12
 80097d2:	60a0      	str	r0, [r4, #8]
 80097d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097d8:	f7fd f924 	bl	8006a24 <memset>
 80097dc:	4620      	mov	r0, r4
 80097de:	bd70      	pop	{r4, r5, r6, pc}

080097e0 <__sfp_lock_acquire>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__sfp_lock_acquire+0x8>)
 80097e2:	f000 bc26 	b.w	800a032 <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000dc9 	.word	0x20000dc9

080097ec <__sfp_lock_release>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__sfp_lock_release+0x8>)
 80097ee:	f000 bc21 	b.w	800a034 <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	20000dc9 	.word	0x20000dc9

080097f8 <__sinit_lock_acquire>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sinit_lock_acquire+0x8>)
 80097fa:	f000 bc1a 	b.w	800a032 <__retarget_lock_acquire_recursive>
 80097fe:	bf00      	nop
 8009800:	20000dca 	.word	0x20000dca

08009804 <__sinit_lock_release>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__sinit_lock_release+0x8>)
 8009806:	f000 bc15 	b.w	800a034 <__retarget_lock_release_recursive>
 800980a:	bf00      	nop
 800980c:	20000dca 	.word	0x20000dca

08009810 <__sinit>:
 8009810:	b510      	push	{r4, lr}
 8009812:	4604      	mov	r4, r0
 8009814:	f7ff fff0 	bl	80097f8 <__sinit_lock_acquire>
 8009818:	69a3      	ldr	r3, [r4, #24]
 800981a:	b11b      	cbz	r3, 8009824 <__sinit+0x14>
 800981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009820:	f7ff bff0 	b.w	8009804 <__sinit_lock_release>
 8009824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009828:	6523      	str	r3, [r4, #80]	; 0x50
 800982a:	4b13      	ldr	r3, [pc, #76]	; (8009878 <__sinit+0x68>)
 800982c:	4a13      	ldr	r2, [pc, #76]	; (800987c <__sinit+0x6c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	62a2      	str	r2, [r4, #40]	; 0x28
 8009832:	42a3      	cmp	r3, r4
 8009834:	bf04      	itt	eq
 8009836:	2301      	moveq	r3, #1
 8009838:	61a3      	streq	r3, [r4, #24]
 800983a:	4620      	mov	r0, r4
 800983c:	f000 f820 	bl	8009880 <__sfp>
 8009840:	6060      	str	r0, [r4, #4]
 8009842:	4620      	mov	r0, r4
 8009844:	f000 f81c 	bl	8009880 <__sfp>
 8009848:	60a0      	str	r0, [r4, #8]
 800984a:	4620      	mov	r0, r4
 800984c:	f000 f818 	bl	8009880 <__sfp>
 8009850:	2200      	movs	r2, #0
 8009852:	60e0      	str	r0, [r4, #12]
 8009854:	2104      	movs	r1, #4
 8009856:	6860      	ldr	r0, [r4, #4]
 8009858:	f7ff ff82 	bl	8009760 <std>
 800985c:	68a0      	ldr	r0, [r4, #8]
 800985e:	2201      	movs	r2, #1
 8009860:	2109      	movs	r1, #9
 8009862:	f7ff ff7d 	bl	8009760 <std>
 8009866:	68e0      	ldr	r0, [r4, #12]
 8009868:	2202      	movs	r2, #2
 800986a:	2112      	movs	r1, #18
 800986c:	f7ff ff78 	bl	8009760 <std>
 8009870:	2301      	movs	r3, #1
 8009872:	61a3      	str	r3, [r4, #24]
 8009874:	e7d2      	b.n	800981c <__sinit+0xc>
 8009876:	bf00      	nop
 8009878:	0800c29c 	.word	0x0800c29c
 800987c:	080097a9 	.word	0x080097a9

08009880 <__sfp>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	4607      	mov	r7, r0
 8009884:	f7ff ffac 	bl	80097e0 <__sfp_lock_acquire>
 8009888:	4b1e      	ldr	r3, [pc, #120]	; (8009904 <__sfp+0x84>)
 800988a:	681e      	ldr	r6, [r3, #0]
 800988c:	69b3      	ldr	r3, [r6, #24]
 800988e:	b913      	cbnz	r3, 8009896 <__sfp+0x16>
 8009890:	4630      	mov	r0, r6
 8009892:	f7ff ffbd 	bl	8009810 <__sinit>
 8009896:	3648      	adds	r6, #72	; 0x48
 8009898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800989c:	3b01      	subs	r3, #1
 800989e:	d503      	bpl.n	80098a8 <__sfp+0x28>
 80098a0:	6833      	ldr	r3, [r6, #0]
 80098a2:	b30b      	cbz	r3, 80098e8 <__sfp+0x68>
 80098a4:	6836      	ldr	r6, [r6, #0]
 80098a6:	e7f7      	b.n	8009898 <__sfp+0x18>
 80098a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098ac:	b9d5      	cbnz	r5, 80098e4 <__sfp+0x64>
 80098ae:	4b16      	ldr	r3, [pc, #88]	; (8009908 <__sfp+0x88>)
 80098b0:	60e3      	str	r3, [r4, #12]
 80098b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098b6:	6665      	str	r5, [r4, #100]	; 0x64
 80098b8:	f000 fbba 	bl	800a030 <__retarget_lock_init_recursive>
 80098bc:	f7ff ff96 	bl	80097ec <__sfp_lock_release>
 80098c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098c8:	6025      	str	r5, [r4, #0]
 80098ca:	61a5      	str	r5, [r4, #24]
 80098cc:	2208      	movs	r2, #8
 80098ce:	4629      	mov	r1, r5
 80098d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098d4:	f7fd f8a6 	bl	8006a24 <memset>
 80098d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098e0:	4620      	mov	r0, r4
 80098e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e4:	3468      	adds	r4, #104	; 0x68
 80098e6:	e7d9      	b.n	800989c <__sfp+0x1c>
 80098e8:	2104      	movs	r1, #4
 80098ea:	4638      	mov	r0, r7
 80098ec:	f7ff ff62 	bl	80097b4 <__sfmoreglue>
 80098f0:	4604      	mov	r4, r0
 80098f2:	6030      	str	r0, [r6, #0]
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d1d5      	bne.n	80098a4 <__sfp+0x24>
 80098f8:	f7ff ff78 	bl	80097ec <__sfp_lock_release>
 80098fc:	230c      	movs	r3, #12
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	e7ee      	b.n	80098e0 <__sfp+0x60>
 8009902:	bf00      	nop
 8009904:	0800c29c 	.word	0x0800c29c
 8009908:	ffff0001 	.word	0xffff0001

0800990c <_fwalk_reent>:
 800990c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009910:	4606      	mov	r6, r0
 8009912:	4688      	mov	r8, r1
 8009914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009918:	2700      	movs	r7, #0
 800991a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800991e:	f1b9 0901 	subs.w	r9, r9, #1
 8009922:	d505      	bpl.n	8009930 <_fwalk_reent+0x24>
 8009924:	6824      	ldr	r4, [r4, #0]
 8009926:	2c00      	cmp	r4, #0
 8009928:	d1f7      	bne.n	800991a <_fwalk_reent+0xe>
 800992a:	4638      	mov	r0, r7
 800992c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009930:	89ab      	ldrh	r3, [r5, #12]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d907      	bls.n	8009946 <_fwalk_reent+0x3a>
 8009936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800993a:	3301      	adds	r3, #1
 800993c:	d003      	beq.n	8009946 <_fwalk_reent+0x3a>
 800993e:	4629      	mov	r1, r5
 8009940:	4630      	mov	r0, r6
 8009942:	47c0      	blx	r8
 8009944:	4307      	orrs	r7, r0
 8009946:	3568      	adds	r5, #104	; 0x68
 8009948:	e7e9      	b.n	800991e <_fwalk_reent+0x12>

0800994a <rshift>:
 800994a:	6903      	ldr	r3, [r0, #16]
 800994c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009954:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009958:	f100 0414 	add.w	r4, r0, #20
 800995c:	dd45      	ble.n	80099ea <rshift+0xa0>
 800995e:	f011 011f 	ands.w	r1, r1, #31
 8009962:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009966:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800996a:	d10c      	bne.n	8009986 <rshift+0x3c>
 800996c:	f100 0710 	add.w	r7, r0, #16
 8009970:	4629      	mov	r1, r5
 8009972:	42b1      	cmp	r1, r6
 8009974:	d334      	bcc.n	80099e0 <rshift+0x96>
 8009976:	1a9b      	subs	r3, r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	1eea      	subs	r2, r5, #3
 800997c:	4296      	cmp	r6, r2
 800997e:	bf38      	it	cc
 8009980:	2300      	movcc	r3, #0
 8009982:	4423      	add	r3, r4
 8009984:	e015      	b.n	80099b2 <rshift+0x68>
 8009986:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800998a:	f1c1 0820 	rsb	r8, r1, #32
 800998e:	40cf      	lsrs	r7, r1
 8009990:	f105 0e04 	add.w	lr, r5, #4
 8009994:	46a1      	mov	r9, r4
 8009996:	4576      	cmp	r6, lr
 8009998:	46f4      	mov	ip, lr
 800999a:	d815      	bhi.n	80099c8 <rshift+0x7e>
 800999c:	1a9a      	subs	r2, r3, r2
 800999e:	0092      	lsls	r2, r2, #2
 80099a0:	3a04      	subs	r2, #4
 80099a2:	3501      	adds	r5, #1
 80099a4:	42ae      	cmp	r6, r5
 80099a6:	bf38      	it	cc
 80099a8:	2200      	movcc	r2, #0
 80099aa:	18a3      	adds	r3, r4, r2
 80099ac:	50a7      	str	r7, [r4, r2]
 80099ae:	b107      	cbz	r7, 80099b2 <rshift+0x68>
 80099b0:	3304      	adds	r3, #4
 80099b2:	1b1a      	subs	r2, r3, r4
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099ba:	bf08      	it	eq
 80099bc:	2300      	moveq	r3, #0
 80099be:	6102      	str	r2, [r0, #16]
 80099c0:	bf08      	it	eq
 80099c2:	6143      	streq	r3, [r0, #20]
 80099c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c8:	f8dc c000 	ldr.w	ip, [ip]
 80099cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80099d0:	ea4c 0707 	orr.w	r7, ip, r7
 80099d4:	f849 7b04 	str.w	r7, [r9], #4
 80099d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099dc:	40cf      	lsrs	r7, r1
 80099de:	e7da      	b.n	8009996 <rshift+0x4c>
 80099e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80099e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80099e8:	e7c3      	b.n	8009972 <rshift+0x28>
 80099ea:	4623      	mov	r3, r4
 80099ec:	e7e1      	b.n	80099b2 <rshift+0x68>

080099ee <__hexdig_fun>:
 80099ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099f2:	2b09      	cmp	r3, #9
 80099f4:	d802      	bhi.n	80099fc <__hexdig_fun+0xe>
 80099f6:	3820      	subs	r0, #32
 80099f8:	b2c0      	uxtb	r0, r0
 80099fa:	4770      	bx	lr
 80099fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a00:	2b05      	cmp	r3, #5
 8009a02:	d801      	bhi.n	8009a08 <__hexdig_fun+0x1a>
 8009a04:	3847      	subs	r0, #71	; 0x47
 8009a06:	e7f7      	b.n	80099f8 <__hexdig_fun+0xa>
 8009a08:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a0c:	2b05      	cmp	r3, #5
 8009a0e:	d801      	bhi.n	8009a14 <__hexdig_fun+0x26>
 8009a10:	3827      	subs	r0, #39	; 0x27
 8009a12:	e7f1      	b.n	80099f8 <__hexdig_fun+0xa>
 8009a14:	2000      	movs	r0, #0
 8009a16:	4770      	bx	lr

08009a18 <__gethex>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	ed2d 8b02 	vpush	{d8}
 8009a20:	b089      	sub	sp, #36	; 0x24
 8009a22:	ee08 0a10 	vmov	s16, r0
 8009a26:	9304      	str	r3, [sp, #16]
 8009a28:	4bb4      	ldr	r3, [pc, #720]	; (8009cfc <__gethex+0x2e4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	468b      	mov	fp, r1
 8009a32:	4690      	mov	r8, r2
 8009a34:	f7f6 fbcc 	bl	80001d0 <strlen>
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	f8db 2000 	ldr.w	r2, [fp]
 8009a3e:	4403      	add	r3, r0
 8009a40:	4682      	mov	sl, r0
 8009a42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	1c93      	adds	r3, r2, #2
 8009a4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a52:	32fe      	adds	r2, #254	; 0xfe
 8009a54:	18d1      	adds	r1, r2, r3
 8009a56:	461f      	mov	r7, r3
 8009a58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a5c:	9100      	str	r1, [sp, #0]
 8009a5e:	2830      	cmp	r0, #48	; 0x30
 8009a60:	d0f8      	beq.n	8009a54 <__gethex+0x3c>
 8009a62:	f7ff ffc4 	bl	80099ee <__hexdig_fun>
 8009a66:	4604      	mov	r4, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d13a      	bne.n	8009ae2 <__gethex+0xca>
 8009a6c:	9901      	ldr	r1, [sp, #4]
 8009a6e:	4652      	mov	r2, sl
 8009a70:	4638      	mov	r0, r7
 8009a72:	f7fd ff7e 	bl	8007972 <strncmp>
 8009a76:	4605      	mov	r5, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d168      	bne.n	8009b4e <__gethex+0x136>
 8009a7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a80:	eb07 060a 	add.w	r6, r7, sl
 8009a84:	f7ff ffb3 	bl	80099ee <__hexdig_fun>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d062      	beq.n	8009b52 <__gethex+0x13a>
 8009a8c:	4633      	mov	r3, r6
 8009a8e:	7818      	ldrb	r0, [r3, #0]
 8009a90:	2830      	cmp	r0, #48	; 0x30
 8009a92:	461f      	mov	r7, r3
 8009a94:	f103 0301 	add.w	r3, r3, #1
 8009a98:	d0f9      	beq.n	8009a8e <__gethex+0x76>
 8009a9a:	f7ff ffa8 	bl	80099ee <__hexdig_fun>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	fab0 f480 	clz	r4, r0
 8009aa4:	0964      	lsrs	r4, r4, #5
 8009aa6:	4635      	mov	r5, r6
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	463a      	mov	r2, r7
 8009aac:	4616      	mov	r6, r2
 8009aae:	3201      	adds	r2, #1
 8009ab0:	7830      	ldrb	r0, [r6, #0]
 8009ab2:	f7ff ff9c 	bl	80099ee <__hexdig_fun>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d1f8      	bne.n	8009aac <__gethex+0x94>
 8009aba:	9901      	ldr	r1, [sp, #4]
 8009abc:	4652      	mov	r2, sl
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7fd ff57 	bl	8007972 <strncmp>
 8009ac4:	b980      	cbnz	r0, 8009ae8 <__gethex+0xd0>
 8009ac6:	b94d      	cbnz	r5, 8009adc <__gethex+0xc4>
 8009ac8:	eb06 050a 	add.w	r5, r6, sl
 8009acc:	462a      	mov	r2, r5
 8009ace:	4616      	mov	r6, r2
 8009ad0:	3201      	adds	r2, #1
 8009ad2:	7830      	ldrb	r0, [r6, #0]
 8009ad4:	f7ff ff8b 	bl	80099ee <__hexdig_fun>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d1f8      	bne.n	8009ace <__gethex+0xb6>
 8009adc:	1bad      	subs	r5, r5, r6
 8009ade:	00ad      	lsls	r5, r5, #2
 8009ae0:	e004      	b.n	8009aec <__gethex+0xd4>
 8009ae2:	2400      	movs	r4, #0
 8009ae4:	4625      	mov	r5, r4
 8009ae6:	e7e0      	b.n	8009aaa <__gethex+0x92>
 8009ae8:	2d00      	cmp	r5, #0
 8009aea:	d1f7      	bne.n	8009adc <__gethex+0xc4>
 8009aec:	7833      	ldrb	r3, [r6, #0]
 8009aee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009af2:	2b50      	cmp	r3, #80	; 0x50
 8009af4:	d13b      	bne.n	8009b6e <__gethex+0x156>
 8009af6:	7873      	ldrb	r3, [r6, #1]
 8009af8:	2b2b      	cmp	r3, #43	; 0x2b
 8009afa:	d02c      	beq.n	8009b56 <__gethex+0x13e>
 8009afc:	2b2d      	cmp	r3, #45	; 0x2d
 8009afe:	d02e      	beq.n	8009b5e <__gethex+0x146>
 8009b00:	1c71      	adds	r1, r6, #1
 8009b02:	f04f 0900 	mov.w	r9, #0
 8009b06:	7808      	ldrb	r0, [r1, #0]
 8009b08:	f7ff ff71 	bl	80099ee <__hexdig_fun>
 8009b0c:	1e43      	subs	r3, r0, #1
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b18      	cmp	r3, #24
 8009b12:	d82c      	bhi.n	8009b6e <__gethex+0x156>
 8009b14:	f1a0 0210 	sub.w	r2, r0, #16
 8009b18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b1c:	f7ff ff67 	bl	80099ee <__hexdig_fun>
 8009b20:	1e43      	subs	r3, r0, #1
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b18      	cmp	r3, #24
 8009b26:	d91d      	bls.n	8009b64 <__gethex+0x14c>
 8009b28:	f1b9 0f00 	cmp.w	r9, #0
 8009b2c:	d000      	beq.n	8009b30 <__gethex+0x118>
 8009b2e:	4252      	negs	r2, r2
 8009b30:	4415      	add	r5, r2
 8009b32:	f8cb 1000 	str.w	r1, [fp]
 8009b36:	b1e4      	cbz	r4, 8009b72 <__gethex+0x15a>
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf14      	ite	ne
 8009b3e:	2700      	movne	r7, #0
 8009b40:	2706      	moveq	r7, #6
 8009b42:	4638      	mov	r0, r7
 8009b44:	b009      	add	sp, #36	; 0x24
 8009b46:	ecbd 8b02 	vpop	{d8}
 8009b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4e:	463e      	mov	r6, r7
 8009b50:	4625      	mov	r5, r4
 8009b52:	2401      	movs	r4, #1
 8009b54:	e7ca      	b.n	8009aec <__gethex+0xd4>
 8009b56:	f04f 0900 	mov.w	r9, #0
 8009b5a:	1cb1      	adds	r1, r6, #2
 8009b5c:	e7d3      	b.n	8009b06 <__gethex+0xee>
 8009b5e:	f04f 0901 	mov.w	r9, #1
 8009b62:	e7fa      	b.n	8009b5a <__gethex+0x142>
 8009b64:	230a      	movs	r3, #10
 8009b66:	fb03 0202 	mla	r2, r3, r2, r0
 8009b6a:	3a10      	subs	r2, #16
 8009b6c:	e7d4      	b.n	8009b18 <__gethex+0x100>
 8009b6e:	4631      	mov	r1, r6
 8009b70:	e7df      	b.n	8009b32 <__gethex+0x11a>
 8009b72:	1bf3      	subs	r3, r6, r7
 8009b74:	3b01      	subs	r3, #1
 8009b76:	4621      	mov	r1, r4
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	dc0b      	bgt.n	8009b94 <__gethex+0x17c>
 8009b7c:	ee18 0a10 	vmov	r0, s16
 8009b80:	f000 faec 	bl	800a15c <_Balloc>
 8009b84:	4604      	mov	r4, r0
 8009b86:	b940      	cbnz	r0, 8009b9a <__gethex+0x182>
 8009b88:	4b5d      	ldr	r3, [pc, #372]	; (8009d00 <__gethex+0x2e8>)
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	21de      	movs	r1, #222	; 0xde
 8009b8e:	485d      	ldr	r0, [pc, #372]	; (8009d04 <__gethex+0x2ec>)
 8009b90:	f001 ff96 	bl	800bac0 <__assert_func>
 8009b94:	3101      	adds	r1, #1
 8009b96:	105b      	asrs	r3, r3, #1
 8009b98:	e7ee      	b.n	8009b78 <__gethex+0x160>
 8009b9a:	f100 0914 	add.w	r9, r0, #20
 8009b9e:	f04f 0b00 	mov.w	fp, #0
 8009ba2:	f1ca 0301 	rsb	r3, sl, #1
 8009ba6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009baa:	f8cd b000 	str.w	fp, [sp]
 8009bae:	9306      	str	r3, [sp, #24]
 8009bb0:	42b7      	cmp	r7, r6
 8009bb2:	d340      	bcc.n	8009c36 <__gethex+0x21e>
 8009bb4:	9802      	ldr	r0, [sp, #8]
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	f840 3b04 	str.w	r3, [r0], #4
 8009bbc:	eba0 0009 	sub.w	r0, r0, r9
 8009bc0:	1080      	asrs	r0, r0, #2
 8009bc2:	0146      	lsls	r6, r0, #5
 8009bc4:	6120      	str	r0, [r4, #16]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 fbba 	bl	800a340 <__hi0bits>
 8009bcc:	1a30      	subs	r0, r6, r0
 8009bce:	f8d8 6000 	ldr.w	r6, [r8]
 8009bd2:	42b0      	cmp	r0, r6
 8009bd4:	dd63      	ble.n	8009c9e <__gethex+0x286>
 8009bd6:	1b87      	subs	r7, r0, r6
 8009bd8:	4639      	mov	r1, r7
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 ff5e 	bl	800aa9c <__any_on>
 8009be0:	4682      	mov	sl, r0
 8009be2:	b1a8      	cbz	r0, 8009c10 <__gethex+0x1f8>
 8009be4:	1e7b      	subs	r3, r7, #1
 8009be6:	1159      	asrs	r1, r3, #5
 8009be8:	f003 021f 	and.w	r2, r3, #31
 8009bec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009bf0:	f04f 0a01 	mov.w	sl, #1
 8009bf4:	fa0a f202 	lsl.w	r2, sl, r2
 8009bf8:	420a      	tst	r2, r1
 8009bfa:	d009      	beq.n	8009c10 <__gethex+0x1f8>
 8009bfc:	4553      	cmp	r3, sl
 8009bfe:	dd05      	ble.n	8009c0c <__gethex+0x1f4>
 8009c00:	1eb9      	subs	r1, r7, #2
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 ff4a 	bl	800aa9c <__any_on>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d145      	bne.n	8009c98 <__gethex+0x280>
 8009c0c:	f04f 0a02 	mov.w	sl, #2
 8009c10:	4639      	mov	r1, r7
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7ff fe99 	bl	800994a <rshift>
 8009c18:	443d      	add	r5, r7
 8009c1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c1e:	42ab      	cmp	r3, r5
 8009c20:	da4c      	bge.n	8009cbc <__gethex+0x2a4>
 8009c22:	ee18 0a10 	vmov	r0, s16
 8009c26:	4621      	mov	r1, r4
 8009c28:	f000 fad8 	bl	800a1dc <_Bfree>
 8009c2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	27a3      	movs	r7, #163	; 0xa3
 8009c34:	e785      	b.n	8009b42 <__gethex+0x12a>
 8009c36:	1e73      	subs	r3, r6, #1
 8009c38:	9a05      	ldr	r2, [sp, #20]
 8009c3a:	9303      	str	r3, [sp, #12]
 8009c3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d019      	beq.n	8009c78 <__gethex+0x260>
 8009c44:	f1bb 0f20 	cmp.w	fp, #32
 8009c48:	d107      	bne.n	8009c5a <__gethex+0x242>
 8009c4a:	9b02      	ldr	r3, [sp, #8]
 8009c4c:	9a00      	ldr	r2, [sp, #0]
 8009c4e:	f843 2b04 	str.w	r2, [r3], #4
 8009c52:	9302      	str	r3, [sp, #8]
 8009c54:	2300      	movs	r3, #0
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	469b      	mov	fp, r3
 8009c5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c5e:	f7ff fec6 	bl	80099ee <__hexdig_fun>
 8009c62:	9b00      	ldr	r3, [sp, #0]
 8009c64:	f000 000f 	and.w	r0, r0, #15
 8009c68:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c6c:	4303      	orrs	r3, r0
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	f10b 0b04 	add.w	fp, fp, #4
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	e00d      	b.n	8009c94 <__gethex+0x27c>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	9a06      	ldr	r2, [sp, #24]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	42bb      	cmp	r3, r7
 8009c80:	d3e0      	bcc.n	8009c44 <__gethex+0x22c>
 8009c82:	4618      	mov	r0, r3
 8009c84:	9901      	ldr	r1, [sp, #4]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	4652      	mov	r2, sl
 8009c8a:	f7fd fe72 	bl	8007972 <strncmp>
 8009c8e:	9b07      	ldr	r3, [sp, #28]
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1d7      	bne.n	8009c44 <__gethex+0x22c>
 8009c94:	461e      	mov	r6, r3
 8009c96:	e78b      	b.n	8009bb0 <__gethex+0x198>
 8009c98:	f04f 0a03 	mov.w	sl, #3
 8009c9c:	e7b8      	b.n	8009c10 <__gethex+0x1f8>
 8009c9e:	da0a      	bge.n	8009cb6 <__gethex+0x29e>
 8009ca0:	1a37      	subs	r7, r6, r0
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	ee18 0a10 	vmov	r0, s16
 8009ca8:	463a      	mov	r2, r7
 8009caa:	f000 fcb3 	bl	800a614 <__lshift>
 8009cae:	1bed      	subs	r5, r5, r7
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	f100 0914 	add.w	r9, r0, #20
 8009cb6:	f04f 0a00 	mov.w	sl, #0
 8009cba:	e7ae      	b.n	8009c1a <__gethex+0x202>
 8009cbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009cc0:	42a8      	cmp	r0, r5
 8009cc2:	dd72      	ble.n	8009daa <__gethex+0x392>
 8009cc4:	1b45      	subs	r5, r0, r5
 8009cc6:	42ae      	cmp	r6, r5
 8009cc8:	dc36      	bgt.n	8009d38 <__gethex+0x320>
 8009cca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d02a      	beq.n	8009d28 <__gethex+0x310>
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d02c      	beq.n	8009d30 <__gethex+0x318>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d11c      	bne.n	8009d14 <__gethex+0x2fc>
 8009cda:	42ae      	cmp	r6, r5
 8009cdc:	d11a      	bne.n	8009d14 <__gethex+0x2fc>
 8009cde:	2e01      	cmp	r6, #1
 8009ce0:	d112      	bne.n	8009d08 <__gethex+0x2f0>
 8009ce2:	9a04      	ldr	r2, [sp, #16]
 8009ce4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	2301      	movs	r3, #1
 8009cec:	6123      	str	r3, [r4, #16]
 8009cee:	f8c9 3000 	str.w	r3, [r9]
 8009cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cf4:	2762      	movs	r7, #98	; 0x62
 8009cf6:	601c      	str	r4, [r3, #0]
 8009cf8:	e723      	b.n	8009b42 <__gethex+0x12a>
 8009cfa:	bf00      	nop
 8009cfc:	0800c584 	.word	0x0800c584
 8009d00:	0800c4a8 	.word	0x0800c4a8
 8009d04:	0800c51c 	.word	0x0800c51c
 8009d08:	1e71      	subs	r1, r6, #1
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fec6 	bl	800aa9c <__any_on>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d1e6      	bne.n	8009ce2 <__gethex+0x2ca>
 8009d14:	ee18 0a10 	vmov	r0, s16
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f000 fa5f 	bl	800a1dc <_Bfree>
 8009d1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d20:	2300      	movs	r3, #0
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	2750      	movs	r7, #80	; 0x50
 8009d26:	e70c      	b.n	8009b42 <__gethex+0x12a>
 8009d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1f2      	bne.n	8009d14 <__gethex+0x2fc>
 8009d2e:	e7d8      	b.n	8009ce2 <__gethex+0x2ca>
 8009d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1d5      	bne.n	8009ce2 <__gethex+0x2ca>
 8009d36:	e7ed      	b.n	8009d14 <__gethex+0x2fc>
 8009d38:	1e6f      	subs	r7, r5, #1
 8009d3a:	f1ba 0f00 	cmp.w	sl, #0
 8009d3e:	d131      	bne.n	8009da4 <__gethex+0x38c>
 8009d40:	b127      	cbz	r7, 8009d4c <__gethex+0x334>
 8009d42:	4639      	mov	r1, r7
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 fea9 	bl	800aa9c <__any_on>
 8009d4a:	4682      	mov	sl, r0
 8009d4c:	117b      	asrs	r3, r7, #5
 8009d4e:	2101      	movs	r1, #1
 8009d50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d54:	f007 071f 	and.w	r7, r7, #31
 8009d58:	fa01 f707 	lsl.w	r7, r1, r7
 8009d5c:	421f      	tst	r7, r3
 8009d5e:	4629      	mov	r1, r5
 8009d60:	4620      	mov	r0, r4
 8009d62:	bf18      	it	ne
 8009d64:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d68:	1b76      	subs	r6, r6, r5
 8009d6a:	f7ff fdee 	bl	800994a <rshift>
 8009d6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d72:	2702      	movs	r7, #2
 8009d74:	f1ba 0f00 	cmp.w	sl, #0
 8009d78:	d048      	beq.n	8009e0c <__gethex+0x3f4>
 8009d7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d015      	beq.n	8009dae <__gethex+0x396>
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d017      	beq.n	8009db6 <__gethex+0x39e>
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d109      	bne.n	8009d9e <__gethex+0x386>
 8009d8a:	f01a 0f02 	tst.w	sl, #2
 8009d8e:	d006      	beq.n	8009d9e <__gethex+0x386>
 8009d90:	f8d9 0000 	ldr.w	r0, [r9]
 8009d94:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d98:	f01a 0f01 	tst.w	sl, #1
 8009d9c:	d10e      	bne.n	8009dbc <__gethex+0x3a4>
 8009d9e:	f047 0710 	orr.w	r7, r7, #16
 8009da2:	e033      	b.n	8009e0c <__gethex+0x3f4>
 8009da4:	f04f 0a01 	mov.w	sl, #1
 8009da8:	e7d0      	b.n	8009d4c <__gethex+0x334>
 8009daa:	2701      	movs	r7, #1
 8009dac:	e7e2      	b.n	8009d74 <__gethex+0x35c>
 8009dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db0:	f1c3 0301 	rsb	r3, r3, #1
 8009db4:	9315      	str	r3, [sp, #84]	; 0x54
 8009db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0f0      	beq.n	8009d9e <__gethex+0x386>
 8009dbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009dc0:	f104 0314 	add.w	r3, r4, #20
 8009dc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009dc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009dcc:	f04f 0c00 	mov.w	ip, #0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009dda:	d01c      	beq.n	8009e16 <__gethex+0x3fe>
 8009ddc:	3201      	adds	r2, #1
 8009dde:	6002      	str	r2, [r0, #0]
 8009de0:	2f02      	cmp	r7, #2
 8009de2:	f104 0314 	add.w	r3, r4, #20
 8009de6:	d13f      	bne.n	8009e68 <__gethex+0x450>
 8009de8:	f8d8 2000 	ldr.w	r2, [r8]
 8009dec:	3a01      	subs	r2, #1
 8009dee:	42b2      	cmp	r2, r6
 8009df0:	d10a      	bne.n	8009e08 <__gethex+0x3f0>
 8009df2:	1171      	asrs	r1, r6, #5
 8009df4:	2201      	movs	r2, #1
 8009df6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dfa:	f006 061f 	and.w	r6, r6, #31
 8009dfe:	fa02 f606 	lsl.w	r6, r2, r6
 8009e02:	421e      	tst	r6, r3
 8009e04:	bf18      	it	ne
 8009e06:	4617      	movne	r7, r2
 8009e08:	f047 0720 	orr.w	r7, r7, #32
 8009e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e0e:	601c      	str	r4, [r3, #0]
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	601d      	str	r5, [r3, #0]
 8009e14:	e695      	b.n	8009b42 <__gethex+0x12a>
 8009e16:	4299      	cmp	r1, r3
 8009e18:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e1c:	d8d8      	bhi.n	8009dd0 <__gethex+0x3b8>
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	459b      	cmp	fp, r3
 8009e22:	db19      	blt.n	8009e58 <__gethex+0x440>
 8009e24:	6861      	ldr	r1, [r4, #4]
 8009e26:	ee18 0a10 	vmov	r0, s16
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	f000 f996 	bl	800a15c <_Balloc>
 8009e30:	4681      	mov	r9, r0
 8009e32:	b918      	cbnz	r0, 8009e3c <__gethex+0x424>
 8009e34:	4b1a      	ldr	r3, [pc, #104]	; (8009ea0 <__gethex+0x488>)
 8009e36:	4602      	mov	r2, r0
 8009e38:	2184      	movs	r1, #132	; 0x84
 8009e3a:	e6a8      	b.n	8009b8e <__gethex+0x176>
 8009e3c:	6922      	ldr	r2, [r4, #16]
 8009e3e:	3202      	adds	r2, #2
 8009e40:	f104 010c 	add.w	r1, r4, #12
 8009e44:	0092      	lsls	r2, r2, #2
 8009e46:	300c      	adds	r0, #12
 8009e48:	f7fc fdde 	bl	8006a08 <memcpy>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	ee18 0a10 	vmov	r0, s16
 8009e52:	f000 f9c3 	bl	800a1dc <_Bfree>
 8009e56:	464c      	mov	r4, r9
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e60:	6122      	str	r2, [r4, #16]
 8009e62:	2201      	movs	r2, #1
 8009e64:	615a      	str	r2, [r3, #20]
 8009e66:	e7bb      	b.n	8009de0 <__gethex+0x3c8>
 8009e68:	6922      	ldr	r2, [r4, #16]
 8009e6a:	455a      	cmp	r2, fp
 8009e6c:	dd0b      	ble.n	8009e86 <__gethex+0x46e>
 8009e6e:	2101      	movs	r1, #1
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7ff fd6a 	bl	800994a <rshift>
 8009e76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e7a:	3501      	adds	r5, #1
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	f6ff aed0 	blt.w	8009c22 <__gethex+0x20a>
 8009e82:	2701      	movs	r7, #1
 8009e84:	e7c0      	b.n	8009e08 <__gethex+0x3f0>
 8009e86:	f016 061f 	ands.w	r6, r6, #31
 8009e8a:	d0fa      	beq.n	8009e82 <__gethex+0x46a>
 8009e8c:	4453      	add	r3, sl
 8009e8e:	f1c6 0620 	rsb	r6, r6, #32
 8009e92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e96:	f000 fa53 	bl	800a340 <__hi0bits>
 8009e9a:	42b0      	cmp	r0, r6
 8009e9c:	dbe7      	blt.n	8009e6e <__gethex+0x456>
 8009e9e:	e7f0      	b.n	8009e82 <__gethex+0x46a>
 8009ea0:	0800c4a8 	.word	0x0800c4a8

08009ea4 <L_shift>:
 8009ea4:	f1c2 0208 	rsb	r2, r2, #8
 8009ea8:	0092      	lsls	r2, r2, #2
 8009eaa:	b570      	push	{r4, r5, r6, lr}
 8009eac:	f1c2 0620 	rsb	r6, r2, #32
 8009eb0:	6843      	ldr	r3, [r0, #4]
 8009eb2:	6804      	ldr	r4, [r0, #0]
 8009eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8009eb8:	432c      	orrs	r4, r5
 8009eba:	40d3      	lsrs	r3, r2
 8009ebc:	6004      	str	r4, [r0, #0]
 8009ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ec2:	4288      	cmp	r0, r1
 8009ec4:	d3f4      	bcc.n	8009eb0 <L_shift+0xc>
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}

08009ec8 <__match>:
 8009ec8:	b530      	push	{r4, r5, lr}
 8009eca:	6803      	ldr	r3, [r0, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ed2:	b914      	cbnz	r4, 8009eda <__match+0x12>
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	bd30      	pop	{r4, r5, pc}
 8009eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ee2:	2d19      	cmp	r5, #25
 8009ee4:	bf98      	it	ls
 8009ee6:	3220      	addls	r2, #32
 8009ee8:	42a2      	cmp	r2, r4
 8009eea:	d0f0      	beq.n	8009ece <__match+0x6>
 8009eec:	2000      	movs	r0, #0
 8009eee:	e7f3      	b.n	8009ed8 <__match+0x10>

08009ef0 <__hexnan>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	680b      	ldr	r3, [r1, #0]
 8009ef6:	115e      	asrs	r6, r3, #5
 8009ef8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009efc:	f013 031f 	ands.w	r3, r3, #31
 8009f00:	b087      	sub	sp, #28
 8009f02:	bf18      	it	ne
 8009f04:	3604      	addne	r6, #4
 8009f06:	2500      	movs	r5, #0
 8009f08:	1f37      	subs	r7, r6, #4
 8009f0a:	4690      	mov	r8, r2
 8009f0c:	6802      	ldr	r2, [r0, #0]
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	4682      	mov	sl, r0
 8009f12:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f16:	46b9      	mov	r9, r7
 8009f18:	463c      	mov	r4, r7
 8009f1a:	9502      	str	r5, [sp, #8]
 8009f1c:	46ab      	mov	fp, r5
 8009f1e:	7851      	ldrb	r1, [r2, #1]
 8009f20:	1c53      	adds	r3, r2, #1
 8009f22:	9303      	str	r3, [sp, #12]
 8009f24:	b341      	cbz	r1, 8009f78 <__hexnan+0x88>
 8009f26:	4608      	mov	r0, r1
 8009f28:	9205      	str	r2, [sp, #20]
 8009f2a:	9104      	str	r1, [sp, #16]
 8009f2c:	f7ff fd5f 	bl	80099ee <__hexdig_fun>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d14f      	bne.n	8009fd4 <__hexnan+0xe4>
 8009f34:	9904      	ldr	r1, [sp, #16]
 8009f36:	9a05      	ldr	r2, [sp, #20]
 8009f38:	2920      	cmp	r1, #32
 8009f3a:	d818      	bhi.n	8009f6e <__hexnan+0x7e>
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	459b      	cmp	fp, r3
 8009f40:	dd13      	ble.n	8009f6a <__hexnan+0x7a>
 8009f42:	454c      	cmp	r4, r9
 8009f44:	d206      	bcs.n	8009f54 <__hexnan+0x64>
 8009f46:	2d07      	cmp	r5, #7
 8009f48:	dc04      	bgt.n	8009f54 <__hexnan+0x64>
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7ff ffa8 	bl	8009ea4 <L_shift>
 8009f54:	4544      	cmp	r4, r8
 8009f56:	d950      	bls.n	8009ffa <__hexnan+0x10a>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8009f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f62:	f8cd b008 	str.w	fp, [sp, #8]
 8009f66:	464c      	mov	r4, r9
 8009f68:	461d      	mov	r5, r3
 8009f6a:	9a03      	ldr	r2, [sp, #12]
 8009f6c:	e7d7      	b.n	8009f1e <__hexnan+0x2e>
 8009f6e:	2929      	cmp	r1, #41	; 0x29
 8009f70:	d156      	bne.n	800a020 <__hexnan+0x130>
 8009f72:	3202      	adds	r2, #2
 8009f74:	f8ca 2000 	str.w	r2, [sl]
 8009f78:	f1bb 0f00 	cmp.w	fp, #0
 8009f7c:	d050      	beq.n	800a020 <__hexnan+0x130>
 8009f7e:	454c      	cmp	r4, r9
 8009f80:	d206      	bcs.n	8009f90 <__hexnan+0xa0>
 8009f82:	2d07      	cmp	r5, #7
 8009f84:	dc04      	bgt.n	8009f90 <__hexnan+0xa0>
 8009f86:	462a      	mov	r2, r5
 8009f88:	4649      	mov	r1, r9
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f7ff ff8a 	bl	8009ea4 <L_shift>
 8009f90:	4544      	cmp	r4, r8
 8009f92:	d934      	bls.n	8009ffe <__hexnan+0x10e>
 8009f94:	f1a8 0204 	sub.w	r2, r8, #4
 8009f98:	4623      	mov	r3, r4
 8009f9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fa2:	429f      	cmp	r7, r3
 8009fa4:	d2f9      	bcs.n	8009f9a <__hexnan+0xaa>
 8009fa6:	1b3b      	subs	r3, r7, r4
 8009fa8:	f023 0303 	bic.w	r3, r3, #3
 8009fac:	3304      	adds	r3, #4
 8009fae:	3401      	adds	r4, #1
 8009fb0:	3e03      	subs	r6, #3
 8009fb2:	42b4      	cmp	r4, r6
 8009fb4:	bf88      	it	hi
 8009fb6:	2304      	movhi	r3, #4
 8009fb8:	4443      	add	r3, r8
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f843 2b04 	str.w	r2, [r3], #4
 8009fc0:	429f      	cmp	r7, r3
 8009fc2:	d2fb      	bcs.n	8009fbc <__hexnan+0xcc>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	b91b      	cbnz	r3, 8009fd0 <__hexnan+0xe0>
 8009fc8:	4547      	cmp	r7, r8
 8009fca:	d127      	bne.n	800a01c <__hexnan+0x12c>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	2005      	movs	r0, #5
 8009fd2:	e026      	b.n	800a022 <__hexnan+0x132>
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	2d08      	cmp	r5, #8
 8009fd8:	f10b 0b01 	add.w	fp, fp, #1
 8009fdc:	dd06      	ble.n	8009fec <__hexnan+0xfc>
 8009fde:	4544      	cmp	r4, r8
 8009fe0:	d9c3      	bls.n	8009f6a <__hexnan+0x7a>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fe8:	2501      	movs	r5, #1
 8009fea:	3c04      	subs	r4, #4
 8009fec:	6822      	ldr	r2, [r4, #0]
 8009fee:	f000 000f 	and.w	r0, r0, #15
 8009ff2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ff6:	6022      	str	r2, [r4, #0]
 8009ff8:	e7b7      	b.n	8009f6a <__hexnan+0x7a>
 8009ffa:	2508      	movs	r5, #8
 8009ffc:	e7b5      	b.n	8009f6a <__hexnan+0x7a>
 8009ffe:	9b01      	ldr	r3, [sp, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0df      	beq.n	8009fc4 <__hexnan+0xd4>
 800a004:	f04f 32ff 	mov.w	r2, #4294967295
 800a008:	f1c3 0320 	rsb	r3, r3, #32
 800a00c:	fa22 f303 	lsr.w	r3, r2, r3
 800a010:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a014:	401a      	ands	r2, r3
 800a016:	f846 2c04 	str.w	r2, [r6, #-4]
 800a01a:	e7d3      	b.n	8009fc4 <__hexnan+0xd4>
 800a01c:	3f04      	subs	r7, #4
 800a01e:	e7d1      	b.n	8009fc4 <__hexnan+0xd4>
 800a020:	2004      	movs	r0, #4
 800a022:	b007      	add	sp, #28
 800a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a028 <_localeconv_r>:
 800a028:	4800      	ldr	r0, [pc, #0]	; (800a02c <_localeconv_r+0x4>)
 800a02a:	4770      	bx	lr
 800a02c:	20000190 	.word	0x20000190

0800a030 <__retarget_lock_init_recursive>:
 800a030:	4770      	bx	lr

0800a032 <__retarget_lock_acquire_recursive>:
 800a032:	4770      	bx	lr

0800a034 <__retarget_lock_release_recursive>:
 800a034:	4770      	bx	lr
	...

0800a038 <_lseek_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	; (800a058 <_lseek_r+0x20>)
 800a03c:	4604      	mov	r4, r0
 800a03e:	4608      	mov	r0, r1
 800a040:	4611      	mov	r1, r2
 800a042:	2200      	movs	r2, #0
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	f7f8 fdc4 	bl	8002bd4 <_lseek>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_lseek_r+0x1e>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_lseek_r+0x1e>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	20000dd4 	.word	0x20000dd4

0800a05c <__swhatbuf_r>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	460e      	mov	r6, r1
 800a060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a064:	2900      	cmp	r1, #0
 800a066:	b096      	sub	sp, #88	; 0x58
 800a068:	4614      	mov	r4, r2
 800a06a:	461d      	mov	r5, r3
 800a06c:	da08      	bge.n	800a080 <__swhatbuf_r+0x24>
 800a06e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	061a      	lsls	r2, r3, #24
 800a078:	d410      	bmi.n	800a09c <__swhatbuf_r+0x40>
 800a07a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a07e:	e00e      	b.n	800a09e <__swhatbuf_r+0x42>
 800a080:	466a      	mov	r2, sp
 800a082:	f001 fd4d 	bl	800bb20 <_fstat_r>
 800a086:	2800      	cmp	r0, #0
 800a088:	dbf1      	blt.n	800a06e <__swhatbuf_r+0x12>
 800a08a:	9a01      	ldr	r2, [sp, #4]
 800a08c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a090:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a094:	425a      	negs	r2, r3
 800a096:	415a      	adcs	r2, r3
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	e7ee      	b.n	800a07a <__swhatbuf_r+0x1e>
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	2000      	movs	r0, #0
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	b016      	add	sp, #88	; 0x58
 800a0a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0a8 <__smakebuf_r>:
 800a0a8:	898b      	ldrh	r3, [r1, #12]
 800a0aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0ac:	079d      	lsls	r5, r3, #30
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	d507      	bpl.n	800a0c4 <__smakebuf_r+0x1c>
 800a0b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	2301      	movs	r3, #1
 800a0be:	6163      	str	r3, [r4, #20]
 800a0c0:	b002      	add	sp, #8
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	ab01      	add	r3, sp, #4
 800a0c6:	466a      	mov	r2, sp
 800a0c8:	f7ff ffc8 	bl	800a05c <__swhatbuf_r>
 800a0cc:	9900      	ldr	r1, [sp, #0]
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 fd87 	bl	800abe4 <_malloc_r>
 800a0d6:	b948      	cbnz	r0, 800a0ec <__smakebuf_r+0x44>
 800a0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0dc:	059a      	lsls	r2, r3, #22
 800a0de:	d4ef      	bmi.n	800a0c0 <__smakebuf_r+0x18>
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	f043 0302 	orr.w	r3, r3, #2
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	e7e3      	b.n	800a0b4 <__smakebuf_r+0xc>
 800a0ec:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <__smakebuf_r+0x7c>)
 800a0ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	6020      	str	r0, [r4, #0]
 800a0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	9b00      	ldr	r3, [sp, #0]
 800a0fc:	6163      	str	r3, [r4, #20]
 800a0fe:	9b01      	ldr	r3, [sp, #4]
 800a100:	6120      	str	r0, [r4, #16]
 800a102:	b15b      	cbz	r3, 800a11c <__smakebuf_r+0x74>
 800a104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a108:	4630      	mov	r0, r6
 800a10a:	f001 fd1b 	bl	800bb44 <_isatty_r>
 800a10e:	b128      	cbz	r0, 800a11c <__smakebuf_r+0x74>
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f023 0303 	bic.w	r3, r3, #3
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	81a3      	strh	r3, [r4, #12]
 800a11c:	89a0      	ldrh	r0, [r4, #12]
 800a11e:	4305      	orrs	r5, r0
 800a120:	81a5      	strh	r5, [r4, #12]
 800a122:	e7cd      	b.n	800a0c0 <__smakebuf_r+0x18>
 800a124:	080097a9 	.word	0x080097a9

0800a128 <malloc>:
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <malloc+0xc>)
 800a12a:	4601      	mov	r1, r0
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	f000 bd59 	b.w	800abe4 <_malloc_r>
 800a132:	bf00      	nop
 800a134:	20000038 	.word	0x20000038

0800a138 <__ascii_mbtowc>:
 800a138:	b082      	sub	sp, #8
 800a13a:	b901      	cbnz	r1, 800a13e <__ascii_mbtowc+0x6>
 800a13c:	a901      	add	r1, sp, #4
 800a13e:	b142      	cbz	r2, 800a152 <__ascii_mbtowc+0x1a>
 800a140:	b14b      	cbz	r3, 800a156 <__ascii_mbtowc+0x1e>
 800a142:	7813      	ldrb	r3, [r2, #0]
 800a144:	600b      	str	r3, [r1, #0]
 800a146:	7812      	ldrb	r2, [r2, #0]
 800a148:	1e10      	subs	r0, r2, #0
 800a14a:	bf18      	it	ne
 800a14c:	2001      	movne	r0, #1
 800a14e:	b002      	add	sp, #8
 800a150:	4770      	bx	lr
 800a152:	4610      	mov	r0, r2
 800a154:	e7fb      	b.n	800a14e <__ascii_mbtowc+0x16>
 800a156:	f06f 0001 	mvn.w	r0, #1
 800a15a:	e7f8      	b.n	800a14e <__ascii_mbtowc+0x16>

0800a15c <_Balloc>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a160:	4604      	mov	r4, r0
 800a162:	460d      	mov	r5, r1
 800a164:	b976      	cbnz	r6, 800a184 <_Balloc+0x28>
 800a166:	2010      	movs	r0, #16
 800a168:	f7ff ffde 	bl	800a128 <malloc>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6260      	str	r0, [r4, #36]	; 0x24
 800a170:	b920      	cbnz	r0, 800a17c <_Balloc+0x20>
 800a172:	4b18      	ldr	r3, [pc, #96]	; (800a1d4 <_Balloc+0x78>)
 800a174:	4818      	ldr	r0, [pc, #96]	; (800a1d8 <_Balloc+0x7c>)
 800a176:	2166      	movs	r1, #102	; 0x66
 800a178:	f001 fca2 	bl	800bac0 <__assert_func>
 800a17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a180:	6006      	str	r6, [r0, #0]
 800a182:	60c6      	str	r6, [r0, #12]
 800a184:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a186:	68f3      	ldr	r3, [r6, #12]
 800a188:	b183      	cbz	r3, 800a1ac <_Balloc+0x50>
 800a18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a192:	b9b8      	cbnz	r0, 800a1c4 <_Balloc+0x68>
 800a194:	2101      	movs	r1, #1
 800a196:	fa01 f605 	lsl.w	r6, r1, r5
 800a19a:	1d72      	adds	r2, r6, #5
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fc9d 	bl	800aade <_calloc_r>
 800a1a4:	b160      	cbz	r0, 800a1c0 <_Balloc+0x64>
 800a1a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1aa:	e00e      	b.n	800a1ca <_Balloc+0x6e>
 800a1ac:	2221      	movs	r2, #33	; 0x21
 800a1ae:	2104      	movs	r1, #4
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 fc94 	bl	800aade <_calloc_r>
 800a1b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1b8:	60f0      	str	r0, [r6, #12]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e4      	bne.n	800a18a <_Balloc+0x2e>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	6802      	ldr	r2, [r0, #0]
 800a1c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1d0:	e7f7      	b.n	800a1c2 <_Balloc+0x66>
 800a1d2:	bf00      	nop
 800a1d4:	0800c436 	.word	0x0800c436
 800a1d8:	0800c598 	.word	0x0800c598

0800a1dc <_Bfree>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	b976      	cbnz	r6, 800a204 <_Bfree+0x28>
 800a1e6:	2010      	movs	r0, #16
 800a1e8:	f7ff ff9e 	bl	800a128 <malloc>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6268      	str	r0, [r5, #36]	; 0x24
 800a1f0:	b920      	cbnz	r0, 800a1fc <_Bfree+0x20>
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <_Bfree+0x3c>)
 800a1f4:	4809      	ldr	r0, [pc, #36]	; (800a21c <_Bfree+0x40>)
 800a1f6:	218a      	movs	r1, #138	; 0x8a
 800a1f8:	f001 fc62 	bl	800bac0 <__assert_func>
 800a1fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a200:	6006      	str	r6, [r0, #0]
 800a202:	60c6      	str	r6, [r0, #12]
 800a204:	b13c      	cbz	r4, 800a216 <_Bfree+0x3a>
 800a206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a208:	6862      	ldr	r2, [r4, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a210:	6021      	str	r1, [r4, #0]
 800a212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	0800c436 	.word	0x0800c436
 800a21c:	0800c598 	.word	0x0800c598

0800a220 <__multadd>:
 800a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a224:	690d      	ldr	r5, [r1, #16]
 800a226:	4607      	mov	r7, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	461e      	mov	r6, r3
 800a22c:	f101 0c14 	add.w	ip, r1, #20
 800a230:	2000      	movs	r0, #0
 800a232:	f8dc 3000 	ldr.w	r3, [ip]
 800a236:	b299      	uxth	r1, r3
 800a238:	fb02 6101 	mla	r1, r2, r1, r6
 800a23c:	0c1e      	lsrs	r6, r3, #16
 800a23e:	0c0b      	lsrs	r3, r1, #16
 800a240:	fb02 3306 	mla	r3, r2, r6, r3
 800a244:	b289      	uxth	r1, r1
 800a246:	3001      	adds	r0, #1
 800a248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a24c:	4285      	cmp	r5, r0
 800a24e:	f84c 1b04 	str.w	r1, [ip], #4
 800a252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a256:	dcec      	bgt.n	800a232 <__multadd+0x12>
 800a258:	b30e      	cbz	r6, 800a29e <__multadd+0x7e>
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	42ab      	cmp	r3, r5
 800a25e:	dc19      	bgt.n	800a294 <__multadd+0x74>
 800a260:	6861      	ldr	r1, [r4, #4]
 800a262:	4638      	mov	r0, r7
 800a264:	3101      	adds	r1, #1
 800a266:	f7ff ff79 	bl	800a15c <_Balloc>
 800a26a:	4680      	mov	r8, r0
 800a26c:	b928      	cbnz	r0, 800a27a <__multadd+0x5a>
 800a26e:	4602      	mov	r2, r0
 800a270:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <__multadd+0x84>)
 800a272:	480d      	ldr	r0, [pc, #52]	; (800a2a8 <__multadd+0x88>)
 800a274:	21b5      	movs	r1, #181	; 0xb5
 800a276:	f001 fc23 	bl	800bac0 <__assert_func>
 800a27a:	6922      	ldr	r2, [r4, #16]
 800a27c:	3202      	adds	r2, #2
 800a27e:	f104 010c 	add.w	r1, r4, #12
 800a282:	0092      	lsls	r2, r2, #2
 800a284:	300c      	adds	r0, #12
 800a286:	f7fc fbbf 	bl	8006a08 <memcpy>
 800a28a:	4621      	mov	r1, r4
 800a28c:	4638      	mov	r0, r7
 800a28e:	f7ff ffa5 	bl	800a1dc <_Bfree>
 800a292:	4644      	mov	r4, r8
 800a294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a298:	3501      	adds	r5, #1
 800a29a:	615e      	str	r6, [r3, #20]
 800a29c:	6125      	str	r5, [r4, #16]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a4:	0800c4a8 	.word	0x0800c4a8
 800a2a8:	0800c598 	.word	0x0800c598

0800a2ac <__s2b>:
 800a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4615      	mov	r5, r2
 800a2b4:	461f      	mov	r7, r3
 800a2b6:	2209      	movs	r2, #9
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	db09      	blt.n	800a2dc <__s2b+0x30>
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff ff47 	bl	800a15c <_Balloc>
 800a2ce:	b940      	cbnz	r0, 800a2e2 <__s2b+0x36>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	4b19      	ldr	r3, [pc, #100]	; (800a338 <__s2b+0x8c>)
 800a2d4:	4819      	ldr	r0, [pc, #100]	; (800a33c <__s2b+0x90>)
 800a2d6:	21ce      	movs	r1, #206	; 0xce
 800a2d8:	f001 fbf2 	bl	800bac0 <__assert_func>
 800a2dc:	0052      	lsls	r2, r2, #1
 800a2de:	3101      	adds	r1, #1
 800a2e0:	e7f0      	b.n	800a2c4 <__s2b+0x18>
 800a2e2:	9b08      	ldr	r3, [sp, #32]
 800a2e4:	6143      	str	r3, [r0, #20]
 800a2e6:	2d09      	cmp	r5, #9
 800a2e8:	f04f 0301 	mov.w	r3, #1
 800a2ec:	6103      	str	r3, [r0, #16]
 800a2ee:	dd16      	ble.n	800a31e <__s2b+0x72>
 800a2f0:	f104 0909 	add.w	r9, r4, #9
 800a2f4:	46c8      	mov	r8, r9
 800a2f6:	442c      	add	r4, r5
 800a2f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	3b30      	subs	r3, #48	; 0x30
 800a300:	220a      	movs	r2, #10
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ff8c 	bl	800a220 <__multadd>
 800a308:	45a0      	cmp	r8, r4
 800a30a:	d1f5      	bne.n	800a2f8 <__s2b+0x4c>
 800a30c:	f1a5 0408 	sub.w	r4, r5, #8
 800a310:	444c      	add	r4, r9
 800a312:	1b2d      	subs	r5, r5, r4
 800a314:	1963      	adds	r3, r4, r5
 800a316:	42bb      	cmp	r3, r7
 800a318:	db04      	blt.n	800a324 <__s2b+0x78>
 800a31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31e:	340a      	adds	r4, #10
 800a320:	2509      	movs	r5, #9
 800a322:	e7f6      	b.n	800a312 <__s2b+0x66>
 800a324:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a328:	4601      	mov	r1, r0
 800a32a:	3b30      	subs	r3, #48	; 0x30
 800a32c:	220a      	movs	r2, #10
 800a32e:	4630      	mov	r0, r6
 800a330:	f7ff ff76 	bl	800a220 <__multadd>
 800a334:	e7ee      	b.n	800a314 <__s2b+0x68>
 800a336:	bf00      	nop
 800a338:	0800c4a8 	.word	0x0800c4a8
 800a33c:	0800c598 	.word	0x0800c598

0800a340 <__hi0bits>:
 800a340:	0c03      	lsrs	r3, r0, #16
 800a342:	041b      	lsls	r3, r3, #16
 800a344:	b9d3      	cbnz	r3, 800a37c <__hi0bits+0x3c>
 800a346:	0400      	lsls	r0, r0, #16
 800a348:	2310      	movs	r3, #16
 800a34a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a34e:	bf04      	itt	eq
 800a350:	0200      	lsleq	r0, r0, #8
 800a352:	3308      	addeq	r3, #8
 800a354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a358:	bf04      	itt	eq
 800a35a:	0100      	lsleq	r0, r0, #4
 800a35c:	3304      	addeq	r3, #4
 800a35e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a362:	bf04      	itt	eq
 800a364:	0080      	lsleq	r0, r0, #2
 800a366:	3302      	addeq	r3, #2
 800a368:	2800      	cmp	r0, #0
 800a36a:	db05      	blt.n	800a378 <__hi0bits+0x38>
 800a36c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a370:	f103 0301 	add.w	r3, r3, #1
 800a374:	bf08      	it	eq
 800a376:	2320      	moveq	r3, #32
 800a378:	4618      	mov	r0, r3
 800a37a:	4770      	bx	lr
 800a37c:	2300      	movs	r3, #0
 800a37e:	e7e4      	b.n	800a34a <__hi0bits+0xa>

0800a380 <__lo0bits>:
 800a380:	6803      	ldr	r3, [r0, #0]
 800a382:	f013 0207 	ands.w	r2, r3, #7
 800a386:	4601      	mov	r1, r0
 800a388:	d00b      	beq.n	800a3a2 <__lo0bits+0x22>
 800a38a:	07da      	lsls	r2, r3, #31
 800a38c:	d423      	bmi.n	800a3d6 <__lo0bits+0x56>
 800a38e:	0798      	lsls	r0, r3, #30
 800a390:	bf49      	itett	mi
 800a392:	085b      	lsrmi	r3, r3, #1
 800a394:	089b      	lsrpl	r3, r3, #2
 800a396:	2001      	movmi	r0, #1
 800a398:	600b      	strmi	r3, [r1, #0]
 800a39a:	bf5c      	itt	pl
 800a39c:	600b      	strpl	r3, [r1, #0]
 800a39e:	2002      	movpl	r0, #2
 800a3a0:	4770      	bx	lr
 800a3a2:	b298      	uxth	r0, r3
 800a3a4:	b9a8      	cbnz	r0, 800a3d2 <__lo0bits+0x52>
 800a3a6:	0c1b      	lsrs	r3, r3, #16
 800a3a8:	2010      	movs	r0, #16
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	b90a      	cbnz	r2, 800a3b2 <__lo0bits+0x32>
 800a3ae:	3008      	adds	r0, #8
 800a3b0:	0a1b      	lsrs	r3, r3, #8
 800a3b2:	071a      	lsls	r2, r3, #28
 800a3b4:	bf04      	itt	eq
 800a3b6:	091b      	lsreq	r3, r3, #4
 800a3b8:	3004      	addeq	r0, #4
 800a3ba:	079a      	lsls	r2, r3, #30
 800a3bc:	bf04      	itt	eq
 800a3be:	089b      	lsreq	r3, r3, #2
 800a3c0:	3002      	addeq	r0, #2
 800a3c2:	07da      	lsls	r2, r3, #31
 800a3c4:	d403      	bmi.n	800a3ce <__lo0bits+0x4e>
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	f100 0001 	add.w	r0, r0, #1
 800a3cc:	d005      	beq.n	800a3da <__lo0bits+0x5a>
 800a3ce:	600b      	str	r3, [r1, #0]
 800a3d0:	4770      	bx	lr
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	e7e9      	b.n	800a3aa <__lo0bits+0x2a>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	4770      	bx	lr
 800a3da:	2020      	movs	r0, #32
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <__i2b>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	f7ff feb9 	bl	800a15c <_Balloc>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	b928      	cbnz	r0, 800a3fa <__i2b+0x1a>
 800a3ee:	4b05      	ldr	r3, [pc, #20]	; (800a404 <__i2b+0x24>)
 800a3f0:	4805      	ldr	r0, [pc, #20]	; (800a408 <__i2b+0x28>)
 800a3f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3f6:	f001 fb63 	bl	800bac0 <__assert_func>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	6144      	str	r4, [r0, #20]
 800a3fe:	6103      	str	r3, [r0, #16]
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop
 800a404:	0800c4a8 	.word	0x0800c4a8
 800a408:	0800c598 	.word	0x0800c598

0800a40c <__multiply>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	4691      	mov	r9, r2
 800a412:	690a      	ldr	r2, [r1, #16]
 800a414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a418:	429a      	cmp	r2, r3
 800a41a:	bfb8      	it	lt
 800a41c:	460b      	movlt	r3, r1
 800a41e:	460c      	mov	r4, r1
 800a420:	bfbc      	itt	lt
 800a422:	464c      	movlt	r4, r9
 800a424:	4699      	movlt	r9, r3
 800a426:	6927      	ldr	r7, [r4, #16]
 800a428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a42c:	68a3      	ldr	r3, [r4, #8]
 800a42e:	6861      	ldr	r1, [r4, #4]
 800a430:	eb07 060a 	add.w	r6, r7, sl
 800a434:	42b3      	cmp	r3, r6
 800a436:	b085      	sub	sp, #20
 800a438:	bfb8      	it	lt
 800a43a:	3101      	addlt	r1, #1
 800a43c:	f7ff fe8e 	bl	800a15c <_Balloc>
 800a440:	b930      	cbnz	r0, 800a450 <__multiply+0x44>
 800a442:	4602      	mov	r2, r0
 800a444:	4b44      	ldr	r3, [pc, #272]	; (800a558 <__multiply+0x14c>)
 800a446:	4845      	ldr	r0, [pc, #276]	; (800a55c <__multiply+0x150>)
 800a448:	f240 115d 	movw	r1, #349	; 0x15d
 800a44c:	f001 fb38 	bl	800bac0 <__assert_func>
 800a450:	f100 0514 	add.w	r5, r0, #20
 800a454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a458:	462b      	mov	r3, r5
 800a45a:	2200      	movs	r2, #0
 800a45c:	4543      	cmp	r3, r8
 800a45e:	d321      	bcc.n	800a4a4 <__multiply+0x98>
 800a460:	f104 0314 	add.w	r3, r4, #20
 800a464:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a468:	f109 0314 	add.w	r3, r9, #20
 800a46c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a470:	9202      	str	r2, [sp, #8]
 800a472:	1b3a      	subs	r2, r7, r4
 800a474:	3a15      	subs	r2, #21
 800a476:	f022 0203 	bic.w	r2, r2, #3
 800a47a:	3204      	adds	r2, #4
 800a47c:	f104 0115 	add.w	r1, r4, #21
 800a480:	428f      	cmp	r7, r1
 800a482:	bf38      	it	cc
 800a484:	2204      	movcc	r2, #4
 800a486:	9201      	str	r2, [sp, #4]
 800a488:	9a02      	ldr	r2, [sp, #8]
 800a48a:	9303      	str	r3, [sp, #12]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d80c      	bhi.n	800a4aa <__multiply+0x9e>
 800a490:	2e00      	cmp	r6, #0
 800a492:	dd03      	ble.n	800a49c <__multiply+0x90>
 800a494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d05a      	beq.n	800a552 <__multiply+0x146>
 800a49c:	6106      	str	r6, [r0, #16]
 800a49e:	b005      	add	sp, #20
 800a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	f843 2b04 	str.w	r2, [r3], #4
 800a4a8:	e7d8      	b.n	800a45c <__multiply+0x50>
 800a4aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4ae:	f1ba 0f00 	cmp.w	sl, #0
 800a4b2:	d024      	beq.n	800a4fe <__multiply+0xf2>
 800a4b4:	f104 0e14 	add.w	lr, r4, #20
 800a4b8:	46a9      	mov	r9, r5
 800a4ba:	f04f 0c00 	mov.w	ip, #0
 800a4be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4c2:	f8d9 1000 	ldr.w	r1, [r9]
 800a4c6:	fa1f fb82 	uxth.w	fp, r2
 800a4ca:	b289      	uxth	r1, r1
 800a4cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4d8:	4461      	add	r1, ip
 800a4da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4de:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4e6:	b289      	uxth	r1, r1
 800a4e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4ec:	4577      	cmp	r7, lr
 800a4ee:	f849 1b04 	str.w	r1, [r9], #4
 800a4f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4f6:	d8e2      	bhi.n	800a4be <__multiply+0xb2>
 800a4f8:	9a01      	ldr	r2, [sp, #4]
 800a4fa:	f845 c002 	str.w	ip, [r5, r2]
 800a4fe:	9a03      	ldr	r2, [sp, #12]
 800a500:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a504:	3304      	adds	r3, #4
 800a506:	f1b9 0f00 	cmp.w	r9, #0
 800a50a:	d020      	beq.n	800a54e <__multiply+0x142>
 800a50c:	6829      	ldr	r1, [r5, #0]
 800a50e:	f104 0c14 	add.w	ip, r4, #20
 800a512:	46ae      	mov	lr, r5
 800a514:	f04f 0a00 	mov.w	sl, #0
 800a518:	f8bc b000 	ldrh.w	fp, [ip]
 800a51c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a520:	fb09 220b 	mla	r2, r9, fp, r2
 800a524:	4492      	add	sl, r2
 800a526:	b289      	uxth	r1, r1
 800a528:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a52c:	f84e 1b04 	str.w	r1, [lr], #4
 800a530:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a534:	f8be 1000 	ldrh.w	r1, [lr]
 800a538:	0c12      	lsrs	r2, r2, #16
 800a53a:	fb09 1102 	mla	r1, r9, r2, r1
 800a53e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a542:	4567      	cmp	r7, ip
 800a544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a548:	d8e6      	bhi.n	800a518 <__multiply+0x10c>
 800a54a:	9a01      	ldr	r2, [sp, #4]
 800a54c:	50a9      	str	r1, [r5, r2]
 800a54e:	3504      	adds	r5, #4
 800a550:	e79a      	b.n	800a488 <__multiply+0x7c>
 800a552:	3e01      	subs	r6, #1
 800a554:	e79c      	b.n	800a490 <__multiply+0x84>
 800a556:	bf00      	nop
 800a558:	0800c4a8 	.word	0x0800c4a8
 800a55c:	0800c598 	.word	0x0800c598

0800a560 <__pow5mult>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	4615      	mov	r5, r2
 800a566:	f012 0203 	ands.w	r2, r2, #3
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	d007      	beq.n	800a580 <__pow5mult+0x20>
 800a570:	4c25      	ldr	r4, [pc, #148]	; (800a608 <__pow5mult+0xa8>)
 800a572:	3a01      	subs	r2, #1
 800a574:	2300      	movs	r3, #0
 800a576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a57a:	f7ff fe51 	bl	800a220 <__multadd>
 800a57e:	4607      	mov	r7, r0
 800a580:	10ad      	asrs	r5, r5, #2
 800a582:	d03d      	beq.n	800a600 <__pow5mult+0xa0>
 800a584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a586:	b97c      	cbnz	r4, 800a5a8 <__pow5mult+0x48>
 800a588:	2010      	movs	r0, #16
 800a58a:	f7ff fdcd 	bl	800a128 <malloc>
 800a58e:	4602      	mov	r2, r0
 800a590:	6270      	str	r0, [r6, #36]	; 0x24
 800a592:	b928      	cbnz	r0, 800a5a0 <__pow5mult+0x40>
 800a594:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <__pow5mult+0xac>)
 800a596:	481e      	ldr	r0, [pc, #120]	; (800a610 <__pow5mult+0xb0>)
 800a598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a59c:	f001 fa90 	bl	800bac0 <__assert_func>
 800a5a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5a4:	6004      	str	r4, [r0, #0]
 800a5a6:	60c4      	str	r4, [r0, #12]
 800a5a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5b0:	b94c      	cbnz	r4, 800a5c6 <__pow5mult+0x66>
 800a5b2:	f240 2171 	movw	r1, #625	; 0x271
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7ff ff12 	bl	800a3e0 <__i2b>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	6003      	str	r3, [r0, #0]
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	07eb      	lsls	r3, r5, #31
 800a5cc:	d50a      	bpl.n	800a5e4 <__pow5mult+0x84>
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7ff ff1a 	bl	800a40c <__multiply>
 800a5d8:	4639      	mov	r1, r7
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff fdfd 	bl	800a1dc <_Bfree>
 800a5e2:	4647      	mov	r7, r8
 800a5e4:	106d      	asrs	r5, r5, #1
 800a5e6:	d00b      	beq.n	800a600 <__pow5mult+0xa0>
 800a5e8:	6820      	ldr	r0, [r4, #0]
 800a5ea:	b938      	cbnz	r0, 800a5fc <__pow5mult+0x9c>
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7ff ff0b 	bl	800a40c <__multiply>
 800a5f6:	6020      	str	r0, [r4, #0]
 800a5f8:	f8c0 9000 	str.w	r9, [r0]
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	e7e4      	b.n	800a5ca <__pow5mult+0x6a>
 800a600:	4638      	mov	r0, r7
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	bf00      	nop
 800a608:	0800c6e8 	.word	0x0800c6e8
 800a60c:	0800c436 	.word	0x0800c436
 800a610:	0800c598 	.word	0x0800c598

0800a614 <__lshift>:
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	6849      	ldr	r1, [r1, #4]
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a622:	68a3      	ldr	r3, [r4, #8]
 800a624:	4607      	mov	r7, r0
 800a626:	4691      	mov	r9, r2
 800a628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a62c:	f108 0601 	add.w	r6, r8, #1
 800a630:	42b3      	cmp	r3, r6
 800a632:	db0b      	blt.n	800a64c <__lshift+0x38>
 800a634:	4638      	mov	r0, r7
 800a636:	f7ff fd91 	bl	800a15c <_Balloc>
 800a63a:	4605      	mov	r5, r0
 800a63c:	b948      	cbnz	r0, 800a652 <__lshift+0x3e>
 800a63e:	4602      	mov	r2, r0
 800a640:	4b2a      	ldr	r3, [pc, #168]	; (800a6ec <__lshift+0xd8>)
 800a642:	482b      	ldr	r0, [pc, #172]	; (800a6f0 <__lshift+0xdc>)
 800a644:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a648:	f001 fa3a 	bl	800bac0 <__assert_func>
 800a64c:	3101      	adds	r1, #1
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	e7ee      	b.n	800a630 <__lshift+0x1c>
 800a652:	2300      	movs	r3, #0
 800a654:	f100 0114 	add.w	r1, r0, #20
 800a658:	f100 0210 	add.w	r2, r0, #16
 800a65c:	4618      	mov	r0, r3
 800a65e:	4553      	cmp	r3, sl
 800a660:	db37      	blt.n	800a6d2 <__lshift+0xbe>
 800a662:	6920      	ldr	r0, [r4, #16]
 800a664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a668:	f104 0314 	add.w	r3, r4, #20
 800a66c:	f019 091f 	ands.w	r9, r9, #31
 800a670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a678:	d02f      	beq.n	800a6da <__lshift+0xc6>
 800a67a:	f1c9 0e20 	rsb	lr, r9, #32
 800a67e:	468a      	mov	sl, r1
 800a680:	f04f 0c00 	mov.w	ip, #0
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	fa02 f209 	lsl.w	r2, r2, r9
 800a68a:	ea42 020c 	orr.w	r2, r2, ip
 800a68e:	f84a 2b04 	str.w	r2, [sl], #4
 800a692:	f853 2b04 	ldr.w	r2, [r3], #4
 800a696:	4298      	cmp	r0, r3
 800a698:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a69c:	d8f2      	bhi.n	800a684 <__lshift+0x70>
 800a69e:	1b03      	subs	r3, r0, r4
 800a6a0:	3b15      	subs	r3, #21
 800a6a2:	f023 0303 	bic.w	r3, r3, #3
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	f104 0215 	add.w	r2, r4, #21
 800a6ac:	4290      	cmp	r0, r2
 800a6ae:	bf38      	it	cc
 800a6b0:	2304      	movcc	r3, #4
 800a6b2:	f841 c003 	str.w	ip, [r1, r3]
 800a6b6:	f1bc 0f00 	cmp.w	ip, #0
 800a6ba:	d001      	beq.n	800a6c0 <__lshift+0xac>
 800a6bc:	f108 0602 	add.w	r6, r8, #2
 800a6c0:	3e01      	subs	r6, #1
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	612e      	str	r6, [r5, #16]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	f7ff fd88 	bl	800a1dc <_Bfree>
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	e7c1      	b.n	800a65e <__lshift+0x4a>
 800a6da:	3904      	subs	r1, #4
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6e4:	4298      	cmp	r0, r3
 800a6e6:	d8f9      	bhi.n	800a6dc <__lshift+0xc8>
 800a6e8:	e7ea      	b.n	800a6c0 <__lshift+0xac>
 800a6ea:	bf00      	nop
 800a6ec:	0800c4a8 	.word	0x0800c4a8
 800a6f0:	0800c598 	.word	0x0800c598

0800a6f4 <__mcmp>:
 800a6f4:	b530      	push	{r4, r5, lr}
 800a6f6:	6902      	ldr	r2, [r0, #16]
 800a6f8:	690c      	ldr	r4, [r1, #16]
 800a6fa:	1b12      	subs	r2, r2, r4
 800a6fc:	d10e      	bne.n	800a71c <__mcmp+0x28>
 800a6fe:	f100 0314 	add.w	r3, r0, #20
 800a702:	3114      	adds	r1, #20
 800a704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a70c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a714:	42a5      	cmp	r5, r4
 800a716:	d003      	beq.n	800a720 <__mcmp+0x2c>
 800a718:	d305      	bcc.n	800a726 <__mcmp+0x32>
 800a71a:	2201      	movs	r2, #1
 800a71c:	4610      	mov	r0, r2
 800a71e:	bd30      	pop	{r4, r5, pc}
 800a720:	4283      	cmp	r3, r0
 800a722:	d3f3      	bcc.n	800a70c <__mcmp+0x18>
 800a724:	e7fa      	b.n	800a71c <__mcmp+0x28>
 800a726:	f04f 32ff 	mov.w	r2, #4294967295
 800a72a:	e7f7      	b.n	800a71c <__mcmp+0x28>

0800a72c <__mdiff>:
 800a72c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	460c      	mov	r4, r1
 800a732:	4606      	mov	r6, r0
 800a734:	4611      	mov	r1, r2
 800a736:	4620      	mov	r0, r4
 800a738:	4690      	mov	r8, r2
 800a73a:	f7ff ffdb 	bl	800a6f4 <__mcmp>
 800a73e:	1e05      	subs	r5, r0, #0
 800a740:	d110      	bne.n	800a764 <__mdiff+0x38>
 800a742:	4629      	mov	r1, r5
 800a744:	4630      	mov	r0, r6
 800a746:	f7ff fd09 	bl	800a15c <_Balloc>
 800a74a:	b930      	cbnz	r0, 800a75a <__mdiff+0x2e>
 800a74c:	4b3a      	ldr	r3, [pc, #232]	; (800a838 <__mdiff+0x10c>)
 800a74e:	4602      	mov	r2, r0
 800a750:	f240 2132 	movw	r1, #562	; 0x232
 800a754:	4839      	ldr	r0, [pc, #228]	; (800a83c <__mdiff+0x110>)
 800a756:	f001 f9b3 	bl	800bac0 <__assert_func>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a764:	bfa4      	itt	ge
 800a766:	4643      	movge	r3, r8
 800a768:	46a0      	movge	r8, r4
 800a76a:	4630      	mov	r0, r6
 800a76c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a770:	bfa6      	itte	ge
 800a772:	461c      	movge	r4, r3
 800a774:	2500      	movge	r5, #0
 800a776:	2501      	movlt	r5, #1
 800a778:	f7ff fcf0 	bl	800a15c <_Balloc>
 800a77c:	b920      	cbnz	r0, 800a788 <__mdiff+0x5c>
 800a77e:	4b2e      	ldr	r3, [pc, #184]	; (800a838 <__mdiff+0x10c>)
 800a780:	4602      	mov	r2, r0
 800a782:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a786:	e7e5      	b.n	800a754 <__mdiff+0x28>
 800a788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a78c:	6926      	ldr	r6, [r4, #16]
 800a78e:	60c5      	str	r5, [r0, #12]
 800a790:	f104 0914 	add.w	r9, r4, #20
 800a794:	f108 0514 	add.w	r5, r8, #20
 800a798:	f100 0e14 	add.w	lr, r0, #20
 800a79c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7a4:	f108 0210 	add.w	r2, r8, #16
 800a7a8:	46f2      	mov	sl, lr
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7b4:	fa1f f883 	uxth.w	r8, r3
 800a7b8:	fa11 f18b 	uxtah	r1, r1, fp
 800a7bc:	0c1b      	lsrs	r3, r3, #16
 800a7be:	eba1 0808 	sub.w	r8, r1, r8
 800a7c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7ca:	fa1f f888 	uxth.w	r8, r8
 800a7ce:	1419      	asrs	r1, r3, #16
 800a7d0:	454e      	cmp	r6, r9
 800a7d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7d6:	f84a 3b04 	str.w	r3, [sl], #4
 800a7da:	d8e7      	bhi.n	800a7ac <__mdiff+0x80>
 800a7dc:	1b33      	subs	r3, r6, r4
 800a7de:	3b15      	subs	r3, #21
 800a7e0:	f023 0303 	bic.w	r3, r3, #3
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	3415      	adds	r4, #21
 800a7e8:	42a6      	cmp	r6, r4
 800a7ea:	bf38      	it	cc
 800a7ec:	2304      	movcc	r3, #4
 800a7ee:	441d      	add	r5, r3
 800a7f0:	4473      	add	r3, lr
 800a7f2:	469e      	mov	lr, r3
 800a7f4:	462e      	mov	r6, r5
 800a7f6:	4566      	cmp	r6, ip
 800a7f8:	d30e      	bcc.n	800a818 <__mdiff+0xec>
 800a7fa:	f10c 0203 	add.w	r2, ip, #3
 800a7fe:	1b52      	subs	r2, r2, r5
 800a800:	f022 0203 	bic.w	r2, r2, #3
 800a804:	3d03      	subs	r5, #3
 800a806:	45ac      	cmp	ip, r5
 800a808:	bf38      	it	cc
 800a80a:	2200      	movcc	r2, #0
 800a80c:	441a      	add	r2, r3
 800a80e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a812:	b17b      	cbz	r3, 800a834 <__mdiff+0x108>
 800a814:	6107      	str	r7, [r0, #16]
 800a816:	e7a3      	b.n	800a760 <__mdiff+0x34>
 800a818:	f856 8b04 	ldr.w	r8, [r6], #4
 800a81c:	fa11 f288 	uxtah	r2, r1, r8
 800a820:	1414      	asrs	r4, r2, #16
 800a822:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a826:	b292      	uxth	r2, r2
 800a828:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a82c:	f84e 2b04 	str.w	r2, [lr], #4
 800a830:	1421      	asrs	r1, r4, #16
 800a832:	e7e0      	b.n	800a7f6 <__mdiff+0xca>
 800a834:	3f01      	subs	r7, #1
 800a836:	e7ea      	b.n	800a80e <__mdiff+0xe2>
 800a838:	0800c4a8 	.word	0x0800c4a8
 800a83c:	0800c598 	.word	0x0800c598

0800a840 <__ulp>:
 800a840:	b082      	sub	sp, #8
 800a842:	ed8d 0b00 	vstr	d0, [sp]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	4912      	ldr	r1, [pc, #72]	; (800a894 <__ulp+0x54>)
 800a84a:	4019      	ands	r1, r3
 800a84c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a850:	2900      	cmp	r1, #0
 800a852:	dd05      	ble.n	800a860 <__ulp+0x20>
 800a854:	2200      	movs	r2, #0
 800a856:	460b      	mov	r3, r1
 800a858:	ec43 2b10 	vmov	d0, r2, r3
 800a85c:	b002      	add	sp, #8
 800a85e:	4770      	bx	lr
 800a860:	4249      	negs	r1, r1
 800a862:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a866:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	f04f 0300 	mov.w	r3, #0
 800a872:	da04      	bge.n	800a87e <__ulp+0x3e>
 800a874:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a878:	fa41 f300 	asr.w	r3, r1, r0
 800a87c:	e7ec      	b.n	800a858 <__ulp+0x18>
 800a87e:	f1a0 0114 	sub.w	r1, r0, #20
 800a882:	291e      	cmp	r1, #30
 800a884:	bfda      	itte	le
 800a886:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a88a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a88e:	2101      	movgt	r1, #1
 800a890:	460a      	mov	r2, r1
 800a892:	e7e1      	b.n	800a858 <__ulp+0x18>
 800a894:	7ff00000 	.word	0x7ff00000

0800a898 <__b2d>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	6905      	ldr	r5, [r0, #16]
 800a89c:	f100 0714 	add.w	r7, r0, #20
 800a8a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a8a4:	1f2e      	subs	r6, r5, #4
 800a8a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f7ff fd48 	bl	800a340 <__hi0bits>
 800a8b0:	f1c0 0320 	rsb	r3, r0, #32
 800a8b4:	280a      	cmp	r0, #10
 800a8b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a934 <__b2d+0x9c>
 800a8ba:	600b      	str	r3, [r1, #0]
 800a8bc:	dc14      	bgt.n	800a8e8 <__b2d+0x50>
 800a8be:	f1c0 0e0b 	rsb	lr, r0, #11
 800a8c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a8c6:	42b7      	cmp	r7, r6
 800a8c8:	ea41 030c 	orr.w	r3, r1, ip
 800a8cc:	bf34      	ite	cc
 800a8ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8d2:	2100      	movcs	r1, #0
 800a8d4:	3015      	adds	r0, #21
 800a8d6:	fa04 f000 	lsl.w	r0, r4, r0
 800a8da:	fa21 f10e 	lsr.w	r1, r1, lr
 800a8de:	ea40 0201 	orr.w	r2, r0, r1
 800a8e2:	ec43 2b10 	vmov	d0, r2, r3
 800a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e8:	42b7      	cmp	r7, r6
 800a8ea:	bf3a      	itte	cc
 800a8ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a8f4:	2100      	movcs	r1, #0
 800a8f6:	380b      	subs	r0, #11
 800a8f8:	d017      	beq.n	800a92a <__b2d+0x92>
 800a8fa:	f1c0 0c20 	rsb	ip, r0, #32
 800a8fe:	fa04 f500 	lsl.w	r5, r4, r0
 800a902:	42be      	cmp	r6, r7
 800a904:	fa21 f40c 	lsr.w	r4, r1, ip
 800a908:	ea45 0504 	orr.w	r5, r5, r4
 800a90c:	bf8c      	ite	hi
 800a90e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a912:	2400      	movls	r4, #0
 800a914:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a918:	fa01 f000 	lsl.w	r0, r1, r0
 800a91c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a920:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a924:	ea40 0204 	orr.w	r2, r0, r4
 800a928:	e7db      	b.n	800a8e2 <__b2d+0x4a>
 800a92a:	ea44 030c 	orr.w	r3, r4, ip
 800a92e:	460a      	mov	r2, r1
 800a930:	e7d7      	b.n	800a8e2 <__b2d+0x4a>
 800a932:	bf00      	nop
 800a934:	3ff00000 	.word	0x3ff00000

0800a938 <__d2b>:
 800a938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	4689      	mov	r9, r1
 800a93e:	2101      	movs	r1, #1
 800a940:	ec57 6b10 	vmov	r6, r7, d0
 800a944:	4690      	mov	r8, r2
 800a946:	f7ff fc09 	bl	800a15c <_Balloc>
 800a94a:	4604      	mov	r4, r0
 800a94c:	b930      	cbnz	r0, 800a95c <__d2b+0x24>
 800a94e:	4602      	mov	r2, r0
 800a950:	4b25      	ldr	r3, [pc, #148]	; (800a9e8 <__d2b+0xb0>)
 800a952:	4826      	ldr	r0, [pc, #152]	; (800a9ec <__d2b+0xb4>)
 800a954:	f240 310a 	movw	r1, #778	; 0x30a
 800a958:	f001 f8b2 	bl	800bac0 <__assert_func>
 800a95c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a964:	bb35      	cbnz	r5, 800a9b4 <__d2b+0x7c>
 800a966:	2e00      	cmp	r6, #0
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	d028      	beq.n	800a9be <__d2b+0x86>
 800a96c:	4668      	mov	r0, sp
 800a96e:	9600      	str	r6, [sp, #0]
 800a970:	f7ff fd06 	bl	800a380 <__lo0bits>
 800a974:	9900      	ldr	r1, [sp, #0]
 800a976:	b300      	cbz	r0, 800a9ba <__d2b+0x82>
 800a978:	9a01      	ldr	r2, [sp, #4]
 800a97a:	f1c0 0320 	rsb	r3, r0, #32
 800a97e:	fa02 f303 	lsl.w	r3, r2, r3
 800a982:	430b      	orrs	r3, r1
 800a984:	40c2      	lsrs	r2, r0
 800a986:	6163      	str	r3, [r4, #20]
 800a988:	9201      	str	r2, [sp, #4]
 800a98a:	9b01      	ldr	r3, [sp, #4]
 800a98c:	61a3      	str	r3, [r4, #24]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bf14      	ite	ne
 800a992:	2202      	movne	r2, #2
 800a994:	2201      	moveq	r2, #1
 800a996:	6122      	str	r2, [r4, #16]
 800a998:	b1d5      	cbz	r5, 800a9d0 <__d2b+0x98>
 800a99a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a99e:	4405      	add	r5, r0
 800a9a0:	f8c9 5000 	str.w	r5, [r9]
 800a9a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9a8:	f8c8 0000 	str.w	r0, [r8]
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	b003      	add	sp, #12
 800a9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9b8:	e7d5      	b.n	800a966 <__d2b+0x2e>
 800a9ba:	6161      	str	r1, [r4, #20]
 800a9bc:	e7e5      	b.n	800a98a <__d2b+0x52>
 800a9be:	a801      	add	r0, sp, #4
 800a9c0:	f7ff fcde 	bl	800a380 <__lo0bits>
 800a9c4:	9b01      	ldr	r3, [sp, #4]
 800a9c6:	6163      	str	r3, [r4, #20]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	6122      	str	r2, [r4, #16]
 800a9cc:	3020      	adds	r0, #32
 800a9ce:	e7e3      	b.n	800a998 <__d2b+0x60>
 800a9d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9d8:	f8c9 0000 	str.w	r0, [r9]
 800a9dc:	6918      	ldr	r0, [r3, #16]
 800a9de:	f7ff fcaf 	bl	800a340 <__hi0bits>
 800a9e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9e6:	e7df      	b.n	800a9a8 <__d2b+0x70>
 800a9e8:	0800c4a8 	.word	0x0800c4a8
 800a9ec:	0800c598 	.word	0x0800c598

0800a9f0 <__ratio>:
 800a9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	4688      	mov	r8, r1
 800a9f6:	4669      	mov	r1, sp
 800a9f8:	4681      	mov	r9, r0
 800a9fa:	f7ff ff4d 	bl	800a898 <__b2d>
 800a9fe:	a901      	add	r1, sp, #4
 800aa00:	4640      	mov	r0, r8
 800aa02:	ec55 4b10 	vmov	r4, r5, d0
 800aa06:	f7ff ff47 	bl	800a898 <__b2d>
 800aa0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa12:	eba3 0c02 	sub.w	ip, r3, r2
 800aa16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa20:	ec51 0b10 	vmov	r0, r1, d0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	bfd6      	itet	le
 800aa28:	460a      	movle	r2, r1
 800aa2a:	462a      	movgt	r2, r5
 800aa2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa30:	468b      	mov	fp, r1
 800aa32:	462f      	mov	r7, r5
 800aa34:	bfd4      	ite	le
 800aa36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa3e:	4620      	mov	r0, r4
 800aa40:	ee10 2a10 	vmov	r2, s0
 800aa44:	465b      	mov	r3, fp
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f5 ff00 	bl	800084c <__aeabi_ddiv>
 800aa4c:	ec41 0b10 	vmov	d0, r0, r1
 800aa50:	b003      	add	sp, #12
 800aa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa56 <__copybits>:
 800aa56:	3901      	subs	r1, #1
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	1149      	asrs	r1, r1, #5
 800aa5c:	6914      	ldr	r4, [r2, #16]
 800aa5e:	3101      	adds	r1, #1
 800aa60:	f102 0314 	add.w	r3, r2, #20
 800aa64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa6c:	1f05      	subs	r5, r0, #4
 800aa6e:	42a3      	cmp	r3, r4
 800aa70:	d30c      	bcc.n	800aa8c <__copybits+0x36>
 800aa72:	1aa3      	subs	r3, r4, r2
 800aa74:	3b11      	subs	r3, #17
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	3211      	adds	r2, #17
 800aa7c:	42a2      	cmp	r2, r4
 800aa7e:	bf88      	it	hi
 800aa80:	2300      	movhi	r3, #0
 800aa82:	4418      	add	r0, r3
 800aa84:	2300      	movs	r3, #0
 800aa86:	4288      	cmp	r0, r1
 800aa88:	d305      	bcc.n	800aa96 <__copybits+0x40>
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa90:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa94:	e7eb      	b.n	800aa6e <__copybits+0x18>
 800aa96:	f840 3b04 	str.w	r3, [r0], #4
 800aa9a:	e7f4      	b.n	800aa86 <__copybits+0x30>

0800aa9c <__any_on>:
 800aa9c:	f100 0214 	add.w	r2, r0, #20
 800aaa0:	6900      	ldr	r0, [r0, #16]
 800aaa2:	114b      	asrs	r3, r1, #5
 800aaa4:	4298      	cmp	r0, r3
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	db11      	blt.n	800aace <__any_on+0x32>
 800aaaa:	dd0a      	ble.n	800aac2 <__any_on+0x26>
 800aaac:	f011 011f 	ands.w	r1, r1, #31
 800aab0:	d007      	beq.n	800aac2 <__any_on+0x26>
 800aab2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aab6:	fa24 f001 	lsr.w	r0, r4, r1
 800aaba:	fa00 f101 	lsl.w	r1, r0, r1
 800aabe:	428c      	cmp	r4, r1
 800aac0:	d10b      	bne.n	800aada <__any_on+0x3e>
 800aac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d803      	bhi.n	800aad2 <__any_on+0x36>
 800aaca:	2000      	movs	r0, #0
 800aacc:	bd10      	pop	{r4, pc}
 800aace:	4603      	mov	r3, r0
 800aad0:	e7f7      	b.n	800aac2 <__any_on+0x26>
 800aad2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aad6:	2900      	cmp	r1, #0
 800aad8:	d0f5      	beq.n	800aac6 <__any_on+0x2a>
 800aada:	2001      	movs	r0, #1
 800aadc:	e7f6      	b.n	800aacc <__any_on+0x30>

0800aade <_calloc_r>:
 800aade:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aae0:	fba1 2402 	umull	r2, r4, r1, r2
 800aae4:	b94c      	cbnz	r4, 800aafa <_calloc_r+0x1c>
 800aae6:	4611      	mov	r1, r2
 800aae8:	9201      	str	r2, [sp, #4]
 800aaea:	f000 f87b 	bl	800abe4 <_malloc_r>
 800aaee:	9a01      	ldr	r2, [sp, #4]
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	b930      	cbnz	r0, 800ab02 <_calloc_r+0x24>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	b003      	add	sp, #12
 800aaf8:	bd30      	pop	{r4, r5, pc}
 800aafa:	220c      	movs	r2, #12
 800aafc:	6002      	str	r2, [r0, #0]
 800aafe:	2500      	movs	r5, #0
 800ab00:	e7f8      	b.n	800aaf4 <_calloc_r+0x16>
 800ab02:	4621      	mov	r1, r4
 800ab04:	f7fb ff8e 	bl	8006a24 <memset>
 800ab08:	e7f4      	b.n	800aaf4 <_calloc_r+0x16>
	...

0800ab0c <_free_r>:
 800ab0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab0e:	2900      	cmp	r1, #0
 800ab10:	d044      	beq.n	800ab9c <_free_r+0x90>
 800ab12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab16:	9001      	str	r0, [sp, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab1e:	bfb8      	it	lt
 800ab20:	18e4      	addlt	r4, r4, r3
 800ab22:	f001 f839 	bl	800bb98 <__malloc_lock>
 800ab26:	4a1e      	ldr	r2, [pc, #120]	; (800aba0 <_free_r+0x94>)
 800ab28:	9801      	ldr	r0, [sp, #4]
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	b933      	cbnz	r3, 800ab3c <_free_r+0x30>
 800ab2e:	6063      	str	r3, [r4, #4]
 800ab30:	6014      	str	r4, [r2, #0]
 800ab32:	b003      	add	sp, #12
 800ab34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab38:	f001 b834 	b.w	800bba4 <__malloc_unlock>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d908      	bls.n	800ab52 <_free_r+0x46>
 800ab40:	6825      	ldr	r5, [r4, #0]
 800ab42:	1961      	adds	r1, r4, r5
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf01      	itttt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	1949      	addeq	r1, r1, r5
 800ab4e:	6021      	streq	r1, [r4, #0]
 800ab50:	e7ed      	b.n	800ab2e <_free_r+0x22>
 800ab52:	461a      	mov	r2, r3
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	b10b      	cbz	r3, 800ab5c <_free_r+0x50>
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d9fa      	bls.n	800ab52 <_free_r+0x46>
 800ab5c:	6811      	ldr	r1, [r2, #0]
 800ab5e:	1855      	adds	r5, r2, r1
 800ab60:	42a5      	cmp	r5, r4
 800ab62:	d10b      	bne.n	800ab7c <_free_r+0x70>
 800ab64:	6824      	ldr	r4, [r4, #0]
 800ab66:	4421      	add	r1, r4
 800ab68:	1854      	adds	r4, r2, r1
 800ab6a:	42a3      	cmp	r3, r4
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	d1e0      	bne.n	800ab32 <_free_r+0x26>
 800ab70:	681c      	ldr	r4, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	6053      	str	r3, [r2, #4]
 800ab76:	4421      	add	r1, r4
 800ab78:	6011      	str	r1, [r2, #0]
 800ab7a:	e7da      	b.n	800ab32 <_free_r+0x26>
 800ab7c:	d902      	bls.n	800ab84 <_free_r+0x78>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7d6      	b.n	800ab32 <_free_r+0x26>
 800ab84:	6825      	ldr	r5, [r4, #0]
 800ab86:	1961      	adds	r1, r4, r5
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf04      	itt	eq
 800ab8c:	6819      	ldreq	r1, [r3, #0]
 800ab8e:	685b      	ldreq	r3, [r3, #4]
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	bf04      	itt	eq
 800ab94:	1949      	addeq	r1, r1, r5
 800ab96:	6021      	streq	r1, [r4, #0]
 800ab98:	6054      	str	r4, [r2, #4]
 800ab9a:	e7ca      	b.n	800ab32 <_free_r+0x26>
 800ab9c:	b003      	add	sp, #12
 800ab9e:	bd30      	pop	{r4, r5, pc}
 800aba0:	20000dcc 	.word	0x20000dcc

0800aba4 <sbrk_aligned>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	4e0e      	ldr	r6, [pc, #56]	; (800abe0 <sbrk_aligned+0x3c>)
 800aba8:	460c      	mov	r4, r1
 800abaa:	6831      	ldr	r1, [r6, #0]
 800abac:	4605      	mov	r5, r0
 800abae:	b911      	cbnz	r1, 800abb6 <sbrk_aligned+0x12>
 800abb0:	f000 fe82 	bl	800b8b8 <_sbrk_r>
 800abb4:	6030      	str	r0, [r6, #0]
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 fe7d 	bl	800b8b8 <_sbrk_r>
 800abbe:	1c43      	adds	r3, r0, #1
 800abc0:	d00a      	beq.n	800abd8 <sbrk_aligned+0x34>
 800abc2:	1cc4      	adds	r4, r0, #3
 800abc4:	f024 0403 	bic.w	r4, r4, #3
 800abc8:	42a0      	cmp	r0, r4
 800abca:	d007      	beq.n	800abdc <sbrk_aligned+0x38>
 800abcc:	1a21      	subs	r1, r4, r0
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 fe72 	bl	800b8b8 <_sbrk_r>
 800abd4:	3001      	adds	r0, #1
 800abd6:	d101      	bne.n	800abdc <sbrk_aligned+0x38>
 800abd8:	f04f 34ff 	mov.w	r4, #4294967295
 800abdc:	4620      	mov	r0, r4
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	20000dd0 	.word	0x20000dd0

0800abe4 <_malloc_r>:
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	1ccd      	adds	r5, r1, #3
 800abea:	f025 0503 	bic.w	r5, r5, #3
 800abee:	3508      	adds	r5, #8
 800abf0:	2d0c      	cmp	r5, #12
 800abf2:	bf38      	it	cc
 800abf4:	250c      	movcc	r5, #12
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	4607      	mov	r7, r0
 800abfa:	db01      	blt.n	800ac00 <_malloc_r+0x1c>
 800abfc:	42a9      	cmp	r1, r5
 800abfe:	d905      	bls.n	800ac0c <_malloc_r+0x28>
 800ac00:	230c      	movs	r3, #12
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	2600      	movs	r6, #0
 800ac06:	4630      	mov	r0, r6
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0c:	4e2e      	ldr	r6, [pc, #184]	; (800acc8 <_malloc_r+0xe4>)
 800ac0e:	f000 ffc3 	bl	800bb98 <__malloc_lock>
 800ac12:	6833      	ldr	r3, [r6, #0]
 800ac14:	461c      	mov	r4, r3
 800ac16:	bb34      	cbnz	r4, 800ac66 <_malloc_r+0x82>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f7ff ffc2 	bl	800aba4 <sbrk_aligned>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	4604      	mov	r4, r0
 800ac24:	d14d      	bne.n	800acc2 <_malloc_r+0xde>
 800ac26:	6834      	ldr	r4, [r6, #0]
 800ac28:	4626      	mov	r6, r4
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d140      	bne.n	800acb0 <_malloc_r+0xcc>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	4631      	mov	r1, r6
 800ac32:	4638      	mov	r0, r7
 800ac34:	eb04 0803 	add.w	r8, r4, r3
 800ac38:	f000 fe3e 	bl	800b8b8 <_sbrk_r>
 800ac3c:	4580      	cmp	r8, r0
 800ac3e:	d13a      	bne.n	800acb6 <_malloc_r+0xd2>
 800ac40:	6821      	ldr	r1, [r4, #0]
 800ac42:	3503      	adds	r5, #3
 800ac44:	1a6d      	subs	r5, r5, r1
 800ac46:	f025 0503 	bic.w	r5, r5, #3
 800ac4a:	3508      	adds	r5, #8
 800ac4c:	2d0c      	cmp	r5, #12
 800ac4e:	bf38      	it	cc
 800ac50:	250c      	movcc	r5, #12
 800ac52:	4629      	mov	r1, r5
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7ff ffa5 	bl	800aba4 <sbrk_aligned>
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d02b      	beq.n	800acb6 <_malloc_r+0xd2>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	442b      	add	r3, r5
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	e00e      	b.n	800ac84 <_malloc_r+0xa0>
 800ac66:	6822      	ldr	r2, [r4, #0]
 800ac68:	1b52      	subs	r2, r2, r5
 800ac6a:	d41e      	bmi.n	800acaa <_malloc_r+0xc6>
 800ac6c:	2a0b      	cmp	r2, #11
 800ac6e:	d916      	bls.n	800ac9e <_malloc_r+0xba>
 800ac70:	1961      	adds	r1, r4, r5
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	6025      	str	r5, [r4, #0]
 800ac76:	bf18      	it	ne
 800ac78:	6059      	strne	r1, [r3, #4]
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	bf08      	it	eq
 800ac7e:	6031      	streq	r1, [r6, #0]
 800ac80:	5162      	str	r2, [r4, r5]
 800ac82:	604b      	str	r3, [r1, #4]
 800ac84:	4638      	mov	r0, r7
 800ac86:	f104 060b 	add.w	r6, r4, #11
 800ac8a:	f000 ff8b 	bl	800bba4 <__malloc_unlock>
 800ac8e:	f026 0607 	bic.w	r6, r6, #7
 800ac92:	1d23      	adds	r3, r4, #4
 800ac94:	1af2      	subs	r2, r6, r3
 800ac96:	d0b6      	beq.n	800ac06 <_malloc_r+0x22>
 800ac98:	1b9b      	subs	r3, r3, r6
 800ac9a:	50a3      	str	r3, [r4, r2]
 800ac9c:	e7b3      	b.n	800ac06 <_malloc_r+0x22>
 800ac9e:	6862      	ldr	r2, [r4, #4]
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	bf0c      	ite	eq
 800aca4:	6032      	streq	r2, [r6, #0]
 800aca6:	605a      	strne	r2, [r3, #4]
 800aca8:	e7ec      	b.n	800ac84 <_malloc_r+0xa0>
 800acaa:	4623      	mov	r3, r4
 800acac:	6864      	ldr	r4, [r4, #4]
 800acae:	e7b2      	b.n	800ac16 <_malloc_r+0x32>
 800acb0:	4634      	mov	r4, r6
 800acb2:	6876      	ldr	r6, [r6, #4]
 800acb4:	e7b9      	b.n	800ac2a <_malloc_r+0x46>
 800acb6:	230c      	movs	r3, #12
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	4638      	mov	r0, r7
 800acbc:	f000 ff72 	bl	800bba4 <__malloc_unlock>
 800acc0:	e7a1      	b.n	800ac06 <_malloc_r+0x22>
 800acc2:	6025      	str	r5, [r4, #0]
 800acc4:	e7de      	b.n	800ac84 <_malloc_r+0xa0>
 800acc6:	bf00      	nop
 800acc8:	20000dcc 	.word	0x20000dcc

0800accc <__ssputs_r>:
 800accc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd0:	688e      	ldr	r6, [r1, #8]
 800acd2:	429e      	cmp	r6, r3
 800acd4:	4682      	mov	sl, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	4690      	mov	r8, r2
 800acda:	461f      	mov	r7, r3
 800acdc:	d838      	bhi.n	800ad50 <__ssputs_r+0x84>
 800acde:	898a      	ldrh	r2, [r1, #12]
 800ace0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ace4:	d032      	beq.n	800ad4c <__ssputs_r+0x80>
 800ace6:	6825      	ldr	r5, [r4, #0]
 800ace8:	6909      	ldr	r1, [r1, #16]
 800acea:	eba5 0901 	sub.w	r9, r5, r1
 800acee:	6965      	ldr	r5, [r4, #20]
 800acf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acf8:	3301      	adds	r3, #1
 800acfa:	444b      	add	r3, r9
 800acfc:	106d      	asrs	r5, r5, #1
 800acfe:	429d      	cmp	r5, r3
 800ad00:	bf38      	it	cc
 800ad02:	461d      	movcc	r5, r3
 800ad04:	0553      	lsls	r3, r2, #21
 800ad06:	d531      	bpl.n	800ad6c <__ssputs_r+0xa0>
 800ad08:	4629      	mov	r1, r5
 800ad0a:	f7ff ff6b 	bl	800abe4 <_malloc_r>
 800ad0e:	4606      	mov	r6, r0
 800ad10:	b950      	cbnz	r0, 800ad28 <__ssputs_r+0x5c>
 800ad12:	230c      	movs	r3, #12
 800ad14:	f8ca 3000 	str.w	r3, [sl]
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad28:	6921      	ldr	r1, [r4, #16]
 800ad2a:	464a      	mov	r2, r9
 800ad2c:	f7fb fe6c 	bl	8006a08 <memcpy>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	6126      	str	r6, [r4, #16]
 800ad3e:	6165      	str	r5, [r4, #20]
 800ad40:	444e      	add	r6, r9
 800ad42:	eba5 0509 	sub.w	r5, r5, r9
 800ad46:	6026      	str	r6, [r4, #0]
 800ad48:	60a5      	str	r5, [r4, #8]
 800ad4a:	463e      	mov	r6, r7
 800ad4c:	42be      	cmp	r6, r7
 800ad4e:	d900      	bls.n	800ad52 <__ssputs_r+0x86>
 800ad50:	463e      	mov	r6, r7
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	4632      	mov	r2, r6
 800ad56:	4641      	mov	r1, r8
 800ad58:	f000 ff04 	bl	800bb64 <memmove>
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	1b9b      	subs	r3, r3, r6
 800ad60:	60a3      	str	r3, [r4, #8]
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	4433      	add	r3, r6
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e7db      	b.n	800ad24 <__ssputs_r+0x58>
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	f000 ff1f 	bl	800bbb0 <_realloc_r>
 800ad72:	4606      	mov	r6, r0
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1e1      	bne.n	800ad3c <__ssputs_r+0x70>
 800ad78:	6921      	ldr	r1, [r4, #16]
 800ad7a:	4650      	mov	r0, sl
 800ad7c:	f7ff fec6 	bl	800ab0c <_free_r>
 800ad80:	e7c7      	b.n	800ad12 <__ssputs_r+0x46>
	...

0800ad84 <_svfiprintf_r>:
 800ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad88:	4698      	mov	r8, r3
 800ad8a:	898b      	ldrh	r3, [r1, #12]
 800ad8c:	061b      	lsls	r3, r3, #24
 800ad8e:	b09d      	sub	sp, #116	; 0x74
 800ad90:	4607      	mov	r7, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	4614      	mov	r4, r2
 800ad96:	d50e      	bpl.n	800adb6 <_svfiprintf_r+0x32>
 800ad98:	690b      	ldr	r3, [r1, #16]
 800ad9a:	b963      	cbnz	r3, 800adb6 <_svfiprintf_r+0x32>
 800ad9c:	2140      	movs	r1, #64	; 0x40
 800ad9e:	f7ff ff21 	bl	800abe4 <_malloc_r>
 800ada2:	6028      	str	r0, [r5, #0]
 800ada4:	6128      	str	r0, [r5, #16]
 800ada6:	b920      	cbnz	r0, 800adb2 <_svfiprintf_r+0x2e>
 800ada8:	230c      	movs	r3, #12
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	e0d1      	b.n	800af56 <_svfiprintf_r+0x1d2>
 800adb2:	2340      	movs	r3, #64	; 0x40
 800adb4:	616b      	str	r3, [r5, #20]
 800adb6:	2300      	movs	r3, #0
 800adb8:	9309      	str	r3, [sp, #36]	; 0x24
 800adba:	2320      	movs	r3, #32
 800adbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc4:	2330      	movs	r3, #48	; 0x30
 800adc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af70 <_svfiprintf_r+0x1ec>
 800adca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adce:	f04f 0901 	mov.w	r9, #1
 800add2:	4623      	mov	r3, r4
 800add4:	469a      	mov	sl, r3
 800add6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adda:	b10a      	cbz	r2, 800ade0 <_svfiprintf_r+0x5c>
 800addc:	2a25      	cmp	r2, #37	; 0x25
 800adde:	d1f9      	bne.n	800add4 <_svfiprintf_r+0x50>
 800ade0:	ebba 0b04 	subs.w	fp, sl, r4
 800ade4:	d00b      	beq.n	800adfe <_svfiprintf_r+0x7a>
 800ade6:	465b      	mov	r3, fp
 800ade8:	4622      	mov	r2, r4
 800adea:	4629      	mov	r1, r5
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff ff6d 	bl	800accc <__ssputs_r>
 800adf2:	3001      	adds	r0, #1
 800adf4:	f000 80aa 	beq.w	800af4c <_svfiprintf_r+0x1c8>
 800adf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfa:	445a      	add	r2, fp
 800adfc:	9209      	str	r2, [sp, #36]	; 0x24
 800adfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 80a2 	beq.w	800af4c <_svfiprintf_r+0x1c8>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae12:	f10a 0a01 	add.w	sl, sl, #1
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	9307      	str	r3, [sp, #28]
 800ae1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae1e:	931a      	str	r3, [sp, #104]	; 0x68
 800ae20:	4654      	mov	r4, sl
 800ae22:	2205      	movs	r2, #5
 800ae24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae28:	4851      	ldr	r0, [pc, #324]	; (800af70 <_svfiprintf_r+0x1ec>)
 800ae2a:	f7f5 f9d9 	bl	80001e0 <memchr>
 800ae2e:	9a04      	ldr	r2, [sp, #16]
 800ae30:	b9d8      	cbnz	r0, 800ae6a <_svfiprintf_r+0xe6>
 800ae32:	06d0      	lsls	r0, r2, #27
 800ae34:	bf44      	itt	mi
 800ae36:	2320      	movmi	r3, #32
 800ae38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae3c:	0711      	lsls	r1, r2, #28
 800ae3e:	bf44      	itt	mi
 800ae40:	232b      	movmi	r3, #43	; 0x2b
 800ae42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae46:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4c:	d015      	beq.n	800ae7a <_svfiprintf_r+0xf6>
 800ae4e:	9a07      	ldr	r2, [sp, #28]
 800ae50:	4654      	mov	r4, sl
 800ae52:	2000      	movs	r0, #0
 800ae54:	f04f 0c0a 	mov.w	ip, #10
 800ae58:	4621      	mov	r1, r4
 800ae5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5e:	3b30      	subs	r3, #48	; 0x30
 800ae60:	2b09      	cmp	r3, #9
 800ae62:	d94e      	bls.n	800af02 <_svfiprintf_r+0x17e>
 800ae64:	b1b0      	cbz	r0, 800ae94 <_svfiprintf_r+0x110>
 800ae66:	9207      	str	r2, [sp, #28]
 800ae68:	e014      	b.n	800ae94 <_svfiprintf_r+0x110>
 800ae6a:	eba0 0308 	sub.w	r3, r0, r8
 800ae6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae72:	4313      	orrs	r3, r2
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	46a2      	mov	sl, r4
 800ae78:	e7d2      	b.n	800ae20 <_svfiprintf_r+0x9c>
 800ae7a:	9b03      	ldr	r3, [sp, #12]
 800ae7c:	1d19      	adds	r1, r3, #4
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	9103      	str	r1, [sp, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bfbb      	ittet	lt
 800ae86:	425b      	neglt	r3, r3
 800ae88:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8c:	9307      	strge	r3, [sp, #28]
 800ae8e:	9307      	strlt	r3, [sp, #28]
 800ae90:	bfb8      	it	lt
 800ae92:	9204      	strlt	r2, [sp, #16]
 800ae94:	7823      	ldrb	r3, [r4, #0]
 800ae96:	2b2e      	cmp	r3, #46	; 0x2e
 800ae98:	d10c      	bne.n	800aeb4 <_svfiprintf_r+0x130>
 800ae9a:	7863      	ldrb	r3, [r4, #1]
 800ae9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9e:	d135      	bne.n	800af0c <_svfiprintf_r+0x188>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	1d1a      	adds	r2, r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	9203      	str	r2, [sp, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfb8      	it	lt
 800aeac:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb0:	3402      	adds	r4, #2
 800aeb2:	9305      	str	r3, [sp, #20]
 800aeb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af80 <_svfiprintf_r+0x1fc>
 800aeb8:	7821      	ldrb	r1, [r4, #0]
 800aeba:	2203      	movs	r2, #3
 800aebc:	4650      	mov	r0, sl
 800aebe:	f7f5 f98f 	bl	80001e0 <memchr>
 800aec2:	b140      	cbz	r0, 800aed6 <_svfiprintf_r+0x152>
 800aec4:	2340      	movs	r3, #64	; 0x40
 800aec6:	eba0 000a 	sub.w	r0, r0, sl
 800aeca:	fa03 f000 	lsl.w	r0, r3, r0
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	4303      	orrs	r3, r0
 800aed2:	3401      	adds	r4, #1
 800aed4:	9304      	str	r3, [sp, #16]
 800aed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeda:	4826      	ldr	r0, [pc, #152]	; (800af74 <_svfiprintf_r+0x1f0>)
 800aedc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee0:	2206      	movs	r2, #6
 800aee2:	f7f5 f97d 	bl	80001e0 <memchr>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d038      	beq.n	800af5c <_svfiprintf_r+0x1d8>
 800aeea:	4b23      	ldr	r3, [pc, #140]	; (800af78 <_svfiprintf_r+0x1f4>)
 800aeec:	bb1b      	cbnz	r3, 800af36 <_svfiprintf_r+0x1b2>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	3307      	adds	r3, #7
 800aef2:	f023 0307 	bic.w	r3, r3, #7
 800aef6:	3308      	adds	r3, #8
 800aef8:	9303      	str	r3, [sp, #12]
 800aefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefc:	4433      	add	r3, r6
 800aefe:	9309      	str	r3, [sp, #36]	; 0x24
 800af00:	e767      	b.n	800add2 <_svfiprintf_r+0x4e>
 800af02:	fb0c 3202 	mla	r2, ip, r2, r3
 800af06:	460c      	mov	r4, r1
 800af08:	2001      	movs	r0, #1
 800af0a:	e7a5      	b.n	800ae58 <_svfiprintf_r+0xd4>
 800af0c:	2300      	movs	r3, #0
 800af0e:	3401      	adds	r4, #1
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	4619      	mov	r1, r3
 800af14:	f04f 0c0a 	mov.w	ip, #10
 800af18:	4620      	mov	r0, r4
 800af1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af1e:	3a30      	subs	r2, #48	; 0x30
 800af20:	2a09      	cmp	r2, #9
 800af22:	d903      	bls.n	800af2c <_svfiprintf_r+0x1a8>
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0c5      	beq.n	800aeb4 <_svfiprintf_r+0x130>
 800af28:	9105      	str	r1, [sp, #20]
 800af2a:	e7c3      	b.n	800aeb4 <_svfiprintf_r+0x130>
 800af2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af30:	4604      	mov	r4, r0
 800af32:	2301      	movs	r3, #1
 800af34:	e7f0      	b.n	800af18 <_svfiprintf_r+0x194>
 800af36:	ab03      	add	r3, sp, #12
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	462a      	mov	r2, r5
 800af3c:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <_svfiprintf_r+0x1f8>)
 800af3e:	a904      	add	r1, sp, #16
 800af40:	4638      	mov	r0, r7
 800af42:	f7fb fe17 	bl	8006b74 <_printf_float>
 800af46:	1c42      	adds	r2, r0, #1
 800af48:	4606      	mov	r6, r0
 800af4a:	d1d6      	bne.n	800aefa <_svfiprintf_r+0x176>
 800af4c:	89ab      	ldrh	r3, [r5, #12]
 800af4e:	065b      	lsls	r3, r3, #25
 800af50:	f53f af2c 	bmi.w	800adac <_svfiprintf_r+0x28>
 800af54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af56:	b01d      	add	sp, #116	; 0x74
 800af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5c:	ab03      	add	r3, sp, #12
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	462a      	mov	r2, r5
 800af62:	4b06      	ldr	r3, [pc, #24]	; (800af7c <_svfiprintf_r+0x1f8>)
 800af64:	a904      	add	r1, sp, #16
 800af66:	4638      	mov	r0, r7
 800af68:	f7fc f8a8 	bl	80070bc <_printf_i>
 800af6c:	e7eb      	b.n	800af46 <_svfiprintf_r+0x1c2>
 800af6e:	bf00      	nop
 800af70:	0800c6f4 	.word	0x0800c6f4
 800af74:	0800c6fe 	.word	0x0800c6fe
 800af78:	08006b75 	.word	0x08006b75
 800af7c:	0800accd 	.word	0x0800accd
 800af80:	0800c6fa 	.word	0x0800c6fa

0800af84 <_sungetc_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	1c4b      	adds	r3, r1, #1
 800af88:	4614      	mov	r4, r2
 800af8a:	d103      	bne.n	800af94 <_sungetc_r+0x10>
 800af8c:	f04f 35ff 	mov.w	r5, #4294967295
 800af90:	4628      	mov	r0, r5
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	8993      	ldrh	r3, [r2, #12]
 800af96:	f023 0320 	bic.w	r3, r3, #32
 800af9a:	8193      	strh	r3, [r2, #12]
 800af9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af9e:	6852      	ldr	r2, [r2, #4]
 800afa0:	b2cd      	uxtb	r5, r1
 800afa2:	b18b      	cbz	r3, 800afc8 <_sungetc_r+0x44>
 800afa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afa6:	4293      	cmp	r3, r2
 800afa8:	dd08      	ble.n	800afbc <_sungetc_r+0x38>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	1e5a      	subs	r2, r3, #1
 800afae:	6022      	str	r2, [r4, #0]
 800afb0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800afb4:	6863      	ldr	r3, [r4, #4]
 800afb6:	3301      	adds	r3, #1
 800afb8:	6063      	str	r3, [r4, #4]
 800afba:	e7e9      	b.n	800af90 <_sungetc_r+0xc>
 800afbc:	4621      	mov	r1, r4
 800afbe:	f000 fd37 	bl	800ba30 <__submore>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0f1      	beq.n	800afaa <_sungetc_r+0x26>
 800afc6:	e7e1      	b.n	800af8c <_sungetc_r+0x8>
 800afc8:	6921      	ldr	r1, [r4, #16]
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	b151      	cbz	r1, 800afe4 <_sungetc_r+0x60>
 800afce:	4299      	cmp	r1, r3
 800afd0:	d208      	bcs.n	800afe4 <_sungetc_r+0x60>
 800afd2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800afd6:	42a9      	cmp	r1, r5
 800afd8:	d104      	bne.n	800afe4 <_sungetc_r+0x60>
 800afda:	3b01      	subs	r3, #1
 800afdc:	3201      	adds	r2, #1
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	6062      	str	r2, [r4, #4]
 800afe2:	e7d5      	b.n	800af90 <_sungetc_r+0xc>
 800afe4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800afe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afec:	6363      	str	r3, [r4, #52]	; 0x34
 800afee:	2303      	movs	r3, #3
 800aff0:	63a3      	str	r3, [r4, #56]	; 0x38
 800aff2:	4623      	mov	r3, r4
 800aff4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	2301      	movs	r3, #1
 800affc:	e7dc      	b.n	800afb8 <_sungetc_r+0x34>

0800affe <__ssrefill_r>:
 800affe:	b510      	push	{r4, lr}
 800b000:	460c      	mov	r4, r1
 800b002:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b004:	b169      	cbz	r1, 800b022 <__ssrefill_r+0x24>
 800b006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b00a:	4299      	cmp	r1, r3
 800b00c:	d001      	beq.n	800b012 <__ssrefill_r+0x14>
 800b00e:	f7ff fd7d 	bl	800ab0c <_free_r>
 800b012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	2000      	movs	r0, #0
 800b018:	6360      	str	r0, [r4, #52]	; 0x34
 800b01a:	b113      	cbz	r3, 800b022 <__ssrefill_r+0x24>
 800b01c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	bd10      	pop	{r4, pc}
 800b022:	6923      	ldr	r3, [r4, #16]
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	2300      	movs	r3, #0
 800b028:	6063      	str	r3, [r4, #4]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f043 0320 	orr.w	r3, r3, #32
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	e7f3      	b.n	800b020 <__ssrefill_r+0x22>

0800b038 <__ssvfiscanf_r>:
 800b038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b03c:	460c      	mov	r4, r1
 800b03e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b042:	2100      	movs	r1, #0
 800b044:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b048:	49a6      	ldr	r1, [pc, #664]	; (800b2e4 <__ssvfiscanf_r+0x2ac>)
 800b04a:	91a0      	str	r1, [sp, #640]	; 0x280
 800b04c:	f10d 0804 	add.w	r8, sp, #4
 800b050:	49a5      	ldr	r1, [pc, #660]	; (800b2e8 <__ssvfiscanf_r+0x2b0>)
 800b052:	4fa6      	ldr	r7, [pc, #664]	; (800b2ec <__ssvfiscanf_r+0x2b4>)
 800b054:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b2f0 <__ssvfiscanf_r+0x2b8>
 800b058:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b05c:	4606      	mov	r6, r0
 800b05e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	7813      	ldrb	r3, [r2, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 815a 	beq.w	800b31e <__ssvfiscanf_r+0x2e6>
 800b06a:	5dd9      	ldrb	r1, [r3, r7]
 800b06c:	f011 0108 	ands.w	r1, r1, #8
 800b070:	f102 0501 	add.w	r5, r2, #1
 800b074:	d019      	beq.n	800b0aa <__ssvfiscanf_r+0x72>
 800b076:	6863      	ldr	r3, [r4, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dd0f      	ble.n	800b09c <__ssvfiscanf_r+0x64>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	781a      	ldrb	r2, [r3, #0]
 800b080:	5cba      	ldrb	r2, [r7, r2]
 800b082:	0712      	lsls	r2, r2, #28
 800b084:	d401      	bmi.n	800b08a <__ssvfiscanf_r+0x52>
 800b086:	462a      	mov	r2, r5
 800b088:	e7eb      	b.n	800b062 <__ssvfiscanf_r+0x2a>
 800b08a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b08c:	3201      	adds	r2, #1
 800b08e:	9245      	str	r2, [sp, #276]	; 0x114
 800b090:	6862      	ldr	r2, [r4, #4]
 800b092:	3301      	adds	r3, #1
 800b094:	3a01      	subs	r2, #1
 800b096:	6062      	str	r2, [r4, #4]
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	e7ec      	b.n	800b076 <__ssvfiscanf_r+0x3e>
 800b09c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4798      	blx	r3
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d0e9      	beq.n	800b07c <__ssvfiscanf_r+0x44>
 800b0a8:	e7ed      	b.n	800b086 <__ssvfiscanf_r+0x4e>
 800b0aa:	2b25      	cmp	r3, #37	; 0x25
 800b0ac:	d012      	beq.n	800b0d4 <__ssvfiscanf_r+0x9c>
 800b0ae:	469a      	mov	sl, r3
 800b0b0:	6863      	ldr	r3, [r4, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f340 8091 	ble.w	800b1da <__ssvfiscanf_r+0x1a2>
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	7813      	ldrb	r3, [r2, #0]
 800b0bc:	4553      	cmp	r3, sl
 800b0be:	f040 812e 	bne.w	800b31e <__ssvfiscanf_r+0x2e6>
 800b0c2:	6863      	ldr	r3, [r4, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	6063      	str	r3, [r4, #4]
 800b0c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b0ca:	3201      	adds	r2, #1
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	6022      	str	r2, [r4, #0]
 800b0d0:	9345      	str	r3, [sp, #276]	; 0x114
 800b0d2:	e7d8      	b.n	800b086 <__ssvfiscanf_r+0x4e>
 800b0d4:	9141      	str	r1, [sp, #260]	; 0x104
 800b0d6:	9143      	str	r1, [sp, #268]	; 0x10c
 800b0d8:	7853      	ldrb	r3, [r2, #1]
 800b0da:	2b2a      	cmp	r3, #42	; 0x2a
 800b0dc:	bf02      	ittt	eq
 800b0de:	2310      	moveq	r3, #16
 800b0e0:	1c95      	addeq	r5, r2, #2
 800b0e2:	9341      	streq	r3, [sp, #260]	; 0x104
 800b0e4:	220a      	movs	r2, #10
 800b0e6:	46aa      	mov	sl, r5
 800b0e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b0ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b0f0:	2b09      	cmp	r3, #9
 800b0f2:	d91d      	bls.n	800b130 <__ssvfiscanf_r+0xf8>
 800b0f4:	487e      	ldr	r0, [pc, #504]	; (800b2f0 <__ssvfiscanf_r+0x2b8>)
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	f7f5 f872 	bl	80001e0 <memchr>
 800b0fc:	b140      	cbz	r0, 800b110 <__ssvfiscanf_r+0xd8>
 800b0fe:	2301      	movs	r3, #1
 800b100:	eba0 0009 	sub.w	r0, r0, r9
 800b104:	fa03 f000 	lsl.w	r0, r3, r0
 800b108:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b10a:	4318      	orrs	r0, r3
 800b10c:	9041      	str	r0, [sp, #260]	; 0x104
 800b10e:	4655      	mov	r5, sl
 800b110:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b114:	2b78      	cmp	r3, #120	; 0x78
 800b116:	d806      	bhi.n	800b126 <__ssvfiscanf_r+0xee>
 800b118:	2b57      	cmp	r3, #87	; 0x57
 800b11a:	d810      	bhi.n	800b13e <__ssvfiscanf_r+0x106>
 800b11c:	2b25      	cmp	r3, #37	; 0x25
 800b11e:	d0c6      	beq.n	800b0ae <__ssvfiscanf_r+0x76>
 800b120:	d856      	bhi.n	800b1d0 <__ssvfiscanf_r+0x198>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d064      	beq.n	800b1f0 <__ssvfiscanf_r+0x1b8>
 800b126:	2303      	movs	r3, #3
 800b128:	9347      	str	r3, [sp, #284]	; 0x11c
 800b12a:	230a      	movs	r3, #10
 800b12c:	9342      	str	r3, [sp, #264]	; 0x108
 800b12e:	e071      	b.n	800b214 <__ssvfiscanf_r+0x1dc>
 800b130:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b132:	fb02 1103 	mla	r1, r2, r3, r1
 800b136:	3930      	subs	r1, #48	; 0x30
 800b138:	9143      	str	r1, [sp, #268]	; 0x10c
 800b13a:	4655      	mov	r5, sl
 800b13c:	e7d3      	b.n	800b0e6 <__ssvfiscanf_r+0xae>
 800b13e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b142:	2a20      	cmp	r2, #32
 800b144:	d8ef      	bhi.n	800b126 <__ssvfiscanf_r+0xee>
 800b146:	a101      	add	r1, pc, #4	; (adr r1, 800b14c <__ssvfiscanf_r+0x114>)
 800b148:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b14c:	0800b1ff 	.word	0x0800b1ff
 800b150:	0800b127 	.word	0x0800b127
 800b154:	0800b127 	.word	0x0800b127
 800b158:	0800b25d 	.word	0x0800b25d
 800b15c:	0800b127 	.word	0x0800b127
 800b160:	0800b127 	.word	0x0800b127
 800b164:	0800b127 	.word	0x0800b127
 800b168:	0800b127 	.word	0x0800b127
 800b16c:	0800b127 	.word	0x0800b127
 800b170:	0800b127 	.word	0x0800b127
 800b174:	0800b127 	.word	0x0800b127
 800b178:	0800b273 	.word	0x0800b273
 800b17c:	0800b249 	.word	0x0800b249
 800b180:	0800b1d7 	.word	0x0800b1d7
 800b184:	0800b1d7 	.word	0x0800b1d7
 800b188:	0800b1d7 	.word	0x0800b1d7
 800b18c:	0800b127 	.word	0x0800b127
 800b190:	0800b24d 	.word	0x0800b24d
 800b194:	0800b127 	.word	0x0800b127
 800b198:	0800b127 	.word	0x0800b127
 800b19c:	0800b127 	.word	0x0800b127
 800b1a0:	0800b127 	.word	0x0800b127
 800b1a4:	0800b283 	.word	0x0800b283
 800b1a8:	0800b255 	.word	0x0800b255
 800b1ac:	0800b1f7 	.word	0x0800b1f7
 800b1b0:	0800b127 	.word	0x0800b127
 800b1b4:	0800b127 	.word	0x0800b127
 800b1b8:	0800b27f 	.word	0x0800b27f
 800b1bc:	0800b127 	.word	0x0800b127
 800b1c0:	0800b249 	.word	0x0800b249
 800b1c4:	0800b127 	.word	0x0800b127
 800b1c8:	0800b127 	.word	0x0800b127
 800b1cc:	0800b1ff 	.word	0x0800b1ff
 800b1d0:	3b45      	subs	r3, #69	; 0x45
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d8a7      	bhi.n	800b126 <__ssvfiscanf_r+0xee>
 800b1d6:	2305      	movs	r3, #5
 800b1d8:	e01b      	b.n	800b212 <__ssvfiscanf_r+0x1da>
 800b1da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1dc:	4621      	mov	r1, r4
 800b1de:	4630      	mov	r0, r6
 800b1e0:	4798      	blx	r3
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f43f af68 	beq.w	800b0b8 <__ssvfiscanf_r+0x80>
 800b1e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f040 808d 	bne.w	800b30a <__ssvfiscanf_r+0x2d2>
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	e08f      	b.n	800b316 <__ssvfiscanf_r+0x2de>
 800b1f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b1f8:	f042 0220 	orr.w	r2, r2, #32
 800b1fc:	9241      	str	r2, [sp, #260]	; 0x104
 800b1fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b204:	9241      	str	r2, [sp, #260]	; 0x104
 800b206:	2210      	movs	r2, #16
 800b208:	2b6f      	cmp	r3, #111	; 0x6f
 800b20a:	9242      	str	r2, [sp, #264]	; 0x108
 800b20c:	bf34      	ite	cc
 800b20e:	2303      	movcc	r3, #3
 800b210:	2304      	movcs	r3, #4
 800b212:	9347      	str	r3, [sp, #284]	; 0x11c
 800b214:	6863      	ldr	r3, [r4, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	dd42      	ble.n	800b2a0 <__ssvfiscanf_r+0x268>
 800b21a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b21c:	0659      	lsls	r1, r3, #25
 800b21e:	d404      	bmi.n	800b22a <__ssvfiscanf_r+0x1f2>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	5cba      	ldrb	r2, [r7, r2]
 800b226:	0712      	lsls	r2, r2, #28
 800b228:	d441      	bmi.n	800b2ae <__ssvfiscanf_r+0x276>
 800b22a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	dc50      	bgt.n	800b2d2 <__ssvfiscanf_r+0x29a>
 800b230:	466b      	mov	r3, sp
 800b232:	4622      	mov	r2, r4
 800b234:	a941      	add	r1, sp, #260	; 0x104
 800b236:	4630      	mov	r0, r6
 800b238:	f000 f9d0 	bl	800b5dc <_scanf_chars>
 800b23c:	2801      	cmp	r0, #1
 800b23e:	d06e      	beq.n	800b31e <__ssvfiscanf_r+0x2e6>
 800b240:	2802      	cmp	r0, #2
 800b242:	f47f af20 	bne.w	800b086 <__ssvfiscanf_r+0x4e>
 800b246:	e7cf      	b.n	800b1e8 <__ssvfiscanf_r+0x1b0>
 800b248:	220a      	movs	r2, #10
 800b24a:	e7dd      	b.n	800b208 <__ssvfiscanf_r+0x1d0>
 800b24c:	2300      	movs	r3, #0
 800b24e:	9342      	str	r3, [sp, #264]	; 0x108
 800b250:	2303      	movs	r3, #3
 800b252:	e7de      	b.n	800b212 <__ssvfiscanf_r+0x1da>
 800b254:	2308      	movs	r3, #8
 800b256:	9342      	str	r3, [sp, #264]	; 0x108
 800b258:	2304      	movs	r3, #4
 800b25a:	e7da      	b.n	800b212 <__ssvfiscanf_r+0x1da>
 800b25c:	4629      	mov	r1, r5
 800b25e:	4640      	mov	r0, r8
 800b260:	f000 fb3a 	bl	800b8d8 <__sccl>
 800b264:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26a:	9341      	str	r3, [sp, #260]	; 0x104
 800b26c:	4605      	mov	r5, r0
 800b26e:	2301      	movs	r3, #1
 800b270:	e7cf      	b.n	800b212 <__ssvfiscanf_r+0x1da>
 800b272:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b278:	9341      	str	r3, [sp, #260]	; 0x104
 800b27a:	2300      	movs	r3, #0
 800b27c:	e7c9      	b.n	800b212 <__ssvfiscanf_r+0x1da>
 800b27e:	2302      	movs	r3, #2
 800b280:	e7c7      	b.n	800b212 <__ssvfiscanf_r+0x1da>
 800b282:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b284:	06c3      	lsls	r3, r0, #27
 800b286:	f53f aefe 	bmi.w	800b086 <__ssvfiscanf_r+0x4e>
 800b28a:	9b00      	ldr	r3, [sp, #0]
 800b28c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b28e:	1d19      	adds	r1, r3, #4
 800b290:	9100      	str	r1, [sp, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f010 0f01 	tst.w	r0, #1
 800b298:	bf14      	ite	ne
 800b29a:	801a      	strhne	r2, [r3, #0]
 800b29c:	601a      	streq	r2, [r3, #0]
 800b29e:	e6f2      	b.n	800b086 <__ssvfiscanf_r+0x4e>
 800b2a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4798      	blx	r3
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d0b6      	beq.n	800b21a <__ssvfiscanf_r+0x1e2>
 800b2ac:	e79c      	b.n	800b1e8 <__ssvfiscanf_r+0x1b0>
 800b2ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2b0:	3201      	adds	r2, #1
 800b2b2:	9245      	str	r2, [sp, #276]	; 0x114
 800b2b4:	6862      	ldr	r2, [r4, #4]
 800b2b6:	3a01      	subs	r2, #1
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	6062      	str	r2, [r4, #4]
 800b2bc:	dd02      	ble.n	800b2c4 <__ssvfiscanf_r+0x28c>
 800b2be:	3301      	adds	r3, #1
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	e7ad      	b.n	800b220 <__ssvfiscanf_r+0x1e8>
 800b2c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4798      	blx	r3
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d0a7      	beq.n	800b220 <__ssvfiscanf_r+0x1e8>
 800b2d0:	e78a      	b.n	800b1e8 <__ssvfiscanf_r+0x1b0>
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	dc0e      	bgt.n	800b2f4 <__ssvfiscanf_r+0x2bc>
 800b2d6:	466b      	mov	r3, sp
 800b2d8:	4622      	mov	r2, r4
 800b2da:	a941      	add	r1, sp, #260	; 0x104
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f000 f9d7 	bl	800b690 <_scanf_i>
 800b2e2:	e7ab      	b.n	800b23c <__ssvfiscanf_r+0x204>
 800b2e4:	0800af85 	.word	0x0800af85
 800b2e8:	0800afff 	.word	0x0800afff
 800b2ec:	0800c329 	.word	0x0800c329
 800b2f0:	0800c6fa 	.word	0x0800c6fa
 800b2f4:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <__ssvfiscanf_r+0x2ec>)
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f43f aec5 	beq.w	800b086 <__ssvfiscanf_r+0x4e>
 800b2fc:	466b      	mov	r3, sp
 800b2fe:	4622      	mov	r2, r4
 800b300:	a941      	add	r1, sp, #260	; 0x104
 800b302:	4630      	mov	r0, r6
 800b304:	f7fc f800 	bl	8007308 <_scanf_float>
 800b308:	e798      	b.n	800b23c <__ssvfiscanf_r+0x204>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b310:	bf18      	it	ne
 800b312:	f04f 30ff 	movne.w	r0, #4294967295
 800b316:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b320:	e7f9      	b.n	800b316 <__ssvfiscanf_r+0x2de>
 800b322:	bf00      	nop
 800b324:	08007309 	.word	0x08007309

0800b328 <__sfputc_r>:
 800b328:	6893      	ldr	r3, [r2, #8]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	b410      	push	{r4}
 800b330:	6093      	str	r3, [r2, #8]
 800b332:	da08      	bge.n	800b346 <__sfputc_r+0x1e>
 800b334:	6994      	ldr	r4, [r2, #24]
 800b336:	42a3      	cmp	r3, r4
 800b338:	db01      	blt.n	800b33e <__sfputc_r+0x16>
 800b33a:	290a      	cmp	r1, #10
 800b33c:	d103      	bne.n	800b346 <__sfputc_r+0x1e>
 800b33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b342:	f7fd b9ed 	b.w	8008720 <__swbuf_r>
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	1c58      	adds	r0, r3, #1
 800b34a:	6010      	str	r0, [r2, #0]
 800b34c:	7019      	strb	r1, [r3, #0]
 800b34e:	4608      	mov	r0, r1
 800b350:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <__sfputs_r>:
 800b356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b358:	4606      	mov	r6, r0
 800b35a:	460f      	mov	r7, r1
 800b35c:	4614      	mov	r4, r2
 800b35e:	18d5      	adds	r5, r2, r3
 800b360:	42ac      	cmp	r4, r5
 800b362:	d101      	bne.n	800b368 <__sfputs_r+0x12>
 800b364:	2000      	movs	r0, #0
 800b366:	e007      	b.n	800b378 <__sfputs_r+0x22>
 800b368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36c:	463a      	mov	r2, r7
 800b36e:	4630      	mov	r0, r6
 800b370:	f7ff ffda 	bl	800b328 <__sfputc_r>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d1f3      	bne.n	800b360 <__sfputs_r+0xa>
 800b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b37c <_vfiprintf_r>:
 800b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b380:	460d      	mov	r5, r1
 800b382:	b09d      	sub	sp, #116	; 0x74
 800b384:	4614      	mov	r4, r2
 800b386:	4698      	mov	r8, r3
 800b388:	4606      	mov	r6, r0
 800b38a:	b118      	cbz	r0, 800b394 <_vfiprintf_r+0x18>
 800b38c:	6983      	ldr	r3, [r0, #24]
 800b38e:	b90b      	cbnz	r3, 800b394 <_vfiprintf_r+0x18>
 800b390:	f7fe fa3e 	bl	8009810 <__sinit>
 800b394:	4b89      	ldr	r3, [pc, #548]	; (800b5bc <_vfiprintf_r+0x240>)
 800b396:	429d      	cmp	r5, r3
 800b398:	d11b      	bne.n	800b3d2 <_vfiprintf_r+0x56>
 800b39a:	6875      	ldr	r5, [r6, #4]
 800b39c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b39e:	07d9      	lsls	r1, r3, #31
 800b3a0:	d405      	bmi.n	800b3ae <_vfiprintf_r+0x32>
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	059a      	lsls	r2, r3, #22
 800b3a6:	d402      	bmi.n	800b3ae <_vfiprintf_r+0x32>
 800b3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3aa:	f7fe fe42 	bl	800a032 <__retarget_lock_acquire_recursive>
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	071b      	lsls	r3, r3, #28
 800b3b2:	d501      	bpl.n	800b3b8 <_vfiprintf_r+0x3c>
 800b3b4:	692b      	ldr	r3, [r5, #16]
 800b3b6:	b9eb      	cbnz	r3, 800b3f4 <_vfiprintf_r+0x78>
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7fd fa14 	bl	80087e8 <__swsetup_r>
 800b3c0:	b1c0      	cbz	r0, 800b3f4 <_vfiprintf_r+0x78>
 800b3c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3c4:	07dc      	lsls	r4, r3, #31
 800b3c6:	d50e      	bpl.n	800b3e6 <_vfiprintf_r+0x6a>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	b01d      	add	sp, #116	; 0x74
 800b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d2:	4b7b      	ldr	r3, [pc, #492]	; (800b5c0 <_vfiprintf_r+0x244>)
 800b3d4:	429d      	cmp	r5, r3
 800b3d6:	d101      	bne.n	800b3dc <_vfiprintf_r+0x60>
 800b3d8:	68b5      	ldr	r5, [r6, #8]
 800b3da:	e7df      	b.n	800b39c <_vfiprintf_r+0x20>
 800b3dc:	4b79      	ldr	r3, [pc, #484]	; (800b5c4 <_vfiprintf_r+0x248>)
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	bf08      	it	eq
 800b3e2:	68f5      	ldreq	r5, [r6, #12]
 800b3e4:	e7da      	b.n	800b39c <_vfiprintf_r+0x20>
 800b3e6:	89ab      	ldrh	r3, [r5, #12]
 800b3e8:	0598      	lsls	r0, r3, #22
 800b3ea:	d4ed      	bmi.n	800b3c8 <_vfiprintf_r+0x4c>
 800b3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ee:	f7fe fe21 	bl	800a034 <__retarget_lock_release_recursive>
 800b3f2:	e7e9      	b.n	800b3c8 <_vfiprintf_r+0x4c>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	2320      	movs	r3, #32
 800b3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b402:	2330      	movs	r3, #48	; 0x30
 800b404:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5c8 <_vfiprintf_r+0x24c>
 800b408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b40c:	f04f 0901 	mov.w	r9, #1
 800b410:	4623      	mov	r3, r4
 800b412:	469a      	mov	sl, r3
 800b414:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b418:	b10a      	cbz	r2, 800b41e <_vfiprintf_r+0xa2>
 800b41a:	2a25      	cmp	r2, #37	; 0x25
 800b41c:	d1f9      	bne.n	800b412 <_vfiprintf_r+0x96>
 800b41e:	ebba 0b04 	subs.w	fp, sl, r4
 800b422:	d00b      	beq.n	800b43c <_vfiprintf_r+0xc0>
 800b424:	465b      	mov	r3, fp
 800b426:	4622      	mov	r2, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f7ff ff93 	bl	800b356 <__sfputs_r>
 800b430:	3001      	adds	r0, #1
 800b432:	f000 80aa 	beq.w	800b58a <_vfiprintf_r+0x20e>
 800b436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b438:	445a      	add	r2, fp
 800b43a:	9209      	str	r2, [sp, #36]	; 0x24
 800b43c:	f89a 3000 	ldrb.w	r3, [sl]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 80a2 	beq.w	800b58a <_vfiprintf_r+0x20e>
 800b446:	2300      	movs	r3, #0
 800b448:	f04f 32ff 	mov.w	r2, #4294967295
 800b44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b450:	f10a 0a01 	add.w	sl, sl, #1
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	9307      	str	r3, [sp, #28]
 800b458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b45c:	931a      	str	r3, [sp, #104]	; 0x68
 800b45e:	4654      	mov	r4, sl
 800b460:	2205      	movs	r2, #5
 800b462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b466:	4858      	ldr	r0, [pc, #352]	; (800b5c8 <_vfiprintf_r+0x24c>)
 800b468:	f7f4 feba 	bl	80001e0 <memchr>
 800b46c:	9a04      	ldr	r2, [sp, #16]
 800b46e:	b9d8      	cbnz	r0, 800b4a8 <_vfiprintf_r+0x12c>
 800b470:	06d1      	lsls	r1, r2, #27
 800b472:	bf44      	itt	mi
 800b474:	2320      	movmi	r3, #32
 800b476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b47a:	0713      	lsls	r3, r2, #28
 800b47c:	bf44      	itt	mi
 800b47e:	232b      	movmi	r3, #43	; 0x2b
 800b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b484:	f89a 3000 	ldrb.w	r3, [sl]
 800b488:	2b2a      	cmp	r3, #42	; 0x2a
 800b48a:	d015      	beq.n	800b4b8 <_vfiprintf_r+0x13c>
 800b48c:	9a07      	ldr	r2, [sp, #28]
 800b48e:	4654      	mov	r4, sl
 800b490:	2000      	movs	r0, #0
 800b492:	f04f 0c0a 	mov.w	ip, #10
 800b496:	4621      	mov	r1, r4
 800b498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b49c:	3b30      	subs	r3, #48	; 0x30
 800b49e:	2b09      	cmp	r3, #9
 800b4a0:	d94e      	bls.n	800b540 <_vfiprintf_r+0x1c4>
 800b4a2:	b1b0      	cbz	r0, 800b4d2 <_vfiprintf_r+0x156>
 800b4a4:	9207      	str	r2, [sp, #28]
 800b4a6:	e014      	b.n	800b4d2 <_vfiprintf_r+0x156>
 800b4a8:	eba0 0308 	sub.w	r3, r0, r8
 800b4ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	46a2      	mov	sl, r4
 800b4b6:	e7d2      	b.n	800b45e <_vfiprintf_r+0xe2>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	1d19      	adds	r1, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9103      	str	r1, [sp, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bfbb      	ittet	lt
 800b4c4:	425b      	neglt	r3, r3
 800b4c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ca:	9307      	strge	r3, [sp, #28]
 800b4cc:	9307      	strlt	r3, [sp, #28]
 800b4ce:	bfb8      	it	lt
 800b4d0:	9204      	strlt	r2, [sp, #16]
 800b4d2:	7823      	ldrb	r3, [r4, #0]
 800b4d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4d6:	d10c      	bne.n	800b4f2 <_vfiprintf_r+0x176>
 800b4d8:	7863      	ldrb	r3, [r4, #1]
 800b4da:	2b2a      	cmp	r3, #42	; 0x2a
 800b4dc:	d135      	bne.n	800b54a <_vfiprintf_r+0x1ce>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	1d1a      	adds	r2, r3, #4
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	9203      	str	r2, [sp, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	bfb8      	it	lt
 800b4ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ee:	3402      	adds	r4, #2
 800b4f0:	9305      	str	r3, [sp, #20]
 800b4f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5d8 <_vfiprintf_r+0x25c>
 800b4f6:	7821      	ldrb	r1, [r4, #0]
 800b4f8:	2203      	movs	r2, #3
 800b4fa:	4650      	mov	r0, sl
 800b4fc:	f7f4 fe70 	bl	80001e0 <memchr>
 800b500:	b140      	cbz	r0, 800b514 <_vfiprintf_r+0x198>
 800b502:	2340      	movs	r3, #64	; 0x40
 800b504:	eba0 000a 	sub.w	r0, r0, sl
 800b508:	fa03 f000 	lsl.w	r0, r3, r0
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	4303      	orrs	r3, r0
 800b510:	3401      	adds	r4, #1
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b518:	482c      	ldr	r0, [pc, #176]	; (800b5cc <_vfiprintf_r+0x250>)
 800b51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b51e:	2206      	movs	r2, #6
 800b520:	f7f4 fe5e 	bl	80001e0 <memchr>
 800b524:	2800      	cmp	r0, #0
 800b526:	d03f      	beq.n	800b5a8 <_vfiprintf_r+0x22c>
 800b528:	4b29      	ldr	r3, [pc, #164]	; (800b5d0 <_vfiprintf_r+0x254>)
 800b52a:	bb1b      	cbnz	r3, 800b574 <_vfiprintf_r+0x1f8>
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	3307      	adds	r3, #7
 800b530:	f023 0307 	bic.w	r3, r3, #7
 800b534:	3308      	adds	r3, #8
 800b536:	9303      	str	r3, [sp, #12]
 800b538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53a:	443b      	add	r3, r7
 800b53c:	9309      	str	r3, [sp, #36]	; 0x24
 800b53e:	e767      	b.n	800b410 <_vfiprintf_r+0x94>
 800b540:	fb0c 3202 	mla	r2, ip, r2, r3
 800b544:	460c      	mov	r4, r1
 800b546:	2001      	movs	r0, #1
 800b548:	e7a5      	b.n	800b496 <_vfiprintf_r+0x11a>
 800b54a:	2300      	movs	r3, #0
 800b54c:	3401      	adds	r4, #1
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	4619      	mov	r1, r3
 800b552:	f04f 0c0a 	mov.w	ip, #10
 800b556:	4620      	mov	r0, r4
 800b558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b55c:	3a30      	subs	r2, #48	; 0x30
 800b55e:	2a09      	cmp	r2, #9
 800b560:	d903      	bls.n	800b56a <_vfiprintf_r+0x1ee>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0c5      	beq.n	800b4f2 <_vfiprintf_r+0x176>
 800b566:	9105      	str	r1, [sp, #20]
 800b568:	e7c3      	b.n	800b4f2 <_vfiprintf_r+0x176>
 800b56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b56e:	4604      	mov	r4, r0
 800b570:	2301      	movs	r3, #1
 800b572:	e7f0      	b.n	800b556 <_vfiprintf_r+0x1da>
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	462a      	mov	r2, r5
 800b57a:	4b16      	ldr	r3, [pc, #88]	; (800b5d4 <_vfiprintf_r+0x258>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4630      	mov	r0, r6
 800b580:	f7fb faf8 	bl	8006b74 <_printf_float>
 800b584:	4607      	mov	r7, r0
 800b586:	1c78      	adds	r0, r7, #1
 800b588:	d1d6      	bne.n	800b538 <_vfiprintf_r+0x1bc>
 800b58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b58c:	07d9      	lsls	r1, r3, #31
 800b58e:	d405      	bmi.n	800b59c <_vfiprintf_r+0x220>
 800b590:	89ab      	ldrh	r3, [r5, #12]
 800b592:	059a      	lsls	r2, r3, #22
 800b594:	d402      	bmi.n	800b59c <_vfiprintf_r+0x220>
 800b596:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b598:	f7fe fd4c 	bl	800a034 <__retarget_lock_release_recursive>
 800b59c:	89ab      	ldrh	r3, [r5, #12]
 800b59e:	065b      	lsls	r3, r3, #25
 800b5a0:	f53f af12 	bmi.w	800b3c8 <_vfiprintf_r+0x4c>
 800b5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5a6:	e711      	b.n	800b3cc <_vfiprintf_r+0x50>
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <_vfiprintf_r+0x258>)
 800b5b0:	a904      	add	r1, sp, #16
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7fb fd82 	bl	80070bc <_printf_i>
 800b5b8:	e7e4      	b.n	800b584 <_vfiprintf_r+0x208>
 800b5ba:	bf00      	nop
 800b5bc:	0800c4dc 	.word	0x0800c4dc
 800b5c0:	0800c4fc 	.word	0x0800c4fc
 800b5c4:	0800c4bc 	.word	0x0800c4bc
 800b5c8:	0800c6f4 	.word	0x0800c6f4
 800b5cc:	0800c6fe 	.word	0x0800c6fe
 800b5d0:	08006b75 	.word	0x08006b75
 800b5d4:	0800b357 	.word	0x0800b357
 800b5d8:	0800c6fa 	.word	0x0800c6fa

0800b5dc <_scanf_chars>:
 800b5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	688a      	ldr	r2, [r1, #8]
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	b932      	cbnz	r2, 800b5f8 <_scanf_chars+0x1c>
 800b5ea:	698a      	ldr	r2, [r1, #24]
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2201      	moveq	r2, #1
 800b5f2:	f04f 32ff 	movne.w	r2, #4294967295
 800b5f6:	608a      	str	r2, [r1, #8]
 800b5f8:	6822      	ldr	r2, [r4, #0]
 800b5fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b68c <_scanf_chars+0xb0>
 800b5fe:	06d1      	lsls	r1, r2, #27
 800b600:	bf5f      	itttt	pl
 800b602:	681a      	ldrpl	r2, [r3, #0]
 800b604:	1d11      	addpl	r1, r2, #4
 800b606:	6019      	strpl	r1, [r3, #0]
 800b608:	6816      	ldrpl	r6, [r2, #0]
 800b60a:	2700      	movs	r7, #0
 800b60c:	69a0      	ldr	r0, [r4, #24]
 800b60e:	b188      	cbz	r0, 800b634 <_scanf_chars+0x58>
 800b610:	2801      	cmp	r0, #1
 800b612:	d107      	bne.n	800b624 <_scanf_chars+0x48>
 800b614:	682a      	ldr	r2, [r5, #0]
 800b616:	7811      	ldrb	r1, [r2, #0]
 800b618:	6962      	ldr	r2, [r4, #20]
 800b61a:	5c52      	ldrb	r2, [r2, r1]
 800b61c:	b952      	cbnz	r2, 800b634 <_scanf_chars+0x58>
 800b61e:	2f00      	cmp	r7, #0
 800b620:	d031      	beq.n	800b686 <_scanf_chars+0xaa>
 800b622:	e022      	b.n	800b66a <_scanf_chars+0x8e>
 800b624:	2802      	cmp	r0, #2
 800b626:	d120      	bne.n	800b66a <_scanf_chars+0x8e>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b630:	071b      	lsls	r3, r3, #28
 800b632:	d41a      	bmi.n	800b66a <_scanf_chars+0x8e>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	06da      	lsls	r2, r3, #27
 800b638:	bf5e      	ittt	pl
 800b63a:	682b      	ldrpl	r3, [r5, #0]
 800b63c:	781b      	ldrbpl	r3, [r3, #0]
 800b63e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b642:	682a      	ldr	r2, [r5, #0]
 800b644:	686b      	ldr	r3, [r5, #4]
 800b646:	3201      	adds	r2, #1
 800b648:	602a      	str	r2, [r5, #0]
 800b64a:	68a2      	ldr	r2, [r4, #8]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	3a01      	subs	r2, #1
 800b650:	606b      	str	r3, [r5, #4]
 800b652:	3701      	adds	r7, #1
 800b654:	60a2      	str	r2, [r4, #8]
 800b656:	b142      	cbz	r2, 800b66a <_scanf_chars+0x8e>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dcd7      	bgt.n	800b60c <_scanf_chars+0x30>
 800b65c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b660:	4629      	mov	r1, r5
 800b662:	4640      	mov	r0, r8
 800b664:	4798      	blx	r3
 800b666:	2800      	cmp	r0, #0
 800b668:	d0d0      	beq.n	800b60c <_scanf_chars+0x30>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	f013 0310 	ands.w	r3, r3, #16
 800b670:	d105      	bne.n	800b67e <_scanf_chars+0xa2>
 800b672:	68e2      	ldr	r2, [r4, #12]
 800b674:	3201      	adds	r2, #1
 800b676:	60e2      	str	r2, [r4, #12]
 800b678:	69a2      	ldr	r2, [r4, #24]
 800b67a:	b102      	cbz	r2, 800b67e <_scanf_chars+0xa2>
 800b67c:	7033      	strb	r3, [r6, #0]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	443b      	add	r3, r7
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	2000      	movs	r0, #0
 800b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68a:	bf00      	nop
 800b68c:	0800c329 	.word	0x0800c329

0800b690 <_scanf_i>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	4698      	mov	r8, r3
 800b696:	4b76      	ldr	r3, [pc, #472]	; (800b870 <_scanf_i+0x1e0>)
 800b698:	460c      	mov	r4, r1
 800b69a:	4682      	mov	sl, r0
 800b69c:	4616      	mov	r6, r2
 800b69e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	ab03      	add	r3, sp, #12
 800b6a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b6aa:	4b72      	ldr	r3, [pc, #456]	; (800b874 <_scanf_i+0x1e4>)
 800b6ac:	69a1      	ldr	r1, [r4, #24]
 800b6ae:	4a72      	ldr	r2, [pc, #456]	; (800b878 <_scanf_i+0x1e8>)
 800b6b0:	2903      	cmp	r1, #3
 800b6b2:	bf18      	it	ne
 800b6b4:	461a      	movne	r2, r3
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	9201      	str	r2, [sp, #4]
 800b6ba:	1e5a      	subs	r2, r3, #1
 800b6bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b6c0:	bf88      	it	hi
 800b6c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b6c6:	4627      	mov	r7, r4
 800b6c8:	bf82      	ittt	hi
 800b6ca:	eb03 0905 	addhi.w	r9, r3, r5
 800b6ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b6d2:	60a3      	strhi	r3, [r4, #8]
 800b6d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b6d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b6dc:	bf98      	it	ls
 800b6de:	f04f 0900 	movls.w	r9, #0
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	463d      	mov	r5, r7
 800b6e6:	f04f 0b00 	mov.w	fp, #0
 800b6ea:	6831      	ldr	r1, [r6, #0]
 800b6ec:	ab03      	add	r3, sp, #12
 800b6ee:	7809      	ldrb	r1, [r1, #0]
 800b6f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	f7f4 fd73 	bl	80001e0 <memchr>
 800b6fa:	b328      	cbz	r0, 800b748 <_scanf_i+0xb8>
 800b6fc:	f1bb 0f01 	cmp.w	fp, #1
 800b700:	d159      	bne.n	800b7b6 <_scanf_i+0x126>
 800b702:	6862      	ldr	r2, [r4, #4]
 800b704:	b92a      	cbnz	r2, 800b712 <_scanf_i+0x82>
 800b706:	6822      	ldr	r2, [r4, #0]
 800b708:	2308      	movs	r3, #8
 800b70a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b70e:	6063      	str	r3, [r4, #4]
 800b710:	6022      	str	r2, [r4, #0]
 800b712:	6822      	ldr	r2, [r4, #0]
 800b714:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b718:	6022      	str	r2, [r4, #0]
 800b71a:	68a2      	ldr	r2, [r4, #8]
 800b71c:	1e51      	subs	r1, r2, #1
 800b71e:	60a1      	str	r1, [r4, #8]
 800b720:	b192      	cbz	r2, 800b748 <_scanf_i+0xb8>
 800b722:	6832      	ldr	r2, [r6, #0]
 800b724:	1c51      	adds	r1, r2, #1
 800b726:	6031      	str	r1, [r6, #0]
 800b728:	7812      	ldrb	r2, [r2, #0]
 800b72a:	f805 2b01 	strb.w	r2, [r5], #1
 800b72e:	6872      	ldr	r2, [r6, #4]
 800b730:	3a01      	subs	r2, #1
 800b732:	2a00      	cmp	r2, #0
 800b734:	6072      	str	r2, [r6, #4]
 800b736:	dc07      	bgt.n	800b748 <_scanf_i+0xb8>
 800b738:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b73c:	4631      	mov	r1, r6
 800b73e:	4650      	mov	r0, sl
 800b740:	4790      	blx	r2
 800b742:	2800      	cmp	r0, #0
 800b744:	f040 8085 	bne.w	800b852 <_scanf_i+0x1c2>
 800b748:	f10b 0b01 	add.w	fp, fp, #1
 800b74c:	f1bb 0f03 	cmp.w	fp, #3
 800b750:	d1cb      	bne.n	800b6ea <_scanf_i+0x5a>
 800b752:	6863      	ldr	r3, [r4, #4]
 800b754:	b90b      	cbnz	r3, 800b75a <_scanf_i+0xca>
 800b756:	230a      	movs	r3, #10
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	6863      	ldr	r3, [r4, #4]
 800b75c:	4947      	ldr	r1, [pc, #284]	; (800b87c <_scanf_i+0x1ec>)
 800b75e:	6960      	ldr	r0, [r4, #20]
 800b760:	1ac9      	subs	r1, r1, r3
 800b762:	f000 f8b9 	bl	800b8d8 <__sccl>
 800b766:	f04f 0b00 	mov.w	fp, #0
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	6822      	ldr	r2, [r4, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d03d      	beq.n	800b7ee <_scanf_i+0x15e>
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	6960      	ldr	r0, [r4, #20]
 800b776:	f891 c000 	ldrb.w	ip, [r1]
 800b77a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b77e:	2800      	cmp	r0, #0
 800b780:	d035      	beq.n	800b7ee <_scanf_i+0x15e>
 800b782:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b786:	d124      	bne.n	800b7d2 <_scanf_i+0x142>
 800b788:	0510      	lsls	r0, r2, #20
 800b78a:	d522      	bpl.n	800b7d2 <_scanf_i+0x142>
 800b78c:	f10b 0b01 	add.w	fp, fp, #1
 800b790:	f1b9 0f00 	cmp.w	r9, #0
 800b794:	d003      	beq.n	800b79e <_scanf_i+0x10e>
 800b796:	3301      	adds	r3, #1
 800b798:	f109 39ff 	add.w	r9, r9, #4294967295
 800b79c:	60a3      	str	r3, [r4, #8]
 800b79e:	6873      	ldr	r3, [r6, #4]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	6073      	str	r3, [r6, #4]
 800b7a6:	dd1b      	ble.n	800b7e0 <_scanf_i+0x150>
 800b7a8:	6833      	ldr	r3, [r6, #0]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	6033      	str	r3, [r6, #0]
 800b7ae:	68a3      	ldr	r3, [r4, #8]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	60a3      	str	r3, [r4, #8]
 800b7b4:	e7d9      	b.n	800b76a <_scanf_i+0xda>
 800b7b6:	f1bb 0f02 	cmp.w	fp, #2
 800b7ba:	d1ae      	bne.n	800b71a <_scanf_i+0x8a>
 800b7bc:	6822      	ldr	r2, [r4, #0]
 800b7be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b7c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b7c6:	d1bf      	bne.n	800b748 <_scanf_i+0xb8>
 800b7c8:	2310      	movs	r3, #16
 800b7ca:	6063      	str	r3, [r4, #4]
 800b7cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7d0:	e7a2      	b.n	800b718 <_scanf_i+0x88>
 800b7d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b7d6:	6022      	str	r2, [r4, #0]
 800b7d8:	780b      	ldrb	r3, [r1, #0]
 800b7da:	f805 3b01 	strb.w	r3, [r5], #1
 800b7de:	e7de      	b.n	800b79e <_scanf_i+0x10e>
 800b7e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	4798      	blx	r3
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0df      	beq.n	800b7ae <_scanf_i+0x11e>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	05db      	lsls	r3, r3, #23
 800b7f2:	d50d      	bpl.n	800b810 <_scanf_i+0x180>
 800b7f4:	42bd      	cmp	r5, r7
 800b7f6:	d909      	bls.n	800b80c <_scanf_i+0x17c>
 800b7f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b7fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b800:	4632      	mov	r2, r6
 800b802:	4650      	mov	r0, sl
 800b804:	4798      	blx	r3
 800b806:	f105 39ff 	add.w	r9, r5, #4294967295
 800b80a:	464d      	mov	r5, r9
 800b80c:	42bd      	cmp	r5, r7
 800b80e:	d02d      	beq.n	800b86c <_scanf_i+0x1dc>
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	f012 0210 	ands.w	r2, r2, #16
 800b816:	d113      	bne.n	800b840 <_scanf_i+0x1b0>
 800b818:	702a      	strb	r2, [r5, #0]
 800b81a:	6863      	ldr	r3, [r4, #4]
 800b81c:	9e01      	ldr	r6, [sp, #4]
 800b81e:	4639      	mov	r1, r7
 800b820:	4650      	mov	r0, sl
 800b822:	47b0      	blx	r6
 800b824:	6821      	ldr	r1, [r4, #0]
 800b826:	f8d8 3000 	ldr.w	r3, [r8]
 800b82a:	f011 0f20 	tst.w	r1, #32
 800b82e:	d013      	beq.n	800b858 <_scanf_i+0x1c8>
 800b830:	1d1a      	adds	r2, r3, #4
 800b832:	f8c8 2000 	str.w	r2, [r8]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6018      	str	r0, [r3, #0]
 800b83a:	68e3      	ldr	r3, [r4, #12]
 800b83c:	3301      	adds	r3, #1
 800b83e:	60e3      	str	r3, [r4, #12]
 800b840:	1bed      	subs	r5, r5, r7
 800b842:	44ab      	add	fp, r5
 800b844:	6925      	ldr	r5, [r4, #16]
 800b846:	445d      	add	r5, fp
 800b848:	6125      	str	r5, [r4, #16]
 800b84a:	2000      	movs	r0, #0
 800b84c:	b007      	add	sp, #28
 800b84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b852:	f04f 0b00 	mov.w	fp, #0
 800b856:	e7ca      	b.n	800b7ee <_scanf_i+0x15e>
 800b858:	1d1a      	adds	r2, r3, #4
 800b85a:	f8c8 2000 	str.w	r2, [r8]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f011 0f01 	tst.w	r1, #1
 800b864:	bf14      	ite	ne
 800b866:	8018      	strhne	r0, [r3, #0]
 800b868:	6018      	streq	r0, [r3, #0]
 800b86a:	e7e6      	b.n	800b83a <_scanf_i+0x1aa>
 800b86c:	2001      	movs	r0, #1
 800b86e:	e7ed      	b.n	800b84c <_scanf_i+0x1bc>
 800b870:	0800c248 	.word	0x0800c248
 800b874:	0800ba2d 	.word	0x0800ba2d
 800b878:	0800871d 	.word	0x0800871d
 800b87c:	0800c71e 	.word	0x0800c71e

0800b880 <_read_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	; (800b8a0 <_read_r+0x20>)
 800b884:	4604      	mov	r4, r0
 800b886:	4608      	mov	r0, r1
 800b888:	4611      	mov	r1, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	602a      	str	r2, [r5, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	f7f7 f95c 	bl	8002b4c <_read>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_read_r+0x1e>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_read_r+0x1e>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	20000dd4 	.word	0x20000dd4
 800b8a4:	00000000 	.word	0x00000000

0800b8a8 <nan>:
 800b8a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b8b0 <nan+0x8>
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	00000000 	.word	0x00000000
 800b8b4:	7ff80000 	.word	0x7ff80000

0800b8b8 <_sbrk_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	; (800b8d4 <_sbrk_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f7 f994 	bl	8002bf0 <_sbrk>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_sbrk_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_sbrk_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	20000dd4 	.word	0x20000dd4

0800b8d8 <__sccl>:
 800b8d8:	b570      	push	{r4, r5, r6, lr}
 800b8da:	780b      	ldrb	r3, [r1, #0]
 800b8dc:	4604      	mov	r4, r0
 800b8de:	2b5e      	cmp	r3, #94	; 0x5e
 800b8e0:	bf0b      	itete	eq
 800b8e2:	784b      	ldrbeq	r3, [r1, #1]
 800b8e4:	1c48      	addne	r0, r1, #1
 800b8e6:	1c88      	addeq	r0, r1, #2
 800b8e8:	2200      	movne	r2, #0
 800b8ea:	bf08      	it	eq
 800b8ec:	2201      	moveq	r2, #1
 800b8ee:	1e61      	subs	r1, r4, #1
 800b8f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b8f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b8f8:	42a9      	cmp	r1, r5
 800b8fa:	d1fb      	bne.n	800b8f4 <__sccl+0x1c>
 800b8fc:	b90b      	cbnz	r3, 800b902 <__sccl+0x2a>
 800b8fe:	3801      	subs	r0, #1
 800b900:	bd70      	pop	{r4, r5, r6, pc}
 800b902:	f082 0201 	eor.w	r2, r2, #1
 800b906:	54e2      	strb	r2, [r4, r3]
 800b908:	4605      	mov	r5, r0
 800b90a:	4628      	mov	r0, r5
 800b90c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b910:	292d      	cmp	r1, #45	; 0x2d
 800b912:	d006      	beq.n	800b922 <__sccl+0x4a>
 800b914:	295d      	cmp	r1, #93	; 0x5d
 800b916:	d0f3      	beq.n	800b900 <__sccl+0x28>
 800b918:	b909      	cbnz	r1, 800b91e <__sccl+0x46>
 800b91a:	4628      	mov	r0, r5
 800b91c:	e7f0      	b.n	800b900 <__sccl+0x28>
 800b91e:	460b      	mov	r3, r1
 800b920:	e7f1      	b.n	800b906 <__sccl+0x2e>
 800b922:	786e      	ldrb	r6, [r5, #1]
 800b924:	2e5d      	cmp	r6, #93	; 0x5d
 800b926:	d0fa      	beq.n	800b91e <__sccl+0x46>
 800b928:	42b3      	cmp	r3, r6
 800b92a:	dcf8      	bgt.n	800b91e <__sccl+0x46>
 800b92c:	3502      	adds	r5, #2
 800b92e:	4619      	mov	r1, r3
 800b930:	3101      	adds	r1, #1
 800b932:	428e      	cmp	r6, r1
 800b934:	5462      	strb	r2, [r4, r1]
 800b936:	dcfb      	bgt.n	800b930 <__sccl+0x58>
 800b938:	1af1      	subs	r1, r6, r3
 800b93a:	3901      	subs	r1, #1
 800b93c:	1c58      	adds	r0, r3, #1
 800b93e:	42b3      	cmp	r3, r6
 800b940:	bfa8      	it	ge
 800b942:	2100      	movge	r1, #0
 800b944:	1843      	adds	r3, r0, r1
 800b946:	e7e0      	b.n	800b90a <__sccl+0x32>

0800b948 <_strtoul_l.constprop.0>:
 800b948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b94c:	4f36      	ldr	r7, [pc, #216]	; (800ba28 <_strtoul_l.constprop.0+0xe0>)
 800b94e:	4686      	mov	lr, r0
 800b950:	460d      	mov	r5, r1
 800b952:	4628      	mov	r0, r5
 800b954:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b958:	5de6      	ldrb	r6, [r4, r7]
 800b95a:	f016 0608 	ands.w	r6, r6, #8
 800b95e:	d1f8      	bne.n	800b952 <_strtoul_l.constprop.0+0xa>
 800b960:	2c2d      	cmp	r4, #45	; 0x2d
 800b962:	d12f      	bne.n	800b9c4 <_strtoul_l.constprop.0+0x7c>
 800b964:	782c      	ldrb	r4, [r5, #0]
 800b966:	2601      	movs	r6, #1
 800b968:	1c85      	adds	r5, r0, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d057      	beq.n	800ba1e <_strtoul_l.constprop.0+0xd6>
 800b96e:	2b10      	cmp	r3, #16
 800b970:	d109      	bne.n	800b986 <_strtoul_l.constprop.0+0x3e>
 800b972:	2c30      	cmp	r4, #48	; 0x30
 800b974:	d107      	bne.n	800b986 <_strtoul_l.constprop.0+0x3e>
 800b976:	7828      	ldrb	r0, [r5, #0]
 800b978:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b97c:	2858      	cmp	r0, #88	; 0x58
 800b97e:	d149      	bne.n	800ba14 <_strtoul_l.constprop.0+0xcc>
 800b980:	786c      	ldrb	r4, [r5, #1]
 800b982:	2310      	movs	r3, #16
 800b984:	3502      	adds	r5, #2
 800b986:	f04f 38ff 	mov.w	r8, #4294967295
 800b98a:	2700      	movs	r7, #0
 800b98c:	fbb8 f8f3 	udiv	r8, r8, r3
 800b990:	fb03 f908 	mul.w	r9, r3, r8
 800b994:	ea6f 0909 	mvn.w	r9, r9
 800b998:	4638      	mov	r0, r7
 800b99a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b99e:	f1bc 0f09 	cmp.w	ip, #9
 800b9a2:	d814      	bhi.n	800b9ce <_strtoul_l.constprop.0+0x86>
 800b9a4:	4664      	mov	r4, ip
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	dd22      	ble.n	800b9f0 <_strtoul_l.constprop.0+0xa8>
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	db1d      	blt.n	800b9ea <_strtoul_l.constprop.0+0xa2>
 800b9ae:	4580      	cmp	r8, r0
 800b9b0:	d31b      	bcc.n	800b9ea <_strtoul_l.constprop.0+0xa2>
 800b9b2:	d101      	bne.n	800b9b8 <_strtoul_l.constprop.0+0x70>
 800b9b4:	45a1      	cmp	r9, r4
 800b9b6:	db18      	blt.n	800b9ea <_strtoul_l.constprop.0+0xa2>
 800b9b8:	fb00 4003 	mla	r0, r0, r3, r4
 800b9bc:	2701      	movs	r7, #1
 800b9be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9c2:	e7ea      	b.n	800b99a <_strtoul_l.constprop.0+0x52>
 800b9c4:	2c2b      	cmp	r4, #43	; 0x2b
 800b9c6:	bf04      	itt	eq
 800b9c8:	782c      	ldrbeq	r4, [r5, #0]
 800b9ca:	1c85      	addeq	r5, r0, #2
 800b9cc:	e7cd      	b.n	800b96a <_strtoul_l.constprop.0+0x22>
 800b9ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b9d2:	f1bc 0f19 	cmp.w	ip, #25
 800b9d6:	d801      	bhi.n	800b9dc <_strtoul_l.constprop.0+0x94>
 800b9d8:	3c37      	subs	r4, #55	; 0x37
 800b9da:	e7e4      	b.n	800b9a6 <_strtoul_l.constprop.0+0x5e>
 800b9dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b9e0:	f1bc 0f19 	cmp.w	ip, #25
 800b9e4:	d804      	bhi.n	800b9f0 <_strtoul_l.constprop.0+0xa8>
 800b9e6:	3c57      	subs	r4, #87	; 0x57
 800b9e8:	e7dd      	b.n	800b9a6 <_strtoul_l.constprop.0+0x5e>
 800b9ea:	f04f 37ff 	mov.w	r7, #4294967295
 800b9ee:	e7e6      	b.n	800b9be <_strtoul_l.constprop.0+0x76>
 800b9f0:	2f00      	cmp	r7, #0
 800b9f2:	da07      	bge.n	800ba04 <_strtoul_l.constprop.0+0xbc>
 800b9f4:	2322      	movs	r3, #34	; 0x22
 800b9f6:	f8ce 3000 	str.w	r3, [lr]
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fe:	b932      	cbnz	r2, 800ba0e <_strtoul_l.constprop.0+0xc6>
 800ba00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba04:	b106      	cbz	r6, 800ba08 <_strtoul_l.constprop.0+0xc0>
 800ba06:	4240      	negs	r0, r0
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	d0f9      	beq.n	800ba00 <_strtoul_l.constprop.0+0xb8>
 800ba0c:	b107      	cbz	r7, 800ba10 <_strtoul_l.constprop.0+0xc8>
 800ba0e:	1e69      	subs	r1, r5, #1
 800ba10:	6011      	str	r1, [r2, #0]
 800ba12:	e7f5      	b.n	800ba00 <_strtoul_l.constprop.0+0xb8>
 800ba14:	2430      	movs	r4, #48	; 0x30
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1b5      	bne.n	800b986 <_strtoul_l.constprop.0+0x3e>
 800ba1a:	2308      	movs	r3, #8
 800ba1c:	e7b3      	b.n	800b986 <_strtoul_l.constprop.0+0x3e>
 800ba1e:	2c30      	cmp	r4, #48	; 0x30
 800ba20:	d0a9      	beq.n	800b976 <_strtoul_l.constprop.0+0x2e>
 800ba22:	230a      	movs	r3, #10
 800ba24:	e7af      	b.n	800b986 <_strtoul_l.constprop.0+0x3e>
 800ba26:	bf00      	nop
 800ba28:	0800c329 	.word	0x0800c329

0800ba2c <_strtoul_r>:
 800ba2c:	f7ff bf8c 	b.w	800b948 <_strtoul_l.constprop.0>

0800ba30 <__submore>:
 800ba30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba3c:	4299      	cmp	r1, r3
 800ba3e:	d11d      	bne.n	800ba7c <__submore+0x4c>
 800ba40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba44:	f7ff f8ce 	bl	800abe4 <_malloc_r>
 800ba48:	b918      	cbnz	r0, 800ba52 <__submore+0x22>
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba56:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba66:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ba6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba6e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ba72:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba76:	6020      	str	r0, [r4, #0]
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e7e8      	b.n	800ba4e <__submore+0x1e>
 800ba7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba7e:	0077      	lsls	r7, r6, #1
 800ba80:	463a      	mov	r2, r7
 800ba82:	f000 f895 	bl	800bbb0 <_realloc_r>
 800ba86:	4605      	mov	r5, r0
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d0de      	beq.n	800ba4a <__submore+0x1a>
 800ba8c:	eb00 0806 	add.w	r8, r0, r6
 800ba90:	4601      	mov	r1, r0
 800ba92:	4632      	mov	r2, r6
 800ba94:	4640      	mov	r0, r8
 800ba96:	f7fa ffb7 	bl	8006a08 <memcpy>
 800ba9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ba9e:	f8c4 8000 	str.w	r8, [r4]
 800baa2:	e7e9      	b.n	800ba78 <__submore+0x48>

0800baa4 <__ascii_wctomb>:
 800baa4:	b149      	cbz	r1, 800baba <__ascii_wctomb+0x16>
 800baa6:	2aff      	cmp	r2, #255	; 0xff
 800baa8:	bf85      	ittet	hi
 800baaa:	238a      	movhi	r3, #138	; 0x8a
 800baac:	6003      	strhi	r3, [r0, #0]
 800baae:	700a      	strbls	r2, [r1, #0]
 800bab0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bab4:	bf98      	it	ls
 800bab6:	2001      	movls	r0, #1
 800bab8:	4770      	bx	lr
 800baba:	4608      	mov	r0, r1
 800babc:	4770      	bx	lr
	...

0800bac0 <__assert_func>:
 800bac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bac2:	4614      	mov	r4, r2
 800bac4:	461a      	mov	r2, r3
 800bac6:	4b09      	ldr	r3, [pc, #36]	; (800baec <__assert_func+0x2c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4605      	mov	r5, r0
 800bacc:	68d8      	ldr	r0, [r3, #12]
 800bace:	b14c      	cbz	r4, 800bae4 <__assert_func+0x24>
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <__assert_func+0x30>)
 800bad2:	9100      	str	r1, [sp, #0]
 800bad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bad8:	4906      	ldr	r1, [pc, #24]	; (800baf4 <__assert_func+0x34>)
 800bada:	462b      	mov	r3, r5
 800badc:	f000 f80e 	bl	800bafc <fiprintf>
 800bae0:	f000 f895 	bl	800bc0e <abort>
 800bae4:	4b04      	ldr	r3, [pc, #16]	; (800baf8 <__assert_func+0x38>)
 800bae6:	461c      	mov	r4, r3
 800bae8:	e7f3      	b.n	800bad2 <__assert_func+0x12>
 800baea:	bf00      	nop
 800baec:	20000038 	.word	0x20000038
 800baf0:	0800c720 	.word	0x0800c720
 800baf4:	0800c72d 	.word	0x0800c72d
 800baf8:	0800c75b 	.word	0x0800c75b

0800bafc <fiprintf>:
 800bafc:	b40e      	push	{r1, r2, r3}
 800bafe:	b503      	push	{r0, r1, lr}
 800bb00:	4601      	mov	r1, r0
 800bb02:	ab03      	add	r3, sp, #12
 800bb04:	4805      	ldr	r0, [pc, #20]	; (800bb1c <fiprintf+0x20>)
 800bb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0a:	6800      	ldr	r0, [r0, #0]
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	f7ff fc35 	bl	800b37c <_vfiprintf_r>
 800bb12:	b002      	add	sp, #8
 800bb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb18:	b003      	add	sp, #12
 800bb1a:	4770      	bx	lr
 800bb1c:	20000038 	.word	0x20000038

0800bb20 <_fstat_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d07      	ldr	r5, [pc, #28]	; (800bb40 <_fstat_r+0x20>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	f7f7 f836 	bl	8002b9e <_fstat>
 800bb32:	1c43      	adds	r3, r0, #1
 800bb34:	d102      	bne.n	800bb3c <_fstat_r+0x1c>
 800bb36:	682b      	ldr	r3, [r5, #0]
 800bb38:	b103      	cbz	r3, 800bb3c <_fstat_r+0x1c>
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	bd38      	pop	{r3, r4, r5, pc}
 800bb3e:	bf00      	nop
 800bb40:	20000dd4 	.word	0x20000dd4

0800bb44 <_isatty_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d06      	ldr	r5, [pc, #24]	; (800bb60 <_isatty_r+0x1c>)
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	602b      	str	r3, [r5, #0]
 800bb50:	f7f7 f835 	bl	8002bbe <_isatty>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_isatty_r+0x1a>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_isatty_r+0x1a>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	20000dd4 	.word	0x20000dd4

0800bb64 <memmove>:
 800bb64:	4288      	cmp	r0, r1
 800bb66:	b510      	push	{r4, lr}
 800bb68:	eb01 0402 	add.w	r4, r1, r2
 800bb6c:	d902      	bls.n	800bb74 <memmove+0x10>
 800bb6e:	4284      	cmp	r4, r0
 800bb70:	4623      	mov	r3, r4
 800bb72:	d807      	bhi.n	800bb84 <memmove+0x20>
 800bb74:	1e43      	subs	r3, r0, #1
 800bb76:	42a1      	cmp	r1, r4
 800bb78:	d008      	beq.n	800bb8c <memmove+0x28>
 800bb7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb82:	e7f8      	b.n	800bb76 <memmove+0x12>
 800bb84:	4402      	add	r2, r0
 800bb86:	4601      	mov	r1, r0
 800bb88:	428a      	cmp	r2, r1
 800bb8a:	d100      	bne.n	800bb8e <memmove+0x2a>
 800bb8c:	bd10      	pop	{r4, pc}
 800bb8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb96:	e7f7      	b.n	800bb88 <memmove+0x24>

0800bb98 <__malloc_lock>:
 800bb98:	4801      	ldr	r0, [pc, #4]	; (800bba0 <__malloc_lock+0x8>)
 800bb9a:	f7fe ba4a 	b.w	800a032 <__retarget_lock_acquire_recursive>
 800bb9e:	bf00      	nop
 800bba0:	20000dc8 	.word	0x20000dc8

0800bba4 <__malloc_unlock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	; (800bbac <__malloc_unlock+0x8>)
 800bba6:	f7fe ba45 	b.w	800a034 <__retarget_lock_release_recursive>
 800bbaa:	bf00      	nop
 800bbac:	20000dc8 	.word	0x20000dc8

0800bbb0 <_realloc_r>:
 800bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4614      	mov	r4, r2
 800bbb8:	460e      	mov	r6, r1
 800bbba:	b921      	cbnz	r1, 800bbc6 <_realloc_r+0x16>
 800bbbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	f7ff b80f 	b.w	800abe4 <_malloc_r>
 800bbc6:	b92a      	cbnz	r2, 800bbd4 <_realloc_r+0x24>
 800bbc8:	f7fe ffa0 	bl	800ab0c <_free_r>
 800bbcc:	4625      	mov	r5, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	f000 f822 	bl	800bc1c <_malloc_usable_size_r>
 800bbd8:	4284      	cmp	r4, r0
 800bbda:	4607      	mov	r7, r0
 800bbdc:	d802      	bhi.n	800bbe4 <_realloc_r+0x34>
 800bbde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbe2:	d812      	bhi.n	800bc0a <_realloc_r+0x5a>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7fe fffc 	bl	800abe4 <_malloc_r>
 800bbec:	4605      	mov	r5, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0ed      	beq.n	800bbce <_realloc_r+0x1e>
 800bbf2:	42bc      	cmp	r4, r7
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	bf28      	it	cs
 800bbfa:	463a      	movcs	r2, r7
 800bbfc:	f7fa ff04 	bl	8006a08 <memcpy>
 800bc00:	4631      	mov	r1, r6
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7fe ff82 	bl	800ab0c <_free_r>
 800bc08:	e7e1      	b.n	800bbce <_realloc_r+0x1e>
 800bc0a:	4635      	mov	r5, r6
 800bc0c:	e7df      	b.n	800bbce <_realloc_r+0x1e>

0800bc0e <abort>:
 800bc0e:	b508      	push	{r3, lr}
 800bc10:	2006      	movs	r0, #6
 800bc12:	f000 f833 	bl	800bc7c <raise>
 800bc16:	2001      	movs	r0, #1
 800bc18:	f7f6 ff8e 	bl	8002b38 <_exit>

0800bc1c <_malloc_usable_size_r>:
 800bc1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc20:	1f18      	subs	r0, r3, #4
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	bfbc      	itt	lt
 800bc26:	580b      	ldrlt	r3, [r1, r0]
 800bc28:	18c0      	addlt	r0, r0, r3
 800bc2a:	4770      	bx	lr

0800bc2c <_raise_r>:
 800bc2c:	291f      	cmp	r1, #31
 800bc2e:	b538      	push	{r3, r4, r5, lr}
 800bc30:	4604      	mov	r4, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	d904      	bls.n	800bc40 <_raise_r+0x14>
 800bc36:	2316      	movs	r3, #22
 800bc38:	6003      	str	r3, [r0, #0]
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc42:	b112      	cbz	r2, 800bc4a <_raise_r+0x1e>
 800bc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc48:	b94b      	cbnz	r3, 800bc5e <_raise_r+0x32>
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 f830 	bl	800bcb0 <_getpid_r>
 800bc50:	462a      	mov	r2, r5
 800bc52:	4601      	mov	r1, r0
 800bc54:	4620      	mov	r0, r4
 800bc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc5a:	f000 b817 	b.w	800bc8c <_kill_r>
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d00a      	beq.n	800bc78 <_raise_r+0x4c>
 800bc62:	1c59      	adds	r1, r3, #1
 800bc64:	d103      	bne.n	800bc6e <_raise_r+0x42>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	e7e7      	b.n	800bc3e <_raise_r+0x12>
 800bc6e:	2400      	movs	r4, #0
 800bc70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc74:	4628      	mov	r0, r5
 800bc76:	4798      	blx	r3
 800bc78:	2000      	movs	r0, #0
 800bc7a:	e7e0      	b.n	800bc3e <_raise_r+0x12>

0800bc7c <raise>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <raise+0xc>)
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	f7ff bfd3 	b.w	800bc2c <_raise_r>
 800bc86:	bf00      	nop
 800bc88:	20000038 	.word	0x20000038

0800bc8c <_kill_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d07      	ldr	r5, [pc, #28]	; (800bcac <_kill_r+0x20>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	4611      	mov	r1, r2
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	f7f6 ff3d 	bl	8002b18 <_kill>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d102      	bne.n	800bca8 <_kill_r+0x1c>
 800bca2:	682b      	ldr	r3, [r5, #0]
 800bca4:	b103      	cbz	r3, 800bca8 <_kill_r+0x1c>
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	bf00      	nop
 800bcac:	20000dd4 	.word	0x20000dd4

0800bcb0 <_getpid_r>:
 800bcb0:	f7f6 bf2a 	b.w	8002b08 <_getpid>

0800bcb4 <_init>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_fini>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	bf00      	nop
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr
