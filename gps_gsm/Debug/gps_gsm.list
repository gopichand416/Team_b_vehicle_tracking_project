
gps_gsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  0800bd58  0800bd58  0001bd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d4  0800c7d4  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7d4  0800c7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7dc  0800c7dc  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7dc  0800c7dc  0001c7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7e0  0800c7e0  0001c7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800c7e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  20000218  0800c9f8  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  0800c9f8  00020de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe4c  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbe  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00032c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bf2  00000000  00000000  00034468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108e4  00000000  00000000  0005c05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb944  00000000  00000000  0006c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a5c  00000000  00000000  001582d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd3c 	.word	0x0800bd3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800bd3c 	.word	0x0800bd3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <gsm_init>:
uint8_t response[20];
char *data1;
uint8_t var=0;
char *str;
int gsm_init()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	uint8_t state=0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
	uint8_t substate=0;
 8001002:	2300      	movs	r3, #0
 8001004:	73bb      	strb	r3, [r7, #14]
	int count=20;
 8001006:	2314      	movs	r3, #20
 8001008:	60bb      	str	r3, [r7, #8]
	while(count--)
 800100a:	e2a0      	b.n	800154e <gsm_init+0x556>
	{
	switch(state)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b07      	cmp	r3, #7
 8001010:	f200 8298 	bhi.w	8001544 <gsm_init+0x54c>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <gsm_init+0x24>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	0800103d 	.word	0x0800103d
 8001020:	080010b7 	.word	0x080010b7
 8001024:	08001123 	.word	0x08001123
 8001028:	080011a9 	.word	0x080011a9
 800102c:	08001231 	.word	0x08001231
 8001030:	080012c5 	.word	0x080012c5
 8001034:	080013b7 	.word	0x080013b7
 8001038:	08001493 	.word	0x08001493
	{
			  	  case 0:
			  	  {
			  		  switch(substate)
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8285 	bne.w	800154e <gsm_init+0x556>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 8001044:	48a2      	ldr	r0, [pc, #648]	; (80012d0 <gsm_init+0x2d8>)
 8001046:	f000 fcc9 	bl	80019dc <send_to_gsm>
 800104a:	4603      	mov	r3, r0
 800104c:	4aa1      	ldr	r2, [pc, #644]	; (80012d4 <gsm_init+0x2dc>)
 800104e:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("ATE0 \n");
 8001050:	48a1      	ldr	r0, [pc, #644]	; (80012d8 <gsm_init+0x2e0>)
 8001052:	f006 fc33 	bl	80078bc <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 8001056:	4b9f      	ldr	r3, [pc, #636]	; (80012d4 <gsm_init+0x2dc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	49a0      	ldr	r1, [pc, #640]	; (80012dc <gsm_init+0x2e4>)
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fce0 	bl	8007a22 <strstr>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00d      	beq.n	8001084 <gsm_init+0x8c>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	7bba      	ldrb	r2, [r7, #14]
 800106c:	4619      	mov	r1, r3
 800106e:	489c      	ldr	r0, [pc, #624]	; (80012e0 <gsm_init+0x2e8>)
 8001070:	f006 fb9e 	bl	80077b0 <iprintf>
			  				printf("ATE0 OK \n");
 8001074:	489b      	ldr	r0, [pc, #620]	; (80012e4 <gsm_init+0x2ec>)
 8001076:	f006 fc21 	bl	80078bc <puts>
			  				  state=1;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8001082:	e016      	b.n	80010b2 <gsm_init+0xba>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <gsm_init+0x2dc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2206      	movs	r2, #6
 800108a:	4997      	ldr	r1, [pc, #604]	; (80012e8 <gsm_init+0x2f0>)
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fcb4 	bl	80079fa <strncmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <gsm_init+0xba>
			  				printf("state = %d substate = %d \n",state,substate);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	7bba      	ldrb	r2, [r7, #14]
 800109c:	4619      	mov	r1, r3
 800109e:	4890      	ldr	r0, [pc, #576]	; (80012e0 <gsm_init+0x2e8>)
 80010a0:	f006 fb86 	bl	80077b0 <iprintf>
			  				printf("ATE0 ERROR \n");
 80010a4:	4891      	ldr	r0, [pc, #580]	; (80012ec <gsm_init+0x2f4>)
 80010a6:	f006 fc09 	bl	80078bc <puts>
			  				  state=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73bb      	strb	r3, [r7, #14]
			  			  break;
 80010b2:	bf00      	nop
			  		  }
			  		  break;
 80010b4:	e24b      	b.n	800154e <gsm_init+0x556>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d132      	bne.n	8001122 <gsm_init+0x12a>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 80010bc:	488c      	ldr	r0, [pc, #560]	; (80012f0 <gsm_init+0x2f8>)
 80010be:	f000 fc8d 	bl	80019dc <send_to_gsm>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <gsm_init+0x2dc>)
 80010c6:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 80010c8:	488a      	ldr	r0, [pc, #552]	; (80012f4 <gsm_init+0x2fc>)
 80010ca:	f006 fbf7 	bl	80078bc <puts>
			  			  HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f001 febf 	bl	8002e54 <HAL_Delay>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <gsm_init+0x2dc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2206      	movs	r2, #6
 80010dc:	497f      	ldr	r1, [pc, #508]	; (80012dc <gsm_init+0x2e4>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fc8b 	bl	80079fa <strncmp>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <gsm_init+0x10e>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	7bba      	ldrb	r2, [r7, #14]
 80010ee:	4619      	mov	r1, r3
 80010f0:	487b      	ldr	r0, [pc, #492]	; (80012e0 <gsm_init+0x2e8>)
 80010f2:	f006 fb5d 	bl	80077b0 <iprintf>
			  				printf("CMEE=2 OK \n");
 80010f6:	4880      	ldr	r0, [pc, #512]	; (80012f8 <gsm_init+0x300>)
 80010f8:	f006 fbe0 	bl	80078bc <puts>
			  				  state=2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 8001100:	2300      	movs	r3, #0
 8001102:	73bb      	strb	r3, [r7, #14]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 8001104:	e00c      	b.n	8001120 <gsm_init+0x128>
			  				printf("state = %d substate = %d \n",state,substate);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	7bba      	ldrb	r2, [r7, #14]
 800110a:	4619      	mov	r1, r3
 800110c:	4874      	ldr	r0, [pc, #464]	; (80012e0 <gsm_init+0x2e8>)
 800110e:	f006 fb4f 	bl	80077b0 <iprintf>
			  				printf("CMEE=2 OK \n");
 8001112:	4879      	ldr	r0, [pc, #484]	; (80012f8 <gsm_init+0x300>)
 8001114:	f006 fbd2 	bl	80078bc <puts>
			  				  state=0;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001120:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d13f      	bne.n	80011a8 <gsm_init+0x1b0>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 8001128:	4874      	ldr	r0, [pc, #464]	; (80012fc <gsm_init+0x304>)
 800112a:	f000 fc57 	bl	80019dc <send_to_gsm>
 800112e:	4603      	mov	r3, r0
 8001130:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <gsm_init+0x2dc>)
 8001132:	6013      	str	r3, [r2, #0]
			  			//HAL_Delay(1000);
			  			 printf("CPIN \n");
 8001134:	4872      	ldr	r0, [pc, #456]	; (8001300 <gsm_init+0x308>)
 8001136:	f006 fbc1 	bl	80078bc <puts>
			  			  if((strstr(str,"READY")!=NULL))
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <gsm_init+0x2dc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4971      	ldr	r1, [pc, #452]	; (8001304 <gsm_init+0x30c>)
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fc6e 	bl	8007a22 <strstr>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00d      	beq.n	8001168 <gsm_init+0x170>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	7bba      	ldrb	r2, [r7, #14]
 8001150:	4619      	mov	r1, r3
 8001152:	4863      	ldr	r0, [pc, #396]	; (80012e0 <gsm_init+0x2e8>)
 8001154:	f006 fb2c 	bl	80077b0 <iprintf>
			  				printf("CPIN READY \n");
 8001158:	486b      	ldr	r0, [pc, #428]	; (8001308 <gsm_init+0x310>)
 800115a:	f006 fbaf 	bl	80078bc <puts>
			  			      state=3;
 800115e:	2303      	movs	r3, #3
 8001160:	73fb      	strb	r3, [r7, #15]
			  			      substate=0;
 8001162:	2300      	movs	r3, #0
 8001164:	73bb      	strb	r3, [r7, #14]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=0;
			 	  			substate=0;
			  			  }
			  			  break;
 8001166:	e01e      	b.n	80011a6 <gsm_init+0x1ae>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001168:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <gsm_init+0x2dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2206      	movs	r2, #6
 800116e:	495e      	ldr	r1, [pc, #376]	; (80012e8 <gsm_init+0x2f0>)
 8001170:	4618      	mov	r0, r3
 8001172:	f006 fc42 	bl	80079fa <strncmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <gsm_init+0x19a>
			  				printf("state = %d substate = %d \n",state,substate);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	7bba      	ldrb	r2, [r7, #14]
 8001180:	4619      	mov	r1, r3
 8001182:	4857      	ldr	r0, [pc, #348]	; (80012e0 <gsm_init+0x2e8>)
 8001184:	f006 fb14 	bl	80077b0 <iprintf>
			  				state=0;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001190:	e009      	b.n	80011a6 <gsm_init+0x1ae>
			  				printf("state = %d substate = %d \n",state,substate);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	7bba      	ldrb	r2, [r7, #14]
 8001196:	4619      	mov	r1, r3
 8001198:	4851      	ldr	r0, [pc, #324]	; (80012e0 <gsm_init+0x2e8>)
 800119a:	f006 fb09 	bl	80077b0 <iprintf>
			  	  			state=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
			 	  			substate=0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73bb      	strb	r3, [r7, #14]
			  			  break;
 80011a6:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 81cf 	bne.w	800154e <gsm_init+0x556>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 80011b0:	4856      	ldr	r0, [pc, #344]	; (800130c <gsm_init+0x314>)
 80011b2:	f000 fc13 	bl	80019dc <send_to_gsm>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <gsm_init+0x2dc>)
 80011ba:	6013      	str	r3, [r2, #0]
			  				  //HAL_Delay(1000);
			  				  printf("CAQ \n");
 80011bc:	4854      	ldr	r0, [pc, #336]	; (8001310 <gsm_init+0x318>)
 80011be:	f006 fb7d 	bl	80078bc <puts>
			  				  int e=check_signal(str);
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <gsm_init+0x2dc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fa3e 	bl	8001648 <check_signal>
 80011cc:	6078      	str	r0, [r7, #4]
			  				  if((strstr(str,"OK")!=NULL))
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <gsm_init+0x2dc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4950      	ldr	r1, [pc, #320]	; (8001314 <gsm_init+0x31c>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 fc24 	bl	8007a22 <strstr>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01b      	beq.n	8001218 <gsm_init+0x220>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	7bba      	ldrb	r2, [r7, #14]
 80011e4:	4619      	mov	r1, r3
 80011e6:	483e      	ldr	r0, [pc, #248]	; (80012e0 <gsm_init+0x2e8>)
 80011e8:	f006 fae2 	bl	80077b0 <iprintf>
			  					  printf("CAQ OK\n");
 80011ec:	484a      	ldr	r0, [pc, #296]	; (8001318 <gsm_init+0x320>)
 80011ee:	f006 fb65 	bl	80078bc <puts>
			  					  if(e==0)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <gsm_init+0x210>
			  					  {
			  						  printf("signal OK\n");
 80011f8:	4848      	ldr	r0, [pc, #288]	; (800131c <gsm_init+0x324>)
 80011fa:	f006 fb5f 	bl	80078bc <puts>
			  						  state=4;
 80011fe:	2304      	movs	r3, #4
 8001200:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 8001202:	2300      	movs	r3, #0
 8001204:	73bb      	strb	r3, [r7, #14]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=0;
			  					  substate=0;
			  				  }
			  				  break;
 8001206:	e011      	b.n	800122c <gsm_init+0x234>
			  						  printf("signal NOT OK\n");
 8001208:	4845      	ldr	r0, [pc, #276]	; (8001320 <gsm_init+0x328>)
 800120a:	f006 fb57 	bl	80078bc <puts>
			  						  state=3;
 800120e:	2303      	movs	r3, #3
 8001210:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 8001212:	2300      	movs	r3, #0
 8001214:	73bb      	strb	r3, [r7, #14]
			  				  break;
 8001216:	e009      	b.n	800122c <gsm_init+0x234>
			  					  printf("state = %d substate = %d \n",state,substate);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	7bba      	ldrb	r2, [r7, #14]
 800121c:	4619      	mov	r1, r3
 800121e:	4830      	ldr	r0, [pc, #192]	; (80012e0 <gsm_init+0x2e8>)
 8001220:	f006 fac6 	bl	80077b0 <iprintf>
			  					  state=0;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
			  					  substate=0;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
			  				  break;
 800122c:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 800122e:	e18e      	b.n	800154e <gsm_init+0x556>
				  	case 4:
				  	{
				  		switch(substate)
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <gsm_init+0x244>
 8001236:	2b01      	cmp	r3, #1
 8001238:	d02f      	beq.n	800129a <gsm_init+0x2a2>
				  				 state=0;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 800123a:	e042      	b.n	80012c2 <gsm_init+0x2ca>
				  			  str =send_to_gsm("AT+CREG?\r");
 800123c:	4839      	ldr	r0, [pc, #228]	; (8001324 <gsm_init+0x32c>)
 800123e:	f000 fbcd 	bl	80019dc <send_to_gsm>
 8001242:	4603      	mov	r3, r0
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <gsm_init+0x2dc>)
 8001246:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <gsm_init+0x330>)
 800124a:	f006 fb37 	bl	80078bc <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <gsm_init+0x2dc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4936      	ldr	r1, [pc, #216]	; (800132c <gsm_init+0x334>)
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fbe4 	bl	8007a22 <strstr>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d111      	bne.n	8001284 <gsm_init+0x28c>
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <gsm_init+0x2dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4932      	ldr	r1, [pc, #200]	; (8001330 <gsm_init+0x338>)
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fbdb 	bl	8007a22 <strstr>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <gsm_init+0x28c>
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <gsm_init+0x2dc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	492f      	ldr	r1, [pc, #188]	; (8001334 <gsm_init+0x33c>)
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fbd2 	bl	8007a22 <strstr>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <gsm_init+0x29c>
				  				  state=5;
 8001284:	2305      	movs	r3, #5
 8001286:	73fb      	strb	r3, [r7, #15]
				  				  substate=0;
 8001288:	2300      	movs	r3, #0
 800128a:	73bb      	strb	r3, [r7, #14]
				  				  printf("match found\n");
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <gsm_init+0x340>)
 800128e:	f006 fb15 	bl	80078bc <puts>
				  			  break;
 8001292:	e016      	b.n	80012c2 <gsm_init+0x2ca>
				  				  substate=1;
 8001294:	2301      	movs	r3, #1
 8001296:	73bb      	strb	r3, [r7, #14]
				  			  break;
 8001298:	e013      	b.n	80012c2 <gsm_init+0x2ca>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <gsm_init+0x2dc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2206      	movs	r2, #6
 80012a0:	4911      	ldr	r1, [pc, #68]	; (80012e8 <gsm_init+0x2f0>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f006 fba9 	bl	80079fa <strncmp>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <gsm_init+0x2c0>
				  				 state=0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012b6:	e003      	b.n	80012c0 <gsm_init+0x2c8>
				  				 state=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012c0:	bf00      	nop
				  		}
				  		break;
 80012c2:	e144      	b.n	800154e <gsm_init+0x556>
				  	}

				  	case 5:
				  		switch(substate)
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d038      	beq.n	800133c <gsm_init+0x344>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d059      	beq.n	8001382 <gsm_init+0x38a>
				  				state=0;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 80012ce:	e071      	b.n	80013b4 <gsm_init+0x3bc>
 80012d0:	0800bd58 	.word	0x0800bd58
 80012d4:	200002fc 	.word	0x200002fc
 80012d8:	0800bd60 	.word	0x0800bd60
 80012dc:	0800bd68 	.word	0x0800bd68
 80012e0:	0800bd70 	.word	0x0800bd70
 80012e4:	0800bd8c 	.word	0x0800bd8c
 80012e8:	0800bd98 	.word	0x0800bd98
 80012ec:	0800bda4 	.word	0x0800bda4
 80012f0:	0800bdb0 	.word	0x0800bdb0
 80012f4:	0800bdbc 	.word	0x0800bdbc
 80012f8:	0800bdc4 	.word	0x0800bdc4
 80012fc:	0800bdd0 	.word	0x0800bdd0
 8001300:	0800bddc 	.word	0x0800bddc
 8001304:	0800bde4 	.word	0x0800bde4
 8001308:	0800bdec 	.word	0x0800bdec
 800130c:	0800bdf8 	.word	0x0800bdf8
 8001310:	0800be00 	.word	0x0800be00
 8001314:	0800be08 	.word	0x0800be08
 8001318:	0800be0c 	.word	0x0800be0c
 800131c:	0800be14 	.word	0x0800be14
 8001320:	0800be20 	.word	0x0800be20
 8001324:	0800be30 	.word	0x0800be30
 8001328:	0800be3c 	.word	0x0800be3c
 800132c:	0800be44 	.word	0x0800be44
 8001330:	0800be48 	.word	0x0800be48
 8001334:	0800be4c 	.word	0x0800be4c
 8001338:	0800be50 	.word	0x0800be50
				  			str = send_to_gsm("AT+CGREG?\r");
 800133c:	4889      	ldr	r0, [pc, #548]	; (8001564 <gsm_init+0x56c>)
 800133e:	f000 fb4d 	bl	80019dc <send_to_gsm>
 8001342:	4603      	mov	r3, r0
 8001344:	4a88      	ldr	r2, [pc, #544]	; (8001568 <gsm_init+0x570>)
 8001346:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 8001348:	4b87      	ldr	r3, [pc, #540]	; (8001568 <gsm_init+0x570>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4987      	ldr	r1, [pc, #540]	; (800156c <gsm_init+0x574>)
 800134e:	4618      	mov	r0, r3
 8001350:	f006 fb67 	bl	8007a22 <strstr>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <gsm_init+0x374>
 800135a:	4b83      	ldr	r3, [pc, #524]	; (8001568 <gsm_init+0x570>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4984      	ldr	r1, [pc, #528]	; (8001570 <gsm_init+0x578>)
 8001360:	4618      	mov	r0, r3
 8001362:	f006 fb5e 	bl	8007a22 <strstr>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <gsm_init+0x384>
				  				state=6;
 800136c:	2306      	movs	r3, #6
 800136e:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 8001370:	2300      	movs	r3, #0
 8001372:	73bb      	strb	r3, [r7, #14]
				  				printf("match found\n");
 8001374:	487f      	ldr	r0, [pc, #508]	; (8001574 <gsm_init+0x57c>)
 8001376:	f006 faa1 	bl	80078bc <puts>
				  			break;
 800137a:	e01b      	b.n	80013b4 <gsm_init+0x3bc>
				  				substate=1;
 800137c:	2301      	movs	r3, #1
 800137e:	73bb      	strb	r3, [r7, #14]
				  			break;
 8001380:	e018      	b.n	80013b4 <gsm_init+0x3bc>
				  			str = send_to_gsm("AT+CGREG=1\r");
 8001382:	487d      	ldr	r0, [pc, #500]	; (8001578 <gsm_init+0x580>)
 8001384:	f000 fb2a 	bl	80019dc <send_to_gsm>
 8001388:	4603      	mov	r3, r0
 800138a:	4a77      	ldr	r2, [pc, #476]	; (8001568 <gsm_init+0x570>)
 800138c:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <gsm_init+0x570>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	497a      	ldr	r1, [pc, #488]	; (800157c <gsm_init+0x584>)
 8001394:	4618      	mov	r0, r3
 8001396:	f006 fb44 	bl	8007a22 <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <gsm_init+0x3b2>
				  				state=5;
 80013a0:	2305      	movs	r3, #5
 80013a2:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013a8:	e003      	b.n	80013b2 <gsm_init+0x3ba>
				  				state=0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013b2:	bf00      	nop
				  		}
				  		break;
 80013b4:	e0cb      	b.n	800154e <gsm_init+0x556>

				  	case 6:
				  		{
				  			switch(substate)
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d04a      	beq.n	8001452 <gsm_init+0x45a>
 80013bc:	2b02      	cmp	r3, #2
 80013be:	f300 80c6 	bgt.w	800154e <gsm_init+0x556>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <gsm_init+0x3d4>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d026      	beq.n	8001418 <gsm_init+0x420>
 80013ca:	e0c0      	b.n	800154e <gsm_init+0x556>
				  			{
				  			case 0:
				  				str = send_to_gsm("AT+COPS?\r");
 80013cc:	486c      	ldr	r0, [pc, #432]	; (8001580 <gsm_init+0x588>)
 80013ce:	f000 fb05 	bl	80019dc <send_to_gsm>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a64      	ldr	r2, [pc, #400]	; (8001568 <gsm_init+0x570>)
 80013d6:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("COPS?\n");
 80013d8:	486a      	ldr	r0, [pc, #424]	; (8001584 <gsm_init+0x58c>)
 80013da:	f006 fa6f 	bl	80078bc <puts>
				  				if((strstr(str,"40449")!=NULL))
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <gsm_init+0x570>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4969      	ldr	r1, [pc, #420]	; (8001588 <gsm_init+0x590>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 fb1c 	bl	8007a22 <strstr>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <gsm_init+0x40e>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4865      	ldr	r0, [pc, #404]	; (800158c <gsm_init+0x594>)
 80013f8:	f006 f9da 	bl	80077b0 <iprintf>
				  					state=7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	73fb      	strb	r3, [r7, #15]
				  					substate=1;
 8001400:	2301      	movs	r3, #1
 8001402:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=1;
				  				}
				  				break;
 8001404:	e044      	b.n	8001490 <gsm_init+0x498>
				  					printf("state = %d substate = %d \n",state,substate);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	7bba      	ldrb	r2, [r7, #14]
 800140a:	4619      	mov	r1, r3
 800140c:	485f      	ldr	r0, [pc, #380]	; (800158c <gsm_init+0x594>)
 800140e:	f006 f9cf 	bl	80077b0 <iprintf>
				  					substate=1;
 8001412:	2301      	movs	r3, #1
 8001414:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001416:	e03b      	b.n	8001490 <gsm_init+0x498>
				  			case 1:
				  				if((strstr(str,"405854")!=NULL))
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <gsm_init+0x570>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	495c      	ldr	r1, [pc, #368]	; (8001590 <gsm_init+0x598>)
 800141e:	4618      	mov	r0, r3
 8001420:	f006 faff 	bl	8007a22 <strstr>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <gsm_init+0x448>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	4619      	mov	r1, r3
 8001430:	4856      	ldr	r0, [pc, #344]	; (800158c <gsm_init+0x594>)
 8001432:	f006 f9bd 	bl	80077b0 <iprintf>
				  					state=7;
 8001436:	2307      	movs	r3, #7
 8001438:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=2;
				  				}
				  				break;
 800143e:	e027      	b.n	8001490 <gsm_init+0x498>
				  					printf("state = %d substate = %d \n",state,substate);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	7bba      	ldrb	r2, [r7, #14]
 8001444:	4619      	mov	r1, r3
 8001446:	4851      	ldr	r0, [pc, #324]	; (800158c <gsm_init+0x594>)
 8001448:	f006 f9b2 	bl	80077b0 <iprintf>
				  					substate=2;
 800144c:	2302      	movs	r3, #2
 800144e:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001450:	e01e      	b.n	8001490 <gsm_init+0x498>
				  			case 2:
				  				if((strstr(str,"ERROR")!=NULL))
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <gsm_init+0x570>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	494f      	ldr	r1, [pc, #316]	; (8001594 <gsm_init+0x59c>)
 8001458:	4618      	mov	r0, r3
 800145a:	f006 fae2 	bl	8007a22 <strstr>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <gsm_init+0x482>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	7bba      	ldrb	r2, [r7, #14]
 8001468:	4619      	mov	r1, r3
 800146a:	4848      	ldr	r0, [pc, #288]	; (800158c <gsm_init+0x594>)
 800146c:	f006 f9a0 	bl	80077b0 <iprintf>
				  					state=0;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001474:	2300      	movs	r3, #0
 8001476:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 8001478:	e009      	b.n	800148e <gsm_init+0x496>
				  					printf("state = %d substate = %d \n",state,substate);
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	7bba      	ldrb	r2, [r7, #14]
 800147e:	4619      	mov	r1, r3
 8001480:	4842      	ldr	r0, [pc, #264]	; (800158c <gsm_init+0x594>)
 8001482:	f006 f995 	bl	80077b0 <iprintf>
				  					state=0;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800148a:	2300      	movs	r3, #0
 800148c:	73bb      	strb	r3, [r7, #14]
				  				break;
 800148e:	bf00      	nop

				  			}
				  			break;
 8001490:	e05d      	b.n	800154e <gsm_init+0x556>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <gsm_init+0x4a6>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d029      	beq.n	80014f0 <gsm_init+0x4f8>
 800149c:	e057      	b.n	800154e <gsm_init+0x556>
				  			{
				  			case 0:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 800149e:	483e      	ldr	r0, [pc, #248]	; (8001598 <gsm_init+0x5a0>)
 80014a0:	f000 fa9c 	bl	80019dc <send_to_gsm>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a30      	ldr	r2, [pc, #192]	; (8001568 <gsm_init+0x570>)
 80014a8:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1 jio\n");
 80014aa:	483c      	ldr	r0, [pc, #240]	; (800159c <gsm_init+0x5a4>)
 80014ac:	f006 fa06 	bl	80078bc <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <gsm_init+0x570>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2206      	movs	r2, #6
 80014b6:	493a      	ldr	r1, [pc, #232]	; (80015a0 <gsm_init+0x5a8>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fa9e 	bl	80079fa <strncmp>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <gsm_init+0x4e2>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	7bba      	ldrb	r2, [r7, #14]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4830      	ldr	r0, [pc, #192]	; (800158c <gsm_init+0x594>)
 80014cc:	f006 f970 	bl	80077b0 <iprintf>
				  					state=8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  				break;
 80014d8:	e033      	b.n	8001542 <gsm_init+0x54a>
				  					printf("state = %d substate = %d \n",state,substate);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	7bba      	ldrb	r2, [r7, #14]
 80014de:	4619      	mov	r1, r3
 80014e0:	482a      	ldr	r0, [pc, #168]	; (800158c <gsm_init+0x594>)
 80014e2:	f006 f965 	bl	80077b0 <iprintf>
				  					state=6;
 80014e6:	2306      	movs	r3, #6
 80014e8:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73bb      	strb	r3, [r7, #14]
				  				break;
 80014ee:	e028      	b.n	8001542 <gsm_init+0x54a>
				  			case 1:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 80014f0:	482c      	ldr	r0, [pc, #176]	; (80015a4 <gsm_init+0x5ac>)
 80014f2:	f000 fa73 	bl	80019dc <send_to_gsm>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <gsm_init+0x570>)
 80014fa:	6013      	str	r3, [r2, #0]
				  				//HAL_Delay(1000);
				  				printf("CGDCONT=1 airtel\n");
 80014fc:	482a      	ldr	r0, [pc, #168]	; (80015a8 <gsm_init+0x5b0>)
 80014fe:	f006 f9dd 	bl	80078bc <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <gsm_init+0x570>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2206      	movs	r2, #6
 8001508:	4925      	ldr	r1, [pc, #148]	; (80015a0 <gsm_init+0x5a8>)
 800150a:	4618      	mov	r0, r3
 800150c:	f006 fa75 	bl	80079fa <strncmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10a      	bne.n	800152c <gsm_init+0x534>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	7bba      	ldrb	r2, [r7, #14]
 800151a:	4619      	mov	r1, r3
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <gsm_init+0x594>)
 800151e:	f006 f947 	bl	80077b0 <iprintf>
				  					state=8;
 8001522:	2308      	movs	r3, #8
 8001524:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 800152a:	e009      	b.n	8001540 <gsm_init+0x548>
				  					printf("state = %d substate = %d \n",state,substate);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	7bba      	ldrb	r2, [r7, #14]
 8001530:	4619      	mov	r1, r3
 8001532:	4816      	ldr	r0, [pc, #88]	; (800158c <gsm_init+0x594>)
 8001534:	f006 f93c 	bl	80077b0 <iprintf>
				  					state=0;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800153c:	2300      	movs	r3, #0
 800153e:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001540:	bf00      	nop
				  			}

				  			break;
 8001542:	e004      	b.n	800154e <gsm_init+0x556>

				  		}


				  		default:
				  			printf("completed work \n");
 8001544:	4819      	ldr	r0, [pc, #100]	; (80015ac <gsm_init+0x5b4>)
 8001546:	f006 f9b9 	bl	80078bc <puts>
				  			return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e006      	b.n	800155c <gsm_init+0x564>
	while(count--)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f47f ad59 	bne.w	800100c <gsm_init+0x14>
			  	  }
	}
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	0800be5c 	.word	0x0800be5c
 8001568:	200002fc 	.word	0x200002fc
 800156c:	0800be44 	.word	0x0800be44
 8001570:	0800be68 	.word	0x0800be68
 8001574:	0800be50 	.word	0x0800be50
 8001578:	0800be6c 	.word	0x0800be6c
 800157c:	0800be08 	.word	0x0800be08
 8001580:	0800be78 	.word	0x0800be78
 8001584:	0800be84 	.word	0x0800be84
 8001588:	0800be8c 	.word	0x0800be8c
 800158c:	0800bd70 	.word	0x0800bd70
 8001590:	0800be94 	.word	0x0800be94
 8001594:	0800be9c 	.word	0x0800be9c
 8001598:	0800bea4 	.word	0x0800bea4
 800159c:	0800bec0 	.word	0x0800bec0
 80015a0:	0800bd68 	.word	0x0800bd68
 80015a4:	0800bed0 	.word	0x0800bed0
 80015a8:	0800bef4 	.word	0x0800bef4
 80015ac:	0800bf08 	.word	0x0800bf08

080015b0 <check_server_connection>:
int check_server_connection()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
	int state=0,substate=0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
	int time_out=30;
 80015be:	231e      	movs	r3, #30
 80015c0:	607b      	str	r3, [r7, #4]
	while(time_out)
 80015c2:	e02d      	b.n	8001620 <check_server_connection+0x70>
	{
		switch(state)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <check_server_connection+0x22>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d014      	beq.n	80015fa <check_server_connection+0x4a>
 80015d0:	e026      	b.n	8001620 <check_server_connection+0x70>
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN?\r");
 80015d2:	4817      	ldr	r0, [pc, #92]	; (8001630 <check_server_connection+0x80>)
 80015d4:	f000 fa02 	bl	80019dc <send_to_gsm>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <check_server_connection+0x84>)
 80015dc:	6013      	str	r3, [r2, #0]
			if(strstr(str,"ERROR")!=NULL)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <check_server_connection+0x84>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4915      	ldr	r1, [pc, #84]	; (8001638 <check_server_connection+0x88>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 fa1c 	bl	8007a22 <strstr>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <check_server_connection+0x46>
			{
				state=0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e001      	b.n	80015fa <check_server_connection+0x4a>
			}
			else
			{
				substate=1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
			}
		case 1:
			if(strstr(str,"139.59.78.252")!=NULL)
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <check_server_connection+0x84>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	490f      	ldr	r1, [pc, #60]	; (800163c <check_server_connection+0x8c>)
 8001600:	4618      	mov	r0, r3
 8001602:	f006 fa0e 	bl	8007a22 <strstr>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <check_server_connection+0x66>
			{
				printf("tcp connection established\n");
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <check_server_connection+0x90>)
 800160e:	f006 f955 	bl	80078bc <puts>
				return 0;
 8001612:	2300      	movs	r3, #0
 8001614:	e008      	b.n	8001628 <check_server_connection+0x78>
			}
			else
			{
				printf("tcp connection NOT established\n");
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <check_server_connection+0x94>)
 8001618:	f006 f950 	bl	80078bc <puts>
				return 1;
 800161c:	2301      	movs	r3, #1
 800161e:	e003      	b.n	8001628 <check_server_connection+0x78>
	while(time_out)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ce      	bne.n	80015c4 <check_server_connection+0x14>
			}

		}
	}
	return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	0800bf18 	.word	0x0800bf18
 8001634:	200002fc 	.word	0x200002fc
 8001638:	0800be9c 	.word	0x0800be9c
 800163c:	0800bf28 	.word	0x0800bf28
 8001640:	0800bf38 	.word	0x0800bf38
 8001644:	0800bf54 	.word	0x0800bf54

08001648 <check_signal>:


}

int check_signal(char *str)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8001654:	e04b      	b.n	80016ee <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b20      	cmp	r3, #32
 8001662:	d120      	bne.n	80016a6 <check_signal+0x5e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3b02      	subs	r3, #2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b3a      	cmp	r3, #58	; 0x3a
 8001670:	d119      	bne.n	80016a6 <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b2f      	cmp	r3, #47	; 0x2f
 800167c:	d805      	bhi.n	800168a <check_signal+0x42>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b39      	cmp	r3, #57	; 0x39
 8001688:	d80d      	bhi.n	80016a6 <check_signal+0x5e>
		{
			rssi=str+i;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4833      	ldr	r0, [pc, #204]	; (8001770 <check_signal+0x128>)
 80016a2:	f006 f885 	bl	80077b0 <iprintf>
		}
	    }
	    if(str[i-1]==',')
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b2c      	cmp	r3, #44	; 0x2c
 80016b2:	d119      	bne.n	80016e8 <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b2f      	cmp	r3, #47	; 0x2f
 80016be:	d805      	bhi.n	80016cc <check_signal+0x84>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b39      	cmp	r3, #57	; 0x39
 80016ca:	d80d      	bhi.n	80016e8 <check_signal+0xa0>
		        {
		        	ber=str+i;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3301      	adds	r3, #1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4824      	ldr	r0, [pc, #144]	; (8001774 <check_signal+0x12c>)
 80016e4:	f006 f864 	bl	80077b0 <iprintf>
	        	}

	    }
		i++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ad      	bne.n	8001656 <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	481b      	ldr	r0, [pc, #108]	; (8001778 <check_signal+0x130>)
 800170a:	f006 f851 	bl	80077b0 <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	3301      	adds	r3, #1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <check_signal+0x134>)
 800171e:	f006 f847 	bl	80077b0 <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b39      	cmp	r3, #57	; 0x39
 8001728:	d11d      	bne.n	8001766 <check_signal+0x11e>
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b39      	cmp	r3, #57	; 0x39
 8001732:	d118      	bne.n	8001766 <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b31      	cmp	r3, #49	; 0x31
 800173a:	d803      	bhi.n	8001744 <check_signal+0xfc>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b38      	cmp	r3, #56	; 0x38
 8001742:	d80e      	bhi.n	8001762 <check_signal+0x11a>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b2f      	cmp	r3, #47	; 0x2f
 800174c:	d804      	bhi.n	8001758 <check_signal+0x110>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b39      	cmp	r3, #57	; 0x39
 8001756:	d804      	bhi.n	8001762 <check_signal+0x11a>
	    {
	    printf("ok");
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <check_signal+0x138>)
 800175a:	f006 f829 	bl	80077b0 <iprintf>
	    return 0;
 800175e:	2300      	movs	r3, #0
 8001760:	e002      	b.n	8001768 <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 8001766:	2301      	movs	r3, #1
	}
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800bf84 	.word	0x0800bf84
 8001774:	0800bf90 	.word	0x0800bf90
 8001778:	0800bf9c 	.word	0x0800bf9c
 800177c:	0800bfac 	.word	0x0800bfac
 8001780:	0800bfbc 	.word	0x0800bfbc

08001784 <connect_tcp_server>:

int connect_tcp_server()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
	int state=0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	int substate=0;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
	int count=10;
 8001792:	230a      	movs	r3, #10
 8001794:	607b      	str	r3, [r7, #4]
	while(count--)
 8001796:	e0f3      	b.n	8001980 <connect_tcp_server+0x1fc>
	{
	switch(state)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b02      	cmp	r3, #2
 800179c:	f000 8086 	beq.w	80018ac <connect_tcp_server+0x128>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f300 80e7 	bgt.w	8001976 <connect_tcp_server+0x1f2>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <connect_tcp_server+0x32>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d036      	beq.n	8001822 <connect_tcp_server+0x9e>
 80017b4:	e0df      	b.n	8001976 <connect_tcp_server+0x1f2>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <connect_tcp_server+0x40>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d017      	beq.n	80017f2 <connect_tcp_server+0x6e>
 80017c2:	e0dd      	b.n	8001980 <connect_tcp_server+0x1fc>
	case 0:
	{
		switch(substate)
		{
		case 0:
			str=send_to_gsm("AT+CIPMODE?\r\n");
 80017c4:	4875      	ldr	r0, [pc, #468]	; (800199c <connect_tcp_server+0x218>)
 80017c6:	f000 f909 	bl	80019dc <send_to_gsm>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a74      	ldr	r2, [pc, #464]	; (80019a0 <connect_tcp_server+0x21c>)
 80017ce:	6013      	str	r3, [r2, #0]
			if(strstr(str,"+CIPMODE: 0"))
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <connect_tcp_server+0x21c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4973      	ldr	r1, [pc, #460]	; (80019a4 <connect_tcp_server+0x220>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 f923 	bl	8007a22 <strstr>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <connect_tcp_server+0x68>
			{
				state=1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
				substate=0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=1;
			}
			break;
 80017ea:	e019      	b.n	8001820 <connect_tcp_server+0x9c>
				substate=1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
			break;
 80017f0:	e016      	b.n	8001820 <connect_tcp_server+0x9c>
		case 1:
			str=send_to_gsm("AT+CIPMODE=0\r\n");
 80017f2:	486d      	ldr	r0, [pc, #436]	; (80019a8 <connect_tcp_server+0x224>)
 80017f4:	f000 f8f2 	bl	80019dc <send_to_gsm>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a69      	ldr	r2, [pc, #420]	; (80019a0 <connect_tcp_server+0x21c>)
 80017fc:	6013      	str	r3, [r2, #0]
			if(strstr(str,"OK"))
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <connect_tcp_server+0x21c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	496a      	ldr	r1, [pc, #424]	; (80019ac <connect_tcp_server+0x228>)
 8001804:	4618      	mov	r0, r3
 8001806:	f006 f90c 	bl	8007a22 <strstr>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <connect_tcp_server+0x96>
			{
				state=0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=0;
			}
			break;
 8001818:	e001      	b.n	800181e <connect_tcp_server+0x9a>
				substate=0;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
			break;
 800181e:	bf00      	nop
		}
		break;
 8001820:	e0ae      	b.n	8001980 <connect_tcp_server+0x1fc>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <connect_tcp_server+0xac>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d025      	beq.n	800187a <connect_tcp_server+0xf6>
 800182e:	e0a7      	b.n	8001980 <connect_tcp_server+0x1fc>
	case 1:
	{
		switch(substate)
		{
		case 0:
			str = send_to_gsm("AT+NETOPEN\r\n");
 8001830:	485f      	ldr	r0, [pc, #380]	; (80019b0 <connect_tcp_server+0x22c>)
 8001832:	f000 f8d3 	bl	80019dc <send_to_gsm>
 8001836:	4603      	mov	r3, r0
 8001838:	4a59      	ldr	r2, [pc, #356]	; (80019a0 <connect_tcp_server+0x21c>)
 800183a:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("NETOPEN\n");
 800183c:	485d      	ldr	r0, [pc, #372]	; (80019b4 <connect_tcp_server+0x230>)
 800183e:	f006 f83d 	bl	80078bc <puts>
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <connect_tcp_server+0x21c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2206      	movs	r2, #6
 8001848:	495b      	ldr	r1, [pc, #364]	; (80019b8 <connect_tcp_server+0x234>)
 800184a:	4618      	mov	r0, r3
 800184c:	f006 f8d5 	bl	80079fa <strncmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <connect_tcp_server+0xe6>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	68f9      	ldr	r1, [r7, #12]
 800185a:	4858      	ldr	r0, [pc, #352]	; (80019bc <connect_tcp_server+0x238>)
 800185c:	f005 ffa8 	bl	80077b0 <iprintf>
				state=2;
 8001860:	2302      	movs	r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
			else
			{
				printf("state = %d substate = %d \n",state,substate);
				substate=1;
			}
			break;
 8001868:	e01f      	b.n	80018aa <connect_tcp_server+0x126>
				printf("state = %d substate = %d \n",state,substate);
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	4853      	ldr	r0, [pc, #332]	; (80019bc <connect_tcp_server+0x238>)
 8001870:	f005 ff9e 	bl	80077b0 <iprintf>
				substate=1;
 8001874:	2301      	movs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
			break;
 8001878:	e017      	b.n	80018aa <connect_tcp_server+0x126>
		case 1:
			if((strstr(str,"Network is already opened")!=NULL))
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <connect_tcp_server+0x21c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4950      	ldr	r1, [pc, #320]	; (80019c0 <connect_tcp_server+0x23c>)
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f8ce 	bl	8007a22 <strstr>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <connect_tcp_server+0x11c>
			{
				printf("state = %d substate = %d \n",state,substate);
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	484a      	ldr	r0, [pc, #296]	; (80019bc <connect_tcp_server+0x238>)
 8001892:	f005 ff8d 	bl	80077b0 <iprintf>
				state=2;
 8001896:	2302      	movs	r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
				substate=0;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
			else
			{
				state=0;
				substate=0;
			}
			break;
 800189e:	e003      	b.n	80018a8 <connect_tcp_server+0x124>
				state=0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
			break;
 80018a8:	bf00      	nop

		}
		break;
 80018aa:	e069      	b.n	8001980 <connect_tcp_server+0x1fc>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d044      	beq.n	800193c <connect_tcp_server+0x1b8>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	dc63      	bgt.n	8001980 <connect_tcp_server+0x1fc>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <connect_tcp_server+0x142>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d024      	beq.n	800190e <connect_tcp_server+0x18a>
 80018c4:	e05c      	b.n	8001980 <connect_tcp_server+0x1fc>
	case 2:
	{
		switch(substate)
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",52102\r");
 80018c6:	483f      	ldr	r0, [pc, #252]	; (80019c4 <connect_tcp_server+0x240>)
 80018c8:	f000 f888 	bl	80019dc <send_to_gsm>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <connect_tcp_server+0x21c>)
 80018d0:	6013      	str	r3, [r2, #0]
			//HAL_Delay(1000);
			printf("CIPOPEN\n");
 80018d2:	483d      	ldr	r0, [pc, #244]	; (80019c8 <connect_tcp_server+0x244>)
 80018d4:	f005 fff2 	bl	80078bc <puts>
			if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <connect_tcp_server+0x21c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	493b      	ldr	r1, [pc, #236]	; (80019cc <connect_tcp_server+0x248>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 f89f 	bl	8007a22 <strstr>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <connect_tcp_server+0x17a>
				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
			{
				printf("state = %d substate = %d \n",state,substate);
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	4833      	ldr	r0, [pc, #204]	; (80019bc <connect_tcp_server+0x238>)
 80018f0:	f005 ff5e 	bl	80077b0 <iprintf>
				state=3;
 80018f4:	2303      	movs	r3, #3
 80018f6:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=1;
			}
			break;
 80018fc:	e03a      	b.n	8001974 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	482e      	ldr	r0, [pc, #184]	; (80019bc <connect_tcp_server+0x238>)
 8001904:	f005 ff54 	bl	80077b0 <iprintf>
				substate=1;
 8001908:	2301      	movs	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
			break;
 800190c:	e032      	b.n	8001974 <connect_tcp_server+0x1f0>
		case 1:
			if(check_server_connection()==0)
 800190e:	f7ff fe4f 	bl	80015b0 <check_server_connection>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <connect_tcp_server+0x1a8>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	4827      	ldr	r0, [pc, #156]	; (80019bc <connect_tcp_server+0x238>)
 800191e:	f005 ff47 	bl	80077b0 <iprintf>
				state=3;
 8001922:	2303      	movs	r3, #3
 8001924:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=2;
			}
			break;
 800192a:	e023      	b.n	8001974 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	4822      	ldr	r0, [pc, #136]	; (80019bc <connect_tcp_server+0x238>)
 8001932:	f005 ff3d 	bl	80077b0 <iprintf>
				substate=2;
 8001936:	2302      	movs	r3, #2
 8001938:	60bb      	str	r3, [r7, #8]
			break;
 800193a:	e01b      	b.n	8001974 <connect_tcp_server+0x1f0>
		case 2:
			//if((strstr(str,"ERROR")!=NULL))
			if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <connect_tcp_server+0x21c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2206      	movs	r2, #6
 8001942:	4923      	ldr	r1, [pc, #140]	; (80019d0 <connect_tcp_server+0x24c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f006 f858 	bl	80079fa <strncmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <connect_tcp_server+0x1dc>
			{
				printf("state = %d substate = %d \n",state,substate);
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	4819      	ldr	r0, [pc, #100]	; (80019bc <connect_tcp_server+0x238>)
 8001956:	f005 ff2b 	bl	80077b0 <iprintf>
				//state=3;
				substate=0;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				state=0;
				substate=0;
			}
			break;
 800195e:	e008      	b.n	8001972 <connect_tcp_server+0x1ee>
				printf("state = %d substate = %d \n",state,substate);
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	4815      	ldr	r0, [pc, #84]	; (80019bc <connect_tcp_server+0x238>)
 8001966:	f005 ff23 	bl	80077b0 <iprintf>
				state=0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
				substate=0;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
			break;
 8001972:	bf00      	nop


		}
		break;
 8001974:	e004      	b.n	8001980 <connect_tcp_server+0x1fc>
	}
	default:
		printf("opened successfulyy\n");
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <connect_tcp_server+0x250>)
 8001978:	f005 ffa0 	bl	80078bc <puts>
		return 0;
 800197c:	2300      	movs	r3, #0
 800197e:	e009      	b.n	8001994 <connect_tcp_server+0x210>
	while(count--)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f af06 	bne.w	8001798 <connect_tcp_server+0x14>
	}
}
	printf("Time out\n");
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <connect_tcp_server+0x254>)
 800198e:	f005 ff95 	bl	80078bc <puts>

	return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	0800bfc0 	.word	0x0800bfc0
 80019a0:	200002fc 	.word	0x200002fc
 80019a4:	0800bfd0 	.word	0x0800bfd0
 80019a8:	0800bfdc 	.word	0x0800bfdc
 80019ac:	0800be08 	.word	0x0800be08
 80019b0:	0800bfec 	.word	0x0800bfec
 80019b4:	0800bffc 	.word	0x0800bffc
 80019b8:	0800bd68 	.word	0x0800bd68
 80019bc:	0800bd70 	.word	0x0800bd70
 80019c0:	0800c004 	.word	0x0800c004
 80019c4:	0800c020 	.word	0x0800c020
 80019c8:	0800c04c 	.word	0x0800c04c
 80019cc:	0800c054 	.word	0x0800c054
 80019d0:	0800bd98 	.word	0x0800bd98
 80019d4:	0800c064 	.word	0x0800c064
 80019d8:	0800c078 	.word	0x0800c078

080019dc <send_to_gsm>:
	return -1;
}


char *send_to_gsm(char * command)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 80019e4:	22c8      	movs	r2, #200	; 0xc8
 80019e6:	2100      	movs	r1, #0
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <send_to_gsm+0x4c>)
 80019ea:	f005 f85f 	bl	8006aac <memset>
	 printf("tx start\n");
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <send_to_gsm+0x50>)
 80019f0:	f005 ff64 	bl	80078bc <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7fe fbeb 	bl	80001d0 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <send_to_gsm+0x54>)
 8001a04:	f003 fc58 	bl	80052b8 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	22c8      	movs	r2, #200	; 0xc8
 8001a0e:	4906      	ldr	r1, [pc, #24]	; (8001a28 <send_to_gsm+0x4c>)
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <send_to_gsm+0x54>)
 8001a12:	f003 fb7f 	bl	8005114 <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8001a16:	4904      	ldr	r1, [pc, #16]	; (8001a28 <send_to_gsm+0x4c>)
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <send_to_gsm+0x58>)
 8001a1a:	f005 fec9 	bl	80077b0 <iprintf>
	 return (char *)rx;
 8001a1e:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <send_to_gsm+0x4c>)
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000234 	.word	0x20000234
 8001a2c:	0800c0b4 	.word	0x0800c0b4
 8001a30:	20000300 	.word	0x20000300
 8001a34:	0800c0c0 	.word	0x0800c0c0

08001a38 <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
		char buf[20];
		memset(buf,'\0',sizeof(buf));
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2214      	movs	r2, #20
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 f82e 	bl	8006aac <memset>
		sprintf(buf, "AT+CIPSEND=0,%d\r", strlen(mes));
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe fbbd 	bl	80001d0 <strlen>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4922      	ldr	r1, [pc, #136]	; (8001ae8 <send_mesg_to_server+0xb0>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 ff3a 	bl	80078d8 <siprintf>
		memset(rx,'\0',sizeof(rx));
 8001a64:	22c8      	movs	r2, #200	; 0xc8
 8001a66:	2100      	movs	r1, #0
 8001a68:	4820      	ldr	r0, [pc, #128]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a6a:	f005 f81f 	bl	8006aac <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)buf,16);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2210      	movs	r2, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	481e      	ldr	r0, [pc, #120]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001a78:	f003 fc1e 	bl	80052b8 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001a7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a80:	22c8      	movs	r2, #200	; 0xc8
 8001a82:	491a      	ldr	r1, [pc, #104]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a84:	481a      	ldr	r0, [pc, #104]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001a86:	f003 fb45 	bl	8005114 <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001a8a:	4918      	ldr	r1, [pc, #96]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a8c:	4819      	ldr	r0, [pc, #100]	; (8001af4 <send_mesg_to_server+0xbc>)
 8001a8e:	f005 fe8f 	bl	80077b0 <iprintf>
		memset(rx,'\0',sizeof(rx));
 8001a92:	22c8      	movs	r2, #200	; 0xc8
 8001a94:	2100      	movs	r1, #0
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <send_mesg_to_server+0xb4>)
 8001a98:	f005 f808 	bl	8006aac <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)mes,size);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001aa6:	f003 fc07 	bl	80052b8 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001aaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001aae:	22c8      	movs	r2, #200	; 0xc8
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <send_mesg_to_server+0xb4>)
 8001ab2:	480f      	ldr	r0, [pc, #60]	; (8001af0 <send_mesg_to_server+0xb8>)
 8001ab4:	f003 fb2e 	bl	8005114 <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <send_mesg_to_server+0xb4>)
 8001aba:	480e      	ldr	r0, [pc, #56]	; (8001af4 <send_mesg_to_server+0xbc>)
 8001abc:	f005 fe78 	bl	80077b0 <iprintf>
		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 8001ac0:	490d      	ldr	r1, [pc, #52]	; (8001af8 <send_mesg_to_server+0xc0>)
 8001ac2:	480a      	ldr	r0, [pc, #40]	; (8001aec <send_mesg_to_server+0xb4>)
 8001ac4:	f005 ffad 	bl	8007a22 <strstr>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <send_mesg_to_server+0xa0>
		{
			printf("mesg send successfully\n");
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <send_mesg_to_server+0xc4>)
 8001ad0:	f005 fef4 	bl	80078bc <puts>
			return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e003      	b.n	8001ae0 <send_mesg_to_server+0xa8>
		}
		else
		{
			printf("mesg NOT send\n");
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <send_mesg_to_server+0xc8>)
 8001ada:	f005 feef 	bl	80078bc <puts>
			return 1;
 8001ade:	2301      	movs	r3, #1
		}
	return 1;
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800c0cc 	.word	0x0800c0cc
 8001aec:	20000234 	.word	0x20000234
 8001af0:	20000300 	.word	0x20000300
 8001af4:	0800c0e0 	.word	0x0800c0e0
 8001af8:	0800bd68 	.word	0x0800bd68
 8001afc:	0800c0f4 	.word	0x0800c0f4
 8001b00:	0800c10c 	.word	0x0800c10c

08001b04 <writeStringToFlash>:
#include "INT_Flash.h"
#include "stm32l4xx_hal.h"
#include<string.h>
/************ writing data to flash memory ********/
void writeStringToFlash(uint64_t address, const char* str) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8001b10:	f001 fbc0 	bl	8003294 <HAL_FLASH_Unlock>

    // Calculate the length of the string
    uint32_t len = strlen(str);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7fe fb5b 	bl	80001d0 <strlen>
 8001b1a:	61f8      	str	r0, [r7, #28]

    // Ensure the length is even to write complete double words
    if (len % 8 != 0) {
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <writeStringToFlash+0x2c>
        len += (8 - len % 8);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f023 0307 	bic.w	r3, r3, #7
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	61fb      	str	r3, [r7, #28]
    }

    // Write the string to flash
    for (uint32_t i = 0; i < len; i += 8) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	e019      	b.n	8001b6a <writeStringToFlash+0x66>
        uint64_t data = 0;
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        memcpy(&data, str + i, 8);
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	18d1      	adds	r1, r2, r3
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 ff9e 	bl	8006a90 <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	18d1      	adds	r1, r2, r3
 8001b5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f001 fb2c 	bl	80031bc <HAL_FLASH_Program>
    for (uint32_t i = 0; i < len; i += 8) {
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	3308      	adds	r3, #8
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3e1      	bcc.n	8001b36 <writeStringToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8001b72:	f001 fbb1 	bl	80032d8 <HAL_FLASH_Lock>
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <readDataFromFlash>:


/***************reading data from flash memory **************/
void readDataFromFlash(uint64_t address, char* buffer, uint64_t dataSize)
{
 8001b7e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b82:	b08d      	sub	sp, #52	; 0x34
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b8a:	60fa      	str	r2, [r7, #12]
	uint32_t i,j=0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < dataSize; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b94:	e03d      	b.n	8001c12 <readDataFromFlash+0x94>
	{
	       uint64_t data = *(__IO uint64_t*)address;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	       // Copy each byte from the 64-bit data
	               for (int k = 0; k < 8; k++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	e023      	b.n	8001bee <readDataFromFlash+0x70>
	                   if (j < dataSize - 1) {  // Ensure not to overflow the buffer
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	469a      	mov	sl, r3
 8001bac:	4693      	mov	fp, r2
 8001bae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bb2:	1e54      	subs	r4, r2, #1
 8001bb4:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001bb8:	45a2      	cmp	sl, r4
 8001bba:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001bbe:	d207      	bcs.n	8001bd0 <readDataFromFlash+0x52>
	                       buffer[j++] = (char)(data & 0xFF);
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bce:	701a      	strb	r2, [r3, #0]
	                   }
	                   data >>= 8;
 8001bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	0a02      	lsrs	r2, r0, #8
 8001bde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001be2:	0a0b      	lsrs	r3, r1, #8
 8001be4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	               for (int k = 0; k < 8; k++) {
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	ddd8      	ble.n	8001ba6 <readDataFromFlash+0x28>
	               }
	       address += 8;
 8001bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bf8:	f112 0108 	adds.w	r1, r2, #8
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	f143 0300 	adc.w	r3, r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < dataSize; i++)
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	2200      	movs	r2, #0
 8001c16:	4698      	mov	r8, r3
 8001c18:	4691      	mov	r9, r2
 8001c1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c1e:	4590      	cmp	r8, r2
 8001c20:	eb79 0303 	sbcs.w	r3, r9, r3
 8001c24:	d3b7      	bcc.n	8001b96 <readDataFromFlash+0x18>
	}
	buffer[i] = '\0';
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	4413      	add	r3, r2
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

}
 8001c30:	bf00      	nop
 8001c32:	3734      	adds	r7, #52	; 0x34
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c3a:	4770      	bx	lr

08001c3c <eraseFlashPage>:



/**************Erasing data from flash memory ****************/
void eraseFlashPage(uint64_t pageAddress) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	e9c7 0100 	strd	r0, r1, [r7]
    FLASH_EraseInitTypeDef eraseConfig;
    uint32_t pageError;

    eraseConfig.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
    eraseConfig.Page        = pageAddress / FLASH_PAGE_SIZE; // Specify the page number, not the address
 8001c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	0ac2      	lsrs	r2, r0, #11
 8001c58:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001c5c:	0acb      	lsrs	r3, r1, #11
 8001c5e:	4613      	mov	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
    eraseConfig.Banks       = FLASH_BANK_2; // Specify the bank
 8001c62:	2302      	movs	r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
    eraseConfig.NbPages     = 1; // Number of pages to erase
 8001c66:	2301      	movs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 8001c6a:	f001 fb13 	bl	8003294 <HAL_FLASH_Unlock>

    HAL_FLASHEx_Erase(&eraseConfig, &pageError);
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fbef 	bl	800345c <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8001c7e:	f001 fb2b 	bl	80032d8 <HAL_FLASH_Lock>
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_UART_RxCpltCallback>:
int Flag=0;
extern uint8_t flag ;
extern gpsdata gps;
extern int gps_status;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_UART_RxCpltCallback+0x24>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d105      	bne.n	8001ca8 <HAL_UART_RxCpltCallback+0x1c>
    {
        // Process the received data
    	//printf("data is %s\n",gps.Data);
//        gpsData(&gps);
    	gps_status = gpsData(&gps);
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_RxCpltCallback+0x28>)
 8001c9e:	f000 f829 	bl	8001cf4 <gpsData>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_UART_RxCpltCallback+0x2c>)
 8001ca6:	6013      	str	r3, [r2, #0]
    }
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000408 	.word	0x20000408
 8001cb4:	200009f0 	.word	0x200009f0
 8001cb8:	20000004 	.word	0x20000004

08001cbc <get_gps_data>:

int get_gps_data()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
//	memset(gps.Data,'\0',sizeof(gps.Data));
//	char b[1000];
//	memset(b,'\0',sizeof(b));
//	char Rx_buff[750];
	HAL_UART_Receive_IT(&huart1,(uint8_t*)gps.Data,750);
 8001cc0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <get_gps_data+0x28>)
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <get_gps_data+0x2c>)
 8001cc8:	f003 fb64 	bl	8005394 <HAL_UART_Receive_IT>
	//strcpy(gps.Data,Rx_buff);
	//memset(Rx_buff,'\0',750);
//	HAL_Delay(5000);
		  {
//							printf("%s\n",b);
				printf("received start from MODULE\n");
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <get_gps_data+0x30>)
 8001cce:	f005 fdf5 	bl	80078bc <puts>
			    printf("%s\n",gps.Data);
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <get_gps_data+0x28>)
 8001cd4:	f005 fdf2 	bl	80078bc <puts>
			    printf("received end  from MODULE\n");
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <get_gps_data+0x34>)
 8001cda:	f005 fdef 	bl	80078bc <puts>
			    return 0;
 8001cde:	2300      	movs	r3, #0
		  }
//	else
//	{
//		return 1;
//	}
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000a18 	.word	0x20000a18
 8001ce8:	20000408 	.word	0x20000408
 8001cec:	0800c11c 	.word	0x0800c11c
 8001cf0:	0800c138 	.word	0x0800c138

08001cf4 <gpsData>:

int gpsData(gpsdata* data)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af04      	add	r7, sp, #16
 8001cfa:	6078      	str	r0, [r7, #4]
	char *current_flag;
	int counter;
	int comma = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
	printf("in func\n");
 8001d00:	4861      	ldr	r0, [pc, #388]	; (8001e88 <gpsData+0x194>)
 8001d02:	f005 fddb 	bl	80078bc <puts>
			//HAL_UART_Receive(&GpsData->UartPort,(uint8_t*)GpsData->Data,700,HAL_MAX_DELAY);
	current_flag=strstr(data->Data,"GNGGA");
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3328      	adds	r3, #40	; 0x28
 8001d0a:	4960      	ldr	r1, [pc, #384]	; (8001e8c <gpsData+0x198>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f005 fe88 	bl	8007a22 <strstr>
 8001d12:	60b8      	str	r0, [r7, #8]
	//printf("string found\n");
	if(*current_flag=='G')
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b47      	cmp	r3, #71	; 0x47
 8001d1a:	f040 80ac 	bne.w	8001e76 <gpsData+0x182>
	{
	   counter=0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8001d22:	e00d      	b.n	8001d40 <gpsData+0x4c>
	   {
		   data->particular_flag_data[counter]=*(current_flag+counter);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	7819      	ldrb	r1, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4413      	add	r3, r2
 8001d32:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001d36:	460a      	mov	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
		   counter++;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b2a      	cmp	r3, #42	; 0x2a
 8001d4a:	d1eb      	bne.n	8001d24 <gpsData+0x30>
	   }
	    printf(" string is %s", data->particular_flag_data);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001d52:	4619      	mov	r1, r3
 8001d54:	484e      	ldr	r0, [pc, #312]	; (8001e90 <gpsData+0x19c>)
 8001d56:	f005 fd2b 	bl	80077b0 <iprintf>
		sprintf(data->buffer,"%s",data->particular_flag_data);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f203 3016 	addw	r0, r3, #790	; 0x316
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001d66:	461a      	mov	r2, r3
 8001d68:	494a      	ldr	r1, [pc, #296]	; (8001e94 <gpsData+0x1a0>)
 8001d6a:	f005 fdb5 	bl	80078d8 <siprintf>
		sscanf(data->buffer,"GNGGA,%lf,%f,%c,%f,%c,%d,",&data->time,&data->latitude,&data->N_OR_S,&data->longitude,&data->E_OR_W,&data->fix);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f203 3416 	addw	r4, r3, #790	; 0x316
 8001d74:	687d      	ldr	r5, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 0608 	add.w	r6, r3, #8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3321      	adds	r3, #33	; 0x21
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	320c      	adds	r2, #12
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	3122      	adds	r1, #34	; 0x22
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	3024      	adds	r0, #36	; 0x24
 8001d8c:	9003      	str	r0, [sp, #12]
 8001d8e:	9102      	str	r1, [sp, #8]
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4633      	mov	r3, r6
 8001d96:	462a      	mov	r2, r5
 8001d98:	493f      	ldr	r1, [pc, #252]	; (8001e98 <gpsData+0x1a4>)
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f005 fdbc 	bl	8007918 <siscanf>
        printf("lat:%f\n",data->latitude);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbcf 	bl	8000548 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	483b      	ldr	r0, [pc, #236]	; (8001e9c <gpsData+0x1a8>)
 8001db0:	f005 fcfe 	bl	80077b0 <iprintf>
        printf("lon:%f\n",data->longitude);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbc5 	bl	8000548 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4837      	ldr	r0, [pc, #220]	; (8001ea0 <gpsData+0x1ac>)
 8001dc4:	f005 fcf4 	bl	80077b0 <iprintf>


		current_flag=strstr(data->Data,"RMC");
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3328      	adds	r3, #40	; 0x28
 8001dcc:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <gpsData+0x1b0>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fe27 	bl	8007a22 <strstr>
 8001dd4:	60b8      	str	r0, [r7, #8]
			//printf("string found\n");
			if(*current_flag=='R')
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b52      	cmp	r3, #82	; 0x52
 8001ddc:	d132      	bne.n	8001e44 <gpsData+0x150>
			{
				printf("\nrmc ->%d\n",*current_flag);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	4830      	ldr	r0, [pc, #192]	; (8001ea8 <gpsData+0x1b4>)
 8001de6:	f005 fce3 	bl	80077b0 <iprintf>
				counter=0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]

				while(comma < 9) {
 8001dee:	e00e      	b.n	8001e0e <gpsData+0x11a>
					if(*(current_flag + counter) == ',')
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b2c      	cmp	r3, #44	; 0x2c
 8001dfa:	d102      	bne.n	8001e02 <gpsData+0x10e>
						comma++;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	613b      	str	r3, [r7, #16]
					counter++;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
					if(comma == 9)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d003      	beq.n	8001e16 <gpsData+0x122>
				while(comma < 9) {
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	dded      	ble.n	8001df0 <gpsData+0xfc>
 8001e14:	e000      	b.n	8001e18 <gpsData+0x124>
						break;
 8001e16:	bf00      	nop

				}

				for(int i=counter; i < counter+7; i++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e00d      	b.n	8001e3a <gpsData+0x146>
					data->Date[i-counter]= *(current_flag+i);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	441a      	add	r2, r3
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1acb      	subs	r3, r1, r3
 8001e2a:	7811      	ldrb	r1, [r2, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	460a      	mov	r2, r1
 8001e32:	761a      	strb	r2, [r3, #24]
				for(int i=counter; i < counter+7; i++)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	ddec      	ble.n	8001e1e <gpsData+0x12a>
			}


		if(data->fix==1||data->fix==2||data->fix==6)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d007      	beq.n	8001e5c <gpsData+0x168>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <gpsData+0x168>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2b06      	cmp	r3, #6
 8001e5a:	d107      	bne.n	8001e6c <gpsData+0x178>
		{
			printf("valid fix\n");
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <gpsData+0x1b8>)
 8001e5e:	f005 fd2d 	bl	80078bc <puts>
			gps_data_extraction(data);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f828 	bl	8001eb8 <gps_data_extraction>
			return 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e008      	b.n	8001e7e <gpsData+0x18a>

		}
		else
		{
			printf("invalid signal no fix\n");
 8001e6c:	4810      	ldr	r0, [pc, #64]	; (8001eb0 <gpsData+0x1bc>)
 8001e6e:	f005 fd25 	bl	80078bc <puts>
			return 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e003      	b.n	8001e7e <gpsData+0x18a>
		}
	 }
	else
	{
		printf("no data\n");
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <gpsData+0x1c0>)
 8001e78:	f005 fd20 	bl	80078bc <puts>
		return 1;
 8001e7c:	2301      	movs	r3, #1
	}
	return 1;
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	0800c154 	.word	0x0800c154
 8001e8c:	0800c15c 	.word	0x0800c15c
 8001e90:	0800c164 	.word	0x0800c164
 8001e94:	0800c174 	.word	0x0800c174
 8001e98:	0800c178 	.word	0x0800c178
 8001e9c:	0800c194 	.word	0x0800c194
 8001ea0:	0800c19c 	.word	0x0800c19c
 8001ea4:	0800c1a4 	.word	0x0800c1a4
 8001ea8:	0800c1a8 	.word	0x0800c1a8
 8001eac:	0800c1b4 	.word	0x0800c1b4
 8001eb0:	0800c1c0 	.word	0x0800c1c0
 8001eb4:	0800c1d8 	.word	0x0800c1d8

08001eb8 <gps_data_extraction>:
void gps_data_extraction(gpsdata* data)
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	b09d      	sub	sp, #116	; 0x74
 8001ebc:	af0a      	add	r7, sp, #40	; 0x28
 8001ebe:	6078      	str	r0, [r7, #4]
	double Deg_Val=0.0,Min_Val=0.0,Sec_Val=0.0,lon=0.0,lat=0.0;
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int hr,min,sec;
	//int hours, minutes, seconds;

	lon=data->longitude;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	lat=data->latitude;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if((data->E_OR_W=='E' && data->N_OR_S=='S')||(data->E_OR_W=='W' && data->N_OR_S=='N'))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001f26:	2b45      	cmp	r3, #69	; 0x45
 8001f28:	d104      	bne.n	8001f34 <gps_data_extraction+0x7c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f30:	2b53      	cmp	r3, #83	; 0x53
 8001f32:	d00b      	beq.n	8001f4c <gps_data_extraction+0x94>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001f3a:	2b57      	cmp	r3, #87	; 0x57
 8001f3c:	f040 8115 	bne.w	800216a <gps_data_extraction+0x2b2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f46:	2b4e      	cmp	r3, #78	; 0x4e
 8001f48:	f040 810f 	bne.w	800216a <gps_data_extraction+0x2b2>
	{
		Deg_Val=(int)(lon/100);
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4bbd      	ldr	r3, [pc, #756]	; (8002248 <gps_data_extraction+0x390>)
 8001f52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f56:	f7fe fc79 	bl	800084c <__aeabi_ddiv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fdf9 	bl	8000b58 <__aeabi_d2iz>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fadb 	bl	8000524 <__aeabi_i2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lon-(Deg_Val*100));
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	4bb3      	ldr	r3, [pc, #716]	; (8002248 <gps_data_extraction+0x390>)
 8001f7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f80:	f7fe fb3a 	bl	80005f8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f8c:	f7fe f97c 	bl	8000288 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fdde 	bl	8000b58 <__aeabi_d2iz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fac0 	bl	8000524 <__aeabi_i2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lon-(Deg_Val*100))-Min_Val)*100;
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4ba5      	ldr	r3, [pc, #660]	; (8002248 <gps_data_extraction+0x390>)
 8001fb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fb6:	f7fe fb1f 	bl	80005f8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fc2:	f7fe f961 	bl	8000288 <__aeabi_dsub>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fd2:	f7fe f959 	bl	8000288 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b99      	ldr	r3, [pc, #612]	; (8002248 <gps_data_extraction+0x390>)
 8001fe4:	f7fe fb08 	bl	80005f8 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->longitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree))*-1;
 8001ff0:	a38f      	add	r3, pc, #572	; (adr r3, 8002230 <gps_data_extraction+0x378>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ffa:	f7fe fafd 	bl	80005f8 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800200a:	f7fe f93f 	bl	800028c <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	a388      	add	r3, pc, #544	; (adr r3, 8002238 <gps_data_extraction+0x380>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002020:	f7fe faea 	bl	80005f8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe f92e 	bl	800028c <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f7fe fdd6 	bl	8000be8 <__aeabi_d2f>
 800203c:	4603      	mov	r3, r0
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef1 7a67 	vneg.f32	s15, s15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	edc3 7a03 	vstr	s15, [r3, #12]
		printf("longitude : %f\n",data->longitude);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa79 	bl	8000548 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	487c      	ldr	r0, [pc, #496]	; (800224c <gps_data_extraction+0x394>)
 800205c:	f005 fba8 	bl	80077b0 <iprintf>

		Deg_Val=(int)((lat/100));
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b78      	ldr	r3, [pc, #480]	; (8002248 <gps_data_extraction+0x390>)
 8002066:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800206a:	f7fe fbef 	bl	800084c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd6f 	bl	8000b58 <__aeabi_d2iz>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa51 	bl	8000524 <__aeabi_i2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lat-(Deg_Val*100));
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b6e      	ldr	r3, [pc, #440]	; (8002248 <gps_data_extraction+0x390>)
 8002090:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002094:	f7fe fab0 	bl	80005f8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020a0:	f7fe f8f2 	bl	8000288 <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fd54 	bl	8000b58 <__aeabi_d2iz>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa36 	bl	8000524 <__aeabi_i2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lat-(Deg_Val*100))-Min_Val)*10;
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b60      	ldr	r3, [pc, #384]	; (8002248 <gps_data_extraction+0x390>)
 80020c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020ca:	f7fe fa95 	bl	80005f8 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020d6:	f7fe f8d7 	bl	8000288 <__aeabi_dsub>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020e6:	f7fe f8cf 	bl	8000288 <__aeabi_dsub>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <gps_data_extraction+0x398>)
 80020f8:	f7fe fa7e 	bl	80005f8 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->latitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree));
 8002104:	a34a      	add	r3, pc, #296	; (adr r3, 8002230 <gps_data_extraction+0x378>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800210e:	f7fe fa73 	bl	80005f8 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800211e:	f7fe f8b5 	bl	800028c <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	a343      	add	r3, pc, #268	; (adr r3, 8002238 <gps_data_extraction+0x380>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002134:	f7fe fa60 	bl	80005f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8a4 	bl	800028c <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd4c 	bl	8000be8 <__aeabi_d2f>
 8002150:	4602      	mov	r2, r0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]
		printf("latitude : %f\n",data->latitude);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9f4 	bl	8000548 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	483b      	ldr	r0, [pc, #236]	; (8002254 <gps_data_extraction+0x39c>)
 8002166:	f005 fb23 	bl	80077b0 <iprintf>
	}
    hr=(int)((data->time)/10000);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002170:	a333      	add	r3, pc, #204	; (adr r3, 8002240 <gps_data_extraction+0x388>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fb69 	bl	800084c <__aeabi_ddiv>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fce9 	bl	8000b58 <__aeabi_d2iz>
 8002186:	4603      	mov	r3, r0
 8002188:	617b      	str	r3, [r7, #20]
   	min=(int)(data->time-(hr*10000))/100;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f242 7210 	movw	r2, #10000	; 0x2710
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9c2 	bl	8000524 <__aeabi_i2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4620      	mov	r0, r4
 80021a6:	4629      	mov	r1, r5
 80021a8:	f7fe f86e 	bl	8000288 <__aeabi_dsub>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fcd0 	bl	8000b58 <__aeabi_d2iz>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <gps_data_extraction+0x3a0>)
 80021bc:	fb82 1203 	smull	r1, r2, r2, r3
 80021c0:	1152      	asrs	r2, r2, #5
 80021c2:	17db      	asrs	r3, r3, #31
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	613b      	str	r3, [r7, #16]
   	sec=(int)(data->time-((hr*10000)+(min*100)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80021d4:	fb03 f202 	mul.w	r2, r3, r2
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f99e 	bl	8000524 <__aeabi_i2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f84a 	bl	8000288 <__aeabi_dsub>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fcac 	bl	8000b58 <__aeabi_d2iz>
 8002200:	4603      	mov	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]
   	int ist_hr = hr + 5;  // 5 hours difference
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3305      	adds	r3, #5
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
   	int ist_min = min + 30;  // 30 minutes difference
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	331e      	adds	r3, #30
 800220e:	643b      	str	r3, [r7, #64]	; 0x40
    if(ist_hr>=24)
 8002210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002212:	2b17      	cmp	r3, #23
 8002214:	dd02      	ble.n	800221c <gps_data_extraction+0x364>
    {
    	ist_hr-=24;
 8002216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002218:	3b18      	subs	r3, #24
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
    }
   	// Adjusting for overflow
   	if (ist_min >= 60) {
 800221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221e:	2b3b      	cmp	r3, #59	; 0x3b
 8002220:	dd1c      	ble.n	800225c <gps_data_extraction+0x3a4>
   	    ist_hr++;
 8002222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002224:	3301      	adds	r3, #1
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
   	    ist_min -= 60;
 8002228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222a:	3b3c      	subs	r3, #60	; 0x3c
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
 800222e:	e015      	b.n	800225c <gps_data_extraction+0x3a4>
 8002230:	111fba11 	.word	0x111fba11
 8002234:	3f911111 	.word	0x3f911111
 8002238:	78d949ab 	.word	0x78d949ab
 800223c:	3f323456 	.word	0x3f323456
 8002240:	00000000 	.word	0x00000000
 8002244:	40c38800 	.word	0x40c38800
 8002248:	40590000 	.word	0x40590000
 800224c:	0800c1e0 	.word	0x0800c1e0
 8002250:	40240000 	.word	0x40240000
 8002254:	0800c1f0 	.word	0x0800c1f0
 8002258:	51eb851f 	.word	0x51eb851f
//	        // Format and store in gpsData
//	     sprintf(data->time, "%02d:%02d:%02d", hours, minutes, seconds);
			//sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":%s,\nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);

//		sprintf(json_str,"latitude:%f %c,longitude:%f %c,time:%d:%d:%d,Date = %s\n",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date);
		sprintf(json_str,"\n{\n\"lat\":%f %c,\n \"lon\":%f %c,\n \"time\": %d:%d:%d \n \"Date\" = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f971 	bl	8000548 <__aeabi_f2d>
 8002266:	4604      	mov	r4, r0
 8002268:	460d      	mov	r5, r1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002270:	461e      	mov	r6, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002286:	4608      	mov	r0, r1
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	3118      	adds	r1, #24
 800228c:	9108      	str	r1, [sp, #32]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	9107      	str	r1, [sp, #28]
 8002292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002294:	9106      	str	r1, [sp, #24]
 8002296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002298:	9105      	str	r1, [sp, #20]
 800229a:	9004      	str	r0, [sp, #16]
 800229c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022a0:	9600      	str	r6, [sp, #0]
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	4906      	ldr	r1, [pc, #24]	; (80022c0 <gps_data_extraction+0x408>)
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <gps_data_extraction+0x40c>)
 80022aa:	f005 fb15 	bl	80078d8 <siprintf>
//	     sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":\"%lf \" \nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);
	     printf("json format is %s\n",json_str);
 80022ae:	4905      	ldr	r1, [pc, #20]	; (80022c4 <gps_data_extraction+0x40c>)
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <gps_data_extraction+0x410>)
 80022b2:	f005 fa7d 	bl	80077b0 <iprintf>

}
 80022b6:	bf00      	nop
 80022b8:	374c      	adds	r7, #76	; 0x4c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800c200 	.word	0x0800c200
 80022c4:	20000598 	.word	0x20000598
 80022c8:	0800c244 	.word	0x0800c244

080022cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80022e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80022ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80022f4:	e000      	b.n	80022f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80022f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80022f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f9      	beq.n	80022f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002302:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_write>:
#include"INT_Flash.h"

#define FLASH_START_ADDRESS 0x08080000

int _write(int file,char *ptr,int len)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
    int i=0;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e009      	b.n	8002344 <_write+0x2a>
      ITM_SendChar((*ptr++));
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ffc7 	bl	80022cc <ITM_SendChar>
    for(i=0;i<len;i++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf1      	blt.n	8002330 <_write+0x16>
    return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <get_gsm_init>:
gpsdata gps;



int get_gsm_init()
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
	if(gsm_init()==0)
 800235a:	f7fe fe4d 	bl	8000ff8 <gsm_init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <get_gsm_init+0x20>
	{
		if(connect_tcp_server()==0)
 8002364:	f7ff fa0e 	bl	8001784 <connect_tcp_server>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <get_gsm_init+0x1c>
				return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e002      	b.n	8002378 <get_gsm_init+0x22>
			else
				return 1;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <get_gsm_init+0x22>
	}
	else
	{
		return 1;
 8002376:	2301      	movs	r3, #1
	}
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}

0800237c <gsm_actual_server>:

void gsm_actual_server()
  {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
      int count = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
     while(count<2)
 8002386:	e00e      	b.n	80023a6 <gsm_actual_server+0x2a>
     {
     if(get_gsm_init() == 0)
 8002388:	f7ff ffe5 	bl	8002356 <get_gsm_init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <gsm_actual_server+0x1e>
     {
            gsm_status = 0;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <gsm_actual_server+0x3c>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
            break;
 8002398:	e009      	b.n	80023ae <gsm_actual_server+0x32>
        }
        else
        {
            count++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3301      	adds	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
            gsm_status = 1;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <gsm_actual_server+0x3c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
     while(count<2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	dded      	ble.n	8002388 <gsm_actual_server+0xc>
        }
    }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000

080023bc <main>:

int main(void)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af02      	add	r7, sp, #8
  HAL_Init();
 80023c4:	f000 fcca 	bl	8002d5c <HAL_Init>

  SystemClock_Config();
 80023c8:	f000 f900 	bl	80025cc <SystemClock_Config>

  MX_GPIO_Init();
 80023cc:	f000 fa40 	bl	8002850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023d0:	f000 f9de 	bl	8002790 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80023d4:	f000 f94c 	bl	8002670 <MX_UART4_Init>
  MX_UART5_Init();
 80023d8:	f000 f97a 	bl	80026d0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80023dc:	f000 f9a8 	bl	8002730 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80023e0:	f000 fa06 	bl	80027f0 <MX_USART3_UART_Init>

  eraseFlashPage(FLASH_START_ADDRESS);
 80023e4:	4868      	ldr	r0, [pc, #416]	; (8002588 <main+0x1cc>)
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	f7ff fc27 	bl	8001c3c <eraseFlashPage>

  int inactive_count = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]

          gsm_actual_server();
 80023f2:	f7ff ffc3 	bl	800237c <gsm_actual_server>

        while (1)
        {
//        	memset(json_str,'\0',100);
//        	length = 0;
            get_gps_data();
 80023f6:	f7ff fc61 	bl	8001cbc <get_gps_data>
            printf("json data %s\n",json_str);
 80023fa:	4964      	ldr	r1, [pc, #400]	; (800258c <main+0x1d0>)
 80023fc:	4864      	ldr	r0, [pc, #400]	; (8002590 <main+0x1d4>)
 80023fe:	f005 f9d7 	bl	80077b0 <iprintf>
            length = strlen(json_str);
 8002402:	4862      	ldr	r0, [pc, #392]	; (800258c <main+0x1d0>)
 8002404:	f7fd fee4 	bl	80001d0 <strlen>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	4b61      	ldr	r3, [pc, #388]	; (8002594 <main+0x1d8>)
 800240e:	601a      	str	r2, [r3, #0]
            printf("length of json string %d data %s\n",length,json_str);
 8002410:	4b60      	ldr	r3, [pc, #384]	; (8002594 <main+0x1d8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5d      	ldr	r2, [pc, #372]	; (800258c <main+0x1d0>)
 8002416:	4619      	mov	r1, r3
 8002418:	485f      	ldr	r0, [pc, #380]	; (8002598 <main+0x1dc>)
 800241a:	f005 f9c9 	bl	80077b0 <iprintf>
            printf("gps_status %d\n",gps_status);
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <main+0x1e0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	485e      	ldr	r0, [pc, #376]	; (80025a0 <main+0x1e4>)
 8002426:	f005 f9c3 	bl	80077b0 <iprintf>
            if(gps_status==0)
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <main+0x1e0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 809f 	bne.w	8002572 <main+0x1b6>
            {
                if(check_server_connection()==0)
 8002434:	f7ff f8bc 	bl	80015b0 <check_server_connection>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <main+0xb0>
                {
                    mesg_status = send_mesg_to_server(json_str,length);
 800243e:	4b55      	ldr	r3, [pc, #340]	; (8002594 <main+0x1d8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	4851      	ldr	r0, [pc, #324]	; (800258c <main+0x1d0>)
 8002446:	f7ff faf7 	bl	8001a38 <send_mesg_to_server>
 800244a:	4603      	mov	r3, r0
 800244c:	4a55      	ldr	r2, [pc, #340]	; (80025a4 <main+0x1e8>)
 800244e:	6013      	str	r3, [r2, #0]
                    if(mesg_status == 1)
 8002450:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <main+0x1e8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d103      	bne.n	8002460 <main+0xa4>
                    {
                            gsm_status = 1;
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <main+0x1ec>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e008      	b.n	8002472 <main+0xb6>
                    }
                    else
                    {
                    	gsm_status = 0;
 8002460:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <main+0x1ec>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
                        inactive_count = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	e002      	b.n	8002472 <main+0xb6>
                    }
                }

                else
                {
                		 gsm_status = 1;
 800246c:	4b4e      	ldr	r3, [pc, #312]	; (80025a8 <main+0x1ec>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
                }

                if((gsm_status==1))
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <main+0x1ec>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d11d      	bne.n	80024b6 <main+0xfa>
                {
                    writeStringToFlash(FLASH_START_ADDRESS+offset*i,json_str);
 800247a:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <main+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <main+0x1f4>)
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800248a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 800248e:	17da      	asrs	r2, r3, #31
 8002490:	4698      	mov	r8, r3
 8002492:	4691      	mov	r9, r2
 8002494:	4a3d      	ldr	r2, [pc, #244]	; (800258c <main+0x1d0>)
 8002496:	4640      	mov	r0, r8
 8002498:	4649      	mov	r1, r9
 800249a:	f7ff fb33 	bl	8001b04 <writeStringToFlash>
                    inactive_count++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
                    i++;
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <main+0x1f4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a41      	ldr	r2, [pc, #260]	; (80025b0 <main+0x1f4>)
 80024ac:	6013      	str	r3, [r2, #0]
                    HAL_Delay(500);
 80024ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024b2:	f000 fccf 	bl	8002e54 <HAL_Delay>

                }

                if(inactive_count>flash_count)
 80024b6:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <main+0x1f8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dd5e      	ble.n	800257e <main+0x1c2>
                {
                    gsm_actual_server();
 80024c0:	f7ff ff5c 	bl	800237c <gsm_actual_server>
                    if(gsm_status == 0)
 80024c4:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <main+0x1ec>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d14c      	bne.n	8002566 <main+0x1aa>
                    {
                    	while(j<=i)
 80024cc:	e037      	b.n	800253e <main+0x182>
                    	{
                    		readDataFromFlash(FLASH_START_ADDRESS+offset*j, read_json, strlen(json_str)+1);
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <main+0x1f0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a39      	ldr	r2, [pc, #228]	; (80025b8 <main+0x1fc>)
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80024de:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80024e2:	17da      	asrs	r2, r3, #31
 80024e4:	469a      	mov	sl, r3
 80024e6:	4693      	mov	fp, r2
 80024e8:	4828      	ldr	r0, [pc, #160]	; (800258c <main+0x1d0>)
 80024ea:	f7fd fe71 	bl	80001d0 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	3301      	adds	r3, #1
 80024f2:	2200      	movs	r2, #0
 80024f4:	461c      	mov	r4, r3
 80024f6:	4615      	mov	r5, r2
 80024f8:	e9cd 4500 	strd	r4, r5, [sp]
 80024fc:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <main+0x200>)
 80024fe:	4650      	mov	r0, sl
 8002500:	4659      	mov	r1, fp
 8002502:	f7ff fb3c 	bl	8001b7e <readDataFromFlash>
                    		mesg_status = send_mesg_to_server(read_json,strlen(read_json)+1);
 8002506:	482d      	ldr	r0, [pc, #180]	; (80025bc <main+0x200>)
 8002508:	f7fd fe62 	bl	80001d0 <strlen>
 800250c:	4603      	mov	r3, r0
 800250e:	3301      	adds	r3, #1
 8002510:	4619      	mov	r1, r3
 8002512:	482a      	ldr	r0, [pc, #168]	; (80025bc <main+0x200>)
 8002514:	f7ff fa90 	bl	8001a38 <send_mesg_to_server>
 8002518:	4603      	mov	r3, r0
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <main+0x1e8>)
 800251c:	6013      	str	r3, [r2, #0]
                    		j++;
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <main+0x1fc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <main+0x1fc>)
 8002526:	6013      	str	r3, [r2, #0]
                    		printf("sent to server\n");
 8002528:	4825      	ldr	r0, [pc, #148]	; (80025c0 <main+0x204>)
 800252a:	f005 f9c7 	bl	80078bc <puts>
                    		printf("%d %d",i,j);
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <main+0x1f4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <main+0x1fc>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4822      	ldr	r0, [pc, #136]	; (80025c4 <main+0x208>)
 800253a:	f005 f939 	bl	80077b0 <iprintf>
                    	while(j<=i)
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <main+0x1fc>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <main+0x1f4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	ddc1      	ble.n	80024ce <main+0x112>
                    	}
                    j=0,i=0;
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <main+0x1fc>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <main+0x1f4>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
                    inactive_count = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
                    eraseFlashPage(FLASH_START_ADDRESS);
 800255a:	480b      	ldr	r0, [pc, #44]	; (8002588 <main+0x1cc>)
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	f7ff fb6c 	bl	8001c3c <eraseFlashPage>
 8002564:	e00b      	b.n	800257e <main+0x1c2>
                    }
                    else
                    {
                    	flash_count = flash_count+10;;
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <main+0x1f8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	330a      	adds	r3, #10
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <main+0x1f8>)
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e005      	b.n	800257e <main+0x1c2>
                }
            }

            else
            {
                printf("gps issue\n");
 8002572:	4815      	ldr	r0, [pc, #84]	; (80025c8 <main+0x20c>)
 8002574:	f005 f9a2 	bl	80078bc <puts>
                gps_status = 1;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <main+0x1e0>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
            }


            HAL_Delay(1000);
 800257e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002582:	f000 fc67 	bl	8002e54 <HAL_Delay>
            get_gps_data();
 8002586:	e736      	b.n	80023f6 <main+0x3a>
 8002588:	08080000 	.word	0x08080000
 800258c:	20000598 	.word	0x20000598
 8002590:	0800c258 	.word	0x0800c258
 8002594:	20000594 	.word	0x20000594
 8002598:	0800c268 	.word	0x0800c268
 800259c:	20000004 	.word	0x20000004
 80025a0:	0800c28c 	.word	0x0800c28c
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000000 	.word	0x20000000
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	200009e4 	.word	0x200009e4
 80025b4:	20000010 	.word	0x20000010
 80025b8:	200009e8 	.word	0x200009e8
 80025bc:	200005fc 	.word	0x200005fc
 80025c0:	0800c29c 	.word	0x0800c29c
 80025c4:	0800c2ac 	.word	0x0800c2ac
 80025c8:	0800c2b4 	.word	0x0800c2b4

080025cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b096      	sub	sp, #88	; 0x58
 80025d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	2244      	movs	r2, #68	; 0x44
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 fa66 	bl	8006aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e0:	463b      	mov	r3, r7
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025f2:	f001 fa2f 	bl	8003a54 <HAL_PWREx_ControlVoltageScaling>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025fc:	f000 f958 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002600:	2302      	movs	r3, #2
 8002602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800260a:	2310      	movs	r3, #16
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800260e:	2302      	movs	r3, #2
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002612:	2302      	movs	r3, #2
 8002614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800261a:	230a      	movs	r3, #10
 800261c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800261e:	2307      	movs	r3, #7
 8002620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002622:	2302      	movs	r3, #2
 8002624:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002626:	2302      	movs	r3, #2
 8002628:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4618      	mov	r0, r3
 8002630:	f001 fa66 	bl	8003b00 <HAL_RCC_OscConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800263a:	f000 f939 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263e:	230f      	movs	r3, #15
 8002640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002642:	2303      	movs	r3, #3
 8002644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002652:	463b      	mov	r3, r7
 8002654:	2104      	movs	r1, #4
 8002656:	4618      	mov	r0, r3
 8002658:	f001 fe2e 	bl	80042b8 <HAL_RCC_ClockConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002662:	f000 f925 	bl	80028b0 <Error_Handler>
  }
}
 8002666:	bf00      	nop
 8002668:	3758      	adds	r7, #88	; 0x58
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_UART4_Init+0x58>)
 8002676:	4a15      	ldr	r2, [pc, #84]	; (80026cc <MX_UART4_Init+0x5c>)
 8002678:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <MX_UART4_Init+0x58>)
 800267c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002680:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_UART4_Init+0x58>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_UART4_Init+0x58>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_UART4_Init+0x58>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_UART4_Init+0x58>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_UART4_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_UART4_Init+0x58>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_UART4_Init+0x58>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_UART4_Init+0x58>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_UART4_Init+0x58>)
 80026b4:	f002 fce0 	bl	8005078 <HAL_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80026be:	f000 f8f7 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000300 	.word	0x20000300
 80026cc:	40004c00 	.word	0x40004c00

080026d0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_UART5_Init+0x58>)
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <MX_UART5_Init+0x5c>)
 80026d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <MX_UART5_Init+0x58>)
 80026dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_UART5_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_UART5_Init+0x58>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_UART5_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_UART5_Init+0x58>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_UART5_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_UART5_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_UART5_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_UART5_Init+0x58>)
 800270e:	2200      	movs	r2, #0
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_UART5_Init+0x58>)
 8002714:	f002 fcb0 	bl	8005078 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800271e:	f000 f8c7 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000384 	.word	0x20000384
 800272c:	40005000 	.word	0x40005000

08002730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <MX_USART1_UART_Init+0x5c>)
 8002738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_USART1_UART_Init+0x58>)
 800273c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_USART1_UART_Init+0x58>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002756:	220c      	movs	r2, #12
 8002758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_USART1_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_USART1_UART_Init+0x58>)
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USART1_UART_Init+0x58>)
 8002774:	f002 fc80 	bl	8005078 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800277e:	f000 f897 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000408 	.word	0x20000408
 800278c:	40013800 	.word	0x40013800

08002790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <MX_USART2_UART_Init+0x5c>)
 8002798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027d4:	f002 fc50 	bl	8005078 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027de:	f000 f867 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000048c 	.word	0x2000048c
 80027ec:	40004400 	.word	0x40004400

080027f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <MX_USART3_UART_Init+0x58>)
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <MX_USART3_UART_Init+0x5c>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <MX_USART3_UART_Init+0x58>)
 80027fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_USART3_UART_Init+0x58>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <MX_USART3_UART_Init+0x58>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <MX_USART3_UART_Init+0x58>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <MX_USART3_UART_Init+0x58>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <MX_USART3_UART_Init+0x58>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <MX_USART3_UART_Init+0x58>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <MX_USART3_UART_Init+0x58>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <MX_USART3_UART_Init+0x58>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <MX_USART3_UART_Init+0x58>)
 8002834:	f002 fc20 	bl	8005078 <HAL_UART_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800283e:	f000 f837 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000510 	.word	0x20000510
 800284c:	40004800 	.word	0x40004800

08002850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_GPIO_Init+0x5c>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <MX_GPIO_Init+0x5c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_GPIO_Init+0x5c>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_GPIO_Init+0x5c>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <MX_GPIO_Init+0x5c>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <MX_GPIO_Init+0x5c>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <MX_GPIO_Init+0x5c>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <MX_GPIO_Init+0x5c>)
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_GPIO_Init+0x5c>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>
	...

080028bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_MspInit+0x44>)
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_MspInit+0x44>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6613      	str	r3, [r2, #96]	; 0x60
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_MspInit+0x44>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_MspInit+0x44>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_MspInit+0x44>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MspInit+0x44>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0b0      	sub	sp, #192	; 0xc0
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800291c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002920:	2288      	movs	r2, #136	; 0x88
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f004 f8c1 	bl	8006aac <memset>
  if(huart->Instance==UART4)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6f      	ldr	r2, [pc, #444]	; (8002aec <HAL_UART_MspInit+0x1e8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d144      	bne.n	80029be <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002934:	2308      	movs	r3, #8
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002938:	2300      	movs	r3, #0
 800293a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fedd 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800294c:	f7ff ffb0 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	4a66      	ldr	r2, [pc, #408]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800295a:	6593      	str	r3, [r2, #88]	; 0x58
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002974:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002980:	2303      	movs	r3, #3
 8002982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002998:	2308      	movs	r3, #8
 800299a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029a2:	4619      	mov	r1, r3
 80029a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a8:	f000 fe9c 	bl	80036e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2100      	movs	r1, #0
 80029b0:	2034      	movs	r0, #52	; 0x34
 80029b2:	f000 fb4e 	bl	8003052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80029b6:	2034      	movs	r0, #52	; 0x34
 80029b8:	f000 fb67 	bl	800308a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029bc:	e092      	b.n	8002ae4 <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_UART_MspInit+0x1f0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d145      	bne.n	8002a54 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029cc:	2300      	movs	r3, #0
 80029ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 fe93 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80029e0:	f7ff ff66 	bl	80028b0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e4:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	4a41      	ldr	r2, [pc, #260]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 80029ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ee:	6613      	str	r3, [r2, #96]	; 0x60
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	4a3b      	ldr	r2, [pc, #236]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a2e:	2307      	movs	r3, #7
 8002a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3e:	f000 fe51 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2025      	movs	r0, #37	; 0x25
 8002a48:	f000 fb03 	bl	8003052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a4c:	2025      	movs	r0, #37	; 0x25
 8002a4e:	f000 fb1c 	bl	800308a <HAL_NVIC_EnableIRQ>
}
 8002a52:	e047      	b.n	8002ae4 <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART3)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_UART_MspInit+0x1f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d142      	bne.n	8002ae4 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 fe48 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8002a76:	f7ff ff1b 	bl	80028b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6593      	str	r3, [r2, #88]	; 0x58
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_UART_MspInit+0x1ec>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002aaa:	2330      	movs	r3, #48	; 0x30
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ac2:	2307      	movs	r3, #7
 8002ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002acc:	4619      	mov	r1, r3
 8002ace:	480b      	ldr	r0, [pc, #44]	; (8002afc <HAL_UART_MspInit+0x1f8>)
 8002ad0:	f000 fe08 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2027      	movs	r0, #39	; 0x27
 8002ada:	f000 faba 	bl	8003052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ade:	2027      	movs	r0, #39	; 0x27
 8002ae0:	f000 fad3 	bl	800308a <HAL_NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	37c0      	adds	r7, #192	; 0xc0
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40004c00 	.word	0x40004c00
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40004800 	.word	0x40004800
 8002afc:	48000800 	.word	0x48000800

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <NMI_Handler+0x4>

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <MemManage_Handler+0x4>

08002b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4c:	f000 f962 	bl	8002e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <USART1_IRQHandler+0x10>)
 8002b5a:	f002 fc71 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000408 	.word	0x20000408

08002b68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <USART3_IRQHandler+0x10>)
 8002b6e:	f002 fc67 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000510 	.word	0x20000510

08002b7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <UART4_IRQHandler+0x10>)
 8002b82:	f002 fc5d 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000300 	.word	0x20000300

08002b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return 1;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_kill>:

int _kill(int pid, int sig)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002baa:	f003 ff47 	bl	8006a3c <__errno>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2216      	movs	r2, #22
 8002bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_exit>:

void _exit (int status)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ffe7 	bl	8002ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd2:	e7fe      	b.n	8002bd2 <_exit+0x12>

08002bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e00a      	b.n	8002bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be6:	f3af 8000 	nop.w
 8002bea:	4601      	mov	r1, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	b2ca      	uxtb	r2, r1
 8002bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf0      	blt.n	8002be6 <_read+0x12>
  }

  return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c36:	605a      	str	r2, [r3, #4]
  return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_isatty>:

int _isatty(int file)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca8:	f003 fec8 	bl	8006a3c <__errno>
 8002cac:	4603      	mov	r3, r0
 8002cae:	220c      	movs	r2, #12
 8002cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20018000 	.word	0x20018000
 8002cd8:	00000400 	.word	0x00000400
 8002cdc:	20000dd0 	.word	0x20000dd0
 8002ce0:	20000de8 	.word	0x20000de8

08002ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <SystemInit+0x20>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <SystemInit+0x20>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d0c:	f7ff ffea 	bl	8002ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d12:	490d      	ldr	r1, [pc, #52]	; (8002d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d14:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <LoopForever+0xe>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d18:	e002      	b.n	8002d20 <LoopCopyDataInit>

08002d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1e:	3304      	adds	r3, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d24:	d3f9      	bcc.n	8002d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d28:	4c0a      	ldr	r4, [pc, #40]	; (8002d54 <LoopForever+0x16>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d2c:	e001      	b.n	8002d32 <LoopFillZerobss>

08002d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d30:	3204      	adds	r2, #4

08002d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d34:	d3fb      	bcc.n	8002d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d36:	f003 fe87 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d3a:	f7ff fb3f 	bl	80023bc <main>

08002d3e <LoopForever>:

LoopForever:
    b LoopForever
 8002d3e:	e7fe      	b.n	8002d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d48:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002d4c:	0800c7e4 	.word	0x0800c7e4
  ldr r2, =_sbss
 8002d50:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002d54:	20000de8 	.word	0x20000de8

08002d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d58:	e7fe      	b.n	8002d58 <ADC1_2_IRQHandler>
	...

08002d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_Init+0x3c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <HAL_Init+0x3c>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d72:	2003      	movs	r0, #3
 8002d74:	f000 f962 	bl	800303c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f000 f80f 	bl	8002d9c <HAL_InitTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	e001      	b.n	8002d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d8a:	f7ff fd97 	bl	80028bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_InitTick+0x6c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_InitTick+0x70>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_InitTick+0x6c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f96d 	bl	80030a6 <HAL_SYSTICK_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d809      	bhi.n	8002dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f000 f937 	bl	8003052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_InitTick+0x74>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e007      	b.n	8002dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e004      	b.n	8002dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e001      	b.n	8002dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	2000001c 	.word	0x2000001c
 8002e0c:	20000014 	.word	0x20000014
 8002e10:	20000018 	.word	0x20000018

08002e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x24>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_IncTick+0x24>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	2000001c 	.word	0x2000001c
 8002e38:	20000dd4 	.word	0x20000dd4

08002e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_GetTick+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000dd4 	.word	0x20000dd4

08002e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff ffee 	bl	8002e3c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d005      	beq.n	8002e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_Delay+0x44>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e7a:	bf00      	nop
 8002e7c:	f7ff ffde 	bl	8002e3c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d8f7      	bhi.n	8002e7c <HAL_Delay+0x28>
  {
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000001c 	.word	0x2000001c

08002e9c <__NVIC_SetPriorityGrouping>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_GetPriorityGrouping>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <__NVIC_GetPriorityGrouping+0x18>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 0307 	and.w	r3, r3, #7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_EnableIRQ>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	db0b      	blt.n	8002f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4907      	ldr	r1, [pc, #28]	; (8002f38 <__NVIC_EnableIRQ+0x38>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2001      	movs	r0, #1
 8002f22:	fa00 f202 	lsl.w	r2, r0, r2
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000e100 	.word	0xe000e100

08002f3c <__NVIC_SetPriority>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	db0a      	blt.n	8002f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	490c      	ldr	r1, [pc, #48]	; (8002f88 <__NVIC_SetPriority+0x4c>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f64:	e00a      	b.n	8002f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4908      	ldr	r1, [pc, #32]	; (8002f8c <__NVIC_SetPriority+0x50>)
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	3b04      	subs	r3, #4
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	440b      	add	r3, r1
 8002f7a:	761a      	strb	r2, [r3, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <NVIC_EncodePriority>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f1c3 0307 	rsb	r3, r3, #7
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	bf28      	it	cs
 8002fae:	2304      	movcs	r3, #4
 8002fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d902      	bls.n	8002fc0 <NVIC_EncodePriority+0x30>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3b03      	subs	r3, #3
 8002fbe:	e000      	b.n	8002fc2 <NVIC_EncodePriority+0x32>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43d9      	mvns	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	4313      	orrs	r3, r2
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3724      	adds	r7, #36	; 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <SysTick_Config>:
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003008:	d301      	bcc.n	800300e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <SysTick_Config+0x40>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003016:	210f      	movs	r1, #15
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	f7ff ff8e 	bl	8002f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <SysTick_Config+0x40>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <SysTick_Config+0x40>)
 8003028:	2207      	movs	r2, #7
 800302a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000e010 	.word	0xe000e010

0800303c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff29 	bl	8002e9c <__NVIC_SetPriorityGrouping>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003064:	f7ff ff3e 	bl	8002ee4 <__NVIC_GetPriorityGrouping>
 8003068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	6978      	ldr	r0, [r7, #20]
 8003070:	f7ff ff8e 	bl	8002f90 <NVIC_EncodePriority>
 8003074:	4602      	mov	r2, r0
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff5d 	bl	8002f3c <__NVIC_SetPriority>
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff31 	bl	8002f00 <__NVIC_EnableIRQ>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ffa2 	bl	8002ff8 <SysTick_Config>
 80030b4:	4603      	mov	r3, r0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2204      	movs	r2, #4
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e022      	b.n	800312e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 020e 	bic.w	r2, r2, #14
 80030f6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	f003 021c 	and.w	r2, r3, #28
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f202 	lsl.w	r2, r1, r2
 800311a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d005      	beq.n	800315e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e029      	b.n	80031b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 020e 	bic.w	r2, r2, #14
 800316c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 021c 	and.w	r2, r3, #28
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
    }
  }
  return status;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_FLASH_Program+0xd0>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_FLASH_Program+0x1e>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e053      	b.n	8003282 <HAL_FLASH_Program+0xc6>
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_FLASH_Program+0xd0>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031e4:	f000 f888 	bl	80032f8 <FLASH_WaitForLastOperation>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d143      	bne.n	800327a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_FLASH_Program+0xd0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_FLASH_Program+0xd4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_FLASH_Program+0xd4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_FLASH_Program+0xd4>)
 800320a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003210:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_FLASH_Program+0xd0>)
 8003212:	2202      	movs	r2, #2
 8003214:	771a      	strb	r2, [r3, #28]
 8003216:	e002      	b.n	800321e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_FLASH_Program+0xd0>)
 800321a:	2200      	movs	r2, #0
 800321c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003228:	68b8      	ldr	r0, [r7, #8]
 800322a:	f000 f8bb 	bl	80033a4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800322e:	2301      	movs	r3, #1
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e010      	b.n	8003256 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d002      	beq.n	8003240 <HAL_FLASH_Program+0x84>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d10a      	bne.n	8003256 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	68b8      	ldr	r0, [r7, #8]
 8003246:	f000 f8d3 	bl	80033f0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d102      	bne.n	8003256 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003250:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003254:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003256:	f24c 3050 	movw	r0, #50000	; 0xc350
 800325a:	f000 f84d 	bl	80032f8 <FLASH_WaitForLastOperation>
 800325e:	4603      	mov	r3, r0
 8003260:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_FLASH_Program+0xd4>)
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	4907      	ldr	r1, [pc, #28]	; (8003290 <HAL_FLASH_Program+0xd4>)
 8003272:	4013      	ands	r3, r2
 8003274:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003276:	f000 f9eb 	bl	8003650 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <HAL_FLASH_Program+0xd0>)
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]

  return status;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000020 	.word	0x20000020
 8003290:	40022000 	.word	0x40022000

08003294 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_FLASH_Unlock+0x38>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da0b      	bge.n	80032be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_FLASH_Unlock+0x38>)
 80032a8:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_FLASH_Unlock+0x3c>)
 80032aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_FLASH_Unlock+0x38>)
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_FLASH_Unlock+0x40>)
 80032b0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_FLASH_Unlock+0x38>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da01      	bge.n	80032be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032be:	79fb      	ldrb	r3, [r7, #7]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40022000 	.word	0x40022000
 80032d0:	45670123 	.word	0x45670123
 80032d4:	cdef89ab 	.word	0xcdef89ab

080032d8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_FLASH_Lock+0x1c>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <HAL_FLASH_Lock+0x1c>)
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40022000 	.word	0x40022000

080032f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff fd9c 	bl	8002e3c <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003306:	e00d      	b.n	8003324 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d009      	beq.n	8003324 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003310:	f7ff fd94 	bl	8002e3c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d801      	bhi.n	8003324 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e037      	b.n	8003394 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1eb      	bne.n	8003308 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01e      	beq.n	8003380 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <FLASH_WaitForLastOperation+0xa8>)
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4313      	orrs	r3, r2
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <FLASH_WaitForLastOperation+0xa8>)
 800334c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <FLASH_WaitForLastOperation+0x70>
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003362:	490e      	ldr	r1, [pc, #56]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	618b      	str	r3, [r1, #24]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <FLASH_WaitForLastOperation+0x84>
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800337a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e009      	b.n	8003394 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <FLASH_WaitForLastOperation+0xa4>)
 800338e:	2201      	movs	r2, #1
 8003390:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40022000 	.word	0x40022000
 80033a0:	20000020 	.word	0x20000020

080033a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <FLASH_Program_DoubleWord+0x48>)
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <FLASH_Program_DoubleWord+0x48>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80033c2:	f3bf 8f6f 	isb	sy
}
 80033c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80033c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	000a      	movs	r2, r1
 80033d6:	2300      	movs	r3, #0
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	3104      	adds	r1, #4
 80033dc:	4613      	mov	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40022000 	.word	0x40022000

080033f0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80033fa:	2340      	movs	r3, #64	; 0x40
 80033fc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <FLASH_Program_Fast+0x68>)
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4a13      	ldr	r2, [pc, #76]	; (8003458 <FLASH_Program_Fast+0x68>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	60fb      	str	r3, [r7, #12]
  return(result);
 8003418:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800341a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	3304      	adds	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3304      	adds	r3, #4
 8003432:	617b      	str	r3, [r7, #20]
    row_index--;
 8003434:	7ffb      	ldrb	r3, [r7, #31]
 8003436:	3b01      	subs	r3, #1
 8003438:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ef      	bne.n	8003420 <FLASH_Program_Fast+0x30>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800344c:	bf00      	nop
 800344e:	3724      	adds	r7, #36	; 0x24
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40022000 	.word	0x40022000

0800345c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_FLASHEx_Erase+0x16>
 800346e:	2302      	movs	r3, #2
 8003470:	e087      	b.n	8003582 <HAL_FLASHEx_Erase+0x126>
 8003472:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800347c:	f7ff ff3c 	bl	80032f8 <FLASH_WaitForLastOperation>
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d177      	bne.n	800357a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800348a:	4b40      	ldr	r3, [pc, #256]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800349c:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a38      	ldr	r2, [pc, #224]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 80034b6:	2203      	movs	r2, #3
 80034b8:	771a      	strb	r2, [r3, #28]
 80034ba:	e016      	b.n	80034ea <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 80034be:	2201      	movs	r2, #1
 80034c0:	771a      	strb	r2, [r3, #28]
 80034c2:	e012      	b.n	80034ea <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 80034d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 80034de:	2202      	movs	r2, #2
 80034e0:	771a      	strb	r2, [r3, #28]
 80034e2:	e002      	b.n	80034ea <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d113      	bne.n	800351a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f84c 	bl	8003594 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003500:	f7ff fefa 	bl	80032f8 <FLASH_WaitForLastOperation>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 800350e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	6153      	str	r3, [r2, #20]
 8003518:	e02d      	b.n	8003576 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	e01d      	b.n	8003566 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4619      	mov	r1, r3
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f000 f857 	bl	80035e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003536:	f24c 3050 	movw	r0, #50000	; 0xc350
 800353a:	f7ff fedd 	bl	80032f8 <FLASH_WaitForLastOperation>
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_FLASHEx_Erase+0x134>)
 8003548:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800354c:	f023 0302 	bic.w	r3, r3, #2
 8003550:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	601a      	str	r2, [r3, #0]
          break;
 800355e:	e00a      	b.n	8003576 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3301      	adds	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4413      	add	r3, r2
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d3d9      	bcc.n	800352a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003576:	f000 f86b 	bl	8003650 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <HAL_FLASHEx_Erase+0x130>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000020 	.word	0x20000020
 8003590:	40022000 	.word	0x40022000

08003594 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <FLASH_MassErase+0x4c>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <FLASH_MassErase+0x4c>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <FLASH_MassErase+0x4c>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <FLASH_MassErase+0x4c>)
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <FLASH_MassErase+0x4c>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <FLASH_MassErase+0x4c>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	6153      	str	r3, [r2, #20]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40022000 	.word	0x40022000

080035e4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <FLASH_PageErase+0x68>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <FLASH_PageErase+0x68>)
 80035fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003602:	6153      	str	r3, [r2, #20]
 8003604:	e005      	b.n	8003612 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <FLASH_PageErase+0x68>)
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <FLASH_PageErase+0x68>)
 800360c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003610:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <FLASH_PageErase+0x68>)
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <FLASH_PageErase+0x68>)
 8003624:	4313      	orrs	r3, r2
 8003626:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <FLASH_PageErase+0x68>)
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <FLASH_PageErase+0x68>)
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <FLASH_PageErase+0x68>)
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <FLASH_PageErase+0x68>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	6153      	str	r3, [r2, #20]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40022000 	.word	0x40022000

08003650 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <FLASH_FlushCaches+0x8c>)
 8003658:	7f1b      	ldrb	r3, [r3, #28]
 800365a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d002      	beq.n	8003668 <FLASH_FlushCaches+0x18>
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d117      	bne.n	8003698 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <FLASH_FlushCaches+0x90>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <FLASH_FlushCaches+0x90>)
 800366e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <FLASH_FlushCaches+0x90>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <FLASH_FlushCaches+0x90>)
 800367a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <FLASH_FlushCaches+0x90>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <FLASH_FlushCaches+0x90>)
 8003686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800368a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <FLASH_FlushCaches+0x90>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <FLASH_FlushCaches+0x90>)
 8003692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003696:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d002      	beq.n	80036a4 <FLASH_FlushCaches+0x54>
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d111      	bne.n	80036c8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <FLASH_FlushCaches+0x90>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <FLASH_FlushCaches+0x90>)
 80036aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <FLASH_FlushCaches+0x90>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <FLASH_FlushCaches+0x90>)
 80036b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <FLASH_FlushCaches+0x90>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <FLASH_FlushCaches+0x90>)
 80036c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <FLASH_FlushCaches+0x8c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	771a      	strb	r2, [r3, #28]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000020 	.word	0x20000020
 80036e0:	40022000 	.word	0x40022000

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f2:	e17f      	b.n	80039f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8171 	beq.w	80039ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d005      	beq.n	8003724 <HAL_GPIO_Init+0x40>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d130      	bne.n	8003786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800375a:	2201      	movs	r2, #1
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0201 	and.w	r2, r3, #1
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b03      	cmp	r3, #3
 8003790:	d118      	bne.n	80037c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d017      	beq.n	8003800 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d123      	bne.n	8003854 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	6939      	ldr	r1, [r7, #16]
 8003850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80ac 	beq.w	80039ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <HAL_GPIO_Init+0x330>)
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	4a5e      	ldr	r2, [pc, #376]	; (8003a14 <HAL_GPIO_Init+0x330>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6613      	str	r3, [r2, #96]	; 0x60
 80038a2:	4b5c      	ldr	r3, [pc, #368]	; (8003a14 <HAL_GPIO_Init+0x330>)
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038ae:	4a5a      	ldr	r2, [pc, #360]	; (8003a18 <HAL_GPIO_Init+0x334>)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038d8:	d025      	beq.n	8003926 <HAL_GPIO_Init+0x242>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4f      	ldr	r2, [pc, #316]	; (8003a1c <HAL_GPIO_Init+0x338>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <HAL_GPIO_Init+0x23e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4e      	ldr	r2, [pc, #312]	; (8003a20 <HAL_GPIO_Init+0x33c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d019      	beq.n	800391e <HAL_GPIO_Init+0x23a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4d      	ldr	r2, [pc, #308]	; (8003a24 <HAL_GPIO_Init+0x340>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0x236>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4c      	ldr	r2, [pc, #304]	; (8003a28 <HAL_GPIO_Init+0x344>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00d      	beq.n	8003916 <HAL_GPIO_Init+0x232>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4b      	ldr	r2, [pc, #300]	; (8003a2c <HAL_GPIO_Init+0x348>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x22e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_GPIO_Init+0x34c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_GPIO_Init+0x22a>
 800390a:	2306      	movs	r3, #6
 800390c:	e00c      	b.n	8003928 <HAL_GPIO_Init+0x244>
 800390e:	2307      	movs	r3, #7
 8003910:	e00a      	b.n	8003928 <HAL_GPIO_Init+0x244>
 8003912:	2305      	movs	r3, #5
 8003914:	e008      	b.n	8003928 <HAL_GPIO_Init+0x244>
 8003916:	2304      	movs	r3, #4
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x244>
 800391a:	2303      	movs	r3, #3
 800391c:	e004      	b.n	8003928 <HAL_GPIO_Init+0x244>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_Init+0x244>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_Init+0x244>
 8003926:	2300      	movs	r3, #0
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	f002 0203 	and.w	r2, r2, #3
 800392e:	0092      	lsls	r2, r2, #2
 8003930:	4093      	lsls	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003938:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_GPIO_Init+0x334>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3302      	adds	r3, #2
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_GPIO_Init+0x350>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800396a:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <HAL_GPIO_Init+0x350>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <HAL_GPIO_Init+0x350>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003994:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <HAL_GPIO_Init+0x350>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_GPIO_Init+0x350>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_GPIO_Init+0x350>)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_GPIO_Init+0x350>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <HAL_GPIO_Init+0x350>)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3301      	adds	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f47f ae78 	bne.w	80036f4 <HAL_GPIO_Init+0x10>
  }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000800 	.word	0x48000800
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	48001000 	.word	0x48001000
 8003a2c:	48001400 	.word	0x48001400
 8003a30:	48001800 	.word	0x48001800
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40007000 	.word	0x40007000

08003a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a62:	d130      	bne.n	8003ac6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a70:	d038      	beq.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2232      	movs	r2, #50	; 0x32
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0c9b      	lsrs	r3, r3, #18
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a98:	e002      	b.n	8003aa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	d102      	bne.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f2      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d110      	bne.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e00f      	b.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d007      	beq.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003adc:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40007000 	.word	0x40007000
 8003af8:	20000014 	.word	0x20000014
 8003afc:	431bde83 	.word	0x431bde83

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e3ca      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b12:	4b97      	ldr	r3, [pc, #604]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1c:	4b94      	ldr	r3, [pc, #592]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80e4 	beq.w	8003cfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4a>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	f040 808b 	bne.w	8003c58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 8087 	bne.w	8003c58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b4a:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x62>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e3a2      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_RCC_OscConfig+0x7c>
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b7a:	e005      	b.n	8003b88 <HAL_RCC_OscConfig+0x88>
 8003b7c:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d223      	bcs.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fd55 	bl	8004640 <RCC_SetFlashLatencyFromMSIRange>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e383      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba0:	4b73      	ldr	r3, [pc, #460]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a72      	ldr	r2, [pc, #456]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	f043 0308 	orr.w	r3, r3, #8
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b70      	ldr	r3, [pc, #448]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	496d      	ldr	r1, [pc, #436]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	4968      	ldr	r1, [pc, #416]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
 8003bd2:	e025      	b.n	8003c20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd4:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a65      	ldr	r2, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bda:	f043 0308 	orr.w	r3, r3, #8
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b63      	ldr	r3, [pc, #396]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4960      	ldr	r1, [pc, #384]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	495b      	ldr	r1, [pc, #364]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fd15 	bl	8004640 <RCC_SetFlashLatencyFromMSIRange>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e343      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c20:	f000 fc4a 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b52      	ldr	r3, [pc, #328]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4950      	ldr	r1, [pc, #320]	; (8003d74 <HAL_RCC_OscConfig+0x274>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_RCC_OscConfig+0x278>)
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c40:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <HAL_RCC_OscConfig+0x27c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff f8a9 	bl	8002d9c <HAL_InitTick>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d052      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	e327      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d032      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c60:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a42      	ldr	r2, [pc, #264]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c6c:	f7ff f8e6 	bl	8002e3c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c74:	f7ff f8e2 	bl	8002e3c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e310      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c86:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a36      	ldr	r2, [pc, #216]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4931      	ldr	r1, [pc, #196]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	492c      	ldr	r1, [pc, #176]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	e01a      	b.n	8003cfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cd2:	f7ff f8b3 	bl	8002e3c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cda:	f7ff f8af 	bl	8002e3c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e2dd      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x1da>
 8003cf8:	e000      	b.n	8003cfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d074      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x21a>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d10e      	bne.n	8003d32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d064      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d160      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e2ba      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x24a>
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	e026      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d52:	d115      	bne.n	8003d80 <HAL_RCC_OscConfig+0x280>
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a05      	ldr	r2, [pc, #20]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a02      	ldr	r2, [pc, #8]	; (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	e014      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	0800c2cc 	.word	0x0800c2cc
 8003d78:	20000014 	.word	0x20000014
 8003d7c:	20000018 	.word	0x20000018
 8003d80:	4ba0      	ldr	r3, [pc, #640]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a9f      	ldr	r2, [pc, #636]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b9d      	ldr	r3, [pc, #628]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a9c      	ldr	r2, [pc, #624]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7ff f84c 	bl	8002e3c <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7ff f848 	bl	8002e3c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e276      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	4b92      	ldr	r3, [pc, #584]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x2a8>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7ff f838 	bl	8002e3c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7ff f834 	bl	8002e3c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e262      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2d0>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d060      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x310>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d119      	bne.n	8003e3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d116      	bne.n	8003e3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e10:	4b7c      	ldr	r3, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_OscConfig+0x328>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e23f      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e28:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	4973      	ldr	r1, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e3c:	e040      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d023      	beq.n	8003e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e46:	4b6f      	ldr	r3, [pc, #444]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6e      	ldr	r2, [pc, #440]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fe fff3 	bl	8002e3c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fe ffef 	bl	8002e3c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e21d      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6c:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b62      	ldr	r3, [pc, #392]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	495f      	ldr	r1, [pc, #380]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	e018      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5c      	ldr	r2, [pc, #368]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fe ffcf 	bl	8002e3c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fe ffcb 	bl	8002e3c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1f9      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb4:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d03c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eda:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe ffaa 	bl	8002e3c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eec:	f7fe ffa6 	bl	8002e3c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1d4      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003efe:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ef      	beq.n	8003eec <HAL_RCC_OscConfig+0x3ec>
 8003f0c:	e01b      	b.n	8003f46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0e:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe ff8d 	bl	8002e3c <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fe ff89 	bl	8002e3c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e1b7      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ef      	bne.n	8003f26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80a6 	beq.w	80040a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f64:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	4a26      	ldr	r2, [pc, #152]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f70:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_RCC_OscConfig+0x508>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d118      	bne.n	8003fbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <HAL_RCC_OscConfig+0x508>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_RCC_OscConfig+0x508>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f98:	f7fe ff50 	bl	8002e3c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa0:	f7fe ff4c 	bl	8002e3c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e17a      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCC_OscConfig+0x508>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4d8>
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd6:	e029      	b.n	800402c <HAL_RCC_OscConfig+0x52c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d115      	bne.n	800400c <HAL_RCC_OscConfig+0x50c>
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	4a07      	ldr	r2, [pc, #28]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	4a03      	ldr	r2, [pc, #12]	; (8004004 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x52c>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	40007000 	.word	0x40007000
 800400c:	4b9c      	ldr	r3, [pc, #624]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a9b      	ldr	r2, [pc, #620]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800401c:	4b98      	ldr	r3, [pc, #608]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	4a97      	ldr	r2, [pc, #604]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004024:	f023 0304 	bic.w	r3, r3, #4
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fe ff02 	bl	8002e3c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe fefe 	bl	8002e3c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e12a      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004052:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ed      	beq.n	800403c <HAL_RCC_OscConfig+0x53c>
 8004060:	e015      	b.n	800408e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fe feeb 	bl	8002e3c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fe fee7 	bl	8002e3c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	; 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e113      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004080:	4b7f      	ldr	r3, [pc, #508]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ed      	bne.n	800406a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408e:	7ffb      	ldrb	r3, [r7, #31]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	4a79      	ldr	r2, [pc, #484]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80fe 	beq.w	80042a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	f040 80d0 	bne.w	8004254 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040b4:	4b72      	ldr	r3, [pc, #456]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0203 	and.w	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d130      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	3b01      	subs	r3, #1
 80040d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d127      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d11f      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f4:	2a07      	cmp	r2, #7
 80040f6:	bf14      	ite	ne
 80040f8:	2201      	movne	r2, #1
 80040fa:	2200      	moveq	r2, #0
 80040fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fe:	4293      	cmp	r3, r2
 8004100:	d113      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d109      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d06e      	beq.n	8004208 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d069      	beq.n	8004204 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800413c:	4b50      	ldr	r3, [pc, #320]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0ad      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800414c:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4b      	ldr	r2, [pc, #300]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004158:	f7fe fe70 	bl	8002e3c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fe fe6c 	bl	8002e3c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e09a      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	4b40      	ldr	r3, [pc, #256]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <HAL_RCC_OscConfig+0x784>)
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800418e:	3a01      	subs	r2, #1
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004198:	0212      	lsls	r2, r2, #8
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041a0:	0852      	lsrs	r2, r2, #1
 80041a2:	3a01      	subs	r2, #1
 80041a4:	0552      	lsls	r2, r2, #21
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	0652      	lsls	r2, r2, #25
 80041b2:	4311      	orrs	r1, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b8:	0912      	lsrs	r2, r2, #4
 80041ba:	0452      	lsls	r2, r2, #17
 80041bc:	430a      	orrs	r2, r1
 80041be:	4930      	ldr	r1, [pc, #192]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80041ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041dc:	f7fe fe2e 	bl	8002e3c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe fe2a 	bl	8002e3c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e058      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004202:	e050      	b.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e04f      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d148      	bne.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800422c:	f7fe fe06 	bl	8002e3c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fe fe02 	bl	8002e3c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e030      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x734>
 8004252:	e028      	b.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d023      	beq.n	80042a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a08      	ldr	r2, [pc, #32]	; (8004280 <HAL_RCC_OscConfig+0x780>)
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fe fde9 	bl	8002e3c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	e00c      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fe fde5 	bl	8002e3c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d905      	bls.n	8004288 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e013      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
 8004280:	40021000 	.word	0x40021000
 8004284:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ec      	bne.n	800426e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	4905      	ldr	r1, [pc, #20]	; (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCC_OscConfig+0x7b4>)
 800429c:	4013      	ands	r3, r2
 800429e:	60cb      	str	r3, [r1, #12]
 80042a0:	e001      	b.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	feeefffc 	.word	0xfeeefffc

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0e7      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b75      	ldr	r3, [pc, #468]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b72      	ldr	r3, [pc, #456]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 0207 	bic.w	r2, r3, #7
 80042e2:	4970      	ldr	r1, [pc, #448]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0cf      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	429a      	cmp	r2, r3
 8004316:	d908      	bls.n	800432a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4960      	ldr	r1, [pc, #384]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04c      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b5a      	ldr	r3, [pc, #360]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d121      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0a6      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e09a      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e08e      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437e:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e086      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4943      	ldr	r1, [pc, #268]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fe fd4c 	bl	8002e3c <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe fd48 	bl	8002e3c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e06e      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d208      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	492b      	ldr	r1, [pc, #172]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d210      	bcs.n	800442e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 0207 	bic.w	r2, r3, #7
 8004414:	4923      	ldr	r1, [pc, #140]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d001      	beq.n	800442e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e036      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4918      	ldr	r1, [pc, #96]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4910      	ldr	r1, [pc, #64]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446c:	f000 f824 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	490b      	ldr	r1, [pc, #44]	; (80044ac <HAL_RCC_ClockConfig+0x1f4>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1f8>)
 800448a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1fc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fc83 	bl	8002d9c <HAL_InitTick>
 8004496:	4603      	mov	r3, r0
 8004498:	72fb      	strb	r3, [r7, #11]

  return status;
 800449a:	7afb      	ldrb	r3, [r7, #11]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40021000 	.word	0x40021000
 80044ac:	0800c2cc 	.word	0x0800c2cc
 80044b0:	20000014 	.word	0x20000014
 80044b4:	20000018 	.word	0x20000018

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d0:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d121      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11e      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044ec:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e005      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d102      	bne.n	8004536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e004      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d101      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_RCC_GetSysClockFreq+0x114>)
 800453e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d134      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d003      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0xa6>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d003      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0xac>
 800455c:	e005      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004560:	617b      	str	r3, [r7, #20]
      break;
 8004562:	e005      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004566:	617b      	str	r3, [r7, #20]
      break;
 8004568:	e002      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	617b      	str	r3, [r7, #20]
      break;
 800456e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	fb03 f202 	mul.w	r2, r3, r2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	0e5b      	lsrs	r3, r3, #25
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	3301      	adds	r3, #1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045b0:	69bb      	ldr	r3, [r7, #24]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3724      	adds	r7, #36	; 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800c2e4 	.word	0x0800c2e4
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000014 	.word	0x20000014

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800c2dc 	.word	0x0800c2dc

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004618:	f7ff ffda 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0adb      	lsrs	r3, r3, #11
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4904      	ldr	r1, [pc, #16]	; (800463c <HAL_RCC_GetPCLK2Freq+0x28>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	0800c2dc 	.word	0x0800c2dc

08004640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004658:	f7ff f9ee 	bl	8003a38 <HAL_PWREx_GetVoltageRange>
 800465c:	6178      	str	r0, [r7, #20]
 800465e:	e014      	b.n	800468a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6593      	str	r3, [r2, #88]	; 0x58
 800466c:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004678:	f7ff f9de 	bl	8003a38 <HAL_PWREx_GetVoltageRange>
 800467c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800467e:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004688:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004690:	d10b      	bne.n	80046aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d919      	bls.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2ba0      	cmp	r3, #160	; 0xa0
 800469c:	d902      	bls.n	80046a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800469e:	2302      	movs	r3, #2
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e013      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046a4:	2301      	movs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e010      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d902      	bls.n	80046b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046b0:	2303      	movs	r3, #3
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	e00a      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b80      	cmp	r3, #128	; 0x80
 80046ba:	d102      	bne.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046bc:	2302      	movs	r3, #2
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	e004      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b70      	cmp	r3, #112	; 0x70
 80046c6:	d101      	bne.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046c8:	2301      	movs	r3, #1
 80046ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 0207 	bic.w	r2, r3, #7
 80046d4:	4909      	ldr	r1, [pc, #36]	; (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d001      	beq.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40022000 	.word	0x40022000

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004708:	2300      	movs	r3, #0
 800470a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800470c:	2300      	movs	r3, #0
 800470e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	2b00      	cmp	r3, #0
 800471a:	d041      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004720:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004724:	d02a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004726:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800472a:	d824      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800472c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004730:	d008      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004736:	d81e      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004740:	d010      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004742:	e018      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004744:	4b86      	ldr	r3, [pc, #536]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a85      	ldr	r2, [pc, #532]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004750:	e015      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fabb 	bl	8004cd4 <RCCEx_PLLSAI1_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004762:	e00c      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3320      	adds	r3, #32
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fba6 	bl	8004ebc <RCCEx_PLLSAI2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004774:	e003      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	74fb      	strb	r3, [r7, #19]
      break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800477c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004784:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	4973      	ldr	r1, [pc, #460]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800479a:	e001      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d041      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b4:	d02a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ba:	d824      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c0:	d008      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c6:	d81e      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d0:	d010      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047d2:	e018      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047d4:	4b62      	ldr	r3, [pc, #392]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a61      	ldr	r2, [pc, #388]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e0:	e015      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fa73 	bl	8004cd4 <RCCEx_PLLSAI1_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047f2:	e00c      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3320      	adds	r3, #32
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fb5e 	bl	8004ebc <RCCEx_PLLSAI2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004804:	e003      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	74fb      	strb	r3, [r7, #19]
      break;
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800480c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004814:	4b52      	ldr	r3, [pc, #328]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004822:	494f      	ldr	r1, [pc, #316]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800482a:	e001      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a0 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a40      	ldr	r2, [pc, #256]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
 8004864:	4b3e      	ldr	r3, [pc, #248]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004870:	2301      	movs	r3, #1
 8004872:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004874:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004880:	f7fe fadc 	bl	8002e3c <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fe fad8 	bl	8002e3c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d902      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	74fb      	strb	r3, [r7, #19]
        break;
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d15c      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ae:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01f      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d019      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048f8:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fe fa97 	bl	8002e3c <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004910:	e00b      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fe fa93 	bl	8002e3c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d902      	bls.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	74fb      	strb	r3, [r7, #19]
            break;
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ec      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	4904      	ldr	r1, [pc, #16]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004956:	e009      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
 800495c:	e006      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496c:	7c7b      	ldrb	r3, [r7, #17]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4b9e      	ldr	r3, [pc, #632]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	4a9d      	ldr	r2, [pc, #628]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498a:	4b98      	ldr	r3, [pc, #608]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	4994      	ldr	r1, [pc, #592]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ac:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f023 020c 	bic.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	498c      	ldr	r1, [pc, #560]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ce:	4b87      	ldr	r3, [pc, #540]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	4983      	ldr	r1, [pc, #524]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049f0:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	497b      	ldr	r1, [pc, #492]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a20:	4972      	ldr	r1, [pc, #456]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a34:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	496a      	ldr	r1, [pc, #424]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	4961      	ldr	r1, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a78:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a86:	4959      	ldr	r1, [pc, #356]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a9a:	4b54      	ldr	r3, [pc, #336]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	4950      	ldr	r1, [pc, #320]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004abc:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	4948      	ldr	r1, [pc, #288]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ade:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	493f      	ldr	r1, [pc, #252]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d028      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b00:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0e:	4937      	ldr	r1, [pc, #220]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a31      	ldr	r2, [pc, #196]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
 8004b2c:	e011      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b36:	d10c      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f8c8 	bl	8004cd4 <RCCEx_PLLSAI1_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d028      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b5e:	4b23      	ldr	r3, [pc, #140]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	491f      	ldr	r1, [pc, #124]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b88:	60d3      	str	r3, [r2, #12]
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f899 	bl	8004cd4 <RCCEx_PLLSAI1_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02b      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	4908      	ldr	r1, [pc, #32]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a02      	ldr	r2, [pc, #8]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	e014      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f867 	bl	8004cd4 <RCCEx_PLLSAI1_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02f      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c20:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2e:	4928      	ldr	r1, [pc, #160]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c3e:	d10d      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	2102      	movs	r1, #2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f844 	bl	8004cd4 <RCCEx_PLLSAI1_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d014      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	74bb      	strb	r3, [r7, #18]
 8004c5a:	e011      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3320      	adds	r3, #32
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f925 	bl	8004ebc <RCCEx_PLLSAI2_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9a:	490d      	ldr	r1, [pc, #52]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cae:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cbe:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ce2:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d018      	beq.n	8004d20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cee:	4b72      	ldr	r3, [pc, #456]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0203 	and.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d10d      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
       ||
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d06:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
       ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d047      	beq.n	8004daa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	e044      	b.n	8004daa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d018      	beq.n	8004d5a <RCCEx_PLLSAI1_Config+0x86>
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d825      	bhi.n	8004d78 <RCCEx_PLLSAI1_Config+0xa4>
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <RCCEx_PLLSAI1_Config+0x62>
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d009      	beq.n	8004d48 <RCCEx_PLLSAI1_Config+0x74>
 8004d34:	e020      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d36:	4b60      	ldr	r3, [pc, #384]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d46:	e01a      	b.n	8004d7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d48:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d58:	e013      	b.n	8004d82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d5a:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d66:	4b54      	ldr	r3, [pc, #336]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d76:	e006      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e004      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	430b      	orrs	r3, r1
 8004da4:	4944      	ldr	r1, [pc, #272]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d17d      	bne.n	8004eac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004db0:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a40      	ldr	r2, [pc, #256]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbc:	f7fe f83e 	bl	8002e3c <HAL_GetTick>
 8004dc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dc2:	e009      	b.n	8004dd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dc4:	f7fe f83a 	bl	8002e3c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d902      	bls.n	8004dd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004dd6:	e005      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dd8:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ef      	bne.n	8004dc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d160      	bne.n	8004eac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d111      	bne.n	8004e14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	0912      	lsrs	r2, r2, #4
 8004e08:	0452      	lsls	r2, r2, #17
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	492a      	ldr	r1, [pc, #168]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	610b      	str	r3, [r1, #16]
 8004e12:	e027      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d112      	bne.n	8004e40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1a:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	0211      	lsls	r1, r2, #8
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6912      	ldr	r2, [r2, #16]
 8004e30:	0852      	lsrs	r2, r2, #1
 8004e32:	3a01      	subs	r2, #1
 8004e34:	0552      	lsls	r2, r2, #21
 8004e36:	430a      	orrs	r2, r1
 8004e38:	491f      	ldr	r1, [pc, #124]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
 8004e3e:	e011      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	0211      	lsls	r1, r2, #8
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6952      	ldr	r2, [r2, #20]
 8004e56:	0852      	lsrs	r2, r2, #1
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	0652      	lsls	r2, r2, #25
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fd ffe4 	bl	8002e3c <HAL_GetTick>
 8004e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e76:	e009      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e78:	f7fd ffe0 	bl	8002e3c <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d902      	bls.n	8004e8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	73fb      	strb	r3, [r7, #15]
          break;
 8004e8a:	e005      	b.n	8004e98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ef      	beq.n	8004e78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000

08004ebc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eca:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d018      	beq.n	8004f08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ed6:	4b67      	ldr	r3, [pc, #412]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0203 	and.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d10d      	bne.n	8004f02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eee:	4b61      	ldr	r3, [pc, #388]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
       ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d047      	beq.n	8004f92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	e044      	b.n	8004f92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d018      	beq.n	8004f42 <RCCEx_PLLSAI2_Config+0x86>
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d825      	bhi.n	8004f60 <RCCEx_PLLSAI2_Config+0xa4>
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d002      	beq.n	8004f1e <RCCEx_PLLSAI2_Config+0x62>
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d009      	beq.n	8004f30 <RCCEx_PLLSAI2_Config+0x74>
 8004f1c:	e020      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f1e:	4b55      	ldr	r3, [pc, #340]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11d      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2e:	e01a      	b.n	8004f66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f30:	4b50      	ldr	r3, [pc, #320]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d116      	bne.n	8004f6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f40:	e013      	b.n	8004f6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f42:	4b4c      	ldr	r3, [pc, #304]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f4e:	4b49      	ldr	r3, [pc, #292]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f5e:	e006      	b.n	8004f6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e004      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f66:	bf00      	nop
 8004f68:	e002      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e000      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6819      	ldr	r1, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	4939      	ldr	r1, [pc, #228]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d167      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f98:	4b36      	ldr	r3, [pc, #216]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a35      	ldr	r2, [pc, #212]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa4:	f7fd ff4a 	bl	8002e3c <HAL_GetTick>
 8004fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004faa:	e009      	b.n	8004fc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fac:	f7fd ff46 	bl	8002e3c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d902      	bls.n	8004fc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fbe:	e005      	b.n	8004fcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fc0:	4b2c      	ldr	r3, [pc, #176]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ef      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d14a      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d111      	bne.n	8004ffc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fd8:	4b26      	ldr	r3, [pc, #152]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6892      	ldr	r2, [r2, #8]
 8004fe8:	0211      	lsls	r1, r2, #8
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	0912      	lsrs	r2, r2, #4
 8004ff0:	0452      	lsls	r2, r2, #17
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	491f      	ldr	r1, [pc, #124]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	614b      	str	r3, [r1, #20]
 8004ffa:	e011      	b.n	8005020 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6892      	ldr	r2, [r2, #8]
 800500c:	0211      	lsls	r1, r2, #8
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6912      	ldr	r2, [r2, #16]
 8005012:	0852      	lsrs	r2, r2, #1
 8005014:	3a01      	subs	r2, #1
 8005016:	0652      	lsls	r2, r2, #25
 8005018:	430a      	orrs	r2, r1
 800501a:	4916      	ldr	r1, [pc, #88]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501c:	4313      	orrs	r3, r2
 800501e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005020:	4b14      	ldr	r3, [pc, #80]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fd ff06 	bl	8002e3c <HAL_GetTick>
 8005030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005032:	e009      	b.n	8005048 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005034:	f7fd ff02 	bl	8002e3c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	73fb      	strb	r3, [r7, #15]
          break;
 8005046:	e005      	b.n	8005054 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005048:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4904      	ldr	r1, [pc, #16]	; (8005074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005064:	4313      	orrs	r3, r2
 8005066:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000

08005078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e040      	b.n	800510c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fc32 	bl	8002904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	; 0x24
 80050a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fcc4 	bl	8005a44 <UART_SetConfig>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e022      	b.n	800510c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 ff70 	bl	8005fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fff7 	bl	80060f8 <UART_CheckIdleState>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005128:	2b20      	cmp	r3, #32
 800512a:	f040 80bf 	bne.w	80052ac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Receive+0x26>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0b7      	b.n	80052ae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UART_Receive+0x38>
 8005148:	2302      	movs	r3, #2
 800514a:	e0b0      	b.n	80052ae <HAL_UART_Receive+0x19a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2222      	movs	r2, #34	; 0x22
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005168:	f7fd fe68 	bl	8002e3c <HAL_GetTick>
 800516c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	d10e      	bne.n	80051a6 <HAL_UART_Receive+0x92>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <HAL_UART_Receive+0x88>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800519a:	e02d      	b.n	80051f8 <HAL_UART_Receive+0xe4>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	22ff      	movs	r2, #255	; 0xff
 80051a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a4:	e028      	b.n	80051f8 <HAL_UART_Receive+0xe4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <HAL_UART_Receive+0xb6>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Receive+0xac>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051be:	e01b      	b.n	80051f8 <HAL_UART_Receive+0xe4>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	227f      	movs	r2, #127	; 0x7f
 80051c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c8:	e016      	b.n	80051f8 <HAL_UART_Receive+0xe4>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051d2:	d10d      	bne.n	80051f0 <HAL_UART_Receive+0xdc>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_UART_Receive+0xd2>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	227f      	movs	r2, #127	; 0x7f
 80051e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e4:	e008      	b.n	80051f8 <HAL_UART_Receive+0xe4>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	223f      	movs	r2, #63	; 0x3f
 80051ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ee:	e003      	b.n	80051f8 <HAL_UART_Receive+0xe4>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005208:	d108      	bne.n	800521c <HAL_UART_Receive+0x108>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e003      	b.n	8005224 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800522c:	e033      	b.n	8005296 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2200      	movs	r2, #0
 8005236:	2120      	movs	r1, #32
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 ffa6 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e032      	b.n	80052ae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10c      	bne.n	8005268 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005254:	b29a      	uxth	r2, r3
 8005256:	8a7b      	ldrh	r3, [r7, #18]
 8005258:	4013      	ands	r3, r2
 800525a:	b29a      	uxth	r2, r3
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3302      	adds	r3, #2
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e00d      	b.n	8005284 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800526e:	b29b      	uxth	r3, r3
 8005270:	b2da      	uxtb	r2, r3
 8005272:	8a7b      	ldrh	r3, [r7, #18]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4013      	ands	r3, r2
 8005278:	b2da      	uxtb	r2, r3
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1c5      	bne.n	800522e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b08b      	sub	sp, #44	; 0x2c
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d156      	bne.n	800537c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_UART_Transmit_IT+0x22>
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e04f      	b.n	800537e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_UART_Transmit_IT+0x34>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e048      	b.n	800537e <HAL_UART_Transmit_IT+0xc6>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2221      	movs	r2, #33	; 0x21
 800531c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005326:	d107      	bne.n	8005338 <HAL_UART_Transmit_IT+0x80>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a16      	ldr	r2, [pc, #88]	; (800538c <HAL_UART_Transmit_IT+0xd4>)
 8005334:	669a      	str	r2, [r3, #104]	; 0x68
 8005336:	e002      	b.n	800533e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_UART_Transmit_IT+0xd8>)
 800533c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	6a3a      	ldr	r2, [r7, #32]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	61bb      	str	r3, [r7, #24]
   return(result);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800537c:	2302      	movs	r3, #2
  }
}
 800537e:	4618      	mov	r0, r3
 8005380:	372c      	adds	r7, #44	; 0x2c
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	08006653 	.word	0x08006653
 8005390:	0800659b 	.word	0x0800659b

08005394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d142      	bne.n	8005430 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_UART_Receive_IT+0x22>
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e03b      	b.n	8005432 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Receive_IT+0x34>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e034      	b.n	8005432 <HAL_UART_Receive_IT+0x9e>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_UART_Receive_IT+0xa8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01f      	beq.n	8005420 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d018      	beq.n	8005420 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	613b      	str	r3, [r7, #16]
   return(result);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	623b      	str	r3, [r7, #32]
 800540e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	69f9      	ldr	r1, [r7, #28]
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	61bb      	str	r3, [r7, #24]
   return(result);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	461a      	mov	r2, r3
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 ff74 	bl	8006314 <UART_Start_Receive_IT>
 800542c:	4603      	mov	r3, r0
 800542e:	e000      	b.n	8005432 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40008000 	.word	0x40008000

08005440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b0ba      	sub	sp, #232	; 0xe8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800546a:	f640 030f 	movw	r3, #2063	; 0x80f
 800546e:	4013      	ands	r3, r2
 8005470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d115      	bne.n	80054a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00f      	beq.n	80054a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 82a6 	beq.w	80059ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
      }
      return;
 80054a6:	e2a0      	b.n	80059ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80054a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8117 	beq.w	80056e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054c2:	4b85      	ldr	r3, [pc, #532]	; (80056d8 <HAL_UART_IRQHandler+0x298>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 810a 	beq.w	80056e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d011      	beq.n	80054fc <HAL_UART_IRQHandler+0xbc>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	f043 0201 	orr.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d011      	beq.n	800552c <HAL_UART_IRQHandler+0xec>
 8005508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2202      	movs	r2, #2
 800551a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	f043 0204 	orr.w	r2, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800552c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d011      	beq.n	800555c <HAL_UART_IRQHandler+0x11c>
 8005538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2204      	movs	r2, #4
 800554a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800555c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d017      	beq.n	8005598 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005578:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2208      	movs	r2, #8
 8005586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558e:	f043 0208 	orr.w	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d012      	beq.n	80055ca <HAL_UART_IRQHandler+0x18a>
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 820c 	beq.w	80059ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d005      	beq.n	8005622 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800561a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04f      	beq.n	80056c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 ff40 	bl	80064a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d141      	bne.n	80056ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800564c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800566e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800567a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1d9      	bne.n	8005636 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	2b00      	cmp	r3, #0
 8005688:	d013      	beq.n	80056b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a13      	ldr	r2, [pc, #76]	; (80056dc <HAL_UART_IRQHandler+0x29c>)
 8005690:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd fd4f 	bl	800313a <HAL_DMA_Abort_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	e00f      	b.n	80056d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f9b0 	bl	8005a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	e00b      	b.n	80056d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9ac 	bl	8005a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	e007      	b.n	80056d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9a8 	bl	8005a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80056d0:	e18d      	b.n	80059ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d2:	bf00      	nop
    return;
 80056d4:	e18b      	b.n	80059ee <HAL_UART_IRQHandler+0x5ae>
 80056d6:	bf00      	nop
 80056d8:	04000120 	.word	0x04000120
 80056dc:	0800656f 	.word	0x0800656f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 8146 	bne.w	8005976 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 813f 	beq.w	8005976 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8138 	beq.w	8005976 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2210      	movs	r2, #16
 800570c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	f040 80b4 	bne.w	8005886 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800572a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 815f 	beq.w	80059f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800573a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800573e:	429a      	cmp	r2, r3
 8005740:	f080 8157 	bcs.w	80059f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800574a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 8085 	bne.w	800586a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800577c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800578a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800578e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005796:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1da      	bne.n	8005760 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057bc:	f023 0301 	bic.w	r3, r3, #1
 80057c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e1      	bne.n	80057aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800580a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800580c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e3      	bne.n	80057e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584c:	65bb      	str	r3, [r7, #88]	; 0x58
 800584e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e4      	bne.n	800582a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd fc2a 	bl	80030be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005876:	b29b      	uxth	r3, r3
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8d4 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005884:	e0b5      	b.n	80059f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005892:	b29b      	uxth	r3, r3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a7 	beq.w	80059f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80058a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80a2 	beq.w	80059f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058d4:	647b      	str	r3, [r7, #68]	; 0x44
 80058d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e4      	bne.n	80058b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	623b      	str	r3, [r7, #32]
   return(result);
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800590c:	633a      	str	r2, [r7, #48]	; 0x30
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e3      	bne.n	80058e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	69b9      	ldr	r1, [r7, #24]
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	617b      	str	r3, [r7, #20]
   return(result);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e4      	bne.n	8005932 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f85c 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005974:	e03f      	b.n	80059f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00e      	beq.n	80059a0 <HAL_UART_IRQHandler+0x560>
 8005982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f844 	bl	8006a26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800599e:	e02d      	b.n	80059fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00e      	beq.n	80059ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01c      	beq.n	80059fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
    }
    return;
 80059c8:	e017      	b.n	80059fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d012      	beq.n	80059fc <HAL_UART_IRQHandler+0x5bc>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00c      	beq.n	80059fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fe95 	bl	8006712 <UART_EndTransmit_IT>
    return;
 80059e8:	e008      	b.n	80059fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80059ea:	bf00      	nop
 80059ec:	e006      	b.n	80059fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80059ee:	bf00      	nop
 80059f0:	e004      	b.n	80059fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80059f2:	bf00      	nop
 80059f4:	e002      	b.n	80059fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80059f6:	bf00      	nop
 80059f8:	e000      	b.n	80059fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80059fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80059fc:	37e8      	adds	r7, #232	; 0xe8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b08a      	sub	sp, #40	; 0x28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4ba4      	ldr	r3, [pc, #656]	; (8005d04 <UART_SetConfig+0x2c0>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a99      	ldr	r2, [pc, #612]	; (8005d08 <UART_SetConfig+0x2c4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aac:	4313      	orrs	r3, r2
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a90      	ldr	r2, [pc, #576]	; (8005d0c <UART_SetConfig+0x2c8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d126      	bne.n	8005b1c <UART_SetConfig+0xd8>
 8005ace:	4b90      	ldr	r3, [pc, #576]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d81b      	bhi.n	8005b14 <UART_SetConfig+0xd0>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0xa0>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afa:	e116      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b02:	e112      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0a:	e10e      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b12:	e10a      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1a:	e106      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7c      	ldr	r2, [pc, #496]	; (8005d14 <UART_SetConfig+0x2d0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d138      	bne.n	8005b98 <UART_SetConfig+0x154>
 8005b26:	4b7a      	ldr	r3, [pc, #488]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d82d      	bhi.n	8005b90 <UART_SetConfig+0x14c>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0xf8>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005b91 	.word	0x08005b91
 8005b48:	08005b91 	.word	0x08005b91
 8005b4c:	08005b81 	.word	0x08005b81
 8005b50:	08005b91 	.word	0x08005b91
 8005b54:	08005b91 	.word	0x08005b91
 8005b58:	08005b91 	.word	0x08005b91
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b91 	.word	0x08005b91
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e0d8      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e0d4      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e0d0      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8e:	e0cc      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b96:	e0c8      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5e      	ldr	r2, [pc, #376]	; (8005d18 <UART_SetConfig+0x2d4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d125      	bne.n	8005bee <UART_SetConfig+0x1aa>
 8005ba2:	4b5b      	ldr	r3, [pc, #364]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d016      	beq.n	8005bde <UART_SetConfig+0x19a>
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d818      	bhi.n	8005be6 <UART_SetConfig+0x1a2>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d00a      	beq.n	8005bce <UART_SetConfig+0x18a>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d814      	bhi.n	8005be6 <UART_SetConfig+0x1a2>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <UART_SetConfig+0x182>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d008      	beq.n	8005bd6 <UART_SetConfig+0x192>
 8005bc4:	e00f      	b.n	8005be6 <UART_SetConfig+0x1a2>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bcc:	e0ad      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd4:	e0a9      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bdc:	e0a5      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005bde:	2308      	movs	r3, #8
 8005be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be4:	e0a1      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005be6:	2310      	movs	r3, #16
 8005be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bec:	e09d      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4a      	ldr	r2, [pc, #296]	; (8005d1c <UART_SetConfig+0x2d8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d125      	bne.n	8005c44 <UART_SetConfig+0x200>
 8005bf8:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c02:	2bc0      	cmp	r3, #192	; 0xc0
 8005c04:	d016      	beq.n	8005c34 <UART_SetConfig+0x1f0>
 8005c06:	2bc0      	cmp	r3, #192	; 0xc0
 8005c08:	d818      	bhi.n	8005c3c <UART_SetConfig+0x1f8>
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d00a      	beq.n	8005c24 <UART_SetConfig+0x1e0>
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x1f8>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <UART_SetConfig+0x1d8>
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x1e8>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x1f8>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c22:	e082      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2a:	e07e      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c32:	e07a      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3a:	e076      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c42:	e072      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a35      	ldr	r2, [pc, #212]	; (8005d20 <UART_SetConfig+0x2dc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d12a      	bne.n	8005ca4 <UART_SetConfig+0x260>
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x250>
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x258>
 8005c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x240>
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x258>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x238>
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x248>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x258>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c82:	e052      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8a:	e04e      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e04a      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e046      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca2:	e042      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <UART_SetConfig+0x2c4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d13a      	bne.n	8005d24 <UART_SetConfig+0x2e0>
 8005cae:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cbc:	d01a      	beq.n	8005cf4 <UART_SetConfig+0x2b0>
 8005cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc2:	d81b      	bhi.n	8005cfc <UART_SetConfig+0x2b8>
 8005cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc8:	d00c      	beq.n	8005ce4 <UART_SetConfig+0x2a0>
 8005cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cce:	d815      	bhi.n	8005cfc <UART_SetConfig+0x2b8>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <UART_SetConfig+0x298>
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	d008      	beq.n	8005cec <UART_SetConfig+0x2a8>
 8005cda:	e00f      	b.n	8005cfc <UART_SetConfig+0x2b8>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e022      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e01e      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e01a      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e016      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e012      	b.n	8005d2a <UART_SetConfig+0x2e6>
 8005d04:	efff69f3 	.word	0xefff69f3
 8005d08:	40008000 	.word	0x40008000
 8005d0c:	40013800 	.word	0x40013800
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40004400 	.word	0x40004400
 8005d18:	40004800 	.word	0x40004800
 8005d1c:	40004c00 	.word	0x40004c00
 8005d20:	40005000 	.word	0x40005000
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a9f      	ldr	r2, [pc, #636]	; (8005fac <UART_SetConfig+0x568>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d17a      	bne.n	8005e2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d824      	bhi.n	8005d86 <UART_SetConfig+0x342>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x300>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d87 	.word	0x08005d87
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d87 	.word	0x08005d87
 8005d54:	08005d77 	.word	0x08005d77
 8005d58:	08005d87 	.word	0x08005d87
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d87 	.word	0x08005d87
 8005d64:	08005d7f 	.word	0x08005d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7fe fc3e 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005d6c:	61f8      	str	r0, [r7, #28]
        break;
 8005d6e:	e010      	b.n	8005d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d70:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <UART_SetConfig+0x56c>)
 8005d72:	61fb      	str	r3, [r7, #28]
        break;
 8005d74:	e00d      	b.n	8005d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d76:	f7fe fb9f 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8005d7a:	61f8      	str	r0, [r7, #28]
        break;
 8005d7c:	e009      	b.n	8005d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d82:	61fb      	str	r3, [r7, #28]
        break;
 8005d84:	e005      	b.n	8005d92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80fb 	beq.w	8005f90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d305      	bcc.n	8005db6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d903      	bls.n	8005dbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dbc:	e0e8      	b.n	8005f90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	461c      	mov	r4, r3
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	022b      	lsls	r3, r5, #8
 8005dd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005dd4:	0222      	lsls	r2, r4, #8
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	6849      	ldr	r1, [r1, #4]
 8005dda:	0849      	lsrs	r1, r1, #1
 8005ddc:	2000      	movs	r0, #0
 8005dde:	4688      	mov	r8, r1
 8005de0:	4681      	mov	r9, r0
 8005de2:	eb12 0a08 	adds.w	sl, r2, r8
 8005de6:	eb43 0b09 	adc.w	fp, r3, r9
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df8:	4650      	mov	r0, sl
 8005dfa:	4659      	mov	r1, fp
 8005dfc:	f7fa ff44 	bl	8000c88 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4613      	mov	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0e:	d308      	bcc.n	8005e22 <UART_SetConfig+0x3de>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e16:	d204      	bcs.n	8005e22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	e0b6      	b.n	8005f90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e28:	e0b2      	b.n	8005f90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e32:	d15e      	bne.n	8005ef2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d828      	bhi.n	8005e8e <UART_SetConfig+0x44a>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x400>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	08005e8f 	.word	0x08005e8f
 8005e54:	08005e7f 	.word	0x08005e7f
 8005e58:	08005e8f 	.word	0x08005e8f
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005e8f 	.word	0x08005e8f
 8005e64:	08005e87 	.word	0x08005e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fbbe 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	61f8      	str	r0, [r7, #28]
        break;
 8005e6e:	e014      	b.n	8005e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e70:	f7fe fbd0 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8005e74:	61f8      	str	r0, [r7, #28]
        break;
 8005e76:	e010      	b.n	8005e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e78:	4b4d      	ldr	r3, [pc, #308]	; (8005fb0 <UART_SetConfig+0x56c>)
 8005e7a:	61fb      	str	r3, [r7, #28]
        break;
 8005e7c:	e00d      	b.n	8005e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7e:	f7fe fb1b 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8005e82:	61f8      	str	r0, [r7, #28]
        break;
 8005e84:	e009      	b.n	8005e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8a:	61fb      	str	r3, [r7, #28]
        break;
 8005e8c:	e005      	b.n	8005e9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d077      	beq.n	8005f90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	005a      	lsls	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	441a      	add	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b0f      	cmp	r3, #15
 8005eba:	d916      	bls.n	8005eea <UART_SetConfig+0x4a6>
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d212      	bcs.n	8005eea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f023 030f 	bic.w	r3, r3, #15
 8005ecc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	8afb      	ldrh	r3, [r7, #22]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	8afa      	ldrh	r2, [r7, #22]
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	e052      	b.n	8005f90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ef0:	e04e      	b.n	8005f90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d827      	bhi.n	8005f4a <UART_SetConfig+0x506>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <UART_SetConfig+0x4bc>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	08005f4b 	.word	0x08005f4b
 8005f10:	08005f3b 	.word	0x08005f3b
 8005f14:	08005f4b 	.word	0x08005f4b
 8005f18:	08005f4b 	.word	0x08005f4b
 8005f1c:	08005f4b 	.word	0x08005f4b
 8005f20:	08005f43 	.word	0x08005f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe fb60 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005f28:	61f8      	str	r0, [r7, #28]
        break;
 8005f2a:	e014      	b.n	8005f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2c:	f7fe fb72 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8005f30:	61f8      	str	r0, [r7, #28]
        break;
 8005f32:	e010      	b.n	8005f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <UART_SetConfig+0x56c>)
 8005f36:	61fb      	str	r3, [r7, #28]
        break;
 8005f38:	e00d      	b.n	8005f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3a:	f7fe fabd 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8005f3e:	61f8      	str	r0, [r7, #28]
        break;
 8005f40:	e009      	b.n	8005f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f46:	61fb      	str	r3, [r7, #28]
        break;
 8005f48:	e005      	b.n	8005f56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f54:	bf00      	nop
    }

    if (pclk != 0U)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d019      	beq.n	8005f90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	085a      	lsrs	r2, r3, #1
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d909      	bls.n	8005f8a <UART_SetConfig+0x546>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d205      	bcs.n	8005f8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60da      	str	r2, [r3, #12]
 8005f88:	e002      	b.n	8005f90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	; 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005faa:	bf00      	nop
 8005fac:	40008000 	.word	0x40008000
 8005fb0:	00f42400 	.word	0x00f42400

08005fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01a      	beq.n	80060ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b2:	d10a      	bne.n	80060ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
  }
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006108:	f7fc fe98 	bl	8002e3c <HAL_GetTick>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b08      	cmp	r3, #8
 800611a:	d10e      	bne.n	800613a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800611c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f82d 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e023      	b.n	8006182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d10e      	bne.n	8006166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f817 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e00d      	b.n	8006182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b09c      	sub	sp, #112	; 0x70
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	e0a5      	b.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	f000 80a1 	beq.w	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fc fe49 	bl	8002e3c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <UART_WaitOnFlagUntilTimeout+0x32>
 80061b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d13e      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061d0:	667b      	str	r3, [r7, #100]	; 0x64
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e6      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	663b      	str	r3, [r7, #96]	; 0x60
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800620e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800621c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e067      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d04f      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {

    	  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006256:	d147      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006260:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
 8006282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	613b      	str	r3, [r7, #16]
   return(result);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062b4:	623a      	str	r2, [r7, #32]
 80062b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e010      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4013      	ands	r3, r2
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	429a      	cmp	r2, r3
 8006304:	f43f af4a 	beq.w	800619c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3770      	adds	r7, #112	; 0x70
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006314:	b480      	push	{r7}
 8006316:	b097      	sub	sp, #92	; 0x5c
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d10e      	bne.n	8006366 <UART_Start_Receive_IT+0x52>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <UART_Start_Receive_IT+0x48>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800635a:	e02d      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006364:	e028      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <UART_Start_Receive_IT+0x76>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <UART_Start_Receive_IT+0x6c>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	22ff      	movs	r2, #255	; 0xff
 800637a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800637e:	e01b      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	227f      	movs	r2, #127	; 0x7f
 8006384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006388:	e016      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006392:	d10d      	bne.n	80063b0 <UART_Start_Receive_IT+0x9c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <UART_Start_Receive_IT+0x92>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	227f      	movs	r2, #127	; 0x7f
 80063a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a4:	e008      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	223f      	movs	r2, #63	; 0x3f
 80063aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ae:	e003      	b.n	80063b8 <UART_Start_Receive_IT+0xa4>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2222      	movs	r2, #34	; 0x22
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	657b      	str	r3, [r7, #84]	; 0x54
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e5      	bne.n	80063c6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d107      	bne.n	8006414 <UART_Start_Receive_IT+0x100>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <UART_Start_Receive_IT+0x18c>)
 8006410:	665a      	str	r2, [r3, #100]	; 0x64
 8006412:	e002      	b.n	800641a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <UART_Start_Receive_IT+0x190>)
 8006418:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d019      	beq.n	800645e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800643e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_Start_Receive_IT+0x116>
 800645c:	e018      	b.n	8006490 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f043 0320 	orr.w	r3, r3, #32
 8006472:	653b      	str	r3, [r7, #80]	; 0x50
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	61bb      	str	r3, [r7, #24]
   return(result);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	375c      	adds	r7, #92	; 0x5c
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	080068c7 	.word	0x080068c7
 80064a4:	08006767 	.word	0x08006767

080064a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b095      	sub	sp, #84	; 0x54
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ce:	643b      	str	r3, [r7, #64]	; 0x40
 80064d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e5      	bne.n	80064e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651a:	2b01      	cmp	r3, #1
 800651c:	d118      	bne.n	8006550 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	60bb      	str	r3, [r7, #8]
   return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	647b      	str	r3, [r7, #68]	; 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006562:	bf00      	nop
 8006564:	3754      	adds	r7, #84	; 0x54
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff fa43 	bl	8005a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800659a:	b480      	push	{r7}
 800659c:	b08f      	sub	sp, #60	; 0x3c
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a6:	2b21      	cmp	r3, #33	; 0x21
 80065a8:	d14d      	bne.n	8006646 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d132      	bne.n	800661c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e6      	bne.n	80065b6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	61bb      	str	r3, [r7, #24]
 8006608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6979      	ldr	r1, [r7, #20]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	613b      	str	r3, [r7, #16]
   return(result);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e6      	bne.n	80065e8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800661a:	e014      	b.n	8006646 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	b292      	uxth	r2, r2
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006646:	bf00      	nop
 8006648:	373c      	adds	r7, #60	; 0x3c
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006652:	b480      	push	{r7}
 8006654:	b091      	sub	sp, #68	; 0x44
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800665e:	2b21      	cmp	r3, #33	; 0x21
 8006660:	d151      	bne.n	8006706 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d132      	bne.n	80066d4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	623b      	str	r3, [r7, #32]
   return(result);
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
 800668e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	69b9      	ldr	r1, [r7, #24]
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	617b      	str	r3, [r7, #20]
   return(result);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e6      	bne.n	80066a0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80066d2:	e018      	b.n	8006706 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	881a      	ldrh	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e6:	b292      	uxth	r2, r2
 80066e8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	1c9a      	adds	r2, r3, #2
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006706:	bf00      	nop
 8006708:	3744      	adds	r7, #68	; 0x44
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	60bb      	str	r3, [r7, #8]
   return(result);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6979      	ldr	r1, [r7, #20]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	613b      	str	r3, [r7, #16]
   return(result);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff f953 	bl	8005a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800675e:	bf00      	nop
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b096      	sub	sp, #88	; 0x58
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006774:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800677c:	2b22      	cmp	r3, #34	; 0x22
 800677e:	f040 8094 	bne.w	80068aa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006788:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800678c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006790:	b2d9      	uxtb	r1, r3
 8006792:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006796:	b2da      	uxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	400a      	ands	r2, r1
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d179      	bne.n	80068be <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067de:	653b      	str	r3, [r7, #80]	; 0x50
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e8:	647b      	str	r3, [r7, #68]	; 0x44
 80067ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	623b      	str	r3, [r7, #32]
   return(result);
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800681c:	633a      	str	r2, [r7, #48]	; 0x30
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e5      	bne.n	80067fc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006840:	2b01      	cmp	r3, #1
 8006842:	d12e      	bne.n	80068a2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60fb      	str	r3, [r7, #12]
   return(result);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	69b9      	ldr	r1, [r7, #24]
 800686e:	69fa      	ldr	r2, [r7, #28]
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	617b      	str	r3, [r7, #20]
   return(result);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e6      	bne.n	800684a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d103      	bne.n	8006892 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2210      	movs	r2, #16
 8006890:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff f8c6 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068a0:	e00d      	b.n	80068be <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb f9f2 	bl	8001c8c <HAL_UART_RxCpltCallback>
}
 80068a8:	e009      	b.n	80068be <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	8b1b      	ldrh	r3, [r3, #24]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0208 	orr.w	r2, r2, #8
 80068ba:	b292      	uxth	r2, r2
 80068bc:	831a      	strh	r2, [r3, #24]
}
 80068be:	bf00      	nop
 80068c0:	3758      	adds	r7, #88	; 0x58
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b096      	sub	sp, #88	; 0x58
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068dc:	2b22      	cmp	r3, #34	; 0x22
 80068de:	f040 8094 	bne.w	8006a0a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80068f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80068f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068fa:	4013      	ands	r3, r2
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006900:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	1c9a      	adds	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d179      	bne.n	8006a1e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006948:	643b      	str	r3, [r7, #64]	; 0x40
 800694a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800694e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	61fb      	str	r3, [r7, #28]
   return(result);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e5      	bne.n	800695c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d12e      	bne.n	8006a02 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	647b      	str	r3, [r7, #68]	; 0x44
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6979      	ldr	r1, [r7, #20]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	613b      	str	r3, [r7, #16]
   return(result);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e6      	bne.n	80069aa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d103      	bne.n	80069f2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2210      	movs	r2, #16
 80069f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff f816 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a00:	e00d      	b.n	8006a1e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fb f942 	bl	8001c8c <HAL_UART_RxCpltCallback>
}
 8006a08:	e009      	b.n	8006a1e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	8b1b      	ldrh	r3, [r3, #24]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0208 	orr.w	r2, r2, #8
 8006a1a:	b292      	uxth	r2, r2
 8006a1c:	831a      	strh	r2, [r3, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	3758      	adds	r7, #88	; 0x58
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <__errno>:
 8006a3c:	4b01      	ldr	r3, [pc, #4]	; (8006a44 <__errno+0x8>)
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000040 	.word	0x20000040

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	4d0d      	ldr	r5, [pc, #52]	; (8006a80 <__libc_init_array+0x38>)
 8006a4c:	4c0d      	ldr	r4, [pc, #52]	; (8006a84 <__libc_init_array+0x3c>)
 8006a4e:	1b64      	subs	r4, r4, r5
 8006a50:	10a4      	asrs	r4, r4, #2
 8006a52:	2600      	movs	r6, #0
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	4d0b      	ldr	r5, [pc, #44]	; (8006a88 <__libc_init_array+0x40>)
 8006a5a:	4c0c      	ldr	r4, [pc, #48]	; (8006a8c <__libc_init_array+0x44>)
 8006a5c:	f005 f96e 	bl	800bd3c <_init>
 8006a60:	1b64      	subs	r4, r4, r5
 8006a62:	10a4      	asrs	r4, r4, #2
 8006a64:	2600      	movs	r6, #0
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	0800c7dc 	.word	0x0800c7dc
 8006a84:	0800c7dc 	.word	0x0800c7dc
 8006a88:	0800c7dc 	.word	0x0800c7dc
 8006a8c:	0800c7e0 	.word	0x0800c7e0

08006a90 <memcpy>:
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a98:	d100      	bne.n	8006a9c <memcpy+0xc>
 8006a9a:	4770      	bx	lr
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa6:	4291      	cmp	r1, r2
 8006aa8:	d1f9      	bne.n	8006a9e <memcpy+0xe>
 8006aaa:	bd10      	pop	{r4, pc}

08006aac <memset>:
 8006aac:	4402      	add	r2, r0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d100      	bne.n	8006ab6 <memset+0xa>
 8006ab4:	4770      	bx	lr
 8006ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aba:	e7f9      	b.n	8006ab0 <memset+0x4>

08006abc <__cvt>:
 8006abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	ec55 4b10 	vmov	r4, r5, d0
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	460e      	mov	r6, r1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	462b      	mov	r3, r5
 8006acc:	bfbb      	ittet	lt
 8006ace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ad2:	461d      	movlt	r5, r3
 8006ad4:	2300      	movge	r3, #0
 8006ad6:	232d      	movlt	r3, #45	; 0x2d
 8006ad8:	700b      	strb	r3, [r1, #0]
 8006ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006adc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ae0:	4691      	mov	r9, r2
 8006ae2:	f023 0820 	bic.w	r8, r3, #32
 8006ae6:	bfbc      	itt	lt
 8006ae8:	4622      	movlt	r2, r4
 8006aea:	4614      	movlt	r4, r2
 8006aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006af0:	d005      	beq.n	8006afe <__cvt+0x42>
 8006af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006af6:	d100      	bne.n	8006afa <__cvt+0x3e>
 8006af8:	3601      	adds	r6, #1
 8006afa:	2102      	movs	r1, #2
 8006afc:	e000      	b.n	8006b00 <__cvt+0x44>
 8006afe:	2103      	movs	r1, #3
 8006b00:	ab03      	add	r3, sp, #12
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	ab02      	add	r3, sp, #8
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	ec45 4b10 	vmov	d0, r4, r5
 8006b0c:	4653      	mov	r3, sl
 8006b0e:	4632      	mov	r2, r6
 8006b10:	f001 ffba 	bl	8008a88 <_dtoa_r>
 8006b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b18:	4607      	mov	r7, r0
 8006b1a:	d102      	bne.n	8006b22 <__cvt+0x66>
 8006b1c:	f019 0f01 	tst.w	r9, #1
 8006b20:	d022      	beq.n	8006b68 <__cvt+0xac>
 8006b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b26:	eb07 0906 	add.w	r9, r7, r6
 8006b2a:	d110      	bne.n	8006b4e <__cvt+0x92>
 8006b2c:	783b      	ldrb	r3, [r7, #0]
 8006b2e:	2b30      	cmp	r3, #48	; 0x30
 8006b30:	d10a      	bne.n	8006b48 <__cvt+0x8c>
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7f9 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b3e:	b918      	cbnz	r0, 8006b48 <__cvt+0x8c>
 8006b40:	f1c6 0601 	rsb	r6, r6, #1
 8006b44:	f8ca 6000 	str.w	r6, [sl]
 8006b48:	f8da 3000 	ldr.w	r3, [sl]
 8006b4c:	4499      	add	r9, r3
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b5a:	b108      	cbz	r0, 8006b60 <__cvt+0xa4>
 8006b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b60:	2230      	movs	r2, #48	; 0x30
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	454b      	cmp	r3, r9
 8006b66:	d307      	bcc.n	8006b78 <__cvt+0xbc>
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b6c:	1bdb      	subs	r3, r3, r7
 8006b6e:	4638      	mov	r0, r7
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	b004      	add	sp, #16
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	1c59      	adds	r1, r3, #1
 8006b7a:	9103      	str	r1, [sp, #12]
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e7f0      	b.n	8006b62 <__cvt+0xa6>

08006b80 <__exponent>:
 8006b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b82:	4603      	mov	r3, r0
 8006b84:	2900      	cmp	r1, #0
 8006b86:	bfb8      	it	lt
 8006b88:	4249      	neglt	r1, r1
 8006b8a:	f803 2b02 	strb.w	r2, [r3], #2
 8006b8e:	bfb4      	ite	lt
 8006b90:	222d      	movlt	r2, #45	; 0x2d
 8006b92:	222b      	movge	r2, #43	; 0x2b
 8006b94:	2909      	cmp	r1, #9
 8006b96:	7042      	strb	r2, [r0, #1]
 8006b98:	dd2a      	ble.n	8006bf0 <__exponent+0x70>
 8006b9a:	f10d 0407 	add.w	r4, sp, #7
 8006b9e:	46a4      	mov	ip, r4
 8006ba0:	270a      	movs	r7, #10
 8006ba2:	46a6      	mov	lr, r4
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006baa:	fb07 1516 	mls	r5, r7, r6, r1
 8006bae:	3530      	adds	r5, #48	; 0x30
 8006bb0:	2a63      	cmp	r2, #99	; 0x63
 8006bb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bba:	4631      	mov	r1, r6
 8006bbc:	dcf1      	bgt.n	8006ba2 <__exponent+0x22>
 8006bbe:	3130      	adds	r1, #48	; 0x30
 8006bc0:	f1ae 0502 	sub.w	r5, lr, #2
 8006bc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bc8:	1c44      	adds	r4, r0, #1
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4561      	cmp	r1, ip
 8006bce:	d30a      	bcc.n	8006be6 <__exponent+0x66>
 8006bd0:	f10d 0209 	add.w	r2, sp, #9
 8006bd4:	eba2 020e 	sub.w	r2, r2, lr
 8006bd8:	4565      	cmp	r5, ip
 8006bda:	bf88      	it	hi
 8006bdc:	2200      	movhi	r2, #0
 8006bde:	4413      	add	r3, r2
 8006be0:	1a18      	subs	r0, r3, r0
 8006be2:	b003      	add	sp, #12
 8006be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bee:	e7ed      	b.n	8006bcc <__exponent+0x4c>
 8006bf0:	2330      	movs	r3, #48	; 0x30
 8006bf2:	3130      	adds	r1, #48	; 0x30
 8006bf4:	7083      	strb	r3, [r0, #2]
 8006bf6:	70c1      	strb	r1, [r0, #3]
 8006bf8:	1d03      	adds	r3, r0, #4
 8006bfa:	e7f1      	b.n	8006be0 <__exponent+0x60>

08006bfc <_printf_float>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	ed2d 8b02 	vpush	{d8}
 8006c04:	b08d      	sub	sp, #52	; 0x34
 8006c06:	460c      	mov	r4, r1
 8006c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	461f      	mov	r7, r3
 8006c10:	4605      	mov	r5, r0
 8006c12:	f003 fa4d 	bl	800a0b0 <_localeconv_r>
 8006c16:	f8d0 a000 	ldr.w	sl, [r0]
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	f7f9 fad8 	bl	80001d0 <strlen>
 8006c20:	2300      	movs	r3, #0
 8006c22:	930a      	str	r3, [sp, #40]	; 0x28
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c30:	3307      	adds	r3, #7
 8006c32:	f023 0307 	bic.w	r3, r3, #7
 8006c36:	f103 0208 	add.w	r2, r3, #8
 8006c3a:	f8c8 2000 	str.w	r2, [r8]
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c4e:	9307      	str	r3, [sp, #28]
 8006c50:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c54:	ee08 0a10 	vmov	s16, r0
 8006c58:	4b9f      	ldr	r3, [pc, #636]	; (8006ed8 <_printf_float+0x2dc>)
 8006c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	f7f9 ff63 	bl	8000b2c <__aeabi_dcmpun>
 8006c66:	bb88      	cbnz	r0, 8006ccc <_printf_float+0xd0>
 8006c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c6c:	4b9a      	ldr	r3, [pc, #616]	; (8006ed8 <_printf_float+0x2dc>)
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c72:	f7f9 ff3d 	bl	8000af0 <__aeabi_dcmple>
 8006c76:	bb48      	cbnz	r0, 8006ccc <_printf_float+0xd0>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	4649      	mov	r1, r9
 8006c80:	f7f9 ff2c 	bl	8000adc <__aeabi_dcmplt>
 8006c84:	b110      	cbz	r0, 8006c8c <_printf_float+0x90>
 8006c86:	232d      	movs	r3, #45	; 0x2d
 8006c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c8c:	4b93      	ldr	r3, [pc, #588]	; (8006edc <_printf_float+0x2e0>)
 8006c8e:	4894      	ldr	r0, [pc, #592]	; (8006ee0 <_printf_float+0x2e4>)
 8006c90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c94:	bf94      	ite	ls
 8006c96:	4698      	movls	r8, r3
 8006c98:	4680      	movhi	r8, r0
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	9b05      	ldr	r3, [sp, #20]
 8006ca0:	f023 0204 	bic.w	r2, r3, #4
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	f04f 0900 	mov.w	r9, #0
 8006caa:	9700      	str	r7, [sp, #0]
 8006cac:	4633      	mov	r3, r6
 8006cae:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f9d8 	bl	8007068 <_printf_common>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f040 8090 	bne.w	8006dde <_printf_float+0x1e2>
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	b00d      	add	sp, #52	; 0x34
 8006cc4:	ecbd 8b02 	vpop	{d8}
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	f7f9 ff2a 	bl	8000b2c <__aeabi_dcmpun>
 8006cd8:	b140      	cbz	r0, 8006cec <_printf_float+0xf0>
 8006cda:	464b      	mov	r3, r9
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfbc      	itt	lt
 8006ce0:	232d      	movlt	r3, #45	; 0x2d
 8006ce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ce6:	487f      	ldr	r0, [pc, #508]	; (8006ee4 <_printf_float+0x2e8>)
 8006ce8:	4b7f      	ldr	r3, [pc, #508]	; (8006ee8 <_printf_float+0x2ec>)
 8006cea:	e7d1      	b.n	8006c90 <_printf_float+0x94>
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cf2:	9206      	str	r2, [sp, #24]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	d13f      	bne.n	8006d78 <_printf_float+0x17c>
 8006cf8:	2306      	movs	r3, #6
 8006cfa:	6063      	str	r3, [r4, #4]
 8006cfc:	9b05      	ldr	r3, [sp, #20]
 8006cfe:	6861      	ldr	r1, [r4, #4]
 8006d00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d04:	2300      	movs	r3, #0
 8006d06:	9303      	str	r3, [sp, #12]
 8006d08:	ab0a      	add	r3, sp, #40	; 0x28
 8006d0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d0e:	ab09      	add	r3, sp, #36	; 0x24
 8006d10:	ec49 8b10 	vmov	d0, r8, r9
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	6022      	str	r2, [r4, #0]
 8006d18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f7ff fecd 	bl	8006abc <__cvt>
 8006d22:	9b06      	ldr	r3, [sp, #24]
 8006d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d26:	2b47      	cmp	r3, #71	; 0x47
 8006d28:	4680      	mov	r8, r0
 8006d2a:	d108      	bne.n	8006d3e <_printf_float+0x142>
 8006d2c:	1cc8      	adds	r0, r1, #3
 8006d2e:	db02      	blt.n	8006d36 <_printf_float+0x13a>
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	4299      	cmp	r1, r3
 8006d34:	dd41      	ble.n	8006dba <_printf_float+0x1be>
 8006d36:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d3a:	fa5f fb8b 	uxtb.w	fp, fp
 8006d3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d42:	d820      	bhi.n	8006d86 <_printf_float+0x18a>
 8006d44:	3901      	subs	r1, #1
 8006d46:	465a      	mov	r2, fp
 8006d48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d4c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d4e:	f7ff ff17 	bl	8006b80 <__exponent>
 8006d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d54:	1813      	adds	r3, r2, r0
 8006d56:	2a01      	cmp	r2, #1
 8006d58:	4681      	mov	r9, r0
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	dc02      	bgt.n	8006d64 <_printf_float+0x168>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	07d2      	lsls	r2, r2, #31
 8006d62:	d501      	bpl.n	8006d68 <_printf_float+0x16c>
 8006d64:	3301      	adds	r3, #1
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d09c      	beq.n	8006caa <_printf_float+0xae>
 8006d70:	232d      	movs	r3, #45	; 0x2d
 8006d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d76:	e798      	b.n	8006caa <_printf_float+0xae>
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	2a47      	cmp	r2, #71	; 0x47
 8006d7c:	d1be      	bne.n	8006cfc <_printf_float+0x100>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1bc      	bne.n	8006cfc <_printf_float+0x100>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7b9      	b.n	8006cfa <_printf_float+0xfe>
 8006d86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d8a:	d118      	bne.n	8006dbe <_printf_float+0x1c2>
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	6863      	ldr	r3, [r4, #4]
 8006d90:	dd0b      	ble.n	8006daa <_printf_float+0x1ae>
 8006d92:	6121      	str	r1, [r4, #16]
 8006d94:	b913      	cbnz	r3, 8006d9c <_printf_float+0x1a0>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	07d0      	lsls	r0, r2, #31
 8006d9a:	d502      	bpl.n	8006da2 <_printf_float+0x1a6>
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	440b      	add	r3, r1
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006da4:	f04f 0900 	mov.w	r9, #0
 8006da8:	e7de      	b.n	8006d68 <_printf_float+0x16c>
 8006daa:	b913      	cbnz	r3, 8006db2 <_printf_float+0x1b6>
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	07d2      	lsls	r2, r2, #31
 8006db0:	d501      	bpl.n	8006db6 <_printf_float+0x1ba>
 8006db2:	3302      	adds	r3, #2
 8006db4:	e7f4      	b.n	8006da0 <_printf_float+0x1a4>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7f2      	b.n	8006da0 <_printf_float+0x1a4>
 8006dba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	db05      	blt.n	8006dd0 <_printf_float+0x1d4>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	6121      	str	r1, [r4, #16]
 8006dc8:	07d8      	lsls	r0, r3, #31
 8006dca:	d5ea      	bpl.n	8006da2 <_printf_float+0x1a6>
 8006dcc:	1c4b      	adds	r3, r1, #1
 8006dce:	e7e7      	b.n	8006da0 <_printf_float+0x1a4>
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	bfd4      	ite	le
 8006dd4:	f1c1 0202 	rsble	r2, r1, #2
 8006dd8:	2201      	movgt	r2, #1
 8006dda:	4413      	add	r3, r2
 8006ddc:	e7e0      	b.n	8006da0 <_printf_float+0x1a4>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	055a      	lsls	r2, r3, #21
 8006de2:	d407      	bmi.n	8006df4 <_printf_float+0x1f8>
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	4642      	mov	r2, r8
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b8      	blx	r7
 8006dee:	3001      	adds	r0, #1
 8006df0:	d12c      	bne.n	8006e4c <_printf_float+0x250>
 8006df2:	e764      	b.n	8006cbe <_printf_float+0xc2>
 8006df4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006df8:	f240 80e0 	bls.w	8006fbc <_printf_float+0x3c0>
 8006dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e00:	2200      	movs	r2, #0
 8006e02:	2300      	movs	r3, #0
 8006e04:	f7f9 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d034      	beq.n	8006e76 <_printf_float+0x27a>
 8006e0c:	4a37      	ldr	r2, [pc, #220]	; (8006eec <_printf_float+0x2f0>)
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	f43f af51 	beq.w	8006cbe <_printf_float+0xc2>
 8006e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e20:	429a      	cmp	r2, r3
 8006e22:	db02      	blt.n	8006e2a <_printf_float+0x22e>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07d8      	lsls	r0, r3, #31
 8006e28:	d510      	bpl.n	8006e4c <_printf_float+0x250>
 8006e2a:	ee18 3a10 	vmov	r3, s16
 8006e2e:	4652      	mov	r2, sl
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f af41 	beq.w	8006cbe <_printf_float+0xc2>
 8006e3c:	f04f 0800 	mov.w	r8, #0
 8006e40:	f104 091a 	add.w	r9, r4, #26
 8006e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e46:	3b01      	subs	r3, #1
 8006e48:	4543      	cmp	r3, r8
 8006e4a:	dc09      	bgt.n	8006e60 <_printf_float+0x264>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	079b      	lsls	r3, r3, #30
 8006e50:	f100 8105 	bmi.w	800705e <_printf_float+0x462>
 8006e54:	68e0      	ldr	r0, [r4, #12]
 8006e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e58:	4298      	cmp	r0, r3
 8006e5a:	bfb8      	it	lt
 8006e5c:	4618      	movlt	r0, r3
 8006e5e:	e730      	b.n	8006cc2 <_printf_float+0xc6>
 8006e60:	2301      	movs	r3, #1
 8006e62:	464a      	mov	r2, r9
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f af27 	beq.w	8006cbe <_printf_float+0xc2>
 8006e70:	f108 0801 	add.w	r8, r8, #1
 8006e74:	e7e6      	b.n	8006e44 <_printf_float+0x248>
 8006e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dc39      	bgt.n	8006ef0 <_printf_float+0x2f4>
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <_printf_float+0x2f0>)
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4631      	mov	r1, r6
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	f43f af19 	beq.w	8006cbe <_printf_float+0xc2>
 8006e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d102      	bne.n	8006e9a <_printf_float+0x29e>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d5d8      	bpl.n	8006e4c <_printf_float+0x250>
 8006e9a:	ee18 3a10 	vmov	r3, s16
 8006e9e:	4652      	mov	r2, sl
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af09 	beq.w	8006cbe <_printf_float+0xc2>
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	f104 0a1a 	add.w	sl, r4, #26
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	425b      	negs	r3, r3
 8006eb8:	454b      	cmp	r3, r9
 8006eba:	dc01      	bgt.n	8006ec0 <_printf_float+0x2c4>
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebe:	e792      	b.n	8006de6 <_printf_float+0x1ea>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f43f aef7 	beq.w	8006cbe <_printf_float+0xc2>
 8006ed0:	f109 0901 	add.w	r9, r9, #1
 8006ed4:	e7ee      	b.n	8006eb4 <_printf_float+0x2b8>
 8006ed6:	bf00      	nop
 8006ed8:	7fefffff 	.word	0x7fefffff
 8006edc:	0800c318 	.word	0x0800c318
 8006ee0:	0800c31c 	.word	0x0800c31c
 8006ee4:	0800c324 	.word	0x0800c324
 8006ee8:	0800c320 	.word	0x0800c320
 8006eec:	0800c781 	.word	0x0800c781
 8006ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	bfa8      	it	ge
 8006ef8:	461a      	movge	r2, r3
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	4691      	mov	r9, r2
 8006efe:	dc37      	bgt.n	8006f70 <_printf_float+0x374>
 8006f00:	f04f 0b00 	mov.w	fp, #0
 8006f04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f08:	f104 021a 	add.w	r2, r4, #26
 8006f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	eba3 0309 	sub.w	r3, r3, r9
 8006f14:	455b      	cmp	r3, fp
 8006f16:	dc33      	bgt.n	8006f80 <_printf_float+0x384>
 8006f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	db3b      	blt.n	8006f98 <_printf_float+0x39c>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	07da      	lsls	r2, r3, #31
 8006f24:	d438      	bmi.n	8006f98 <_printf_float+0x39c>
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	9a05      	ldr	r2, [sp, #20]
 8006f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f2c:	1a9a      	subs	r2, r3, r2
 8006f2e:	eba3 0901 	sub.w	r9, r3, r1
 8006f32:	4591      	cmp	r9, r2
 8006f34:	bfa8      	it	ge
 8006f36:	4691      	movge	r9, r2
 8006f38:	f1b9 0f00 	cmp.w	r9, #0
 8006f3c:	dc35      	bgt.n	8006faa <_printf_float+0x3ae>
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f46:	f104 0a1a 	add.w	sl, r4, #26
 8006f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	eba3 0309 	sub.w	r3, r3, r9
 8006f54:	4543      	cmp	r3, r8
 8006f56:	f77f af79 	ble.w	8006e4c <_printf_float+0x250>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f aeaa 	beq.w	8006cbe <_printf_float+0xc2>
 8006f6a:	f108 0801 	add.w	r8, r8, #1
 8006f6e:	e7ec      	b.n	8006f4a <_printf_float+0x34e>
 8006f70:	4613      	mov	r3, r2
 8006f72:	4631      	mov	r1, r6
 8006f74:	4642      	mov	r2, r8
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d1c0      	bne.n	8006f00 <_printf_float+0x304>
 8006f7e:	e69e      	b.n	8006cbe <_printf_float+0xc2>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	9205      	str	r2, [sp, #20]
 8006f88:	47b8      	blx	r7
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f43f ae97 	beq.w	8006cbe <_printf_float+0xc2>
 8006f90:	9a05      	ldr	r2, [sp, #20]
 8006f92:	f10b 0b01 	add.w	fp, fp, #1
 8006f96:	e7b9      	b.n	8006f0c <_printf_float+0x310>
 8006f98:	ee18 3a10 	vmov	r3, s16
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d1be      	bne.n	8006f26 <_printf_float+0x32a>
 8006fa8:	e689      	b.n	8006cbe <_printf_float+0xc2>
 8006faa:	9a05      	ldr	r2, [sp, #20]
 8006fac:	464b      	mov	r3, r9
 8006fae:	4442      	add	r2, r8
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d1c1      	bne.n	8006f3e <_printf_float+0x342>
 8006fba:	e680      	b.n	8006cbe <_printf_float+0xc2>
 8006fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fbe:	2a01      	cmp	r2, #1
 8006fc0:	dc01      	bgt.n	8006fc6 <_printf_float+0x3ca>
 8006fc2:	07db      	lsls	r3, r3, #31
 8006fc4:	d538      	bpl.n	8007038 <_printf_float+0x43c>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4642      	mov	r2, r8
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae74 	beq.w	8006cbe <_printf_float+0xc2>
 8006fd6:	ee18 3a10 	vmov	r3, s16
 8006fda:	4652      	mov	r2, sl
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	f43f ae6b 	beq.w	8006cbe <_printf_float+0xc2>
 8006fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fec:	2200      	movs	r2, #0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f7f9 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ff4:	b9d8      	cbnz	r0, 800702e <_printf_float+0x432>
 8006ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff8:	f108 0201 	add.w	r2, r8, #1
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	d10e      	bne.n	8007026 <_printf_float+0x42a>
 8007008:	e659      	b.n	8006cbe <_printf_float+0xc2>
 800700a:	2301      	movs	r3, #1
 800700c:	4652      	mov	r2, sl
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f ae52 	beq.w	8006cbe <_printf_float+0xc2>
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007020:	3b01      	subs	r3, #1
 8007022:	4543      	cmp	r3, r8
 8007024:	dcf1      	bgt.n	800700a <_printf_float+0x40e>
 8007026:	464b      	mov	r3, r9
 8007028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800702c:	e6dc      	b.n	8006de8 <_printf_float+0x1ec>
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	f104 0a1a 	add.w	sl, r4, #26
 8007036:	e7f2      	b.n	800701e <_printf_float+0x422>
 8007038:	2301      	movs	r3, #1
 800703a:	4642      	mov	r2, r8
 800703c:	e7df      	b.n	8006ffe <_printf_float+0x402>
 800703e:	2301      	movs	r3, #1
 8007040:	464a      	mov	r2, r9
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	f43f ae38 	beq.w	8006cbe <_printf_float+0xc2>
 800704e:	f108 0801 	add.w	r8, r8, #1
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007056:	1a5b      	subs	r3, r3, r1
 8007058:	4543      	cmp	r3, r8
 800705a:	dcf0      	bgt.n	800703e <_printf_float+0x442>
 800705c:	e6fa      	b.n	8006e54 <_printf_float+0x258>
 800705e:	f04f 0800 	mov.w	r8, #0
 8007062:	f104 0919 	add.w	r9, r4, #25
 8007066:	e7f4      	b.n	8007052 <_printf_float+0x456>

08007068 <_printf_common>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	4616      	mov	r6, r2
 800706e:	4699      	mov	r9, r3
 8007070:	688a      	ldr	r2, [r1, #8]
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007078:	4293      	cmp	r3, r2
 800707a:	bfb8      	it	lt
 800707c:	4613      	movlt	r3, r2
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007084:	4607      	mov	r7, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b10a      	cbz	r2, 800708e <_printf_common+0x26>
 800708a:	3301      	adds	r3, #1
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	0699      	lsls	r1, r3, #26
 8007092:	bf42      	ittt	mi
 8007094:	6833      	ldrmi	r3, [r6, #0]
 8007096:	3302      	addmi	r3, #2
 8007098:	6033      	strmi	r3, [r6, #0]
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f015 0506 	ands.w	r5, r5, #6
 80070a0:	d106      	bne.n	80070b0 <_printf_common+0x48>
 80070a2:	f104 0a19 	add.w	sl, r4, #25
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	6832      	ldr	r2, [r6, #0]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc26      	bgt.n	80070fe <_printf_common+0x96>
 80070b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b4:	1e13      	subs	r3, r2, #0
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d42b      	bmi.n	8007118 <_printf_common+0xb0>
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d01e      	beq.n	800710c <_printf_common+0xa4>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	68e5      	ldr	r5, [r4, #12]
 80070d2:	6832      	ldr	r2, [r6, #0]
 80070d4:	f003 0306 	and.w	r3, r3, #6
 80070d8:	2b04      	cmp	r3, #4
 80070da:	bf08      	it	eq
 80070dc:	1aad      	subeq	r5, r5, r2
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	bf0c      	ite	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	2500      	movne	r5, #0
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bfc4      	itt	gt
 80070ee:	1a9b      	subgt	r3, r3, r2
 80070f0:	18ed      	addgt	r5, r5, r3
 80070f2:	2600      	movs	r6, #0
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xc8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xa8>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xac>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c6      	b.n	80070a6 <_printf_common+0x3e>
 8007118:	18e1      	adds	r1, r4, r3
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	2030      	movs	r0, #48	; 0x30
 800711e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007122:	4422      	add	r2, r4
 8007124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712c:	3302      	adds	r3, #2
 800712e:	e7c7      	b.n	80070c0 <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa4>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x8e>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	7e0f      	ldrb	r7, [r1, #24]
 800714a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800714c:	2f78      	cmp	r7, #120	; 0x78
 800714e:	4691      	mov	r9, r2
 8007150:	4680      	mov	r8, r0
 8007152:	460c      	mov	r4, r1
 8007154:	469a      	mov	sl, r3
 8007156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d8 	beq.w	8007316 <_printf_i+0x1d2>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80a3 	beq.w	80072b2 <_printf_i+0x16e>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a101      	add	r1, pc, #4	; (adr r1, 8007184 <_printf_i+0x40>)
 8007180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072fd 	.word	0x080072fd
 80071b4:	08007221 	.word	0x08007221
 80071b8:	080072df 	.word	0x080072df
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	0800731f 	.word	0x0800731f
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072e7 	.word	0x080072e7
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0a3      	b.n	8007338 <_printf_i+0x1f4>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	6829      	ldr	r1, [r5, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	f101 0304 	add.w	r3, r1, #4
 80071fa:	d50a      	bpl.n	8007212 <_printf_i+0xce>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	2e00      	cmp	r6, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xc8>
 8007204:	232d      	movs	r3, #45	; 0x2d
 8007206:	4276      	negs	r6, r6
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	485e      	ldr	r0, [pc, #376]	; (8007388 <_printf_i+0x244>)
 800720e:	230a      	movs	r3, #10
 8007210:	e019      	b.n	8007246 <_printf_i+0x102>
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f010 0f40 	tst.w	r0, #64	; 0x40
 800721a:	bf18      	it	ne
 800721c:	b236      	sxthne	r6, r6
 800721e:	e7ef      	b.n	8007200 <_printf_i+0xbc>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6029      	str	r1, [r5, #0]
 8007228:	0601      	lsls	r1, r0, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xec>
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	e002      	b.n	8007236 <_printf_i+0xf2>
 8007230:	0646      	lsls	r6, r0, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xe8>
 8007234:	881e      	ldrh	r6, [r3, #0]
 8007236:	4854      	ldr	r0, [pc, #336]	; (8007388 <_printf_i+0x244>)
 8007238:	2f6f      	cmp	r7, #111	; 0x6f
 800723a:	bf0c      	ite	eq
 800723c:	2308      	moveq	r3, #8
 800723e:	230a      	movne	r3, #10
 8007240:	2100      	movs	r1, #0
 8007242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007246:	6865      	ldr	r5, [r4, #4]
 8007248:	60a5      	str	r5, [r4, #8]
 800724a:	2d00      	cmp	r5, #0
 800724c:	bfa2      	ittt	ge
 800724e:	6821      	ldrge	r1, [r4, #0]
 8007250:	f021 0104 	bicge.w	r1, r1, #4
 8007254:	6021      	strge	r1, [r4, #0]
 8007256:	b90e      	cbnz	r6, 800725c <_printf_i+0x118>
 8007258:	2d00      	cmp	r5, #0
 800725a:	d04d      	beq.n	80072f8 <_printf_i+0x1b4>
 800725c:	4615      	mov	r5, r2
 800725e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007262:	fb03 6711 	mls	r7, r3, r1, r6
 8007266:	5dc7      	ldrb	r7, [r0, r7]
 8007268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800726c:	4637      	mov	r7, r6
 800726e:	42bb      	cmp	r3, r7
 8007270:	460e      	mov	r6, r1
 8007272:	d9f4      	bls.n	800725e <_printf_i+0x11a>
 8007274:	2b08      	cmp	r3, #8
 8007276:	d10b      	bne.n	8007290 <_printf_i+0x14c>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	07de      	lsls	r6, r3, #31
 800727c:	d508      	bpl.n	8007290 <_printf_i+0x14c>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4299      	cmp	r1, r3
 8007284:	bfde      	ittt	le
 8007286:	2330      	movle	r3, #48	; 0x30
 8007288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800728c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007290:	1b52      	subs	r2, r2, r5
 8007292:	6122      	str	r2, [r4, #16]
 8007294:	f8cd a000 	str.w	sl, [sp]
 8007298:	464b      	mov	r3, r9
 800729a:	aa03      	add	r2, sp, #12
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fee2 	bl	8007068 <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d14c      	bne.n	8007342 <_printf_i+0x1fe>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b004      	add	sp, #16
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	4835      	ldr	r0, [pc, #212]	; (8007388 <_printf_i+0x244>)
 80072b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b8:	6829      	ldr	r1, [r5, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c0:	6029      	str	r1, [r5, #0]
 80072c2:	061d      	lsls	r5, r3, #24
 80072c4:	d514      	bpl.n	80072f0 <_printf_i+0x1ac>
 80072c6:	07df      	lsls	r7, r3, #31
 80072c8:	bf44      	itt	mi
 80072ca:	f043 0320 	orrmi.w	r3, r3, #32
 80072ce:	6023      	strmi	r3, [r4, #0]
 80072d0:	b91e      	cbnz	r6, 80072da <_printf_i+0x196>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f023 0320 	bic.w	r3, r3, #32
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2310      	movs	r3, #16
 80072dc:	e7b0      	b.n	8007240 <_printf_i+0xfc>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f043 0320 	orr.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2378      	movs	r3, #120	; 0x78
 80072e8:	4828      	ldr	r0, [pc, #160]	; (800738c <_printf_i+0x248>)
 80072ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ee:	e7e3      	b.n	80072b8 <_printf_i+0x174>
 80072f0:	0659      	lsls	r1, r3, #25
 80072f2:	bf48      	it	mi
 80072f4:	b2b6      	uxthmi	r6, r6
 80072f6:	e7e6      	b.n	80072c6 <_printf_i+0x182>
 80072f8:	4615      	mov	r5, r2
 80072fa:	e7bb      	b.n	8007274 <_printf_i+0x130>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	6826      	ldr	r6, [r4, #0]
 8007300:	6961      	ldr	r1, [r4, #20]
 8007302:	1d18      	adds	r0, r3, #4
 8007304:	6028      	str	r0, [r5, #0]
 8007306:	0635      	lsls	r5, r6, #24
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	d501      	bpl.n	8007310 <_printf_i+0x1cc>
 800730c:	6019      	str	r1, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0x1d2>
 8007310:	0670      	lsls	r0, r6, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0x1c8>
 8007314:	8019      	strh	r1, [r3, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	4615      	mov	r5, r2
 800731c:	e7ba      	b.n	8007294 <_printf_i+0x150>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	602a      	str	r2, [r5, #0]
 8007324:	681d      	ldr	r5, [r3, #0]
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	2100      	movs	r1, #0
 800732a:	4628      	mov	r0, r5
 800732c:	f7f8 ff58 	bl	80001e0 <memchr>
 8007330:	b108      	cbz	r0, 8007336 <_printf_i+0x1f2>
 8007332:	1b40      	subs	r0, r0, r5
 8007334:	6060      	str	r0, [r4, #4]
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	e7a8      	b.n	8007294 <_printf_i+0x150>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	462a      	mov	r2, r5
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	47d0      	blx	sl
 800734c:	3001      	adds	r0, #1
 800734e:	d0ab      	beq.n	80072a8 <_printf_i+0x164>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	079b      	lsls	r3, r3, #30
 8007354:	d413      	bmi.n	800737e <_printf_i+0x23a>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	4298      	cmp	r0, r3
 800735c:	bfb8      	it	lt
 800735e:	4618      	movlt	r0, r3
 8007360:	e7a4      	b.n	80072ac <_printf_i+0x168>
 8007362:	2301      	movs	r3, #1
 8007364:	4632      	mov	r2, r6
 8007366:	4649      	mov	r1, r9
 8007368:	4640      	mov	r0, r8
 800736a:	47d0      	blx	sl
 800736c:	3001      	adds	r0, #1
 800736e:	d09b      	beq.n	80072a8 <_printf_i+0x164>
 8007370:	3501      	adds	r5, #1
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	1a5b      	subs	r3, r3, r1
 8007378:	42ab      	cmp	r3, r5
 800737a:	dcf2      	bgt.n	8007362 <_printf_i+0x21e>
 800737c:	e7eb      	b.n	8007356 <_printf_i+0x212>
 800737e:	2500      	movs	r5, #0
 8007380:	f104 0619 	add.w	r6, r4, #25
 8007384:	e7f5      	b.n	8007372 <_printf_i+0x22e>
 8007386:	bf00      	nop
 8007388:	0800c328 	.word	0x0800c328
 800738c:	0800c339 	.word	0x0800c339

08007390 <_scanf_float>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	b087      	sub	sp, #28
 8007396:	4617      	mov	r7, r2
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	688b      	ldr	r3, [r1, #8]
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073a2:	bf83      	ittte	hi
 80073a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80073a8:	195b      	addhi	r3, r3, r5
 80073aa:	9302      	strhi	r3, [sp, #8]
 80073ac:	2300      	movls	r3, #0
 80073ae:	bf86      	itte	hi
 80073b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073b4:	608b      	strhi	r3, [r1, #8]
 80073b6:	9302      	strls	r3, [sp, #8]
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	468b      	mov	fp, r1
 80073bc:	2500      	movs	r5, #0
 80073be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80073c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073ca:	4680      	mov	r8, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	465e      	mov	r6, fp
 80073d0:	46aa      	mov	sl, r5
 80073d2:	46a9      	mov	r9, r5
 80073d4:	9501      	str	r5, [sp, #4]
 80073d6:	68a2      	ldr	r2, [r4, #8]
 80073d8:	b152      	cbz	r2, 80073f0 <_scanf_float+0x60>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b4e      	cmp	r3, #78	; 0x4e
 80073e0:	d864      	bhi.n	80074ac <_scanf_float+0x11c>
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d83c      	bhi.n	8007460 <_scanf_float+0xd0>
 80073e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80073ea:	b2c8      	uxtb	r0, r1
 80073ec:	280e      	cmp	r0, #14
 80073ee:	d93a      	bls.n	8007466 <_scanf_float+0xd6>
 80073f0:	f1b9 0f00 	cmp.w	r9, #0
 80073f4:	d003      	beq.n	80073fe <_scanf_float+0x6e>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007402:	f1ba 0f01 	cmp.w	sl, #1
 8007406:	f200 8113 	bhi.w	8007630 <_scanf_float+0x2a0>
 800740a:	455e      	cmp	r6, fp
 800740c:	f200 8105 	bhi.w	800761a <_scanf_float+0x28a>
 8007410:	2501      	movs	r5, #1
 8007412:	4628      	mov	r0, r5
 8007414:	b007      	add	sp, #28
 8007416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800741e:	2a0d      	cmp	r2, #13
 8007420:	d8e6      	bhi.n	80073f0 <_scanf_float+0x60>
 8007422:	a101      	add	r1, pc, #4	; (adr r1, 8007428 <_scanf_float+0x98>)
 8007424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007428:	08007567 	.word	0x08007567
 800742c:	080073f1 	.word	0x080073f1
 8007430:	080073f1 	.word	0x080073f1
 8007434:	080073f1 	.word	0x080073f1
 8007438:	080075c7 	.word	0x080075c7
 800743c:	0800759f 	.word	0x0800759f
 8007440:	080073f1 	.word	0x080073f1
 8007444:	080073f1 	.word	0x080073f1
 8007448:	08007575 	.word	0x08007575
 800744c:	080073f1 	.word	0x080073f1
 8007450:	080073f1 	.word	0x080073f1
 8007454:	080073f1 	.word	0x080073f1
 8007458:	080073f1 	.word	0x080073f1
 800745c:	0800752d 	.word	0x0800752d
 8007460:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007464:	e7db      	b.n	800741e <_scanf_float+0x8e>
 8007466:	290e      	cmp	r1, #14
 8007468:	d8c2      	bhi.n	80073f0 <_scanf_float+0x60>
 800746a:	a001      	add	r0, pc, #4	; (adr r0, 8007470 <_scanf_float+0xe0>)
 800746c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007470:	0800751f 	.word	0x0800751f
 8007474:	080073f1 	.word	0x080073f1
 8007478:	0800751f 	.word	0x0800751f
 800747c:	080075b3 	.word	0x080075b3
 8007480:	080073f1 	.word	0x080073f1
 8007484:	080074cd 	.word	0x080074cd
 8007488:	08007509 	.word	0x08007509
 800748c:	08007509 	.word	0x08007509
 8007490:	08007509 	.word	0x08007509
 8007494:	08007509 	.word	0x08007509
 8007498:	08007509 	.word	0x08007509
 800749c:	08007509 	.word	0x08007509
 80074a0:	08007509 	.word	0x08007509
 80074a4:	08007509 	.word	0x08007509
 80074a8:	08007509 	.word	0x08007509
 80074ac:	2b6e      	cmp	r3, #110	; 0x6e
 80074ae:	d809      	bhi.n	80074c4 <_scanf_float+0x134>
 80074b0:	2b60      	cmp	r3, #96	; 0x60
 80074b2:	d8b2      	bhi.n	800741a <_scanf_float+0x8a>
 80074b4:	2b54      	cmp	r3, #84	; 0x54
 80074b6:	d077      	beq.n	80075a8 <_scanf_float+0x218>
 80074b8:	2b59      	cmp	r3, #89	; 0x59
 80074ba:	d199      	bne.n	80073f0 <_scanf_float+0x60>
 80074bc:	2d07      	cmp	r5, #7
 80074be:	d197      	bne.n	80073f0 <_scanf_float+0x60>
 80074c0:	2508      	movs	r5, #8
 80074c2:	e029      	b.n	8007518 <_scanf_float+0x188>
 80074c4:	2b74      	cmp	r3, #116	; 0x74
 80074c6:	d06f      	beq.n	80075a8 <_scanf_float+0x218>
 80074c8:	2b79      	cmp	r3, #121	; 0x79
 80074ca:	e7f6      	b.n	80074ba <_scanf_float+0x12a>
 80074cc:	6821      	ldr	r1, [r4, #0]
 80074ce:	05c8      	lsls	r0, r1, #23
 80074d0:	d51a      	bpl.n	8007508 <_scanf_float+0x178>
 80074d2:	9b02      	ldr	r3, [sp, #8]
 80074d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074d8:	6021      	str	r1, [r4, #0]
 80074da:	f109 0901 	add.w	r9, r9, #1
 80074de:	b11b      	cbz	r3, 80074e8 <_scanf_float+0x158>
 80074e0:	3b01      	subs	r3, #1
 80074e2:	3201      	adds	r2, #1
 80074e4:	9302      	str	r3, [sp, #8]
 80074e6:	60a2      	str	r2, [r4, #8]
 80074e8:	68a3      	ldr	r3, [r4, #8]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	60a3      	str	r3, [r4, #8]
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	3301      	adds	r3, #1
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	f340 8084 	ble.w	8007608 <_scanf_float+0x278>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	e766      	b.n	80073d6 <_scanf_float+0x46>
 8007508:	eb1a 0f05 	cmn.w	sl, r5
 800750c:	f47f af70 	bne.w	80073f0 <_scanf_float+0x60>
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	f806 3b01 	strb.w	r3, [r6], #1
 800751c:	e7e4      	b.n	80074e8 <_scanf_float+0x158>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	0610      	lsls	r0, r2, #24
 8007522:	f57f af65 	bpl.w	80073f0 <_scanf_float+0x60>
 8007526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800752a:	e7f4      	b.n	8007516 <_scanf_float+0x186>
 800752c:	f1ba 0f00 	cmp.w	sl, #0
 8007530:	d10e      	bne.n	8007550 <_scanf_float+0x1c0>
 8007532:	f1b9 0f00 	cmp.w	r9, #0
 8007536:	d10e      	bne.n	8007556 <_scanf_float+0x1c6>
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800753e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007542:	d108      	bne.n	8007556 <_scanf_float+0x1c6>
 8007544:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	f04f 0a01 	mov.w	sl, #1
 800754e:	e7e3      	b.n	8007518 <_scanf_float+0x188>
 8007550:	f1ba 0f02 	cmp.w	sl, #2
 8007554:	d055      	beq.n	8007602 <_scanf_float+0x272>
 8007556:	2d01      	cmp	r5, #1
 8007558:	d002      	beq.n	8007560 <_scanf_float+0x1d0>
 800755a:	2d04      	cmp	r5, #4
 800755c:	f47f af48 	bne.w	80073f0 <_scanf_float+0x60>
 8007560:	3501      	adds	r5, #1
 8007562:	b2ed      	uxtb	r5, r5
 8007564:	e7d8      	b.n	8007518 <_scanf_float+0x188>
 8007566:	f1ba 0f01 	cmp.w	sl, #1
 800756a:	f47f af41 	bne.w	80073f0 <_scanf_float+0x60>
 800756e:	f04f 0a02 	mov.w	sl, #2
 8007572:	e7d1      	b.n	8007518 <_scanf_float+0x188>
 8007574:	b97d      	cbnz	r5, 8007596 <_scanf_float+0x206>
 8007576:	f1b9 0f00 	cmp.w	r9, #0
 800757a:	f47f af3c 	bne.w	80073f6 <_scanf_float+0x66>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007584:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007588:	f47f af39 	bne.w	80073fe <_scanf_float+0x6e>
 800758c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	2501      	movs	r5, #1
 8007594:	e7c0      	b.n	8007518 <_scanf_float+0x188>
 8007596:	2d03      	cmp	r5, #3
 8007598:	d0e2      	beq.n	8007560 <_scanf_float+0x1d0>
 800759a:	2d05      	cmp	r5, #5
 800759c:	e7de      	b.n	800755c <_scanf_float+0x1cc>
 800759e:	2d02      	cmp	r5, #2
 80075a0:	f47f af26 	bne.w	80073f0 <_scanf_float+0x60>
 80075a4:	2503      	movs	r5, #3
 80075a6:	e7b7      	b.n	8007518 <_scanf_float+0x188>
 80075a8:	2d06      	cmp	r5, #6
 80075aa:	f47f af21 	bne.w	80073f0 <_scanf_float+0x60>
 80075ae:	2507      	movs	r5, #7
 80075b0:	e7b2      	b.n	8007518 <_scanf_float+0x188>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	0591      	lsls	r1, r2, #22
 80075b6:	f57f af1b 	bpl.w	80073f0 <_scanf_float+0x60>
 80075ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80075be:	6022      	str	r2, [r4, #0]
 80075c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80075c4:	e7a8      	b.n	8007518 <_scanf_float+0x188>
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80075cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80075d0:	d006      	beq.n	80075e0 <_scanf_float+0x250>
 80075d2:	0550      	lsls	r0, r2, #21
 80075d4:	f57f af0c 	bpl.w	80073f0 <_scanf_float+0x60>
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	f43f af0f 	beq.w	80073fe <_scanf_float+0x6e>
 80075e0:	0591      	lsls	r1, r2, #22
 80075e2:	bf58      	it	pl
 80075e4:	9901      	ldrpl	r1, [sp, #4]
 80075e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075ea:	bf58      	it	pl
 80075ec:	eba9 0101 	subpl.w	r1, r9, r1
 80075f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075f4:	bf58      	it	pl
 80075f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	e78a      	b.n	8007518 <_scanf_float+0x188>
 8007602:	f04f 0a03 	mov.w	sl, #3
 8007606:	e787      	b.n	8007518 <_scanf_float+0x188>
 8007608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800760c:	4639      	mov	r1, r7
 800760e:	4640      	mov	r0, r8
 8007610:	4798      	blx	r3
 8007612:	2800      	cmp	r0, #0
 8007614:	f43f aedf 	beq.w	80073d6 <_scanf_float+0x46>
 8007618:	e6ea      	b.n	80073f0 <_scanf_float+0x60>
 800761a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800761e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007622:	463a      	mov	r2, r7
 8007624:	4640      	mov	r0, r8
 8007626:	4798      	blx	r3
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	3b01      	subs	r3, #1
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	e6ec      	b.n	800740a <_scanf_float+0x7a>
 8007630:	1e6b      	subs	r3, r5, #1
 8007632:	2b06      	cmp	r3, #6
 8007634:	d825      	bhi.n	8007682 <_scanf_float+0x2f2>
 8007636:	2d02      	cmp	r5, #2
 8007638:	d836      	bhi.n	80076a8 <_scanf_float+0x318>
 800763a:	455e      	cmp	r6, fp
 800763c:	f67f aee8 	bls.w	8007410 <_scanf_float+0x80>
 8007640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007644:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007648:	463a      	mov	r2, r7
 800764a:	4640      	mov	r0, r8
 800764c:	4798      	blx	r3
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	3b01      	subs	r3, #1
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	e7f1      	b.n	800763a <_scanf_float+0x2aa>
 8007656:	9802      	ldr	r0, [sp, #8]
 8007658:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800765c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007660:	9002      	str	r0, [sp, #8]
 8007662:	463a      	mov	r2, r7
 8007664:	4640      	mov	r0, r8
 8007666:	4798      	blx	r3
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	3b01      	subs	r3, #1
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007672:	fa5f fa8a 	uxtb.w	sl, sl
 8007676:	f1ba 0f02 	cmp.w	sl, #2
 800767a:	d1ec      	bne.n	8007656 <_scanf_float+0x2c6>
 800767c:	3d03      	subs	r5, #3
 800767e:	b2ed      	uxtb	r5, r5
 8007680:	1b76      	subs	r6, r6, r5
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	05da      	lsls	r2, r3, #23
 8007686:	d52f      	bpl.n	80076e8 <_scanf_float+0x358>
 8007688:	055b      	lsls	r3, r3, #21
 800768a:	d510      	bpl.n	80076ae <_scanf_float+0x31e>
 800768c:	455e      	cmp	r6, fp
 800768e:	f67f aebf 	bls.w	8007410 <_scanf_float+0x80>
 8007692:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800769a:	463a      	mov	r2, r7
 800769c:	4640      	mov	r0, r8
 800769e:	4798      	blx	r3
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	e7f1      	b.n	800768c <_scanf_float+0x2fc>
 80076a8:	46aa      	mov	sl, r5
 80076aa:	9602      	str	r6, [sp, #8]
 80076ac:	e7df      	b.n	800766e <_scanf_float+0x2de>
 80076ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	2965      	cmp	r1, #101	; 0x65
 80076b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80076ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80076be:	6123      	str	r3, [r4, #16]
 80076c0:	d00c      	beq.n	80076dc <_scanf_float+0x34c>
 80076c2:	2945      	cmp	r1, #69	; 0x45
 80076c4:	d00a      	beq.n	80076dc <_scanf_float+0x34c>
 80076c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076ca:	463a      	mov	r2, r7
 80076cc:	4640      	mov	r0, r8
 80076ce:	4798      	blx	r3
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	1eb5      	subs	r5, r6, #2
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076e0:	463a      	mov	r2, r7
 80076e2:	4640      	mov	r0, r8
 80076e4:	4798      	blx	r3
 80076e6:	462e      	mov	r6, r5
 80076e8:	6825      	ldr	r5, [r4, #0]
 80076ea:	f015 0510 	ands.w	r5, r5, #16
 80076ee:	d159      	bne.n	80077a4 <_scanf_float+0x414>
 80076f0:	7035      	strb	r5, [r6, #0]
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fc:	d11b      	bne.n	8007736 <_scanf_float+0x3a6>
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	454b      	cmp	r3, r9
 8007702:	eba3 0209 	sub.w	r2, r3, r9
 8007706:	d123      	bne.n	8007750 <_scanf_float+0x3c0>
 8007708:	2200      	movs	r2, #0
 800770a:	4659      	mov	r1, fp
 800770c:	4640      	mov	r0, r8
 800770e:	f000 ffc1 	bl	8008694 <_strtod_r>
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	f012 0f02 	tst.w	r2, #2
 800771a:	ec57 6b10 	vmov	r6, r7, d0
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	d021      	beq.n	8007766 <_scanf_float+0x3d6>
 8007722:	9903      	ldr	r1, [sp, #12]
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	600a      	str	r2, [r1, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	e9c3 6700 	strd	r6, r7, [r3]
 800772e:	68e3      	ldr	r3, [r4, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60e3      	str	r3, [r4, #12]
 8007734:	e66d      	b.n	8007412 <_scanf_float+0x82>
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0e5      	beq.n	8007708 <_scanf_float+0x378>
 800773c:	9905      	ldr	r1, [sp, #20]
 800773e:	230a      	movs	r3, #10
 8007740:	462a      	mov	r2, r5
 8007742:	3101      	adds	r1, #1
 8007744:	4640      	mov	r0, r8
 8007746:	f001 f82d 	bl	80087a4 <_strtol_r>
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	9e05      	ldr	r6, [sp, #20]
 800774e:	1ac2      	subs	r2, r0, r3
 8007750:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007754:	429e      	cmp	r6, r3
 8007756:	bf28      	it	cs
 8007758:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800775c:	4912      	ldr	r1, [pc, #72]	; (80077a8 <_scanf_float+0x418>)
 800775e:	4630      	mov	r0, r6
 8007760:	f000 f8ba 	bl	80078d8 <siprintf>
 8007764:	e7d0      	b.n	8007708 <_scanf_float+0x378>
 8007766:	9903      	ldr	r1, [sp, #12]
 8007768:	f012 0f04 	tst.w	r2, #4
 800776c:	f103 0204 	add.w	r2, r3, #4
 8007770:	600a      	str	r2, [r1, #0]
 8007772:	d1d9      	bne.n	8007728 <_scanf_float+0x398>
 8007774:	f8d3 8000 	ldr.w	r8, [r3]
 8007778:	ee10 2a10 	vmov	r2, s0
 800777c:	ee10 0a10 	vmov	r0, s0
 8007780:	463b      	mov	r3, r7
 8007782:	4639      	mov	r1, r7
 8007784:	f7f9 f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8007788:	b128      	cbz	r0, 8007796 <_scanf_float+0x406>
 800778a:	4808      	ldr	r0, [pc, #32]	; (80077ac <_scanf_float+0x41c>)
 800778c:	f000 f89e 	bl	80078cc <nanf>
 8007790:	ed88 0a00 	vstr	s0, [r8]
 8007794:	e7cb      	b.n	800772e <_scanf_float+0x39e>
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	f7f9 fa25 	bl	8000be8 <__aeabi_d2f>
 800779e:	f8c8 0000 	str.w	r0, [r8]
 80077a2:	e7c4      	b.n	800772e <_scanf_float+0x39e>
 80077a4:	2500      	movs	r5, #0
 80077a6:	e634      	b.n	8007412 <_scanf_float+0x82>
 80077a8:	0800c34a 	.word	0x0800c34a
 80077ac:	0800c7d3 	.word	0x0800c7d3

080077b0 <iprintf>:
 80077b0:	b40f      	push	{r0, r1, r2, r3}
 80077b2:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <iprintf+0x2c>)
 80077b4:	b513      	push	{r0, r1, r4, lr}
 80077b6:	681c      	ldr	r4, [r3, #0]
 80077b8:	b124      	cbz	r4, 80077c4 <iprintf+0x14>
 80077ba:	69a3      	ldr	r3, [r4, #24]
 80077bc:	b913      	cbnz	r3, 80077c4 <iprintf+0x14>
 80077be:	4620      	mov	r0, r4
 80077c0:	f002 f86a 	bl	8009898 <__sinit>
 80077c4:	ab05      	add	r3, sp, #20
 80077c6:	9a04      	ldr	r2, [sp, #16]
 80077c8:	68a1      	ldr	r1, [r4, #8]
 80077ca:	9301      	str	r3, [sp, #4]
 80077cc:	4620      	mov	r0, r4
 80077ce:	f003 fe19 	bl	800b404 <_vfiprintf_r>
 80077d2:	b002      	add	sp, #8
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	b004      	add	sp, #16
 80077da:	4770      	bx	lr
 80077dc:	20000040 	.word	0x20000040

080077e0 <_puts_r>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	460e      	mov	r6, r1
 80077e4:	4605      	mov	r5, r0
 80077e6:	b118      	cbz	r0, 80077f0 <_puts_r+0x10>
 80077e8:	6983      	ldr	r3, [r0, #24]
 80077ea:	b90b      	cbnz	r3, 80077f0 <_puts_r+0x10>
 80077ec:	f002 f854 	bl	8009898 <__sinit>
 80077f0:	69ab      	ldr	r3, [r5, #24]
 80077f2:	68ac      	ldr	r4, [r5, #8]
 80077f4:	b913      	cbnz	r3, 80077fc <_puts_r+0x1c>
 80077f6:	4628      	mov	r0, r5
 80077f8:	f002 f84e 	bl	8009898 <__sinit>
 80077fc:	4b2c      	ldr	r3, [pc, #176]	; (80078b0 <_puts_r+0xd0>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d120      	bne.n	8007844 <_puts_r+0x64>
 8007802:	686c      	ldr	r4, [r5, #4]
 8007804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007806:	07db      	lsls	r3, r3, #31
 8007808:	d405      	bmi.n	8007816 <_puts_r+0x36>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	0598      	lsls	r0, r3, #22
 800780e:	d402      	bmi.n	8007816 <_puts_r+0x36>
 8007810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007812:	f002 fc52 	bl	800a0ba <__retarget_lock_acquire_recursive>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	0719      	lsls	r1, r3, #28
 800781a:	d51d      	bpl.n	8007858 <_puts_r+0x78>
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	b1db      	cbz	r3, 8007858 <_puts_r+0x78>
 8007820:	3e01      	subs	r6, #1
 8007822:	68a3      	ldr	r3, [r4, #8]
 8007824:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007828:	3b01      	subs	r3, #1
 800782a:	60a3      	str	r3, [r4, #8]
 800782c:	bb39      	cbnz	r1, 800787e <_puts_r+0x9e>
 800782e:	2b00      	cmp	r3, #0
 8007830:	da38      	bge.n	80078a4 <_puts_r+0xc4>
 8007832:	4622      	mov	r2, r4
 8007834:	210a      	movs	r1, #10
 8007836:	4628      	mov	r0, r5
 8007838:	f000 ffb6 	bl	80087a8 <__swbuf_r>
 800783c:	3001      	adds	r0, #1
 800783e:	d011      	beq.n	8007864 <_puts_r+0x84>
 8007840:	250a      	movs	r5, #10
 8007842:	e011      	b.n	8007868 <_puts_r+0x88>
 8007844:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <_puts_r+0xd4>)
 8007846:	429c      	cmp	r4, r3
 8007848:	d101      	bne.n	800784e <_puts_r+0x6e>
 800784a:	68ac      	ldr	r4, [r5, #8]
 800784c:	e7da      	b.n	8007804 <_puts_r+0x24>
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <_puts_r+0xd8>)
 8007850:	429c      	cmp	r4, r3
 8007852:	bf08      	it	eq
 8007854:	68ec      	ldreq	r4, [r5, #12]
 8007856:	e7d5      	b.n	8007804 <_puts_r+0x24>
 8007858:	4621      	mov	r1, r4
 800785a:	4628      	mov	r0, r5
 800785c:	f001 f808 	bl	8008870 <__swsetup_r>
 8007860:	2800      	cmp	r0, #0
 8007862:	d0dd      	beq.n	8007820 <_puts_r+0x40>
 8007864:	f04f 35ff 	mov.w	r5, #4294967295
 8007868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800786a:	07da      	lsls	r2, r3, #31
 800786c:	d405      	bmi.n	800787a <_puts_r+0x9a>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	059b      	lsls	r3, r3, #22
 8007872:	d402      	bmi.n	800787a <_puts_r+0x9a>
 8007874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007876:	f002 fc21 	bl	800a0bc <__retarget_lock_release_recursive>
 800787a:	4628      	mov	r0, r5
 800787c:	bd70      	pop	{r4, r5, r6, pc}
 800787e:	2b00      	cmp	r3, #0
 8007880:	da04      	bge.n	800788c <_puts_r+0xac>
 8007882:	69a2      	ldr	r2, [r4, #24]
 8007884:	429a      	cmp	r2, r3
 8007886:	dc06      	bgt.n	8007896 <_puts_r+0xb6>
 8007888:	290a      	cmp	r1, #10
 800788a:	d004      	beq.n	8007896 <_puts_r+0xb6>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	7019      	strb	r1, [r3, #0]
 8007894:	e7c5      	b.n	8007822 <_puts_r+0x42>
 8007896:	4622      	mov	r2, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 ff85 	bl	80087a8 <__swbuf_r>
 800789e:	3001      	adds	r0, #1
 80078a0:	d1bf      	bne.n	8007822 <_puts_r+0x42>
 80078a2:	e7df      	b.n	8007864 <_puts_r+0x84>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	250a      	movs	r5, #10
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	6022      	str	r2, [r4, #0]
 80078ac:	701d      	strb	r5, [r3, #0]
 80078ae:	e7db      	b.n	8007868 <_puts_r+0x88>
 80078b0:	0800c554 	.word	0x0800c554
 80078b4:	0800c574 	.word	0x0800c574
 80078b8:	0800c534 	.word	0x0800c534

080078bc <puts>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <puts+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f7ff bf8d 	b.w	80077e0 <_puts_r>
 80078c6:	bf00      	nop
 80078c8:	20000040 	.word	0x20000040

080078cc <nanf>:
 80078cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078d4 <nanf+0x8>
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	7fc00000 	.word	0x7fc00000

080078d8 <siprintf>:
 80078d8:	b40e      	push	{r1, r2, r3}
 80078da:	b500      	push	{lr}
 80078dc:	b09c      	sub	sp, #112	; 0x70
 80078de:	ab1d      	add	r3, sp, #116	; 0x74
 80078e0:	9002      	str	r0, [sp, #8]
 80078e2:	9006      	str	r0, [sp, #24]
 80078e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078e8:	4809      	ldr	r0, [pc, #36]	; (8007910 <siprintf+0x38>)
 80078ea:	9107      	str	r1, [sp, #28]
 80078ec:	9104      	str	r1, [sp, #16]
 80078ee:	4909      	ldr	r1, [pc, #36]	; (8007914 <siprintf+0x3c>)
 80078f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f4:	9105      	str	r1, [sp, #20]
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	a902      	add	r1, sp, #8
 80078fc:	f003 fa86 	bl	800ae0c <_svfiprintf_r>
 8007900:	9b02      	ldr	r3, [sp, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	b01c      	add	sp, #112	; 0x70
 8007908:	f85d eb04 	ldr.w	lr, [sp], #4
 800790c:	b003      	add	sp, #12
 800790e:	4770      	bx	lr
 8007910:	20000040 	.word	0x20000040
 8007914:	ffff0208 	.word	0xffff0208

08007918 <siscanf>:
 8007918:	b40e      	push	{r1, r2, r3}
 800791a:	b510      	push	{r4, lr}
 800791c:	b09f      	sub	sp, #124	; 0x7c
 800791e:	ac21      	add	r4, sp, #132	; 0x84
 8007920:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007924:	f854 2b04 	ldr.w	r2, [r4], #4
 8007928:	9201      	str	r2, [sp, #4]
 800792a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800792e:	9004      	str	r0, [sp, #16]
 8007930:	9008      	str	r0, [sp, #32]
 8007932:	f7f8 fc4d 	bl	80001d0 <strlen>
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <siscanf+0x50>)
 8007938:	9005      	str	r0, [sp, #20]
 800793a:	9009      	str	r0, [sp, #36]	; 0x24
 800793c:	930d      	str	r3, [sp, #52]	; 0x34
 800793e:	480b      	ldr	r0, [pc, #44]	; (800796c <siscanf+0x54>)
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	6800      	ldr	r0, [r0, #0]
 8007944:	9403      	str	r4, [sp, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	9311      	str	r3, [sp, #68]	; 0x44
 800794a:	9316      	str	r3, [sp, #88]	; 0x58
 800794c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007950:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007954:	a904      	add	r1, sp, #16
 8007956:	4623      	mov	r3, r4
 8007958:	f003 fbb2 	bl	800b0c0 <__ssvfiscanf_r>
 800795c:	b01f      	add	sp, #124	; 0x7c
 800795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007962:	b003      	add	sp, #12
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	08007993 	.word	0x08007993
 800796c:	20000040 	.word	0x20000040

08007970 <__sread>:
 8007970:	b510      	push	{r4, lr}
 8007972:	460c      	mov	r4, r1
 8007974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007978:	f003 ffc6 	bl	800b908 <_read_r>
 800797c:	2800      	cmp	r0, #0
 800797e:	bfab      	itete	ge
 8007980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007982:	89a3      	ldrhlt	r3, [r4, #12]
 8007984:	181b      	addge	r3, r3, r0
 8007986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800798a:	bfac      	ite	ge
 800798c:	6563      	strge	r3, [r4, #84]	; 0x54
 800798e:	81a3      	strhlt	r3, [r4, #12]
 8007990:	bd10      	pop	{r4, pc}

08007992 <__seofread>:
 8007992:	2000      	movs	r0, #0
 8007994:	4770      	bx	lr

08007996 <__swrite>:
 8007996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	461f      	mov	r7, r3
 800799c:	898b      	ldrh	r3, [r1, #12]
 800799e:	05db      	lsls	r3, r3, #23
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d505      	bpl.n	80079b4 <__swrite+0x1e>
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f002 fb86 	bl	800a0c0 <_lseek_r>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	4628      	mov	r0, r5
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f000 bf3f 	b.w	800884c <_write_r>

080079ce <__sseek>:
 80079ce:	b510      	push	{r4, lr}
 80079d0:	460c      	mov	r4, r1
 80079d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d6:	f002 fb73 	bl	800a0c0 <_lseek_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	bf15      	itete	ne
 80079e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ea:	81a3      	strheq	r3, [r4, #12]
 80079ec:	bf18      	it	ne
 80079ee:	81a3      	strhne	r3, [r4, #12]
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <__sclose>:
 80079f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f6:	f000 bfa9 	b.w	800894c <_close_r>

080079fa <strncmp>:
 80079fa:	b510      	push	{r4, lr}
 80079fc:	b17a      	cbz	r2, 8007a1e <strncmp+0x24>
 80079fe:	4603      	mov	r3, r0
 8007a00:	3901      	subs	r1, #1
 8007a02:	1884      	adds	r4, r0, r2
 8007a04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a0c:	4290      	cmp	r0, r2
 8007a0e:	d101      	bne.n	8007a14 <strncmp+0x1a>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d101      	bne.n	8007a18 <strncmp+0x1e>
 8007a14:	1a80      	subs	r0, r0, r2
 8007a16:	bd10      	pop	{r4, pc}
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d1f3      	bne.n	8007a04 <strncmp+0xa>
 8007a1c:	e7fa      	b.n	8007a14 <strncmp+0x1a>
 8007a1e:	4610      	mov	r0, r2
 8007a20:	e7f9      	b.n	8007a16 <strncmp+0x1c>

08007a22 <strstr>:
 8007a22:	780a      	ldrb	r2, [r1, #0]
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	b96a      	cbnz	r2, 8007a44 <strstr+0x22>
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d109      	bne.n	8007a42 <strstr+0x20>
 8007a2e:	460c      	mov	r4, r1
 8007a30:	4605      	mov	r5, r0
 8007a32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0f6      	beq.n	8007a28 <strstr+0x6>
 8007a3a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a3e:	429e      	cmp	r6, r3
 8007a40:	d0f7      	beq.n	8007a32 <strstr+0x10>
 8007a42:	3001      	adds	r0, #1
 8007a44:	7803      	ldrb	r3, [r0, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ef      	bne.n	8007a2a <strstr+0x8>
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	e7ec      	b.n	8007a28 <strstr+0x6>

08007a4e <sulp>:
 8007a4e:	b570      	push	{r4, r5, r6, lr}
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	ec45 4b10 	vmov	d0, r4, r5
 8007a58:	4616      	mov	r6, r2
 8007a5a:	f002 ff35 	bl	800a8c8 <__ulp>
 8007a5e:	ec51 0b10 	vmov	r0, r1, d0
 8007a62:	b17e      	cbz	r6, 8007a84 <sulp+0x36>
 8007a64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dd09      	ble.n	8007a84 <sulp+0x36>
 8007a70:	051b      	lsls	r3, r3, #20
 8007a72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a76:	2400      	movs	r4, #0
 8007a78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	462b      	mov	r3, r5
 8007a80:	f7f8 fdba 	bl	80005f8 <__aeabi_dmul>
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a88 <_strtod_l>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	ed2d 8b02 	vpush	{d8}
 8007a90:	b09d      	sub	sp, #116	; 0x74
 8007a92:	461f      	mov	r7, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	9318      	str	r3, [sp, #96]	; 0x60
 8007a98:	4ba2      	ldr	r3, [pc, #648]	; (8007d24 <_strtod_l+0x29c>)
 8007a9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	4688      	mov	r8, r1
 8007aa6:	f7f8 fb93 	bl	80001d0 <strlen>
 8007aaa:	f04f 0a00 	mov.w	sl, #0
 8007aae:	4605      	mov	r5, r0
 8007ab0:	f04f 0b00 	mov.w	fp, #0
 8007ab4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aba:	781a      	ldrb	r2, [r3, #0]
 8007abc:	2a2b      	cmp	r2, #43	; 0x2b
 8007abe:	d04e      	beq.n	8007b5e <_strtod_l+0xd6>
 8007ac0:	d83b      	bhi.n	8007b3a <_strtod_l+0xb2>
 8007ac2:	2a0d      	cmp	r2, #13
 8007ac4:	d834      	bhi.n	8007b30 <_strtod_l+0xa8>
 8007ac6:	2a08      	cmp	r2, #8
 8007ac8:	d834      	bhi.n	8007b34 <_strtod_l+0xac>
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d03e      	beq.n	8007b4c <_strtod_l+0xc4>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007ad4:	7833      	ldrb	r3, [r6, #0]
 8007ad6:	2b30      	cmp	r3, #48	; 0x30
 8007ad8:	f040 80b0 	bne.w	8007c3c <_strtod_l+0x1b4>
 8007adc:	7873      	ldrb	r3, [r6, #1]
 8007ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ae2:	2b58      	cmp	r3, #88	; 0x58
 8007ae4:	d168      	bne.n	8007bb8 <_strtod_l+0x130>
 8007ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae8:	9301      	str	r3, [sp, #4]
 8007aea:	ab18      	add	r3, sp, #96	; 0x60
 8007aec:	9702      	str	r7, [sp, #8]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4a8d      	ldr	r2, [pc, #564]	; (8007d28 <_strtod_l+0x2a0>)
 8007af2:	ab19      	add	r3, sp, #100	; 0x64
 8007af4:	a917      	add	r1, sp, #92	; 0x5c
 8007af6:	4620      	mov	r0, r4
 8007af8:	f001 ffd2 	bl	8009aa0 <__gethex>
 8007afc:	f010 0707 	ands.w	r7, r0, #7
 8007b00:	4605      	mov	r5, r0
 8007b02:	d005      	beq.n	8007b10 <_strtod_l+0x88>
 8007b04:	2f06      	cmp	r7, #6
 8007b06:	d12c      	bne.n	8007b62 <_strtod_l+0xda>
 8007b08:	3601      	adds	r6, #1
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f040 8590 	bne.w	8008638 <_strtod_l+0xbb0>
 8007b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1a:	b1eb      	cbz	r3, 8007b58 <_strtod_l+0xd0>
 8007b1c:	4652      	mov	r2, sl
 8007b1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b22:	ec43 2b10 	vmov	d0, r2, r3
 8007b26:	b01d      	add	sp, #116	; 0x74
 8007b28:	ecbd 8b02 	vpop	{d8}
 8007b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b30:	2a20      	cmp	r2, #32
 8007b32:	d1cc      	bne.n	8007ace <_strtod_l+0x46>
 8007b34:	3301      	adds	r3, #1
 8007b36:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b38:	e7be      	b.n	8007ab8 <_strtod_l+0x30>
 8007b3a:	2a2d      	cmp	r2, #45	; 0x2d
 8007b3c:	d1c7      	bne.n	8007ace <_strtod_l+0x46>
 8007b3e:	2201      	movs	r2, #1
 8007b40:	920a      	str	r2, [sp, #40]	; 0x28
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1c2      	bne.n	8007ad2 <_strtod_l+0x4a>
 8007b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 856e 	bne.w	8008634 <_strtod_l+0xbac>
 8007b58:	4652      	mov	r2, sl
 8007b5a:	465b      	mov	r3, fp
 8007b5c:	e7e1      	b.n	8007b22 <_strtod_l+0x9a>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	e7ee      	b.n	8007b40 <_strtod_l+0xb8>
 8007b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b64:	b13a      	cbz	r2, 8007b76 <_strtod_l+0xee>
 8007b66:	2135      	movs	r1, #53	; 0x35
 8007b68:	a81a      	add	r0, sp, #104	; 0x68
 8007b6a:	f002 ffb8 	bl	800aade <__copybits>
 8007b6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b70:	4620      	mov	r0, r4
 8007b72:	f002 fb77 	bl	800a264 <_Bfree>
 8007b76:	3f01      	subs	r7, #1
 8007b78:	2f04      	cmp	r7, #4
 8007b7a:	d806      	bhi.n	8007b8a <_strtod_l+0x102>
 8007b7c:	e8df f007 	tbb	[pc, r7]
 8007b80:	1714030a 	.word	0x1714030a
 8007b84:	0a          	.byte	0x0a
 8007b85:	00          	.byte	0x00
 8007b86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b8a:	0728      	lsls	r0, r5, #28
 8007b8c:	d5c0      	bpl.n	8007b10 <_strtod_l+0x88>
 8007b8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b92:	e7bd      	b.n	8007b10 <_strtod_l+0x88>
 8007b94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ba6:	e7f0      	b.n	8007b8a <_strtod_l+0x102>
 8007ba8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007d2c <_strtod_l+0x2a4>
 8007bac:	e7ed      	b.n	8007b8a <_strtod_l+0x102>
 8007bae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007bb2:	f04f 3aff 	mov.w	sl, #4294967295
 8007bb6:	e7e8      	b.n	8007b8a <_strtod_l+0x102>
 8007bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	2b30      	cmp	r3, #48	; 0x30
 8007bc2:	d0f9      	beq.n	8007bb8 <_strtod_l+0x130>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0a3      	beq.n	8007b10 <_strtod_l+0x88>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bd2:	9308      	str	r3, [sp, #32]
 8007bd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8007bd8:	464f      	mov	r7, r9
 8007bda:	220a      	movs	r2, #10
 8007bdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007bde:	7806      	ldrb	r6, [r0, #0]
 8007be0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007be4:	b2d9      	uxtb	r1, r3
 8007be6:	2909      	cmp	r1, #9
 8007be8:	d92a      	bls.n	8007c40 <_strtod_l+0x1b8>
 8007bea:	9905      	ldr	r1, [sp, #20]
 8007bec:	462a      	mov	r2, r5
 8007bee:	f7ff ff04 	bl	80079fa <strncmp>
 8007bf2:	b398      	cbz	r0, 8007c5c <_strtod_l+0x1d4>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463d      	mov	r5, r7
 8007bfa:	9005      	str	r0, [sp, #20]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2a65      	cmp	r2, #101	; 0x65
 8007c00:	d001      	beq.n	8007c06 <_strtod_l+0x17e>
 8007c02:	2a45      	cmp	r2, #69	; 0x45
 8007c04:	d118      	bne.n	8007c38 <_strtod_l+0x1b0>
 8007c06:	b91d      	cbnz	r5, 8007c10 <_strtod_l+0x188>
 8007c08:	9a04      	ldr	r2, [sp, #16]
 8007c0a:	4302      	orrs	r2, r0
 8007c0c:	d09e      	beq.n	8007b4c <_strtod_l+0xc4>
 8007c0e:	2500      	movs	r5, #0
 8007c10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007c14:	f108 0201 	add.w	r2, r8, #1
 8007c18:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007c1e:	2a2b      	cmp	r2, #43	; 0x2b
 8007c20:	d075      	beq.n	8007d0e <_strtod_l+0x286>
 8007c22:	2a2d      	cmp	r2, #45	; 0x2d
 8007c24:	d07b      	beq.n	8007d1e <_strtod_l+0x296>
 8007c26:	f04f 0c00 	mov.w	ip, #0
 8007c2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c2e:	2909      	cmp	r1, #9
 8007c30:	f240 8082 	bls.w	8007d38 <_strtod_l+0x2b0>
 8007c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c38:	2600      	movs	r6, #0
 8007c3a:	e09d      	b.n	8007d78 <_strtod_l+0x2f0>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e7c4      	b.n	8007bca <_strtod_l+0x142>
 8007c40:	2f08      	cmp	r7, #8
 8007c42:	bfd8      	it	le
 8007c44:	9907      	ldrle	r1, [sp, #28]
 8007c46:	f100 0001 	add.w	r0, r0, #1
 8007c4a:	bfda      	itte	le
 8007c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c50:	9307      	strle	r3, [sp, #28]
 8007c52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007c56:	3701      	adds	r7, #1
 8007c58:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c5a:	e7bf      	b.n	8007bdc <_strtod_l+0x154>
 8007c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c5e:	195a      	adds	r2, r3, r5
 8007c60:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c62:	5d5a      	ldrb	r2, [r3, r5]
 8007c64:	2f00      	cmp	r7, #0
 8007c66:	d037      	beq.n	8007cd8 <_strtod_l+0x250>
 8007c68:	9005      	str	r0, [sp, #20]
 8007c6a:	463d      	mov	r5, r7
 8007c6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c70:	2b09      	cmp	r3, #9
 8007c72:	d912      	bls.n	8007c9a <_strtod_l+0x212>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e7c2      	b.n	8007bfe <_strtod_l+0x176>
 8007c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c7e:	785a      	ldrb	r2, [r3, #1]
 8007c80:	3001      	adds	r0, #1
 8007c82:	2a30      	cmp	r2, #48	; 0x30
 8007c84:	d0f8      	beq.n	8007c78 <_strtod_l+0x1f0>
 8007c86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	f200 84d9 	bhi.w	8008642 <_strtod_l+0xbba>
 8007c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c92:	9005      	str	r0, [sp, #20]
 8007c94:	2000      	movs	r0, #0
 8007c96:	9308      	str	r3, [sp, #32]
 8007c98:	4605      	mov	r5, r0
 8007c9a:	3a30      	subs	r2, #48	; 0x30
 8007c9c:	f100 0301 	add.w	r3, r0, #1
 8007ca0:	d014      	beq.n	8007ccc <_strtod_l+0x244>
 8007ca2:	9905      	ldr	r1, [sp, #20]
 8007ca4:	4419      	add	r1, r3
 8007ca6:	9105      	str	r1, [sp, #20]
 8007ca8:	462b      	mov	r3, r5
 8007caa:	eb00 0e05 	add.w	lr, r0, r5
 8007cae:	210a      	movs	r1, #10
 8007cb0:	4573      	cmp	r3, lr
 8007cb2:	d113      	bne.n	8007cdc <_strtod_l+0x254>
 8007cb4:	182b      	adds	r3, r5, r0
 8007cb6:	2b08      	cmp	r3, #8
 8007cb8:	f105 0501 	add.w	r5, r5, #1
 8007cbc:	4405      	add	r5, r0
 8007cbe:	dc1c      	bgt.n	8007cfa <_strtod_l+0x272>
 8007cc0:	9907      	ldr	r1, [sp, #28]
 8007cc2:	230a      	movs	r3, #10
 8007cc4:	fb03 2301 	mla	r3, r3, r1, r2
 8007cc8:	9307      	str	r3, [sp, #28]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cce:	1c51      	adds	r1, r2, #1
 8007cd0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cd2:	7852      	ldrb	r2, [r2, #1]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	e7c9      	b.n	8007c6c <_strtod_l+0x1e4>
 8007cd8:	4638      	mov	r0, r7
 8007cda:	e7d2      	b.n	8007c82 <_strtod_l+0x1fa>
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	dc04      	bgt.n	8007cea <_strtod_l+0x262>
 8007ce0:	9e07      	ldr	r6, [sp, #28]
 8007ce2:	434e      	muls	r6, r1
 8007ce4:	9607      	str	r6, [sp, #28]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	e7e2      	b.n	8007cb0 <_strtod_l+0x228>
 8007cea:	f103 0c01 	add.w	ip, r3, #1
 8007cee:	f1bc 0f10 	cmp.w	ip, #16
 8007cf2:	bfd8      	it	le
 8007cf4:	fb01 f909 	mulle.w	r9, r1, r9
 8007cf8:	e7f5      	b.n	8007ce6 <_strtod_l+0x25e>
 8007cfa:	2d10      	cmp	r5, #16
 8007cfc:	bfdc      	itt	le
 8007cfe:	230a      	movle	r3, #10
 8007d00:	fb03 2909 	mlale	r9, r3, r9, r2
 8007d04:	e7e1      	b.n	8007cca <_strtod_l+0x242>
 8007d06:	2300      	movs	r3, #0
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e77c      	b.n	8007c08 <_strtod_l+0x180>
 8007d0e:	f04f 0c00 	mov.w	ip, #0
 8007d12:	f108 0202 	add.w	r2, r8, #2
 8007d16:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007d1c:	e785      	b.n	8007c2a <_strtod_l+0x1a2>
 8007d1e:	f04f 0c01 	mov.w	ip, #1
 8007d22:	e7f6      	b.n	8007d12 <_strtod_l+0x28a>
 8007d24:	0800c5fc 	.word	0x0800c5fc
 8007d28:	0800c350 	.word	0x0800c350
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d32:	1c51      	adds	r1, r2, #1
 8007d34:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d36:	7852      	ldrb	r2, [r2, #1]
 8007d38:	2a30      	cmp	r2, #48	; 0x30
 8007d3a:	d0f9      	beq.n	8007d30 <_strtod_l+0x2a8>
 8007d3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d40:	2908      	cmp	r1, #8
 8007d42:	f63f af79 	bhi.w	8007c38 <_strtod_l+0x1b0>
 8007d46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d4c:	9206      	str	r2, [sp, #24]
 8007d4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d50:	1c51      	adds	r1, r2, #1
 8007d52:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d54:	7852      	ldrb	r2, [r2, #1]
 8007d56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007d5a:	2e09      	cmp	r6, #9
 8007d5c:	d937      	bls.n	8007dce <_strtod_l+0x346>
 8007d5e:	9e06      	ldr	r6, [sp, #24]
 8007d60:	1b89      	subs	r1, r1, r6
 8007d62:	2908      	cmp	r1, #8
 8007d64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d68:	dc02      	bgt.n	8007d70 <_strtod_l+0x2e8>
 8007d6a:	4576      	cmp	r6, lr
 8007d6c:	bfa8      	it	ge
 8007d6e:	4676      	movge	r6, lr
 8007d70:	f1bc 0f00 	cmp.w	ip, #0
 8007d74:	d000      	beq.n	8007d78 <_strtod_l+0x2f0>
 8007d76:	4276      	negs	r6, r6
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	d14d      	bne.n	8007e18 <_strtod_l+0x390>
 8007d7c:	9904      	ldr	r1, [sp, #16]
 8007d7e:	4301      	orrs	r1, r0
 8007d80:	f47f aec6 	bne.w	8007b10 <_strtod_l+0x88>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f47f aee1 	bne.w	8007b4c <_strtod_l+0xc4>
 8007d8a:	2a69      	cmp	r2, #105	; 0x69
 8007d8c:	d027      	beq.n	8007dde <_strtod_l+0x356>
 8007d8e:	dc24      	bgt.n	8007dda <_strtod_l+0x352>
 8007d90:	2a49      	cmp	r2, #73	; 0x49
 8007d92:	d024      	beq.n	8007dde <_strtod_l+0x356>
 8007d94:	2a4e      	cmp	r2, #78	; 0x4e
 8007d96:	f47f aed9 	bne.w	8007b4c <_strtod_l+0xc4>
 8007d9a:	499f      	ldr	r1, [pc, #636]	; (8008018 <_strtod_l+0x590>)
 8007d9c:	a817      	add	r0, sp, #92	; 0x5c
 8007d9e:	f002 f8d7 	bl	8009f50 <__match>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f43f aed2 	beq.w	8007b4c <_strtod_l+0xc4>
 8007da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b28      	cmp	r3, #40	; 0x28
 8007dae:	d12d      	bne.n	8007e0c <_strtod_l+0x384>
 8007db0:	499a      	ldr	r1, [pc, #616]	; (800801c <_strtod_l+0x594>)
 8007db2:	aa1a      	add	r2, sp, #104	; 0x68
 8007db4:	a817      	add	r0, sp, #92	; 0x5c
 8007db6:	f002 f8df 	bl	8009f78 <__hexnan>
 8007dba:	2805      	cmp	r0, #5
 8007dbc:	d126      	bne.n	8007e0c <_strtod_l+0x384>
 8007dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007dc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007dc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007dcc:	e6a0      	b.n	8007b10 <_strtod_l+0x88>
 8007dce:	210a      	movs	r1, #10
 8007dd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007dd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007dd8:	e7b9      	b.n	8007d4e <_strtod_l+0x2c6>
 8007dda:	2a6e      	cmp	r2, #110	; 0x6e
 8007ddc:	e7db      	b.n	8007d96 <_strtod_l+0x30e>
 8007dde:	4990      	ldr	r1, [pc, #576]	; (8008020 <_strtod_l+0x598>)
 8007de0:	a817      	add	r0, sp, #92	; 0x5c
 8007de2:	f002 f8b5 	bl	8009f50 <__match>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f aeb0 	beq.w	8007b4c <_strtod_l+0xc4>
 8007dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dee:	498d      	ldr	r1, [pc, #564]	; (8008024 <_strtod_l+0x59c>)
 8007df0:	3b01      	subs	r3, #1
 8007df2:	a817      	add	r0, sp, #92	; 0x5c
 8007df4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007df6:	f002 f8ab 	bl	8009f50 <__match>
 8007dfa:	b910      	cbnz	r0, 8007e02 <_strtod_l+0x37a>
 8007dfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dfe:	3301      	adds	r3, #1
 8007e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008034 <_strtod_l+0x5ac>
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	e681      	b.n	8007b10 <_strtod_l+0x88>
 8007e0c:	4886      	ldr	r0, [pc, #536]	; (8008028 <_strtod_l+0x5a0>)
 8007e0e:	f003 fd8f 	bl	800b930 <nan>
 8007e12:	ec5b ab10 	vmov	sl, fp, d0
 8007e16:	e67b      	b.n	8007b10 <_strtod_l+0x88>
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	9807      	ldr	r0, [sp, #28]
 8007e1c:	1af3      	subs	r3, r6, r3
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	bf08      	it	eq
 8007e22:	462f      	moveq	r7, r5
 8007e24:	2d10      	cmp	r5, #16
 8007e26:	9306      	str	r3, [sp, #24]
 8007e28:	46a8      	mov	r8, r5
 8007e2a:	bfa8      	it	ge
 8007e2c:	f04f 0810 	movge.w	r8, #16
 8007e30:	f7f8 fb68 	bl	8000504 <__aeabi_ui2d>
 8007e34:	2d09      	cmp	r5, #9
 8007e36:	4682      	mov	sl, r0
 8007e38:	468b      	mov	fp, r1
 8007e3a:	dd13      	ble.n	8007e64 <_strtod_l+0x3dc>
 8007e3c:	4b7b      	ldr	r3, [pc, #492]	; (800802c <_strtod_l+0x5a4>)
 8007e3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e46:	f7f8 fbd7 	bl	80005f8 <__aeabi_dmul>
 8007e4a:	4682      	mov	sl, r0
 8007e4c:	4648      	mov	r0, r9
 8007e4e:	468b      	mov	fp, r1
 8007e50:	f7f8 fb58 	bl	8000504 <__aeabi_ui2d>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4650      	mov	r0, sl
 8007e5a:	4659      	mov	r1, fp
 8007e5c:	f7f8 fa16 	bl	800028c <__adddf3>
 8007e60:	4682      	mov	sl, r0
 8007e62:	468b      	mov	fp, r1
 8007e64:	2d0f      	cmp	r5, #15
 8007e66:	dc38      	bgt.n	8007eda <_strtod_l+0x452>
 8007e68:	9b06      	ldr	r3, [sp, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f43f ae50 	beq.w	8007b10 <_strtod_l+0x88>
 8007e70:	dd24      	ble.n	8007ebc <_strtod_l+0x434>
 8007e72:	2b16      	cmp	r3, #22
 8007e74:	dc0b      	bgt.n	8007e8e <_strtod_l+0x406>
 8007e76:	496d      	ldr	r1, [pc, #436]	; (800802c <_strtod_l+0x5a4>)
 8007e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e80:	4652      	mov	r2, sl
 8007e82:	465b      	mov	r3, fp
 8007e84:	f7f8 fbb8 	bl	80005f8 <__aeabi_dmul>
 8007e88:	4682      	mov	sl, r0
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	e640      	b.n	8007b10 <_strtod_l+0x88>
 8007e8e:	9a06      	ldr	r2, [sp, #24]
 8007e90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e94:	4293      	cmp	r3, r2
 8007e96:	db20      	blt.n	8007eda <_strtod_l+0x452>
 8007e98:	4c64      	ldr	r4, [pc, #400]	; (800802c <_strtod_l+0x5a4>)
 8007e9a:	f1c5 050f 	rsb	r5, r5, #15
 8007e9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eaa:	f7f8 fba5 	bl	80005f8 <__aeabi_dmul>
 8007eae:	9b06      	ldr	r3, [sp, #24]
 8007eb0:	1b5d      	subs	r5, r3, r5
 8007eb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007eba:	e7e3      	b.n	8007e84 <_strtod_l+0x3fc>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	3316      	adds	r3, #22
 8007ec0:	db0b      	blt.n	8007eda <_strtod_l+0x452>
 8007ec2:	9b05      	ldr	r3, [sp, #20]
 8007ec4:	1b9e      	subs	r6, r3, r6
 8007ec6:	4b59      	ldr	r3, [pc, #356]	; (800802c <_strtod_l+0x5a4>)
 8007ec8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007ecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	f7f8 fcba 	bl	800084c <__aeabi_ddiv>
 8007ed8:	e7d6      	b.n	8007e88 <_strtod_l+0x400>
 8007eda:	9b06      	ldr	r3, [sp, #24]
 8007edc:	eba5 0808 	sub.w	r8, r5, r8
 8007ee0:	4498      	add	r8, r3
 8007ee2:	f1b8 0f00 	cmp.w	r8, #0
 8007ee6:	dd74      	ble.n	8007fd2 <_strtod_l+0x54a>
 8007ee8:	f018 030f 	ands.w	r3, r8, #15
 8007eec:	d00a      	beq.n	8007f04 <_strtod_l+0x47c>
 8007eee:	494f      	ldr	r1, [pc, #316]	; (800802c <_strtod_l+0x5a4>)
 8007ef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	465b      	mov	r3, fp
 8007ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efc:	f7f8 fb7c 	bl	80005f8 <__aeabi_dmul>
 8007f00:	4682      	mov	sl, r0
 8007f02:	468b      	mov	fp, r1
 8007f04:	f038 080f 	bics.w	r8, r8, #15
 8007f08:	d04f      	beq.n	8007faa <_strtod_l+0x522>
 8007f0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007f0e:	dd22      	ble.n	8007f56 <_strtod_l+0x4ce>
 8007f10:	2500      	movs	r5, #0
 8007f12:	462e      	mov	r6, r5
 8007f14:	9507      	str	r5, [sp, #28]
 8007f16:	9505      	str	r5, [sp, #20]
 8007f18:	2322      	movs	r3, #34	; 0x22
 8007f1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008034 <_strtod_l+0x5ac>
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	f04f 0a00 	mov.w	sl, #0
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f43f adf2 	beq.w	8007b10 <_strtod_l+0x88>
 8007f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f002 f998 	bl	800a264 <_Bfree>
 8007f34:	9905      	ldr	r1, [sp, #20]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f002 f994 	bl	800a264 <_Bfree>
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f002 f990 	bl	800a264 <_Bfree>
 8007f44:	9907      	ldr	r1, [sp, #28]
 8007f46:	4620      	mov	r0, r4
 8007f48:	f002 f98c 	bl	800a264 <_Bfree>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f002 f988 	bl	800a264 <_Bfree>
 8007f54:	e5dc      	b.n	8007b10 <_strtod_l+0x88>
 8007f56:	4b36      	ldr	r3, [pc, #216]	; (8008030 <_strtod_l+0x5a8>)
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f60:	4650      	mov	r0, sl
 8007f62:	4659      	mov	r1, fp
 8007f64:	4699      	mov	r9, r3
 8007f66:	f1b8 0f01 	cmp.w	r8, #1
 8007f6a:	dc21      	bgt.n	8007fb0 <_strtod_l+0x528>
 8007f6c:	b10b      	cbz	r3, 8007f72 <_strtod_l+0x4ea>
 8007f6e:	4682      	mov	sl, r0
 8007f70:	468b      	mov	fp, r1
 8007f72:	4b2f      	ldr	r3, [pc, #188]	; (8008030 <_strtod_l+0x5a8>)
 8007f74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	465b      	mov	r3, fp
 8007f80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f84:	f7f8 fb38 	bl	80005f8 <__aeabi_dmul>
 8007f88:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <_strtod_l+0x5ac>)
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	400b      	ands	r3, r1
 8007f8e:	492a      	ldr	r1, [pc, #168]	; (8008038 <_strtod_l+0x5b0>)
 8007f90:	428b      	cmp	r3, r1
 8007f92:	4682      	mov	sl, r0
 8007f94:	d8bc      	bhi.n	8007f10 <_strtod_l+0x488>
 8007f96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f9a:	428b      	cmp	r3, r1
 8007f9c:	bf86      	itte	hi
 8007f9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800803c <_strtod_l+0x5b4>
 8007fa2:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007faa:	2300      	movs	r3, #0
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	e084      	b.n	80080ba <_strtod_l+0x632>
 8007fb0:	f018 0f01 	tst.w	r8, #1
 8007fb4:	d005      	beq.n	8007fc2 <_strtod_l+0x53a>
 8007fb6:	9b04      	ldr	r3, [sp, #16]
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 fb1c 	bl	80005f8 <__aeabi_dmul>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	9a04      	ldr	r2, [sp, #16]
 8007fc4:	3208      	adds	r2, #8
 8007fc6:	f109 0901 	add.w	r9, r9, #1
 8007fca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fce:	9204      	str	r2, [sp, #16]
 8007fd0:	e7c9      	b.n	8007f66 <_strtod_l+0x4de>
 8007fd2:	d0ea      	beq.n	8007faa <_strtod_l+0x522>
 8007fd4:	f1c8 0800 	rsb	r8, r8, #0
 8007fd8:	f018 020f 	ands.w	r2, r8, #15
 8007fdc:	d00a      	beq.n	8007ff4 <_strtod_l+0x56c>
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <_strtod_l+0x5a4>)
 8007fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f7f8 fc2e 	bl	800084c <__aeabi_ddiv>
 8007ff0:	4682      	mov	sl, r0
 8007ff2:	468b      	mov	fp, r1
 8007ff4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ff8:	d0d7      	beq.n	8007faa <_strtod_l+0x522>
 8007ffa:	f1b8 0f1f 	cmp.w	r8, #31
 8007ffe:	dd1f      	ble.n	8008040 <_strtod_l+0x5b8>
 8008000:	2500      	movs	r5, #0
 8008002:	462e      	mov	r6, r5
 8008004:	9507      	str	r5, [sp, #28]
 8008006:	9505      	str	r5, [sp, #20]
 8008008:	2322      	movs	r3, #34	; 0x22
 800800a:	f04f 0a00 	mov.w	sl, #0
 800800e:	f04f 0b00 	mov.w	fp, #0
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	e786      	b.n	8007f24 <_strtod_l+0x49c>
 8008016:	bf00      	nop
 8008018:	0800c325 	.word	0x0800c325
 800801c:	0800c364 	.word	0x0800c364
 8008020:	0800c31d 	.word	0x0800c31d
 8008024:	0800c4a4 	.word	0x0800c4a4
 8008028:	0800c7d3 	.word	0x0800c7d3
 800802c:	0800c698 	.word	0x0800c698
 8008030:	0800c670 	.word	0x0800c670
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	7ca00000 	.word	0x7ca00000
 800803c:	7fefffff 	.word	0x7fefffff
 8008040:	f018 0310 	ands.w	r3, r8, #16
 8008044:	bf18      	it	ne
 8008046:	236a      	movne	r3, #106	; 0x6a
 8008048:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80083f8 <_strtod_l+0x970>
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	4650      	mov	r0, sl
 8008050:	4659      	mov	r1, fp
 8008052:	2300      	movs	r3, #0
 8008054:	f018 0f01 	tst.w	r8, #1
 8008058:	d004      	beq.n	8008064 <_strtod_l+0x5dc>
 800805a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	2301      	movs	r3, #1
 8008064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008068:	f109 0908 	add.w	r9, r9, #8
 800806c:	d1f2      	bne.n	8008054 <_strtod_l+0x5cc>
 800806e:	b10b      	cbz	r3, 8008074 <_strtod_l+0x5ec>
 8008070:	4682      	mov	sl, r0
 8008072:	468b      	mov	fp, r1
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	b1c3      	cbz	r3, 80080aa <_strtod_l+0x622>
 8008078:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800807c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008080:	2b00      	cmp	r3, #0
 8008082:	4659      	mov	r1, fp
 8008084:	dd11      	ble.n	80080aa <_strtod_l+0x622>
 8008086:	2b1f      	cmp	r3, #31
 8008088:	f340 8124 	ble.w	80082d4 <_strtod_l+0x84c>
 800808c:	2b34      	cmp	r3, #52	; 0x34
 800808e:	bfde      	ittt	le
 8008090:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008094:	f04f 33ff 	movle.w	r3, #4294967295
 8008098:	fa03 f202 	lslle.w	r2, r3, r2
 800809c:	f04f 0a00 	mov.w	sl, #0
 80080a0:	bfcc      	ite	gt
 80080a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80080a6:	ea02 0b01 	andle.w	fp, r2, r1
 80080aa:	2200      	movs	r2, #0
 80080ac:	2300      	movs	r3, #0
 80080ae:	4650      	mov	r0, sl
 80080b0:	4659      	mov	r1, fp
 80080b2:	f7f8 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d1a2      	bne.n	8008000 <_strtod_l+0x578>
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	9908      	ldr	r1, [sp, #32]
 80080c0:	462b      	mov	r3, r5
 80080c2:	463a      	mov	r2, r7
 80080c4:	4620      	mov	r0, r4
 80080c6:	f002 f935 	bl	800a334 <__s2b>
 80080ca:	9007      	str	r0, [sp, #28]
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f af1f 	beq.w	8007f10 <_strtod_l+0x488>
 80080d2:	9b05      	ldr	r3, [sp, #20]
 80080d4:	1b9e      	subs	r6, r3, r6
 80080d6:	9b06      	ldr	r3, [sp, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bfb4      	ite	lt
 80080dc:	4633      	movlt	r3, r6
 80080de:	2300      	movge	r3, #0
 80080e0:	930c      	str	r3, [sp, #48]	; 0x30
 80080e2:	9b06      	ldr	r3, [sp, #24]
 80080e4:	2500      	movs	r5, #0
 80080e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080ea:	9312      	str	r3, [sp, #72]	; 0x48
 80080ec:	462e      	mov	r6, r5
 80080ee:	9b07      	ldr	r3, [sp, #28]
 80080f0:	4620      	mov	r0, r4
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	f002 f876 	bl	800a1e4 <_Balloc>
 80080f8:	9005      	str	r0, [sp, #20]
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f43f af0c 	beq.w	8007f18 <_strtod_l+0x490>
 8008100:	9b07      	ldr	r3, [sp, #28]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	3202      	adds	r2, #2
 8008106:	f103 010c 	add.w	r1, r3, #12
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	300c      	adds	r0, #12
 800810e:	f7fe fcbf 	bl	8006a90 <memcpy>
 8008112:	ec4b ab10 	vmov	d0, sl, fp
 8008116:	aa1a      	add	r2, sp, #104	; 0x68
 8008118:	a919      	add	r1, sp, #100	; 0x64
 800811a:	4620      	mov	r0, r4
 800811c:	f002 fc50 	bl	800a9c0 <__d2b>
 8008120:	ec4b ab18 	vmov	d8, sl, fp
 8008124:	9018      	str	r0, [sp, #96]	; 0x60
 8008126:	2800      	cmp	r0, #0
 8008128:	f43f aef6 	beq.w	8007f18 <_strtod_l+0x490>
 800812c:	2101      	movs	r1, #1
 800812e:	4620      	mov	r0, r4
 8008130:	f002 f99a 	bl	800a468 <__i2b>
 8008134:	4606      	mov	r6, r0
 8008136:	2800      	cmp	r0, #0
 8008138:	f43f aeee 	beq.w	8007f18 <_strtod_l+0x490>
 800813c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800813e:	9904      	ldr	r1, [sp, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bfab      	itete	ge
 8008144:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008148:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800814a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800814e:	bfac      	ite	ge
 8008150:	eb03 0902 	addge.w	r9, r3, r2
 8008154:	1ad7      	sublt	r7, r2, r3
 8008156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008158:	eba3 0801 	sub.w	r8, r3, r1
 800815c:	4490      	add	r8, r2
 800815e:	4ba1      	ldr	r3, [pc, #644]	; (80083e4 <_strtod_l+0x95c>)
 8008160:	f108 38ff 	add.w	r8, r8, #4294967295
 8008164:	4598      	cmp	r8, r3
 8008166:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800816a:	f280 80c7 	bge.w	80082fc <_strtod_l+0x874>
 800816e:	eba3 0308 	sub.w	r3, r3, r8
 8008172:	2b1f      	cmp	r3, #31
 8008174:	eba2 0203 	sub.w	r2, r2, r3
 8008178:	f04f 0101 	mov.w	r1, #1
 800817c:	f300 80b1 	bgt.w	80082e2 <_strtod_l+0x85a>
 8008180:	fa01 f303 	lsl.w	r3, r1, r3
 8008184:	930d      	str	r3, [sp, #52]	; 0x34
 8008186:	2300      	movs	r3, #0
 8008188:	9308      	str	r3, [sp, #32]
 800818a:	eb09 0802 	add.w	r8, r9, r2
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	45c1      	cmp	r9, r8
 8008192:	4417      	add	r7, r2
 8008194:	441f      	add	r7, r3
 8008196:	464b      	mov	r3, r9
 8008198:	bfa8      	it	ge
 800819a:	4643      	movge	r3, r8
 800819c:	42bb      	cmp	r3, r7
 800819e:	bfa8      	it	ge
 80081a0:	463b      	movge	r3, r7
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfc2      	ittt	gt
 80081a6:	eba8 0803 	subgt.w	r8, r8, r3
 80081aa:	1aff      	subgt	r7, r7, r3
 80081ac:	eba9 0903 	subgt.w	r9, r9, r3
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dd17      	ble.n	80081e6 <_strtod_l+0x75e>
 80081b6:	4631      	mov	r1, r6
 80081b8:	461a      	mov	r2, r3
 80081ba:	4620      	mov	r0, r4
 80081bc:	f002 fa14 	bl	800a5e8 <__pow5mult>
 80081c0:	4606      	mov	r6, r0
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f43f aea8 	beq.w	8007f18 <_strtod_l+0x490>
 80081c8:	4601      	mov	r1, r0
 80081ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081cc:	4620      	mov	r0, r4
 80081ce:	f002 f961 	bl	800a494 <__multiply>
 80081d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f43f ae9f 	beq.w	8007f18 <_strtod_l+0x490>
 80081da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081dc:	4620      	mov	r0, r4
 80081de:	f002 f841 	bl	800a264 <_Bfree>
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	9318      	str	r3, [sp, #96]	; 0x60
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	f300 808c 	bgt.w	8008306 <_strtod_l+0x87e>
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	dd08      	ble.n	8008206 <_strtod_l+0x77e>
 80081f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081f6:	9905      	ldr	r1, [sp, #20]
 80081f8:	4620      	mov	r0, r4
 80081fa:	f002 f9f5 	bl	800a5e8 <__pow5mult>
 80081fe:	9005      	str	r0, [sp, #20]
 8008200:	2800      	cmp	r0, #0
 8008202:	f43f ae89 	beq.w	8007f18 <_strtod_l+0x490>
 8008206:	2f00      	cmp	r7, #0
 8008208:	dd08      	ble.n	800821c <_strtod_l+0x794>
 800820a:	9905      	ldr	r1, [sp, #20]
 800820c:	463a      	mov	r2, r7
 800820e:	4620      	mov	r0, r4
 8008210:	f002 fa44 	bl	800a69c <__lshift>
 8008214:	9005      	str	r0, [sp, #20]
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f ae7e 	beq.w	8007f18 <_strtod_l+0x490>
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	dd08      	ble.n	8008234 <_strtod_l+0x7ac>
 8008222:	4631      	mov	r1, r6
 8008224:	464a      	mov	r2, r9
 8008226:	4620      	mov	r0, r4
 8008228:	f002 fa38 	bl	800a69c <__lshift>
 800822c:	4606      	mov	r6, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	f43f ae72 	beq.w	8007f18 <_strtod_l+0x490>
 8008234:	9a05      	ldr	r2, [sp, #20]
 8008236:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008238:	4620      	mov	r0, r4
 800823a:	f002 fabb 	bl	800a7b4 <__mdiff>
 800823e:	4605      	mov	r5, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	f43f ae69 	beq.w	8007f18 <_strtod_l+0x490>
 8008246:	68c3      	ldr	r3, [r0, #12]
 8008248:	930b      	str	r3, [sp, #44]	; 0x2c
 800824a:	2300      	movs	r3, #0
 800824c:	60c3      	str	r3, [r0, #12]
 800824e:	4631      	mov	r1, r6
 8008250:	f002 fa94 	bl	800a77c <__mcmp>
 8008254:	2800      	cmp	r0, #0
 8008256:	da60      	bge.n	800831a <_strtod_l+0x892>
 8008258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825a:	ea53 030a 	orrs.w	r3, r3, sl
 800825e:	f040 8082 	bne.w	8008366 <_strtod_l+0x8de>
 8008262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008266:	2b00      	cmp	r3, #0
 8008268:	d17d      	bne.n	8008366 <_strtod_l+0x8de>
 800826a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800826e:	0d1b      	lsrs	r3, r3, #20
 8008270:	051b      	lsls	r3, r3, #20
 8008272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008276:	d976      	bls.n	8008366 <_strtod_l+0x8de>
 8008278:	696b      	ldr	r3, [r5, #20]
 800827a:	b913      	cbnz	r3, 8008282 <_strtod_l+0x7fa>
 800827c:	692b      	ldr	r3, [r5, #16]
 800827e:	2b01      	cmp	r3, #1
 8008280:	dd71      	ble.n	8008366 <_strtod_l+0x8de>
 8008282:	4629      	mov	r1, r5
 8008284:	2201      	movs	r2, #1
 8008286:	4620      	mov	r0, r4
 8008288:	f002 fa08 	bl	800a69c <__lshift>
 800828c:	4631      	mov	r1, r6
 800828e:	4605      	mov	r5, r0
 8008290:	f002 fa74 	bl	800a77c <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	dd66      	ble.n	8008366 <_strtod_l+0x8de>
 8008298:	9904      	ldr	r1, [sp, #16]
 800829a:	4a53      	ldr	r2, [pc, #332]	; (80083e8 <_strtod_l+0x960>)
 800829c:	465b      	mov	r3, fp
 800829e:	2900      	cmp	r1, #0
 80082a0:	f000 8081 	beq.w	80083a6 <_strtod_l+0x91e>
 80082a4:	ea02 010b 	and.w	r1, r2, fp
 80082a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082ac:	dc7b      	bgt.n	80083a6 <_strtod_l+0x91e>
 80082ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082b2:	f77f aea9 	ble.w	8008008 <_strtod_l+0x580>
 80082b6:	4b4d      	ldr	r3, [pc, #308]	; (80083ec <_strtod_l+0x964>)
 80082b8:	4650      	mov	r0, sl
 80082ba:	4659      	mov	r1, fp
 80082bc:	2200      	movs	r2, #0
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	460b      	mov	r3, r1
 80082c4:	4303      	orrs	r3, r0
 80082c6:	bf08      	it	eq
 80082c8:	2322      	moveq	r3, #34	; 0x22
 80082ca:	4682      	mov	sl, r0
 80082cc:	468b      	mov	fp, r1
 80082ce:	bf08      	it	eq
 80082d0:	6023      	streq	r3, [r4, #0]
 80082d2:	e62b      	b.n	8007f2c <_strtod_l+0x4a4>
 80082d4:	f04f 32ff 	mov.w	r2, #4294967295
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	ea03 0a0a 	and.w	sl, r3, sl
 80082e0:	e6e3      	b.n	80080aa <_strtod_l+0x622>
 80082e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80082e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80082ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80082ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80082f2:	fa01 f308 	lsl.w	r3, r1, r8
 80082f6:	9308      	str	r3, [sp, #32]
 80082f8:	910d      	str	r1, [sp, #52]	; 0x34
 80082fa:	e746      	b.n	800818a <_strtod_l+0x702>
 80082fc:	2300      	movs	r3, #0
 80082fe:	9308      	str	r3, [sp, #32]
 8008300:	2301      	movs	r3, #1
 8008302:	930d      	str	r3, [sp, #52]	; 0x34
 8008304:	e741      	b.n	800818a <_strtod_l+0x702>
 8008306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008308:	4642      	mov	r2, r8
 800830a:	4620      	mov	r0, r4
 800830c:	f002 f9c6 	bl	800a69c <__lshift>
 8008310:	9018      	str	r0, [sp, #96]	; 0x60
 8008312:	2800      	cmp	r0, #0
 8008314:	f47f af6b 	bne.w	80081ee <_strtod_l+0x766>
 8008318:	e5fe      	b.n	8007f18 <_strtod_l+0x490>
 800831a:	465f      	mov	r7, fp
 800831c:	d16e      	bne.n	80083fc <_strtod_l+0x974>
 800831e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008324:	b342      	cbz	r2, 8008378 <_strtod_l+0x8f0>
 8008326:	4a32      	ldr	r2, [pc, #200]	; (80083f0 <_strtod_l+0x968>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d128      	bne.n	800837e <_strtod_l+0x8f6>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4651      	mov	r1, sl
 8008330:	b1eb      	cbz	r3, 800836e <_strtod_l+0x8e6>
 8008332:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <_strtod_l+0x960>)
 8008334:	403b      	ands	r3, r7
 8008336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	d819      	bhi.n	8008374 <_strtod_l+0x8ec>
 8008340:	0d1b      	lsrs	r3, r3, #20
 8008342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	4299      	cmp	r1, r3
 800834c:	d117      	bne.n	800837e <_strtod_l+0x8f6>
 800834e:	4b29      	ldr	r3, [pc, #164]	; (80083f4 <_strtod_l+0x96c>)
 8008350:	429f      	cmp	r7, r3
 8008352:	d102      	bne.n	800835a <_strtod_l+0x8d2>
 8008354:	3101      	adds	r1, #1
 8008356:	f43f addf 	beq.w	8007f18 <_strtod_l+0x490>
 800835a:	4b23      	ldr	r3, [pc, #140]	; (80083e8 <_strtod_l+0x960>)
 800835c:	403b      	ands	r3, r7
 800835e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008362:	f04f 0a00 	mov.w	sl, #0
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1a4      	bne.n	80082b6 <_strtod_l+0x82e>
 800836c:	e5de      	b.n	8007f2c <_strtod_l+0x4a4>
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
 8008372:	e7ea      	b.n	800834a <_strtod_l+0x8c2>
 8008374:	4613      	mov	r3, r2
 8008376:	e7e8      	b.n	800834a <_strtod_l+0x8c2>
 8008378:	ea53 030a 	orrs.w	r3, r3, sl
 800837c:	d08c      	beq.n	8008298 <_strtod_l+0x810>
 800837e:	9b08      	ldr	r3, [sp, #32]
 8008380:	b1db      	cbz	r3, 80083ba <_strtod_l+0x932>
 8008382:	423b      	tst	r3, r7
 8008384:	d0ef      	beq.n	8008366 <_strtod_l+0x8de>
 8008386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008388:	9a04      	ldr	r2, [sp, #16]
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	b1c3      	cbz	r3, 80083c2 <_strtod_l+0x93a>
 8008390:	f7ff fb5d 	bl	8007a4e <sulp>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	ec51 0b18 	vmov	r0, r1, d8
 800839c:	f7f7 ff76 	bl	800028c <__adddf3>
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	e7df      	b.n	8008366 <_strtod_l+0x8de>
 80083a6:	4013      	ands	r3, r2
 80083a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083b4:	f04f 3aff 	mov.w	sl, #4294967295
 80083b8:	e7d5      	b.n	8008366 <_strtod_l+0x8de>
 80083ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083bc:	ea13 0f0a 	tst.w	r3, sl
 80083c0:	e7e0      	b.n	8008384 <_strtod_l+0x8fc>
 80083c2:	f7ff fb44 	bl	8007a4e <sulp>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	ec51 0b18 	vmov	r0, r1, d8
 80083ce:	f7f7 ff5b 	bl	8000288 <__aeabi_dsub>
 80083d2:	2200      	movs	r2, #0
 80083d4:	2300      	movs	r3, #0
 80083d6:	4682      	mov	sl, r0
 80083d8:	468b      	mov	fp, r1
 80083da:	f7f8 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d0c1      	beq.n	8008366 <_strtod_l+0x8de>
 80083e2:	e611      	b.n	8008008 <_strtod_l+0x580>
 80083e4:	fffffc02 	.word	0xfffffc02
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	39500000 	.word	0x39500000
 80083f0:	000fffff 	.word	0x000fffff
 80083f4:	7fefffff 	.word	0x7fefffff
 80083f8:	0800c378 	.word	0x0800c378
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	f002 fb3a 	bl	800aa78 <__ratio>
 8008404:	ec59 8b10 	vmov	r8, r9, d0
 8008408:	ee10 0a10 	vmov	r0, s0
 800840c:	2200      	movs	r2, #0
 800840e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb6c 	bl	8000af0 <__aeabi_dcmple>
 8008418:	2800      	cmp	r0, #0
 800841a:	d07a      	beq.n	8008512 <_strtod_l+0xa8a>
 800841c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d04a      	beq.n	80084b8 <_strtod_l+0xa30>
 8008422:	4b95      	ldr	r3, [pc, #596]	; (8008678 <_strtod_l+0xbf0>)
 8008424:	2200      	movs	r2, #0
 8008426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800842a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008678 <_strtod_l+0xbf0>
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	4b92      	ldr	r3, [pc, #584]	; (800867c <_strtod_l+0xbf4>)
 8008434:	403b      	ands	r3, r7
 8008436:	930d      	str	r3, [sp, #52]	; 0x34
 8008438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843a:	4b91      	ldr	r3, [pc, #580]	; (8008680 <_strtod_l+0xbf8>)
 800843c:	429a      	cmp	r2, r3
 800843e:	f040 80b0 	bne.w	80085a2 <_strtod_l+0xb1a>
 8008442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008446:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800844a:	ec4b ab10 	vmov	d0, sl, fp
 800844e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008452:	f002 fa39 	bl	800a8c8 <__ulp>
 8008456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800845a:	ec53 2b10 	vmov	r2, r3, d0
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	4652      	mov	r2, sl
 8008464:	465b      	mov	r3, fp
 8008466:	f7f7 ff11 	bl	800028c <__adddf3>
 800846a:	460b      	mov	r3, r1
 800846c:	4983      	ldr	r1, [pc, #524]	; (800867c <_strtod_l+0xbf4>)
 800846e:	4a85      	ldr	r2, [pc, #532]	; (8008684 <_strtod_l+0xbfc>)
 8008470:	4019      	ands	r1, r3
 8008472:	4291      	cmp	r1, r2
 8008474:	4682      	mov	sl, r0
 8008476:	d960      	bls.n	800853a <_strtod_l+0xab2>
 8008478:	ee18 3a90 	vmov	r3, s17
 800847c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008480:	4293      	cmp	r3, r2
 8008482:	d104      	bne.n	800848e <_strtod_l+0xa06>
 8008484:	ee18 3a10 	vmov	r3, s16
 8008488:	3301      	adds	r3, #1
 800848a:	f43f ad45 	beq.w	8007f18 <_strtod_l+0x490>
 800848e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008690 <_strtod_l+0xc08>
 8008492:	f04f 3aff 	mov.w	sl, #4294967295
 8008496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fee3 	bl	800a264 <_Bfree>
 800849e:	9905      	ldr	r1, [sp, #20]
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 fedf 	bl	800a264 <_Bfree>
 80084a6:	4631      	mov	r1, r6
 80084a8:	4620      	mov	r0, r4
 80084aa:	f001 fedb 	bl	800a264 <_Bfree>
 80084ae:	4629      	mov	r1, r5
 80084b0:	4620      	mov	r0, r4
 80084b2:	f001 fed7 	bl	800a264 <_Bfree>
 80084b6:	e61a      	b.n	80080ee <_strtod_l+0x666>
 80084b8:	f1ba 0f00 	cmp.w	sl, #0
 80084bc:	d11b      	bne.n	80084f6 <_strtod_l+0xa6e>
 80084be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084c2:	b9f3      	cbnz	r3, 8008502 <_strtod_l+0xa7a>
 80084c4:	4b6c      	ldr	r3, [pc, #432]	; (8008678 <_strtod_l+0xbf0>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	4640      	mov	r0, r8
 80084ca:	4649      	mov	r1, r9
 80084cc:	f7f8 fb06 	bl	8000adc <__aeabi_dcmplt>
 80084d0:	b9d0      	cbnz	r0, 8008508 <_strtod_l+0xa80>
 80084d2:	4640      	mov	r0, r8
 80084d4:	4649      	mov	r1, r9
 80084d6:	4b6c      	ldr	r3, [pc, #432]	; (8008688 <_strtod_l+0xc00>)
 80084d8:	2200      	movs	r2, #0
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	4680      	mov	r8, r0
 80084e0:	4689      	mov	r9, r1
 80084e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80084ea:	9315      	str	r3, [sp, #84]	; 0x54
 80084ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80084f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084f4:	e79d      	b.n	8008432 <_strtod_l+0x9aa>
 80084f6:	f1ba 0f01 	cmp.w	sl, #1
 80084fa:	d102      	bne.n	8008502 <_strtod_l+0xa7a>
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	f43f ad83 	beq.w	8008008 <_strtod_l+0x580>
 8008502:	4b62      	ldr	r3, [pc, #392]	; (800868c <_strtod_l+0xc04>)
 8008504:	2200      	movs	r2, #0
 8008506:	e78e      	b.n	8008426 <_strtod_l+0x99e>
 8008508:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008688 <_strtod_l+0xc00>
 800850c:	f04f 0800 	mov.w	r8, #0
 8008510:	e7e7      	b.n	80084e2 <_strtod_l+0xa5a>
 8008512:	4b5d      	ldr	r3, [pc, #372]	; (8008688 <_strtod_l+0xc00>)
 8008514:	4640      	mov	r0, r8
 8008516:	4649      	mov	r1, r9
 8008518:	2200      	movs	r2, #0
 800851a:	f7f8 f86d 	bl	80005f8 <__aeabi_dmul>
 800851e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008520:	4680      	mov	r8, r0
 8008522:	4689      	mov	r9, r1
 8008524:	b933      	cbnz	r3, 8008534 <_strtod_l+0xaac>
 8008526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800852a:	900e      	str	r0, [sp, #56]	; 0x38
 800852c:	930f      	str	r3, [sp, #60]	; 0x3c
 800852e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008532:	e7dd      	b.n	80084f0 <_strtod_l+0xa68>
 8008534:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008538:	e7f9      	b.n	800852e <_strtod_l+0xaa6>
 800853a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1a8      	bne.n	8008496 <_strtod_l+0xa0e>
 8008544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800854a:	0d1b      	lsrs	r3, r3, #20
 800854c:	051b      	lsls	r3, r3, #20
 800854e:	429a      	cmp	r2, r3
 8008550:	d1a1      	bne.n	8008496 <_strtod_l+0xa0e>
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f8 fbaf 	bl	8000cb8 <__aeabi_d2lz>
 800855a:	f7f8 f81f 	bl	800059c <__aeabi_l2d>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f7 fe8f 	bl	8000288 <__aeabi_dsub>
 800856a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800856c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008570:	ea43 030a 	orr.w	r3, r3, sl
 8008574:	4313      	orrs	r3, r2
 8008576:	4680      	mov	r8, r0
 8008578:	4689      	mov	r9, r1
 800857a:	d055      	beq.n	8008628 <_strtod_l+0xba0>
 800857c:	a336      	add	r3, pc, #216	; (adr r3, 8008658 <_strtod_l+0xbd0>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f8 faab 	bl	8000adc <__aeabi_dcmplt>
 8008586:	2800      	cmp	r0, #0
 8008588:	f47f acd0 	bne.w	8007f2c <_strtod_l+0x4a4>
 800858c:	a334      	add	r3, pc, #208	; (adr r3, 8008660 <_strtod_l+0xbd8>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f8 fabf 	bl	8000b18 <__aeabi_dcmpgt>
 800859a:	2800      	cmp	r0, #0
 800859c:	f43f af7b 	beq.w	8008496 <_strtod_l+0xa0e>
 80085a0:	e4c4      	b.n	8007f2c <_strtod_l+0x4a4>
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	b333      	cbz	r3, 80085f4 <_strtod_l+0xb6c>
 80085a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085ac:	d822      	bhi.n	80085f4 <_strtod_l+0xb6c>
 80085ae:	a32e      	add	r3, pc, #184	; (adr r3, 8008668 <_strtod_l+0xbe0>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	4640      	mov	r0, r8
 80085b6:	4649      	mov	r1, r9
 80085b8:	f7f8 fa9a 	bl	8000af0 <__aeabi_dcmple>
 80085bc:	b1a0      	cbz	r0, 80085e8 <_strtod_l+0xb60>
 80085be:	4649      	mov	r1, r9
 80085c0:	4640      	mov	r0, r8
 80085c2:	f7f8 faf1 	bl	8000ba8 <__aeabi_d2uiz>
 80085c6:	2801      	cmp	r0, #1
 80085c8:	bf38      	it	cc
 80085ca:	2001      	movcc	r0, #1
 80085cc:	f7f7 ff9a 	bl	8000504 <__aeabi_ui2d>
 80085d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	bb23      	cbnz	r3, 8008622 <_strtod_l+0xb9a>
 80085d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085dc:	9010      	str	r0, [sp, #64]	; 0x40
 80085de:	9311      	str	r3, [sp, #68]	; 0x44
 80085e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	9309      	str	r3, [sp, #36]	; 0x24
 80085f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085f8:	eeb0 0a48 	vmov.f32	s0, s16
 80085fc:	eef0 0a68 	vmov.f32	s1, s17
 8008600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008604:	f002 f960 	bl	800a8c8 <__ulp>
 8008608:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800860c:	ec53 2b10 	vmov	r2, r3, d0
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	ec53 2b18 	vmov	r2, r3, d8
 8008618:	f7f7 fe38 	bl	800028c <__adddf3>
 800861c:	4682      	mov	sl, r0
 800861e:	468b      	mov	fp, r1
 8008620:	e78d      	b.n	800853e <_strtod_l+0xab6>
 8008622:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008626:	e7db      	b.n	80085e0 <_strtod_l+0xb58>
 8008628:	a311      	add	r3, pc, #68	; (adr r3, 8008670 <_strtod_l+0xbe8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f8 fa55 	bl	8000adc <__aeabi_dcmplt>
 8008632:	e7b2      	b.n	800859a <_strtod_l+0xb12>
 8008634:	2300      	movs	r3, #0
 8008636:	930a      	str	r3, [sp, #40]	; 0x28
 8008638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800863a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	f7ff ba6b 	b.w	8007b18 <_strtod_l+0x90>
 8008642:	2a65      	cmp	r2, #101	; 0x65
 8008644:	f43f ab5f 	beq.w	8007d06 <_strtod_l+0x27e>
 8008648:	2a45      	cmp	r2, #69	; 0x45
 800864a:	f43f ab5c 	beq.w	8007d06 <_strtod_l+0x27e>
 800864e:	2301      	movs	r3, #1
 8008650:	f7ff bb94 	b.w	8007d7c <_strtod_l+0x2f4>
 8008654:	f3af 8000 	nop.w
 8008658:	94a03595 	.word	0x94a03595
 800865c:	3fdfffff 	.word	0x3fdfffff
 8008660:	35afe535 	.word	0x35afe535
 8008664:	3fe00000 	.word	0x3fe00000
 8008668:	ffc00000 	.word	0xffc00000
 800866c:	41dfffff 	.word	0x41dfffff
 8008670:	94a03595 	.word	0x94a03595
 8008674:	3fcfffff 	.word	0x3fcfffff
 8008678:	3ff00000 	.word	0x3ff00000
 800867c:	7ff00000 	.word	0x7ff00000
 8008680:	7fe00000 	.word	0x7fe00000
 8008684:	7c9fffff 	.word	0x7c9fffff
 8008688:	3fe00000 	.word	0x3fe00000
 800868c:	bff00000 	.word	0xbff00000
 8008690:	7fefffff 	.word	0x7fefffff

08008694 <_strtod_r>:
 8008694:	4b01      	ldr	r3, [pc, #4]	; (800869c <_strtod_r+0x8>)
 8008696:	f7ff b9f7 	b.w	8007a88 <_strtod_l>
 800869a:	bf00      	nop
 800869c:	200000a8 	.word	0x200000a8

080086a0 <_strtol_l.constprop.0>:
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a6:	d001      	beq.n	80086ac <_strtol_l.constprop.0+0xc>
 80086a8:	2b24      	cmp	r3, #36	; 0x24
 80086aa:	d906      	bls.n	80086ba <_strtol_l.constprop.0+0x1a>
 80086ac:	f7fe f9c6 	bl	8006a3c <__errno>
 80086b0:	2316      	movs	r3, #22
 80086b2:	6003      	str	r3, [r0, #0]
 80086b4:	2000      	movs	r0, #0
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087a0 <_strtol_l.constprop.0+0x100>
 80086be:	460d      	mov	r5, r1
 80086c0:	462e      	mov	r6, r5
 80086c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80086ca:	f017 0708 	ands.w	r7, r7, #8
 80086ce:	d1f7      	bne.n	80086c0 <_strtol_l.constprop.0+0x20>
 80086d0:	2c2d      	cmp	r4, #45	; 0x2d
 80086d2:	d132      	bne.n	800873a <_strtol_l.constprop.0+0x9a>
 80086d4:	782c      	ldrb	r4, [r5, #0]
 80086d6:	2701      	movs	r7, #1
 80086d8:	1cb5      	adds	r5, r6, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d05b      	beq.n	8008796 <_strtol_l.constprop.0+0xf6>
 80086de:	2b10      	cmp	r3, #16
 80086e0:	d109      	bne.n	80086f6 <_strtol_l.constprop.0+0x56>
 80086e2:	2c30      	cmp	r4, #48	; 0x30
 80086e4:	d107      	bne.n	80086f6 <_strtol_l.constprop.0+0x56>
 80086e6:	782c      	ldrb	r4, [r5, #0]
 80086e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086ec:	2c58      	cmp	r4, #88	; 0x58
 80086ee:	d14d      	bne.n	800878c <_strtol_l.constprop.0+0xec>
 80086f0:	786c      	ldrb	r4, [r5, #1]
 80086f2:	2310      	movs	r3, #16
 80086f4:	3502      	adds	r5, #2
 80086f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80086fe:	f04f 0c00 	mov.w	ip, #0
 8008702:	fbb8 f9f3 	udiv	r9, r8, r3
 8008706:	4666      	mov	r6, ip
 8008708:	fb03 8a19 	mls	sl, r3, r9, r8
 800870c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008710:	f1be 0f09 	cmp.w	lr, #9
 8008714:	d816      	bhi.n	8008744 <_strtol_l.constprop.0+0xa4>
 8008716:	4674      	mov	r4, lr
 8008718:	42a3      	cmp	r3, r4
 800871a:	dd24      	ble.n	8008766 <_strtol_l.constprop.0+0xc6>
 800871c:	f1bc 0f00 	cmp.w	ip, #0
 8008720:	db1e      	blt.n	8008760 <_strtol_l.constprop.0+0xc0>
 8008722:	45b1      	cmp	r9, r6
 8008724:	d31c      	bcc.n	8008760 <_strtol_l.constprop.0+0xc0>
 8008726:	d101      	bne.n	800872c <_strtol_l.constprop.0+0x8c>
 8008728:	45a2      	cmp	sl, r4
 800872a:	db19      	blt.n	8008760 <_strtol_l.constprop.0+0xc0>
 800872c:	fb06 4603 	mla	r6, r6, r3, r4
 8008730:	f04f 0c01 	mov.w	ip, #1
 8008734:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008738:	e7e8      	b.n	800870c <_strtol_l.constprop.0+0x6c>
 800873a:	2c2b      	cmp	r4, #43	; 0x2b
 800873c:	bf04      	itt	eq
 800873e:	782c      	ldrbeq	r4, [r5, #0]
 8008740:	1cb5      	addeq	r5, r6, #2
 8008742:	e7ca      	b.n	80086da <_strtol_l.constprop.0+0x3a>
 8008744:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008748:	f1be 0f19 	cmp.w	lr, #25
 800874c:	d801      	bhi.n	8008752 <_strtol_l.constprop.0+0xb2>
 800874e:	3c37      	subs	r4, #55	; 0x37
 8008750:	e7e2      	b.n	8008718 <_strtol_l.constprop.0+0x78>
 8008752:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008756:	f1be 0f19 	cmp.w	lr, #25
 800875a:	d804      	bhi.n	8008766 <_strtol_l.constprop.0+0xc6>
 800875c:	3c57      	subs	r4, #87	; 0x57
 800875e:	e7db      	b.n	8008718 <_strtol_l.constprop.0+0x78>
 8008760:	f04f 3cff 	mov.w	ip, #4294967295
 8008764:	e7e6      	b.n	8008734 <_strtol_l.constprop.0+0x94>
 8008766:	f1bc 0f00 	cmp.w	ip, #0
 800876a:	da05      	bge.n	8008778 <_strtol_l.constprop.0+0xd8>
 800876c:	2322      	movs	r3, #34	; 0x22
 800876e:	6003      	str	r3, [r0, #0]
 8008770:	4646      	mov	r6, r8
 8008772:	b942      	cbnz	r2, 8008786 <_strtol_l.constprop.0+0xe6>
 8008774:	4630      	mov	r0, r6
 8008776:	e79e      	b.n	80086b6 <_strtol_l.constprop.0+0x16>
 8008778:	b107      	cbz	r7, 800877c <_strtol_l.constprop.0+0xdc>
 800877a:	4276      	negs	r6, r6
 800877c:	2a00      	cmp	r2, #0
 800877e:	d0f9      	beq.n	8008774 <_strtol_l.constprop.0+0xd4>
 8008780:	f1bc 0f00 	cmp.w	ip, #0
 8008784:	d000      	beq.n	8008788 <_strtol_l.constprop.0+0xe8>
 8008786:	1e69      	subs	r1, r5, #1
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	e7f3      	b.n	8008774 <_strtol_l.constprop.0+0xd4>
 800878c:	2430      	movs	r4, #48	; 0x30
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1b1      	bne.n	80086f6 <_strtol_l.constprop.0+0x56>
 8008792:	2308      	movs	r3, #8
 8008794:	e7af      	b.n	80086f6 <_strtol_l.constprop.0+0x56>
 8008796:	2c30      	cmp	r4, #48	; 0x30
 8008798:	d0a5      	beq.n	80086e6 <_strtol_l.constprop.0+0x46>
 800879a:	230a      	movs	r3, #10
 800879c:	e7ab      	b.n	80086f6 <_strtol_l.constprop.0+0x56>
 800879e:	bf00      	nop
 80087a0:	0800c3a1 	.word	0x0800c3a1

080087a4 <_strtol_r>:
 80087a4:	f7ff bf7c 	b.w	80086a0 <_strtol_l.constprop.0>

080087a8 <__swbuf_r>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	460e      	mov	r6, r1
 80087ac:	4614      	mov	r4, r2
 80087ae:	4605      	mov	r5, r0
 80087b0:	b118      	cbz	r0, 80087ba <__swbuf_r+0x12>
 80087b2:	6983      	ldr	r3, [r0, #24]
 80087b4:	b90b      	cbnz	r3, 80087ba <__swbuf_r+0x12>
 80087b6:	f001 f86f 	bl	8009898 <__sinit>
 80087ba:	4b21      	ldr	r3, [pc, #132]	; (8008840 <__swbuf_r+0x98>)
 80087bc:	429c      	cmp	r4, r3
 80087be:	d12b      	bne.n	8008818 <__swbuf_r+0x70>
 80087c0:	686c      	ldr	r4, [r5, #4]
 80087c2:	69a3      	ldr	r3, [r4, #24]
 80087c4:	60a3      	str	r3, [r4, #8]
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	071a      	lsls	r2, r3, #28
 80087ca:	d52f      	bpl.n	800882c <__swbuf_r+0x84>
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	b36b      	cbz	r3, 800882c <__swbuf_r+0x84>
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	6820      	ldr	r0, [r4, #0]
 80087d4:	1ac0      	subs	r0, r0, r3
 80087d6:	6963      	ldr	r3, [r4, #20]
 80087d8:	b2f6      	uxtb	r6, r6
 80087da:	4283      	cmp	r3, r0
 80087dc:	4637      	mov	r7, r6
 80087de:	dc04      	bgt.n	80087ea <__swbuf_r+0x42>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 ffc4 	bl	8009770 <_fflush_r>
 80087e8:	bb30      	cbnz	r0, 8008838 <__swbuf_r+0x90>
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	60a3      	str	r3, [r4, #8]
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	6022      	str	r2, [r4, #0]
 80087f6:	701e      	strb	r6, [r3, #0]
 80087f8:	6963      	ldr	r3, [r4, #20]
 80087fa:	3001      	adds	r0, #1
 80087fc:	4283      	cmp	r3, r0
 80087fe:	d004      	beq.n	800880a <__swbuf_r+0x62>
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	07db      	lsls	r3, r3, #31
 8008804:	d506      	bpl.n	8008814 <__swbuf_r+0x6c>
 8008806:	2e0a      	cmp	r6, #10
 8008808:	d104      	bne.n	8008814 <__swbuf_r+0x6c>
 800880a:	4621      	mov	r1, r4
 800880c:	4628      	mov	r0, r5
 800880e:	f000 ffaf 	bl	8009770 <_fflush_r>
 8008812:	b988      	cbnz	r0, 8008838 <__swbuf_r+0x90>
 8008814:	4638      	mov	r0, r7
 8008816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <__swbuf_r+0x9c>)
 800881a:	429c      	cmp	r4, r3
 800881c:	d101      	bne.n	8008822 <__swbuf_r+0x7a>
 800881e:	68ac      	ldr	r4, [r5, #8]
 8008820:	e7cf      	b.n	80087c2 <__swbuf_r+0x1a>
 8008822:	4b09      	ldr	r3, [pc, #36]	; (8008848 <__swbuf_r+0xa0>)
 8008824:	429c      	cmp	r4, r3
 8008826:	bf08      	it	eq
 8008828:	68ec      	ldreq	r4, [r5, #12]
 800882a:	e7ca      	b.n	80087c2 <__swbuf_r+0x1a>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f81e 	bl	8008870 <__swsetup_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	d0cb      	beq.n	80087d0 <__swbuf_r+0x28>
 8008838:	f04f 37ff 	mov.w	r7, #4294967295
 800883c:	e7ea      	b.n	8008814 <__swbuf_r+0x6c>
 800883e:	bf00      	nop
 8008840:	0800c554 	.word	0x0800c554
 8008844:	0800c574 	.word	0x0800c574
 8008848:	0800c534 	.word	0x0800c534

0800884c <_write_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	; (800886c <_write_r+0x20>)
 8008850:	4604      	mov	r4, r0
 8008852:	4608      	mov	r0, r1
 8008854:	4611      	mov	r1, r2
 8008856:	2200      	movs	r2, #0
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f7f9 fd5d 	bl	800231a <_write>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_write_r+0x1e>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_write_r+0x1e>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20000de4 	.word	0x20000de4

08008870 <__swsetup_r>:
 8008870:	4b32      	ldr	r3, [pc, #200]	; (800893c <__swsetup_r+0xcc>)
 8008872:	b570      	push	{r4, r5, r6, lr}
 8008874:	681d      	ldr	r5, [r3, #0]
 8008876:	4606      	mov	r6, r0
 8008878:	460c      	mov	r4, r1
 800887a:	b125      	cbz	r5, 8008886 <__swsetup_r+0x16>
 800887c:	69ab      	ldr	r3, [r5, #24]
 800887e:	b913      	cbnz	r3, 8008886 <__swsetup_r+0x16>
 8008880:	4628      	mov	r0, r5
 8008882:	f001 f809 	bl	8009898 <__sinit>
 8008886:	4b2e      	ldr	r3, [pc, #184]	; (8008940 <__swsetup_r+0xd0>)
 8008888:	429c      	cmp	r4, r3
 800888a:	d10f      	bne.n	80088ac <__swsetup_r+0x3c>
 800888c:	686c      	ldr	r4, [r5, #4]
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008894:	0719      	lsls	r1, r3, #28
 8008896:	d42c      	bmi.n	80088f2 <__swsetup_r+0x82>
 8008898:	06dd      	lsls	r5, r3, #27
 800889a:	d411      	bmi.n	80088c0 <__swsetup_r+0x50>
 800889c:	2309      	movs	r3, #9
 800889e:	6033      	str	r3, [r6, #0]
 80088a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	e03e      	b.n	800892a <__swsetup_r+0xba>
 80088ac:	4b25      	ldr	r3, [pc, #148]	; (8008944 <__swsetup_r+0xd4>)
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d101      	bne.n	80088b6 <__swsetup_r+0x46>
 80088b2:	68ac      	ldr	r4, [r5, #8]
 80088b4:	e7eb      	b.n	800888e <__swsetup_r+0x1e>
 80088b6:	4b24      	ldr	r3, [pc, #144]	; (8008948 <__swsetup_r+0xd8>)
 80088b8:	429c      	cmp	r4, r3
 80088ba:	bf08      	it	eq
 80088bc:	68ec      	ldreq	r4, [r5, #12]
 80088be:	e7e6      	b.n	800888e <__swsetup_r+0x1e>
 80088c0:	0758      	lsls	r0, r3, #29
 80088c2:	d512      	bpl.n	80088ea <__swsetup_r+0x7a>
 80088c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c6:	b141      	cbz	r1, 80088da <__swsetup_r+0x6a>
 80088c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088cc:	4299      	cmp	r1, r3
 80088ce:	d002      	beq.n	80088d6 <__swsetup_r+0x66>
 80088d0:	4630      	mov	r0, r6
 80088d2:	f002 f95f 	bl	800ab94 <_free_r>
 80088d6:	2300      	movs	r3, #0
 80088d8:	6363      	str	r3, [r4, #52]	; 0x34
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	2300      	movs	r3, #0
 80088e4:	6063      	str	r3, [r4, #4]
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f043 0308 	orr.w	r3, r3, #8
 80088f0:	81a3      	strh	r3, [r4, #12]
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	b94b      	cbnz	r3, 800890a <__swsetup_r+0x9a>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008900:	d003      	beq.n	800890a <__swsetup_r+0x9a>
 8008902:	4621      	mov	r1, r4
 8008904:	4630      	mov	r0, r6
 8008906:	f001 fc13 	bl	800a130 <__smakebuf_r>
 800890a:	89a0      	ldrh	r0, [r4, #12]
 800890c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008910:	f010 0301 	ands.w	r3, r0, #1
 8008914:	d00a      	beq.n	800892c <__swsetup_r+0xbc>
 8008916:	2300      	movs	r3, #0
 8008918:	60a3      	str	r3, [r4, #8]
 800891a:	6963      	ldr	r3, [r4, #20]
 800891c:	425b      	negs	r3, r3
 800891e:	61a3      	str	r3, [r4, #24]
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	b943      	cbnz	r3, 8008936 <__swsetup_r+0xc6>
 8008924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008928:	d1ba      	bne.n	80088a0 <__swsetup_r+0x30>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	0781      	lsls	r1, r0, #30
 800892e:	bf58      	it	pl
 8008930:	6963      	ldrpl	r3, [r4, #20]
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	e7f4      	b.n	8008920 <__swsetup_r+0xb0>
 8008936:	2000      	movs	r0, #0
 8008938:	e7f7      	b.n	800892a <__swsetup_r+0xba>
 800893a:	bf00      	nop
 800893c:	20000040 	.word	0x20000040
 8008940:	0800c554 	.word	0x0800c554
 8008944:	0800c574 	.word	0x0800c574
 8008948:	0800c534 	.word	0x0800c534

0800894c <_close_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d06      	ldr	r5, [pc, #24]	; (8008968 <_close_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7fa f959 	bl	8002c0e <_close>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_close_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_close_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20000de4 	.word	0x20000de4

0800896c <quorem>:
 800896c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	6903      	ldr	r3, [r0, #16]
 8008972:	690c      	ldr	r4, [r1, #16]
 8008974:	42a3      	cmp	r3, r4
 8008976:	4607      	mov	r7, r0
 8008978:	f2c0 8081 	blt.w	8008a7e <quorem+0x112>
 800897c:	3c01      	subs	r4, #1
 800897e:	f101 0814 	add.w	r8, r1, #20
 8008982:	f100 0514 	add.w	r5, r0, #20
 8008986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008994:	3301      	adds	r3, #1
 8008996:	429a      	cmp	r2, r3
 8008998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800899c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80089a4:	d331      	bcc.n	8008a0a <quorem+0x9e>
 80089a6:	f04f 0e00 	mov.w	lr, #0
 80089aa:	4640      	mov	r0, r8
 80089ac:	46ac      	mov	ip, r5
 80089ae:	46f2      	mov	sl, lr
 80089b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80089b4:	b293      	uxth	r3, r2
 80089b6:	fb06 e303 	mla	r3, r6, r3, lr
 80089ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089be:	b29b      	uxth	r3, r3
 80089c0:	ebaa 0303 	sub.w	r3, sl, r3
 80089c4:	f8dc a000 	ldr.w	sl, [ip]
 80089c8:	0c12      	lsrs	r2, r2, #16
 80089ca:	fa13 f38a 	uxtah	r3, r3, sl
 80089ce:	fb06 e202 	mla	r2, r6, r2, lr
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089da:	b292      	uxth	r2, r2
 80089dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80089e8:	4581      	cmp	r9, r0
 80089ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089ee:	f84c 3b04 	str.w	r3, [ip], #4
 80089f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089f6:	d2db      	bcs.n	80089b0 <quorem+0x44>
 80089f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80089fc:	b92b      	cbnz	r3, 8008a0a <quorem+0x9e>
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	3b04      	subs	r3, #4
 8008a02:	429d      	cmp	r5, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	d32e      	bcc.n	8008a66 <quorem+0xfa>
 8008a08:	613c      	str	r4, [r7, #16]
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	f001 feb6 	bl	800a77c <__mcmp>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	db24      	blt.n	8008a5e <quorem+0xf2>
 8008a14:	3601      	adds	r6, #1
 8008a16:	4628      	mov	r0, r5
 8008a18:	f04f 0c00 	mov.w	ip, #0
 8008a1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a20:	f8d0 e000 	ldr.w	lr, [r0]
 8008a24:	b293      	uxth	r3, r2
 8008a26:	ebac 0303 	sub.w	r3, ip, r3
 8008a2a:	0c12      	lsrs	r2, r2, #16
 8008a2c:	fa13 f38e 	uxtah	r3, r3, lr
 8008a30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a3e:	45c1      	cmp	r9, r8
 8008a40:	f840 3b04 	str.w	r3, [r0], #4
 8008a44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a48:	d2e8      	bcs.n	8008a1c <quorem+0xb0>
 8008a4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a52:	b922      	cbnz	r2, 8008a5e <quorem+0xf2>
 8008a54:	3b04      	subs	r3, #4
 8008a56:	429d      	cmp	r5, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	d30a      	bcc.n	8008a72 <quorem+0x106>
 8008a5c:	613c      	str	r4, [r7, #16]
 8008a5e:	4630      	mov	r0, r6
 8008a60:	b003      	add	sp, #12
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	3b04      	subs	r3, #4
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	d1cc      	bne.n	8008a08 <quorem+0x9c>
 8008a6e:	3c01      	subs	r4, #1
 8008a70:	e7c7      	b.n	8008a02 <quorem+0x96>
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	3b04      	subs	r3, #4
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	d1f0      	bne.n	8008a5c <quorem+0xf0>
 8008a7a:	3c01      	subs	r4, #1
 8008a7c:	e7eb      	b.n	8008a56 <quorem+0xea>
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e7ee      	b.n	8008a60 <quorem+0xf4>
 8008a82:	0000      	movs	r0, r0
 8008a84:	0000      	movs	r0, r0
	...

08008a88 <_dtoa_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	ed2d 8b04 	vpush	{d8-d9}
 8008a90:	ec57 6b10 	vmov	r6, r7, d0
 8008a94:	b093      	sub	sp, #76	; 0x4c
 8008a96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a9c:	9106      	str	r1, [sp, #24]
 8008a9e:	ee10 aa10 	vmov	sl, s0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8008aa6:	930c      	str	r3, [sp, #48]	; 0x30
 8008aa8:	46bb      	mov	fp, r7
 8008aaa:	b975      	cbnz	r5, 8008aca <_dtoa_r+0x42>
 8008aac:	2010      	movs	r0, #16
 8008aae:	f001 fb7f 	bl	800a1b0 <malloc>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ab6:	b920      	cbnz	r0, 8008ac2 <_dtoa_r+0x3a>
 8008ab8:	4ba7      	ldr	r3, [pc, #668]	; (8008d58 <_dtoa_r+0x2d0>)
 8008aba:	21ea      	movs	r1, #234	; 0xea
 8008abc:	48a7      	ldr	r0, [pc, #668]	; (8008d5c <_dtoa_r+0x2d4>)
 8008abe:	f003 f843 	bl	800bb48 <__assert_func>
 8008ac2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ac6:	6005      	str	r5, [r0, #0]
 8008ac8:	60c5      	str	r5, [r0, #12]
 8008aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008acc:	6819      	ldr	r1, [r3, #0]
 8008ace:	b151      	cbz	r1, 8008ae6 <_dtoa_r+0x5e>
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	604a      	str	r2, [r1, #4]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4093      	lsls	r3, r2
 8008ad8:	608b      	str	r3, [r1, #8]
 8008ada:	4620      	mov	r0, r4
 8008adc:	f001 fbc2 	bl	800a264 <_Bfree>
 8008ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	1e3b      	subs	r3, r7, #0
 8008ae8:	bfaa      	itet	ge
 8008aea:	2300      	movge	r3, #0
 8008aec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008af0:	f8c8 3000 	strge.w	r3, [r8]
 8008af4:	4b9a      	ldr	r3, [pc, #616]	; (8008d60 <_dtoa_r+0x2d8>)
 8008af6:	bfbc      	itt	lt
 8008af8:	2201      	movlt	r2, #1
 8008afa:	f8c8 2000 	strlt.w	r2, [r8]
 8008afe:	ea33 030b 	bics.w	r3, r3, fp
 8008b02:	d11b      	bne.n	8008b3c <_dtoa_r+0xb4>
 8008b04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b06:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b10:	4333      	orrs	r3, r6
 8008b12:	f000 8592 	beq.w	800963a <_dtoa_r+0xbb2>
 8008b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b18:	b963      	cbnz	r3, 8008b34 <_dtoa_r+0xac>
 8008b1a:	4b92      	ldr	r3, [pc, #584]	; (8008d64 <_dtoa_r+0x2dc>)
 8008b1c:	e022      	b.n	8008b64 <_dtoa_r+0xdc>
 8008b1e:	4b92      	ldr	r3, [pc, #584]	; (8008d68 <_dtoa_r+0x2e0>)
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	3308      	adds	r3, #8
 8008b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	9801      	ldr	r0, [sp, #4]
 8008b2a:	b013      	add	sp, #76	; 0x4c
 8008b2c:	ecbd 8b04 	vpop	{d8-d9}
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	4b8b      	ldr	r3, [pc, #556]	; (8008d64 <_dtoa_r+0x2dc>)
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	3303      	adds	r3, #3
 8008b3a:	e7f3      	b.n	8008b24 <_dtoa_r+0x9c>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4650      	mov	r0, sl
 8008b42:	4659      	mov	r1, fp
 8008b44:	f7f7 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b48:	ec4b ab19 	vmov	d9, sl, fp
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	b158      	cbz	r0, 8008b68 <_dtoa_r+0xe0>
 8008b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b52:	2301      	movs	r3, #1
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 856b 	beq.w	8009634 <_dtoa_r+0xbac>
 8008b5e:	4883      	ldr	r0, [pc, #524]	; (8008d6c <_dtoa_r+0x2e4>)
 8008b60:	6018      	str	r0, [r3, #0]
 8008b62:	1e43      	subs	r3, r0, #1
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	e7df      	b.n	8008b28 <_dtoa_r+0xa0>
 8008b68:	ec4b ab10 	vmov	d0, sl, fp
 8008b6c:	aa10      	add	r2, sp, #64	; 0x40
 8008b6e:	a911      	add	r1, sp, #68	; 0x44
 8008b70:	4620      	mov	r0, r4
 8008b72:	f001 ff25 	bl	800a9c0 <__d2b>
 8008b76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008b7a:	ee08 0a10 	vmov	s16, r0
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	f000 8084 	beq.w	8008c8c <_dtoa_r+0x204>
 8008b84:	ee19 3a90 	vmov	r3, s19
 8008b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b90:	4656      	mov	r6, sl
 8008b92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b9e:	4b74      	ldr	r3, [pc, #464]	; (8008d70 <_dtoa_r+0x2e8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	f7f7 fb6f 	bl	8000288 <__aeabi_dsub>
 8008baa:	a365      	add	r3, pc, #404	; (adr r3, 8008d40 <_dtoa_r+0x2b8>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	a364      	add	r3, pc, #400	; (adr r3, 8008d48 <_dtoa_r+0x2c0>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb67 	bl	800028c <__adddf3>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	f7f7 fcae 	bl	8000524 <__aeabi_i2d>
 8008bc8:	a361      	add	r3, pc, #388	; (adr r3, 8008d50 <_dtoa_r+0x2c8>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fd13 	bl	80005f8 <__aeabi_dmul>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	4639      	mov	r1, r7
 8008bda:	f7f7 fb57 	bl	800028c <__adddf3>
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	f7f7 ffb9 	bl	8000b58 <__aeabi_d2iz>
 8008be6:	2200      	movs	r2, #0
 8008be8:	9000      	str	r0, [sp, #0]
 8008bea:	2300      	movs	r3, #0
 8008bec:	4630      	mov	r0, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	f7f7 ff74 	bl	8000adc <__aeabi_dcmplt>
 8008bf4:	b150      	cbz	r0, 8008c0c <_dtoa_r+0x184>
 8008bf6:	9800      	ldr	r0, [sp, #0]
 8008bf8:	f7f7 fc94 	bl	8000524 <__aeabi_i2d>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	463b      	mov	r3, r7
 8008c00:	f7f7 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c04:	b910      	cbnz	r0, 8008c0c <_dtoa_r+0x184>
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	9b00      	ldr	r3, [sp, #0]
 8008c0e:	2b16      	cmp	r3, #22
 8008c10:	d85a      	bhi.n	8008cc8 <_dtoa_r+0x240>
 8008c12:	9a00      	ldr	r2, [sp, #0]
 8008c14:	4b57      	ldr	r3, [pc, #348]	; (8008d74 <_dtoa_r+0x2ec>)
 8008c16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	ec51 0b19 	vmov	r0, r1, d9
 8008c22:	f7f7 ff5b 	bl	8000adc <__aeabi_dcmplt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d050      	beq.n	8008ccc <_dtoa_r+0x244>
 8008c2a:	9b00      	ldr	r3, [sp, #0]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	2300      	movs	r3, #0
 8008c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c36:	1b5d      	subs	r5, r3, r5
 8008c38:	1e6b      	subs	r3, r5, #1
 8008c3a:	9305      	str	r3, [sp, #20]
 8008c3c:	bf45      	ittet	mi
 8008c3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c42:	9304      	strmi	r3, [sp, #16]
 8008c44:	2300      	movpl	r3, #0
 8008c46:	2300      	movmi	r3, #0
 8008c48:	bf4c      	ite	mi
 8008c4a:	9305      	strmi	r3, [sp, #20]
 8008c4c:	9304      	strpl	r3, [sp, #16]
 8008c4e:	9b00      	ldr	r3, [sp, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db3d      	blt.n	8008cd0 <_dtoa_r+0x248>
 8008c54:	9b05      	ldr	r3, [sp, #20]
 8008c56:	9a00      	ldr	r2, [sp, #0]
 8008c58:	920a      	str	r2, [sp, #40]	; 0x28
 8008c5a:	4413      	add	r3, r2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9307      	str	r3, [sp, #28]
 8008c62:	9b06      	ldr	r3, [sp, #24]
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	f200 8089 	bhi.w	8008d7c <_dtoa_r+0x2f4>
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	bfc4      	itt	gt
 8008c6e:	3b04      	subgt	r3, #4
 8008c70:	9306      	strgt	r3, [sp, #24]
 8008c72:	9b06      	ldr	r3, [sp, #24]
 8008c74:	f1a3 0302 	sub.w	r3, r3, #2
 8008c78:	bfcc      	ite	gt
 8008c7a:	2500      	movgt	r5, #0
 8008c7c:	2501      	movle	r5, #1
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	f200 8087 	bhi.w	8008d92 <_dtoa_r+0x30a>
 8008c84:	e8df f003 	tbb	[pc, r3]
 8008c88:	59383a2d 	.word	0x59383a2d
 8008c8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c90:	441d      	add	r5, r3
 8008c92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	bfc1      	itttt	gt
 8008c9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ca2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ca6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008caa:	bfda      	itte	le
 8008cac:	f1c3 0320 	rsble	r3, r3, #32
 8008cb0:	fa06 f003 	lslle.w	r0, r6, r3
 8008cb4:	4318      	orrgt	r0, r3
 8008cb6:	f7f7 fc25 	bl	8000504 <__aeabi_ui2d>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008cc2:	3d01      	subs	r5, #1
 8008cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8008cc6:	e76a      	b.n	8008b9e <_dtoa_r+0x116>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e7b2      	b.n	8008c32 <_dtoa_r+0x1aa>
 8008ccc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008cce:	e7b1      	b.n	8008c34 <_dtoa_r+0x1ac>
 8008cd0:	9b04      	ldr	r3, [sp, #16]
 8008cd2:	9a00      	ldr	r2, [sp, #0]
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	9304      	str	r3, [sp, #16]
 8008cd8:	4253      	negs	r3, r2
 8008cda:	9307      	str	r3, [sp, #28]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce0:	e7bf      	b.n	8008c62 <_dtoa_r+0x1da>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9308      	str	r3, [sp, #32]
 8008ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	dc55      	bgt.n	8008d98 <_dtoa_r+0x310>
 8008cec:	2301      	movs	r3, #1
 8008cee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf6:	e00c      	b.n	8008d12 <_dtoa_r+0x28a>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e7f3      	b.n	8008ce4 <_dtoa_r+0x25c>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d00:	9308      	str	r3, [sp, #32]
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	4413      	add	r3, r2
 8008d06:	9302      	str	r3, [sp, #8]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	9303      	str	r3, [sp, #12]
 8008d0e:	bfb8      	it	lt
 8008d10:	2301      	movlt	r3, #1
 8008d12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d14:	2200      	movs	r2, #0
 8008d16:	6042      	str	r2, [r0, #4]
 8008d18:	2204      	movs	r2, #4
 8008d1a:	f102 0614 	add.w	r6, r2, #20
 8008d1e:	429e      	cmp	r6, r3
 8008d20:	6841      	ldr	r1, [r0, #4]
 8008d22:	d93d      	bls.n	8008da0 <_dtoa_r+0x318>
 8008d24:	4620      	mov	r0, r4
 8008d26:	f001 fa5d 	bl	800a1e4 <_Balloc>
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d13b      	bne.n	8008da8 <_dtoa_r+0x320>
 8008d30:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <_dtoa_r+0x2f0>)
 8008d32:	4602      	mov	r2, r0
 8008d34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d38:	e6c0      	b.n	8008abc <_dtoa_r+0x34>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e7df      	b.n	8008cfe <_dtoa_r+0x276>
 8008d3e:	bf00      	nop
 8008d40:	636f4361 	.word	0x636f4361
 8008d44:	3fd287a7 	.word	0x3fd287a7
 8008d48:	8b60c8b3 	.word	0x8b60c8b3
 8008d4c:	3fc68a28 	.word	0x3fc68a28
 8008d50:	509f79fb 	.word	0x509f79fb
 8008d54:	3fd34413 	.word	0x3fd34413
 8008d58:	0800c4ae 	.word	0x0800c4ae
 8008d5c:	0800c4c5 	.word	0x0800c4c5
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	0800c4aa 	.word	0x0800c4aa
 8008d68:	0800c4a1 	.word	0x0800c4a1
 8008d6c:	0800c782 	.word	0x0800c782
 8008d70:	3ff80000 	.word	0x3ff80000
 8008d74:	0800c698 	.word	0x0800c698
 8008d78:	0800c520 	.word	0x0800c520
 8008d7c:	2501      	movs	r5, #1
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9306      	str	r3, [sp, #24]
 8008d82:	9508      	str	r5, [sp, #32]
 8008d84:	f04f 33ff 	mov.w	r3, #4294967295
 8008d88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2312      	movs	r3, #18
 8008d90:	e7b0      	b.n	8008cf4 <_dtoa_r+0x26c>
 8008d92:	2301      	movs	r3, #1
 8008d94:	9308      	str	r3, [sp, #32]
 8008d96:	e7f5      	b.n	8008d84 <_dtoa_r+0x2fc>
 8008d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d9e:	e7b8      	b.n	8008d12 <_dtoa_r+0x28a>
 8008da0:	3101      	adds	r1, #1
 8008da2:	6041      	str	r1, [r0, #4]
 8008da4:	0052      	lsls	r2, r2, #1
 8008da6:	e7b8      	b.n	8008d1a <_dtoa_r+0x292>
 8008da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008daa:	9a01      	ldr	r2, [sp, #4]
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	2b0e      	cmp	r3, #14
 8008db2:	f200 809d 	bhi.w	8008ef0 <_dtoa_r+0x468>
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	f000 809a 	beq.w	8008ef0 <_dtoa_r+0x468>
 8008dbc:	9b00      	ldr	r3, [sp, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	dd32      	ble.n	8008e28 <_dtoa_r+0x3a0>
 8008dc2:	4ab7      	ldr	r2, [pc, #732]	; (80090a0 <_dtoa_r+0x618>)
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dd0:	9b00      	ldr	r3, [sp, #0]
 8008dd2:	05d8      	lsls	r0, r3, #23
 8008dd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008dd8:	d516      	bpl.n	8008e08 <_dtoa_r+0x380>
 8008dda:	4bb2      	ldr	r3, [pc, #712]	; (80090a4 <_dtoa_r+0x61c>)
 8008ddc:	ec51 0b19 	vmov	r0, r1, d9
 8008de0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008de4:	f7f7 fd32 	bl	800084c <__aeabi_ddiv>
 8008de8:	f007 070f 	and.w	r7, r7, #15
 8008dec:	4682      	mov	sl, r0
 8008dee:	468b      	mov	fp, r1
 8008df0:	2503      	movs	r5, #3
 8008df2:	4eac      	ldr	r6, [pc, #688]	; (80090a4 <_dtoa_r+0x61c>)
 8008df4:	b957      	cbnz	r7, 8008e0c <_dtoa_r+0x384>
 8008df6:	4642      	mov	r2, r8
 8008df8:	464b      	mov	r3, r9
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	f7f7 fd25 	bl	800084c <__aeabi_ddiv>
 8008e02:	4682      	mov	sl, r0
 8008e04:	468b      	mov	fp, r1
 8008e06:	e028      	b.n	8008e5a <_dtoa_r+0x3d2>
 8008e08:	2502      	movs	r5, #2
 8008e0a:	e7f2      	b.n	8008df2 <_dtoa_r+0x36a>
 8008e0c:	07f9      	lsls	r1, r7, #31
 8008e0e:	d508      	bpl.n	8008e22 <_dtoa_r+0x39a>
 8008e10:	4640      	mov	r0, r8
 8008e12:	4649      	mov	r1, r9
 8008e14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	4680      	mov	r8, r0
 8008e20:	4689      	mov	r9, r1
 8008e22:	107f      	asrs	r7, r7, #1
 8008e24:	3608      	adds	r6, #8
 8008e26:	e7e5      	b.n	8008df4 <_dtoa_r+0x36c>
 8008e28:	f000 809b 	beq.w	8008f62 <_dtoa_r+0x4da>
 8008e2c:	9b00      	ldr	r3, [sp, #0]
 8008e2e:	4f9d      	ldr	r7, [pc, #628]	; (80090a4 <_dtoa_r+0x61c>)
 8008e30:	425e      	negs	r6, r3
 8008e32:	4b9b      	ldr	r3, [pc, #620]	; (80090a0 <_dtoa_r+0x618>)
 8008e34:	f006 020f 	and.w	r2, r6, #15
 8008e38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	ec51 0b19 	vmov	r0, r1, d9
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	1136      	asrs	r6, r6, #4
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	468b      	mov	fp, r1
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2502      	movs	r5, #2
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	d17a      	bne.n	8008f4c <_dtoa_r+0x4c4>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1d3      	bne.n	8008e02 <_dtoa_r+0x37a>
 8008e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8082 	beq.w	8008f66 <_dtoa_r+0x4de>
 8008e62:	4b91      	ldr	r3, [pc, #580]	; (80090a8 <_dtoa_r+0x620>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	4650      	mov	r0, sl
 8008e68:	4659      	mov	r1, fp
 8008e6a:	f7f7 fe37 	bl	8000adc <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d079      	beq.n	8008f66 <_dtoa_r+0x4de>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d076      	beq.n	8008f66 <_dtoa_r+0x4de>
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	dd36      	ble.n	8008eec <_dtoa_r+0x464>
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	4650      	mov	r0, sl
 8008e82:	4659      	mov	r1, fp
 8008e84:	1e5f      	subs	r7, r3, #1
 8008e86:	2200      	movs	r2, #0
 8008e88:	4b88      	ldr	r3, [pc, #544]	; (80090ac <_dtoa_r+0x624>)
 8008e8a:	f7f7 fbb5 	bl	80005f8 <__aeabi_dmul>
 8008e8e:	9e02      	ldr	r6, [sp, #8]
 8008e90:	4682      	mov	sl, r0
 8008e92:	468b      	mov	fp, r1
 8008e94:	3501      	adds	r5, #1
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7f7 fb44 	bl	8000524 <__aeabi_i2d>
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	465b      	mov	r3, fp
 8008ea0:	f7f7 fbaa 	bl	80005f8 <__aeabi_dmul>
 8008ea4:	4b82      	ldr	r3, [pc, #520]	; (80090b0 <_dtoa_r+0x628>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f7f7 f9f0 	bl	800028c <__adddf3>
 8008eac:	46d0      	mov	r8, sl
 8008eae:	46d9      	mov	r9, fp
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	d158      	bne.n	8008f6c <_dtoa_r+0x4e4>
 8008eba:	4b7e      	ldr	r3, [pc, #504]	; (80090b4 <_dtoa_r+0x62c>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	f7f7 f9e1 	bl	8000288 <__aeabi_dsub>
 8008ec6:	4652      	mov	r2, sl
 8008ec8:	465b      	mov	r3, fp
 8008eca:	4680      	mov	r8, r0
 8008ecc:	4689      	mov	r9, r1
 8008ece:	f7f7 fe23 	bl	8000b18 <__aeabi_dcmpgt>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f040 8295 	bne.w	8009402 <_dtoa_r+0x97a>
 8008ed8:	4652      	mov	r2, sl
 8008eda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ede:	4640      	mov	r0, r8
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	f7f7 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f040 8289 	bne.w	80093fe <_dtoa_r+0x976>
 8008eec:	ec5b ab19 	vmov	sl, fp, d9
 8008ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f2c0 8148 	blt.w	8009188 <_dtoa_r+0x700>
 8008ef8:	9a00      	ldr	r2, [sp, #0]
 8008efa:	2a0e      	cmp	r2, #14
 8008efc:	f300 8144 	bgt.w	8009188 <_dtoa_r+0x700>
 8008f00:	4b67      	ldr	r3, [pc, #412]	; (80090a0 <_dtoa_r+0x618>)
 8008f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f280 80d5 	bge.w	80090bc <_dtoa_r+0x634>
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f300 80d1 	bgt.w	80090bc <_dtoa_r+0x634>
 8008f1a:	f040 826f 	bne.w	80093fc <_dtoa_r+0x974>
 8008f1e:	4b65      	ldr	r3, [pc, #404]	; (80090b4 <_dtoa_r+0x62c>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	465b      	mov	r3, fp
 8008f2e:	f7f7 fde9 	bl	8000b04 <__aeabi_dcmpge>
 8008f32:	9e03      	ldr	r6, [sp, #12]
 8008f34:	4637      	mov	r7, r6
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f040 8245 	bne.w	80093c6 <_dtoa_r+0x93e>
 8008f3c:	9d01      	ldr	r5, [sp, #4]
 8008f3e:	2331      	movs	r3, #49	; 0x31
 8008f40:	f805 3b01 	strb.w	r3, [r5], #1
 8008f44:	9b00      	ldr	r3, [sp, #0]
 8008f46:	3301      	adds	r3, #1
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	e240      	b.n	80093ce <_dtoa_r+0x946>
 8008f4c:	07f2      	lsls	r2, r6, #31
 8008f4e:	d505      	bpl.n	8008f5c <_dtoa_r+0x4d4>
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	f7f7 fb50 	bl	80005f8 <__aeabi_dmul>
 8008f58:	3501      	adds	r5, #1
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	1076      	asrs	r6, r6, #1
 8008f5e:	3708      	adds	r7, #8
 8008f60:	e777      	b.n	8008e52 <_dtoa_r+0x3ca>
 8008f62:	2502      	movs	r5, #2
 8008f64:	e779      	b.n	8008e5a <_dtoa_r+0x3d2>
 8008f66:	9f00      	ldr	r7, [sp, #0]
 8008f68:	9e03      	ldr	r6, [sp, #12]
 8008f6a:	e794      	b.n	8008e96 <_dtoa_r+0x40e>
 8008f6c:	9901      	ldr	r1, [sp, #4]
 8008f6e:	4b4c      	ldr	r3, [pc, #304]	; (80090a0 <_dtoa_r+0x618>)
 8008f70:	4431      	add	r1, r6
 8008f72:	910d      	str	r1, [sp, #52]	; 0x34
 8008f74:	9908      	ldr	r1, [sp, #32]
 8008f76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d043      	beq.n	800900a <_dtoa_r+0x582>
 8008f82:	494d      	ldr	r1, [pc, #308]	; (80090b8 <_dtoa_r+0x630>)
 8008f84:	2000      	movs	r0, #0
 8008f86:	f7f7 fc61 	bl	800084c <__aeabi_ddiv>
 8008f8a:	4652      	mov	r2, sl
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	f7f7 f97b 	bl	8000288 <__aeabi_dsub>
 8008f92:	9d01      	ldr	r5, [sp, #4]
 8008f94:	4682      	mov	sl, r0
 8008f96:	468b      	mov	fp, r1
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	f7f7 fddc 	bl	8000b58 <__aeabi_d2iz>
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	f7f7 fabf 	bl	8000524 <__aeabi_i2d>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f7f7 f96b 	bl	8000288 <__aeabi_dsub>
 8008fb2:	3630      	adds	r6, #48	; 0x30
 8008fb4:	f805 6b01 	strb.w	r6, [r5], #1
 8008fb8:	4652      	mov	r2, sl
 8008fba:	465b      	mov	r3, fp
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	f7f7 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d163      	bne.n	8009090 <_dtoa_r+0x608>
 8008fc8:	4642      	mov	r2, r8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	4936      	ldr	r1, [pc, #216]	; (80090a8 <_dtoa_r+0x620>)
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f7f7 f95a 	bl	8000288 <__aeabi_dsub>
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	f7f7 fd80 	bl	8000adc <__aeabi_dcmplt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f040 80b5 	bne.w	800914c <_dtoa_r+0x6c4>
 8008fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe4:	429d      	cmp	r5, r3
 8008fe6:	d081      	beq.n	8008eec <_dtoa_r+0x464>
 8008fe8:	4b30      	ldr	r3, [pc, #192]	; (80090ac <_dtoa_r+0x624>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	4650      	mov	r0, sl
 8008fee:	4659      	mov	r1, fp
 8008ff0:	f7f7 fb02 	bl	80005f8 <__aeabi_dmul>
 8008ff4:	4b2d      	ldr	r3, [pc, #180]	; (80090ac <_dtoa_r+0x624>)
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	468b      	mov	fp, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	2200      	movs	r2, #0
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	4680      	mov	r8, r0
 8009006:	4689      	mov	r9, r1
 8009008:	e7c6      	b.n	8008f98 <_dtoa_r+0x510>
 800900a:	4650      	mov	r0, sl
 800900c:	4659      	mov	r1, fp
 800900e:	f7f7 faf3 	bl	80005f8 <__aeabi_dmul>
 8009012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009014:	9d01      	ldr	r5, [sp, #4]
 8009016:	930f      	str	r3, [sp, #60]	; 0x3c
 8009018:	4682      	mov	sl, r0
 800901a:	468b      	mov	fp, r1
 800901c:	4649      	mov	r1, r9
 800901e:	4640      	mov	r0, r8
 8009020:	f7f7 fd9a 	bl	8000b58 <__aeabi_d2iz>
 8009024:	4606      	mov	r6, r0
 8009026:	f7f7 fa7d 	bl	8000524 <__aeabi_i2d>
 800902a:	3630      	adds	r6, #48	; 0x30
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 f928 	bl	8000288 <__aeabi_dsub>
 8009038:	f805 6b01 	strb.w	r6, [r5], #1
 800903c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800903e:	429d      	cmp	r5, r3
 8009040:	4680      	mov	r8, r0
 8009042:	4689      	mov	r9, r1
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	d124      	bne.n	8009094 <_dtoa_r+0x60c>
 800904a:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <_dtoa_r+0x630>)
 800904c:	4650      	mov	r0, sl
 800904e:	4659      	mov	r1, fp
 8009050:	f7f7 f91c 	bl	800028c <__adddf3>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4640      	mov	r0, r8
 800905a:	4649      	mov	r1, r9
 800905c:	f7f7 fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8009060:	2800      	cmp	r0, #0
 8009062:	d173      	bne.n	800914c <_dtoa_r+0x6c4>
 8009064:	4652      	mov	r2, sl
 8009066:	465b      	mov	r3, fp
 8009068:	4913      	ldr	r1, [pc, #76]	; (80090b8 <_dtoa_r+0x630>)
 800906a:	2000      	movs	r0, #0
 800906c:	f7f7 f90c 	bl	8000288 <__aeabi_dsub>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4640      	mov	r0, r8
 8009076:	4649      	mov	r1, r9
 8009078:	f7f7 fd30 	bl	8000adc <__aeabi_dcmplt>
 800907c:	2800      	cmp	r0, #0
 800907e:	f43f af35 	beq.w	8008eec <_dtoa_r+0x464>
 8009082:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009084:	1e6b      	subs	r3, r5, #1
 8009086:	930f      	str	r3, [sp, #60]	; 0x3c
 8009088:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800908c:	2b30      	cmp	r3, #48	; 0x30
 800908e:	d0f8      	beq.n	8009082 <_dtoa_r+0x5fa>
 8009090:	9700      	str	r7, [sp, #0]
 8009092:	e049      	b.n	8009128 <_dtoa_r+0x6a0>
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <_dtoa_r+0x624>)
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	4680      	mov	r8, r0
 800909c:	4689      	mov	r9, r1
 800909e:	e7bd      	b.n	800901c <_dtoa_r+0x594>
 80090a0:	0800c698 	.word	0x0800c698
 80090a4:	0800c670 	.word	0x0800c670
 80090a8:	3ff00000 	.word	0x3ff00000
 80090ac:	40240000 	.word	0x40240000
 80090b0:	401c0000 	.word	0x401c0000
 80090b4:	40140000 	.word	0x40140000
 80090b8:	3fe00000 	.word	0x3fe00000
 80090bc:	9d01      	ldr	r5, [sp, #4]
 80090be:	4656      	mov	r6, sl
 80090c0:	465f      	mov	r7, fp
 80090c2:	4642      	mov	r2, r8
 80090c4:	464b      	mov	r3, r9
 80090c6:	4630      	mov	r0, r6
 80090c8:	4639      	mov	r1, r7
 80090ca:	f7f7 fbbf 	bl	800084c <__aeabi_ddiv>
 80090ce:	f7f7 fd43 	bl	8000b58 <__aeabi_d2iz>
 80090d2:	4682      	mov	sl, r0
 80090d4:	f7f7 fa26 	bl	8000524 <__aeabi_i2d>
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	f7f7 fa8c 	bl	80005f8 <__aeabi_dmul>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80090ec:	f7f7 f8cc 	bl	8000288 <__aeabi_dsub>
 80090f0:	f805 6b01 	strb.w	r6, [r5], #1
 80090f4:	9e01      	ldr	r6, [sp, #4]
 80090f6:	9f03      	ldr	r7, [sp, #12]
 80090f8:	1bae      	subs	r6, r5, r6
 80090fa:	42b7      	cmp	r7, r6
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	d135      	bne.n	800916e <_dtoa_r+0x6e6>
 8009102:	f7f7 f8c3 	bl	800028c <__adddf3>
 8009106:	4642      	mov	r2, r8
 8009108:	464b      	mov	r3, r9
 800910a:	4606      	mov	r6, r0
 800910c:	460f      	mov	r7, r1
 800910e:	f7f7 fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8009112:	b9d0      	cbnz	r0, 800914a <_dtoa_r+0x6c2>
 8009114:	4642      	mov	r2, r8
 8009116:	464b      	mov	r3, r9
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009120:	b110      	cbz	r0, 8009128 <_dtoa_r+0x6a0>
 8009122:	f01a 0f01 	tst.w	sl, #1
 8009126:	d110      	bne.n	800914a <_dtoa_r+0x6c2>
 8009128:	4620      	mov	r0, r4
 800912a:	ee18 1a10 	vmov	r1, s16
 800912e:	f001 f899 	bl	800a264 <_Bfree>
 8009132:	2300      	movs	r3, #0
 8009134:	9800      	ldr	r0, [sp, #0]
 8009136:	702b      	strb	r3, [r5, #0]
 8009138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800913a:	3001      	adds	r0, #1
 800913c:	6018      	str	r0, [r3, #0]
 800913e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009140:	2b00      	cmp	r3, #0
 8009142:	f43f acf1 	beq.w	8008b28 <_dtoa_r+0xa0>
 8009146:	601d      	str	r5, [r3, #0]
 8009148:	e4ee      	b.n	8008b28 <_dtoa_r+0xa0>
 800914a:	9f00      	ldr	r7, [sp, #0]
 800914c:	462b      	mov	r3, r5
 800914e:	461d      	mov	r5, r3
 8009150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009154:	2a39      	cmp	r2, #57	; 0x39
 8009156:	d106      	bne.n	8009166 <_dtoa_r+0x6de>
 8009158:	9a01      	ldr	r2, [sp, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d1f7      	bne.n	800914e <_dtoa_r+0x6c6>
 800915e:	9901      	ldr	r1, [sp, #4]
 8009160:	2230      	movs	r2, #48	; 0x30
 8009162:	3701      	adds	r7, #1
 8009164:	700a      	strb	r2, [r1, #0]
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	3201      	adds	r2, #1
 800916a:	701a      	strb	r2, [r3, #0]
 800916c:	e790      	b.n	8009090 <_dtoa_r+0x608>
 800916e:	4ba6      	ldr	r3, [pc, #664]	; (8009408 <_dtoa_r+0x980>)
 8009170:	2200      	movs	r2, #0
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	2200      	movs	r2, #0
 8009178:	2300      	movs	r3, #0
 800917a:	4606      	mov	r6, r0
 800917c:	460f      	mov	r7, r1
 800917e:	f7f7 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009182:	2800      	cmp	r0, #0
 8009184:	d09d      	beq.n	80090c2 <_dtoa_r+0x63a>
 8009186:	e7cf      	b.n	8009128 <_dtoa_r+0x6a0>
 8009188:	9a08      	ldr	r2, [sp, #32]
 800918a:	2a00      	cmp	r2, #0
 800918c:	f000 80d7 	beq.w	800933e <_dtoa_r+0x8b6>
 8009190:	9a06      	ldr	r2, [sp, #24]
 8009192:	2a01      	cmp	r2, #1
 8009194:	f300 80ba 	bgt.w	800930c <_dtoa_r+0x884>
 8009198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800919a:	2a00      	cmp	r2, #0
 800919c:	f000 80b2 	beq.w	8009304 <_dtoa_r+0x87c>
 80091a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091a4:	9e07      	ldr	r6, [sp, #28]
 80091a6:	9d04      	ldr	r5, [sp, #16]
 80091a8:	9a04      	ldr	r2, [sp, #16]
 80091aa:	441a      	add	r2, r3
 80091ac:	9204      	str	r2, [sp, #16]
 80091ae:	9a05      	ldr	r2, [sp, #20]
 80091b0:	2101      	movs	r1, #1
 80091b2:	441a      	add	r2, r3
 80091b4:	4620      	mov	r0, r4
 80091b6:	9205      	str	r2, [sp, #20]
 80091b8:	f001 f956 	bl	800a468 <__i2b>
 80091bc:	4607      	mov	r7, r0
 80091be:	2d00      	cmp	r5, #0
 80091c0:	dd0c      	ble.n	80091dc <_dtoa_r+0x754>
 80091c2:	9b05      	ldr	r3, [sp, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dd09      	ble.n	80091dc <_dtoa_r+0x754>
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	bfa8      	it	ge
 80091ce:	462b      	movge	r3, r5
 80091d0:	1ad2      	subs	r2, r2, r3
 80091d2:	9204      	str	r2, [sp, #16]
 80091d4:	9a05      	ldr	r2, [sp, #20]
 80091d6:	1aed      	subs	r5, r5, r3
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	b31b      	cbz	r3, 8009228 <_dtoa_r+0x7a0>
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 80af 	beq.w	8009346 <_dtoa_r+0x8be>
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	dd13      	ble.n	8009214 <_dtoa_r+0x78c>
 80091ec:	4639      	mov	r1, r7
 80091ee:	4632      	mov	r2, r6
 80091f0:	4620      	mov	r0, r4
 80091f2:	f001 f9f9 	bl	800a5e8 <__pow5mult>
 80091f6:	ee18 2a10 	vmov	r2, s16
 80091fa:	4601      	mov	r1, r0
 80091fc:	4607      	mov	r7, r0
 80091fe:	4620      	mov	r0, r4
 8009200:	f001 f948 	bl	800a494 <__multiply>
 8009204:	ee18 1a10 	vmov	r1, s16
 8009208:	4680      	mov	r8, r0
 800920a:	4620      	mov	r0, r4
 800920c:	f001 f82a 	bl	800a264 <_Bfree>
 8009210:	ee08 8a10 	vmov	s16, r8
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	1b9a      	subs	r2, r3, r6
 8009218:	d006      	beq.n	8009228 <_dtoa_r+0x7a0>
 800921a:	ee18 1a10 	vmov	r1, s16
 800921e:	4620      	mov	r0, r4
 8009220:	f001 f9e2 	bl	800a5e8 <__pow5mult>
 8009224:	ee08 0a10 	vmov	s16, r0
 8009228:	2101      	movs	r1, #1
 800922a:	4620      	mov	r0, r4
 800922c:	f001 f91c 	bl	800a468 <__i2b>
 8009230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009232:	2b00      	cmp	r3, #0
 8009234:	4606      	mov	r6, r0
 8009236:	f340 8088 	ble.w	800934a <_dtoa_r+0x8c2>
 800923a:	461a      	mov	r2, r3
 800923c:	4601      	mov	r1, r0
 800923e:	4620      	mov	r0, r4
 8009240:	f001 f9d2 	bl	800a5e8 <__pow5mult>
 8009244:	9b06      	ldr	r3, [sp, #24]
 8009246:	2b01      	cmp	r3, #1
 8009248:	4606      	mov	r6, r0
 800924a:	f340 8081 	ble.w	8009350 <_dtoa_r+0x8c8>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	6933      	ldr	r3, [r6, #16]
 8009254:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009258:	6918      	ldr	r0, [r3, #16]
 800925a:	f001 f8b5 	bl	800a3c8 <__hi0bits>
 800925e:	f1c0 0020 	rsb	r0, r0, #32
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	4418      	add	r0, r3
 8009266:	f010 001f 	ands.w	r0, r0, #31
 800926a:	f000 8092 	beq.w	8009392 <_dtoa_r+0x90a>
 800926e:	f1c0 0320 	rsb	r3, r0, #32
 8009272:	2b04      	cmp	r3, #4
 8009274:	f340 808a 	ble.w	800938c <_dtoa_r+0x904>
 8009278:	f1c0 001c 	rsb	r0, r0, #28
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	4403      	add	r3, r0
 8009280:	9304      	str	r3, [sp, #16]
 8009282:	9b05      	ldr	r3, [sp, #20]
 8009284:	4403      	add	r3, r0
 8009286:	4405      	add	r5, r0
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	dd07      	ble.n	80092a0 <_dtoa_r+0x818>
 8009290:	ee18 1a10 	vmov	r1, s16
 8009294:	461a      	mov	r2, r3
 8009296:	4620      	mov	r0, r4
 8009298:	f001 fa00 	bl	800a69c <__lshift>
 800929c:	ee08 0a10 	vmov	s16, r0
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dd05      	ble.n	80092b2 <_dtoa_r+0x82a>
 80092a6:	4631      	mov	r1, r6
 80092a8:	461a      	mov	r2, r3
 80092aa:	4620      	mov	r0, r4
 80092ac:	f001 f9f6 	bl	800a69c <__lshift>
 80092b0:	4606      	mov	r6, r0
 80092b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d06e      	beq.n	8009396 <_dtoa_r+0x90e>
 80092b8:	ee18 0a10 	vmov	r0, s16
 80092bc:	4631      	mov	r1, r6
 80092be:	f001 fa5d 	bl	800a77c <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	da67      	bge.n	8009396 <_dtoa_r+0x90e>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	ee18 1a10 	vmov	r1, s16
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	220a      	movs	r2, #10
 80092d2:	2300      	movs	r3, #0
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 ffe7 	bl	800a2a8 <__multadd>
 80092da:	9b08      	ldr	r3, [sp, #32]
 80092dc:	ee08 0a10 	vmov	s16, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 81b1 	beq.w	8009648 <_dtoa_r+0xbc0>
 80092e6:	2300      	movs	r3, #0
 80092e8:	4639      	mov	r1, r7
 80092ea:	220a      	movs	r2, #10
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 ffdb 	bl	800a2a8 <__multadd>
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	4607      	mov	r7, r0
 80092f8:	f300 808e 	bgt.w	8009418 <_dtoa_r+0x990>
 80092fc:	9b06      	ldr	r3, [sp, #24]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	dc51      	bgt.n	80093a6 <_dtoa_r+0x91e>
 8009302:	e089      	b.n	8009418 <_dtoa_r+0x990>
 8009304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800930a:	e74b      	b.n	80091a4 <_dtoa_r+0x71c>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1e5e      	subs	r6, r3, #1
 8009310:	9b07      	ldr	r3, [sp, #28]
 8009312:	42b3      	cmp	r3, r6
 8009314:	bfbf      	itttt	lt
 8009316:	9b07      	ldrlt	r3, [sp, #28]
 8009318:	9607      	strlt	r6, [sp, #28]
 800931a:	1af2      	sublt	r2, r6, r3
 800931c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800931e:	bfb6      	itet	lt
 8009320:	189b      	addlt	r3, r3, r2
 8009322:	1b9e      	subge	r6, r3, r6
 8009324:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	bfb8      	it	lt
 800932a:	2600      	movlt	r6, #0
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfb7      	itett	lt
 8009330:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009334:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009338:	1a9d      	sublt	r5, r3, r2
 800933a:	2300      	movlt	r3, #0
 800933c:	e734      	b.n	80091a8 <_dtoa_r+0x720>
 800933e:	9e07      	ldr	r6, [sp, #28]
 8009340:	9d04      	ldr	r5, [sp, #16]
 8009342:	9f08      	ldr	r7, [sp, #32]
 8009344:	e73b      	b.n	80091be <_dtoa_r+0x736>
 8009346:	9a07      	ldr	r2, [sp, #28]
 8009348:	e767      	b.n	800921a <_dtoa_r+0x792>
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	2b01      	cmp	r3, #1
 800934e:	dc18      	bgt.n	8009382 <_dtoa_r+0x8fa>
 8009350:	f1ba 0f00 	cmp.w	sl, #0
 8009354:	d115      	bne.n	8009382 <_dtoa_r+0x8fa>
 8009356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800935a:	b993      	cbnz	r3, 8009382 <_dtoa_r+0x8fa>
 800935c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	b183      	cbz	r3, 8009388 <_dtoa_r+0x900>
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	3301      	adds	r3, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	3301      	adds	r3, #1
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	f04f 0801 	mov.w	r8, #1
 8009376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009378:	2b00      	cmp	r3, #0
 800937a:	f47f af6a 	bne.w	8009252 <_dtoa_r+0x7ca>
 800937e:	2001      	movs	r0, #1
 8009380:	e76f      	b.n	8009262 <_dtoa_r+0x7da>
 8009382:	f04f 0800 	mov.w	r8, #0
 8009386:	e7f6      	b.n	8009376 <_dtoa_r+0x8ee>
 8009388:	4698      	mov	r8, r3
 800938a:	e7f4      	b.n	8009376 <_dtoa_r+0x8ee>
 800938c:	f43f af7d 	beq.w	800928a <_dtoa_r+0x802>
 8009390:	4618      	mov	r0, r3
 8009392:	301c      	adds	r0, #28
 8009394:	e772      	b.n	800927c <_dtoa_r+0x7f4>
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dc37      	bgt.n	800940c <_dtoa_r+0x984>
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	dd34      	ble.n	800940c <_dtoa_r+0x984>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	b96b      	cbnz	r3, 80093c6 <_dtoa_r+0x93e>
 80093aa:	4631      	mov	r1, r6
 80093ac:	2205      	movs	r2, #5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 ff7a 	bl	800a2a8 <__multadd>
 80093b4:	4601      	mov	r1, r0
 80093b6:	4606      	mov	r6, r0
 80093b8:	ee18 0a10 	vmov	r0, s16
 80093bc:	f001 f9de 	bl	800a77c <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f73f adbb 	bgt.w	8008f3c <_dtoa_r+0x4b4>
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	9d01      	ldr	r5, [sp, #4]
 80093ca:	43db      	mvns	r3, r3
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	4631      	mov	r1, r6
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 ff45 	bl	800a264 <_Bfree>
 80093da:	2f00      	cmp	r7, #0
 80093dc:	f43f aea4 	beq.w	8009128 <_dtoa_r+0x6a0>
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	d005      	beq.n	80093f2 <_dtoa_r+0x96a>
 80093e6:	45b8      	cmp	r8, r7
 80093e8:	d003      	beq.n	80093f2 <_dtoa_r+0x96a>
 80093ea:	4641      	mov	r1, r8
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 ff39 	bl	800a264 <_Bfree>
 80093f2:	4639      	mov	r1, r7
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 ff35 	bl	800a264 <_Bfree>
 80093fa:	e695      	b.n	8009128 <_dtoa_r+0x6a0>
 80093fc:	2600      	movs	r6, #0
 80093fe:	4637      	mov	r7, r6
 8009400:	e7e1      	b.n	80093c6 <_dtoa_r+0x93e>
 8009402:	9700      	str	r7, [sp, #0]
 8009404:	4637      	mov	r7, r6
 8009406:	e599      	b.n	8008f3c <_dtoa_r+0x4b4>
 8009408:	40240000 	.word	0x40240000
 800940c:	9b08      	ldr	r3, [sp, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80ca 	beq.w	80095a8 <_dtoa_r+0xb20>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	9302      	str	r3, [sp, #8]
 8009418:	2d00      	cmp	r5, #0
 800941a:	dd05      	ble.n	8009428 <_dtoa_r+0x9a0>
 800941c:	4639      	mov	r1, r7
 800941e:	462a      	mov	r2, r5
 8009420:	4620      	mov	r0, r4
 8009422:	f001 f93b 	bl	800a69c <__lshift>
 8009426:	4607      	mov	r7, r0
 8009428:	f1b8 0f00 	cmp.w	r8, #0
 800942c:	d05b      	beq.n	80094e6 <_dtoa_r+0xa5e>
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fed7 	bl	800a1e4 <_Balloc>
 8009436:	4605      	mov	r5, r0
 8009438:	b928      	cbnz	r0, 8009446 <_dtoa_r+0x9be>
 800943a:	4b87      	ldr	r3, [pc, #540]	; (8009658 <_dtoa_r+0xbd0>)
 800943c:	4602      	mov	r2, r0
 800943e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009442:	f7ff bb3b 	b.w	8008abc <_dtoa_r+0x34>
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	3202      	adds	r2, #2
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	f107 010c 	add.w	r1, r7, #12
 8009450:	300c      	adds	r0, #12
 8009452:	f7fd fb1d 	bl	8006a90 <memcpy>
 8009456:	2201      	movs	r2, #1
 8009458:	4629      	mov	r1, r5
 800945a:	4620      	mov	r0, r4
 800945c:	f001 f91e 	bl	800a69c <__lshift>
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	f103 0901 	add.w	r9, r3, #1
 8009466:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800946a:	4413      	add	r3, r2
 800946c:	9305      	str	r3, [sp, #20]
 800946e:	f00a 0301 	and.w	r3, sl, #1
 8009472:	46b8      	mov	r8, r7
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	4607      	mov	r7, r0
 8009478:	4631      	mov	r1, r6
 800947a:	ee18 0a10 	vmov	r0, s16
 800947e:	f7ff fa75 	bl	800896c <quorem>
 8009482:	4641      	mov	r1, r8
 8009484:	9002      	str	r0, [sp, #8]
 8009486:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800948a:	ee18 0a10 	vmov	r0, s16
 800948e:	f001 f975 	bl	800a77c <__mcmp>
 8009492:	463a      	mov	r2, r7
 8009494:	9003      	str	r0, [sp, #12]
 8009496:	4631      	mov	r1, r6
 8009498:	4620      	mov	r0, r4
 800949a:	f001 f98b 	bl	800a7b4 <__mdiff>
 800949e:	68c2      	ldr	r2, [r0, #12]
 80094a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80094a4:	4605      	mov	r5, r0
 80094a6:	bb02      	cbnz	r2, 80094ea <_dtoa_r+0xa62>
 80094a8:	4601      	mov	r1, r0
 80094aa:	ee18 0a10 	vmov	r0, s16
 80094ae:	f001 f965 	bl	800a77c <__mcmp>
 80094b2:	4602      	mov	r2, r0
 80094b4:	4629      	mov	r1, r5
 80094b6:	4620      	mov	r0, r4
 80094b8:	9207      	str	r2, [sp, #28]
 80094ba:	f000 fed3 	bl	800a264 <_Bfree>
 80094be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80094c2:	ea43 0102 	orr.w	r1, r3, r2
 80094c6:	9b04      	ldr	r3, [sp, #16]
 80094c8:	430b      	orrs	r3, r1
 80094ca:	464d      	mov	r5, r9
 80094cc:	d10f      	bne.n	80094ee <_dtoa_r+0xa66>
 80094ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094d2:	d02a      	beq.n	800952a <_dtoa_r+0xaa2>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dd02      	ble.n	80094e0 <_dtoa_r+0xa58>
 80094da:	9b02      	ldr	r3, [sp, #8]
 80094dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80094e0:	f88b a000 	strb.w	sl, [fp]
 80094e4:	e775      	b.n	80093d2 <_dtoa_r+0x94a>
 80094e6:	4638      	mov	r0, r7
 80094e8:	e7ba      	b.n	8009460 <_dtoa_r+0x9d8>
 80094ea:	2201      	movs	r2, #1
 80094ec:	e7e2      	b.n	80094b4 <_dtoa_r+0xa2c>
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	db04      	blt.n	80094fe <_dtoa_r+0xa76>
 80094f4:	9906      	ldr	r1, [sp, #24]
 80094f6:	430b      	orrs	r3, r1
 80094f8:	9904      	ldr	r1, [sp, #16]
 80094fa:	430b      	orrs	r3, r1
 80094fc:	d122      	bne.n	8009544 <_dtoa_r+0xabc>
 80094fe:	2a00      	cmp	r2, #0
 8009500:	ddee      	ble.n	80094e0 <_dtoa_r+0xa58>
 8009502:	ee18 1a10 	vmov	r1, s16
 8009506:	2201      	movs	r2, #1
 8009508:	4620      	mov	r0, r4
 800950a:	f001 f8c7 	bl	800a69c <__lshift>
 800950e:	4631      	mov	r1, r6
 8009510:	ee08 0a10 	vmov	s16, r0
 8009514:	f001 f932 	bl	800a77c <__mcmp>
 8009518:	2800      	cmp	r0, #0
 800951a:	dc03      	bgt.n	8009524 <_dtoa_r+0xa9c>
 800951c:	d1e0      	bne.n	80094e0 <_dtoa_r+0xa58>
 800951e:	f01a 0f01 	tst.w	sl, #1
 8009522:	d0dd      	beq.n	80094e0 <_dtoa_r+0xa58>
 8009524:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009528:	d1d7      	bne.n	80094da <_dtoa_r+0xa52>
 800952a:	2339      	movs	r3, #57	; 0x39
 800952c:	f88b 3000 	strb.w	r3, [fp]
 8009530:	462b      	mov	r3, r5
 8009532:	461d      	mov	r5, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800953a:	2a39      	cmp	r2, #57	; 0x39
 800953c:	d071      	beq.n	8009622 <_dtoa_r+0xb9a>
 800953e:	3201      	adds	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	e746      	b.n	80093d2 <_dtoa_r+0x94a>
 8009544:	2a00      	cmp	r2, #0
 8009546:	dd07      	ble.n	8009558 <_dtoa_r+0xad0>
 8009548:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800954c:	d0ed      	beq.n	800952a <_dtoa_r+0xaa2>
 800954e:	f10a 0301 	add.w	r3, sl, #1
 8009552:	f88b 3000 	strb.w	r3, [fp]
 8009556:	e73c      	b.n	80093d2 <_dtoa_r+0x94a>
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800955e:	4599      	cmp	r9, r3
 8009560:	d047      	beq.n	80095f2 <_dtoa_r+0xb6a>
 8009562:	ee18 1a10 	vmov	r1, s16
 8009566:	2300      	movs	r3, #0
 8009568:	220a      	movs	r2, #10
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fe9c 	bl	800a2a8 <__multadd>
 8009570:	45b8      	cmp	r8, r7
 8009572:	ee08 0a10 	vmov	s16, r0
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	f04f 020a 	mov.w	r2, #10
 800957e:	4641      	mov	r1, r8
 8009580:	4620      	mov	r0, r4
 8009582:	d106      	bne.n	8009592 <_dtoa_r+0xb0a>
 8009584:	f000 fe90 	bl	800a2a8 <__multadd>
 8009588:	4680      	mov	r8, r0
 800958a:	4607      	mov	r7, r0
 800958c:	f109 0901 	add.w	r9, r9, #1
 8009590:	e772      	b.n	8009478 <_dtoa_r+0x9f0>
 8009592:	f000 fe89 	bl	800a2a8 <__multadd>
 8009596:	4639      	mov	r1, r7
 8009598:	4680      	mov	r8, r0
 800959a:	2300      	movs	r3, #0
 800959c:	220a      	movs	r2, #10
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fe82 	bl	800a2a8 <__multadd>
 80095a4:	4607      	mov	r7, r0
 80095a6:	e7f1      	b.n	800958c <_dtoa_r+0xb04>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	9d01      	ldr	r5, [sp, #4]
 80095ae:	ee18 0a10 	vmov	r0, s16
 80095b2:	4631      	mov	r1, r6
 80095b4:	f7ff f9da 	bl	800896c <quorem>
 80095b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	f805 ab01 	strb.w	sl, [r5], #1
 80095c2:	1aea      	subs	r2, r5, r3
 80095c4:	9b02      	ldr	r3, [sp, #8]
 80095c6:	4293      	cmp	r3, r2
 80095c8:	dd09      	ble.n	80095de <_dtoa_r+0xb56>
 80095ca:	ee18 1a10 	vmov	r1, s16
 80095ce:	2300      	movs	r3, #0
 80095d0:	220a      	movs	r2, #10
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fe68 	bl	800a2a8 <__multadd>
 80095d8:	ee08 0a10 	vmov	s16, r0
 80095dc:	e7e7      	b.n	80095ae <_dtoa_r+0xb26>
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bfc8      	it	gt
 80095e4:	461d      	movgt	r5, r3
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	bfd8      	it	le
 80095ea:	2501      	movle	r5, #1
 80095ec:	441d      	add	r5, r3
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	ee18 1a10 	vmov	r1, s16
 80095f6:	2201      	movs	r2, #1
 80095f8:	4620      	mov	r0, r4
 80095fa:	f001 f84f 	bl	800a69c <__lshift>
 80095fe:	4631      	mov	r1, r6
 8009600:	ee08 0a10 	vmov	s16, r0
 8009604:	f001 f8ba 	bl	800a77c <__mcmp>
 8009608:	2800      	cmp	r0, #0
 800960a:	dc91      	bgt.n	8009530 <_dtoa_r+0xaa8>
 800960c:	d102      	bne.n	8009614 <_dtoa_r+0xb8c>
 800960e:	f01a 0f01 	tst.w	sl, #1
 8009612:	d18d      	bne.n	8009530 <_dtoa_r+0xaa8>
 8009614:	462b      	mov	r3, r5
 8009616:	461d      	mov	r5, r3
 8009618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800961c:	2a30      	cmp	r2, #48	; 0x30
 800961e:	d0fa      	beq.n	8009616 <_dtoa_r+0xb8e>
 8009620:	e6d7      	b.n	80093d2 <_dtoa_r+0x94a>
 8009622:	9a01      	ldr	r2, [sp, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d184      	bne.n	8009532 <_dtoa_r+0xaaa>
 8009628:	9b00      	ldr	r3, [sp, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	2331      	movs	r3, #49	; 0x31
 8009630:	7013      	strb	r3, [r2, #0]
 8009632:	e6ce      	b.n	80093d2 <_dtoa_r+0x94a>
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <_dtoa_r+0xbd4>)
 8009636:	f7ff ba95 	b.w	8008b64 <_dtoa_r+0xdc>
 800963a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800963c:	2b00      	cmp	r3, #0
 800963e:	f47f aa6e 	bne.w	8008b1e <_dtoa_r+0x96>
 8009642:	4b07      	ldr	r3, [pc, #28]	; (8009660 <_dtoa_r+0xbd8>)
 8009644:	f7ff ba8e 	b.w	8008b64 <_dtoa_r+0xdc>
 8009648:	9b02      	ldr	r3, [sp, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	dcae      	bgt.n	80095ac <_dtoa_r+0xb24>
 800964e:	9b06      	ldr	r3, [sp, #24]
 8009650:	2b02      	cmp	r3, #2
 8009652:	f73f aea8 	bgt.w	80093a6 <_dtoa_r+0x91e>
 8009656:	e7a9      	b.n	80095ac <_dtoa_r+0xb24>
 8009658:	0800c520 	.word	0x0800c520
 800965c:	0800c781 	.word	0x0800c781
 8009660:	0800c4a1 	.word	0x0800c4a1

08009664 <__sflush_r>:
 8009664:	898a      	ldrh	r2, [r1, #12]
 8009666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966a:	4605      	mov	r5, r0
 800966c:	0710      	lsls	r0, r2, #28
 800966e:	460c      	mov	r4, r1
 8009670:	d458      	bmi.n	8009724 <__sflush_r+0xc0>
 8009672:	684b      	ldr	r3, [r1, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	dc05      	bgt.n	8009684 <__sflush_r+0x20>
 8009678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	dc02      	bgt.n	8009684 <__sflush_r+0x20>
 800967e:	2000      	movs	r0, #0
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009686:	2e00      	cmp	r6, #0
 8009688:	d0f9      	beq.n	800967e <__sflush_r+0x1a>
 800968a:	2300      	movs	r3, #0
 800968c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009690:	682f      	ldr	r7, [r5, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	d032      	beq.n	80096fc <__sflush_r+0x98>
 8009696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	075a      	lsls	r2, r3, #29
 800969c:	d505      	bpl.n	80096aa <__sflush_r+0x46>
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	1ac0      	subs	r0, r0, r3
 80096a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a4:	b10b      	cbz	r3, 80096aa <__sflush_r+0x46>
 80096a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a8:	1ac0      	subs	r0, r0, r3
 80096aa:	2300      	movs	r3, #0
 80096ac:	4602      	mov	r2, r0
 80096ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b0:	6a21      	ldr	r1, [r4, #32]
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b0      	blx	r6
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	d106      	bne.n	80096ca <__sflush_r+0x66>
 80096bc:	6829      	ldr	r1, [r5, #0]
 80096be:	291d      	cmp	r1, #29
 80096c0:	d82c      	bhi.n	800971c <__sflush_r+0xb8>
 80096c2:	4a2a      	ldr	r2, [pc, #168]	; (800976c <__sflush_r+0x108>)
 80096c4:	40ca      	lsrs	r2, r1
 80096c6:	07d6      	lsls	r6, r2, #31
 80096c8:	d528      	bpl.n	800971c <__sflush_r+0xb8>
 80096ca:	2200      	movs	r2, #0
 80096cc:	6062      	str	r2, [r4, #4]
 80096ce:	04d9      	lsls	r1, r3, #19
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	d504      	bpl.n	80096e0 <__sflush_r+0x7c>
 80096d6:	1c42      	adds	r2, r0, #1
 80096d8:	d101      	bne.n	80096de <__sflush_r+0x7a>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	b903      	cbnz	r3, 80096e0 <__sflush_r+0x7c>
 80096de:	6560      	str	r0, [r4, #84]	; 0x54
 80096e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e2:	602f      	str	r7, [r5, #0]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	d0ca      	beq.n	800967e <__sflush_r+0x1a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__sflush_r+0x92>
 80096f0:	4628      	mov	r0, r5
 80096f2:	f001 fa4f 	bl	800ab94 <_free_r>
 80096f6:	2000      	movs	r0, #0
 80096f8:	6360      	str	r0, [r4, #52]	; 0x34
 80096fa:	e7c1      	b.n	8009680 <__sflush_r+0x1c>
 80096fc:	6a21      	ldr	r1, [r4, #32]
 80096fe:	2301      	movs	r3, #1
 8009700:	4628      	mov	r0, r5
 8009702:	47b0      	blx	r6
 8009704:	1c41      	adds	r1, r0, #1
 8009706:	d1c7      	bne.n	8009698 <__sflush_r+0x34>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0c4      	beq.n	8009698 <__sflush_r+0x34>
 800970e:	2b1d      	cmp	r3, #29
 8009710:	d001      	beq.n	8009716 <__sflush_r+0xb2>
 8009712:	2b16      	cmp	r3, #22
 8009714:	d101      	bne.n	800971a <__sflush_r+0xb6>
 8009716:	602f      	str	r7, [r5, #0]
 8009718:	e7b1      	b.n	800967e <__sflush_r+0x1a>
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e7ad      	b.n	8009680 <__sflush_r+0x1c>
 8009724:	690f      	ldr	r7, [r1, #16]
 8009726:	2f00      	cmp	r7, #0
 8009728:	d0a9      	beq.n	800967e <__sflush_r+0x1a>
 800972a:	0793      	lsls	r3, r2, #30
 800972c:	680e      	ldr	r6, [r1, #0]
 800972e:	bf08      	it	eq
 8009730:	694b      	ldreq	r3, [r1, #20]
 8009732:	600f      	str	r7, [r1, #0]
 8009734:	bf18      	it	ne
 8009736:	2300      	movne	r3, #0
 8009738:	eba6 0807 	sub.w	r8, r6, r7
 800973c:	608b      	str	r3, [r1, #8]
 800973e:	f1b8 0f00 	cmp.w	r8, #0
 8009742:	dd9c      	ble.n	800967e <__sflush_r+0x1a>
 8009744:	6a21      	ldr	r1, [r4, #32]
 8009746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009748:	4643      	mov	r3, r8
 800974a:	463a      	mov	r2, r7
 800974c:	4628      	mov	r0, r5
 800974e:	47b0      	blx	r6
 8009750:	2800      	cmp	r0, #0
 8009752:	dc06      	bgt.n	8009762 <__sflush_r+0xfe>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e78e      	b.n	8009680 <__sflush_r+0x1c>
 8009762:	4407      	add	r7, r0
 8009764:	eba8 0800 	sub.w	r8, r8, r0
 8009768:	e7e9      	b.n	800973e <__sflush_r+0xda>
 800976a:	bf00      	nop
 800976c:	20400001 	.word	0x20400001

08009770 <_fflush_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b913      	cbnz	r3, 8009780 <_fflush_r+0x10>
 800977a:	2500      	movs	r5, #0
 800977c:	4628      	mov	r0, r5
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	b118      	cbz	r0, 800978a <_fflush_r+0x1a>
 8009782:	6983      	ldr	r3, [r0, #24]
 8009784:	b90b      	cbnz	r3, 800978a <_fflush_r+0x1a>
 8009786:	f000 f887 	bl	8009898 <__sinit>
 800978a:	4b14      	ldr	r3, [pc, #80]	; (80097dc <_fflush_r+0x6c>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d11b      	bne.n	80097c8 <_fflush_r+0x58>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0ef      	beq.n	800977a <_fflush_r+0xa>
 800979a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800979c:	07d0      	lsls	r0, r2, #31
 800979e:	d404      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a0:	0599      	lsls	r1, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a6:	f000 fc88 	bl	800a0ba <__retarget_lock_acquire_recursive>
 80097aa:	4628      	mov	r0, r5
 80097ac:	4621      	mov	r1, r4
 80097ae:	f7ff ff59 	bl	8009664 <__sflush_r>
 80097b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b4:	07da      	lsls	r2, r3, #31
 80097b6:	4605      	mov	r5, r0
 80097b8:	d4e0      	bmi.n	800977c <_fflush_r+0xc>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	059b      	lsls	r3, r3, #22
 80097be:	d4dd      	bmi.n	800977c <_fflush_r+0xc>
 80097c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c2:	f000 fc7b 	bl	800a0bc <__retarget_lock_release_recursive>
 80097c6:	e7d9      	b.n	800977c <_fflush_r+0xc>
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <_fflush_r+0x70>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d101      	bne.n	80097d2 <_fflush_r+0x62>
 80097ce:	68ac      	ldr	r4, [r5, #8]
 80097d0:	e7df      	b.n	8009792 <_fflush_r+0x22>
 80097d2:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <_fflush_r+0x74>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	bf08      	it	eq
 80097d8:	68ec      	ldreq	r4, [r5, #12]
 80097da:	e7da      	b.n	8009792 <_fflush_r+0x22>
 80097dc:	0800c554 	.word	0x0800c554
 80097e0:	0800c574 	.word	0x0800c574
 80097e4:	0800c534 	.word	0x0800c534

080097e8 <std>:
 80097e8:	2300      	movs	r3, #0
 80097ea:	b510      	push	{r4, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	e9c0 3300 	strd	r3, r3, [r0]
 80097f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097f6:	6083      	str	r3, [r0, #8]
 80097f8:	8181      	strh	r1, [r0, #12]
 80097fa:	6643      	str	r3, [r0, #100]	; 0x64
 80097fc:	81c2      	strh	r2, [r0, #14]
 80097fe:	6183      	str	r3, [r0, #24]
 8009800:	4619      	mov	r1, r3
 8009802:	2208      	movs	r2, #8
 8009804:	305c      	adds	r0, #92	; 0x5c
 8009806:	f7fd f951 	bl	8006aac <memset>
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <std+0x38>)
 800980c:	6263      	str	r3, [r4, #36]	; 0x24
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <std+0x3c>)
 8009810:	62a3      	str	r3, [r4, #40]	; 0x28
 8009812:	4b05      	ldr	r3, [pc, #20]	; (8009828 <std+0x40>)
 8009814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <std+0x44>)
 8009818:	6224      	str	r4, [r4, #32]
 800981a:	6323      	str	r3, [r4, #48]	; 0x30
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop
 8009820:	08007971 	.word	0x08007971
 8009824:	08007997 	.word	0x08007997
 8009828:	080079cf 	.word	0x080079cf
 800982c:	080079f3 	.word	0x080079f3

08009830 <_cleanup_r>:
 8009830:	4901      	ldr	r1, [pc, #4]	; (8009838 <_cleanup_r+0x8>)
 8009832:	f000 b8af 	b.w	8009994 <_fwalk_reent>
 8009836:	bf00      	nop
 8009838:	08009771 	.word	0x08009771

0800983c <__sfmoreglue>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	2268      	movs	r2, #104	; 0x68
 8009840:	1e4d      	subs	r5, r1, #1
 8009842:	4355      	muls	r5, r2
 8009844:	460e      	mov	r6, r1
 8009846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800984a:	f001 fa0f 	bl	800ac6c <_malloc_r>
 800984e:	4604      	mov	r4, r0
 8009850:	b140      	cbz	r0, 8009864 <__sfmoreglue+0x28>
 8009852:	2100      	movs	r1, #0
 8009854:	e9c0 1600 	strd	r1, r6, [r0]
 8009858:	300c      	adds	r0, #12
 800985a:	60a0      	str	r0, [r4, #8]
 800985c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009860:	f7fd f924 	bl	8006aac <memset>
 8009864:	4620      	mov	r0, r4
 8009866:	bd70      	pop	{r4, r5, r6, pc}

08009868 <__sfp_lock_acquire>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__sfp_lock_acquire+0x8>)
 800986a:	f000 bc26 	b.w	800a0ba <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	20000dd9 	.word	0x20000dd9

08009874 <__sfp_lock_release>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__sfp_lock_release+0x8>)
 8009876:	f000 bc21 	b.w	800a0bc <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	20000dd9 	.word	0x20000dd9

08009880 <__sinit_lock_acquire>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__sinit_lock_acquire+0x8>)
 8009882:	f000 bc1a 	b.w	800a0ba <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	20000dda 	.word	0x20000dda

0800988c <__sinit_lock_release>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__sinit_lock_release+0x8>)
 800988e:	f000 bc15 	b.w	800a0bc <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	20000dda 	.word	0x20000dda

08009898 <__sinit>:
 8009898:	b510      	push	{r4, lr}
 800989a:	4604      	mov	r4, r0
 800989c:	f7ff fff0 	bl	8009880 <__sinit_lock_acquire>
 80098a0:	69a3      	ldr	r3, [r4, #24]
 80098a2:	b11b      	cbz	r3, 80098ac <__sinit+0x14>
 80098a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a8:	f7ff bff0 	b.w	800988c <__sinit_lock_release>
 80098ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098b0:	6523      	str	r3, [r4, #80]	; 0x50
 80098b2:	4b13      	ldr	r3, [pc, #76]	; (8009900 <__sinit+0x68>)
 80098b4:	4a13      	ldr	r2, [pc, #76]	; (8009904 <__sinit+0x6c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	bf04      	itt	eq
 80098be:	2301      	moveq	r3, #1
 80098c0:	61a3      	streq	r3, [r4, #24]
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f820 	bl	8009908 <__sfp>
 80098c8:	6060      	str	r0, [r4, #4]
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 f81c 	bl	8009908 <__sfp>
 80098d0:	60a0      	str	r0, [r4, #8]
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 f818 	bl	8009908 <__sfp>
 80098d8:	2200      	movs	r2, #0
 80098da:	60e0      	str	r0, [r4, #12]
 80098dc:	2104      	movs	r1, #4
 80098de:	6860      	ldr	r0, [r4, #4]
 80098e0:	f7ff ff82 	bl	80097e8 <std>
 80098e4:	68a0      	ldr	r0, [r4, #8]
 80098e6:	2201      	movs	r2, #1
 80098e8:	2109      	movs	r1, #9
 80098ea:	f7ff ff7d 	bl	80097e8 <std>
 80098ee:	68e0      	ldr	r0, [r4, #12]
 80098f0:	2202      	movs	r2, #2
 80098f2:	2112      	movs	r1, #18
 80098f4:	f7ff ff78 	bl	80097e8 <std>
 80098f8:	2301      	movs	r3, #1
 80098fa:	61a3      	str	r3, [r4, #24]
 80098fc:	e7d2      	b.n	80098a4 <__sinit+0xc>
 80098fe:	bf00      	nop
 8009900:	0800c314 	.word	0x0800c314
 8009904:	08009831 	.word	0x08009831

08009908 <__sfp>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	4607      	mov	r7, r0
 800990c:	f7ff ffac 	bl	8009868 <__sfp_lock_acquire>
 8009910:	4b1e      	ldr	r3, [pc, #120]	; (800998c <__sfp+0x84>)
 8009912:	681e      	ldr	r6, [r3, #0]
 8009914:	69b3      	ldr	r3, [r6, #24]
 8009916:	b913      	cbnz	r3, 800991e <__sfp+0x16>
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff ffbd 	bl	8009898 <__sinit>
 800991e:	3648      	adds	r6, #72	; 0x48
 8009920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009924:	3b01      	subs	r3, #1
 8009926:	d503      	bpl.n	8009930 <__sfp+0x28>
 8009928:	6833      	ldr	r3, [r6, #0]
 800992a:	b30b      	cbz	r3, 8009970 <__sfp+0x68>
 800992c:	6836      	ldr	r6, [r6, #0]
 800992e:	e7f7      	b.n	8009920 <__sfp+0x18>
 8009930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009934:	b9d5      	cbnz	r5, 800996c <__sfp+0x64>
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <__sfp+0x88>)
 8009938:	60e3      	str	r3, [r4, #12]
 800993a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800993e:	6665      	str	r5, [r4, #100]	; 0x64
 8009940:	f000 fbba 	bl	800a0b8 <__retarget_lock_init_recursive>
 8009944:	f7ff ff96 	bl	8009874 <__sfp_lock_release>
 8009948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800994c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009950:	6025      	str	r5, [r4, #0]
 8009952:	61a5      	str	r5, [r4, #24]
 8009954:	2208      	movs	r2, #8
 8009956:	4629      	mov	r1, r5
 8009958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800995c:	f7fd f8a6 	bl	8006aac <memset>
 8009960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009968:	4620      	mov	r0, r4
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	3468      	adds	r4, #104	; 0x68
 800996e:	e7d9      	b.n	8009924 <__sfp+0x1c>
 8009970:	2104      	movs	r1, #4
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ff62 	bl	800983c <__sfmoreglue>
 8009978:	4604      	mov	r4, r0
 800997a:	6030      	str	r0, [r6, #0]
 800997c:	2800      	cmp	r0, #0
 800997e:	d1d5      	bne.n	800992c <__sfp+0x24>
 8009980:	f7ff ff78 	bl	8009874 <__sfp_lock_release>
 8009984:	230c      	movs	r3, #12
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	e7ee      	b.n	8009968 <__sfp+0x60>
 800998a:	bf00      	nop
 800998c:	0800c314 	.word	0x0800c314
 8009990:	ffff0001 	.word	0xffff0001

08009994 <_fwalk_reent>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4606      	mov	r6, r0
 800999a:	4688      	mov	r8, r1
 800999c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099a0:	2700      	movs	r7, #0
 80099a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099a6:	f1b9 0901 	subs.w	r9, r9, #1
 80099aa:	d505      	bpl.n	80099b8 <_fwalk_reent+0x24>
 80099ac:	6824      	ldr	r4, [r4, #0]
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d1f7      	bne.n	80099a2 <_fwalk_reent+0xe>
 80099b2:	4638      	mov	r0, r7
 80099b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b8:	89ab      	ldrh	r3, [r5, #12]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d907      	bls.n	80099ce <_fwalk_reent+0x3a>
 80099be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c2:	3301      	adds	r3, #1
 80099c4:	d003      	beq.n	80099ce <_fwalk_reent+0x3a>
 80099c6:	4629      	mov	r1, r5
 80099c8:	4630      	mov	r0, r6
 80099ca:	47c0      	blx	r8
 80099cc:	4307      	orrs	r7, r0
 80099ce:	3568      	adds	r5, #104	; 0x68
 80099d0:	e7e9      	b.n	80099a6 <_fwalk_reent+0x12>

080099d2 <rshift>:
 80099d2:	6903      	ldr	r3, [r0, #16]
 80099d4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099dc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099e0:	f100 0414 	add.w	r4, r0, #20
 80099e4:	dd45      	ble.n	8009a72 <rshift+0xa0>
 80099e6:	f011 011f 	ands.w	r1, r1, #31
 80099ea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099f2:	d10c      	bne.n	8009a0e <rshift+0x3c>
 80099f4:	f100 0710 	add.w	r7, r0, #16
 80099f8:	4629      	mov	r1, r5
 80099fa:	42b1      	cmp	r1, r6
 80099fc:	d334      	bcc.n	8009a68 <rshift+0x96>
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	1eea      	subs	r2, r5, #3
 8009a04:	4296      	cmp	r6, r2
 8009a06:	bf38      	it	cc
 8009a08:	2300      	movcc	r3, #0
 8009a0a:	4423      	add	r3, r4
 8009a0c:	e015      	b.n	8009a3a <rshift+0x68>
 8009a0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a12:	f1c1 0820 	rsb	r8, r1, #32
 8009a16:	40cf      	lsrs	r7, r1
 8009a18:	f105 0e04 	add.w	lr, r5, #4
 8009a1c:	46a1      	mov	r9, r4
 8009a1e:	4576      	cmp	r6, lr
 8009a20:	46f4      	mov	ip, lr
 8009a22:	d815      	bhi.n	8009a50 <rshift+0x7e>
 8009a24:	1a9a      	subs	r2, r3, r2
 8009a26:	0092      	lsls	r2, r2, #2
 8009a28:	3a04      	subs	r2, #4
 8009a2a:	3501      	adds	r5, #1
 8009a2c:	42ae      	cmp	r6, r5
 8009a2e:	bf38      	it	cc
 8009a30:	2200      	movcc	r2, #0
 8009a32:	18a3      	adds	r3, r4, r2
 8009a34:	50a7      	str	r7, [r4, r2]
 8009a36:	b107      	cbz	r7, 8009a3a <rshift+0x68>
 8009a38:	3304      	adds	r3, #4
 8009a3a:	1b1a      	subs	r2, r3, r4
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a42:	bf08      	it	eq
 8009a44:	2300      	moveq	r3, #0
 8009a46:	6102      	str	r2, [r0, #16]
 8009a48:	bf08      	it	eq
 8009a4a:	6143      	streq	r3, [r0, #20]
 8009a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a50:	f8dc c000 	ldr.w	ip, [ip]
 8009a54:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a58:	ea4c 0707 	orr.w	r7, ip, r7
 8009a5c:	f849 7b04 	str.w	r7, [r9], #4
 8009a60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a64:	40cf      	lsrs	r7, r1
 8009a66:	e7da      	b.n	8009a1e <rshift+0x4c>
 8009a68:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a70:	e7c3      	b.n	80099fa <rshift+0x28>
 8009a72:	4623      	mov	r3, r4
 8009a74:	e7e1      	b.n	8009a3a <rshift+0x68>

08009a76 <__hexdig_fun>:
 8009a76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a7a:	2b09      	cmp	r3, #9
 8009a7c:	d802      	bhi.n	8009a84 <__hexdig_fun+0xe>
 8009a7e:	3820      	subs	r0, #32
 8009a80:	b2c0      	uxtb	r0, r0
 8009a82:	4770      	bx	lr
 8009a84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d801      	bhi.n	8009a90 <__hexdig_fun+0x1a>
 8009a8c:	3847      	subs	r0, #71	; 0x47
 8009a8e:	e7f7      	b.n	8009a80 <__hexdig_fun+0xa>
 8009a90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	d801      	bhi.n	8009a9c <__hexdig_fun+0x26>
 8009a98:	3827      	subs	r0, #39	; 0x27
 8009a9a:	e7f1      	b.n	8009a80 <__hexdig_fun+0xa>
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	4770      	bx	lr

08009aa0 <__gethex>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	ed2d 8b02 	vpush	{d8}
 8009aa8:	b089      	sub	sp, #36	; 0x24
 8009aaa:	ee08 0a10 	vmov	s16, r0
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	4bb4      	ldr	r3, [pc, #720]	; (8009d84 <__gethex+0x2e4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	468b      	mov	fp, r1
 8009aba:	4690      	mov	r8, r2
 8009abc:	f7f6 fb88 	bl	80001d0 <strlen>
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	f8db 2000 	ldr.w	r2, [fp]
 8009ac6:	4403      	add	r3, r0
 8009ac8:	4682      	mov	sl, r0
 8009aca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ace:	9305      	str	r3, [sp, #20]
 8009ad0:	1c93      	adds	r3, r2, #2
 8009ad2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ad6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ada:	32fe      	adds	r2, #254	; 0xfe
 8009adc:	18d1      	adds	r1, r2, r3
 8009ade:	461f      	mov	r7, r3
 8009ae0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ae4:	9100      	str	r1, [sp, #0]
 8009ae6:	2830      	cmp	r0, #48	; 0x30
 8009ae8:	d0f8      	beq.n	8009adc <__gethex+0x3c>
 8009aea:	f7ff ffc4 	bl	8009a76 <__hexdig_fun>
 8009aee:	4604      	mov	r4, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d13a      	bne.n	8009b6a <__gethex+0xca>
 8009af4:	9901      	ldr	r1, [sp, #4]
 8009af6:	4652      	mov	r2, sl
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7fd ff7e 	bl	80079fa <strncmp>
 8009afe:	4605      	mov	r5, r0
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d168      	bne.n	8009bd6 <__gethex+0x136>
 8009b04:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b08:	eb07 060a 	add.w	r6, r7, sl
 8009b0c:	f7ff ffb3 	bl	8009a76 <__hexdig_fun>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d062      	beq.n	8009bda <__gethex+0x13a>
 8009b14:	4633      	mov	r3, r6
 8009b16:	7818      	ldrb	r0, [r3, #0]
 8009b18:	2830      	cmp	r0, #48	; 0x30
 8009b1a:	461f      	mov	r7, r3
 8009b1c:	f103 0301 	add.w	r3, r3, #1
 8009b20:	d0f9      	beq.n	8009b16 <__gethex+0x76>
 8009b22:	f7ff ffa8 	bl	8009a76 <__hexdig_fun>
 8009b26:	2301      	movs	r3, #1
 8009b28:	fab0 f480 	clz	r4, r0
 8009b2c:	0964      	lsrs	r4, r4, #5
 8009b2e:	4635      	mov	r5, r6
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	463a      	mov	r2, r7
 8009b34:	4616      	mov	r6, r2
 8009b36:	3201      	adds	r2, #1
 8009b38:	7830      	ldrb	r0, [r6, #0]
 8009b3a:	f7ff ff9c 	bl	8009a76 <__hexdig_fun>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d1f8      	bne.n	8009b34 <__gethex+0x94>
 8009b42:	9901      	ldr	r1, [sp, #4]
 8009b44:	4652      	mov	r2, sl
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7fd ff57 	bl	80079fa <strncmp>
 8009b4c:	b980      	cbnz	r0, 8009b70 <__gethex+0xd0>
 8009b4e:	b94d      	cbnz	r5, 8009b64 <__gethex+0xc4>
 8009b50:	eb06 050a 	add.w	r5, r6, sl
 8009b54:	462a      	mov	r2, r5
 8009b56:	4616      	mov	r6, r2
 8009b58:	3201      	adds	r2, #1
 8009b5a:	7830      	ldrb	r0, [r6, #0]
 8009b5c:	f7ff ff8b 	bl	8009a76 <__hexdig_fun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1f8      	bne.n	8009b56 <__gethex+0xb6>
 8009b64:	1bad      	subs	r5, r5, r6
 8009b66:	00ad      	lsls	r5, r5, #2
 8009b68:	e004      	b.n	8009b74 <__gethex+0xd4>
 8009b6a:	2400      	movs	r4, #0
 8009b6c:	4625      	mov	r5, r4
 8009b6e:	e7e0      	b.n	8009b32 <__gethex+0x92>
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	d1f7      	bne.n	8009b64 <__gethex+0xc4>
 8009b74:	7833      	ldrb	r3, [r6, #0]
 8009b76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b7a:	2b50      	cmp	r3, #80	; 0x50
 8009b7c:	d13b      	bne.n	8009bf6 <__gethex+0x156>
 8009b7e:	7873      	ldrb	r3, [r6, #1]
 8009b80:	2b2b      	cmp	r3, #43	; 0x2b
 8009b82:	d02c      	beq.n	8009bde <__gethex+0x13e>
 8009b84:	2b2d      	cmp	r3, #45	; 0x2d
 8009b86:	d02e      	beq.n	8009be6 <__gethex+0x146>
 8009b88:	1c71      	adds	r1, r6, #1
 8009b8a:	f04f 0900 	mov.w	r9, #0
 8009b8e:	7808      	ldrb	r0, [r1, #0]
 8009b90:	f7ff ff71 	bl	8009a76 <__hexdig_fun>
 8009b94:	1e43      	subs	r3, r0, #1
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b18      	cmp	r3, #24
 8009b9a:	d82c      	bhi.n	8009bf6 <__gethex+0x156>
 8009b9c:	f1a0 0210 	sub.w	r2, r0, #16
 8009ba0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ba4:	f7ff ff67 	bl	8009a76 <__hexdig_fun>
 8009ba8:	1e43      	subs	r3, r0, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b18      	cmp	r3, #24
 8009bae:	d91d      	bls.n	8009bec <__gethex+0x14c>
 8009bb0:	f1b9 0f00 	cmp.w	r9, #0
 8009bb4:	d000      	beq.n	8009bb8 <__gethex+0x118>
 8009bb6:	4252      	negs	r2, r2
 8009bb8:	4415      	add	r5, r2
 8009bba:	f8cb 1000 	str.w	r1, [fp]
 8009bbe:	b1e4      	cbz	r4, 8009bfa <__gethex+0x15a>
 8009bc0:	9b00      	ldr	r3, [sp, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bf14      	ite	ne
 8009bc6:	2700      	movne	r7, #0
 8009bc8:	2706      	moveq	r7, #6
 8009bca:	4638      	mov	r0, r7
 8009bcc:	b009      	add	sp, #36	; 0x24
 8009bce:	ecbd 8b02 	vpop	{d8}
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	463e      	mov	r6, r7
 8009bd8:	4625      	mov	r5, r4
 8009bda:	2401      	movs	r4, #1
 8009bdc:	e7ca      	b.n	8009b74 <__gethex+0xd4>
 8009bde:	f04f 0900 	mov.w	r9, #0
 8009be2:	1cb1      	adds	r1, r6, #2
 8009be4:	e7d3      	b.n	8009b8e <__gethex+0xee>
 8009be6:	f04f 0901 	mov.w	r9, #1
 8009bea:	e7fa      	b.n	8009be2 <__gethex+0x142>
 8009bec:	230a      	movs	r3, #10
 8009bee:	fb03 0202 	mla	r2, r3, r2, r0
 8009bf2:	3a10      	subs	r2, #16
 8009bf4:	e7d4      	b.n	8009ba0 <__gethex+0x100>
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	e7df      	b.n	8009bba <__gethex+0x11a>
 8009bfa:	1bf3      	subs	r3, r6, r7
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	4621      	mov	r1, r4
 8009c00:	2b07      	cmp	r3, #7
 8009c02:	dc0b      	bgt.n	8009c1c <__gethex+0x17c>
 8009c04:	ee18 0a10 	vmov	r0, s16
 8009c08:	f000 faec 	bl	800a1e4 <_Balloc>
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	b940      	cbnz	r0, 8009c22 <__gethex+0x182>
 8009c10:	4b5d      	ldr	r3, [pc, #372]	; (8009d88 <__gethex+0x2e8>)
 8009c12:	4602      	mov	r2, r0
 8009c14:	21de      	movs	r1, #222	; 0xde
 8009c16:	485d      	ldr	r0, [pc, #372]	; (8009d8c <__gethex+0x2ec>)
 8009c18:	f001 ff96 	bl	800bb48 <__assert_func>
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	105b      	asrs	r3, r3, #1
 8009c20:	e7ee      	b.n	8009c00 <__gethex+0x160>
 8009c22:	f100 0914 	add.w	r9, r0, #20
 8009c26:	f04f 0b00 	mov.w	fp, #0
 8009c2a:	f1ca 0301 	rsb	r3, sl, #1
 8009c2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c32:	f8cd b000 	str.w	fp, [sp]
 8009c36:	9306      	str	r3, [sp, #24]
 8009c38:	42b7      	cmp	r7, r6
 8009c3a:	d340      	bcc.n	8009cbe <__gethex+0x21e>
 8009c3c:	9802      	ldr	r0, [sp, #8]
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	f840 3b04 	str.w	r3, [r0], #4
 8009c44:	eba0 0009 	sub.w	r0, r0, r9
 8009c48:	1080      	asrs	r0, r0, #2
 8009c4a:	0146      	lsls	r6, r0, #5
 8009c4c:	6120      	str	r0, [r4, #16]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fbba 	bl	800a3c8 <__hi0bits>
 8009c54:	1a30      	subs	r0, r6, r0
 8009c56:	f8d8 6000 	ldr.w	r6, [r8]
 8009c5a:	42b0      	cmp	r0, r6
 8009c5c:	dd63      	ble.n	8009d26 <__gethex+0x286>
 8009c5e:	1b87      	subs	r7, r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 ff5e 	bl	800ab24 <__any_on>
 8009c68:	4682      	mov	sl, r0
 8009c6a:	b1a8      	cbz	r0, 8009c98 <__gethex+0x1f8>
 8009c6c:	1e7b      	subs	r3, r7, #1
 8009c6e:	1159      	asrs	r1, r3, #5
 8009c70:	f003 021f 	and.w	r2, r3, #31
 8009c74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c78:	f04f 0a01 	mov.w	sl, #1
 8009c7c:	fa0a f202 	lsl.w	r2, sl, r2
 8009c80:	420a      	tst	r2, r1
 8009c82:	d009      	beq.n	8009c98 <__gethex+0x1f8>
 8009c84:	4553      	cmp	r3, sl
 8009c86:	dd05      	ble.n	8009c94 <__gethex+0x1f4>
 8009c88:	1eb9      	subs	r1, r7, #2
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 ff4a 	bl	800ab24 <__any_on>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d145      	bne.n	8009d20 <__gethex+0x280>
 8009c94:	f04f 0a02 	mov.w	sl, #2
 8009c98:	4639      	mov	r1, r7
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7ff fe99 	bl	80099d2 <rshift>
 8009ca0:	443d      	add	r5, r7
 8009ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ca6:	42ab      	cmp	r3, r5
 8009ca8:	da4c      	bge.n	8009d44 <__gethex+0x2a4>
 8009caa:	ee18 0a10 	vmov	r0, s16
 8009cae:	4621      	mov	r1, r4
 8009cb0:	f000 fad8 	bl	800a264 <_Bfree>
 8009cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	27a3      	movs	r7, #163	; 0xa3
 8009cbc:	e785      	b.n	8009bca <__gethex+0x12a>
 8009cbe:	1e73      	subs	r3, r6, #1
 8009cc0:	9a05      	ldr	r2, [sp, #20]
 8009cc2:	9303      	str	r3, [sp, #12]
 8009cc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d019      	beq.n	8009d00 <__gethex+0x260>
 8009ccc:	f1bb 0f20 	cmp.w	fp, #32
 8009cd0:	d107      	bne.n	8009ce2 <__gethex+0x242>
 8009cd2:	9b02      	ldr	r3, [sp, #8]
 8009cd4:	9a00      	ldr	r2, [sp, #0]
 8009cd6:	f843 2b04 	str.w	r2, [r3], #4
 8009cda:	9302      	str	r3, [sp, #8]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	469b      	mov	fp, r3
 8009ce2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ce6:	f7ff fec6 	bl	8009a76 <__hexdig_fun>
 8009cea:	9b00      	ldr	r3, [sp, #0]
 8009cec:	f000 000f 	and.w	r0, r0, #15
 8009cf0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009cf4:	4303      	orrs	r3, r0
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	f10b 0b04 	add.w	fp, fp, #4
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	e00d      	b.n	8009d1c <__gethex+0x27c>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	9a06      	ldr	r2, [sp, #24]
 8009d04:	4413      	add	r3, r2
 8009d06:	42bb      	cmp	r3, r7
 8009d08:	d3e0      	bcc.n	8009ccc <__gethex+0x22c>
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	9901      	ldr	r1, [sp, #4]
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	4652      	mov	r2, sl
 8009d12:	f7fd fe72 	bl	80079fa <strncmp>
 8009d16:	9b07      	ldr	r3, [sp, #28]
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d1d7      	bne.n	8009ccc <__gethex+0x22c>
 8009d1c:	461e      	mov	r6, r3
 8009d1e:	e78b      	b.n	8009c38 <__gethex+0x198>
 8009d20:	f04f 0a03 	mov.w	sl, #3
 8009d24:	e7b8      	b.n	8009c98 <__gethex+0x1f8>
 8009d26:	da0a      	bge.n	8009d3e <__gethex+0x29e>
 8009d28:	1a37      	subs	r7, r6, r0
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	ee18 0a10 	vmov	r0, s16
 8009d30:	463a      	mov	r2, r7
 8009d32:	f000 fcb3 	bl	800a69c <__lshift>
 8009d36:	1bed      	subs	r5, r5, r7
 8009d38:	4604      	mov	r4, r0
 8009d3a:	f100 0914 	add.w	r9, r0, #20
 8009d3e:	f04f 0a00 	mov.w	sl, #0
 8009d42:	e7ae      	b.n	8009ca2 <__gethex+0x202>
 8009d44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d48:	42a8      	cmp	r0, r5
 8009d4a:	dd72      	ble.n	8009e32 <__gethex+0x392>
 8009d4c:	1b45      	subs	r5, r0, r5
 8009d4e:	42ae      	cmp	r6, r5
 8009d50:	dc36      	bgt.n	8009dc0 <__gethex+0x320>
 8009d52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d02a      	beq.n	8009db0 <__gethex+0x310>
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d02c      	beq.n	8009db8 <__gethex+0x318>
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d11c      	bne.n	8009d9c <__gethex+0x2fc>
 8009d62:	42ae      	cmp	r6, r5
 8009d64:	d11a      	bne.n	8009d9c <__gethex+0x2fc>
 8009d66:	2e01      	cmp	r6, #1
 8009d68:	d112      	bne.n	8009d90 <__gethex+0x2f0>
 8009d6a:	9a04      	ldr	r2, [sp, #16]
 8009d6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	2301      	movs	r3, #1
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	f8c9 3000 	str.w	r3, [r9]
 8009d7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d7c:	2762      	movs	r7, #98	; 0x62
 8009d7e:	601c      	str	r4, [r3, #0]
 8009d80:	e723      	b.n	8009bca <__gethex+0x12a>
 8009d82:	bf00      	nop
 8009d84:	0800c5fc 	.word	0x0800c5fc
 8009d88:	0800c520 	.word	0x0800c520
 8009d8c:	0800c594 	.word	0x0800c594
 8009d90:	1e71      	subs	r1, r6, #1
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 fec6 	bl	800ab24 <__any_on>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1e6      	bne.n	8009d6a <__gethex+0x2ca>
 8009d9c:	ee18 0a10 	vmov	r0, s16
 8009da0:	4621      	mov	r1, r4
 8009da2:	f000 fa5f 	bl	800a264 <_Bfree>
 8009da6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009da8:	2300      	movs	r3, #0
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	2750      	movs	r7, #80	; 0x50
 8009dae:	e70c      	b.n	8009bca <__gethex+0x12a>
 8009db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1f2      	bne.n	8009d9c <__gethex+0x2fc>
 8009db6:	e7d8      	b.n	8009d6a <__gethex+0x2ca>
 8009db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1d5      	bne.n	8009d6a <__gethex+0x2ca>
 8009dbe:	e7ed      	b.n	8009d9c <__gethex+0x2fc>
 8009dc0:	1e6f      	subs	r7, r5, #1
 8009dc2:	f1ba 0f00 	cmp.w	sl, #0
 8009dc6:	d131      	bne.n	8009e2c <__gethex+0x38c>
 8009dc8:	b127      	cbz	r7, 8009dd4 <__gethex+0x334>
 8009dca:	4639      	mov	r1, r7
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fea9 	bl	800ab24 <__any_on>
 8009dd2:	4682      	mov	sl, r0
 8009dd4:	117b      	asrs	r3, r7, #5
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ddc:	f007 071f 	and.w	r7, r7, #31
 8009de0:	fa01 f707 	lsl.w	r7, r1, r7
 8009de4:	421f      	tst	r7, r3
 8009de6:	4629      	mov	r1, r5
 8009de8:	4620      	mov	r0, r4
 8009dea:	bf18      	it	ne
 8009dec:	f04a 0a02 	orrne.w	sl, sl, #2
 8009df0:	1b76      	subs	r6, r6, r5
 8009df2:	f7ff fdee 	bl	80099d2 <rshift>
 8009df6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dfa:	2702      	movs	r7, #2
 8009dfc:	f1ba 0f00 	cmp.w	sl, #0
 8009e00:	d048      	beq.n	8009e94 <__gethex+0x3f4>
 8009e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d015      	beq.n	8009e36 <__gethex+0x396>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d017      	beq.n	8009e3e <__gethex+0x39e>
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d109      	bne.n	8009e26 <__gethex+0x386>
 8009e12:	f01a 0f02 	tst.w	sl, #2
 8009e16:	d006      	beq.n	8009e26 <__gethex+0x386>
 8009e18:	f8d9 0000 	ldr.w	r0, [r9]
 8009e1c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e20:	f01a 0f01 	tst.w	sl, #1
 8009e24:	d10e      	bne.n	8009e44 <__gethex+0x3a4>
 8009e26:	f047 0710 	orr.w	r7, r7, #16
 8009e2a:	e033      	b.n	8009e94 <__gethex+0x3f4>
 8009e2c:	f04f 0a01 	mov.w	sl, #1
 8009e30:	e7d0      	b.n	8009dd4 <__gethex+0x334>
 8009e32:	2701      	movs	r7, #1
 8009e34:	e7e2      	b.n	8009dfc <__gethex+0x35c>
 8009e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e38:	f1c3 0301 	rsb	r3, r3, #1
 8009e3c:	9315      	str	r3, [sp, #84]	; 0x54
 8009e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0f0      	beq.n	8009e26 <__gethex+0x386>
 8009e44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e48:	f104 0314 	add.w	r3, r4, #20
 8009e4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e54:	f04f 0c00 	mov.w	ip, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e62:	d01c      	beq.n	8009e9e <__gethex+0x3fe>
 8009e64:	3201      	adds	r2, #1
 8009e66:	6002      	str	r2, [r0, #0]
 8009e68:	2f02      	cmp	r7, #2
 8009e6a:	f104 0314 	add.w	r3, r4, #20
 8009e6e:	d13f      	bne.n	8009ef0 <__gethex+0x450>
 8009e70:	f8d8 2000 	ldr.w	r2, [r8]
 8009e74:	3a01      	subs	r2, #1
 8009e76:	42b2      	cmp	r2, r6
 8009e78:	d10a      	bne.n	8009e90 <__gethex+0x3f0>
 8009e7a:	1171      	asrs	r1, r6, #5
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e82:	f006 061f 	and.w	r6, r6, #31
 8009e86:	fa02 f606 	lsl.w	r6, r2, r6
 8009e8a:	421e      	tst	r6, r3
 8009e8c:	bf18      	it	ne
 8009e8e:	4617      	movne	r7, r2
 8009e90:	f047 0720 	orr.w	r7, r7, #32
 8009e94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e96:	601c      	str	r4, [r3, #0]
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	601d      	str	r5, [r3, #0]
 8009e9c:	e695      	b.n	8009bca <__gethex+0x12a>
 8009e9e:	4299      	cmp	r1, r3
 8009ea0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ea4:	d8d8      	bhi.n	8009e58 <__gethex+0x3b8>
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	459b      	cmp	fp, r3
 8009eaa:	db19      	blt.n	8009ee0 <__gethex+0x440>
 8009eac:	6861      	ldr	r1, [r4, #4]
 8009eae:	ee18 0a10 	vmov	r0, s16
 8009eb2:	3101      	adds	r1, #1
 8009eb4:	f000 f996 	bl	800a1e4 <_Balloc>
 8009eb8:	4681      	mov	r9, r0
 8009eba:	b918      	cbnz	r0, 8009ec4 <__gethex+0x424>
 8009ebc:	4b1a      	ldr	r3, [pc, #104]	; (8009f28 <__gethex+0x488>)
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	2184      	movs	r1, #132	; 0x84
 8009ec2:	e6a8      	b.n	8009c16 <__gethex+0x176>
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	3202      	adds	r2, #2
 8009ec8:	f104 010c 	add.w	r1, r4, #12
 8009ecc:	0092      	lsls	r2, r2, #2
 8009ece:	300c      	adds	r0, #12
 8009ed0:	f7fc fdde 	bl	8006a90 <memcpy>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	ee18 0a10 	vmov	r0, s16
 8009eda:	f000 f9c3 	bl	800a264 <_Bfree>
 8009ede:	464c      	mov	r4, r9
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ee8:	6122      	str	r2, [r4, #16]
 8009eea:	2201      	movs	r2, #1
 8009eec:	615a      	str	r2, [r3, #20]
 8009eee:	e7bb      	b.n	8009e68 <__gethex+0x3c8>
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	455a      	cmp	r2, fp
 8009ef4:	dd0b      	ble.n	8009f0e <__gethex+0x46e>
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7ff fd6a 	bl	80099d2 <rshift>
 8009efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f02:	3501      	adds	r5, #1
 8009f04:	42ab      	cmp	r3, r5
 8009f06:	f6ff aed0 	blt.w	8009caa <__gethex+0x20a>
 8009f0a:	2701      	movs	r7, #1
 8009f0c:	e7c0      	b.n	8009e90 <__gethex+0x3f0>
 8009f0e:	f016 061f 	ands.w	r6, r6, #31
 8009f12:	d0fa      	beq.n	8009f0a <__gethex+0x46a>
 8009f14:	4453      	add	r3, sl
 8009f16:	f1c6 0620 	rsb	r6, r6, #32
 8009f1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f1e:	f000 fa53 	bl	800a3c8 <__hi0bits>
 8009f22:	42b0      	cmp	r0, r6
 8009f24:	dbe7      	blt.n	8009ef6 <__gethex+0x456>
 8009f26:	e7f0      	b.n	8009f0a <__gethex+0x46a>
 8009f28:	0800c520 	.word	0x0800c520

08009f2c <L_shift>:
 8009f2c:	f1c2 0208 	rsb	r2, r2, #8
 8009f30:	0092      	lsls	r2, r2, #2
 8009f32:	b570      	push	{r4, r5, r6, lr}
 8009f34:	f1c2 0620 	rsb	r6, r2, #32
 8009f38:	6843      	ldr	r3, [r0, #4]
 8009f3a:	6804      	ldr	r4, [r0, #0]
 8009f3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009f40:	432c      	orrs	r4, r5
 8009f42:	40d3      	lsrs	r3, r2
 8009f44:	6004      	str	r4, [r0, #0]
 8009f46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f4a:	4288      	cmp	r0, r1
 8009f4c:	d3f4      	bcc.n	8009f38 <L_shift+0xc>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}

08009f50 <__match>:
 8009f50:	b530      	push	{r4, r5, lr}
 8009f52:	6803      	ldr	r3, [r0, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f5a:	b914      	cbnz	r4, 8009f62 <__match+0x12>
 8009f5c:	6003      	str	r3, [r0, #0]
 8009f5e:	2001      	movs	r0, #1
 8009f60:	bd30      	pop	{r4, r5, pc}
 8009f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f6a:	2d19      	cmp	r5, #25
 8009f6c:	bf98      	it	ls
 8009f6e:	3220      	addls	r2, #32
 8009f70:	42a2      	cmp	r2, r4
 8009f72:	d0f0      	beq.n	8009f56 <__match+0x6>
 8009f74:	2000      	movs	r0, #0
 8009f76:	e7f3      	b.n	8009f60 <__match+0x10>

08009f78 <__hexnan>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	680b      	ldr	r3, [r1, #0]
 8009f7e:	115e      	asrs	r6, r3, #5
 8009f80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f84:	f013 031f 	ands.w	r3, r3, #31
 8009f88:	b087      	sub	sp, #28
 8009f8a:	bf18      	it	ne
 8009f8c:	3604      	addne	r6, #4
 8009f8e:	2500      	movs	r5, #0
 8009f90:	1f37      	subs	r7, r6, #4
 8009f92:	4690      	mov	r8, r2
 8009f94:	6802      	ldr	r2, [r0, #0]
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	4682      	mov	sl, r0
 8009f9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f9e:	46b9      	mov	r9, r7
 8009fa0:	463c      	mov	r4, r7
 8009fa2:	9502      	str	r5, [sp, #8]
 8009fa4:	46ab      	mov	fp, r5
 8009fa6:	7851      	ldrb	r1, [r2, #1]
 8009fa8:	1c53      	adds	r3, r2, #1
 8009faa:	9303      	str	r3, [sp, #12]
 8009fac:	b341      	cbz	r1, 800a000 <__hexnan+0x88>
 8009fae:	4608      	mov	r0, r1
 8009fb0:	9205      	str	r2, [sp, #20]
 8009fb2:	9104      	str	r1, [sp, #16]
 8009fb4:	f7ff fd5f 	bl	8009a76 <__hexdig_fun>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d14f      	bne.n	800a05c <__hexnan+0xe4>
 8009fbc:	9904      	ldr	r1, [sp, #16]
 8009fbe:	9a05      	ldr	r2, [sp, #20]
 8009fc0:	2920      	cmp	r1, #32
 8009fc2:	d818      	bhi.n	8009ff6 <__hexnan+0x7e>
 8009fc4:	9b02      	ldr	r3, [sp, #8]
 8009fc6:	459b      	cmp	fp, r3
 8009fc8:	dd13      	ble.n	8009ff2 <__hexnan+0x7a>
 8009fca:	454c      	cmp	r4, r9
 8009fcc:	d206      	bcs.n	8009fdc <__hexnan+0x64>
 8009fce:	2d07      	cmp	r5, #7
 8009fd0:	dc04      	bgt.n	8009fdc <__hexnan+0x64>
 8009fd2:	462a      	mov	r2, r5
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7ff ffa8 	bl	8009f2c <L_shift>
 8009fdc:	4544      	cmp	r4, r8
 8009fde:	d950      	bls.n	800a082 <__hexnan+0x10a>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f1a4 0904 	sub.w	r9, r4, #4
 8009fe6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fea:	f8cd b008 	str.w	fp, [sp, #8]
 8009fee:	464c      	mov	r4, r9
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	9a03      	ldr	r2, [sp, #12]
 8009ff4:	e7d7      	b.n	8009fa6 <__hexnan+0x2e>
 8009ff6:	2929      	cmp	r1, #41	; 0x29
 8009ff8:	d156      	bne.n	800a0a8 <__hexnan+0x130>
 8009ffa:	3202      	adds	r2, #2
 8009ffc:	f8ca 2000 	str.w	r2, [sl]
 800a000:	f1bb 0f00 	cmp.w	fp, #0
 800a004:	d050      	beq.n	800a0a8 <__hexnan+0x130>
 800a006:	454c      	cmp	r4, r9
 800a008:	d206      	bcs.n	800a018 <__hexnan+0xa0>
 800a00a:	2d07      	cmp	r5, #7
 800a00c:	dc04      	bgt.n	800a018 <__hexnan+0xa0>
 800a00e:	462a      	mov	r2, r5
 800a010:	4649      	mov	r1, r9
 800a012:	4620      	mov	r0, r4
 800a014:	f7ff ff8a 	bl	8009f2c <L_shift>
 800a018:	4544      	cmp	r4, r8
 800a01a:	d934      	bls.n	800a086 <__hexnan+0x10e>
 800a01c:	f1a8 0204 	sub.w	r2, r8, #4
 800a020:	4623      	mov	r3, r4
 800a022:	f853 1b04 	ldr.w	r1, [r3], #4
 800a026:	f842 1f04 	str.w	r1, [r2, #4]!
 800a02a:	429f      	cmp	r7, r3
 800a02c:	d2f9      	bcs.n	800a022 <__hexnan+0xaa>
 800a02e:	1b3b      	subs	r3, r7, r4
 800a030:	f023 0303 	bic.w	r3, r3, #3
 800a034:	3304      	adds	r3, #4
 800a036:	3401      	adds	r4, #1
 800a038:	3e03      	subs	r6, #3
 800a03a:	42b4      	cmp	r4, r6
 800a03c:	bf88      	it	hi
 800a03e:	2304      	movhi	r3, #4
 800a040:	4443      	add	r3, r8
 800a042:	2200      	movs	r2, #0
 800a044:	f843 2b04 	str.w	r2, [r3], #4
 800a048:	429f      	cmp	r7, r3
 800a04a:	d2fb      	bcs.n	800a044 <__hexnan+0xcc>
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	b91b      	cbnz	r3, 800a058 <__hexnan+0xe0>
 800a050:	4547      	cmp	r7, r8
 800a052:	d127      	bne.n	800a0a4 <__hexnan+0x12c>
 800a054:	2301      	movs	r3, #1
 800a056:	603b      	str	r3, [r7, #0]
 800a058:	2005      	movs	r0, #5
 800a05a:	e026      	b.n	800a0aa <__hexnan+0x132>
 800a05c:	3501      	adds	r5, #1
 800a05e:	2d08      	cmp	r5, #8
 800a060:	f10b 0b01 	add.w	fp, fp, #1
 800a064:	dd06      	ble.n	800a074 <__hexnan+0xfc>
 800a066:	4544      	cmp	r4, r8
 800a068:	d9c3      	bls.n	8009ff2 <__hexnan+0x7a>
 800a06a:	2300      	movs	r3, #0
 800a06c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a070:	2501      	movs	r5, #1
 800a072:	3c04      	subs	r4, #4
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	f000 000f 	and.w	r0, r0, #15
 800a07a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	e7b7      	b.n	8009ff2 <__hexnan+0x7a>
 800a082:	2508      	movs	r5, #8
 800a084:	e7b5      	b.n	8009ff2 <__hexnan+0x7a>
 800a086:	9b01      	ldr	r3, [sp, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d0df      	beq.n	800a04c <__hexnan+0xd4>
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	f1c3 0320 	rsb	r3, r3, #32
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a09c:	401a      	ands	r2, r3
 800a09e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0a2:	e7d3      	b.n	800a04c <__hexnan+0xd4>
 800a0a4:	3f04      	subs	r7, #4
 800a0a6:	e7d1      	b.n	800a04c <__hexnan+0xd4>
 800a0a8:	2004      	movs	r0, #4
 800a0aa:	b007      	add	sp, #28
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0b0 <_localeconv_r>:
 800a0b0:	4800      	ldr	r0, [pc, #0]	; (800a0b4 <_localeconv_r+0x4>)
 800a0b2:	4770      	bx	lr
 800a0b4:	20000198 	.word	0x20000198

0800a0b8 <__retarget_lock_init_recursive>:
 800a0b8:	4770      	bx	lr

0800a0ba <__retarget_lock_acquire_recursive>:
 800a0ba:	4770      	bx	lr

0800a0bc <__retarget_lock_release_recursive>:
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <_lseek_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	; (800a0e0 <_lseek_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f8 fdc4 	bl	8002c5c <_lseek>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_lseek_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_lseek_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20000de4 	.word	0x20000de4

0800a0e4 <__swhatbuf_r>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	460e      	mov	r6, r1
 800a0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ec:	2900      	cmp	r1, #0
 800a0ee:	b096      	sub	sp, #88	; 0x58
 800a0f0:	4614      	mov	r4, r2
 800a0f2:	461d      	mov	r5, r3
 800a0f4:	da08      	bge.n	800a108 <__swhatbuf_r+0x24>
 800a0f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	061a      	lsls	r2, r3, #24
 800a100:	d410      	bmi.n	800a124 <__swhatbuf_r+0x40>
 800a102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a106:	e00e      	b.n	800a126 <__swhatbuf_r+0x42>
 800a108:	466a      	mov	r2, sp
 800a10a:	f001 fd4d 	bl	800bba8 <_fstat_r>
 800a10e:	2800      	cmp	r0, #0
 800a110:	dbf1      	blt.n	800a0f6 <__swhatbuf_r+0x12>
 800a112:	9a01      	ldr	r2, [sp, #4]
 800a114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a11c:	425a      	negs	r2, r3
 800a11e:	415a      	adcs	r2, r3
 800a120:	602a      	str	r2, [r5, #0]
 800a122:	e7ee      	b.n	800a102 <__swhatbuf_r+0x1e>
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	2000      	movs	r0, #0
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	b016      	add	sp, #88	; 0x58
 800a12c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a130 <__smakebuf_r>:
 800a130:	898b      	ldrh	r3, [r1, #12]
 800a132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a134:	079d      	lsls	r5, r3, #30
 800a136:	4606      	mov	r6, r0
 800a138:	460c      	mov	r4, r1
 800a13a:	d507      	bpl.n	800a14c <__smakebuf_r+0x1c>
 800a13c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	2301      	movs	r3, #1
 800a146:	6163      	str	r3, [r4, #20]
 800a148:	b002      	add	sp, #8
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	ab01      	add	r3, sp, #4
 800a14e:	466a      	mov	r2, sp
 800a150:	f7ff ffc8 	bl	800a0e4 <__swhatbuf_r>
 800a154:	9900      	ldr	r1, [sp, #0]
 800a156:	4605      	mov	r5, r0
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 fd87 	bl	800ac6c <_malloc_r>
 800a15e:	b948      	cbnz	r0, 800a174 <__smakebuf_r+0x44>
 800a160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a164:	059a      	lsls	r2, r3, #22
 800a166:	d4ef      	bmi.n	800a148 <__smakebuf_r+0x18>
 800a168:	f023 0303 	bic.w	r3, r3, #3
 800a16c:	f043 0302 	orr.w	r3, r3, #2
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	e7e3      	b.n	800a13c <__smakebuf_r+0xc>
 800a174:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <__smakebuf_r+0x7c>)
 800a176:	62b3      	str	r3, [r6, #40]	; 0x28
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	6020      	str	r0, [r4, #0]
 800a17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	9b00      	ldr	r3, [sp, #0]
 800a184:	6163      	str	r3, [r4, #20]
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	6120      	str	r0, [r4, #16]
 800a18a:	b15b      	cbz	r3, 800a1a4 <__smakebuf_r+0x74>
 800a18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a190:	4630      	mov	r0, r6
 800a192:	f001 fd1b 	bl	800bbcc <_isatty_r>
 800a196:	b128      	cbz	r0, 800a1a4 <__smakebuf_r+0x74>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	89a0      	ldrh	r0, [r4, #12]
 800a1a6:	4305      	orrs	r5, r0
 800a1a8:	81a5      	strh	r5, [r4, #12]
 800a1aa:	e7cd      	b.n	800a148 <__smakebuf_r+0x18>
 800a1ac:	08009831 	.word	0x08009831

0800a1b0 <malloc>:
 800a1b0:	4b02      	ldr	r3, [pc, #8]	; (800a1bc <malloc+0xc>)
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	6818      	ldr	r0, [r3, #0]
 800a1b6:	f000 bd59 	b.w	800ac6c <_malloc_r>
 800a1ba:	bf00      	nop
 800a1bc:	20000040 	.word	0x20000040

0800a1c0 <__ascii_mbtowc>:
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	b901      	cbnz	r1, 800a1c6 <__ascii_mbtowc+0x6>
 800a1c4:	a901      	add	r1, sp, #4
 800a1c6:	b142      	cbz	r2, 800a1da <__ascii_mbtowc+0x1a>
 800a1c8:	b14b      	cbz	r3, 800a1de <__ascii_mbtowc+0x1e>
 800a1ca:	7813      	ldrb	r3, [r2, #0]
 800a1cc:	600b      	str	r3, [r1, #0]
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	1e10      	subs	r0, r2, #0
 800a1d2:	bf18      	it	ne
 800a1d4:	2001      	movne	r0, #1
 800a1d6:	b002      	add	sp, #8
 800a1d8:	4770      	bx	lr
 800a1da:	4610      	mov	r0, r2
 800a1dc:	e7fb      	b.n	800a1d6 <__ascii_mbtowc+0x16>
 800a1de:	f06f 0001 	mvn.w	r0, #1
 800a1e2:	e7f8      	b.n	800a1d6 <__ascii_mbtowc+0x16>

0800a1e4 <_Balloc>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	b976      	cbnz	r6, 800a20c <_Balloc+0x28>
 800a1ee:	2010      	movs	r0, #16
 800a1f0:	f7ff ffde 	bl	800a1b0 <malloc>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1f8:	b920      	cbnz	r0, 800a204 <_Balloc+0x20>
 800a1fa:	4b18      	ldr	r3, [pc, #96]	; (800a25c <_Balloc+0x78>)
 800a1fc:	4818      	ldr	r0, [pc, #96]	; (800a260 <_Balloc+0x7c>)
 800a1fe:	2166      	movs	r1, #102	; 0x66
 800a200:	f001 fca2 	bl	800bb48 <__assert_func>
 800a204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a208:	6006      	str	r6, [r0, #0]
 800a20a:	60c6      	str	r6, [r0, #12]
 800a20c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a20e:	68f3      	ldr	r3, [r6, #12]
 800a210:	b183      	cbz	r3, 800a234 <_Balloc+0x50>
 800a212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a21a:	b9b8      	cbnz	r0, 800a24c <_Balloc+0x68>
 800a21c:	2101      	movs	r1, #1
 800a21e:	fa01 f605 	lsl.w	r6, r1, r5
 800a222:	1d72      	adds	r2, r6, #5
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fc9d 	bl	800ab66 <_calloc_r>
 800a22c:	b160      	cbz	r0, 800a248 <_Balloc+0x64>
 800a22e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a232:	e00e      	b.n	800a252 <_Balloc+0x6e>
 800a234:	2221      	movs	r2, #33	; 0x21
 800a236:	2104      	movs	r1, #4
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fc94 	bl	800ab66 <_calloc_r>
 800a23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a240:	60f0      	str	r0, [r6, #12]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e4      	bne.n	800a212 <_Balloc+0x2e>
 800a248:	2000      	movs	r0, #0
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	6802      	ldr	r2, [r0, #0]
 800a24e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a252:	2300      	movs	r3, #0
 800a254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a258:	e7f7      	b.n	800a24a <_Balloc+0x66>
 800a25a:	bf00      	nop
 800a25c:	0800c4ae 	.word	0x0800c4ae
 800a260:	0800c610 	.word	0x0800c610

0800a264 <_Bfree>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a268:	4605      	mov	r5, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	b976      	cbnz	r6, 800a28c <_Bfree+0x28>
 800a26e:	2010      	movs	r0, #16
 800a270:	f7ff ff9e 	bl	800a1b0 <malloc>
 800a274:	4602      	mov	r2, r0
 800a276:	6268      	str	r0, [r5, #36]	; 0x24
 800a278:	b920      	cbnz	r0, 800a284 <_Bfree+0x20>
 800a27a:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <_Bfree+0x3c>)
 800a27c:	4809      	ldr	r0, [pc, #36]	; (800a2a4 <_Bfree+0x40>)
 800a27e:	218a      	movs	r1, #138	; 0x8a
 800a280:	f001 fc62 	bl	800bb48 <__assert_func>
 800a284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a288:	6006      	str	r6, [r0, #0]
 800a28a:	60c6      	str	r6, [r0, #12]
 800a28c:	b13c      	cbz	r4, 800a29e <_Bfree+0x3a>
 800a28e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a290:	6862      	ldr	r2, [r4, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a298:	6021      	str	r1, [r4, #0]
 800a29a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	0800c4ae 	.word	0x0800c4ae
 800a2a4:	0800c610 	.word	0x0800c610

0800a2a8 <__multadd>:
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	690d      	ldr	r5, [r1, #16]
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	461e      	mov	r6, r3
 800a2b4:	f101 0c14 	add.w	ip, r1, #20
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a2be:	b299      	uxth	r1, r3
 800a2c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a2c4:	0c1e      	lsrs	r6, r3, #16
 800a2c6:	0c0b      	lsrs	r3, r1, #16
 800a2c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a2cc:	b289      	uxth	r1, r1
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2d4:	4285      	cmp	r5, r0
 800a2d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a2da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2de:	dcec      	bgt.n	800a2ba <__multadd+0x12>
 800a2e0:	b30e      	cbz	r6, 800a326 <__multadd+0x7e>
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	42ab      	cmp	r3, r5
 800a2e6:	dc19      	bgt.n	800a31c <__multadd+0x74>
 800a2e8:	6861      	ldr	r1, [r4, #4]
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	3101      	adds	r1, #1
 800a2ee:	f7ff ff79 	bl	800a1e4 <_Balloc>
 800a2f2:	4680      	mov	r8, r0
 800a2f4:	b928      	cbnz	r0, 800a302 <__multadd+0x5a>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <__multadd+0x84>)
 800a2fa:	480d      	ldr	r0, [pc, #52]	; (800a330 <__multadd+0x88>)
 800a2fc:	21b5      	movs	r1, #181	; 0xb5
 800a2fe:	f001 fc23 	bl	800bb48 <__assert_func>
 800a302:	6922      	ldr	r2, [r4, #16]
 800a304:	3202      	adds	r2, #2
 800a306:	f104 010c 	add.w	r1, r4, #12
 800a30a:	0092      	lsls	r2, r2, #2
 800a30c:	300c      	adds	r0, #12
 800a30e:	f7fc fbbf 	bl	8006a90 <memcpy>
 800a312:	4621      	mov	r1, r4
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff ffa5 	bl	800a264 <_Bfree>
 800a31a:	4644      	mov	r4, r8
 800a31c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a320:	3501      	adds	r5, #1
 800a322:	615e      	str	r6, [r3, #20]
 800a324:	6125      	str	r5, [r4, #16]
 800a326:	4620      	mov	r0, r4
 800a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32c:	0800c520 	.word	0x0800c520
 800a330:	0800c610 	.word	0x0800c610

0800a334 <__s2b>:
 800a334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a338:	460c      	mov	r4, r1
 800a33a:	4615      	mov	r5, r2
 800a33c:	461f      	mov	r7, r3
 800a33e:	2209      	movs	r2, #9
 800a340:	3308      	adds	r3, #8
 800a342:	4606      	mov	r6, r0
 800a344:	fb93 f3f2 	sdiv	r3, r3, r2
 800a348:	2100      	movs	r1, #0
 800a34a:	2201      	movs	r2, #1
 800a34c:	429a      	cmp	r2, r3
 800a34e:	db09      	blt.n	800a364 <__s2b+0x30>
 800a350:	4630      	mov	r0, r6
 800a352:	f7ff ff47 	bl	800a1e4 <_Balloc>
 800a356:	b940      	cbnz	r0, 800a36a <__s2b+0x36>
 800a358:	4602      	mov	r2, r0
 800a35a:	4b19      	ldr	r3, [pc, #100]	; (800a3c0 <__s2b+0x8c>)
 800a35c:	4819      	ldr	r0, [pc, #100]	; (800a3c4 <__s2b+0x90>)
 800a35e:	21ce      	movs	r1, #206	; 0xce
 800a360:	f001 fbf2 	bl	800bb48 <__assert_func>
 800a364:	0052      	lsls	r2, r2, #1
 800a366:	3101      	adds	r1, #1
 800a368:	e7f0      	b.n	800a34c <__s2b+0x18>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	6143      	str	r3, [r0, #20]
 800a36e:	2d09      	cmp	r5, #9
 800a370:	f04f 0301 	mov.w	r3, #1
 800a374:	6103      	str	r3, [r0, #16]
 800a376:	dd16      	ble.n	800a3a6 <__s2b+0x72>
 800a378:	f104 0909 	add.w	r9, r4, #9
 800a37c:	46c8      	mov	r8, r9
 800a37e:	442c      	add	r4, r5
 800a380:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a384:	4601      	mov	r1, r0
 800a386:	3b30      	subs	r3, #48	; 0x30
 800a388:	220a      	movs	r2, #10
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ff8c 	bl	800a2a8 <__multadd>
 800a390:	45a0      	cmp	r8, r4
 800a392:	d1f5      	bne.n	800a380 <__s2b+0x4c>
 800a394:	f1a5 0408 	sub.w	r4, r5, #8
 800a398:	444c      	add	r4, r9
 800a39a:	1b2d      	subs	r5, r5, r4
 800a39c:	1963      	adds	r3, r4, r5
 800a39e:	42bb      	cmp	r3, r7
 800a3a0:	db04      	blt.n	800a3ac <__s2b+0x78>
 800a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	340a      	adds	r4, #10
 800a3a8:	2509      	movs	r5, #9
 800a3aa:	e7f6      	b.n	800a39a <__s2b+0x66>
 800a3ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	3b30      	subs	r3, #48	; 0x30
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ff76 	bl	800a2a8 <__multadd>
 800a3bc:	e7ee      	b.n	800a39c <__s2b+0x68>
 800a3be:	bf00      	nop
 800a3c0:	0800c520 	.word	0x0800c520
 800a3c4:	0800c610 	.word	0x0800c610

0800a3c8 <__hi0bits>:
 800a3c8:	0c03      	lsrs	r3, r0, #16
 800a3ca:	041b      	lsls	r3, r3, #16
 800a3cc:	b9d3      	cbnz	r3, 800a404 <__hi0bits+0x3c>
 800a3ce:	0400      	lsls	r0, r0, #16
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3d6:	bf04      	itt	eq
 800a3d8:	0200      	lsleq	r0, r0, #8
 800a3da:	3308      	addeq	r3, #8
 800a3dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3e0:	bf04      	itt	eq
 800a3e2:	0100      	lsleq	r0, r0, #4
 800a3e4:	3304      	addeq	r3, #4
 800a3e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3ea:	bf04      	itt	eq
 800a3ec:	0080      	lsleq	r0, r0, #2
 800a3ee:	3302      	addeq	r3, #2
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	db05      	blt.n	800a400 <__hi0bits+0x38>
 800a3f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3f8:	f103 0301 	add.w	r3, r3, #1
 800a3fc:	bf08      	it	eq
 800a3fe:	2320      	moveq	r3, #32
 800a400:	4618      	mov	r0, r3
 800a402:	4770      	bx	lr
 800a404:	2300      	movs	r3, #0
 800a406:	e7e4      	b.n	800a3d2 <__hi0bits+0xa>

0800a408 <__lo0bits>:
 800a408:	6803      	ldr	r3, [r0, #0]
 800a40a:	f013 0207 	ands.w	r2, r3, #7
 800a40e:	4601      	mov	r1, r0
 800a410:	d00b      	beq.n	800a42a <__lo0bits+0x22>
 800a412:	07da      	lsls	r2, r3, #31
 800a414:	d423      	bmi.n	800a45e <__lo0bits+0x56>
 800a416:	0798      	lsls	r0, r3, #30
 800a418:	bf49      	itett	mi
 800a41a:	085b      	lsrmi	r3, r3, #1
 800a41c:	089b      	lsrpl	r3, r3, #2
 800a41e:	2001      	movmi	r0, #1
 800a420:	600b      	strmi	r3, [r1, #0]
 800a422:	bf5c      	itt	pl
 800a424:	600b      	strpl	r3, [r1, #0]
 800a426:	2002      	movpl	r0, #2
 800a428:	4770      	bx	lr
 800a42a:	b298      	uxth	r0, r3
 800a42c:	b9a8      	cbnz	r0, 800a45a <__lo0bits+0x52>
 800a42e:	0c1b      	lsrs	r3, r3, #16
 800a430:	2010      	movs	r0, #16
 800a432:	b2da      	uxtb	r2, r3
 800a434:	b90a      	cbnz	r2, 800a43a <__lo0bits+0x32>
 800a436:	3008      	adds	r0, #8
 800a438:	0a1b      	lsrs	r3, r3, #8
 800a43a:	071a      	lsls	r2, r3, #28
 800a43c:	bf04      	itt	eq
 800a43e:	091b      	lsreq	r3, r3, #4
 800a440:	3004      	addeq	r0, #4
 800a442:	079a      	lsls	r2, r3, #30
 800a444:	bf04      	itt	eq
 800a446:	089b      	lsreq	r3, r3, #2
 800a448:	3002      	addeq	r0, #2
 800a44a:	07da      	lsls	r2, r3, #31
 800a44c:	d403      	bmi.n	800a456 <__lo0bits+0x4e>
 800a44e:	085b      	lsrs	r3, r3, #1
 800a450:	f100 0001 	add.w	r0, r0, #1
 800a454:	d005      	beq.n	800a462 <__lo0bits+0x5a>
 800a456:	600b      	str	r3, [r1, #0]
 800a458:	4770      	bx	lr
 800a45a:	4610      	mov	r0, r2
 800a45c:	e7e9      	b.n	800a432 <__lo0bits+0x2a>
 800a45e:	2000      	movs	r0, #0
 800a460:	4770      	bx	lr
 800a462:	2020      	movs	r0, #32
 800a464:	4770      	bx	lr
	...

0800a468 <__i2b>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	2101      	movs	r1, #1
 800a46e:	f7ff feb9 	bl	800a1e4 <_Balloc>
 800a472:	4602      	mov	r2, r0
 800a474:	b928      	cbnz	r0, 800a482 <__i2b+0x1a>
 800a476:	4b05      	ldr	r3, [pc, #20]	; (800a48c <__i2b+0x24>)
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <__i2b+0x28>)
 800a47a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a47e:	f001 fb63 	bl	800bb48 <__assert_func>
 800a482:	2301      	movs	r3, #1
 800a484:	6144      	str	r4, [r0, #20]
 800a486:	6103      	str	r3, [r0, #16]
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop
 800a48c:	0800c520 	.word	0x0800c520
 800a490:	0800c610 	.word	0x0800c610

0800a494 <__multiply>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4691      	mov	r9, r2
 800a49a:	690a      	ldr	r2, [r1, #16]
 800a49c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	bfb8      	it	lt
 800a4a4:	460b      	movlt	r3, r1
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	bfbc      	itt	lt
 800a4aa:	464c      	movlt	r4, r9
 800a4ac:	4699      	movlt	r9, r3
 800a4ae:	6927      	ldr	r7, [r4, #16]
 800a4b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	6861      	ldr	r1, [r4, #4]
 800a4b8:	eb07 060a 	add.w	r6, r7, sl
 800a4bc:	42b3      	cmp	r3, r6
 800a4be:	b085      	sub	sp, #20
 800a4c0:	bfb8      	it	lt
 800a4c2:	3101      	addlt	r1, #1
 800a4c4:	f7ff fe8e 	bl	800a1e4 <_Balloc>
 800a4c8:	b930      	cbnz	r0, 800a4d8 <__multiply+0x44>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b44      	ldr	r3, [pc, #272]	; (800a5e0 <__multiply+0x14c>)
 800a4ce:	4845      	ldr	r0, [pc, #276]	; (800a5e4 <__multiply+0x150>)
 800a4d0:	f240 115d 	movw	r1, #349	; 0x15d
 800a4d4:	f001 fb38 	bl	800bb48 <__assert_func>
 800a4d8:	f100 0514 	add.w	r5, r0, #20
 800a4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4543      	cmp	r3, r8
 800a4e6:	d321      	bcc.n	800a52c <__multiply+0x98>
 800a4e8:	f104 0314 	add.w	r3, r4, #20
 800a4ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4f0:	f109 0314 	add.w	r3, r9, #20
 800a4f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4f8:	9202      	str	r2, [sp, #8]
 800a4fa:	1b3a      	subs	r2, r7, r4
 800a4fc:	3a15      	subs	r2, #21
 800a4fe:	f022 0203 	bic.w	r2, r2, #3
 800a502:	3204      	adds	r2, #4
 800a504:	f104 0115 	add.w	r1, r4, #21
 800a508:	428f      	cmp	r7, r1
 800a50a:	bf38      	it	cc
 800a50c:	2204      	movcc	r2, #4
 800a50e:	9201      	str	r2, [sp, #4]
 800a510:	9a02      	ldr	r2, [sp, #8]
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	429a      	cmp	r2, r3
 800a516:	d80c      	bhi.n	800a532 <__multiply+0x9e>
 800a518:	2e00      	cmp	r6, #0
 800a51a:	dd03      	ble.n	800a524 <__multiply+0x90>
 800a51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a520:	2b00      	cmp	r3, #0
 800a522:	d05a      	beq.n	800a5da <__multiply+0x146>
 800a524:	6106      	str	r6, [r0, #16]
 800a526:	b005      	add	sp, #20
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	f843 2b04 	str.w	r2, [r3], #4
 800a530:	e7d8      	b.n	800a4e4 <__multiply+0x50>
 800a532:	f8b3 a000 	ldrh.w	sl, [r3]
 800a536:	f1ba 0f00 	cmp.w	sl, #0
 800a53a:	d024      	beq.n	800a586 <__multiply+0xf2>
 800a53c:	f104 0e14 	add.w	lr, r4, #20
 800a540:	46a9      	mov	r9, r5
 800a542:	f04f 0c00 	mov.w	ip, #0
 800a546:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a54a:	f8d9 1000 	ldr.w	r1, [r9]
 800a54e:	fa1f fb82 	uxth.w	fp, r2
 800a552:	b289      	uxth	r1, r1
 800a554:	fb0a 110b 	mla	r1, sl, fp, r1
 800a558:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a55c:	f8d9 2000 	ldr.w	r2, [r9]
 800a560:	4461      	add	r1, ip
 800a562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a566:	fb0a c20b 	mla	r2, sl, fp, ip
 800a56a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a56e:	b289      	uxth	r1, r1
 800a570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a574:	4577      	cmp	r7, lr
 800a576:	f849 1b04 	str.w	r1, [r9], #4
 800a57a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a57e:	d8e2      	bhi.n	800a546 <__multiply+0xb2>
 800a580:	9a01      	ldr	r2, [sp, #4]
 800a582:	f845 c002 	str.w	ip, [r5, r2]
 800a586:	9a03      	ldr	r2, [sp, #12]
 800a588:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a58c:	3304      	adds	r3, #4
 800a58e:	f1b9 0f00 	cmp.w	r9, #0
 800a592:	d020      	beq.n	800a5d6 <__multiply+0x142>
 800a594:	6829      	ldr	r1, [r5, #0]
 800a596:	f104 0c14 	add.w	ip, r4, #20
 800a59a:	46ae      	mov	lr, r5
 800a59c:	f04f 0a00 	mov.w	sl, #0
 800a5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5a8:	fb09 220b 	mla	r2, r9, fp, r2
 800a5ac:	4492      	add	sl, r2
 800a5ae:	b289      	uxth	r1, r1
 800a5b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5b4:	f84e 1b04 	str.w	r1, [lr], #4
 800a5b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5bc:	f8be 1000 	ldrh.w	r1, [lr]
 800a5c0:	0c12      	lsrs	r2, r2, #16
 800a5c2:	fb09 1102 	mla	r1, r9, r2, r1
 800a5c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5ca:	4567      	cmp	r7, ip
 800a5cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5d0:	d8e6      	bhi.n	800a5a0 <__multiply+0x10c>
 800a5d2:	9a01      	ldr	r2, [sp, #4]
 800a5d4:	50a9      	str	r1, [r5, r2]
 800a5d6:	3504      	adds	r5, #4
 800a5d8:	e79a      	b.n	800a510 <__multiply+0x7c>
 800a5da:	3e01      	subs	r6, #1
 800a5dc:	e79c      	b.n	800a518 <__multiply+0x84>
 800a5de:	bf00      	nop
 800a5e0:	0800c520 	.word	0x0800c520
 800a5e4:	0800c610 	.word	0x0800c610

0800a5e8 <__pow5mult>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	f012 0203 	ands.w	r2, r2, #3
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	d007      	beq.n	800a608 <__pow5mult+0x20>
 800a5f8:	4c25      	ldr	r4, [pc, #148]	; (800a690 <__pow5mult+0xa8>)
 800a5fa:	3a01      	subs	r2, #1
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a602:	f7ff fe51 	bl	800a2a8 <__multadd>
 800a606:	4607      	mov	r7, r0
 800a608:	10ad      	asrs	r5, r5, #2
 800a60a:	d03d      	beq.n	800a688 <__pow5mult+0xa0>
 800a60c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a60e:	b97c      	cbnz	r4, 800a630 <__pow5mult+0x48>
 800a610:	2010      	movs	r0, #16
 800a612:	f7ff fdcd 	bl	800a1b0 <malloc>
 800a616:	4602      	mov	r2, r0
 800a618:	6270      	str	r0, [r6, #36]	; 0x24
 800a61a:	b928      	cbnz	r0, 800a628 <__pow5mult+0x40>
 800a61c:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <__pow5mult+0xac>)
 800a61e:	481e      	ldr	r0, [pc, #120]	; (800a698 <__pow5mult+0xb0>)
 800a620:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a624:	f001 fa90 	bl	800bb48 <__assert_func>
 800a628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a62c:	6004      	str	r4, [r0, #0]
 800a62e:	60c4      	str	r4, [r0, #12]
 800a630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a638:	b94c      	cbnz	r4, 800a64e <__pow5mult+0x66>
 800a63a:	f240 2171 	movw	r1, #625	; 0x271
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ff12 	bl	800a468 <__i2b>
 800a644:	2300      	movs	r3, #0
 800a646:	f8c8 0008 	str.w	r0, [r8, #8]
 800a64a:	4604      	mov	r4, r0
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	f04f 0900 	mov.w	r9, #0
 800a652:	07eb      	lsls	r3, r5, #31
 800a654:	d50a      	bpl.n	800a66c <__pow5mult+0x84>
 800a656:	4639      	mov	r1, r7
 800a658:	4622      	mov	r2, r4
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff1a 	bl	800a494 <__multiply>
 800a660:	4639      	mov	r1, r7
 800a662:	4680      	mov	r8, r0
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff fdfd 	bl	800a264 <_Bfree>
 800a66a:	4647      	mov	r7, r8
 800a66c:	106d      	asrs	r5, r5, #1
 800a66e:	d00b      	beq.n	800a688 <__pow5mult+0xa0>
 800a670:	6820      	ldr	r0, [r4, #0]
 800a672:	b938      	cbnz	r0, 800a684 <__pow5mult+0x9c>
 800a674:	4622      	mov	r2, r4
 800a676:	4621      	mov	r1, r4
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ff0b 	bl	800a494 <__multiply>
 800a67e:	6020      	str	r0, [r4, #0]
 800a680:	f8c0 9000 	str.w	r9, [r0]
 800a684:	4604      	mov	r4, r0
 800a686:	e7e4      	b.n	800a652 <__pow5mult+0x6a>
 800a688:	4638      	mov	r0, r7
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	bf00      	nop
 800a690:	0800c760 	.word	0x0800c760
 800a694:	0800c4ae 	.word	0x0800c4ae
 800a698:	0800c610 	.word	0x0800c610

0800a69c <__lshift>:
 800a69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	6849      	ldr	r1, [r1, #4]
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	4691      	mov	r9, r2
 800a6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b4:	f108 0601 	add.w	r6, r8, #1
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	db0b      	blt.n	800a6d4 <__lshift+0x38>
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff fd91 	bl	800a1e4 <_Balloc>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	b948      	cbnz	r0, 800a6da <__lshift+0x3e>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b2a      	ldr	r3, [pc, #168]	; (800a774 <__lshift+0xd8>)
 800a6ca:	482b      	ldr	r0, [pc, #172]	; (800a778 <__lshift+0xdc>)
 800a6cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6d0:	f001 fa3a 	bl	800bb48 <__assert_func>
 800a6d4:	3101      	adds	r1, #1
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	e7ee      	b.n	800a6b8 <__lshift+0x1c>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f100 0114 	add.w	r1, r0, #20
 800a6e0:	f100 0210 	add.w	r2, r0, #16
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	4553      	cmp	r3, sl
 800a6e8:	db37      	blt.n	800a75a <__lshift+0xbe>
 800a6ea:	6920      	ldr	r0, [r4, #16]
 800a6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	f019 091f 	ands.w	r9, r9, #31
 800a6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a700:	d02f      	beq.n	800a762 <__lshift+0xc6>
 800a702:	f1c9 0e20 	rsb	lr, r9, #32
 800a706:	468a      	mov	sl, r1
 800a708:	f04f 0c00 	mov.w	ip, #0
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	fa02 f209 	lsl.w	r2, r2, r9
 800a712:	ea42 020c 	orr.w	r2, r2, ip
 800a716:	f84a 2b04 	str.w	r2, [sl], #4
 800a71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71e:	4298      	cmp	r0, r3
 800a720:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a724:	d8f2      	bhi.n	800a70c <__lshift+0x70>
 800a726:	1b03      	subs	r3, r0, r4
 800a728:	3b15      	subs	r3, #21
 800a72a:	f023 0303 	bic.w	r3, r3, #3
 800a72e:	3304      	adds	r3, #4
 800a730:	f104 0215 	add.w	r2, r4, #21
 800a734:	4290      	cmp	r0, r2
 800a736:	bf38      	it	cc
 800a738:	2304      	movcc	r3, #4
 800a73a:	f841 c003 	str.w	ip, [r1, r3]
 800a73e:	f1bc 0f00 	cmp.w	ip, #0
 800a742:	d001      	beq.n	800a748 <__lshift+0xac>
 800a744:	f108 0602 	add.w	r6, r8, #2
 800a748:	3e01      	subs	r6, #1
 800a74a:	4638      	mov	r0, r7
 800a74c:	612e      	str	r6, [r5, #16]
 800a74e:	4621      	mov	r1, r4
 800a750:	f7ff fd88 	bl	800a264 <_Bfree>
 800a754:	4628      	mov	r0, r5
 800a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a75e:	3301      	adds	r3, #1
 800a760:	e7c1      	b.n	800a6e6 <__lshift+0x4a>
 800a762:	3904      	subs	r1, #4
 800a764:	f853 2b04 	ldr.w	r2, [r3], #4
 800a768:	f841 2f04 	str.w	r2, [r1, #4]!
 800a76c:	4298      	cmp	r0, r3
 800a76e:	d8f9      	bhi.n	800a764 <__lshift+0xc8>
 800a770:	e7ea      	b.n	800a748 <__lshift+0xac>
 800a772:	bf00      	nop
 800a774:	0800c520 	.word	0x0800c520
 800a778:	0800c610 	.word	0x0800c610

0800a77c <__mcmp>:
 800a77c:	b530      	push	{r4, r5, lr}
 800a77e:	6902      	ldr	r2, [r0, #16]
 800a780:	690c      	ldr	r4, [r1, #16]
 800a782:	1b12      	subs	r2, r2, r4
 800a784:	d10e      	bne.n	800a7a4 <__mcmp+0x28>
 800a786:	f100 0314 	add.w	r3, r0, #20
 800a78a:	3114      	adds	r1, #20
 800a78c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a790:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a794:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a79c:	42a5      	cmp	r5, r4
 800a79e:	d003      	beq.n	800a7a8 <__mcmp+0x2c>
 800a7a0:	d305      	bcc.n	800a7ae <__mcmp+0x32>
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	bd30      	pop	{r4, r5, pc}
 800a7a8:	4283      	cmp	r3, r0
 800a7aa:	d3f3      	bcc.n	800a794 <__mcmp+0x18>
 800a7ac:	e7fa      	b.n	800a7a4 <__mcmp+0x28>
 800a7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b2:	e7f7      	b.n	800a7a4 <__mcmp+0x28>

0800a7b4 <__mdiff>:
 800a7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4690      	mov	r8, r2
 800a7c2:	f7ff ffdb 	bl	800a77c <__mcmp>
 800a7c6:	1e05      	subs	r5, r0, #0
 800a7c8:	d110      	bne.n	800a7ec <__mdiff+0x38>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff fd09 	bl	800a1e4 <_Balloc>
 800a7d2:	b930      	cbnz	r0, 800a7e2 <__mdiff+0x2e>
 800a7d4:	4b3a      	ldr	r3, [pc, #232]	; (800a8c0 <__mdiff+0x10c>)
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	f240 2132 	movw	r1, #562	; 0x232
 800a7dc:	4839      	ldr	r0, [pc, #228]	; (800a8c4 <__mdiff+0x110>)
 800a7de:	f001 f9b3 	bl	800bb48 <__assert_func>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	bfa4      	itt	ge
 800a7ee:	4643      	movge	r3, r8
 800a7f0:	46a0      	movge	r8, r4
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7f8:	bfa6      	itte	ge
 800a7fa:	461c      	movge	r4, r3
 800a7fc:	2500      	movge	r5, #0
 800a7fe:	2501      	movlt	r5, #1
 800a800:	f7ff fcf0 	bl	800a1e4 <_Balloc>
 800a804:	b920      	cbnz	r0, 800a810 <__mdiff+0x5c>
 800a806:	4b2e      	ldr	r3, [pc, #184]	; (800a8c0 <__mdiff+0x10c>)
 800a808:	4602      	mov	r2, r0
 800a80a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a80e:	e7e5      	b.n	800a7dc <__mdiff+0x28>
 800a810:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a814:	6926      	ldr	r6, [r4, #16]
 800a816:	60c5      	str	r5, [r0, #12]
 800a818:	f104 0914 	add.w	r9, r4, #20
 800a81c:	f108 0514 	add.w	r5, r8, #20
 800a820:	f100 0e14 	add.w	lr, r0, #20
 800a824:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a82c:	f108 0210 	add.w	r2, r8, #16
 800a830:	46f2      	mov	sl, lr
 800a832:	2100      	movs	r1, #0
 800a834:	f859 3b04 	ldr.w	r3, [r9], #4
 800a838:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a83c:	fa1f f883 	uxth.w	r8, r3
 800a840:	fa11 f18b 	uxtah	r1, r1, fp
 800a844:	0c1b      	lsrs	r3, r3, #16
 800a846:	eba1 0808 	sub.w	r8, r1, r8
 800a84a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a84e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a852:	fa1f f888 	uxth.w	r8, r8
 800a856:	1419      	asrs	r1, r3, #16
 800a858:	454e      	cmp	r6, r9
 800a85a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a85e:	f84a 3b04 	str.w	r3, [sl], #4
 800a862:	d8e7      	bhi.n	800a834 <__mdiff+0x80>
 800a864:	1b33      	subs	r3, r6, r4
 800a866:	3b15      	subs	r3, #21
 800a868:	f023 0303 	bic.w	r3, r3, #3
 800a86c:	3304      	adds	r3, #4
 800a86e:	3415      	adds	r4, #21
 800a870:	42a6      	cmp	r6, r4
 800a872:	bf38      	it	cc
 800a874:	2304      	movcc	r3, #4
 800a876:	441d      	add	r5, r3
 800a878:	4473      	add	r3, lr
 800a87a:	469e      	mov	lr, r3
 800a87c:	462e      	mov	r6, r5
 800a87e:	4566      	cmp	r6, ip
 800a880:	d30e      	bcc.n	800a8a0 <__mdiff+0xec>
 800a882:	f10c 0203 	add.w	r2, ip, #3
 800a886:	1b52      	subs	r2, r2, r5
 800a888:	f022 0203 	bic.w	r2, r2, #3
 800a88c:	3d03      	subs	r5, #3
 800a88e:	45ac      	cmp	ip, r5
 800a890:	bf38      	it	cc
 800a892:	2200      	movcc	r2, #0
 800a894:	441a      	add	r2, r3
 800a896:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a89a:	b17b      	cbz	r3, 800a8bc <__mdiff+0x108>
 800a89c:	6107      	str	r7, [r0, #16]
 800a89e:	e7a3      	b.n	800a7e8 <__mdiff+0x34>
 800a8a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8a4:	fa11 f288 	uxtah	r2, r1, r8
 800a8a8:	1414      	asrs	r4, r2, #16
 800a8aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8ae:	b292      	uxth	r2, r2
 800a8b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8b4:	f84e 2b04 	str.w	r2, [lr], #4
 800a8b8:	1421      	asrs	r1, r4, #16
 800a8ba:	e7e0      	b.n	800a87e <__mdiff+0xca>
 800a8bc:	3f01      	subs	r7, #1
 800a8be:	e7ea      	b.n	800a896 <__mdiff+0xe2>
 800a8c0:	0800c520 	.word	0x0800c520
 800a8c4:	0800c610 	.word	0x0800c610

0800a8c8 <__ulp>:
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	ed8d 0b00 	vstr	d0, [sp]
 800a8ce:	9b01      	ldr	r3, [sp, #4]
 800a8d0:	4912      	ldr	r1, [pc, #72]	; (800a91c <__ulp+0x54>)
 800a8d2:	4019      	ands	r1, r3
 800a8d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	dd05      	ble.n	800a8e8 <__ulp+0x20>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	ec43 2b10 	vmov	d0, r2, r3
 800a8e4:	b002      	add	sp, #8
 800a8e6:	4770      	bx	lr
 800a8e8:	4249      	negs	r1, r1
 800a8ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a8ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a8f2:	f04f 0200 	mov.w	r2, #0
 800a8f6:	f04f 0300 	mov.w	r3, #0
 800a8fa:	da04      	bge.n	800a906 <__ulp+0x3e>
 800a8fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a900:	fa41 f300 	asr.w	r3, r1, r0
 800a904:	e7ec      	b.n	800a8e0 <__ulp+0x18>
 800a906:	f1a0 0114 	sub.w	r1, r0, #20
 800a90a:	291e      	cmp	r1, #30
 800a90c:	bfda      	itte	le
 800a90e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a912:	fa20 f101 	lsrle.w	r1, r0, r1
 800a916:	2101      	movgt	r1, #1
 800a918:	460a      	mov	r2, r1
 800a91a:	e7e1      	b.n	800a8e0 <__ulp+0x18>
 800a91c:	7ff00000 	.word	0x7ff00000

0800a920 <__b2d>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	6905      	ldr	r5, [r0, #16]
 800a924:	f100 0714 	add.w	r7, r0, #20
 800a928:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a92c:	1f2e      	subs	r6, r5, #4
 800a92e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff fd48 	bl	800a3c8 <__hi0bits>
 800a938:	f1c0 0320 	rsb	r3, r0, #32
 800a93c:	280a      	cmp	r0, #10
 800a93e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a9bc <__b2d+0x9c>
 800a942:	600b      	str	r3, [r1, #0]
 800a944:	dc14      	bgt.n	800a970 <__b2d+0x50>
 800a946:	f1c0 0e0b 	rsb	lr, r0, #11
 800a94a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a94e:	42b7      	cmp	r7, r6
 800a950:	ea41 030c 	orr.w	r3, r1, ip
 800a954:	bf34      	ite	cc
 800a956:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a95a:	2100      	movcs	r1, #0
 800a95c:	3015      	adds	r0, #21
 800a95e:	fa04 f000 	lsl.w	r0, r4, r0
 800a962:	fa21 f10e 	lsr.w	r1, r1, lr
 800a966:	ea40 0201 	orr.w	r2, r0, r1
 800a96a:	ec43 2b10 	vmov	d0, r2, r3
 800a96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a970:	42b7      	cmp	r7, r6
 800a972:	bf3a      	itte	cc
 800a974:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a978:	f1a5 0608 	subcc.w	r6, r5, #8
 800a97c:	2100      	movcs	r1, #0
 800a97e:	380b      	subs	r0, #11
 800a980:	d017      	beq.n	800a9b2 <__b2d+0x92>
 800a982:	f1c0 0c20 	rsb	ip, r0, #32
 800a986:	fa04 f500 	lsl.w	r5, r4, r0
 800a98a:	42be      	cmp	r6, r7
 800a98c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a990:	ea45 0504 	orr.w	r5, r5, r4
 800a994:	bf8c      	ite	hi
 800a996:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a99a:	2400      	movls	r4, #0
 800a99c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a9a0:	fa01 f000 	lsl.w	r0, r1, r0
 800a9a4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a9a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9ac:	ea40 0204 	orr.w	r2, r0, r4
 800a9b0:	e7db      	b.n	800a96a <__b2d+0x4a>
 800a9b2:	ea44 030c 	orr.w	r3, r4, ip
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	e7d7      	b.n	800a96a <__b2d+0x4a>
 800a9ba:	bf00      	nop
 800a9bc:	3ff00000 	.word	0x3ff00000

0800a9c0 <__d2b>:
 800a9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	4689      	mov	r9, r1
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	ec57 6b10 	vmov	r6, r7, d0
 800a9cc:	4690      	mov	r8, r2
 800a9ce:	f7ff fc09 	bl	800a1e4 <_Balloc>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	b930      	cbnz	r0, 800a9e4 <__d2b+0x24>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <__d2b+0xb0>)
 800a9da:	4826      	ldr	r0, [pc, #152]	; (800aa74 <__d2b+0xb4>)
 800a9dc:	f240 310a 	movw	r1, #778	; 0x30a
 800a9e0:	f001 f8b2 	bl	800bb48 <__assert_func>
 800a9e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a9e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9ec:	bb35      	cbnz	r5, 800aa3c <__d2b+0x7c>
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	9301      	str	r3, [sp, #4]
 800a9f2:	d028      	beq.n	800aa46 <__d2b+0x86>
 800a9f4:	4668      	mov	r0, sp
 800a9f6:	9600      	str	r6, [sp, #0]
 800a9f8:	f7ff fd06 	bl	800a408 <__lo0bits>
 800a9fc:	9900      	ldr	r1, [sp, #0]
 800a9fe:	b300      	cbz	r0, 800aa42 <__d2b+0x82>
 800aa00:	9a01      	ldr	r2, [sp, #4]
 800aa02:	f1c0 0320 	rsb	r3, r0, #32
 800aa06:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0a:	430b      	orrs	r3, r1
 800aa0c:	40c2      	lsrs	r2, r0
 800aa0e:	6163      	str	r3, [r4, #20]
 800aa10:	9201      	str	r2, [sp, #4]
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	61a3      	str	r3, [r4, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bf14      	ite	ne
 800aa1a:	2202      	movne	r2, #2
 800aa1c:	2201      	moveq	r2, #1
 800aa1e:	6122      	str	r2, [r4, #16]
 800aa20:	b1d5      	cbz	r5, 800aa58 <__d2b+0x98>
 800aa22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa26:	4405      	add	r5, r0
 800aa28:	f8c9 5000 	str.w	r5, [r9]
 800aa2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa30:	f8c8 0000 	str.w	r0, [r8]
 800aa34:	4620      	mov	r0, r4
 800aa36:	b003      	add	sp, #12
 800aa38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa40:	e7d5      	b.n	800a9ee <__d2b+0x2e>
 800aa42:	6161      	str	r1, [r4, #20]
 800aa44:	e7e5      	b.n	800aa12 <__d2b+0x52>
 800aa46:	a801      	add	r0, sp, #4
 800aa48:	f7ff fcde 	bl	800a408 <__lo0bits>
 800aa4c:	9b01      	ldr	r3, [sp, #4]
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	2201      	movs	r2, #1
 800aa52:	6122      	str	r2, [r4, #16]
 800aa54:	3020      	adds	r0, #32
 800aa56:	e7e3      	b.n	800aa20 <__d2b+0x60>
 800aa58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa60:	f8c9 0000 	str.w	r0, [r9]
 800aa64:	6918      	ldr	r0, [r3, #16]
 800aa66:	f7ff fcaf 	bl	800a3c8 <__hi0bits>
 800aa6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa6e:	e7df      	b.n	800aa30 <__d2b+0x70>
 800aa70:	0800c520 	.word	0x0800c520
 800aa74:	0800c610 	.word	0x0800c610

0800aa78 <__ratio>:
 800aa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4688      	mov	r8, r1
 800aa7e:	4669      	mov	r1, sp
 800aa80:	4681      	mov	r9, r0
 800aa82:	f7ff ff4d 	bl	800a920 <__b2d>
 800aa86:	a901      	add	r1, sp, #4
 800aa88:	4640      	mov	r0, r8
 800aa8a:	ec55 4b10 	vmov	r4, r5, d0
 800aa8e:	f7ff ff47 	bl	800a920 <__b2d>
 800aa92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa9a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aaa8:	ec51 0b10 	vmov	r0, r1, d0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfd6      	itet	le
 800aab0:	460a      	movle	r2, r1
 800aab2:	462a      	movgt	r2, r5
 800aab4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aab8:	468b      	mov	fp, r1
 800aaba:	462f      	mov	r7, r5
 800aabc:	bfd4      	ite	le
 800aabe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aac2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aac6:	4620      	mov	r0, r4
 800aac8:	ee10 2a10 	vmov	r2, s0
 800aacc:	465b      	mov	r3, fp
 800aace:	4639      	mov	r1, r7
 800aad0:	f7f5 febc 	bl	800084c <__aeabi_ddiv>
 800aad4:	ec41 0b10 	vmov	d0, r0, r1
 800aad8:	b003      	add	sp, #12
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aade <__copybits>:
 800aade:	3901      	subs	r1, #1
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	1149      	asrs	r1, r1, #5
 800aae4:	6914      	ldr	r4, [r2, #16]
 800aae6:	3101      	adds	r1, #1
 800aae8:	f102 0314 	add.w	r3, r2, #20
 800aaec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aaf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaf4:	1f05      	subs	r5, r0, #4
 800aaf6:	42a3      	cmp	r3, r4
 800aaf8:	d30c      	bcc.n	800ab14 <__copybits+0x36>
 800aafa:	1aa3      	subs	r3, r4, r2
 800aafc:	3b11      	subs	r3, #17
 800aafe:	f023 0303 	bic.w	r3, r3, #3
 800ab02:	3211      	adds	r2, #17
 800ab04:	42a2      	cmp	r2, r4
 800ab06:	bf88      	it	hi
 800ab08:	2300      	movhi	r3, #0
 800ab0a:	4418      	add	r0, r3
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4288      	cmp	r0, r1
 800ab10:	d305      	bcc.n	800ab1e <__copybits+0x40>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab18:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab1c:	e7eb      	b.n	800aaf6 <__copybits+0x18>
 800ab1e:	f840 3b04 	str.w	r3, [r0], #4
 800ab22:	e7f4      	b.n	800ab0e <__copybits+0x30>

0800ab24 <__any_on>:
 800ab24:	f100 0214 	add.w	r2, r0, #20
 800ab28:	6900      	ldr	r0, [r0, #16]
 800ab2a:	114b      	asrs	r3, r1, #5
 800ab2c:	4298      	cmp	r0, r3
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	db11      	blt.n	800ab56 <__any_on+0x32>
 800ab32:	dd0a      	ble.n	800ab4a <__any_on+0x26>
 800ab34:	f011 011f 	ands.w	r1, r1, #31
 800ab38:	d007      	beq.n	800ab4a <__any_on+0x26>
 800ab3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab3e:	fa24 f001 	lsr.w	r0, r4, r1
 800ab42:	fa00 f101 	lsl.w	r1, r0, r1
 800ab46:	428c      	cmp	r4, r1
 800ab48:	d10b      	bne.n	800ab62 <__any_on+0x3e>
 800ab4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d803      	bhi.n	800ab5a <__any_on+0x36>
 800ab52:	2000      	movs	r0, #0
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	4603      	mov	r3, r0
 800ab58:	e7f7      	b.n	800ab4a <__any_on+0x26>
 800ab5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d0f5      	beq.n	800ab4e <__any_on+0x2a>
 800ab62:	2001      	movs	r0, #1
 800ab64:	e7f6      	b.n	800ab54 <__any_on+0x30>

0800ab66 <_calloc_r>:
 800ab66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab68:	fba1 2402 	umull	r2, r4, r1, r2
 800ab6c:	b94c      	cbnz	r4, 800ab82 <_calloc_r+0x1c>
 800ab6e:	4611      	mov	r1, r2
 800ab70:	9201      	str	r2, [sp, #4]
 800ab72:	f000 f87b 	bl	800ac6c <_malloc_r>
 800ab76:	9a01      	ldr	r2, [sp, #4]
 800ab78:	4605      	mov	r5, r0
 800ab7a:	b930      	cbnz	r0, 800ab8a <_calloc_r+0x24>
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	b003      	add	sp, #12
 800ab80:	bd30      	pop	{r4, r5, pc}
 800ab82:	220c      	movs	r2, #12
 800ab84:	6002      	str	r2, [r0, #0]
 800ab86:	2500      	movs	r5, #0
 800ab88:	e7f8      	b.n	800ab7c <_calloc_r+0x16>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	f7fb ff8e 	bl	8006aac <memset>
 800ab90:	e7f4      	b.n	800ab7c <_calloc_r+0x16>
	...

0800ab94 <_free_r>:
 800ab94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab96:	2900      	cmp	r1, #0
 800ab98:	d044      	beq.n	800ac24 <_free_r+0x90>
 800ab9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab9e:	9001      	str	r0, [sp, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f1a1 0404 	sub.w	r4, r1, #4
 800aba6:	bfb8      	it	lt
 800aba8:	18e4      	addlt	r4, r4, r3
 800abaa:	f001 f839 	bl	800bc20 <__malloc_lock>
 800abae:	4a1e      	ldr	r2, [pc, #120]	; (800ac28 <_free_r+0x94>)
 800abb0:	9801      	ldr	r0, [sp, #4]
 800abb2:	6813      	ldr	r3, [r2, #0]
 800abb4:	b933      	cbnz	r3, 800abc4 <_free_r+0x30>
 800abb6:	6063      	str	r3, [r4, #4]
 800abb8:	6014      	str	r4, [r2, #0]
 800abba:	b003      	add	sp, #12
 800abbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abc0:	f001 b834 	b.w	800bc2c <__malloc_unlock>
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	d908      	bls.n	800abda <_free_r+0x46>
 800abc8:	6825      	ldr	r5, [r4, #0]
 800abca:	1961      	adds	r1, r4, r5
 800abcc:	428b      	cmp	r3, r1
 800abce:	bf01      	itttt	eq
 800abd0:	6819      	ldreq	r1, [r3, #0]
 800abd2:	685b      	ldreq	r3, [r3, #4]
 800abd4:	1949      	addeq	r1, r1, r5
 800abd6:	6021      	streq	r1, [r4, #0]
 800abd8:	e7ed      	b.n	800abb6 <_free_r+0x22>
 800abda:	461a      	mov	r2, r3
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	b10b      	cbz	r3, 800abe4 <_free_r+0x50>
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	d9fa      	bls.n	800abda <_free_r+0x46>
 800abe4:	6811      	ldr	r1, [r2, #0]
 800abe6:	1855      	adds	r5, r2, r1
 800abe8:	42a5      	cmp	r5, r4
 800abea:	d10b      	bne.n	800ac04 <_free_r+0x70>
 800abec:	6824      	ldr	r4, [r4, #0]
 800abee:	4421      	add	r1, r4
 800abf0:	1854      	adds	r4, r2, r1
 800abf2:	42a3      	cmp	r3, r4
 800abf4:	6011      	str	r1, [r2, #0]
 800abf6:	d1e0      	bne.n	800abba <_free_r+0x26>
 800abf8:	681c      	ldr	r4, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	6053      	str	r3, [r2, #4]
 800abfe:	4421      	add	r1, r4
 800ac00:	6011      	str	r1, [r2, #0]
 800ac02:	e7da      	b.n	800abba <_free_r+0x26>
 800ac04:	d902      	bls.n	800ac0c <_free_r+0x78>
 800ac06:	230c      	movs	r3, #12
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	e7d6      	b.n	800abba <_free_r+0x26>
 800ac0c:	6825      	ldr	r5, [r4, #0]
 800ac0e:	1961      	adds	r1, r4, r5
 800ac10:	428b      	cmp	r3, r1
 800ac12:	bf04      	itt	eq
 800ac14:	6819      	ldreq	r1, [r3, #0]
 800ac16:	685b      	ldreq	r3, [r3, #4]
 800ac18:	6063      	str	r3, [r4, #4]
 800ac1a:	bf04      	itt	eq
 800ac1c:	1949      	addeq	r1, r1, r5
 800ac1e:	6021      	streq	r1, [r4, #0]
 800ac20:	6054      	str	r4, [r2, #4]
 800ac22:	e7ca      	b.n	800abba <_free_r+0x26>
 800ac24:	b003      	add	sp, #12
 800ac26:	bd30      	pop	{r4, r5, pc}
 800ac28:	20000ddc 	.word	0x20000ddc

0800ac2c <sbrk_aligned>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4e0e      	ldr	r6, [pc, #56]	; (800ac68 <sbrk_aligned+0x3c>)
 800ac30:	460c      	mov	r4, r1
 800ac32:	6831      	ldr	r1, [r6, #0]
 800ac34:	4605      	mov	r5, r0
 800ac36:	b911      	cbnz	r1, 800ac3e <sbrk_aligned+0x12>
 800ac38:	f000 fe82 	bl	800b940 <_sbrk_r>
 800ac3c:	6030      	str	r0, [r6, #0]
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	f000 fe7d 	bl	800b940 <_sbrk_r>
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	d00a      	beq.n	800ac60 <sbrk_aligned+0x34>
 800ac4a:	1cc4      	adds	r4, r0, #3
 800ac4c:	f024 0403 	bic.w	r4, r4, #3
 800ac50:	42a0      	cmp	r0, r4
 800ac52:	d007      	beq.n	800ac64 <sbrk_aligned+0x38>
 800ac54:	1a21      	subs	r1, r4, r0
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 fe72 	bl	800b940 <_sbrk_r>
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d101      	bne.n	800ac64 <sbrk_aligned+0x38>
 800ac60:	f04f 34ff 	mov.w	r4, #4294967295
 800ac64:	4620      	mov	r0, r4
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	20000de0 	.word	0x20000de0

0800ac6c <_malloc_r>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	1ccd      	adds	r5, r1, #3
 800ac72:	f025 0503 	bic.w	r5, r5, #3
 800ac76:	3508      	adds	r5, #8
 800ac78:	2d0c      	cmp	r5, #12
 800ac7a:	bf38      	it	cc
 800ac7c:	250c      	movcc	r5, #12
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	4607      	mov	r7, r0
 800ac82:	db01      	blt.n	800ac88 <_malloc_r+0x1c>
 800ac84:	42a9      	cmp	r1, r5
 800ac86:	d905      	bls.n	800ac94 <_malloc_r+0x28>
 800ac88:	230c      	movs	r3, #12
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	2600      	movs	r6, #0
 800ac8e:	4630      	mov	r0, r6
 800ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac94:	4e2e      	ldr	r6, [pc, #184]	; (800ad50 <_malloc_r+0xe4>)
 800ac96:	f000 ffc3 	bl	800bc20 <__malloc_lock>
 800ac9a:	6833      	ldr	r3, [r6, #0]
 800ac9c:	461c      	mov	r4, r3
 800ac9e:	bb34      	cbnz	r4, 800acee <_malloc_r+0x82>
 800aca0:	4629      	mov	r1, r5
 800aca2:	4638      	mov	r0, r7
 800aca4:	f7ff ffc2 	bl	800ac2c <sbrk_aligned>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	4604      	mov	r4, r0
 800acac:	d14d      	bne.n	800ad4a <_malloc_r+0xde>
 800acae:	6834      	ldr	r4, [r6, #0]
 800acb0:	4626      	mov	r6, r4
 800acb2:	2e00      	cmp	r6, #0
 800acb4:	d140      	bne.n	800ad38 <_malloc_r+0xcc>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	4631      	mov	r1, r6
 800acba:	4638      	mov	r0, r7
 800acbc:	eb04 0803 	add.w	r8, r4, r3
 800acc0:	f000 fe3e 	bl	800b940 <_sbrk_r>
 800acc4:	4580      	cmp	r8, r0
 800acc6:	d13a      	bne.n	800ad3e <_malloc_r+0xd2>
 800acc8:	6821      	ldr	r1, [r4, #0]
 800acca:	3503      	adds	r5, #3
 800accc:	1a6d      	subs	r5, r5, r1
 800acce:	f025 0503 	bic.w	r5, r5, #3
 800acd2:	3508      	adds	r5, #8
 800acd4:	2d0c      	cmp	r5, #12
 800acd6:	bf38      	it	cc
 800acd8:	250c      	movcc	r5, #12
 800acda:	4629      	mov	r1, r5
 800acdc:	4638      	mov	r0, r7
 800acde:	f7ff ffa5 	bl	800ac2c <sbrk_aligned>
 800ace2:	3001      	adds	r0, #1
 800ace4:	d02b      	beq.n	800ad3e <_malloc_r+0xd2>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	442b      	add	r3, r5
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	e00e      	b.n	800ad0c <_malloc_r+0xa0>
 800acee:	6822      	ldr	r2, [r4, #0]
 800acf0:	1b52      	subs	r2, r2, r5
 800acf2:	d41e      	bmi.n	800ad32 <_malloc_r+0xc6>
 800acf4:	2a0b      	cmp	r2, #11
 800acf6:	d916      	bls.n	800ad26 <_malloc_r+0xba>
 800acf8:	1961      	adds	r1, r4, r5
 800acfa:	42a3      	cmp	r3, r4
 800acfc:	6025      	str	r5, [r4, #0]
 800acfe:	bf18      	it	ne
 800ad00:	6059      	strne	r1, [r3, #4]
 800ad02:	6863      	ldr	r3, [r4, #4]
 800ad04:	bf08      	it	eq
 800ad06:	6031      	streq	r1, [r6, #0]
 800ad08:	5162      	str	r2, [r4, r5]
 800ad0a:	604b      	str	r3, [r1, #4]
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f104 060b 	add.w	r6, r4, #11
 800ad12:	f000 ff8b 	bl	800bc2c <__malloc_unlock>
 800ad16:	f026 0607 	bic.w	r6, r6, #7
 800ad1a:	1d23      	adds	r3, r4, #4
 800ad1c:	1af2      	subs	r2, r6, r3
 800ad1e:	d0b6      	beq.n	800ac8e <_malloc_r+0x22>
 800ad20:	1b9b      	subs	r3, r3, r6
 800ad22:	50a3      	str	r3, [r4, r2]
 800ad24:	e7b3      	b.n	800ac8e <_malloc_r+0x22>
 800ad26:	6862      	ldr	r2, [r4, #4]
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	bf0c      	ite	eq
 800ad2c:	6032      	streq	r2, [r6, #0]
 800ad2e:	605a      	strne	r2, [r3, #4]
 800ad30:	e7ec      	b.n	800ad0c <_malloc_r+0xa0>
 800ad32:	4623      	mov	r3, r4
 800ad34:	6864      	ldr	r4, [r4, #4]
 800ad36:	e7b2      	b.n	800ac9e <_malloc_r+0x32>
 800ad38:	4634      	mov	r4, r6
 800ad3a:	6876      	ldr	r6, [r6, #4]
 800ad3c:	e7b9      	b.n	800acb2 <_malloc_r+0x46>
 800ad3e:	230c      	movs	r3, #12
 800ad40:	603b      	str	r3, [r7, #0]
 800ad42:	4638      	mov	r0, r7
 800ad44:	f000 ff72 	bl	800bc2c <__malloc_unlock>
 800ad48:	e7a1      	b.n	800ac8e <_malloc_r+0x22>
 800ad4a:	6025      	str	r5, [r4, #0]
 800ad4c:	e7de      	b.n	800ad0c <_malloc_r+0xa0>
 800ad4e:	bf00      	nop
 800ad50:	20000ddc 	.word	0x20000ddc

0800ad54 <__ssputs_r>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	688e      	ldr	r6, [r1, #8]
 800ad5a:	429e      	cmp	r6, r3
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	4690      	mov	r8, r2
 800ad62:	461f      	mov	r7, r3
 800ad64:	d838      	bhi.n	800add8 <__ssputs_r+0x84>
 800ad66:	898a      	ldrh	r2, [r1, #12]
 800ad68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad6c:	d032      	beq.n	800add4 <__ssputs_r+0x80>
 800ad6e:	6825      	ldr	r5, [r4, #0]
 800ad70:	6909      	ldr	r1, [r1, #16]
 800ad72:	eba5 0901 	sub.w	r9, r5, r1
 800ad76:	6965      	ldr	r5, [r4, #20]
 800ad78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad80:	3301      	adds	r3, #1
 800ad82:	444b      	add	r3, r9
 800ad84:	106d      	asrs	r5, r5, #1
 800ad86:	429d      	cmp	r5, r3
 800ad88:	bf38      	it	cc
 800ad8a:	461d      	movcc	r5, r3
 800ad8c:	0553      	lsls	r3, r2, #21
 800ad8e:	d531      	bpl.n	800adf4 <__ssputs_r+0xa0>
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7ff ff6b 	bl	800ac6c <_malloc_r>
 800ad96:	4606      	mov	r6, r0
 800ad98:	b950      	cbnz	r0, 800adb0 <__ssputs_r+0x5c>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	f8ca 3000 	str.w	r3, [sl]
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb0:	6921      	ldr	r1, [r4, #16]
 800adb2:	464a      	mov	r2, r9
 800adb4:	f7fb fe6c 	bl	8006a90 <memcpy>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	6126      	str	r6, [r4, #16]
 800adc6:	6165      	str	r5, [r4, #20]
 800adc8:	444e      	add	r6, r9
 800adca:	eba5 0509 	sub.w	r5, r5, r9
 800adce:	6026      	str	r6, [r4, #0]
 800add0:	60a5      	str	r5, [r4, #8]
 800add2:	463e      	mov	r6, r7
 800add4:	42be      	cmp	r6, r7
 800add6:	d900      	bls.n	800adda <__ssputs_r+0x86>
 800add8:	463e      	mov	r6, r7
 800adda:	6820      	ldr	r0, [r4, #0]
 800addc:	4632      	mov	r2, r6
 800adde:	4641      	mov	r1, r8
 800ade0:	f000 ff04 	bl	800bbec <memmove>
 800ade4:	68a3      	ldr	r3, [r4, #8]
 800ade6:	1b9b      	subs	r3, r3, r6
 800ade8:	60a3      	str	r3, [r4, #8]
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	4433      	add	r3, r6
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7db      	b.n	800adac <__ssputs_r+0x58>
 800adf4:	462a      	mov	r2, r5
 800adf6:	f000 ff1f 	bl	800bc38 <_realloc_r>
 800adfa:	4606      	mov	r6, r0
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d1e1      	bne.n	800adc4 <__ssputs_r+0x70>
 800ae00:	6921      	ldr	r1, [r4, #16]
 800ae02:	4650      	mov	r0, sl
 800ae04:	f7ff fec6 	bl	800ab94 <_free_r>
 800ae08:	e7c7      	b.n	800ad9a <__ssputs_r+0x46>
	...

0800ae0c <_svfiprintf_r>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4698      	mov	r8, r3
 800ae12:	898b      	ldrh	r3, [r1, #12]
 800ae14:	061b      	lsls	r3, r3, #24
 800ae16:	b09d      	sub	sp, #116	; 0x74
 800ae18:	4607      	mov	r7, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	d50e      	bpl.n	800ae3e <_svfiprintf_r+0x32>
 800ae20:	690b      	ldr	r3, [r1, #16]
 800ae22:	b963      	cbnz	r3, 800ae3e <_svfiprintf_r+0x32>
 800ae24:	2140      	movs	r1, #64	; 0x40
 800ae26:	f7ff ff21 	bl	800ac6c <_malloc_r>
 800ae2a:	6028      	str	r0, [r5, #0]
 800ae2c:	6128      	str	r0, [r5, #16]
 800ae2e:	b920      	cbnz	r0, 800ae3a <_svfiprintf_r+0x2e>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	e0d1      	b.n	800afde <_svfiprintf_r+0x1d2>
 800ae3a:	2340      	movs	r3, #64	; 0x40
 800ae3c:	616b      	str	r3, [r5, #20]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9309      	str	r3, [sp, #36]	; 0x24
 800ae42:	2320      	movs	r3, #32
 800ae44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae4c:	2330      	movs	r3, #48	; 0x30
 800ae4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aff8 <_svfiprintf_r+0x1ec>
 800ae52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae56:	f04f 0901 	mov.w	r9, #1
 800ae5a:	4623      	mov	r3, r4
 800ae5c:	469a      	mov	sl, r3
 800ae5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae62:	b10a      	cbz	r2, 800ae68 <_svfiprintf_r+0x5c>
 800ae64:	2a25      	cmp	r2, #37	; 0x25
 800ae66:	d1f9      	bne.n	800ae5c <_svfiprintf_r+0x50>
 800ae68:	ebba 0b04 	subs.w	fp, sl, r4
 800ae6c:	d00b      	beq.n	800ae86 <_svfiprintf_r+0x7a>
 800ae6e:	465b      	mov	r3, fp
 800ae70:	4622      	mov	r2, r4
 800ae72:	4629      	mov	r1, r5
 800ae74:	4638      	mov	r0, r7
 800ae76:	f7ff ff6d 	bl	800ad54 <__ssputs_r>
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	f000 80aa 	beq.w	800afd4 <_svfiprintf_r+0x1c8>
 800ae80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae82:	445a      	add	r2, fp
 800ae84:	9209      	str	r2, [sp, #36]	; 0x24
 800ae86:	f89a 3000 	ldrb.w	r3, [sl]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80a2 	beq.w	800afd4 <_svfiprintf_r+0x1c8>
 800ae90:	2300      	movs	r3, #0
 800ae92:	f04f 32ff 	mov.w	r2, #4294967295
 800ae96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae9a:	f10a 0a01 	add.w	sl, sl, #1
 800ae9e:	9304      	str	r3, [sp, #16]
 800aea0:	9307      	str	r3, [sp, #28]
 800aea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aea6:	931a      	str	r3, [sp, #104]	; 0x68
 800aea8:	4654      	mov	r4, sl
 800aeaa:	2205      	movs	r2, #5
 800aeac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb0:	4851      	ldr	r0, [pc, #324]	; (800aff8 <_svfiprintf_r+0x1ec>)
 800aeb2:	f7f5 f995 	bl	80001e0 <memchr>
 800aeb6:	9a04      	ldr	r2, [sp, #16]
 800aeb8:	b9d8      	cbnz	r0, 800aef2 <_svfiprintf_r+0xe6>
 800aeba:	06d0      	lsls	r0, r2, #27
 800aebc:	bf44      	itt	mi
 800aebe:	2320      	movmi	r3, #32
 800aec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec4:	0711      	lsls	r1, r2, #28
 800aec6:	bf44      	itt	mi
 800aec8:	232b      	movmi	r3, #43	; 0x2b
 800aeca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aece:	f89a 3000 	ldrb.w	r3, [sl]
 800aed2:	2b2a      	cmp	r3, #42	; 0x2a
 800aed4:	d015      	beq.n	800af02 <_svfiprintf_r+0xf6>
 800aed6:	9a07      	ldr	r2, [sp, #28]
 800aed8:	4654      	mov	r4, sl
 800aeda:	2000      	movs	r0, #0
 800aedc:	f04f 0c0a 	mov.w	ip, #10
 800aee0:	4621      	mov	r1, r4
 800aee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aee6:	3b30      	subs	r3, #48	; 0x30
 800aee8:	2b09      	cmp	r3, #9
 800aeea:	d94e      	bls.n	800af8a <_svfiprintf_r+0x17e>
 800aeec:	b1b0      	cbz	r0, 800af1c <_svfiprintf_r+0x110>
 800aeee:	9207      	str	r2, [sp, #28]
 800aef0:	e014      	b.n	800af1c <_svfiprintf_r+0x110>
 800aef2:	eba0 0308 	sub.w	r3, r0, r8
 800aef6:	fa09 f303 	lsl.w	r3, r9, r3
 800aefa:	4313      	orrs	r3, r2
 800aefc:	9304      	str	r3, [sp, #16]
 800aefe:	46a2      	mov	sl, r4
 800af00:	e7d2      	b.n	800aea8 <_svfiprintf_r+0x9c>
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	1d19      	adds	r1, r3, #4
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	9103      	str	r1, [sp, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bfbb      	ittet	lt
 800af0e:	425b      	neglt	r3, r3
 800af10:	f042 0202 	orrlt.w	r2, r2, #2
 800af14:	9307      	strge	r3, [sp, #28]
 800af16:	9307      	strlt	r3, [sp, #28]
 800af18:	bfb8      	it	lt
 800af1a:	9204      	strlt	r2, [sp, #16]
 800af1c:	7823      	ldrb	r3, [r4, #0]
 800af1e:	2b2e      	cmp	r3, #46	; 0x2e
 800af20:	d10c      	bne.n	800af3c <_svfiprintf_r+0x130>
 800af22:	7863      	ldrb	r3, [r4, #1]
 800af24:	2b2a      	cmp	r3, #42	; 0x2a
 800af26:	d135      	bne.n	800af94 <_svfiprintf_r+0x188>
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	1d1a      	adds	r2, r3, #4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	9203      	str	r2, [sp, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	bfb8      	it	lt
 800af34:	f04f 33ff 	movlt.w	r3, #4294967295
 800af38:	3402      	adds	r4, #2
 800af3a:	9305      	str	r3, [sp, #20]
 800af3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b008 <_svfiprintf_r+0x1fc>
 800af40:	7821      	ldrb	r1, [r4, #0]
 800af42:	2203      	movs	r2, #3
 800af44:	4650      	mov	r0, sl
 800af46:	f7f5 f94b 	bl	80001e0 <memchr>
 800af4a:	b140      	cbz	r0, 800af5e <_svfiprintf_r+0x152>
 800af4c:	2340      	movs	r3, #64	; 0x40
 800af4e:	eba0 000a 	sub.w	r0, r0, sl
 800af52:	fa03 f000 	lsl.w	r0, r3, r0
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	4303      	orrs	r3, r0
 800af5a:	3401      	adds	r4, #1
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af62:	4826      	ldr	r0, [pc, #152]	; (800affc <_svfiprintf_r+0x1f0>)
 800af64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af68:	2206      	movs	r2, #6
 800af6a:	f7f5 f939 	bl	80001e0 <memchr>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d038      	beq.n	800afe4 <_svfiprintf_r+0x1d8>
 800af72:	4b23      	ldr	r3, [pc, #140]	; (800b000 <_svfiprintf_r+0x1f4>)
 800af74:	bb1b      	cbnz	r3, 800afbe <_svfiprintf_r+0x1b2>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	3307      	adds	r3, #7
 800af7a:	f023 0307 	bic.w	r3, r3, #7
 800af7e:	3308      	adds	r3, #8
 800af80:	9303      	str	r3, [sp, #12]
 800af82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af84:	4433      	add	r3, r6
 800af86:	9309      	str	r3, [sp, #36]	; 0x24
 800af88:	e767      	b.n	800ae5a <_svfiprintf_r+0x4e>
 800af8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af8e:	460c      	mov	r4, r1
 800af90:	2001      	movs	r0, #1
 800af92:	e7a5      	b.n	800aee0 <_svfiprintf_r+0xd4>
 800af94:	2300      	movs	r3, #0
 800af96:	3401      	adds	r4, #1
 800af98:	9305      	str	r3, [sp, #20]
 800af9a:	4619      	mov	r1, r3
 800af9c:	f04f 0c0a 	mov.w	ip, #10
 800afa0:	4620      	mov	r0, r4
 800afa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa6:	3a30      	subs	r2, #48	; 0x30
 800afa8:	2a09      	cmp	r2, #9
 800afaa:	d903      	bls.n	800afb4 <_svfiprintf_r+0x1a8>
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0c5      	beq.n	800af3c <_svfiprintf_r+0x130>
 800afb0:	9105      	str	r1, [sp, #20]
 800afb2:	e7c3      	b.n	800af3c <_svfiprintf_r+0x130>
 800afb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800afb8:	4604      	mov	r4, r0
 800afba:	2301      	movs	r3, #1
 800afbc:	e7f0      	b.n	800afa0 <_svfiprintf_r+0x194>
 800afbe:	ab03      	add	r3, sp, #12
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	462a      	mov	r2, r5
 800afc4:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <_svfiprintf_r+0x1f8>)
 800afc6:	a904      	add	r1, sp, #16
 800afc8:	4638      	mov	r0, r7
 800afca:	f7fb fe17 	bl	8006bfc <_printf_float>
 800afce:	1c42      	adds	r2, r0, #1
 800afd0:	4606      	mov	r6, r0
 800afd2:	d1d6      	bne.n	800af82 <_svfiprintf_r+0x176>
 800afd4:	89ab      	ldrh	r3, [r5, #12]
 800afd6:	065b      	lsls	r3, r3, #25
 800afd8:	f53f af2c 	bmi.w	800ae34 <_svfiprintf_r+0x28>
 800afdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afde:	b01d      	add	sp, #116	; 0x74
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	ab03      	add	r3, sp, #12
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	462a      	mov	r2, r5
 800afea:	4b06      	ldr	r3, [pc, #24]	; (800b004 <_svfiprintf_r+0x1f8>)
 800afec:	a904      	add	r1, sp, #16
 800afee:	4638      	mov	r0, r7
 800aff0:	f7fc f8a8 	bl	8007144 <_printf_i>
 800aff4:	e7eb      	b.n	800afce <_svfiprintf_r+0x1c2>
 800aff6:	bf00      	nop
 800aff8:	0800c76c 	.word	0x0800c76c
 800affc:	0800c776 	.word	0x0800c776
 800b000:	08006bfd 	.word	0x08006bfd
 800b004:	0800ad55 	.word	0x0800ad55
 800b008:	0800c772 	.word	0x0800c772

0800b00c <_sungetc_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	1c4b      	adds	r3, r1, #1
 800b010:	4614      	mov	r4, r2
 800b012:	d103      	bne.n	800b01c <_sungetc_r+0x10>
 800b014:	f04f 35ff 	mov.w	r5, #4294967295
 800b018:	4628      	mov	r0, r5
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	8993      	ldrh	r3, [r2, #12]
 800b01e:	f023 0320 	bic.w	r3, r3, #32
 800b022:	8193      	strh	r3, [r2, #12]
 800b024:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b026:	6852      	ldr	r2, [r2, #4]
 800b028:	b2cd      	uxtb	r5, r1
 800b02a:	b18b      	cbz	r3, 800b050 <_sungetc_r+0x44>
 800b02c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b02e:	4293      	cmp	r3, r2
 800b030:	dd08      	ble.n	800b044 <_sungetc_r+0x38>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	1e5a      	subs	r2, r3, #1
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b03c:	6863      	ldr	r3, [r4, #4]
 800b03e:	3301      	adds	r3, #1
 800b040:	6063      	str	r3, [r4, #4]
 800b042:	e7e9      	b.n	800b018 <_sungetc_r+0xc>
 800b044:	4621      	mov	r1, r4
 800b046:	f000 fd37 	bl	800bab8 <__submore>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d0f1      	beq.n	800b032 <_sungetc_r+0x26>
 800b04e:	e7e1      	b.n	800b014 <_sungetc_r+0x8>
 800b050:	6921      	ldr	r1, [r4, #16]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	b151      	cbz	r1, 800b06c <_sungetc_r+0x60>
 800b056:	4299      	cmp	r1, r3
 800b058:	d208      	bcs.n	800b06c <_sungetc_r+0x60>
 800b05a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b05e:	42a9      	cmp	r1, r5
 800b060:	d104      	bne.n	800b06c <_sungetc_r+0x60>
 800b062:	3b01      	subs	r3, #1
 800b064:	3201      	adds	r2, #1
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	6062      	str	r2, [r4, #4]
 800b06a:	e7d5      	b.n	800b018 <_sungetc_r+0xc>
 800b06c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b074:	6363      	str	r3, [r4, #52]	; 0x34
 800b076:	2303      	movs	r3, #3
 800b078:	63a3      	str	r3, [r4, #56]	; 0x38
 800b07a:	4623      	mov	r3, r4
 800b07c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	2301      	movs	r3, #1
 800b084:	e7dc      	b.n	800b040 <_sungetc_r+0x34>

0800b086 <__ssrefill_r>:
 800b086:	b510      	push	{r4, lr}
 800b088:	460c      	mov	r4, r1
 800b08a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b08c:	b169      	cbz	r1, 800b0aa <__ssrefill_r+0x24>
 800b08e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b092:	4299      	cmp	r1, r3
 800b094:	d001      	beq.n	800b09a <__ssrefill_r+0x14>
 800b096:	f7ff fd7d 	bl	800ab94 <_free_r>
 800b09a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b09c:	6063      	str	r3, [r4, #4]
 800b09e:	2000      	movs	r0, #0
 800b0a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0a2:	b113      	cbz	r3, 800b0aa <__ssrefill_r+0x24>
 800b0a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	bd10      	pop	{r4, pc}
 800b0aa:	6923      	ldr	r3, [r4, #16]
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f043 0320 	orr.w	r3, r3, #32
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b0be:	e7f3      	b.n	800b0a8 <__ssrefill_r+0x22>

0800b0c0 <__ssvfiscanf_r>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b0d0:	49a6      	ldr	r1, [pc, #664]	; (800b36c <__ssvfiscanf_r+0x2ac>)
 800b0d2:	91a0      	str	r1, [sp, #640]	; 0x280
 800b0d4:	f10d 0804 	add.w	r8, sp, #4
 800b0d8:	49a5      	ldr	r1, [pc, #660]	; (800b370 <__ssvfiscanf_r+0x2b0>)
 800b0da:	4fa6      	ldr	r7, [pc, #664]	; (800b374 <__ssvfiscanf_r+0x2b4>)
 800b0dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b378 <__ssvfiscanf_r+0x2b8>
 800b0e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	91a1      	str	r1, [sp, #644]	; 0x284
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	7813      	ldrb	r3, [r2, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 815a 	beq.w	800b3a6 <__ssvfiscanf_r+0x2e6>
 800b0f2:	5dd9      	ldrb	r1, [r3, r7]
 800b0f4:	f011 0108 	ands.w	r1, r1, #8
 800b0f8:	f102 0501 	add.w	r5, r2, #1
 800b0fc:	d019      	beq.n	800b132 <__ssvfiscanf_r+0x72>
 800b0fe:	6863      	ldr	r3, [r4, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	dd0f      	ble.n	800b124 <__ssvfiscanf_r+0x64>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	781a      	ldrb	r2, [r3, #0]
 800b108:	5cba      	ldrb	r2, [r7, r2]
 800b10a:	0712      	lsls	r2, r2, #28
 800b10c:	d401      	bmi.n	800b112 <__ssvfiscanf_r+0x52>
 800b10e:	462a      	mov	r2, r5
 800b110:	e7eb      	b.n	800b0ea <__ssvfiscanf_r+0x2a>
 800b112:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b114:	3201      	adds	r2, #1
 800b116:	9245      	str	r2, [sp, #276]	; 0x114
 800b118:	6862      	ldr	r2, [r4, #4]
 800b11a:	3301      	adds	r3, #1
 800b11c:	3a01      	subs	r2, #1
 800b11e:	6062      	str	r2, [r4, #4]
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	e7ec      	b.n	800b0fe <__ssvfiscanf_r+0x3e>
 800b124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b126:	4621      	mov	r1, r4
 800b128:	4630      	mov	r0, r6
 800b12a:	4798      	blx	r3
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d0e9      	beq.n	800b104 <__ssvfiscanf_r+0x44>
 800b130:	e7ed      	b.n	800b10e <__ssvfiscanf_r+0x4e>
 800b132:	2b25      	cmp	r3, #37	; 0x25
 800b134:	d012      	beq.n	800b15c <__ssvfiscanf_r+0x9c>
 800b136:	469a      	mov	sl, r3
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f340 8091 	ble.w	800b262 <__ssvfiscanf_r+0x1a2>
 800b140:	6822      	ldr	r2, [r4, #0]
 800b142:	7813      	ldrb	r3, [r2, #0]
 800b144:	4553      	cmp	r3, sl
 800b146:	f040 812e 	bne.w	800b3a6 <__ssvfiscanf_r+0x2e6>
 800b14a:	6863      	ldr	r3, [r4, #4]
 800b14c:	3b01      	subs	r3, #1
 800b14e:	6063      	str	r3, [r4, #4]
 800b150:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b152:	3201      	adds	r2, #1
 800b154:	3301      	adds	r3, #1
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	9345      	str	r3, [sp, #276]	; 0x114
 800b15a:	e7d8      	b.n	800b10e <__ssvfiscanf_r+0x4e>
 800b15c:	9141      	str	r1, [sp, #260]	; 0x104
 800b15e:	9143      	str	r1, [sp, #268]	; 0x10c
 800b160:	7853      	ldrb	r3, [r2, #1]
 800b162:	2b2a      	cmp	r3, #42	; 0x2a
 800b164:	bf02      	ittt	eq
 800b166:	2310      	moveq	r3, #16
 800b168:	1c95      	addeq	r5, r2, #2
 800b16a:	9341      	streq	r3, [sp, #260]	; 0x104
 800b16c:	220a      	movs	r2, #10
 800b16e:	46aa      	mov	sl, r5
 800b170:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b174:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b178:	2b09      	cmp	r3, #9
 800b17a:	d91d      	bls.n	800b1b8 <__ssvfiscanf_r+0xf8>
 800b17c:	487e      	ldr	r0, [pc, #504]	; (800b378 <__ssvfiscanf_r+0x2b8>)
 800b17e:	2203      	movs	r2, #3
 800b180:	f7f5 f82e 	bl	80001e0 <memchr>
 800b184:	b140      	cbz	r0, 800b198 <__ssvfiscanf_r+0xd8>
 800b186:	2301      	movs	r3, #1
 800b188:	eba0 0009 	sub.w	r0, r0, r9
 800b18c:	fa03 f000 	lsl.w	r0, r3, r0
 800b190:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b192:	4318      	orrs	r0, r3
 800b194:	9041      	str	r0, [sp, #260]	; 0x104
 800b196:	4655      	mov	r5, sl
 800b198:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b19c:	2b78      	cmp	r3, #120	; 0x78
 800b19e:	d806      	bhi.n	800b1ae <__ssvfiscanf_r+0xee>
 800b1a0:	2b57      	cmp	r3, #87	; 0x57
 800b1a2:	d810      	bhi.n	800b1c6 <__ssvfiscanf_r+0x106>
 800b1a4:	2b25      	cmp	r3, #37	; 0x25
 800b1a6:	d0c6      	beq.n	800b136 <__ssvfiscanf_r+0x76>
 800b1a8:	d856      	bhi.n	800b258 <__ssvfiscanf_r+0x198>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d064      	beq.n	800b278 <__ssvfiscanf_r+0x1b8>
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	9347      	str	r3, [sp, #284]	; 0x11c
 800b1b2:	230a      	movs	r3, #10
 800b1b4:	9342      	str	r3, [sp, #264]	; 0x108
 800b1b6:	e071      	b.n	800b29c <__ssvfiscanf_r+0x1dc>
 800b1b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b1ba:	fb02 1103 	mla	r1, r2, r3, r1
 800b1be:	3930      	subs	r1, #48	; 0x30
 800b1c0:	9143      	str	r1, [sp, #268]	; 0x10c
 800b1c2:	4655      	mov	r5, sl
 800b1c4:	e7d3      	b.n	800b16e <__ssvfiscanf_r+0xae>
 800b1c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b1ca:	2a20      	cmp	r2, #32
 800b1cc:	d8ef      	bhi.n	800b1ae <__ssvfiscanf_r+0xee>
 800b1ce:	a101      	add	r1, pc, #4	; (adr r1, 800b1d4 <__ssvfiscanf_r+0x114>)
 800b1d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1d4:	0800b287 	.word	0x0800b287
 800b1d8:	0800b1af 	.word	0x0800b1af
 800b1dc:	0800b1af 	.word	0x0800b1af
 800b1e0:	0800b2e5 	.word	0x0800b2e5
 800b1e4:	0800b1af 	.word	0x0800b1af
 800b1e8:	0800b1af 	.word	0x0800b1af
 800b1ec:	0800b1af 	.word	0x0800b1af
 800b1f0:	0800b1af 	.word	0x0800b1af
 800b1f4:	0800b1af 	.word	0x0800b1af
 800b1f8:	0800b1af 	.word	0x0800b1af
 800b1fc:	0800b1af 	.word	0x0800b1af
 800b200:	0800b2fb 	.word	0x0800b2fb
 800b204:	0800b2d1 	.word	0x0800b2d1
 800b208:	0800b25f 	.word	0x0800b25f
 800b20c:	0800b25f 	.word	0x0800b25f
 800b210:	0800b25f 	.word	0x0800b25f
 800b214:	0800b1af 	.word	0x0800b1af
 800b218:	0800b2d5 	.word	0x0800b2d5
 800b21c:	0800b1af 	.word	0x0800b1af
 800b220:	0800b1af 	.word	0x0800b1af
 800b224:	0800b1af 	.word	0x0800b1af
 800b228:	0800b1af 	.word	0x0800b1af
 800b22c:	0800b30b 	.word	0x0800b30b
 800b230:	0800b2dd 	.word	0x0800b2dd
 800b234:	0800b27f 	.word	0x0800b27f
 800b238:	0800b1af 	.word	0x0800b1af
 800b23c:	0800b1af 	.word	0x0800b1af
 800b240:	0800b307 	.word	0x0800b307
 800b244:	0800b1af 	.word	0x0800b1af
 800b248:	0800b2d1 	.word	0x0800b2d1
 800b24c:	0800b1af 	.word	0x0800b1af
 800b250:	0800b1af 	.word	0x0800b1af
 800b254:	0800b287 	.word	0x0800b287
 800b258:	3b45      	subs	r3, #69	; 0x45
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d8a7      	bhi.n	800b1ae <__ssvfiscanf_r+0xee>
 800b25e:	2305      	movs	r3, #5
 800b260:	e01b      	b.n	800b29a <__ssvfiscanf_r+0x1da>
 800b262:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b264:	4621      	mov	r1, r4
 800b266:	4630      	mov	r0, r6
 800b268:	4798      	blx	r3
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f43f af68 	beq.w	800b140 <__ssvfiscanf_r+0x80>
 800b270:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b272:	2800      	cmp	r0, #0
 800b274:	f040 808d 	bne.w	800b392 <__ssvfiscanf_r+0x2d2>
 800b278:	f04f 30ff 	mov.w	r0, #4294967295
 800b27c:	e08f      	b.n	800b39e <__ssvfiscanf_r+0x2de>
 800b27e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b280:	f042 0220 	orr.w	r2, r2, #32
 800b284:	9241      	str	r2, [sp, #260]	; 0x104
 800b286:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b28c:	9241      	str	r2, [sp, #260]	; 0x104
 800b28e:	2210      	movs	r2, #16
 800b290:	2b6f      	cmp	r3, #111	; 0x6f
 800b292:	9242      	str	r2, [sp, #264]	; 0x108
 800b294:	bf34      	ite	cc
 800b296:	2303      	movcc	r3, #3
 800b298:	2304      	movcs	r3, #4
 800b29a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dd42      	ble.n	800b328 <__ssvfiscanf_r+0x268>
 800b2a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2a4:	0659      	lsls	r1, r3, #25
 800b2a6:	d404      	bmi.n	800b2b2 <__ssvfiscanf_r+0x1f2>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	5cba      	ldrb	r2, [r7, r2]
 800b2ae:	0712      	lsls	r2, r2, #28
 800b2b0:	d441      	bmi.n	800b336 <__ssvfiscanf_r+0x276>
 800b2b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	dc50      	bgt.n	800b35a <__ssvfiscanf_r+0x29a>
 800b2b8:	466b      	mov	r3, sp
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	a941      	add	r1, sp, #260	; 0x104
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f000 f9d0 	bl	800b664 <_scanf_chars>
 800b2c4:	2801      	cmp	r0, #1
 800b2c6:	d06e      	beq.n	800b3a6 <__ssvfiscanf_r+0x2e6>
 800b2c8:	2802      	cmp	r0, #2
 800b2ca:	f47f af20 	bne.w	800b10e <__ssvfiscanf_r+0x4e>
 800b2ce:	e7cf      	b.n	800b270 <__ssvfiscanf_r+0x1b0>
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	e7dd      	b.n	800b290 <__ssvfiscanf_r+0x1d0>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9342      	str	r3, [sp, #264]	; 0x108
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e7de      	b.n	800b29a <__ssvfiscanf_r+0x1da>
 800b2dc:	2308      	movs	r3, #8
 800b2de:	9342      	str	r3, [sp, #264]	; 0x108
 800b2e0:	2304      	movs	r3, #4
 800b2e2:	e7da      	b.n	800b29a <__ssvfiscanf_r+0x1da>
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	f000 fb3a 	bl	800b960 <__sccl>
 800b2ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f2:	9341      	str	r3, [sp, #260]	; 0x104
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e7cf      	b.n	800b29a <__ssvfiscanf_r+0x1da>
 800b2fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b300:	9341      	str	r3, [sp, #260]	; 0x104
 800b302:	2300      	movs	r3, #0
 800b304:	e7c9      	b.n	800b29a <__ssvfiscanf_r+0x1da>
 800b306:	2302      	movs	r3, #2
 800b308:	e7c7      	b.n	800b29a <__ssvfiscanf_r+0x1da>
 800b30a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b30c:	06c3      	lsls	r3, r0, #27
 800b30e:	f53f aefe 	bmi.w	800b10e <__ssvfiscanf_r+0x4e>
 800b312:	9b00      	ldr	r3, [sp, #0]
 800b314:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b316:	1d19      	adds	r1, r3, #4
 800b318:	9100      	str	r1, [sp, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f010 0f01 	tst.w	r0, #1
 800b320:	bf14      	ite	ne
 800b322:	801a      	strhne	r2, [r3, #0]
 800b324:	601a      	streq	r2, [r3, #0]
 800b326:	e6f2      	b.n	800b10e <__ssvfiscanf_r+0x4e>
 800b328:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b32a:	4621      	mov	r1, r4
 800b32c:	4630      	mov	r0, r6
 800b32e:	4798      	blx	r3
 800b330:	2800      	cmp	r0, #0
 800b332:	d0b6      	beq.n	800b2a2 <__ssvfiscanf_r+0x1e2>
 800b334:	e79c      	b.n	800b270 <__ssvfiscanf_r+0x1b0>
 800b336:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b338:	3201      	adds	r2, #1
 800b33a:	9245      	str	r2, [sp, #276]	; 0x114
 800b33c:	6862      	ldr	r2, [r4, #4]
 800b33e:	3a01      	subs	r2, #1
 800b340:	2a00      	cmp	r2, #0
 800b342:	6062      	str	r2, [r4, #4]
 800b344:	dd02      	ble.n	800b34c <__ssvfiscanf_r+0x28c>
 800b346:	3301      	adds	r3, #1
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	e7ad      	b.n	800b2a8 <__ssvfiscanf_r+0x1e8>
 800b34c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b34e:	4621      	mov	r1, r4
 800b350:	4630      	mov	r0, r6
 800b352:	4798      	blx	r3
 800b354:	2800      	cmp	r0, #0
 800b356:	d0a7      	beq.n	800b2a8 <__ssvfiscanf_r+0x1e8>
 800b358:	e78a      	b.n	800b270 <__ssvfiscanf_r+0x1b0>
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	dc0e      	bgt.n	800b37c <__ssvfiscanf_r+0x2bc>
 800b35e:	466b      	mov	r3, sp
 800b360:	4622      	mov	r2, r4
 800b362:	a941      	add	r1, sp, #260	; 0x104
 800b364:	4630      	mov	r0, r6
 800b366:	f000 f9d7 	bl	800b718 <_scanf_i>
 800b36a:	e7ab      	b.n	800b2c4 <__ssvfiscanf_r+0x204>
 800b36c:	0800b00d 	.word	0x0800b00d
 800b370:	0800b087 	.word	0x0800b087
 800b374:	0800c3a1 	.word	0x0800c3a1
 800b378:	0800c772 	.word	0x0800c772
 800b37c:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <__ssvfiscanf_r+0x2ec>)
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f43f aec5 	beq.w	800b10e <__ssvfiscanf_r+0x4e>
 800b384:	466b      	mov	r3, sp
 800b386:	4622      	mov	r2, r4
 800b388:	a941      	add	r1, sp, #260	; 0x104
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7fc f800 	bl	8007390 <_scanf_float>
 800b390:	e798      	b.n	800b2c4 <__ssvfiscanf_r+0x204>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b398:	bf18      	it	ne
 800b39a:	f04f 30ff 	movne.w	r0, #4294967295
 800b39e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b3a8:	e7f9      	b.n	800b39e <__ssvfiscanf_r+0x2de>
 800b3aa:	bf00      	nop
 800b3ac:	08007391 	.word	0x08007391

0800b3b0 <__sfputc_r>:
 800b3b0:	6893      	ldr	r3, [r2, #8]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	b410      	push	{r4}
 800b3b8:	6093      	str	r3, [r2, #8]
 800b3ba:	da08      	bge.n	800b3ce <__sfputc_r+0x1e>
 800b3bc:	6994      	ldr	r4, [r2, #24]
 800b3be:	42a3      	cmp	r3, r4
 800b3c0:	db01      	blt.n	800b3c6 <__sfputc_r+0x16>
 800b3c2:	290a      	cmp	r1, #10
 800b3c4:	d103      	bne.n	800b3ce <__sfputc_r+0x1e>
 800b3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ca:	f7fd b9ed 	b.w	80087a8 <__swbuf_r>
 800b3ce:	6813      	ldr	r3, [r2, #0]
 800b3d0:	1c58      	adds	r0, r3, #1
 800b3d2:	6010      	str	r0, [r2, #0]
 800b3d4:	7019      	strb	r1, [r3, #0]
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <__sfputs_r>:
 800b3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	460f      	mov	r7, r1
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	18d5      	adds	r5, r2, r3
 800b3e8:	42ac      	cmp	r4, r5
 800b3ea:	d101      	bne.n	800b3f0 <__sfputs_r+0x12>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e007      	b.n	800b400 <__sfputs_r+0x22>
 800b3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f4:	463a      	mov	r2, r7
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ffda 	bl	800b3b0 <__sfputc_r>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d1f3      	bne.n	800b3e8 <__sfputs_r+0xa>
 800b400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b404 <_vfiprintf_r>:
 800b404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	460d      	mov	r5, r1
 800b40a:	b09d      	sub	sp, #116	; 0x74
 800b40c:	4614      	mov	r4, r2
 800b40e:	4698      	mov	r8, r3
 800b410:	4606      	mov	r6, r0
 800b412:	b118      	cbz	r0, 800b41c <_vfiprintf_r+0x18>
 800b414:	6983      	ldr	r3, [r0, #24]
 800b416:	b90b      	cbnz	r3, 800b41c <_vfiprintf_r+0x18>
 800b418:	f7fe fa3e 	bl	8009898 <__sinit>
 800b41c:	4b89      	ldr	r3, [pc, #548]	; (800b644 <_vfiprintf_r+0x240>)
 800b41e:	429d      	cmp	r5, r3
 800b420:	d11b      	bne.n	800b45a <_vfiprintf_r+0x56>
 800b422:	6875      	ldr	r5, [r6, #4]
 800b424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b426:	07d9      	lsls	r1, r3, #31
 800b428:	d405      	bmi.n	800b436 <_vfiprintf_r+0x32>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	059a      	lsls	r2, r3, #22
 800b42e:	d402      	bmi.n	800b436 <_vfiprintf_r+0x32>
 800b430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b432:	f7fe fe42 	bl	800a0ba <__retarget_lock_acquire_recursive>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	071b      	lsls	r3, r3, #28
 800b43a:	d501      	bpl.n	800b440 <_vfiprintf_r+0x3c>
 800b43c:	692b      	ldr	r3, [r5, #16]
 800b43e:	b9eb      	cbnz	r3, 800b47c <_vfiprintf_r+0x78>
 800b440:	4629      	mov	r1, r5
 800b442:	4630      	mov	r0, r6
 800b444:	f7fd fa14 	bl	8008870 <__swsetup_r>
 800b448:	b1c0      	cbz	r0, 800b47c <_vfiprintf_r+0x78>
 800b44a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b44c:	07dc      	lsls	r4, r3, #31
 800b44e:	d50e      	bpl.n	800b46e <_vfiprintf_r+0x6a>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	b01d      	add	sp, #116	; 0x74
 800b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	4b7b      	ldr	r3, [pc, #492]	; (800b648 <_vfiprintf_r+0x244>)
 800b45c:	429d      	cmp	r5, r3
 800b45e:	d101      	bne.n	800b464 <_vfiprintf_r+0x60>
 800b460:	68b5      	ldr	r5, [r6, #8]
 800b462:	e7df      	b.n	800b424 <_vfiprintf_r+0x20>
 800b464:	4b79      	ldr	r3, [pc, #484]	; (800b64c <_vfiprintf_r+0x248>)
 800b466:	429d      	cmp	r5, r3
 800b468:	bf08      	it	eq
 800b46a:	68f5      	ldreq	r5, [r6, #12]
 800b46c:	e7da      	b.n	800b424 <_vfiprintf_r+0x20>
 800b46e:	89ab      	ldrh	r3, [r5, #12]
 800b470:	0598      	lsls	r0, r3, #22
 800b472:	d4ed      	bmi.n	800b450 <_vfiprintf_r+0x4c>
 800b474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b476:	f7fe fe21 	bl	800a0bc <__retarget_lock_release_recursive>
 800b47a:	e7e9      	b.n	800b450 <_vfiprintf_r+0x4c>
 800b47c:	2300      	movs	r3, #0
 800b47e:	9309      	str	r3, [sp, #36]	; 0x24
 800b480:	2320      	movs	r3, #32
 800b482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b486:	f8cd 800c 	str.w	r8, [sp, #12]
 800b48a:	2330      	movs	r3, #48	; 0x30
 800b48c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b650 <_vfiprintf_r+0x24c>
 800b490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b494:	f04f 0901 	mov.w	r9, #1
 800b498:	4623      	mov	r3, r4
 800b49a:	469a      	mov	sl, r3
 800b49c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a0:	b10a      	cbz	r2, 800b4a6 <_vfiprintf_r+0xa2>
 800b4a2:	2a25      	cmp	r2, #37	; 0x25
 800b4a4:	d1f9      	bne.n	800b49a <_vfiprintf_r+0x96>
 800b4a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4aa:	d00b      	beq.n	800b4c4 <_vfiprintf_r+0xc0>
 800b4ac:	465b      	mov	r3, fp
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f7ff ff93 	bl	800b3de <__sfputs_r>
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	f000 80aa 	beq.w	800b612 <_vfiprintf_r+0x20e>
 800b4be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c0:	445a      	add	r2, fp
 800b4c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 80a2 	beq.w	800b612 <_vfiprintf_r+0x20e>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d8:	f10a 0a01 	add.w	sl, sl, #1
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	9307      	str	r3, [sp, #28]
 800b4e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e6:	4654      	mov	r4, sl
 800b4e8:	2205      	movs	r2, #5
 800b4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ee:	4858      	ldr	r0, [pc, #352]	; (800b650 <_vfiprintf_r+0x24c>)
 800b4f0:	f7f4 fe76 	bl	80001e0 <memchr>
 800b4f4:	9a04      	ldr	r2, [sp, #16]
 800b4f6:	b9d8      	cbnz	r0, 800b530 <_vfiprintf_r+0x12c>
 800b4f8:	06d1      	lsls	r1, r2, #27
 800b4fa:	bf44      	itt	mi
 800b4fc:	2320      	movmi	r3, #32
 800b4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b502:	0713      	lsls	r3, r2, #28
 800b504:	bf44      	itt	mi
 800b506:	232b      	movmi	r3, #43	; 0x2b
 800b508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50c:	f89a 3000 	ldrb.w	r3, [sl]
 800b510:	2b2a      	cmp	r3, #42	; 0x2a
 800b512:	d015      	beq.n	800b540 <_vfiprintf_r+0x13c>
 800b514:	9a07      	ldr	r2, [sp, #28]
 800b516:	4654      	mov	r4, sl
 800b518:	2000      	movs	r0, #0
 800b51a:	f04f 0c0a 	mov.w	ip, #10
 800b51e:	4621      	mov	r1, r4
 800b520:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b524:	3b30      	subs	r3, #48	; 0x30
 800b526:	2b09      	cmp	r3, #9
 800b528:	d94e      	bls.n	800b5c8 <_vfiprintf_r+0x1c4>
 800b52a:	b1b0      	cbz	r0, 800b55a <_vfiprintf_r+0x156>
 800b52c:	9207      	str	r2, [sp, #28]
 800b52e:	e014      	b.n	800b55a <_vfiprintf_r+0x156>
 800b530:	eba0 0308 	sub.w	r3, r0, r8
 800b534:	fa09 f303 	lsl.w	r3, r9, r3
 800b538:	4313      	orrs	r3, r2
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	46a2      	mov	sl, r4
 800b53e:	e7d2      	b.n	800b4e6 <_vfiprintf_r+0xe2>
 800b540:	9b03      	ldr	r3, [sp, #12]
 800b542:	1d19      	adds	r1, r3, #4
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	9103      	str	r1, [sp, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	bfbb      	ittet	lt
 800b54c:	425b      	neglt	r3, r3
 800b54e:	f042 0202 	orrlt.w	r2, r2, #2
 800b552:	9307      	strge	r3, [sp, #28]
 800b554:	9307      	strlt	r3, [sp, #28]
 800b556:	bfb8      	it	lt
 800b558:	9204      	strlt	r2, [sp, #16]
 800b55a:	7823      	ldrb	r3, [r4, #0]
 800b55c:	2b2e      	cmp	r3, #46	; 0x2e
 800b55e:	d10c      	bne.n	800b57a <_vfiprintf_r+0x176>
 800b560:	7863      	ldrb	r3, [r4, #1]
 800b562:	2b2a      	cmp	r3, #42	; 0x2a
 800b564:	d135      	bne.n	800b5d2 <_vfiprintf_r+0x1ce>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	1d1a      	adds	r2, r3, #4
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	9203      	str	r2, [sp, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bfb8      	it	lt
 800b572:	f04f 33ff 	movlt.w	r3, #4294967295
 800b576:	3402      	adds	r4, #2
 800b578:	9305      	str	r3, [sp, #20]
 800b57a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b660 <_vfiprintf_r+0x25c>
 800b57e:	7821      	ldrb	r1, [r4, #0]
 800b580:	2203      	movs	r2, #3
 800b582:	4650      	mov	r0, sl
 800b584:	f7f4 fe2c 	bl	80001e0 <memchr>
 800b588:	b140      	cbz	r0, 800b59c <_vfiprintf_r+0x198>
 800b58a:	2340      	movs	r3, #64	; 0x40
 800b58c:	eba0 000a 	sub.w	r0, r0, sl
 800b590:	fa03 f000 	lsl.w	r0, r3, r0
 800b594:	9b04      	ldr	r3, [sp, #16]
 800b596:	4303      	orrs	r3, r0
 800b598:	3401      	adds	r4, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a0:	482c      	ldr	r0, [pc, #176]	; (800b654 <_vfiprintf_r+0x250>)
 800b5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	f7f4 fe1a 	bl	80001e0 <memchr>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d03f      	beq.n	800b630 <_vfiprintf_r+0x22c>
 800b5b0:	4b29      	ldr	r3, [pc, #164]	; (800b658 <_vfiprintf_r+0x254>)
 800b5b2:	bb1b      	cbnz	r3, 800b5fc <_vfiprintf_r+0x1f8>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	3307      	adds	r3, #7
 800b5b8:	f023 0307 	bic.w	r3, r3, #7
 800b5bc:	3308      	adds	r3, #8
 800b5be:	9303      	str	r3, [sp, #12]
 800b5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c2:	443b      	add	r3, r7
 800b5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c6:	e767      	b.n	800b498 <_vfiprintf_r+0x94>
 800b5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	e7a5      	b.n	800b51e <_vfiprintf_r+0x11a>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	3401      	adds	r4, #1
 800b5d6:	9305      	str	r3, [sp, #20]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f04f 0c0a 	mov.w	ip, #10
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e4:	3a30      	subs	r2, #48	; 0x30
 800b5e6:	2a09      	cmp	r2, #9
 800b5e8:	d903      	bls.n	800b5f2 <_vfiprintf_r+0x1ee>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0c5      	beq.n	800b57a <_vfiprintf_r+0x176>
 800b5ee:	9105      	str	r1, [sp, #20]
 800b5f0:	e7c3      	b.n	800b57a <_vfiprintf_r+0x176>
 800b5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e7f0      	b.n	800b5de <_vfiprintf_r+0x1da>
 800b5fc:	ab03      	add	r3, sp, #12
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	462a      	mov	r2, r5
 800b602:	4b16      	ldr	r3, [pc, #88]	; (800b65c <_vfiprintf_r+0x258>)
 800b604:	a904      	add	r1, sp, #16
 800b606:	4630      	mov	r0, r6
 800b608:	f7fb faf8 	bl	8006bfc <_printf_float>
 800b60c:	4607      	mov	r7, r0
 800b60e:	1c78      	adds	r0, r7, #1
 800b610:	d1d6      	bne.n	800b5c0 <_vfiprintf_r+0x1bc>
 800b612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b614:	07d9      	lsls	r1, r3, #31
 800b616:	d405      	bmi.n	800b624 <_vfiprintf_r+0x220>
 800b618:	89ab      	ldrh	r3, [r5, #12]
 800b61a:	059a      	lsls	r2, r3, #22
 800b61c:	d402      	bmi.n	800b624 <_vfiprintf_r+0x220>
 800b61e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b620:	f7fe fd4c 	bl	800a0bc <__retarget_lock_release_recursive>
 800b624:	89ab      	ldrh	r3, [r5, #12]
 800b626:	065b      	lsls	r3, r3, #25
 800b628:	f53f af12 	bmi.w	800b450 <_vfiprintf_r+0x4c>
 800b62c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b62e:	e711      	b.n	800b454 <_vfiprintf_r+0x50>
 800b630:	ab03      	add	r3, sp, #12
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	462a      	mov	r2, r5
 800b636:	4b09      	ldr	r3, [pc, #36]	; (800b65c <_vfiprintf_r+0x258>)
 800b638:	a904      	add	r1, sp, #16
 800b63a:	4630      	mov	r0, r6
 800b63c:	f7fb fd82 	bl	8007144 <_printf_i>
 800b640:	e7e4      	b.n	800b60c <_vfiprintf_r+0x208>
 800b642:	bf00      	nop
 800b644:	0800c554 	.word	0x0800c554
 800b648:	0800c574 	.word	0x0800c574
 800b64c:	0800c534 	.word	0x0800c534
 800b650:	0800c76c 	.word	0x0800c76c
 800b654:	0800c776 	.word	0x0800c776
 800b658:	08006bfd 	.word	0x08006bfd
 800b65c:	0800b3df 	.word	0x0800b3df
 800b660:	0800c772 	.word	0x0800c772

0800b664 <_scanf_chars>:
 800b664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b668:	4615      	mov	r5, r2
 800b66a:	688a      	ldr	r2, [r1, #8]
 800b66c:	4680      	mov	r8, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	b932      	cbnz	r2, 800b680 <_scanf_chars+0x1c>
 800b672:	698a      	ldr	r2, [r1, #24]
 800b674:	2a00      	cmp	r2, #0
 800b676:	bf0c      	ite	eq
 800b678:	2201      	moveq	r2, #1
 800b67a:	f04f 32ff 	movne.w	r2, #4294967295
 800b67e:	608a      	str	r2, [r1, #8]
 800b680:	6822      	ldr	r2, [r4, #0]
 800b682:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b714 <_scanf_chars+0xb0>
 800b686:	06d1      	lsls	r1, r2, #27
 800b688:	bf5f      	itttt	pl
 800b68a:	681a      	ldrpl	r2, [r3, #0]
 800b68c:	1d11      	addpl	r1, r2, #4
 800b68e:	6019      	strpl	r1, [r3, #0]
 800b690:	6816      	ldrpl	r6, [r2, #0]
 800b692:	2700      	movs	r7, #0
 800b694:	69a0      	ldr	r0, [r4, #24]
 800b696:	b188      	cbz	r0, 800b6bc <_scanf_chars+0x58>
 800b698:	2801      	cmp	r0, #1
 800b69a:	d107      	bne.n	800b6ac <_scanf_chars+0x48>
 800b69c:	682a      	ldr	r2, [r5, #0]
 800b69e:	7811      	ldrb	r1, [r2, #0]
 800b6a0:	6962      	ldr	r2, [r4, #20]
 800b6a2:	5c52      	ldrb	r2, [r2, r1]
 800b6a4:	b952      	cbnz	r2, 800b6bc <_scanf_chars+0x58>
 800b6a6:	2f00      	cmp	r7, #0
 800b6a8:	d031      	beq.n	800b70e <_scanf_chars+0xaa>
 800b6aa:	e022      	b.n	800b6f2 <_scanf_chars+0x8e>
 800b6ac:	2802      	cmp	r0, #2
 800b6ae:	d120      	bne.n	800b6f2 <_scanf_chars+0x8e>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b6b8:	071b      	lsls	r3, r3, #28
 800b6ba:	d41a      	bmi.n	800b6f2 <_scanf_chars+0x8e>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	06da      	lsls	r2, r3, #27
 800b6c0:	bf5e      	ittt	pl
 800b6c2:	682b      	ldrpl	r3, [r5, #0]
 800b6c4:	781b      	ldrbpl	r3, [r3, #0]
 800b6c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b6ca:	682a      	ldr	r2, [r5, #0]
 800b6cc:	686b      	ldr	r3, [r5, #4]
 800b6ce:	3201      	adds	r2, #1
 800b6d0:	602a      	str	r2, [r5, #0]
 800b6d2:	68a2      	ldr	r2, [r4, #8]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	3a01      	subs	r2, #1
 800b6d8:	606b      	str	r3, [r5, #4]
 800b6da:	3701      	adds	r7, #1
 800b6dc:	60a2      	str	r2, [r4, #8]
 800b6de:	b142      	cbz	r2, 800b6f2 <_scanf_chars+0x8e>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dcd7      	bgt.n	800b694 <_scanf_chars+0x30>
 800b6e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4798      	blx	r3
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d0d0      	beq.n	800b694 <_scanf_chars+0x30>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	f013 0310 	ands.w	r3, r3, #16
 800b6f8:	d105      	bne.n	800b706 <_scanf_chars+0xa2>
 800b6fa:	68e2      	ldr	r2, [r4, #12]
 800b6fc:	3201      	adds	r2, #1
 800b6fe:	60e2      	str	r2, [r4, #12]
 800b700:	69a2      	ldr	r2, [r4, #24]
 800b702:	b102      	cbz	r2, 800b706 <_scanf_chars+0xa2>
 800b704:	7033      	strb	r3, [r6, #0]
 800b706:	6923      	ldr	r3, [r4, #16]
 800b708:	443b      	add	r3, r7
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	2000      	movs	r0, #0
 800b70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b712:	bf00      	nop
 800b714:	0800c3a1 	.word	0x0800c3a1

0800b718 <_scanf_i>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	4698      	mov	r8, r3
 800b71e:	4b76      	ldr	r3, [pc, #472]	; (800b8f8 <_scanf_i+0x1e0>)
 800b720:	460c      	mov	r4, r1
 800b722:	4682      	mov	sl, r0
 800b724:	4616      	mov	r6, r2
 800b726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b72a:	b087      	sub	sp, #28
 800b72c:	ab03      	add	r3, sp, #12
 800b72e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b732:	4b72      	ldr	r3, [pc, #456]	; (800b8fc <_scanf_i+0x1e4>)
 800b734:	69a1      	ldr	r1, [r4, #24]
 800b736:	4a72      	ldr	r2, [pc, #456]	; (800b900 <_scanf_i+0x1e8>)
 800b738:	2903      	cmp	r1, #3
 800b73a:	bf18      	it	ne
 800b73c:	461a      	movne	r2, r3
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	9201      	str	r2, [sp, #4]
 800b742:	1e5a      	subs	r2, r3, #1
 800b744:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b748:	bf88      	it	hi
 800b74a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b74e:	4627      	mov	r7, r4
 800b750:	bf82      	ittt	hi
 800b752:	eb03 0905 	addhi.w	r9, r3, r5
 800b756:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b75a:	60a3      	strhi	r3, [r4, #8]
 800b75c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b760:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b764:	bf98      	it	ls
 800b766:	f04f 0900 	movls.w	r9, #0
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	463d      	mov	r5, r7
 800b76e:	f04f 0b00 	mov.w	fp, #0
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	ab03      	add	r3, sp, #12
 800b776:	7809      	ldrb	r1, [r1, #0]
 800b778:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b77c:	2202      	movs	r2, #2
 800b77e:	f7f4 fd2f 	bl	80001e0 <memchr>
 800b782:	b328      	cbz	r0, 800b7d0 <_scanf_i+0xb8>
 800b784:	f1bb 0f01 	cmp.w	fp, #1
 800b788:	d159      	bne.n	800b83e <_scanf_i+0x126>
 800b78a:	6862      	ldr	r2, [r4, #4]
 800b78c:	b92a      	cbnz	r2, 800b79a <_scanf_i+0x82>
 800b78e:	6822      	ldr	r2, [r4, #0]
 800b790:	2308      	movs	r3, #8
 800b792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b796:	6063      	str	r3, [r4, #4]
 800b798:	6022      	str	r2, [r4, #0]
 800b79a:	6822      	ldr	r2, [r4, #0]
 800b79c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b7a0:	6022      	str	r2, [r4, #0]
 800b7a2:	68a2      	ldr	r2, [r4, #8]
 800b7a4:	1e51      	subs	r1, r2, #1
 800b7a6:	60a1      	str	r1, [r4, #8]
 800b7a8:	b192      	cbz	r2, 800b7d0 <_scanf_i+0xb8>
 800b7aa:	6832      	ldr	r2, [r6, #0]
 800b7ac:	1c51      	adds	r1, r2, #1
 800b7ae:	6031      	str	r1, [r6, #0]
 800b7b0:	7812      	ldrb	r2, [r2, #0]
 800b7b2:	f805 2b01 	strb.w	r2, [r5], #1
 800b7b6:	6872      	ldr	r2, [r6, #4]
 800b7b8:	3a01      	subs	r2, #1
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	6072      	str	r2, [r6, #4]
 800b7be:	dc07      	bgt.n	800b7d0 <_scanf_i+0xb8>
 800b7c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	4790      	blx	r2
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	f040 8085 	bne.w	800b8da <_scanf_i+0x1c2>
 800b7d0:	f10b 0b01 	add.w	fp, fp, #1
 800b7d4:	f1bb 0f03 	cmp.w	fp, #3
 800b7d8:	d1cb      	bne.n	800b772 <_scanf_i+0x5a>
 800b7da:	6863      	ldr	r3, [r4, #4]
 800b7dc:	b90b      	cbnz	r3, 800b7e2 <_scanf_i+0xca>
 800b7de:	230a      	movs	r3, #10
 800b7e0:	6063      	str	r3, [r4, #4]
 800b7e2:	6863      	ldr	r3, [r4, #4]
 800b7e4:	4947      	ldr	r1, [pc, #284]	; (800b904 <_scanf_i+0x1ec>)
 800b7e6:	6960      	ldr	r0, [r4, #20]
 800b7e8:	1ac9      	subs	r1, r1, r3
 800b7ea:	f000 f8b9 	bl	800b960 <__sccl>
 800b7ee:	f04f 0b00 	mov.w	fp, #0
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	6822      	ldr	r2, [r4, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d03d      	beq.n	800b876 <_scanf_i+0x15e>
 800b7fa:	6831      	ldr	r1, [r6, #0]
 800b7fc:	6960      	ldr	r0, [r4, #20]
 800b7fe:	f891 c000 	ldrb.w	ip, [r1]
 800b802:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b806:	2800      	cmp	r0, #0
 800b808:	d035      	beq.n	800b876 <_scanf_i+0x15e>
 800b80a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b80e:	d124      	bne.n	800b85a <_scanf_i+0x142>
 800b810:	0510      	lsls	r0, r2, #20
 800b812:	d522      	bpl.n	800b85a <_scanf_i+0x142>
 800b814:	f10b 0b01 	add.w	fp, fp, #1
 800b818:	f1b9 0f00 	cmp.w	r9, #0
 800b81c:	d003      	beq.n	800b826 <_scanf_i+0x10e>
 800b81e:	3301      	adds	r3, #1
 800b820:	f109 39ff 	add.w	r9, r9, #4294967295
 800b824:	60a3      	str	r3, [r4, #8]
 800b826:	6873      	ldr	r3, [r6, #4]
 800b828:	3b01      	subs	r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	6073      	str	r3, [r6, #4]
 800b82e:	dd1b      	ble.n	800b868 <_scanf_i+0x150>
 800b830:	6833      	ldr	r3, [r6, #0]
 800b832:	3301      	adds	r3, #1
 800b834:	6033      	str	r3, [r6, #0]
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	3b01      	subs	r3, #1
 800b83a:	60a3      	str	r3, [r4, #8]
 800b83c:	e7d9      	b.n	800b7f2 <_scanf_i+0xda>
 800b83e:	f1bb 0f02 	cmp.w	fp, #2
 800b842:	d1ae      	bne.n	800b7a2 <_scanf_i+0x8a>
 800b844:	6822      	ldr	r2, [r4, #0]
 800b846:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b84a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b84e:	d1bf      	bne.n	800b7d0 <_scanf_i+0xb8>
 800b850:	2310      	movs	r3, #16
 800b852:	6063      	str	r3, [r4, #4]
 800b854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b858:	e7a2      	b.n	800b7a0 <_scanf_i+0x88>
 800b85a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b85e:	6022      	str	r2, [r4, #0]
 800b860:	780b      	ldrb	r3, [r1, #0]
 800b862:	f805 3b01 	strb.w	r3, [r5], #1
 800b866:	e7de      	b.n	800b826 <_scanf_i+0x10e>
 800b868:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b86c:	4631      	mov	r1, r6
 800b86e:	4650      	mov	r0, sl
 800b870:	4798      	blx	r3
 800b872:	2800      	cmp	r0, #0
 800b874:	d0df      	beq.n	800b836 <_scanf_i+0x11e>
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	05db      	lsls	r3, r3, #23
 800b87a:	d50d      	bpl.n	800b898 <_scanf_i+0x180>
 800b87c:	42bd      	cmp	r5, r7
 800b87e:	d909      	bls.n	800b894 <_scanf_i+0x17c>
 800b880:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b888:	4632      	mov	r2, r6
 800b88a:	4650      	mov	r0, sl
 800b88c:	4798      	blx	r3
 800b88e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b892:	464d      	mov	r5, r9
 800b894:	42bd      	cmp	r5, r7
 800b896:	d02d      	beq.n	800b8f4 <_scanf_i+0x1dc>
 800b898:	6822      	ldr	r2, [r4, #0]
 800b89a:	f012 0210 	ands.w	r2, r2, #16
 800b89e:	d113      	bne.n	800b8c8 <_scanf_i+0x1b0>
 800b8a0:	702a      	strb	r2, [r5, #0]
 800b8a2:	6863      	ldr	r3, [r4, #4]
 800b8a4:	9e01      	ldr	r6, [sp, #4]
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	47b0      	blx	r6
 800b8ac:	6821      	ldr	r1, [r4, #0]
 800b8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b8b2:	f011 0f20 	tst.w	r1, #32
 800b8b6:	d013      	beq.n	800b8e0 <_scanf_i+0x1c8>
 800b8b8:	1d1a      	adds	r2, r3, #4
 800b8ba:	f8c8 2000 	str.w	r2, [r8]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6018      	str	r0, [r3, #0]
 800b8c2:	68e3      	ldr	r3, [r4, #12]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	60e3      	str	r3, [r4, #12]
 800b8c8:	1bed      	subs	r5, r5, r7
 800b8ca:	44ab      	add	fp, r5
 800b8cc:	6925      	ldr	r5, [r4, #16]
 800b8ce:	445d      	add	r5, fp
 800b8d0:	6125      	str	r5, [r4, #16]
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	b007      	add	sp, #28
 800b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8da:	f04f 0b00 	mov.w	fp, #0
 800b8de:	e7ca      	b.n	800b876 <_scanf_i+0x15e>
 800b8e0:	1d1a      	adds	r2, r3, #4
 800b8e2:	f8c8 2000 	str.w	r2, [r8]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f011 0f01 	tst.w	r1, #1
 800b8ec:	bf14      	ite	ne
 800b8ee:	8018      	strhne	r0, [r3, #0]
 800b8f0:	6018      	streq	r0, [r3, #0]
 800b8f2:	e7e6      	b.n	800b8c2 <_scanf_i+0x1aa>
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	e7ed      	b.n	800b8d4 <_scanf_i+0x1bc>
 800b8f8:	0800c2c0 	.word	0x0800c2c0
 800b8fc:	0800bab5 	.word	0x0800bab5
 800b900:	080087a5 	.word	0x080087a5
 800b904:	0800c796 	.word	0x0800c796

0800b908 <_read_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_read_r+0x20>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	2200      	movs	r2, #0
 800b914:	602a      	str	r2, [r5, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f7f7 f95c 	bl	8002bd4 <_read>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_read_r+0x1e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_read_r+0x1e>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	20000de4 	.word	0x20000de4
 800b92c:	00000000 	.word	0x00000000

0800b930 <nan>:
 800b930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b938 <nan+0x8>
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	00000000 	.word	0x00000000
 800b93c:	7ff80000 	.word	0x7ff80000

0800b940 <_sbrk_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d06      	ldr	r5, [pc, #24]	; (800b95c <_sbrk_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	f7f7 f994 	bl	8002c78 <_sbrk>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_sbrk_r+0x1a>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_sbrk_r+0x1a>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	20000de4 	.word	0x20000de4

0800b960 <__sccl>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	780b      	ldrb	r3, [r1, #0]
 800b964:	4604      	mov	r4, r0
 800b966:	2b5e      	cmp	r3, #94	; 0x5e
 800b968:	bf0b      	itete	eq
 800b96a:	784b      	ldrbeq	r3, [r1, #1]
 800b96c:	1c48      	addne	r0, r1, #1
 800b96e:	1c88      	addeq	r0, r1, #2
 800b970:	2200      	movne	r2, #0
 800b972:	bf08      	it	eq
 800b974:	2201      	moveq	r2, #1
 800b976:	1e61      	subs	r1, r4, #1
 800b978:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b97c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b980:	42a9      	cmp	r1, r5
 800b982:	d1fb      	bne.n	800b97c <__sccl+0x1c>
 800b984:	b90b      	cbnz	r3, 800b98a <__sccl+0x2a>
 800b986:	3801      	subs	r0, #1
 800b988:	bd70      	pop	{r4, r5, r6, pc}
 800b98a:	f082 0201 	eor.w	r2, r2, #1
 800b98e:	54e2      	strb	r2, [r4, r3]
 800b990:	4605      	mov	r5, r0
 800b992:	4628      	mov	r0, r5
 800b994:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b998:	292d      	cmp	r1, #45	; 0x2d
 800b99a:	d006      	beq.n	800b9aa <__sccl+0x4a>
 800b99c:	295d      	cmp	r1, #93	; 0x5d
 800b99e:	d0f3      	beq.n	800b988 <__sccl+0x28>
 800b9a0:	b909      	cbnz	r1, 800b9a6 <__sccl+0x46>
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	e7f0      	b.n	800b988 <__sccl+0x28>
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	e7f1      	b.n	800b98e <__sccl+0x2e>
 800b9aa:	786e      	ldrb	r6, [r5, #1]
 800b9ac:	2e5d      	cmp	r6, #93	; 0x5d
 800b9ae:	d0fa      	beq.n	800b9a6 <__sccl+0x46>
 800b9b0:	42b3      	cmp	r3, r6
 800b9b2:	dcf8      	bgt.n	800b9a6 <__sccl+0x46>
 800b9b4:	3502      	adds	r5, #2
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	3101      	adds	r1, #1
 800b9ba:	428e      	cmp	r6, r1
 800b9bc:	5462      	strb	r2, [r4, r1]
 800b9be:	dcfb      	bgt.n	800b9b8 <__sccl+0x58>
 800b9c0:	1af1      	subs	r1, r6, r3
 800b9c2:	3901      	subs	r1, #1
 800b9c4:	1c58      	adds	r0, r3, #1
 800b9c6:	42b3      	cmp	r3, r6
 800b9c8:	bfa8      	it	ge
 800b9ca:	2100      	movge	r1, #0
 800b9cc:	1843      	adds	r3, r0, r1
 800b9ce:	e7e0      	b.n	800b992 <__sccl+0x32>

0800b9d0 <_strtoul_l.constprop.0>:
 800b9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9d4:	4f36      	ldr	r7, [pc, #216]	; (800bab0 <_strtoul_l.constprop.0+0xe0>)
 800b9d6:	4686      	mov	lr, r0
 800b9d8:	460d      	mov	r5, r1
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9e0:	5de6      	ldrb	r6, [r4, r7]
 800b9e2:	f016 0608 	ands.w	r6, r6, #8
 800b9e6:	d1f8      	bne.n	800b9da <_strtoul_l.constprop.0+0xa>
 800b9e8:	2c2d      	cmp	r4, #45	; 0x2d
 800b9ea:	d12f      	bne.n	800ba4c <_strtoul_l.constprop.0+0x7c>
 800b9ec:	782c      	ldrb	r4, [r5, #0]
 800b9ee:	2601      	movs	r6, #1
 800b9f0:	1c85      	adds	r5, r0, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d057      	beq.n	800baa6 <_strtoul_l.constprop.0+0xd6>
 800b9f6:	2b10      	cmp	r3, #16
 800b9f8:	d109      	bne.n	800ba0e <_strtoul_l.constprop.0+0x3e>
 800b9fa:	2c30      	cmp	r4, #48	; 0x30
 800b9fc:	d107      	bne.n	800ba0e <_strtoul_l.constprop.0+0x3e>
 800b9fe:	7828      	ldrb	r0, [r5, #0]
 800ba00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba04:	2858      	cmp	r0, #88	; 0x58
 800ba06:	d149      	bne.n	800ba9c <_strtoul_l.constprop.0+0xcc>
 800ba08:	786c      	ldrb	r4, [r5, #1]
 800ba0a:	2310      	movs	r3, #16
 800ba0c:	3502      	adds	r5, #2
 800ba0e:	f04f 38ff 	mov.w	r8, #4294967295
 800ba12:	2700      	movs	r7, #0
 800ba14:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba18:	fb03 f908 	mul.w	r9, r3, r8
 800ba1c:	ea6f 0909 	mvn.w	r9, r9
 800ba20:	4638      	mov	r0, r7
 800ba22:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba26:	f1bc 0f09 	cmp.w	ip, #9
 800ba2a:	d814      	bhi.n	800ba56 <_strtoul_l.constprop.0+0x86>
 800ba2c:	4664      	mov	r4, ip
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	dd22      	ble.n	800ba78 <_strtoul_l.constprop.0+0xa8>
 800ba32:	2f00      	cmp	r7, #0
 800ba34:	db1d      	blt.n	800ba72 <_strtoul_l.constprop.0+0xa2>
 800ba36:	4580      	cmp	r8, r0
 800ba38:	d31b      	bcc.n	800ba72 <_strtoul_l.constprop.0+0xa2>
 800ba3a:	d101      	bne.n	800ba40 <_strtoul_l.constprop.0+0x70>
 800ba3c:	45a1      	cmp	r9, r4
 800ba3e:	db18      	blt.n	800ba72 <_strtoul_l.constprop.0+0xa2>
 800ba40:	fb00 4003 	mla	r0, r0, r3, r4
 800ba44:	2701      	movs	r7, #1
 800ba46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba4a:	e7ea      	b.n	800ba22 <_strtoul_l.constprop.0+0x52>
 800ba4c:	2c2b      	cmp	r4, #43	; 0x2b
 800ba4e:	bf04      	itt	eq
 800ba50:	782c      	ldrbeq	r4, [r5, #0]
 800ba52:	1c85      	addeq	r5, r0, #2
 800ba54:	e7cd      	b.n	800b9f2 <_strtoul_l.constprop.0+0x22>
 800ba56:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba5a:	f1bc 0f19 	cmp.w	ip, #25
 800ba5e:	d801      	bhi.n	800ba64 <_strtoul_l.constprop.0+0x94>
 800ba60:	3c37      	subs	r4, #55	; 0x37
 800ba62:	e7e4      	b.n	800ba2e <_strtoul_l.constprop.0+0x5e>
 800ba64:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba68:	f1bc 0f19 	cmp.w	ip, #25
 800ba6c:	d804      	bhi.n	800ba78 <_strtoul_l.constprop.0+0xa8>
 800ba6e:	3c57      	subs	r4, #87	; 0x57
 800ba70:	e7dd      	b.n	800ba2e <_strtoul_l.constprop.0+0x5e>
 800ba72:	f04f 37ff 	mov.w	r7, #4294967295
 800ba76:	e7e6      	b.n	800ba46 <_strtoul_l.constprop.0+0x76>
 800ba78:	2f00      	cmp	r7, #0
 800ba7a:	da07      	bge.n	800ba8c <_strtoul_l.constprop.0+0xbc>
 800ba7c:	2322      	movs	r3, #34	; 0x22
 800ba7e:	f8ce 3000 	str.w	r3, [lr]
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	b932      	cbnz	r2, 800ba96 <_strtoul_l.constprop.0+0xc6>
 800ba88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba8c:	b106      	cbz	r6, 800ba90 <_strtoul_l.constprop.0+0xc0>
 800ba8e:	4240      	negs	r0, r0
 800ba90:	2a00      	cmp	r2, #0
 800ba92:	d0f9      	beq.n	800ba88 <_strtoul_l.constprop.0+0xb8>
 800ba94:	b107      	cbz	r7, 800ba98 <_strtoul_l.constprop.0+0xc8>
 800ba96:	1e69      	subs	r1, r5, #1
 800ba98:	6011      	str	r1, [r2, #0]
 800ba9a:	e7f5      	b.n	800ba88 <_strtoul_l.constprop.0+0xb8>
 800ba9c:	2430      	movs	r4, #48	; 0x30
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1b5      	bne.n	800ba0e <_strtoul_l.constprop.0+0x3e>
 800baa2:	2308      	movs	r3, #8
 800baa4:	e7b3      	b.n	800ba0e <_strtoul_l.constprop.0+0x3e>
 800baa6:	2c30      	cmp	r4, #48	; 0x30
 800baa8:	d0a9      	beq.n	800b9fe <_strtoul_l.constprop.0+0x2e>
 800baaa:	230a      	movs	r3, #10
 800baac:	e7af      	b.n	800ba0e <_strtoul_l.constprop.0+0x3e>
 800baae:	bf00      	nop
 800bab0:	0800c3a1 	.word	0x0800c3a1

0800bab4 <_strtoul_r>:
 800bab4:	f7ff bf8c 	b.w	800b9d0 <_strtoul_l.constprop.0>

0800bab8 <__submore>:
 800bab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800babc:	460c      	mov	r4, r1
 800babe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bac4:	4299      	cmp	r1, r3
 800bac6:	d11d      	bne.n	800bb04 <__submore+0x4c>
 800bac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bacc:	f7ff f8ce 	bl	800ac6c <_malloc_r>
 800bad0:	b918      	cbnz	r0, 800bada <__submore+0x22>
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295
 800bad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bade:	63a3      	str	r3, [r4, #56]	; 0x38
 800bae0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bae4:	6360      	str	r0, [r4, #52]	; 0x34
 800bae6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800baea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800baee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800baf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800baf6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bafa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bafe:	6020      	str	r0, [r4, #0]
 800bb00:	2000      	movs	r0, #0
 800bb02:	e7e8      	b.n	800bad6 <__submore+0x1e>
 800bb04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb06:	0077      	lsls	r7, r6, #1
 800bb08:	463a      	mov	r2, r7
 800bb0a:	f000 f895 	bl	800bc38 <_realloc_r>
 800bb0e:	4605      	mov	r5, r0
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d0de      	beq.n	800bad2 <__submore+0x1a>
 800bb14:	eb00 0806 	add.w	r8, r0, r6
 800bb18:	4601      	mov	r1, r0
 800bb1a:	4632      	mov	r2, r6
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	f7fa ffb7 	bl	8006a90 <memcpy>
 800bb22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bb26:	f8c4 8000 	str.w	r8, [r4]
 800bb2a:	e7e9      	b.n	800bb00 <__submore+0x48>

0800bb2c <__ascii_wctomb>:
 800bb2c:	b149      	cbz	r1, 800bb42 <__ascii_wctomb+0x16>
 800bb2e:	2aff      	cmp	r2, #255	; 0xff
 800bb30:	bf85      	ittet	hi
 800bb32:	238a      	movhi	r3, #138	; 0x8a
 800bb34:	6003      	strhi	r3, [r0, #0]
 800bb36:	700a      	strbls	r2, [r1, #0]
 800bb38:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb3c:	bf98      	it	ls
 800bb3e:	2001      	movls	r0, #1
 800bb40:	4770      	bx	lr
 800bb42:	4608      	mov	r0, r1
 800bb44:	4770      	bx	lr
	...

0800bb48 <__assert_func>:
 800bb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb4a:	4614      	mov	r4, r2
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <__assert_func+0x2c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4605      	mov	r5, r0
 800bb54:	68d8      	ldr	r0, [r3, #12]
 800bb56:	b14c      	cbz	r4, 800bb6c <__assert_func+0x24>
 800bb58:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <__assert_func+0x30>)
 800bb5a:	9100      	str	r1, [sp, #0]
 800bb5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb60:	4906      	ldr	r1, [pc, #24]	; (800bb7c <__assert_func+0x34>)
 800bb62:	462b      	mov	r3, r5
 800bb64:	f000 f80e 	bl	800bb84 <fiprintf>
 800bb68:	f000 f895 	bl	800bc96 <abort>
 800bb6c:	4b04      	ldr	r3, [pc, #16]	; (800bb80 <__assert_func+0x38>)
 800bb6e:	461c      	mov	r4, r3
 800bb70:	e7f3      	b.n	800bb5a <__assert_func+0x12>
 800bb72:	bf00      	nop
 800bb74:	20000040 	.word	0x20000040
 800bb78:	0800c798 	.word	0x0800c798
 800bb7c:	0800c7a5 	.word	0x0800c7a5
 800bb80:	0800c7d3 	.word	0x0800c7d3

0800bb84 <fiprintf>:
 800bb84:	b40e      	push	{r1, r2, r3}
 800bb86:	b503      	push	{r0, r1, lr}
 800bb88:	4601      	mov	r1, r0
 800bb8a:	ab03      	add	r3, sp, #12
 800bb8c:	4805      	ldr	r0, [pc, #20]	; (800bba4 <fiprintf+0x20>)
 800bb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	f7ff fc35 	bl	800b404 <_vfiprintf_r>
 800bb9a:	b002      	add	sp, #8
 800bb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba0:	b003      	add	sp, #12
 800bba2:	4770      	bx	lr
 800bba4:	20000040 	.word	0x20000040

0800bba8 <_fstat_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4d07      	ldr	r5, [pc, #28]	; (800bbc8 <_fstat_r+0x20>)
 800bbac:	2300      	movs	r3, #0
 800bbae:	4604      	mov	r4, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	602b      	str	r3, [r5, #0]
 800bbb6:	f7f7 f836 	bl	8002c26 <_fstat>
 800bbba:	1c43      	adds	r3, r0, #1
 800bbbc:	d102      	bne.n	800bbc4 <_fstat_r+0x1c>
 800bbbe:	682b      	ldr	r3, [r5, #0]
 800bbc0:	b103      	cbz	r3, 800bbc4 <_fstat_r+0x1c>
 800bbc2:	6023      	str	r3, [r4, #0]
 800bbc4:	bd38      	pop	{r3, r4, r5, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000de4 	.word	0x20000de4

0800bbcc <_isatty_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4d06      	ldr	r5, [pc, #24]	; (800bbe8 <_isatty_r+0x1c>)
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	602b      	str	r3, [r5, #0]
 800bbd8:	f7f7 f835 	bl	8002c46 <_isatty>
 800bbdc:	1c43      	adds	r3, r0, #1
 800bbde:	d102      	bne.n	800bbe6 <_isatty_r+0x1a>
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	b103      	cbz	r3, 800bbe6 <_isatty_r+0x1a>
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
 800bbe8:	20000de4 	.word	0x20000de4

0800bbec <memmove>:
 800bbec:	4288      	cmp	r0, r1
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	eb01 0402 	add.w	r4, r1, r2
 800bbf4:	d902      	bls.n	800bbfc <memmove+0x10>
 800bbf6:	4284      	cmp	r4, r0
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	d807      	bhi.n	800bc0c <memmove+0x20>
 800bbfc:	1e43      	subs	r3, r0, #1
 800bbfe:	42a1      	cmp	r1, r4
 800bc00:	d008      	beq.n	800bc14 <memmove+0x28>
 800bc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc0a:	e7f8      	b.n	800bbfe <memmove+0x12>
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4601      	mov	r1, r0
 800bc10:	428a      	cmp	r2, r1
 800bc12:	d100      	bne.n	800bc16 <memmove+0x2a>
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc1e:	e7f7      	b.n	800bc10 <memmove+0x24>

0800bc20 <__malloc_lock>:
 800bc20:	4801      	ldr	r0, [pc, #4]	; (800bc28 <__malloc_lock+0x8>)
 800bc22:	f7fe ba4a 	b.w	800a0ba <__retarget_lock_acquire_recursive>
 800bc26:	bf00      	nop
 800bc28:	20000dd8 	.word	0x20000dd8

0800bc2c <__malloc_unlock>:
 800bc2c:	4801      	ldr	r0, [pc, #4]	; (800bc34 <__malloc_unlock+0x8>)
 800bc2e:	f7fe ba45 	b.w	800a0bc <__retarget_lock_release_recursive>
 800bc32:	bf00      	nop
 800bc34:	20000dd8 	.word	0x20000dd8

0800bc38 <_realloc_r>:
 800bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3c:	4680      	mov	r8, r0
 800bc3e:	4614      	mov	r4, r2
 800bc40:	460e      	mov	r6, r1
 800bc42:	b921      	cbnz	r1, 800bc4e <_realloc_r+0x16>
 800bc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	4611      	mov	r1, r2
 800bc4a:	f7ff b80f 	b.w	800ac6c <_malloc_r>
 800bc4e:	b92a      	cbnz	r2, 800bc5c <_realloc_r+0x24>
 800bc50:	f7fe ffa0 	bl	800ab94 <_free_r>
 800bc54:	4625      	mov	r5, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5c:	f000 f822 	bl	800bca4 <_malloc_usable_size_r>
 800bc60:	4284      	cmp	r4, r0
 800bc62:	4607      	mov	r7, r0
 800bc64:	d802      	bhi.n	800bc6c <_realloc_r+0x34>
 800bc66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc6a:	d812      	bhi.n	800bc92 <_realloc_r+0x5a>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	4640      	mov	r0, r8
 800bc70:	f7fe fffc 	bl	800ac6c <_malloc_r>
 800bc74:	4605      	mov	r5, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d0ed      	beq.n	800bc56 <_realloc_r+0x1e>
 800bc7a:	42bc      	cmp	r4, r7
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4631      	mov	r1, r6
 800bc80:	bf28      	it	cs
 800bc82:	463a      	movcs	r2, r7
 800bc84:	f7fa ff04 	bl	8006a90 <memcpy>
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	f7fe ff82 	bl	800ab94 <_free_r>
 800bc90:	e7e1      	b.n	800bc56 <_realloc_r+0x1e>
 800bc92:	4635      	mov	r5, r6
 800bc94:	e7df      	b.n	800bc56 <_realloc_r+0x1e>

0800bc96 <abort>:
 800bc96:	b508      	push	{r3, lr}
 800bc98:	2006      	movs	r0, #6
 800bc9a:	f000 f833 	bl	800bd04 <raise>
 800bc9e:	2001      	movs	r0, #1
 800bca0:	f7f6 ff8e 	bl	8002bc0 <_exit>

0800bca4 <_malloc_usable_size_r>:
 800bca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca8:	1f18      	subs	r0, r3, #4
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfbc      	itt	lt
 800bcae:	580b      	ldrlt	r3, [r1, r0]
 800bcb0:	18c0      	addlt	r0, r0, r3
 800bcb2:	4770      	bx	lr

0800bcb4 <_raise_r>:
 800bcb4:	291f      	cmp	r1, #31
 800bcb6:	b538      	push	{r3, r4, r5, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	460d      	mov	r5, r1
 800bcbc:	d904      	bls.n	800bcc8 <_raise_r+0x14>
 800bcbe:	2316      	movs	r3, #22
 800bcc0:	6003      	str	r3, [r0, #0]
 800bcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcca:	b112      	cbz	r2, 800bcd2 <_raise_r+0x1e>
 800bccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcd0:	b94b      	cbnz	r3, 800bce6 <_raise_r+0x32>
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 f830 	bl	800bd38 <_getpid_r>
 800bcd8:	462a      	mov	r2, r5
 800bcda:	4601      	mov	r1, r0
 800bcdc:	4620      	mov	r0, r4
 800bcde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bce2:	f000 b817 	b.w	800bd14 <_kill_r>
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d00a      	beq.n	800bd00 <_raise_r+0x4c>
 800bcea:	1c59      	adds	r1, r3, #1
 800bcec:	d103      	bne.n	800bcf6 <_raise_r+0x42>
 800bcee:	2316      	movs	r3, #22
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	e7e7      	b.n	800bcc6 <_raise_r+0x12>
 800bcf6:	2400      	movs	r4, #0
 800bcf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	4798      	blx	r3
 800bd00:	2000      	movs	r0, #0
 800bd02:	e7e0      	b.n	800bcc6 <_raise_r+0x12>

0800bd04 <raise>:
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <raise+0xc>)
 800bd06:	4601      	mov	r1, r0
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	f7ff bfd3 	b.w	800bcb4 <_raise_r>
 800bd0e:	bf00      	nop
 800bd10:	20000040 	.word	0x20000040

0800bd14 <_kill_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d07      	ldr	r5, [pc, #28]	; (800bd34 <_kill_r+0x20>)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	4611      	mov	r1, r2
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	f7f6 ff3d 	bl	8002ba0 <_kill>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	d102      	bne.n	800bd30 <_kill_r+0x1c>
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	b103      	cbz	r3, 800bd30 <_kill_r+0x1c>
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	bd38      	pop	{r3, r4, r5, pc}
 800bd32:	bf00      	nop
 800bd34:	20000de4 	.word	0x20000de4

0800bd38 <_getpid_r>:
 800bd38:	f7f6 bf2a 	b.w	8002b90 <_getpid>

0800bd3c <_init>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	bf00      	nop
 800bd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd42:	bc08      	pop	{r3}
 800bd44:	469e      	mov	lr, r3
 800bd46:	4770      	bx	lr

0800bd48 <_fini>:
 800bd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4a:	bf00      	nop
 800bd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4e:	bc08      	pop	{r3}
 800bd50:	469e      	mov	lr, r3
 800bd52:	4770      	bx	lr
