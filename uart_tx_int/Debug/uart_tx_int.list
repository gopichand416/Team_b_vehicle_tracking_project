
uart_tx_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800511c  0800511c  00020840  2**0
                  CONTENTS
  4 .ARM          00000008  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005124  08005124  00020840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000840  20000000  0800512c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000840  0800596c  00020840  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800596c  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020840  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d192  00000000  00000000  00020870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002014  00000000  00000000  0002da02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026862  00000000  00000000  00030ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb4e  00000000  00000000  00057722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9225  00000000  00000000  00064270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000328c  00000000  00000000  0014d4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000840 	.word	0x20000840
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fdc 	.word	0x08004fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000844 	.word	0x20000844
 80001cc:	08004fdc 	.word	0x08004fdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include<stdio.h>
int _write(int file,char *ptr,int len)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
    int i=0;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e009      	b.n	80005fc <_write+0x2a>
      ITM_SendChar((*ptr++));
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60ba      	str	r2, [r7, #8]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffc7 	bl	8000584 <ITM_SendChar>
    for(i=0;i<len;i++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf1      	blt.n	80005e8 <_write+0x16>
    return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <HAL_UART_TxCpltCallback>:


uint8_t data[2000]="AT\r\n";
uint8_t rx[20]={0};
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
   //HAL_UART_Transmit_IT(&huart2, data, strlen(data));
	printf("callback start\n");
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_UART_TxCpltCallback+0x20>)
 800061a:	f003 fd61 	bl	80040e0 <puts>
	//while((HAL_UART_Receive(&huart2, rx, sizeof(rx), 10)==HAL_OK));
	/*memset(rx,0,sizeof(rx));

	HAL_UART_Receive(&huart4, rx, 10, 10);*/
	printf("callback end %s\n",(char *)rx);
 800061e:	4905      	ldr	r1, [pc, #20]	; (8000634 <HAL_UART_TxCpltCallback+0x24>)
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <HAL_UART_TxCpltCallback+0x28>)
 8000622:	f003 fcd7 	bl	8003fd4 <iprintf>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	08004ff4 	.word	0x08004ff4
 8000634:	20000af0 	.word	0x20000af0
 8000638:	08005004 	.word	0x08005004

0800063c <main>:




int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fcae 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f832 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 f972 	bl	8000930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f910 	bl	8000870 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000650:	f000 f87e 	bl	8000750 <MX_UART4_Init>
  MX_UART5_Init();
 8000654:	f000 f8ac 	bl	80007b0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000658:	f000 f8da 	bl	8000810 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800065c:	f000 f938 	bl	80008d0 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("before tx\n");
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <main+0x5c>)
 8000662:	f003 fd3d 	bl	80040e0 <puts>
	 // memset(rx,0,sizeof(rx));
	   HAL_UART_Transmit(&huart4, data, strlen(data),10);
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <main+0x60>)
 8000668:	f7ff fdb2 	bl	80001d0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	230a      	movs	r3, #10
 8000672:	490a      	ldr	r1, [pc, #40]	; (800069c <main+0x60>)
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <main+0x64>)
 8000676:	f002 fbdb 	bl	8002e30 <HAL_UART_Transmit>
	  // HAL_UART_Receive(&huart4, rx, 10, 10);
	  // memset(rx,0,sizeof(rx));
	  // printf("callback end %s\n",(char *)rx);
	   HAL_UART_Transmit(&huart4, (uint8_t *)"AT+CSQ\r\n", strlen("AT+CSQ\r\n"),10);
 800067a:	230a      	movs	r3, #10
 800067c:	2208      	movs	r2, #8
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <main+0x68>)
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <main+0x64>)
 8000682:	f002 fbd5 	bl	8002e30 <HAL_UART_Transmit>
	   //HAL_UART_Receive(&huart4, rx, 20, 30);
	   //printf("callback end %s\n",(char *)rx);
	   printf("after tx\n");
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0x6c>)
 8000688:	f003 fd2a 	bl	80040e0 <puts>
	   HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 fd02 	bl	8001098 <HAL_Delay>
  {
 8000694:	e7e4      	b.n	8000660 <main+0x24>
 8000696:	bf00      	nop
 8000698:	08005018 	.word	0x08005018
 800069c:	20000000 	.word	0x20000000
 80006a0:	2000085c 	.word	0x2000085c
 80006a4:	08005024 	.word	0x08005024
 80006a8:	08005030 	.word	0x08005030

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fc82 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f001 f84d 	bl	8001770 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f958 	bl	8000990 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f884 	bl	800181c <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f939 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fc4c 	bl	8001fd4 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f925 	bl	8000990 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_UART4_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_UART4_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_UART4_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_UART4_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_UART4_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_UART4_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_UART4_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_UART4_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_UART4_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_UART4_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_UART4_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_UART4_Init+0x58>)
 8000794:	f002 fafe 	bl	8002d94 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8f7 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000085c 	.word	0x2000085c
 80007ac:	40004c00 	.word	0x40004c00

080007b0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_UART5_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_UART5_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_UART5_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_UART5_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_UART5_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_UART5_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_UART5_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_UART5_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_UART5_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_UART5_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_UART5_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_UART5_Init+0x58>)
 80007f4:	f002 face 	bl	8002d94 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8c7 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200008e0 	.word	0x200008e0
 800080c:	40005000 	.word	0x40005000

08000810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART1_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000854:	f002 fa9e 	bl	8002d94 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f897 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000964 	.word	0x20000964
 800086c:	40013800 	.word	0x40013800

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	f002 fa6e 	bl	8002d94 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f867 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200009e8 	.word	0x200009e8
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f002 fa3e 	bl	8002d94 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f837 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000a6c 	.word	0x20000a6c
 800092c:	40004800 	.word	0x40004800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_GPIO_Init+0x5c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <MX_GPIO_Init+0x5c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_GPIO_Init+0x5c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_GPIO_Init+0x5c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <MX_GPIO_Init+0x5c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_GPIO_Init+0x5c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_GPIO_Init+0x5c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <MX_GPIO_Init+0x5c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_GPIO_Init+0x5c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6613      	str	r3, [r2, #96]	; 0x60
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0b4      	sub	sp, #208	; 0xd0
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a00:	2288      	movs	r2, #136	; 0x88
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fadd 	bl	8003fc4 <memset>
  if(huart->Instance==UART4)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4aa4      	ldr	r2, [pc, #656]	; (8000ca0 <HAL_UART_MspInit+0x2bc>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d144      	bne.n	8000a9e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a14:	2308      	movs	r3, #8
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fcfb 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a2c:	f7ff ffb0 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a30:	4b9c      	ldr	r3, [pc, #624]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a34:	4a9b      	ldr	r2, [pc, #620]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3c:	4b99      	ldr	r3, [pc, #612]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
 8000a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b96      	ldr	r3, [pc, #600]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	4a95      	ldr	r2, [pc, #596]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a54:	4b93      	ldr	r3, [pc, #588]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a60:	2303      	movs	r3, #3
 8000a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 fcba 	bl	8001400 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2034      	movs	r0, #52	; 0x34
 8000a92:	f000 fc00 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a96:	2034      	movs	r0, #52	; 0x34
 8000a98:	f000 fc19 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a9c:	e156      	b.n	8000d4c <HAL_UART_MspInit+0x368>
  else if(huart->Instance==UART5)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a81      	ldr	r2, [pc, #516]	; (8000ca8 <HAL_UART_MspInit+0x2c4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d165      	bne.n	8000b74 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fcb1 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000ac0:	f7ff ff66 	bl	8000990 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ac4:	4b77      	ldr	r3, [pc, #476]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac8:	4a76      	ldr	r2, [pc, #472]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ace:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad0:	4b74      	ldr	r3, [pc, #464]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	4b71      	ldr	r3, [pc, #452]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	4a70      	ldr	r2, [pc, #448]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae8:	4b6e      	ldr	r3, [pc, #440]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	4b6b      	ldr	r3, [pc, #428]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a6a      	ldr	r2, [pc, #424]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b68      	ldr	r3, [pc, #416]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	623b      	str	r3, [r7, #32]
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b26:	2308      	movs	r3, #8
 8000b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b30:	4619      	mov	r1, r3
 8000b32:	485e      	ldr	r0, [pc, #376]	; (8000cac <HAL_UART_MspInit+0x2c8>)
 8000b34:	f000 fc64 	bl	8001400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b50:	2308      	movs	r3, #8
 8000b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4854      	ldr	r0, [pc, #336]	; (8000cb0 <HAL_UART_MspInit+0x2cc>)
 8000b5e:	f000 fc4f 	bl	8001400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2035      	movs	r0, #53	; 0x35
 8000b68:	f000 fb95 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b6c:	2035      	movs	r0, #53	; 0x35
 8000b6e:	f000 fbae 	bl	80012ce <HAL_NVIC_EnableIRQ>
}
 8000b72:	e0eb      	b.n	8000d4c <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a4e      	ldr	r2, [pc, #312]	; (8000cb4 <HAL_UART_MspInit+0x2d0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d145      	bne.n	8000c0a <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b82:	2300      	movs	r3, #0
 8000b84:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fc46 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8000b96:	f7ff fefb 	bl	8000990 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9a:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a41      	ldr	r2, [pc, #260]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be4:	2307      	movs	r3, #7
 8000be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f000 fc04 	bl	8001400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2025      	movs	r0, #37	; 0x25
 8000bfe:	f000 fb4a 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c02:	2025      	movs	r0, #37	; 0x25
 8000c04:	f000 fb63 	bl	80012ce <HAL_NVIC_EnableIRQ>
}
 8000c08:	e0a0      	b.n	8000d4c <HAL_UART_MspInit+0x368>
  else if(huart->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a2a      	ldr	r2, [pc, #168]	; (8000cb8 <HAL_UART_MspInit+0x2d4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d153      	bne.n	8000cbc <HAL_UART_MspInit+0x2d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fbfb 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8000c2c:	f7ff feb0 	bl	8000990 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_UART_MspInit+0x2c0>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c60:	230c      	movs	r3, #12
 8000c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fbba 	bl	8001400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2026      	movs	r0, #38	; 0x26
 8000c92:	f000 fb00 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c96:	2026      	movs	r0, #38	; 0x26
 8000c98:	f000 fb19 	bl	80012ce <HAL_NVIC_EnableIRQ>
}
 8000c9c:	e056      	b.n	8000d4c <HAL_UART_MspInit+0x368>
 8000c9e:	bf00      	nop
 8000ca0:	40004c00 	.word	0x40004c00
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40005000 	.word	0x40005000
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <HAL_UART_MspInit+0x370>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d142      	bne.n	8000d4c <HAL_UART_MspInit+0x368>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fba2 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 8000cde:	f7ff fe57 	bl	8000990 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x374>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0x374>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0x374>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x374>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_UART_MspInit+0x374>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x374>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2330      	movs	r3, #48	; 0x30
 8000d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d34:	4619      	mov	r1, r3
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_UART_MspInit+0x378>)
 8000d38:	f000 fb62 	bl	8001400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2027      	movs	r0, #39	; 0x27
 8000d42:	f000 faa8 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d46:	2027      	movs	r0, #39	; 0x27
 8000d48:	f000 fac1 	bl	80012ce <HAL_NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	37d0      	adds	r7, #208	; 0xd0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40004800 	.word	0x40004800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f954 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <USART1_IRQHandler+0x10>)
 8000dba:	f002 f8cd 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000964 	.word	0x20000964

08000dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USART2_IRQHandler+0x10>)
 8000dce:	f002 f8c3 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200009e8 	.word	0x200009e8

08000ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART3_IRQHandler+0x10>)
 8000de2:	f002 f8b9 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000a6c 	.word	0x20000a6c

08000df0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <UART4_IRQHandler+0x10>)
 8000df6:	f002 f8af 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000085c 	.word	0x2000085c

08000e04 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <UART5_IRQHandler+0x10>)
 8000e0a:	f002 f8a5 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200008e0 	.word	0x200008e0

08000e18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
  }

  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 f840 	bl	8003f70 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20018000 	.word	0x20018000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000b04 	.word	0x20000b04
 8000f24:	20000b20 	.word	0x20000b20

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f002 ffff 	bl	8003f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fb5d 	bl	800063c <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000840 	.word	0x20000840
  ldr r2, =_sidata
 8000f90:	0800512c 	.word	0x0800512c
  ldr r2, =_sbss
 8000f94:	20000840 	.word	0x20000840
  ldr r4, =_ebss
 8000f98:	20000b1c 	.word	0x20000b1c

08000f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_2_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_Init+0x3c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_Init+0x3c>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f962 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f80f 	bl	8000fe0 <HAL_InitTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	e001      	b.n	8000fd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fce:	f7ff fce5 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_InitTick+0x70>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f96d 	bl	80012ea <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10f      	bne.n	8001036 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d809      	bhi.n	8001030 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f937 	bl	8001296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_InitTick+0x74>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e007      	b.n	8001040 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e004      	b.n	8001040 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e001      	b.n	8001040 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200007d8 	.word	0x200007d8
 8001050:	200007d0 	.word	0x200007d0
 8001054:	200007d4 	.word	0x200007d4

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200007d8 	.word	0x200007d8
 800107c:	20000b08 	.word	0x20000b08

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000b08 	.word	0x20000b08

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200007d8 	.word	0x200007d8

080010e0 <__NVIC_SetPriorityGrouping>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff29 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff3e 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff31 	bl	8001144 <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d008      	beq.n	800132c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2204      	movs	r2, #4
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e022      	b.n	8001372 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 020e 	bic.w	r2, r2, #14
 800133a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f003 021c 	and.w	r2, r3, #28
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d005      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2204      	movs	r2, #4
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e029      	b.n	80013f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 020e 	bic.w	r2, r2, #14
 80013b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f003 021c 	and.w	r2, r3, #28
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4798      	blx	r3
    }
  }
  return status;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e17f      	b.n	8001710 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8171 	beq.w	800170a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d005      	beq.n	8001440 <HAL_GPIO_Init+0x40>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d130      	bne.n	80014a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001476:	2201      	movs	r2, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 0201 	and.w	r2, r3, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d118      	bne.n	80014e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014b4:	2201      	movs	r2, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f003 0201 	and.w	r2, r3, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d017      	beq.n	800151c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d123      	bne.n	8001570 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	6939      	ldr	r1, [r7, #16]
 800156c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0203 	and.w	r2, r3, #3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80ac 	beq.w	800170a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_GPIO_Init+0x330>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_GPIO_Init+0x330>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	; 0x60
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_GPIO_Init+0x330>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ca:	4a5a      	ldr	r2, [pc, #360]	; (8001734 <HAL_GPIO_Init+0x334>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f4:	d025      	beq.n	8001642 <HAL_GPIO_Init+0x242>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_GPIO_Init+0x338>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01f      	beq.n	800163e <HAL_GPIO_Init+0x23e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4e      	ldr	r2, [pc, #312]	; (800173c <HAL_GPIO_Init+0x33c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_GPIO_Init+0x23a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_GPIO_Init+0x340>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x236>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4c      	ldr	r2, [pc, #304]	; (8001744 <HAL_GPIO_Init+0x344>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x232>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_GPIO_Init+0x348>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x22e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4a      	ldr	r2, [pc, #296]	; (800174c <HAL_GPIO_Init+0x34c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x22a>
 8001626:	2306      	movs	r3, #6
 8001628:	e00c      	b.n	8001644 <HAL_GPIO_Init+0x244>
 800162a:	2307      	movs	r3, #7
 800162c:	e00a      	b.n	8001644 <HAL_GPIO_Init+0x244>
 800162e:	2305      	movs	r3, #5
 8001630:	e008      	b.n	8001644 <HAL_GPIO_Init+0x244>
 8001632:	2304      	movs	r3, #4
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x244>
 8001636:	2303      	movs	r3, #3
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x244>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x244>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x244>
 8001642:	2300      	movs	r3, #0
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001654:	4937      	ldr	r1, [pc, #220]	; (8001734 <HAL_GPIO_Init+0x334>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_GPIO_Init+0x350>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_GPIO_Init+0x350>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_GPIO_Init+0x350>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_GPIO_Init+0x350>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_GPIO_Init+0x350>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <HAL_GPIO_Init+0x350>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_GPIO_Init+0x350>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_GPIO_Init+0x350>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f ae78 	bne.w	8001410 <HAL_GPIO_Init+0x10>
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	48000400 	.word	0x48000400
 800173c:	48000800 	.word	0x48000800
 8001740:	48000c00 	.word	0x48000c00
 8001744:	48001000 	.word	0x48001000
 8001748:	48001400 	.word	0x48001400
 800174c:	48001800 	.word	0x48001800
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_PWREx_GetVoltageRange+0x18>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000

08001770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177e:	d130      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178c:	d038      	beq.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2232      	movs	r2, #50	; 0x32
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b4:	e002      	b.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c8:	d102      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f2      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017dc:	d110      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e00f      	b.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ee:	d007      	beq.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f8:	4a05      	ldr	r2, [pc, #20]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000
 8001814:	200007d0 	.word	0x200007d0
 8001818:	431bde83 	.word	0x431bde83

0800181c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e3ca      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b97      	ldr	r3, [pc, #604]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4b94      	ldr	r3, [pc, #592]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80e4 	beq.w	8001a18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_RCC_OscConfig+0x4a>
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	f040 808b 	bne.w	8001974 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b01      	cmp	r3, #1
 8001862:	f040 8087 	bne.w	8001974 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001866:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x62>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e3a2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1a      	ldr	r2, [r3, #32]
 8001882:	4b82      	ldr	r3, [pc, #520]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_RCC_OscConfig+0x7c>
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001896:	e005      	b.n	80018a4 <HAL_RCC_OscConfig+0x88>
 8001898:	4b7c      	ldr	r3, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d223      	bcs.n	80018f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fd55 	bl	800235c <RCC_SetFlashLatencyFromMSIRange>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e383      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018bc:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b70      	ldr	r3, [pc, #448]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	496d      	ldr	r1, [pc, #436]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018da:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	4968      	ldr	r1, [pc, #416]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
 80018ee:	e025      	b.n	800193c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f0:	4b66      	ldr	r3, [pc, #408]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a65      	ldr	r2, [pc, #404]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4960      	ldr	r1, [pc, #384]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190e:	4b5f      	ldr	r3, [pc, #380]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	495b      	ldr	r1, [pc, #364]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fd15 	bl	800235c <RCC_SetFlashLatencyFromMSIRange>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e343      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800193c:	f000 fc4a 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b52      	ldr	r3, [pc, #328]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	4950      	ldr	r1, [pc, #320]	; (8001a90 <HAL_RCC_OscConfig+0x274>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	4a4e      	ldr	r2, [pc, #312]	; (8001a94 <HAL_RCC_OscConfig+0x278>)
 800195a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb3d 	bl	8000fe0 <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d052      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	e327      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a42      	ldr	r2, [pc, #264]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001988:	f7ff fb7a 	bl	8001080 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001990:	f7ff fb76 	bl	8001080 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e310      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a36      	ldr	r2, [pc, #216]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4931      	ldr	r1, [pc, #196]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	492c      	ldr	r1, [pc, #176]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e01a      	b.n	8001a18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb47 	bl	8001080 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f6:	f7ff fb43 	bl	8001080 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2dd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1da>
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d074      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x21a>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	d10e      	bne.n	8001a4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d064      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d160      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e2ba      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x24a>
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e026      	b.n	8001ab4 <HAL_RCC_OscConfig+0x298>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6e:	d115      	bne.n	8001a9c <HAL_RCC_OscConfig+0x280>
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a02      	ldr	r2, [pc, #8]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x298>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	0800503c 	.word	0x0800503c
 8001a94:	200007d0 	.word	0x200007d0
 8001a98:	200007d4 	.word	0x200007d4
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a9f      	ldr	r2, [pc, #636]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b9d      	ldr	r3, [pc, #628]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a9c      	ldr	r2, [pc, #624]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fae0 	bl	8001080 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fadc 	bl	8001080 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e276      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad6:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2a8>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff facc 	bl	8001080 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fac8 	bl	8001080 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e262      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x2d0>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d060      	beq.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x310>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d116      	bne.n	8001b5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2c:	4b7c      	ldr	r3, [pc, #496]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_OscConfig+0x328>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e23f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	4973      	ldr	r1, [pc, #460]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b58:	e040      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d023      	beq.n	8001baa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b62:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fa87 	bl	8001080 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff fa83 	bl	8001080 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e21d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b88:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	495f      	ldr	r1, [pc, #380]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e018      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5c      	ldr	r2, [pc, #368]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fa63 	bl	8001080 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fa5f 	bl	8001080 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1f9      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa3e 	bl	8001080 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fa3a 	bl	8001080 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1d4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ef      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3ec>
 8001c28:	e01b      	b.n	8001c62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c30:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fa21 	bl	8001080 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c42:	f7ff fa1d 	bl	8001080 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1b7      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ef      	bne.n	8001c42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80a6 	beq.w	8001dbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10d      	bne.n	8001c9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d118      	bne.n	8001cda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f9e4 	bl	8001080 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbc:	f7ff f9e0 	bl	8001080 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e17a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4d8>
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf2:	e029      	b.n	8001d48 <HAL_RCC_OscConfig+0x52c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d115      	bne.n	8001d28 <HAL_RCC_OscConfig+0x50c>
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x52c>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
 8001d28:	4b9c      	ldr	r3, [pc, #624]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a9b      	ldr	r2, [pc, #620]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d38:	4b98      	ldr	r3, [pc, #608]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	4a97      	ldr	r2, [pc, #604]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d016      	beq.n	8001d7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff f996 	bl	8001080 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7ff f992 	bl	8001080 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e12a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ed      	beq.n	8001d58 <HAL_RCC_OscConfig+0x53c>
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f97f 	bl	8001080 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7ff f97b 	bl	8001080 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e113      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ed      	bne.n	8001d86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80fe 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 80d0 	bne.w	8001f70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd0:	4b72      	ldr	r3, [pc, #456]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d130      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	3b01      	subs	r3, #1
 8001df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d127      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11f      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e10:	2a07      	cmp	r2, #7
 8001e12:	bf14      	ite	ne
 8001e14:	2201      	movne	r2, #1
 8001e16:	2200      	moveq	r2, #0
 8001e18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d113      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d06e      	beq.n	8001f24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d069      	beq.n	8001f20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0ad      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7ff f904 	bl	8001080 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f900 	bl	8001080 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e09a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8e:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCC_OscConfig+0x784>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ebc:	0852      	lsrs	r2, r2, #1
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	0552      	lsls	r2, r2, #21
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	3a01      	subs	r2, #1
 8001ecc:	0652      	lsls	r2, r2, #25
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed4:	0912      	lsrs	r2, r2, #4
 8001ed6:	0452      	lsls	r2, r2, #17
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	4930      	ldr	r1, [pc, #192]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2d      	ldr	r2, [pc, #180]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef8:	f7ff f8c2 	bl	8001080 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f8be 	bl	8001080 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e058      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1e:	e050      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d148      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f48:	f7ff f89a 	bl	8001080 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f896 	bl	8001080 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e030      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x734>
 8001f6e:	e028      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d023      	beq.n	8001fbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f87d 	bl	8001080 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	e00c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f879 	bl	8001080 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d905      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e013      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x7b0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_OscConfig+0x7b0>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4905      	ldr	r1, [pc, #20]	; (8001fcc <HAL_RCC_OscConfig+0x7b0>)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_RCC_OscConfig+0x7b4>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	feeefffc 	.word	0xfeeefffc

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0e7      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4970      	ldr	r1, [pc, #448]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b6e      	ldr	r3, [pc, #440]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0cf      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	429a      	cmp	r2, r3
 8002032:	d908      	bls.n	8002046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4960      	ldr	r1, [pc, #384]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04c      	beq.n	80020ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d121      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0a6      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e09a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e08e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e086      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4943      	ldr	r1, [pc, #268]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020bc:	f7fe ffe0 	bl	8001080 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe ffdc 	bl	8001080 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e06e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	492b      	ldr	r1, [pc, #172]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d210      	bcs.n	800214a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0207 	bic.w	r2, r3, #7
 8002130:	4923      	ldr	r1, [pc, #140]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e036      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4918      	ldr	r1, [pc, #96]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4910      	ldr	r1, [pc, #64]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002188:	f000 f824 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	490b      	ldr	r1, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1f4>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1fc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff17 	bl	8000fe0 <HAL_InitTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021b6:	7afb      	ldrb	r3, [r7, #11]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	0800503c 	.word	0x0800503c
 80021cc:	200007d0 	.word	0x200007d0
 80021d0:	200007d4 	.word	0x200007d4

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x34>
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d121      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d11e      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002230:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002244:	e00a      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d102      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	e004      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d101      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800225a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d134      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0xa6>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d003      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0xac>
 8002278:	e005      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800227c:	617b      	str	r3, [r7, #20]
      break;
 800227e:	e005      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002282:	617b      	str	r3, [r7, #20]
      break;
 8002284:	e002      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	617b      	str	r3, [r7, #20]
      break;
 800228a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	3301      	adds	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	0e5b      	lsrs	r3, r3, #25
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	3301      	adds	r3, #1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022cc:	69bb      	ldr	r3, [r7, #24]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08005054 	.word	0x08005054
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200007d0 	.word	0x200007d0

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002308:	f7ff fff0 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	0800504c 	.word	0x0800504c

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002334:	f7ff ffda 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0adb      	lsrs	r3, r3, #11
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	0800504c 	.word	0x0800504c

0800235c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002374:	f7ff f9ee 	bl	8001754 <HAL_PWREx_GetVoltageRange>
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	e014      	b.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a24      	ldr	r2, [pc, #144]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002394:	f7ff f9de 	bl	8001754 <HAL_PWREx_GetVoltageRange>
 8002398:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d10b      	bne.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d919      	bls.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2ba0      	cmp	r3, #160	; 0xa0
 80023b8:	d902      	bls.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ba:	2302      	movs	r3, #2
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e013      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c0:	2301      	movs	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e010      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b80      	cmp	r3, #128	; 0x80
 80023ca:	d902      	bls.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023cc:	2303      	movs	r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e00a      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d102      	bne.n	80023de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d8:	2302      	movs	r3, #2
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e004      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b70      	cmp	r3, #112	; 0x70
 80023e2:	d101      	bne.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	4909      	ldr	r1, [pc, #36]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002424:	2300      	movs	r3, #0
 8002426:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002428:	2300      	movs	r3, #0
 800242a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d041      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002440:	d02a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002442:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002446:	d824      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800244e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002452:	d81e      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245c:	d010      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800245e:	e018      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a85      	ldr	r2, [pc, #532]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246c:	e015      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fabb 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800247e:	e00c      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3320      	adds	r3, #32
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fba6 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002490:	e003      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	74fb      	strb	r3, [r7, #19]
      break;
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a0:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ae:	4973      	ldr	r1, [pc, #460]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024b6:	e001      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d041      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024d0:	d02a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024d6:	d824      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e2:	d81e      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d010      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ee:	e018      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a61      	ldr	r2, [pc, #388]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fc:	e015      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa73 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800250e:	e00c      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3320      	adds	r3, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fb5e 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	74fb      	strb	r3, [r7, #19]
      break;
 8002526:	e000      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002530:	4b52      	ldr	r3, [pc, #328]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800253e:	494f      	ldr	r1, [pc, #316]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a0 	beq.w	800269a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800259c:	f7fe fd70 	bl	8001080 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a2:	e009      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd6c 	bl	8001080 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
        break;
 80025b6:	e005      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d15c      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01f      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d019      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a20      	ldr	r2, [pc, #128]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002614:	4a19      	ldr	r2, [pc, #100]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fd2b 	bl	8001080 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262c:	e00b      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fd27 	bl	8001080 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d902      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	74fb      	strb	r3, [r7, #19]
            break;
 8002644:	e006      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ec      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266a:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002688:	7c7b      	ldrb	r3, [r7, #17]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b9e      	ldr	r3, [pc, #632]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a9d      	ldr	r2, [pc, #628]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a6:	4b98      	ldr	r3, [pc, #608]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 0203 	bic.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	4994      	ldr	r1, [pc, #592]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c8:	4b8f      	ldr	r3, [pc, #572]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 020c 	bic.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	498c      	ldr	r1, [pc, #560]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ea:	4b87      	ldr	r3, [pc, #540]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	4983      	ldr	r1, [pc, #524]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	497b      	ldr	r1, [pc, #492]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273c:	4972      	ldr	r1, [pc, #456]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002750:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	496a      	ldr	r1, [pc, #424]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	4961      	ldr	r1, [pc, #388]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002794:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	4959      	ldr	r1, [pc, #356]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4b54      	ldr	r3, [pc, #336]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	4950      	ldr	r1, [pc, #320]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	4948      	ldr	r1, [pc, #288]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fa:	4b43      	ldr	r3, [pc, #268]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	493f      	ldr	r1, [pc, #252]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d028      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282a:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283a:	d106      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b32      	ldr	r3, [pc, #200]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e011      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002852:	d10c      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	2101      	movs	r1, #1
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f8c8 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d028      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	491f      	ldr	r1, [pc, #124]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002898:	d106      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a4:	60d3      	str	r3, [r2, #12]
 80028a6:	e011      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f899 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02b      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a02      	ldr	r2, [pc, #8]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
 8002904:	e014      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f867 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02f      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294a:	4928      	ldr	r1, [pc, #160]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800295a:	d10d      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f844 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	74bb      	strb	r3, [r7, #18]
 8002976:	e011      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3320      	adds	r3, #32
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f925 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029da:	4904      	ldr	r1, [pc, #16]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029fe:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a0a:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a22:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
       ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d047      	beq.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e044      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d018      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0x86>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d825      	bhi.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d002      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0x62>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d009      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x74>
 8002a50:	e020      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a52:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11d      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a62:	e01a      	b.n	8002a9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a64:	4b5b      	ldr	r3, [pc, #364]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e013      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a82:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a92:	e006      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e004      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e002      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e000      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	4944      	ldr	r1, [pc, #272]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d17d      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a40      	ldr	r2, [pc, #256]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fad2 	bl	8001080 <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae0:	f7fe face 	bl	8001080 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
        break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af4:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ef      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d160      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6892      	ldr	r2, [r2, #8]
 8002b1c:	0211      	lsls	r1, r2, #8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	0912      	lsrs	r2, r2, #4
 8002b24:	0452      	lsls	r2, r2, #17
 8002b26:	430a      	orrs	r2, r1
 8002b28:	492a      	ldr	r1, [pc, #168]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	610b      	str	r3, [r1, #16]
 8002b2e:	e027      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d112      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	0211      	lsls	r1, r2, #8
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6912      	ldr	r2, [r2, #16]
 8002b4c:	0852      	lsrs	r2, r2, #1
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	0552      	lsls	r2, r2, #21
 8002b52:	430a      	orrs	r2, r1
 8002b54:	491f      	ldr	r1, [pc, #124]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	610b      	str	r3, [r1, #16]
 8002b5a:	e011      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6952      	ldr	r2, [r2, #20]
 8002b72:	0852      	lsrs	r2, r2, #1
 8002b74:	3a01      	subs	r2, #1
 8002b76:	0652      	lsls	r2, r2, #25
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fa78 	bl	8001080 <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b94:	f7fe fa74 	bl	8001080 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be6:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d10d      	bne.n	8002c1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
       ||
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
       ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d047      	beq.n	8002cae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e044      	b.n	8002cae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d018      	beq.n	8002c5e <RCCEx_PLLSAI2_Config+0x86>
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d825      	bhi.n	8002c7c <RCCEx_PLLSAI2_Config+0xa4>
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d002      	beq.n	8002c3a <RCCEx_PLLSAI2_Config+0x62>
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d009      	beq.n	8002c4c <RCCEx_PLLSAI2_Config+0x74>
 8002c38:	e020      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c3a:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d11d      	bne.n	8002c82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e01a      	b.n	8002c82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5c:	e013      	b.n	8002c86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c6a:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c7a:	e006      	b.n	8002c8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e004      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	4939      	ldr	r1, [pc, #228]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d167      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a35      	ldr	r2, [pc, #212]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fe f9de 	bl	8001080 <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cc6:	e009      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cc8:	f7fe f9da 	bl	8001080 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d902      	bls.n	8002cdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cda:	e005      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ef      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d14a      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d111      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cf4:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6892      	ldr	r2, [r2, #8]
 8002d04:	0211      	lsls	r1, r2, #8
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68d2      	ldr	r2, [r2, #12]
 8002d0a:	0912      	lsrs	r2, r2, #4
 8002d0c:	0452      	lsls	r2, r2, #17
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	491f      	ldr	r1, [pc, #124]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	614b      	str	r3, [r1, #20]
 8002d16:	e011      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	0211      	lsls	r1, r2, #8
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6912      	ldr	r2, [r2, #16]
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0652      	lsls	r2, r2, #25
 8002d34:	430a      	orrs	r2, r1
 8002d36:	4916      	ldr	r1, [pc, #88]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe f99a 	bl	8001080 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d4e:	e009      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d50:	f7fe f996 	bl	8001080 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
          break;
 8002d62:	e005      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ef      	beq.n	8002d50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4904      	ldr	r1, [pc, #16]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e040      	b.n	8002e28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fd fe14 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fbb8 	bl	8003548 <UART_SetConfig>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e022      	b.n	8002e28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fe64 	bl	8003ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 feeb 	bl	8003bfc <UART_CheckIdleState>
 8002e26:	4603      	mov	r3, r0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	f040 8082 	bne.w	8002f4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_UART_Transmit+0x26>
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07a      	b.n	8002f50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit+0x38>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e073      	b.n	8002f50 <HAL_UART_Transmit+0x120>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2221      	movs	r2, #33	; 0x21
 8002e7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7e:	f7fe f8ff 	bl	8001080 <HAL_GetTick>
 8002e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	88fa      	ldrh	r2, [r7, #6]
 8002e88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_UART_Transmit+0x80>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e003      	b.n	8002eb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ec0:	e02d      	b.n	8002f1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fede 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e039      	b.n	8002f50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e008      	b.n	8002f0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b292      	uxth	r2, r2
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1cb      	bne.n	8002ec2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2140      	movs	r1, #64	; 0x40
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 feaa 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e005      	b.n	8002f50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0ba      	sub	sp, #232	; 0xe8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f82:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f86:	4013      	ands	r3, r2
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d009      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 82a6 	beq.w	8003502 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
      }
      return;
 8002fbe:	e2a0      	b.n	8003502 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8117 	beq.w	80031f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fda:	4b85      	ldr	r3, [pc, #532]	; (80031f0 <HAL_UART_IRQHandler+0x298>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 810a 	beq.w	80031f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d011      	beq.n	8003014 <HAL_UART_IRQHandler+0xbc>
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d011      	beq.n	8003044 <HAL_UART_IRQHandler+0xec>
 8003020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2202      	movs	r2, #2
 8003032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d011      	beq.n	8003074 <HAL_UART_IRQHandler+0x11c>
 8003050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2204      	movs	r2, #4
 8003062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800308c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003090:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2208      	movs	r2, #8
 800309e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a6:	f043 0208 	orr.w	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <HAL_UART_IRQHandler+0x18a>
 80030bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00c      	beq.n	80030e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 820c 	beq.w	8003506 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d005      	beq.n	800313a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800312e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003132:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04f      	beq.n	80031da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fe6b 	bl	8003e16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d141      	bne.n	80031d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3308      	adds	r3, #8
 8003154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3308      	adds	r3, #8
 8003176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800317a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800317e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1d9      	bne.n	800314e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d013      	beq.n	80031ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <HAL_UART_IRQHandler+0x29c>)
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe f8e5 	bl	800137e <HAL_DMA_Abort_IT>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d017      	beq.n	80031ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031c4:	4610      	mov	r0, r2
 80031c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e00f      	b.n	80031ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9a6 	bl	800351c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	e00b      	b.n	80031ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f9a2 	bl	800351c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	e007      	b.n	80031ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f99e 	bl	800351c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031e8:	e18d      	b.n	8003506 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	bf00      	nop
    return;
 80031ec:	e18b      	b.n	8003506 <HAL_UART_IRQHandler+0x5ae>
 80031ee:	bf00      	nop
 80031f0:	04000120 	.word	0x04000120
 80031f4:	08003edd 	.word	0x08003edd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 8146 	bne.w	800348e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 813f 	beq.w	800348e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8138 	beq.w	800348e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	f040 80b4 	bne.w	800339e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003242:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 815f 	beq.w	800350a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003256:	429a      	cmp	r2, r3
 8003258:	f080 8157 	bcs.w	800350a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8085 	bne.w	8003382 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800328c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1da      	bne.n	8003278 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3308      	adds	r3, #8
 80032c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e1      	bne.n	80032c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3308      	adds	r3, #8
 8003304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3308      	adds	r3, #8
 800331e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e3      	bne.n	80032fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003352:	f023 0310 	bic.w	r3, r3, #16
 8003356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003364:	65bb      	str	r3, [r7, #88]	; 0x58
 8003366:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800336a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e4      	bne.n	8003342 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd ffc0 	bl	8001302 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800338e:	b29b      	uxth	r3, r3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8ca 	bl	8003530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800339c:	e0b5      	b.n	800350a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80a7 	beq.w	800350e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80033c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a2 	beq.w	800350e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
 80033ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e4      	bne.n	80033ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	623b      	str	r3, [r7, #32]
   return(result);
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3308      	adds	r3, #8
 8003420:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003424:	633a      	str	r2, [r7, #48]	; 0x30
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e3      	bne.n	8003400 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	60fb      	str	r3, [r7, #12]
   return(result);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	69b9      	ldr	r1, [r7, #24]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	617b      	str	r3, [r7, #20]
   return(result);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e4      	bne.n	800344a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f852 	bl	8003530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800348c:	e03f      	b.n	800350e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00e      	beq.n	80034b8 <HAL_UART_IRQHandler+0x560>
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fd53 	bl	8003f5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034b6:	e02d      	b.n	8003514 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01c      	beq.n	8003512 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
    }
    return;
 80034e0:	e017      	b.n	8003512 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <HAL_UART_IRQHandler+0x5bc>
 80034ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fd04 	bl	8003f08 <UART_EndTransmit_IT>
    return;
 8003500:	e008      	b.n	8003514 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003502:	bf00      	nop
 8003504:	e006      	b.n	8003514 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003506:	bf00      	nop
 8003508:	e004      	b.n	8003514 <HAL_UART_IRQHandler+0x5bc>
      return;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <HAL_UART_IRQHandler+0x5bc>
      return;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003512:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003514:	37e8      	adds	r7, #232	; 0xe8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop

0800351c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	b08a      	sub	sp, #40	; 0x28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4313      	orrs	r3, r2
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4ba4      	ldr	r3, [pc, #656]	; (8003808 <UART_SetConfig+0x2c0>)
 8003578:	4013      	ands	r3, r2
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003580:	430b      	orrs	r3, r1
 8003582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a99      	ldr	r2, [pc, #612]	; (800380c <UART_SetConfig+0x2c4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	4313      	orrs	r3, r2
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	430a      	orrs	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a90      	ldr	r2, [pc, #576]	; (8003810 <UART_SetConfig+0x2c8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d126      	bne.n	8003620 <UART_SetConfig+0xd8>
 80035d2:	4b90      	ldr	r3, [pc, #576]	; (8003814 <UART_SetConfig+0x2cc>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d81b      	bhi.n	8003618 <UART_SetConfig+0xd0>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <UART_SetConfig+0xa0>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003609 	.word	0x08003609
 80035f0:	08003601 	.word	0x08003601
 80035f4:	08003611 	.word	0x08003611
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fe:	e116      	b.n	800382e <UART_SetConfig+0x2e6>
 8003600:	2302      	movs	r3, #2
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003606:	e112      	b.n	800382e <UART_SetConfig+0x2e6>
 8003608:	2304      	movs	r3, #4
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e10e      	b.n	800382e <UART_SetConfig+0x2e6>
 8003610:	2308      	movs	r3, #8
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e10a      	b.n	800382e <UART_SetConfig+0x2e6>
 8003618:	2310      	movs	r3, #16
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e106      	b.n	800382e <UART_SetConfig+0x2e6>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7c      	ldr	r2, [pc, #496]	; (8003818 <UART_SetConfig+0x2d0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d138      	bne.n	800369c <UART_SetConfig+0x154>
 800362a:	4b7a      	ldr	r3, [pc, #488]	; (8003814 <UART_SetConfig+0x2cc>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b0c      	cmp	r3, #12
 8003636:	d82d      	bhi.n	8003694 <UART_SetConfig+0x14c>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <UART_SetConfig+0xf8>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003675 	.word	0x08003675
 8003644:	08003695 	.word	0x08003695
 8003648:	08003695 	.word	0x08003695
 800364c:	08003695 	.word	0x08003695
 8003650:	08003685 	.word	0x08003685
 8003654:	08003695 	.word	0x08003695
 8003658:	08003695 	.word	0x08003695
 800365c:	08003695 	.word	0x08003695
 8003660:	0800367d 	.word	0x0800367d
 8003664:	08003695 	.word	0x08003695
 8003668:	08003695 	.word	0x08003695
 800366c:	08003695 	.word	0x08003695
 8003670:	0800368d 	.word	0x0800368d
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e0d8      	b.n	800382e <UART_SetConfig+0x2e6>
 800367c:	2302      	movs	r3, #2
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e0d4      	b.n	800382e <UART_SetConfig+0x2e6>
 8003684:	2304      	movs	r3, #4
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e0d0      	b.n	800382e <UART_SetConfig+0x2e6>
 800368c:	2308      	movs	r3, #8
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e0cc      	b.n	800382e <UART_SetConfig+0x2e6>
 8003694:	2310      	movs	r3, #16
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e0c8      	b.n	800382e <UART_SetConfig+0x2e6>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5e      	ldr	r2, [pc, #376]	; (800381c <UART_SetConfig+0x2d4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d125      	bne.n	80036f2 <UART_SetConfig+0x1aa>
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <UART_SetConfig+0x2cc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d016      	beq.n	80036e2 <UART_SetConfig+0x19a>
 80036b4:	2b30      	cmp	r3, #48	; 0x30
 80036b6:	d818      	bhi.n	80036ea <UART_SetConfig+0x1a2>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d00a      	beq.n	80036d2 <UART_SetConfig+0x18a>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d814      	bhi.n	80036ea <UART_SetConfig+0x1a2>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <UART_SetConfig+0x182>
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d008      	beq.n	80036da <UART_SetConfig+0x192>
 80036c8:	e00f      	b.n	80036ea <UART_SetConfig+0x1a2>
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d0:	e0ad      	b.n	800382e <UART_SetConfig+0x2e6>
 80036d2:	2302      	movs	r3, #2
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d8:	e0a9      	b.n	800382e <UART_SetConfig+0x2e6>
 80036da:	2304      	movs	r3, #4
 80036dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e0:	e0a5      	b.n	800382e <UART_SetConfig+0x2e6>
 80036e2:	2308      	movs	r3, #8
 80036e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e8:	e0a1      	b.n	800382e <UART_SetConfig+0x2e6>
 80036ea:	2310      	movs	r3, #16
 80036ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f0:	e09d      	b.n	800382e <UART_SetConfig+0x2e6>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <UART_SetConfig+0x2d8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d125      	bne.n	8003748 <UART_SetConfig+0x200>
 80036fc:	4b45      	ldr	r3, [pc, #276]	; (8003814 <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003706:	2bc0      	cmp	r3, #192	; 0xc0
 8003708:	d016      	beq.n	8003738 <UART_SetConfig+0x1f0>
 800370a:	2bc0      	cmp	r3, #192	; 0xc0
 800370c:	d818      	bhi.n	8003740 <UART_SetConfig+0x1f8>
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d00a      	beq.n	8003728 <UART_SetConfig+0x1e0>
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d814      	bhi.n	8003740 <UART_SetConfig+0x1f8>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <UART_SetConfig+0x1d8>
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d008      	beq.n	8003730 <UART_SetConfig+0x1e8>
 800371e:	e00f      	b.n	8003740 <UART_SetConfig+0x1f8>
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e082      	b.n	800382e <UART_SetConfig+0x2e6>
 8003728:	2302      	movs	r3, #2
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	e07e      	b.n	800382e <UART_SetConfig+0x2e6>
 8003730:	2304      	movs	r3, #4
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003736:	e07a      	b.n	800382e <UART_SetConfig+0x2e6>
 8003738:	2308      	movs	r3, #8
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e076      	b.n	800382e <UART_SetConfig+0x2e6>
 8003740:	2310      	movs	r3, #16
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e072      	b.n	800382e <UART_SetConfig+0x2e6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a35      	ldr	r2, [pc, #212]	; (8003824 <UART_SetConfig+0x2dc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d12a      	bne.n	80037a8 <UART_SetConfig+0x260>
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003760:	d01a      	beq.n	8003798 <UART_SetConfig+0x250>
 8003762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003766:	d81b      	bhi.n	80037a0 <UART_SetConfig+0x258>
 8003768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376c:	d00c      	beq.n	8003788 <UART_SetConfig+0x240>
 800376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003772:	d815      	bhi.n	80037a0 <UART_SetConfig+0x258>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0x238>
 8003778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377c:	d008      	beq.n	8003790 <UART_SetConfig+0x248>
 800377e:	e00f      	b.n	80037a0 <UART_SetConfig+0x258>
 8003780:	2300      	movs	r3, #0
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e052      	b.n	800382e <UART_SetConfig+0x2e6>
 8003788:	2302      	movs	r3, #2
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e04e      	b.n	800382e <UART_SetConfig+0x2e6>
 8003790:	2304      	movs	r3, #4
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e04a      	b.n	800382e <UART_SetConfig+0x2e6>
 8003798:	2308      	movs	r3, #8
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e046      	b.n	800382e <UART_SetConfig+0x2e6>
 80037a0:	2310      	movs	r3, #16
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e042      	b.n	800382e <UART_SetConfig+0x2e6>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <UART_SetConfig+0x2c4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d13a      	bne.n	8003828 <UART_SetConfig+0x2e0>
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <UART_SetConfig+0x2cc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037c0:	d01a      	beq.n	80037f8 <UART_SetConfig+0x2b0>
 80037c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037c6:	d81b      	bhi.n	8003800 <UART_SetConfig+0x2b8>
 80037c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037cc:	d00c      	beq.n	80037e8 <UART_SetConfig+0x2a0>
 80037ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d2:	d815      	bhi.n	8003800 <UART_SetConfig+0x2b8>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <UART_SetConfig+0x298>
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d008      	beq.n	80037f0 <UART_SetConfig+0x2a8>
 80037de:	e00f      	b.n	8003800 <UART_SetConfig+0x2b8>
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e022      	b.n	800382e <UART_SetConfig+0x2e6>
 80037e8:	2302      	movs	r3, #2
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e01e      	b.n	800382e <UART_SetConfig+0x2e6>
 80037f0:	2304      	movs	r3, #4
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e01a      	b.n	800382e <UART_SetConfig+0x2e6>
 80037f8:	2308      	movs	r3, #8
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e016      	b.n	800382e <UART_SetConfig+0x2e6>
 8003800:	2310      	movs	r3, #16
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e012      	b.n	800382e <UART_SetConfig+0x2e6>
 8003808:	efff69f3 	.word	0xefff69f3
 800380c:	40008000 	.word	0x40008000
 8003810:	40013800 	.word	0x40013800
 8003814:	40021000 	.word	0x40021000
 8003818:	40004400 	.word	0x40004400
 800381c:	40004800 	.word	0x40004800
 8003820:	40004c00 	.word	0x40004c00
 8003824:	40005000 	.word	0x40005000
 8003828:	2310      	movs	r3, #16
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a9f      	ldr	r2, [pc, #636]	; (8003ab0 <UART_SetConfig+0x568>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d17a      	bne.n	800392e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800383c:	2b08      	cmp	r3, #8
 800383e:	d824      	bhi.n	800388a <UART_SetConfig+0x342>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x300>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	0800386d 	.word	0x0800386d
 800384c:	0800388b 	.word	0x0800388b
 8003850:	08003875 	.word	0x08003875
 8003854:	0800388b 	.word	0x0800388b
 8003858:	0800387b 	.word	0x0800387b
 800385c:	0800388b 	.word	0x0800388b
 8003860:	0800388b 	.word	0x0800388b
 8003864:	0800388b 	.word	0x0800388b
 8003868:	08003883 	.word	0x08003883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7fe fd4a 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003870:	61f8      	str	r0, [r7, #28]
        break;
 8003872:	e010      	b.n	8003896 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003874:	4b8f      	ldr	r3, [pc, #572]	; (8003ab4 <UART_SetConfig+0x56c>)
 8003876:	61fb      	str	r3, [r7, #28]
        break;
 8003878:	e00d      	b.n	8003896 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe fcab 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 800387e:	61f8      	str	r0, [r7, #28]
        break;
 8003880:	e009      	b.n	8003896 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003886:	61fb      	str	r3, [r7, #28]
        break;
 8003888:	e005      	b.n	8003896 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80fb 	beq.w	8003a94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d305      	bcc.n	80038ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d903      	bls.n	80038c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038c0:	e0e8      	b.n	8003a94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2200      	movs	r2, #0
 80038c6:	461c      	mov	r4, r3
 80038c8:	4615      	mov	r5, r2
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	022b      	lsls	r3, r5, #8
 80038d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038d8:	0222      	lsls	r2, r4, #8
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	6849      	ldr	r1, [r1, #4]
 80038de:	0849      	lsrs	r1, r1, #1
 80038e0:	2000      	movs	r0, #0
 80038e2:	4688      	mov	r8, r1
 80038e4:	4681      	mov	r9, r0
 80038e6:	eb12 0a08 	adds.w	sl, r2, r8
 80038ea:	eb43 0b09 	adc.w	fp, r3, r9
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fc:	4650      	mov	r0, sl
 80038fe:	4659      	mov	r1, fp
 8003900:	f7fc fcbe 	bl	8000280 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003912:	d308      	bcc.n	8003926 <UART_SetConfig+0x3de>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391a:	d204      	bcs.n	8003926 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	60da      	str	r2, [r3, #12]
 8003924:	e0b6      	b.n	8003a94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800392c:	e0b2      	b.n	8003a94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003936:	d15e      	bne.n	80039f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800393c:	2b08      	cmp	r3, #8
 800393e:	d828      	bhi.n	8003992 <UART_SetConfig+0x44a>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0x400>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7fe fcca 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e014      	b.n	800399e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fcdc 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8003978:	61f8      	str	r0, [r7, #28]
        break;
 800397a:	e010      	b.n	800399e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <UART_SetConfig+0x56c>)
 800397e:	61fb      	str	r3, [r7, #28]
        break;
 8003980:	e00d      	b.n	800399e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7fe fc27 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8003986:	61f8      	str	r0, [r7, #28]
        break;
 8003988:	e009      	b.n	800399e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	61fb      	str	r3, [r7, #28]
        break;
 8003990:	e005      	b.n	800399e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800399c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d077      	beq.n	8003a94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005a      	lsls	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	441a      	add	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b0f      	cmp	r3, #15
 80039be:	d916      	bls.n	80039ee <UART_SetConfig+0x4a6>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d212      	bcs.n	80039ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f023 030f 	bic.w	r3, r3, #15
 80039d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	b29a      	uxth	r2, r3
 80039de:	8afb      	ldrh	r3, [r7, #22]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	8afa      	ldrh	r2, [r7, #22]
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	e052      	b.n	8003a94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039f4:	e04e      	b.n	8003a94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d827      	bhi.n	8003a4e <UART_SetConfig+0x506>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x4bc>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a3f 	.word	0x08003a3f
 8003a18:	08003a4f 	.word	0x08003a4f
 8003a1c:	08003a4f 	.word	0x08003a4f
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a47 	.word	0x08003a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fc6c 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	61f8      	str	r0, [r7, #28]
        break;
 8003a2e:	e014      	b.n	8003a5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a30:	f7fe fc7e 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8003a34:	61f8      	str	r0, [r7, #28]
        break;
 8003a36:	e010      	b.n	8003a5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a38:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <UART_SetConfig+0x56c>)
 8003a3a:	61fb      	str	r3, [r7, #28]
        break;
 8003a3c:	e00d      	b.n	8003a5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3e:	f7fe fbc9 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8003a42:	61f8      	str	r0, [r7, #28]
        break;
 8003a44:	e009      	b.n	8003a5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	61fb      	str	r3, [r7, #28]
        break;
 8003a4c:	e005      	b.n	8003a5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a58:	bf00      	nop
    }

    if (pclk != 0U)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d019      	beq.n	8003a94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	085a      	lsrs	r2, r3, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	d909      	bls.n	8003a8e <UART_SetConfig+0x546>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d205      	bcs.n	8003a8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	e002      	b.n	8003a94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003aa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3728      	adds	r7, #40	; 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aae:	bf00      	nop
 8003ab0:	40008000 	.word	0x40008000
 8003ab4:	00f42400 	.word	0x00f42400

08003ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01a      	beq.n	8003bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb6:	d10a      	bne.n	8003bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c0c:	f7fd fa38 	bl	8001080 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d10e      	bne.n	8003c3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f82d 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e023      	b.n	8003c86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d10e      	bne.n	8003c6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f817 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e00d      	b.n	8003c86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b09c      	sub	sp, #112	; 0x70
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9e:	e0a5      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	f000 80a1 	beq.w	8003dec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fd f9e9 	bl	8001080 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d13e      	bne.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e6      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e067      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d04f      	beq.n	8003dec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d147      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d64:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	613b      	str	r3, [r7, #16]
   return(result);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003db8:	623a      	str	r2, [r7, #32]
 8003dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	69f9      	ldr	r1, [r7, #28]
 8003dbe:	6a3a      	ldr	r2, [r7, #32]
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e010      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4013      	ands	r3, r2
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f43f af4a 	beq.w	8003ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3770      	adds	r7, #112	; 0x70
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b095      	sub	sp, #84	; 0x54
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e6      	bne.n	8003e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d118      	bne.n	8003ebe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f023 0310 	bic.w	r3, r3, #16
 8003ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ed0:	bf00      	nop
 8003ed2:	3754      	adds	r7, #84	; 0x54
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fb0e 	bl	800351c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6979      	ldr	r1, [r7, #20]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e6      	bne.n	8003f10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fc fb5e 	bl	8000610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f54:	bf00      	nop
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <__errno>:
 8003f70:	4b01      	ldr	r3, [pc, #4]	; (8003f78 <__errno+0x8>)
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	200007dc 	.word	0x200007dc

08003f7c <__libc_init_array>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	4d0d      	ldr	r5, [pc, #52]	; (8003fb4 <__libc_init_array+0x38>)
 8003f80:	4c0d      	ldr	r4, [pc, #52]	; (8003fb8 <__libc_init_array+0x3c>)
 8003f82:	1b64      	subs	r4, r4, r5
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	2600      	movs	r6, #0
 8003f88:	42a6      	cmp	r6, r4
 8003f8a:	d109      	bne.n	8003fa0 <__libc_init_array+0x24>
 8003f8c:	4d0b      	ldr	r5, [pc, #44]	; (8003fbc <__libc_init_array+0x40>)
 8003f8e:	4c0c      	ldr	r4, [pc, #48]	; (8003fc0 <__libc_init_array+0x44>)
 8003f90:	f001 f824 	bl	8004fdc <_init>
 8003f94:	1b64      	subs	r4, r4, r5
 8003f96:	10a4      	asrs	r4, r4, #2
 8003f98:	2600      	movs	r6, #0
 8003f9a:	42a6      	cmp	r6, r4
 8003f9c:	d105      	bne.n	8003faa <__libc_init_array+0x2e>
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa4:	4798      	blx	r3
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7ee      	b.n	8003f88 <__libc_init_array+0xc>
 8003faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fae:	4798      	blx	r3
 8003fb0:	3601      	adds	r6, #1
 8003fb2:	e7f2      	b.n	8003f9a <__libc_init_array+0x1e>
 8003fb4:	08005124 	.word	0x08005124
 8003fb8:	08005124 	.word	0x08005124
 8003fbc:	08005124 	.word	0x08005124
 8003fc0:	08005128 	.word	0x08005128

08003fc4 <memset>:
 8003fc4:	4402      	add	r2, r0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <iprintf>:
 8003fd4:	b40f      	push	{r0, r1, r2, r3}
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <iprintf+0x2c>)
 8003fd8:	b513      	push	{r0, r1, r4, lr}
 8003fda:	681c      	ldr	r4, [r3, #0]
 8003fdc:	b124      	cbz	r4, 8003fe8 <iprintf+0x14>
 8003fde:	69a3      	ldr	r3, [r4, #24]
 8003fe0:	b913      	cbnz	r3, 8003fe8 <iprintf+0x14>
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 fa5e 	bl	80044a4 <__sinit>
 8003fe8:	ab05      	add	r3, sp, #20
 8003fea:	9a04      	ldr	r2, [sp, #16]
 8003fec:	68a1      	ldr	r1, [r4, #8]
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 fc67 	bl	80048c4 <_vfiprintf_r>
 8003ff6:	b002      	add	sp, #8
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	b004      	add	sp, #16
 8003ffe:	4770      	bx	lr
 8004000:	200007dc 	.word	0x200007dc

08004004 <_puts_r>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	460e      	mov	r6, r1
 8004008:	4605      	mov	r5, r0
 800400a:	b118      	cbz	r0, 8004014 <_puts_r+0x10>
 800400c:	6983      	ldr	r3, [r0, #24]
 800400e:	b90b      	cbnz	r3, 8004014 <_puts_r+0x10>
 8004010:	f000 fa48 	bl	80044a4 <__sinit>
 8004014:	69ab      	ldr	r3, [r5, #24]
 8004016:	68ac      	ldr	r4, [r5, #8]
 8004018:	b913      	cbnz	r3, 8004020 <_puts_r+0x1c>
 800401a:	4628      	mov	r0, r5
 800401c:	f000 fa42 	bl	80044a4 <__sinit>
 8004020:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <_puts_r+0xd0>)
 8004022:	429c      	cmp	r4, r3
 8004024:	d120      	bne.n	8004068 <_puts_r+0x64>
 8004026:	686c      	ldr	r4, [r5, #4]
 8004028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800402a:	07db      	lsls	r3, r3, #31
 800402c:	d405      	bmi.n	800403a <_puts_r+0x36>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	0598      	lsls	r0, r3, #22
 8004032:	d402      	bmi.n	800403a <_puts_r+0x36>
 8004034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004036:	f000 fad3 	bl	80045e0 <__retarget_lock_acquire_recursive>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	0719      	lsls	r1, r3, #28
 800403e:	d51d      	bpl.n	800407c <_puts_r+0x78>
 8004040:	6923      	ldr	r3, [r4, #16]
 8004042:	b1db      	cbz	r3, 800407c <_puts_r+0x78>
 8004044:	3e01      	subs	r6, #1
 8004046:	68a3      	ldr	r3, [r4, #8]
 8004048:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800404c:	3b01      	subs	r3, #1
 800404e:	60a3      	str	r3, [r4, #8]
 8004050:	bb39      	cbnz	r1, 80040a2 <_puts_r+0x9e>
 8004052:	2b00      	cmp	r3, #0
 8004054:	da38      	bge.n	80040c8 <_puts_r+0xc4>
 8004056:	4622      	mov	r2, r4
 8004058:	210a      	movs	r1, #10
 800405a:	4628      	mov	r0, r5
 800405c:	f000 f848 	bl	80040f0 <__swbuf_r>
 8004060:	3001      	adds	r0, #1
 8004062:	d011      	beq.n	8004088 <_puts_r+0x84>
 8004064:	250a      	movs	r5, #10
 8004066:	e011      	b.n	800408c <_puts_r+0x88>
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <_puts_r+0xd4>)
 800406a:	429c      	cmp	r4, r3
 800406c:	d101      	bne.n	8004072 <_puts_r+0x6e>
 800406e:	68ac      	ldr	r4, [r5, #8]
 8004070:	e7da      	b.n	8004028 <_puts_r+0x24>
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <_puts_r+0xd8>)
 8004074:	429c      	cmp	r4, r3
 8004076:	bf08      	it	eq
 8004078:	68ec      	ldreq	r4, [r5, #12]
 800407a:	e7d5      	b.n	8004028 <_puts_r+0x24>
 800407c:	4621      	mov	r1, r4
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f888 	bl	8004194 <__swsetup_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	d0dd      	beq.n	8004044 <_puts_r+0x40>
 8004088:	f04f 35ff 	mov.w	r5, #4294967295
 800408c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800408e:	07da      	lsls	r2, r3, #31
 8004090:	d405      	bmi.n	800409e <_puts_r+0x9a>
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	059b      	lsls	r3, r3, #22
 8004096:	d402      	bmi.n	800409e <_puts_r+0x9a>
 8004098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800409a:	f000 faa2 	bl	80045e2 <__retarget_lock_release_recursive>
 800409e:	4628      	mov	r0, r5
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da04      	bge.n	80040b0 <_puts_r+0xac>
 80040a6:	69a2      	ldr	r2, [r4, #24]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	dc06      	bgt.n	80040ba <_puts_r+0xb6>
 80040ac:	290a      	cmp	r1, #10
 80040ae:	d004      	beq.n	80040ba <_puts_r+0xb6>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	6022      	str	r2, [r4, #0]
 80040b6:	7019      	strb	r1, [r3, #0]
 80040b8:	e7c5      	b.n	8004046 <_puts_r+0x42>
 80040ba:	4622      	mov	r2, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	f000 f817 	bl	80040f0 <__swbuf_r>
 80040c2:	3001      	adds	r0, #1
 80040c4:	d1bf      	bne.n	8004046 <_puts_r+0x42>
 80040c6:	e7df      	b.n	8004088 <_puts_r+0x84>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	250a      	movs	r5, #10
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	6022      	str	r2, [r4, #0]
 80040d0:	701d      	strb	r5, [r3, #0]
 80040d2:	e7db      	b.n	800408c <_puts_r+0x88>
 80040d4:	080050a8 	.word	0x080050a8
 80040d8:	080050c8 	.word	0x080050c8
 80040dc:	08005088 	.word	0x08005088

080040e0 <puts>:
 80040e0:	4b02      	ldr	r3, [pc, #8]	; (80040ec <puts+0xc>)
 80040e2:	4601      	mov	r1, r0
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	f7ff bf8d 	b.w	8004004 <_puts_r>
 80040ea:	bf00      	nop
 80040ec:	200007dc 	.word	0x200007dc

080040f0 <__swbuf_r>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	460e      	mov	r6, r1
 80040f4:	4614      	mov	r4, r2
 80040f6:	4605      	mov	r5, r0
 80040f8:	b118      	cbz	r0, 8004102 <__swbuf_r+0x12>
 80040fa:	6983      	ldr	r3, [r0, #24]
 80040fc:	b90b      	cbnz	r3, 8004102 <__swbuf_r+0x12>
 80040fe:	f000 f9d1 	bl	80044a4 <__sinit>
 8004102:	4b21      	ldr	r3, [pc, #132]	; (8004188 <__swbuf_r+0x98>)
 8004104:	429c      	cmp	r4, r3
 8004106:	d12b      	bne.n	8004160 <__swbuf_r+0x70>
 8004108:	686c      	ldr	r4, [r5, #4]
 800410a:	69a3      	ldr	r3, [r4, #24]
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	071a      	lsls	r2, r3, #28
 8004112:	d52f      	bpl.n	8004174 <__swbuf_r+0x84>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	b36b      	cbz	r3, 8004174 <__swbuf_r+0x84>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	1ac0      	subs	r0, r0, r3
 800411e:	6963      	ldr	r3, [r4, #20]
 8004120:	b2f6      	uxtb	r6, r6
 8004122:	4283      	cmp	r3, r0
 8004124:	4637      	mov	r7, r6
 8004126:	dc04      	bgt.n	8004132 <__swbuf_r+0x42>
 8004128:	4621      	mov	r1, r4
 800412a:	4628      	mov	r0, r5
 800412c:	f000 f926 	bl	800437c <_fflush_r>
 8004130:	bb30      	cbnz	r0, 8004180 <__swbuf_r+0x90>
 8004132:	68a3      	ldr	r3, [r4, #8]
 8004134:	3b01      	subs	r3, #1
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	701e      	strb	r6, [r3, #0]
 8004140:	6963      	ldr	r3, [r4, #20]
 8004142:	3001      	adds	r0, #1
 8004144:	4283      	cmp	r3, r0
 8004146:	d004      	beq.n	8004152 <__swbuf_r+0x62>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	07db      	lsls	r3, r3, #31
 800414c:	d506      	bpl.n	800415c <__swbuf_r+0x6c>
 800414e:	2e0a      	cmp	r6, #10
 8004150:	d104      	bne.n	800415c <__swbuf_r+0x6c>
 8004152:	4621      	mov	r1, r4
 8004154:	4628      	mov	r0, r5
 8004156:	f000 f911 	bl	800437c <_fflush_r>
 800415a:	b988      	cbnz	r0, 8004180 <__swbuf_r+0x90>
 800415c:	4638      	mov	r0, r7
 800415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <__swbuf_r+0x9c>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d101      	bne.n	800416a <__swbuf_r+0x7a>
 8004166:	68ac      	ldr	r4, [r5, #8]
 8004168:	e7cf      	b.n	800410a <__swbuf_r+0x1a>
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <__swbuf_r+0xa0>)
 800416c:	429c      	cmp	r4, r3
 800416e:	bf08      	it	eq
 8004170:	68ec      	ldreq	r4, [r5, #12]
 8004172:	e7ca      	b.n	800410a <__swbuf_r+0x1a>
 8004174:	4621      	mov	r1, r4
 8004176:	4628      	mov	r0, r5
 8004178:	f000 f80c 	bl	8004194 <__swsetup_r>
 800417c:	2800      	cmp	r0, #0
 800417e:	d0cb      	beq.n	8004118 <__swbuf_r+0x28>
 8004180:	f04f 37ff 	mov.w	r7, #4294967295
 8004184:	e7ea      	b.n	800415c <__swbuf_r+0x6c>
 8004186:	bf00      	nop
 8004188:	080050a8 	.word	0x080050a8
 800418c:	080050c8 	.word	0x080050c8
 8004190:	08005088 	.word	0x08005088

08004194 <__swsetup_r>:
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <__swsetup_r+0xcc>)
 8004196:	b570      	push	{r4, r5, r6, lr}
 8004198:	681d      	ldr	r5, [r3, #0]
 800419a:	4606      	mov	r6, r0
 800419c:	460c      	mov	r4, r1
 800419e:	b125      	cbz	r5, 80041aa <__swsetup_r+0x16>
 80041a0:	69ab      	ldr	r3, [r5, #24]
 80041a2:	b913      	cbnz	r3, 80041aa <__swsetup_r+0x16>
 80041a4:	4628      	mov	r0, r5
 80041a6:	f000 f97d 	bl	80044a4 <__sinit>
 80041aa:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <__swsetup_r+0xd0>)
 80041ac:	429c      	cmp	r4, r3
 80041ae:	d10f      	bne.n	80041d0 <__swsetup_r+0x3c>
 80041b0:	686c      	ldr	r4, [r5, #4]
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041b8:	0719      	lsls	r1, r3, #28
 80041ba:	d42c      	bmi.n	8004216 <__swsetup_r+0x82>
 80041bc:	06dd      	lsls	r5, r3, #27
 80041be:	d411      	bmi.n	80041e4 <__swsetup_r+0x50>
 80041c0:	2309      	movs	r3, #9
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041c8:	81a3      	strh	r3, [r4, #12]
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
 80041ce:	e03e      	b.n	800424e <__swsetup_r+0xba>
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <__swsetup_r+0xd4>)
 80041d2:	429c      	cmp	r4, r3
 80041d4:	d101      	bne.n	80041da <__swsetup_r+0x46>
 80041d6:	68ac      	ldr	r4, [r5, #8]
 80041d8:	e7eb      	b.n	80041b2 <__swsetup_r+0x1e>
 80041da:	4b24      	ldr	r3, [pc, #144]	; (800426c <__swsetup_r+0xd8>)
 80041dc:	429c      	cmp	r4, r3
 80041de:	bf08      	it	eq
 80041e0:	68ec      	ldreq	r4, [r5, #12]
 80041e2:	e7e6      	b.n	80041b2 <__swsetup_r+0x1e>
 80041e4:	0758      	lsls	r0, r3, #29
 80041e6:	d512      	bpl.n	800420e <__swsetup_r+0x7a>
 80041e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ea:	b141      	cbz	r1, 80041fe <__swsetup_r+0x6a>
 80041ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f0:	4299      	cmp	r1, r3
 80041f2:	d002      	beq.n	80041fa <__swsetup_r+0x66>
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 fa5b 	bl	80046b0 <_free_r>
 80041fa:	2300      	movs	r3, #0
 80041fc:	6363      	str	r3, [r4, #52]	; 0x34
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004204:	81a3      	strh	r3, [r4, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	f043 0308 	orr.w	r3, r3, #8
 8004214:	81a3      	strh	r3, [r4, #12]
 8004216:	6923      	ldr	r3, [r4, #16]
 8004218:	b94b      	cbnz	r3, 800422e <__swsetup_r+0x9a>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	d003      	beq.n	800422e <__swsetup_r+0x9a>
 8004226:	4621      	mov	r1, r4
 8004228:	4630      	mov	r0, r6
 800422a:	f000 fa01 	bl	8004630 <__smakebuf_r>
 800422e:	89a0      	ldrh	r0, [r4, #12]
 8004230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004234:	f010 0301 	ands.w	r3, r0, #1
 8004238:	d00a      	beq.n	8004250 <__swsetup_r+0xbc>
 800423a:	2300      	movs	r3, #0
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	6963      	ldr	r3, [r4, #20]
 8004240:	425b      	negs	r3, r3
 8004242:	61a3      	str	r3, [r4, #24]
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	b943      	cbnz	r3, 800425a <__swsetup_r+0xc6>
 8004248:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800424c:	d1ba      	bne.n	80041c4 <__swsetup_r+0x30>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	0781      	lsls	r1, r0, #30
 8004252:	bf58      	it	pl
 8004254:	6963      	ldrpl	r3, [r4, #20]
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	e7f4      	b.n	8004244 <__swsetup_r+0xb0>
 800425a:	2000      	movs	r0, #0
 800425c:	e7f7      	b.n	800424e <__swsetup_r+0xba>
 800425e:	bf00      	nop
 8004260:	200007dc 	.word	0x200007dc
 8004264:	080050a8 	.word	0x080050a8
 8004268:	080050c8 	.word	0x080050c8
 800426c:	08005088 	.word	0x08005088

08004270 <__sflush_r>:
 8004270:	898a      	ldrh	r2, [r1, #12]
 8004272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004276:	4605      	mov	r5, r0
 8004278:	0710      	lsls	r0, r2, #28
 800427a:	460c      	mov	r4, r1
 800427c:	d458      	bmi.n	8004330 <__sflush_r+0xc0>
 800427e:	684b      	ldr	r3, [r1, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	dc05      	bgt.n	8004290 <__sflush_r+0x20>
 8004284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	dc02      	bgt.n	8004290 <__sflush_r+0x20>
 800428a:	2000      	movs	r0, #0
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004292:	2e00      	cmp	r6, #0
 8004294:	d0f9      	beq.n	800428a <__sflush_r+0x1a>
 8004296:	2300      	movs	r3, #0
 8004298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800429c:	682f      	ldr	r7, [r5, #0]
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	d032      	beq.n	8004308 <__sflush_r+0x98>
 80042a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	075a      	lsls	r2, r3, #29
 80042a8:	d505      	bpl.n	80042b6 <__sflush_r+0x46>
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	1ac0      	subs	r0, r0, r3
 80042ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042b0:	b10b      	cbz	r3, 80042b6 <__sflush_r+0x46>
 80042b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042b4:	1ac0      	subs	r0, r0, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	4602      	mov	r2, r0
 80042ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042bc:	6a21      	ldr	r1, [r4, #32]
 80042be:	4628      	mov	r0, r5
 80042c0:	47b0      	blx	r6
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	d106      	bne.n	80042d6 <__sflush_r+0x66>
 80042c8:	6829      	ldr	r1, [r5, #0]
 80042ca:	291d      	cmp	r1, #29
 80042cc:	d82c      	bhi.n	8004328 <__sflush_r+0xb8>
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <__sflush_r+0x108>)
 80042d0:	40ca      	lsrs	r2, r1
 80042d2:	07d6      	lsls	r6, r2, #31
 80042d4:	d528      	bpl.n	8004328 <__sflush_r+0xb8>
 80042d6:	2200      	movs	r2, #0
 80042d8:	6062      	str	r2, [r4, #4]
 80042da:	04d9      	lsls	r1, r3, #19
 80042dc:	6922      	ldr	r2, [r4, #16]
 80042de:	6022      	str	r2, [r4, #0]
 80042e0:	d504      	bpl.n	80042ec <__sflush_r+0x7c>
 80042e2:	1c42      	adds	r2, r0, #1
 80042e4:	d101      	bne.n	80042ea <__sflush_r+0x7a>
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	b903      	cbnz	r3, 80042ec <__sflush_r+0x7c>
 80042ea:	6560      	str	r0, [r4, #84]	; 0x54
 80042ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ee:	602f      	str	r7, [r5, #0]
 80042f0:	2900      	cmp	r1, #0
 80042f2:	d0ca      	beq.n	800428a <__sflush_r+0x1a>
 80042f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f8:	4299      	cmp	r1, r3
 80042fa:	d002      	beq.n	8004302 <__sflush_r+0x92>
 80042fc:	4628      	mov	r0, r5
 80042fe:	f000 f9d7 	bl	80046b0 <_free_r>
 8004302:	2000      	movs	r0, #0
 8004304:	6360      	str	r0, [r4, #52]	; 0x34
 8004306:	e7c1      	b.n	800428c <__sflush_r+0x1c>
 8004308:	6a21      	ldr	r1, [r4, #32]
 800430a:	2301      	movs	r3, #1
 800430c:	4628      	mov	r0, r5
 800430e:	47b0      	blx	r6
 8004310:	1c41      	adds	r1, r0, #1
 8004312:	d1c7      	bne.n	80042a4 <__sflush_r+0x34>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0c4      	beq.n	80042a4 <__sflush_r+0x34>
 800431a:	2b1d      	cmp	r3, #29
 800431c:	d001      	beq.n	8004322 <__sflush_r+0xb2>
 800431e:	2b16      	cmp	r3, #22
 8004320:	d101      	bne.n	8004326 <__sflush_r+0xb6>
 8004322:	602f      	str	r7, [r5, #0]
 8004324:	e7b1      	b.n	800428a <__sflush_r+0x1a>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	e7ad      	b.n	800428c <__sflush_r+0x1c>
 8004330:	690f      	ldr	r7, [r1, #16]
 8004332:	2f00      	cmp	r7, #0
 8004334:	d0a9      	beq.n	800428a <__sflush_r+0x1a>
 8004336:	0793      	lsls	r3, r2, #30
 8004338:	680e      	ldr	r6, [r1, #0]
 800433a:	bf08      	it	eq
 800433c:	694b      	ldreq	r3, [r1, #20]
 800433e:	600f      	str	r7, [r1, #0]
 8004340:	bf18      	it	ne
 8004342:	2300      	movne	r3, #0
 8004344:	eba6 0807 	sub.w	r8, r6, r7
 8004348:	608b      	str	r3, [r1, #8]
 800434a:	f1b8 0f00 	cmp.w	r8, #0
 800434e:	dd9c      	ble.n	800428a <__sflush_r+0x1a>
 8004350:	6a21      	ldr	r1, [r4, #32]
 8004352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004354:	4643      	mov	r3, r8
 8004356:	463a      	mov	r2, r7
 8004358:	4628      	mov	r0, r5
 800435a:	47b0      	blx	r6
 800435c:	2800      	cmp	r0, #0
 800435e:	dc06      	bgt.n	800436e <__sflush_r+0xfe>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	e78e      	b.n	800428c <__sflush_r+0x1c>
 800436e:	4407      	add	r7, r0
 8004370:	eba8 0800 	sub.w	r8, r8, r0
 8004374:	e7e9      	b.n	800434a <__sflush_r+0xda>
 8004376:	bf00      	nop
 8004378:	20400001 	.word	0x20400001

0800437c <_fflush_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	4605      	mov	r5, r0
 8004382:	460c      	mov	r4, r1
 8004384:	b913      	cbnz	r3, 800438c <_fflush_r+0x10>
 8004386:	2500      	movs	r5, #0
 8004388:	4628      	mov	r0, r5
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	b118      	cbz	r0, 8004396 <_fflush_r+0x1a>
 800438e:	6983      	ldr	r3, [r0, #24]
 8004390:	b90b      	cbnz	r3, 8004396 <_fflush_r+0x1a>
 8004392:	f000 f887 	bl	80044a4 <__sinit>
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <_fflush_r+0x6c>)
 8004398:	429c      	cmp	r4, r3
 800439a:	d11b      	bne.n	80043d4 <_fflush_r+0x58>
 800439c:	686c      	ldr	r4, [r5, #4]
 800439e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ef      	beq.n	8004386 <_fflush_r+0xa>
 80043a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043a8:	07d0      	lsls	r0, r2, #31
 80043aa:	d404      	bmi.n	80043b6 <_fflush_r+0x3a>
 80043ac:	0599      	lsls	r1, r3, #22
 80043ae:	d402      	bmi.n	80043b6 <_fflush_r+0x3a>
 80043b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043b2:	f000 f915 	bl	80045e0 <__retarget_lock_acquire_recursive>
 80043b6:	4628      	mov	r0, r5
 80043b8:	4621      	mov	r1, r4
 80043ba:	f7ff ff59 	bl	8004270 <__sflush_r>
 80043be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043c0:	07da      	lsls	r2, r3, #31
 80043c2:	4605      	mov	r5, r0
 80043c4:	d4e0      	bmi.n	8004388 <_fflush_r+0xc>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	059b      	lsls	r3, r3, #22
 80043ca:	d4dd      	bmi.n	8004388 <_fflush_r+0xc>
 80043cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ce:	f000 f908 	bl	80045e2 <__retarget_lock_release_recursive>
 80043d2:	e7d9      	b.n	8004388 <_fflush_r+0xc>
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <_fflush_r+0x70>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d101      	bne.n	80043de <_fflush_r+0x62>
 80043da:	68ac      	ldr	r4, [r5, #8]
 80043dc:	e7df      	b.n	800439e <_fflush_r+0x22>
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <_fflush_r+0x74>)
 80043e0:	429c      	cmp	r4, r3
 80043e2:	bf08      	it	eq
 80043e4:	68ec      	ldreq	r4, [r5, #12]
 80043e6:	e7da      	b.n	800439e <_fflush_r+0x22>
 80043e8:	080050a8 	.word	0x080050a8
 80043ec:	080050c8 	.word	0x080050c8
 80043f0:	08005088 	.word	0x08005088

080043f4 <std>:
 80043f4:	2300      	movs	r3, #0
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	e9c0 3300 	strd	r3, r3, [r0]
 80043fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004402:	6083      	str	r3, [r0, #8]
 8004404:	8181      	strh	r1, [r0, #12]
 8004406:	6643      	str	r3, [r0, #100]	; 0x64
 8004408:	81c2      	strh	r2, [r0, #14]
 800440a:	6183      	str	r3, [r0, #24]
 800440c:	4619      	mov	r1, r3
 800440e:	2208      	movs	r2, #8
 8004410:	305c      	adds	r0, #92	; 0x5c
 8004412:	f7ff fdd7 	bl	8003fc4 <memset>
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <std+0x38>)
 8004418:	6263      	str	r3, [r4, #36]	; 0x24
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <std+0x3c>)
 800441c:	62a3      	str	r3, [r4, #40]	; 0x28
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <std+0x40>)
 8004420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <std+0x44>)
 8004424:	6224      	str	r4, [r4, #32]
 8004426:	6323      	str	r3, [r4, #48]	; 0x30
 8004428:	bd10      	pop	{r4, pc}
 800442a:	bf00      	nop
 800442c:	08004e6d 	.word	0x08004e6d
 8004430:	08004e8f 	.word	0x08004e8f
 8004434:	08004ec7 	.word	0x08004ec7
 8004438:	08004eeb 	.word	0x08004eeb

0800443c <_cleanup_r>:
 800443c:	4901      	ldr	r1, [pc, #4]	; (8004444 <_cleanup_r+0x8>)
 800443e:	f000 b8af 	b.w	80045a0 <_fwalk_reent>
 8004442:	bf00      	nop
 8004444:	0800437d 	.word	0x0800437d

08004448 <__sfmoreglue>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	2268      	movs	r2, #104	; 0x68
 800444c:	1e4d      	subs	r5, r1, #1
 800444e:	4355      	muls	r5, r2
 8004450:	460e      	mov	r6, r1
 8004452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004456:	f000 f997 	bl	8004788 <_malloc_r>
 800445a:	4604      	mov	r4, r0
 800445c:	b140      	cbz	r0, 8004470 <__sfmoreglue+0x28>
 800445e:	2100      	movs	r1, #0
 8004460:	e9c0 1600 	strd	r1, r6, [r0]
 8004464:	300c      	adds	r0, #12
 8004466:	60a0      	str	r0, [r4, #8]
 8004468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800446c:	f7ff fdaa 	bl	8003fc4 <memset>
 8004470:	4620      	mov	r0, r4
 8004472:	bd70      	pop	{r4, r5, r6, pc}

08004474 <__sfp_lock_acquire>:
 8004474:	4801      	ldr	r0, [pc, #4]	; (800447c <__sfp_lock_acquire+0x8>)
 8004476:	f000 b8b3 	b.w	80045e0 <__retarget_lock_acquire_recursive>
 800447a:	bf00      	nop
 800447c:	20000b0d 	.word	0x20000b0d

08004480 <__sfp_lock_release>:
 8004480:	4801      	ldr	r0, [pc, #4]	; (8004488 <__sfp_lock_release+0x8>)
 8004482:	f000 b8ae 	b.w	80045e2 <__retarget_lock_release_recursive>
 8004486:	bf00      	nop
 8004488:	20000b0d 	.word	0x20000b0d

0800448c <__sinit_lock_acquire>:
 800448c:	4801      	ldr	r0, [pc, #4]	; (8004494 <__sinit_lock_acquire+0x8>)
 800448e:	f000 b8a7 	b.w	80045e0 <__retarget_lock_acquire_recursive>
 8004492:	bf00      	nop
 8004494:	20000b0e 	.word	0x20000b0e

08004498 <__sinit_lock_release>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__sinit_lock_release+0x8>)
 800449a:	f000 b8a2 	b.w	80045e2 <__retarget_lock_release_recursive>
 800449e:	bf00      	nop
 80044a0:	20000b0e 	.word	0x20000b0e

080044a4 <__sinit>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4604      	mov	r4, r0
 80044a8:	f7ff fff0 	bl	800448c <__sinit_lock_acquire>
 80044ac:	69a3      	ldr	r3, [r4, #24]
 80044ae:	b11b      	cbz	r3, 80044b8 <__sinit+0x14>
 80044b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b4:	f7ff bff0 	b.w	8004498 <__sinit_lock_release>
 80044b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044bc:	6523      	str	r3, [r4, #80]	; 0x50
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <__sinit+0x68>)
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <__sinit+0x6c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	bf04      	itt	eq
 80044ca:	2301      	moveq	r3, #1
 80044cc:	61a3      	streq	r3, [r4, #24]
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 f820 	bl	8004514 <__sfp>
 80044d4:	6060      	str	r0, [r4, #4]
 80044d6:	4620      	mov	r0, r4
 80044d8:	f000 f81c 	bl	8004514 <__sfp>
 80044dc:	60a0      	str	r0, [r4, #8]
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 f818 	bl	8004514 <__sfp>
 80044e4:	2200      	movs	r2, #0
 80044e6:	60e0      	str	r0, [r4, #12]
 80044e8:	2104      	movs	r1, #4
 80044ea:	6860      	ldr	r0, [r4, #4]
 80044ec:	f7ff ff82 	bl	80043f4 <std>
 80044f0:	68a0      	ldr	r0, [r4, #8]
 80044f2:	2201      	movs	r2, #1
 80044f4:	2109      	movs	r1, #9
 80044f6:	f7ff ff7d 	bl	80043f4 <std>
 80044fa:	68e0      	ldr	r0, [r4, #12]
 80044fc:	2202      	movs	r2, #2
 80044fe:	2112      	movs	r1, #18
 8004500:	f7ff ff78 	bl	80043f4 <std>
 8004504:	2301      	movs	r3, #1
 8004506:	61a3      	str	r3, [r4, #24]
 8004508:	e7d2      	b.n	80044b0 <__sinit+0xc>
 800450a:	bf00      	nop
 800450c:	08005084 	.word	0x08005084
 8004510:	0800443d 	.word	0x0800443d

08004514 <__sfp>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	4607      	mov	r7, r0
 8004518:	f7ff ffac 	bl	8004474 <__sfp_lock_acquire>
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <__sfp+0x84>)
 800451e:	681e      	ldr	r6, [r3, #0]
 8004520:	69b3      	ldr	r3, [r6, #24]
 8004522:	b913      	cbnz	r3, 800452a <__sfp+0x16>
 8004524:	4630      	mov	r0, r6
 8004526:	f7ff ffbd 	bl	80044a4 <__sinit>
 800452a:	3648      	adds	r6, #72	; 0x48
 800452c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004530:	3b01      	subs	r3, #1
 8004532:	d503      	bpl.n	800453c <__sfp+0x28>
 8004534:	6833      	ldr	r3, [r6, #0]
 8004536:	b30b      	cbz	r3, 800457c <__sfp+0x68>
 8004538:	6836      	ldr	r6, [r6, #0]
 800453a:	e7f7      	b.n	800452c <__sfp+0x18>
 800453c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004540:	b9d5      	cbnz	r5, 8004578 <__sfp+0x64>
 8004542:	4b16      	ldr	r3, [pc, #88]	; (800459c <__sfp+0x88>)
 8004544:	60e3      	str	r3, [r4, #12]
 8004546:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800454a:	6665      	str	r5, [r4, #100]	; 0x64
 800454c:	f000 f847 	bl	80045de <__retarget_lock_init_recursive>
 8004550:	f7ff ff96 	bl	8004480 <__sfp_lock_release>
 8004554:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004558:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800455c:	6025      	str	r5, [r4, #0]
 800455e:	61a5      	str	r5, [r4, #24]
 8004560:	2208      	movs	r2, #8
 8004562:	4629      	mov	r1, r5
 8004564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004568:	f7ff fd2c 	bl	8003fc4 <memset>
 800456c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004574:	4620      	mov	r0, r4
 8004576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004578:	3468      	adds	r4, #104	; 0x68
 800457a:	e7d9      	b.n	8004530 <__sfp+0x1c>
 800457c:	2104      	movs	r1, #4
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff ff62 	bl	8004448 <__sfmoreglue>
 8004584:	4604      	mov	r4, r0
 8004586:	6030      	str	r0, [r6, #0]
 8004588:	2800      	cmp	r0, #0
 800458a:	d1d5      	bne.n	8004538 <__sfp+0x24>
 800458c:	f7ff ff78 	bl	8004480 <__sfp_lock_release>
 8004590:	230c      	movs	r3, #12
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	e7ee      	b.n	8004574 <__sfp+0x60>
 8004596:	bf00      	nop
 8004598:	08005084 	.word	0x08005084
 800459c:	ffff0001 	.word	0xffff0001

080045a0 <_fwalk_reent>:
 80045a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a4:	4606      	mov	r6, r0
 80045a6:	4688      	mov	r8, r1
 80045a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045ac:	2700      	movs	r7, #0
 80045ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045b2:	f1b9 0901 	subs.w	r9, r9, #1
 80045b6:	d505      	bpl.n	80045c4 <_fwalk_reent+0x24>
 80045b8:	6824      	ldr	r4, [r4, #0]
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	d1f7      	bne.n	80045ae <_fwalk_reent+0xe>
 80045be:	4638      	mov	r0, r7
 80045c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c4:	89ab      	ldrh	r3, [r5, #12]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d907      	bls.n	80045da <_fwalk_reent+0x3a>
 80045ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045ce:	3301      	adds	r3, #1
 80045d0:	d003      	beq.n	80045da <_fwalk_reent+0x3a>
 80045d2:	4629      	mov	r1, r5
 80045d4:	4630      	mov	r0, r6
 80045d6:	47c0      	blx	r8
 80045d8:	4307      	orrs	r7, r0
 80045da:	3568      	adds	r5, #104	; 0x68
 80045dc:	e7e9      	b.n	80045b2 <_fwalk_reent+0x12>

080045de <__retarget_lock_init_recursive>:
 80045de:	4770      	bx	lr

080045e0 <__retarget_lock_acquire_recursive>:
 80045e0:	4770      	bx	lr

080045e2 <__retarget_lock_release_recursive>:
 80045e2:	4770      	bx	lr

080045e4 <__swhatbuf_r>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	460e      	mov	r6, r1
 80045e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ec:	2900      	cmp	r1, #0
 80045ee:	b096      	sub	sp, #88	; 0x58
 80045f0:	4614      	mov	r4, r2
 80045f2:	461d      	mov	r5, r3
 80045f4:	da08      	bge.n	8004608 <__swhatbuf_r+0x24>
 80045f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	602a      	str	r2, [r5, #0]
 80045fe:	061a      	lsls	r2, r3, #24
 8004600:	d410      	bmi.n	8004624 <__swhatbuf_r+0x40>
 8004602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004606:	e00e      	b.n	8004626 <__swhatbuf_r+0x42>
 8004608:	466a      	mov	r2, sp
 800460a:	f000 fc95 	bl	8004f38 <_fstat_r>
 800460e:	2800      	cmp	r0, #0
 8004610:	dbf1      	blt.n	80045f6 <__swhatbuf_r+0x12>
 8004612:	9a01      	ldr	r2, [sp, #4]
 8004614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800461c:	425a      	negs	r2, r3
 800461e:	415a      	adcs	r2, r3
 8004620:	602a      	str	r2, [r5, #0]
 8004622:	e7ee      	b.n	8004602 <__swhatbuf_r+0x1e>
 8004624:	2340      	movs	r3, #64	; 0x40
 8004626:	2000      	movs	r0, #0
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	b016      	add	sp, #88	; 0x58
 800462c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004630 <__smakebuf_r>:
 8004630:	898b      	ldrh	r3, [r1, #12]
 8004632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004634:	079d      	lsls	r5, r3, #30
 8004636:	4606      	mov	r6, r0
 8004638:	460c      	mov	r4, r1
 800463a:	d507      	bpl.n	800464c <__smakebuf_r+0x1c>
 800463c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	2301      	movs	r3, #1
 8004646:	6163      	str	r3, [r4, #20]
 8004648:	b002      	add	sp, #8
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	ab01      	add	r3, sp, #4
 800464e:	466a      	mov	r2, sp
 8004650:	f7ff ffc8 	bl	80045e4 <__swhatbuf_r>
 8004654:	9900      	ldr	r1, [sp, #0]
 8004656:	4605      	mov	r5, r0
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f895 	bl	8004788 <_malloc_r>
 800465e:	b948      	cbnz	r0, 8004674 <__smakebuf_r+0x44>
 8004660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004664:	059a      	lsls	r2, r3, #22
 8004666:	d4ef      	bmi.n	8004648 <__smakebuf_r+0x18>
 8004668:	f023 0303 	bic.w	r3, r3, #3
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	e7e3      	b.n	800463c <__smakebuf_r+0xc>
 8004674:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <__smakebuf_r+0x7c>)
 8004676:	62b3      	str	r3, [r6, #40]	; 0x28
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	6020      	str	r0, [r4, #0]
 800467c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	6163      	str	r3, [r4, #20]
 8004686:	9b01      	ldr	r3, [sp, #4]
 8004688:	6120      	str	r0, [r4, #16]
 800468a:	b15b      	cbz	r3, 80046a4 <__smakebuf_r+0x74>
 800468c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004690:	4630      	mov	r0, r6
 8004692:	f000 fc63 	bl	8004f5c <_isatty_r>
 8004696:	b128      	cbz	r0, 80046a4 <__smakebuf_r+0x74>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	89a0      	ldrh	r0, [r4, #12]
 80046a6:	4305      	orrs	r5, r0
 80046a8:	81a5      	strh	r5, [r4, #12]
 80046aa:	e7cd      	b.n	8004648 <__smakebuf_r+0x18>
 80046ac:	0800443d 	.word	0x0800443d

080046b0 <_free_r>:
 80046b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046b2:	2900      	cmp	r1, #0
 80046b4:	d044      	beq.n	8004740 <_free_r+0x90>
 80046b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ba:	9001      	str	r0, [sp, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f1a1 0404 	sub.w	r4, r1, #4
 80046c2:	bfb8      	it	lt
 80046c4:	18e4      	addlt	r4, r4, r3
 80046c6:	f000 fc6b 	bl	8004fa0 <__malloc_lock>
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <_free_r+0x94>)
 80046cc:	9801      	ldr	r0, [sp, #4]
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	b933      	cbnz	r3, 80046e0 <_free_r+0x30>
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	6014      	str	r4, [r2, #0]
 80046d6:	b003      	add	sp, #12
 80046d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046dc:	f000 bc66 	b.w	8004fac <__malloc_unlock>
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d908      	bls.n	80046f6 <_free_r+0x46>
 80046e4:	6825      	ldr	r5, [r4, #0]
 80046e6:	1961      	adds	r1, r4, r5
 80046e8:	428b      	cmp	r3, r1
 80046ea:	bf01      	itttt	eq
 80046ec:	6819      	ldreq	r1, [r3, #0]
 80046ee:	685b      	ldreq	r3, [r3, #4]
 80046f0:	1949      	addeq	r1, r1, r5
 80046f2:	6021      	streq	r1, [r4, #0]
 80046f4:	e7ed      	b.n	80046d2 <_free_r+0x22>
 80046f6:	461a      	mov	r2, r3
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b10b      	cbz	r3, 8004700 <_free_r+0x50>
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	d9fa      	bls.n	80046f6 <_free_r+0x46>
 8004700:	6811      	ldr	r1, [r2, #0]
 8004702:	1855      	adds	r5, r2, r1
 8004704:	42a5      	cmp	r5, r4
 8004706:	d10b      	bne.n	8004720 <_free_r+0x70>
 8004708:	6824      	ldr	r4, [r4, #0]
 800470a:	4421      	add	r1, r4
 800470c:	1854      	adds	r4, r2, r1
 800470e:	42a3      	cmp	r3, r4
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	d1e0      	bne.n	80046d6 <_free_r+0x26>
 8004714:	681c      	ldr	r4, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	6053      	str	r3, [r2, #4]
 800471a:	4421      	add	r1, r4
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	e7da      	b.n	80046d6 <_free_r+0x26>
 8004720:	d902      	bls.n	8004728 <_free_r+0x78>
 8004722:	230c      	movs	r3, #12
 8004724:	6003      	str	r3, [r0, #0]
 8004726:	e7d6      	b.n	80046d6 <_free_r+0x26>
 8004728:	6825      	ldr	r5, [r4, #0]
 800472a:	1961      	adds	r1, r4, r5
 800472c:	428b      	cmp	r3, r1
 800472e:	bf04      	itt	eq
 8004730:	6819      	ldreq	r1, [r3, #0]
 8004732:	685b      	ldreq	r3, [r3, #4]
 8004734:	6063      	str	r3, [r4, #4]
 8004736:	bf04      	itt	eq
 8004738:	1949      	addeq	r1, r1, r5
 800473a:	6021      	streq	r1, [r4, #0]
 800473c:	6054      	str	r4, [r2, #4]
 800473e:	e7ca      	b.n	80046d6 <_free_r+0x26>
 8004740:	b003      	add	sp, #12
 8004742:	bd30      	pop	{r4, r5, pc}
 8004744:	20000b10 	.word	0x20000b10

08004748 <sbrk_aligned>:
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	4e0e      	ldr	r6, [pc, #56]	; (8004784 <sbrk_aligned+0x3c>)
 800474c:	460c      	mov	r4, r1
 800474e:	6831      	ldr	r1, [r6, #0]
 8004750:	4605      	mov	r5, r0
 8004752:	b911      	cbnz	r1, 800475a <sbrk_aligned+0x12>
 8004754:	f000 fb7a 	bl	8004e4c <_sbrk_r>
 8004758:	6030      	str	r0, [r6, #0]
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fb75 	bl	8004e4c <_sbrk_r>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d00a      	beq.n	800477c <sbrk_aligned+0x34>
 8004766:	1cc4      	adds	r4, r0, #3
 8004768:	f024 0403 	bic.w	r4, r4, #3
 800476c:	42a0      	cmp	r0, r4
 800476e:	d007      	beq.n	8004780 <sbrk_aligned+0x38>
 8004770:	1a21      	subs	r1, r4, r0
 8004772:	4628      	mov	r0, r5
 8004774:	f000 fb6a 	bl	8004e4c <_sbrk_r>
 8004778:	3001      	adds	r0, #1
 800477a:	d101      	bne.n	8004780 <sbrk_aligned+0x38>
 800477c:	f04f 34ff 	mov.w	r4, #4294967295
 8004780:	4620      	mov	r0, r4
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	20000b14 	.word	0x20000b14

08004788 <_malloc_r>:
 8004788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478c:	1ccd      	adds	r5, r1, #3
 800478e:	f025 0503 	bic.w	r5, r5, #3
 8004792:	3508      	adds	r5, #8
 8004794:	2d0c      	cmp	r5, #12
 8004796:	bf38      	it	cc
 8004798:	250c      	movcc	r5, #12
 800479a:	2d00      	cmp	r5, #0
 800479c:	4607      	mov	r7, r0
 800479e:	db01      	blt.n	80047a4 <_malloc_r+0x1c>
 80047a0:	42a9      	cmp	r1, r5
 80047a2:	d905      	bls.n	80047b0 <_malloc_r+0x28>
 80047a4:	230c      	movs	r3, #12
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	2600      	movs	r6, #0
 80047aa:	4630      	mov	r0, r6
 80047ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b0:	4e2e      	ldr	r6, [pc, #184]	; (800486c <_malloc_r+0xe4>)
 80047b2:	f000 fbf5 	bl	8004fa0 <__malloc_lock>
 80047b6:	6833      	ldr	r3, [r6, #0]
 80047b8:	461c      	mov	r4, r3
 80047ba:	bb34      	cbnz	r4, 800480a <_malloc_r+0x82>
 80047bc:	4629      	mov	r1, r5
 80047be:	4638      	mov	r0, r7
 80047c0:	f7ff ffc2 	bl	8004748 <sbrk_aligned>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	4604      	mov	r4, r0
 80047c8:	d14d      	bne.n	8004866 <_malloc_r+0xde>
 80047ca:	6834      	ldr	r4, [r6, #0]
 80047cc:	4626      	mov	r6, r4
 80047ce:	2e00      	cmp	r6, #0
 80047d0:	d140      	bne.n	8004854 <_malloc_r+0xcc>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	4631      	mov	r1, r6
 80047d6:	4638      	mov	r0, r7
 80047d8:	eb04 0803 	add.w	r8, r4, r3
 80047dc:	f000 fb36 	bl	8004e4c <_sbrk_r>
 80047e0:	4580      	cmp	r8, r0
 80047e2:	d13a      	bne.n	800485a <_malloc_r+0xd2>
 80047e4:	6821      	ldr	r1, [r4, #0]
 80047e6:	3503      	adds	r5, #3
 80047e8:	1a6d      	subs	r5, r5, r1
 80047ea:	f025 0503 	bic.w	r5, r5, #3
 80047ee:	3508      	adds	r5, #8
 80047f0:	2d0c      	cmp	r5, #12
 80047f2:	bf38      	it	cc
 80047f4:	250c      	movcc	r5, #12
 80047f6:	4629      	mov	r1, r5
 80047f8:	4638      	mov	r0, r7
 80047fa:	f7ff ffa5 	bl	8004748 <sbrk_aligned>
 80047fe:	3001      	adds	r0, #1
 8004800:	d02b      	beq.n	800485a <_malloc_r+0xd2>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	442b      	add	r3, r5
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	e00e      	b.n	8004828 <_malloc_r+0xa0>
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	1b52      	subs	r2, r2, r5
 800480e:	d41e      	bmi.n	800484e <_malloc_r+0xc6>
 8004810:	2a0b      	cmp	r2, #11
 8004812:	d916      	bls.n	8004842 <_malloc_r+0xba>
 8004814:	1961      	adds	r1, r4, r5
 8004816:	42a3      	cmp	r3, r4
 8004818:	6025      	str	r5, [r4, #0]
 800481a:	bf18      	it	ne
 800481c:	6059      	strne	r1, [r3, #4]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	bf08      	it	eq
 8004822:	6031      	streq	r1, [r6, #0]
 8004824:	5162      	str	r2, [r4, r5]
 8004826:	604b      	str	r3, [r1, #4]
 8004828:	4638      	mov	r0, r7
 800482a:	f104 060b 	add.w	r6, r4, #11
 800482e:	f000 fbbd 	bl	8004fac <__malloc_unlock>
 8004832:	f026 0607 	bic.w	r6, r6, #7
 8004836:	1d23      	adds	r3, r4, #4
 8004838:	1af2      	subs	r2, r6, r3
 800483a:	d0b6      	beq.n	80047aa <_malloc_r+0x22>
 800483c:	1b9b      	subs	r3, r3, r6
 800483e:	50a3      	str	r3, [r4, r2]
 8004840:	e7b3      	b.n	80047aa <_malloc_r+0x22>
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	42a3      	cmp	r3, r4
 8004846:	bf0c      	ite	eq
 8004848:	6032      	streq	r2, [r6, #0]
 800484a:	605a      	strne	r2, [r3, #4]
 800484c:	e7ec      	b.n	8004828 <_malloc_r+0xa0>
 800484e:	4623      	mov	r3, r4
 8004850:	6864      	ldr	r4, [r4, #4]
 8004852:	e7b2      	b.n	80047ba <_malloc_r+0x32>
 8004854:	4634      	mov	r4, r6
 8004856:	6876      	ldr	r6, [r6, #4]
 8004858:	e7b9      	b.n	80047ce <_malloc_r+0x46>
 800485a:	230c      	movs	r3, #12
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4638      	mov	r0, r7
 8004860:	f000 fba4 	bl	8004fac <__malloc_unlock>
 8004864:	e7a1      	b.n	80047aa <_malloc_r+0x22>
 8004866:	6025      	str	r5, [r4, #0]
 8004868:	e7de      	b.n	8004828 <_malloc_r+0xa0>
 800486a:	bf00      	nop
 800486c:	20000b10 	.word	0x20000b10

08004870 <__sfputc_r>:
 8004870:	6893      	ldr	r3, [r2, #8]
 8004872:	3b01      	subs	r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	b410      	push	{r4}
 8004878:	6093      	str	r3, [r2, #8]
 800487a:	da08      	bge.n	800488e <__sfputc_r+0x1e>
 800487c:	6994      	ldr	r4, [r2, #24]
 800487e:	42a3      	cmp	r3, r4
 8004880:	db01      	blt.n	8004886 <__sfputc_r+0x16>
 8004882:	290a      	cmp	r1, #10
 8004884:	d103      	bne.n	800488e <__sfputc_r+0x1e>
 8004886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800488a:	f7ff bc31 	b.w	80040f0 <__swbuf_r>
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	1c58      	adds	r0, r3, #1
 8004892:	6010      	str	r0, [r2, #0]
 8004894:	7019      	strb	r1, [r3, #0]
 8004896:	4608      	mov	r0, r1
 8004898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800489c:	4770      	bx	lr

0800489e <__sfputs_r>:
 800489e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a0:	4606      	mov	r6, r0
 80048a2:	460f      	mov	r7, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	18d5      	adds	r5, r2, r3
 80048a8:	42ac      	cmp	r4, r5
 80048aa:	d101      	bne.n	80048b0 <__sfputs_r+0x12>
 80048ac:	2000      	movs	r0, #0
 80048ae:	e007      	b.n	80048c0 <__sfputs_r+0x22>
 80048b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b4:	463a      	mov	r2, r7
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7ff ffda 	bl	8004870 <__sfputc_r>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d1f3      	bne.n	80048a8 <__sfputs_r+0xa>
 80048c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048c4 <_vfiprintf_r>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	460d      	mov	r5, r1
 80048ca:	b09d      	sub	sp, #116	; 0x74
 80048cc:	4614      	mov	r4, r2
 80048ce:	4698      	mov	r8, r3
 80048d0:	4606      	mov	r6, r0
 80048d2:	b118      	cbz	r0, 80048dc <_vfiprintf_r+0x18>
 80048d4:	6983      	ldr	r3, [r0, #24]
 80048d6:	b90b      	cbnz	r3, 80048dc <_vfiprintf_r+0x18>
 80048d8:	f7ff fde4 	bl	80044a4 <__sinit>
 80048dc:	4b89      	ldr	r3, [pc, #548]	; (8004b04 <_vfiprintf_r+0x240>)
 80048de:	429d      	cmp	r5, r3
 80048e0:	d11b      	bne.n	800491a <_vfiprintf_r+0x56>
 80048e2:	6875      	ldr	r5, [r6, #4]
 80048e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048e6:	07d9      	lsls	r1, r3, #31
 80048e8:	d405      	bmi.n	80048f6 <_vfiprintf_r+0x32>
 80048ea:	89ab      	ldrh	r3, [r5, #12]
 80048ec:	059a      	lsls	r2, r3, #22
 80048ee:	d402      	bmi.n	80048f6 <_vfiprintf_r+0x32>
 80048f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048f2:	f7ff fe75 	bl	80045e0 <__retarget_lock_acquire_recursive>
 80048f6:	89ab      	ldrh	r3, [r5, #12]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	d501      	bpl.n	8004900 <_vfiprintf_r+0x3c>
 80048fc:	692b      	ldr	r3, [r5, #16]
 80048fe:	b9eb      	cbnz	r3, 800493c <_vfiprintf_r+0x78>
 8004900:	4629      	mov	r1, r5
 8004902:	4630      	mov	r0, r6
 8004904:	f7ff fc46 	bl	8004194 <__swsetup_r>
 8004908:	b1c0      	cbz	r0, 800493c <_vfiprintf_r+0x78>
 800490a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800490c:	07dc      	lsls	r4, r3, #31
 800490e:	d50e      	bpl.n	800492e <_vfiprintf_r+0x6a>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b01d      	add	sp, #116	; 0x74
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	4b7b      	ldr	r3, [pc, #492]	; (8004b08 <_vfiprintf_r+0x244>)
 800491c:	429d      	cmp	r5, r3
 800491e:	d101      	bne.n	8004924 <_vfiprintf_r+0x60>
 8004920:	68b5      	ldr	r5, [r6, #8]
 8004922:	e7df      	b.n	80048e4 <_vfiprintf_r+0x20>
 8004924:	4b79      	ldr	r3, [pc, #484]	; (8004b0c <_vfiprintf_r+0x248>)
 8004926:	429d      	cmp	r5, r3
 8004928:	bf08      	it	eq
 800492a:	68f5      	ldreq	r5, [r6, #12]
 800492c:	e7da      	b.n	80048e4 <_vfiprintf_r+0x20>
 800492e:	89ab      	ldrh	r3, [r5, #12]
 8004930:	0598      	lsls	r0, r3, #22
 8004932:	d4ed      	bmi.n	8004910 <_vfiprintf_r+0x4c>
 8004934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004936:	f7ff fe54 	bl	80045e2 <__retarget_lock_release_recursive>
 800493a:	e7e9      	b.n	8004910 <_vfiprintf_r+0x4c>
 800493c:	2300      	movs	r3, #0
 800493e:	9309      	str	r3, [sp, #36]	; 0x24
 8004940:	2320      	movs	r3, #32
 8004942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004946:	f8cd 800c 	str.w	r8, [sp, #12]
 800494a:	2330      	movs	r3, #48	; 0x30
 800494c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b10 <_vfiprintf_r+0x24c>
 8004950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004954:	f04f 0901 	mov.w	r9, #1
 8004958:	4623      	mov	r3, r4
 800495a:	469a      	mov	sl, r3
 800495c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004960:	b10a      	cbz	r2, 8004966 <_vfiprintf_r+0xa2>
 8004962:	2a25      	cmp	r2, #37	; 0x25
 8004964:	d1f9      	bne.n	800495a <_vfiprintf_r+0x96>
 8004966:	ebba 0b04 	subs.w	fp, sl, r4
 800496a:	d00b      	beq.n	8004984 <_vfiprintf_r+0xc0>
 800496c:	465b      	mov	r3, fp
 800496e:	4622      	mov	r2, r4
 8004970:	4629      	mov	r1, r5
 8004972:	4630      	mov	r0, r6
 8004974:	f7ff ff93 	bl	800489e <__sfputs_r>
 8004978:	3001      	adds	r0, #1
 800497a:	f000 80aa 	beq.w	8004ad2 <_vfiprintf_r+0x20e>
 800497e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004980:	445a      	add	r2, fp
 8004982:	9209      	str	r2, [sp, #36]	; 0x24
 8004984:	f89a 3000 	ldrb.w	r3, [sl]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a2 	beq.w	8004ad2 <_vfiprintf_r+0x20e>
 800498e:	2300      	movs	r3, #0
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004998:	f10a 0a01 	add.w	sl, sl, #1
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	9307      	str	r3, [sp, #28]
 80049a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049a4:	931a      	str	r3, [sp, #104]	; 0x68
 80049a6:	4654      	mov	r4, sl
 80049a8:	2205      	movs	r2, #5
 80049aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ae:	4858      	ldr	r0, [pc, #352]	; (8004b10 <_vfiprintf_r+0x24c>)
 80049b0:	f7fb fc16 	bl	80001e0 <memchr>
 80049b4:	9a04      	ldr	r2, [sp, #16]
 80049b6:	b9d8      	cbnz	r0, 80049f0 <_vfiprintf_r+0x12c>
 80049b8:	06d1      	lsls	r1, r2, #27
 80049ba:	bf44      	itt	mi
 80049bc:	2320      	movmi	r3, #32
 80049be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c2:	0713      	lsls	r3, r2, #28
 80049c4:	bf44      	itt	mi
 80049c6:	232b      	movmi	r3, #43	; 0x2b
 80049c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049cc:	f89a 3000 	ldrb.w	r3, [sl]
 80049d0:	2b2a      	cmp	r3, #42	; 0x2a
 80049d2:	d015      	beq.n	8004a00 <_vfiprintf_r+0x13c>
 80049d4:	9a07      	ldr	r2, [sp, #28]
 80049d6:	4654      	mov	r4, sl
 80049d8:	2000      	movs	r0, #0
 80049da:	f04f 0c0a 	mov.w	ip, #10
 80049de:	4621      	mov	r1, r4
 80049e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e4:	3b30      	subs	r3, #48	; 0x30
 80049e6:	2b09      	cmp	r3, #9
 80049e8:	d94e      	bls.n	8004a88 <_vfiprintf_r+0x1c4>
 80049ea:	b1b0      	cbz	r0, 8004a1a <_vfiprintf_r+0x156>
 80049ec:	9207      	str	r2, [sp, #28]
 80049ee:	e014      	b.n	8004a1a <_vfiprintf_r+0x156>
 80049f0:	eba0 0308 	sub.w	r3, r0, r8
 80049f4:	fa09 f303 	lsl.w	r3, r9, r3
 80049f8:	4313      	orrs	r3, r2
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	46a2      	mov	sl, r4
 80049fe:	e7d2      	b.n	80049a6 <_vfiprintf_r+0xe2>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	1d19      	adds	r1, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	9103      	str	r1, [sp, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfbb      	ittet	lt
 8004a0c:	425b      	neglt	r3, r3
 8004a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a12:	9307      	strge	r3, [sp, #28]
 8004a14:	9307      	strlt	r3, [sp, #28]
 8004a16:	bfb8      	it	lt
 8004a18:	9204      	strlt	r2, [sp, #16]
 8004a1a:	7823      	ldrb	r3, [r4, #0]
 8004a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1e:	d10c      	bne.n	8004a3a <_vfiprintf_r+0x176>
 8004a20:	7863      	ldrb	r3, [r4, #1]
 8004a22:	2b2a      	cmp	r3, #42	; 0x2a
 8004a24:	d135      	bne.n	8004a92 <_vfiprintf_r+0x1ce>
 8004a26:	9b03      	ldr	r3, [sp, #12]
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	9203      	str	r2, [sp, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bfb8      	it	lt
 8004a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a36:	3402      	adds	r4, #2
 8004a38:	9305      	str	r3, [sp, #20]
 8004a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b20 <_vfiprintf_r+0x25c>
 8004a3e:	7821      	ldrb	r1, [r4, #0]
 8004a40:	2203      	movs	r2, #3
 8004a42:	4650      	mov	r0, sl
 8004a44:	f7fb fbcc 	bl	80001e0 <memchr>
 8004a48:	b140      	cbz	r0, 8004a5c <_vfiprintf_r+0x198>
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	eba0 000a 	sub.w	r0, r0, sl
 8004a50:	fa03 f000 	lsl.w	r0, r3, r0
 8004a54:	9b04      	ldr	r3, [sp, #16]
 8004a56:	4303      	orrs	r3, r0
 8004a58:	3401      	adds	r4, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a60:	482c      	ldr	r0, [pc, #176]	; (8004b14 <_vfiprintf_r+0x250>)
 8004a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a66:	2206      	movs	r2, #6
 8004a68:	f7fb fbba 	bl	80001e0 <memchr>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d03f      	beq.n	8004af0 <_vfiprintf_r+0x22c>
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <_vfiprintf_r+0x254>)
 8004a72:	bb1b      	cbnz	r3, 8004abc <_vfiprintf_r+0x1f8>
 8004a74:	9b03      	ldr	r3, [sp, #12]
 8004a76:	3307      	adds	r3, #7
 8004a78:	f023 0307 	bic.w	r3, r3, #7
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a82:	443b      	add	r3, r7
 8004a84:	9309      	str	r3, [sp, #36]	; 0x24
 8004a86:	e767      	b.n	8004958 <_vfiprintf_r+0x94>
 8004a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e7a5      	b.n	80049de <_vfiprintf_r+0x11a>
 8004a92:	2300      	movs	r3, #0
 8004a94:	3401      	adds	r4, #1
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f04f 0c0a 	mov.w	ip, #10
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa4:	3a30      	subs	r2, #48	; 0x30
 8004aa6:	2a09      	cmp	r2, #9
 8004aa8:	d903      	bls.n	8004ab2 <_vfiprintf_r+0x1ee>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0c5      	beq.n	8004a3a <_vfiprintf_r+0x176>
 8004aae:	9105      	str	r1, [sp, #20]
 8004ab0:	e7c3      	b.n	8004a3a <_vfiprintf_r+0x176>
 8004ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e7f0      	b.n	8004a9e <_vfiprintf_r+0x1da>
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <_vfiprintf_r+0x258>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f3af 8000 	nop.w
 8004acc:	4607      	mov	r7, r0
 8004ace:	1c78      	adds	r0, r7, #1
 8004ad0:	d1d6      	bne.n	8004a80 <_vfiprintf_r+0x1bc>
 8004ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ad4:	07d9      	lsls	r1, r3, #31
 8004ad6:	d405      	bmi.n	8004ae4 <_vfiprintf_r+0x220>
 8004ad8:	89ab      	ldrh	r3, [r5, #12]
 8004ada:	059a      	lsls	r2, r3, #22
 8004adc:	d402      	bmi.n	8004ae4 <_vfiprintf_r+0x220>
 8004ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ae0:	f7ff fd7f 	bl	80045e2 <__retarget_lock_release_recursive>
 8004ae4:	89ab      	ldrh	r3, [r5, #12]
 8004ae6:	065b      	lsls	r3, r3, #25
 8004ae8:	f53f af12 	bmi.w	8004910 <_vfiprintf_r+0x4c>
 8004aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aee:	e711      	b.n	8004914 <_vfiprintf_r+0x50>
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <_vfiprintf_r+0x258>)
 8004af8:	a904      	add	r1, sp, #16
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 f880 	bl	8004c00 <_printf_i>
 8004b00:	e7e4      	b.n	8004acc <_vfiprintf_r+0x208>
 8004b02:	bf00      	nop
 8004b04:	080050a8 	.word	0x080050a8
 8004b08:	080050c8 	.word	0x080050c8
 8004b0c:	08005088 	.word	0x08005088
 8004b10:	080050e8 	.word	0x080050e8
 8004b14:	080050f2 	.word	0x080050f2
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	0800489f 	.word	0x0800489f
 8004b20:	080050ee 	.word	0x080050ee

08004b24 <_printf_common>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	4616      	mov	r6, r2
 8004b2a:	4699      	mov	r9, r3
 8004b2c:	688a      	ldr	r2, [r1, #8]
 8004b2e:	690b      	ldr	r3, [r1, #16]
 8004b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b34:	4293      	cmp	r3, r2
 8004b36:	bfb8      	it	lt
 8004b38:	4613      	movlt	r3, r2
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b40:	4607      	mov	r7, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	b10a      	cbz	r2, 8004b4a <_printf_common+0x26>
 8004b46:	3301      	adds	r3, #1
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	0699      	lsls	r1, r3, #26
 8004b4e:	bf42      	ittt	mi
 8004b50:	6833      	ldrmi	r3, [r6, #0]
 8004b52:	3302      	addmi	r3, #2
 8004b54:	6033      	strmi	r3, [r6, #0]
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	f015 0506 	ands.w	r5, r5, #6
 8004b5c:	d106      	bne.n	8004b6c <_printf_common+0x48>
 8004b5e:	f104 0a19 	add.w	sl, r4, #25
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	6832      	ldr	r2, [r6, #0]
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dc26      	bgt.n	8004bba <_printf_common+0x96>
 8004b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b70:	1e13      	subs	r3, r2, #0
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	bf18      	it	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	0692      	lsls	r2, r2, #26
 8004b7a:	d42b      	bmi.n	8004bd4 <_printf_common+0xb0>
 8004b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b80:	4649      	mov	r1, r9
 8004b82:	4638      	mov	r0, r7
 8004b84:	47c0      	blx	r8
 8004b86:	3001      	adds	r0, #1
 8004b88:	d01e      	beq.n	8004bc8 <_printf_common+0xa4>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	68e5      	ldr	r5, [r4, #12]
 8004b8e:	6832      	ldr	r2, [r6, #0]
 8004b90:	f003 0306 	and.w	r3, r3, #6
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	bf08      	it	eq
 8004b98:	1aad      	subeq	r5, r5, r2
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	6922      	ldr	r2, [r4, #16]
 8004b9e:	bf0c      	ite	eq
 8004ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba4:	2500      	movne	r5, #0
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bfc4      	itt	gt
 8004baa:	1a9b      	subgt	r3, r3, r2
 8004bac:	18ed      	addgt	r5, r5, r3
 8004bae:	2600      	movs	r6, #0
 8004bb0:	341a      	adds	r4, #26
 8004bb2:	42b5      	cmp	r5, r6
 8004bb4:	d11a      	bne.n	8004bec <_printf_common+0xc8>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e008      	b.n	8004bcc <_printf_common+0xa8>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	47c0      	blx	r8
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d103      	bne.n	8004bd0 <_printf_common+0xac>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd0:	3501      	adds	r5, #1
 8004bd2:	e7c6      	b.n	8004b62 <_printf_common+0x3e>
 8004bd4:	18e1      	adds	r1, r4, r3
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	2030      	movs	r0, #48	; 0x30
 8004bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bde:	4422      	add	r2, r4
 8004be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004be8:	3302      	adds	r3, #2
 8004bea:	e7c7      	b.n	8004b7c <_printf_common+0x58>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4622      	mov	r2, r4
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d0e6      	beq.n	8004bc8 <_printf_common+0xa4>
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7d9      	b.n	8004bb2 <_printf_common+0x8e>
	...

08004c00 <_printf_i>:
 8004c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c04:	7e0f      	ldrb	r7, [r1, #24]
 8004c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c08:	2f78      	cmp	r7, #120	; 0x78
 8004c0a:	4691      	mov	r9, r2
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	469a      	mov	sl, r3
 8004c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c16:	d807      	bhi.n	8004c28 <_printf_i+0x28>
 8004c18:	2f62      	cmp	r7, #98	; 0x62
 8004c1a:	d80a      	bhi.n	8004c32 <_printf_i+0x32>
 8004c1c:	2f00      	cmp	r7, #0
 8004c1e:	f000 80d8 	beq.w	8004dd2 <_printf_i+0x1d2>
 8004c22:	2f58      	cmp	r7, #88	; 0x58
 8004c24:	f000 80a3 	beq.w	8004d6e <_printf_i+0x16e>
 8004c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c30:	e03a      	b.n	8004ca8 <_printf_i+0xa8>
 8004c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c36:	2b15      	cmp	r3, #21
 8004c38:	d8f6      	bhi.n	8004c28 <_printf_i+0x28>
 8004c3a:	a101      	add	r1, pc, #4	; (adr r1, 8004c40 <_printf_i+0x40>)
 8004c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004c29 	.word	0x08004c29
 8004c4c:	08004c29 	.word	0x08004c29
 8004c50:	08004c29 	.word	0x08004c29
 8004c54:	08004c29 	.word	0x08004c29
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004c29 	.word	0x08004c29
 8004c60:	08004c29 	.word	0x08004c29
 8004c64:	08004c29 	.word	0x08004c29
 8004c68:	08004c29 	.word	0x08004c29
 8004c6c:	08004db9 	.word	0x08004db9
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004d9b 	.word	0x08004d9b
 8004c78:	08004c29 	.word	0x08004c29
 8004c7c:	08004c29 	.word	0x08004c29
 8004c80:	08004ddb 	.word	0x08004ddb
 8004c84:	08004c29 	.word	0x08004c29
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c29 	.word	0x08004c29
 8004c90:	08004c29 	.word	0x08004c29
 8004c94:	08004da3 	.word	0x08004da3
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	602a      	str	r2, [r5, #0]
 8004ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0a3      	b.n	8004df4 <_printf_i+0x1f4>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	6829      	ldr	r1, [r5, #0]
 8004cb0:	0606      	lsls	r6, r0, #24
 8004cb2:	f101 0304 	add.w	r3, r1, #4
 8004cb6:	d50a      	bpl.n	8004cce <_printf_i+0xce>
 8004cb8:	680e      	ldr	r6, [r1, #0]
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	2e00      	cmp	r6, #0
 8004cbe:	da03      	bge.n	8004cc8 <_printf_i+0xc8>
 8004cc0:	232d      	movs	r3, #45	; 0x2d
 8004cc2:	4276      	negs	r6, r6
 8004cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc8:	485e      	ldr	r0, [pc, #376]	; (8004e44 <_printf_i+0x244>)
 8004cca:	230a      	movs	r3, #10
 8004ccc:	e019      	b.n	8004d02 <_printf_i+0x102>
 8004cce:	680e      	ldr	r6, [r1, #0]
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cd6:	bf18      	it	ne
 8004cd8:	b236      	sxthne	r6, r6
 8004cda:	e7ef      	b.n	8004cbc <_printf_i+0xbc>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	1d19      	adds	r1, r3, #4
 8004ce2:	6029      	str	r1, [r5, #0]
 8004ce4:	0601      	lsls	r1, r0, #24
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0xec>
 8004ce8:	681e      	ldr	r6, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <_printf_i+0xf2>
 8004cec:	0646      	lsls	r6, r0, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0xe8>
 8004cf0:	881e      	ldrh	r6, [r3, #0]
 8004cf2:	4854      	ldr	r0, [pc, #336]	; (8004e44 <_printf_i+0x244>)
 8004cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2308      	moveq	r3, #8
 8004cfa:	230a      	movne	r3, #10
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d02:	6865      	ldr	r5, [r4, #4]
 8004d04:	60a5      	str	r5, [r4, #8]
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	bfa2      	ittt	ge
 8004d0a:	6821      	ldrge	r1, [r4, #0]
 8004d0c:	f021 0104 	bicge.w	r1, r1, #4
 8004d10:	6021      	strge	r1, [r4, #0]
 8004d12:	b90e      	cbnz	r6, 8004d18 <_printf_i+0x118>
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	d04d      	beq.n	8004db4 <_printf_i+0x1b4>
 8004d18:	4615      	mov	r5, r2
 8004d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d22:	5dc7      	ldrb	r7, [r0, r7]
 8004d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d28:	4637      	mov	r7, r6
 8004d2a:	42bb      	cmp	r3, r7
 8004d2c:	460e      	mov	r6, r1
 8004d2e:	d9f4      	bls.n	8004d1a <_printf_i+0x11a>
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d10b      	bne.n	8004d4c <_printf_i+0x14c>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	07de      	lsls	r6, r3, #31
 8004d38:	d508      	bpl.n	8004d4c <_printf_i+0x14c>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	6861      	ldr	r1, [r4, #4]
 8004d3e:	4299      	cmp	r1, r3
 8004d40:	bfde      	ittt	le
 8004d42:	2330      	movle	r3, #48	; 0x30
 8004d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d4c:	1b52      	subs	r2, r2, r5
 8004d4e:	6122      	str	r2, [r4, #16]
 8004d50:	f8cd a000 	str.w	sl, [sp]
 8004d54:	464b      	mov	r3, r9
 8004d56:	aa03      	add	r2, sp, #12
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f7ff fee2 	bl	8004b24 <_printf_common>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d14c      	bne.n	8004dfe <_printf_i+0x1fe>
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	b004      	add	sp, #16
 8004d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6e:	4835      	ldr	r0, [pc, #212]	; (8004e44 <_printf_i+0x244>)
 8004d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d74:	6829      	ldr	r1, [r5, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d7c:	6029      	str	r1, [r5, #0]
 8004d7e:	061d      	lsls	r5, r3, #24
 8004d80:	d514      	bpl.n	8004dac <_printf_i+0x1ac>
 8004d82:	07df      	lsls	r7, r3, #31
 8004d84:	bf44      	itt	mi
 8004d86:	f043 0320 	orrmi.w	r3, r3, #32
 8004d8a:	6023      	strmi	r3, [r4, #0]
 8004d8c:	b91e      	cbnz	r6, 8004d96 <_printf_i+0x196>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f023 0320 	bic.w	r3, r3, #32
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	2310      	movs	r3, #16
 8004d98:	e7b0      	b.n	8004cfc <_printf_i+0xfc>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	f043 0320 	orr.w	r3, r3, #32
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	2378      	movs	r3, #120	; 0x78
 8004da4:	4828      	ldr	r0, [pc, #160]	; (8004e48 <_printf_i+0x248>)
 8004da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004daa:	e7e3      	b.n	8004d74 <_printf_i+0x174>
 8004dac:	0659      	lsls	r1, r3, #25
 8004dae:	bf48      	it	mi
 8004db0:	b2b6      	uxthmi	r6, r6
 8004db2:	e7e6      	b.n	8004d82 <_printf_i+0x182>
 8004db4:	4615      	mov	r5, r2
 8004db6:	e7bb      	b.n	8004d30 <_printf_i+0x130>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	6826      	ldr	r6, [r4, #0]
 8004dbc:	6961      	ldr	r1, [r4, #20]
 8004dbe:	1d18      	adds	r0, r3, #4
 8004dc0:	6028      	str	r0, [r5, #0]
 8004dc2:	0635      	lsls	r5, r6, #24
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0x1cc>
 8004dc8:	6019      	str	r1, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <_printf_i+0x1d2>
 8004dcc:	0670      	lsls	r0, r6, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0x1c8>
 8004dd0:	8019      	strh	r1, [r3, #0]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	4615      	mov	r5, r2
 8004dd8:	e7ba      	b.n	8004d50 <_printf_i+0x150>
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	1d1a      	adds	r2, r3, #4
 8004dde:	602a      	str	r2, [r5, #0]
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	2100      	movs	r1, #0
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7fb f9fa 	bl	80001e0 <memchr>
 8004dec:	b108      	cbz	r0, 8004df2 <_printf_i+0x1f2>
 8004dee:	1b40      	subs	r0, r0, r5
 8004df0:	6060      	str	r0, [r4, #4]
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	2300      	movs	r3, #0
 8004df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dfc:	e7a8      	b.n	8004d50 <_printf_i+0x150>
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	462a      	mov	r2, r5
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	47d0      	blx	sl
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d0ab      	beq.n	8004d64 <_printf_i+0x164>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	079b      	lsls	r3, r3, #30
 8004e10:	d413      	bmi.n	8004e3a <_printf_i+0x23a>
 8004e12:	68e0      	ldr	r0, [r4, #12]
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	4298      	cmp	r0, r3
 8004e18:	bfb8      	it	lt
 8004e1a:	4618      	movlt	r0, r3
 8004e1c:	e7a4      	b.n	8004d68 <_printf_i+0x168>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4632      	mov	r2, r6
 8004e22:	4649      	mov	r1, r9
 8004e24:	4640      	mov	r0, r8
 8004e26:	47d0      	blx	sl
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d09b      	beq.n	8004d64 <_printf_i+0x164>
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	9903      	ldr	r1, [sp, #12]
 8004e32:	1a5b      	subs	r3, r3, r1
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dcf2      	bgt.n	8004e1e <_printf_i+0x21e>
 8004e38:	e7eb      	b.n	8004e12 <_printf_i+0x212>
 8004e3a:	2500      	movs	r5, #0
 8004e3c:	f104 0619 	add.w	r6, r4, #25
 8004e40:	e7f5      	b.n	8004e2e <_printf_i+0x22e>
 8004e42:	bf00      	nop
 8004e44:	080050f9 	.word	0x080050f9
 8004e48:	0800510a 	.word	0x0800510a

08004e4c <_sbrk_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d06      	ldr	r5, [pc, #24]	; (8004e68 <_sbrk_r+0x1c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc f830 	bl	8000ebc <_sbrk>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_sbrk_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_sbrk_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000b18 	.word	0x20000b18

08004e6c <__sread>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	f000 f8a0 	bl	8004fb8 <_read_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	bfab      	itete	ge
 8004e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e80:	181b      	addge	r3, r3, r0
 8004e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e86:	bfac      	ite	ge
 8004e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e8a:	81a3      	strhlt	r3, [r4, #12]
 8004e8c:	bd10      	pop	{r4, pc}

08004e8e <__swrite>:
 8004e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e92:	461f      	mov	r7, r3
 8004e94:	898b      	ldrh	r3, [r1, #12]
 8004e96:	05db      	lsls	r3, r3, #23
 8004e98:	4605      	mov	r5, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	d505      	bpl.n	8004eac <__swrite+0x1e>
 8004ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f000 f868 	bl	8004f7c <_lseek_r>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	4632      	mov	r2, r6
 8004eba:	463b      	mov	r3, r7
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec2:	f000 b817 	b.w	8004ef4 <_write_r>

08004ec6 <__sseek>:
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	460c      	mov	r4, r1
 8004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ece:	f000 f855 	bl	8004f7c <_lseek_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	bf15      	itete	ne
 8004ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ee2:	81a3      	strheq	r3, [r4, #12]
 8004ee4:	bf18      	it	ne
 8004ee6:	81a3      	strhne	r3, [r4, #12]
 8004ee8:	bd10      	pop	{r4, pc}

08004eea <__sclose>:
 8004eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eee:	f000 b813 	b.w	8004f18 <_close_r>
	...

08004ef4 <_write_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d07      	ldr	r5, [pc, #28]	; (8004f14 <_write_r+0x20>)
 8004ef8:	4604      	mov	r4, r0
 8004efa:	4608      	mov	r0, r1
 8004efc:	4611      	mov	r1, r2
 8004efe:	2200      	movs	r2, #0
 8004f00:	602a      	str	r2, [r5, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fb fb65 	bl	80005d2 <_write>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_write_r+0x1e>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_write_r+0x1e>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000b18 	.word	0x20000b18

08004f18 <_close_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_close_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fb ff95 	bl	8000e52 <_close>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_close_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_close_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	20000b18 	.word	0x20000b18

08004f38 <_fstat_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d07      	ldr	r5, [pc, #28]	; (8004f58 <_fstat_r+0x20>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	f7fb ff90 	bl	8000e6a <_fstat>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d102      	bne.n	8004f54 <_fstat_r+0x1c>
 8004f4e:	682b      	ldr	r3, [r5, #0]
 8004f50:	b103      	cbz	r3, 8004f54 <_fstat_r+0x1c>
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	bd38      	pop	{r3, r4, r5, pc}
 8004f56:	bf00      	nop
 8004f58:	20000b18 	.word	0x20000b18

08004f5c <_isatty_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d06      	ldr	r5, [pc, #24]	; (8004f78 <_isatty_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fb ff8f 	bl	8000e8a <_isatty>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_isatty_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_isatty_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000b18 	.word	0x20000b18

08004f7c <_lseek_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	; (8004f9c <_lseek_r+0x20>)
 8004f80:	4604      	mov	r4, r0
 8004f82:	4608      	mov	r0, r1
 8004f84:	4611      	mov	r1, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fb ff88 	bl	8000ea0 <_lseek>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_lseek_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_lseek_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	20000b18 	.word	0x20000b18

08004fa0 <__malloc_lock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__malloc_lock+0x8>)
 8004fa2:	f7ff bb1d 	b.w	80045e0 <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	20000b0c 	.word	0x20000b0c

08004fac <__malloc_unlock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__malloc_unlock+0x8>)
 8004fae:	f7ff bb18 	b.w	80045e2 <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	20000b0c 	.word	0x20000b0c

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d07      	ldr	r5, [pc, #28]	; (8004fd8 <_read_r+0x20>)
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fb ff26 	bl	8000e18 <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000b18 	.word	0x20000b18

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
