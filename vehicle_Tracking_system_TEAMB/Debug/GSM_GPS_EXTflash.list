
GSM_GPS_EXTflash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800cee8  0800cee8  0001cee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a8  0800d9a8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9b0  0800d9b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9b0  0800d9b0  0001d9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  200001e8  0800dba0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  0800dba0  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c23  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b91  00000000  00000000  00030e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00033a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab1  00000000  00000000  00034810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027af3  00000000  00000000  000352c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c4d  00000000  00000000  0005cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec761  00000000  00000000  0006ea01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005124  00000000  00000000  0015b164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00160288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ced0 	.word	0x0800ced0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ced0 	.word	0x0800ced0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <gsm_init>:
uint8_t response[20];
char *data1;
uint8_t var=0;
char *str;
int gsm_init()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	uint8_t state=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
	uint8_t substate=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
	int count=30;
 8000ffe:	231e      	movs	r3, #30
 8001000:	60bb      	str	r3, [r7, #8]
	while(count--)
 8001002:	e29c      	b.n	800153e <gsm_init+0x54e>
	{
	switch(state)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b07      	cmp	r3, #7
 8001008:	f200 8294 	bhi.w	8001534 <gsm_init+0x544>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <gsm_init+0x24>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001035 	.word	0x08001035
 8001018:	080010af 	.word	0x080010af
 800101c:	08001113 	.word	0x08001113
 8001020:	08001199 	.word	0x08001199
 8001024:	08001221 	.word	0x08001221
 8001028:	080012b5 	.word	0x080012b5
 800102c:	080013a7 	.word	0x080013a7
 8001030:	08001483 	.word	0x08001483
	{
			  	  case 0:
			  	  {
			  		  switch(substate)
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 8281 	bne.w	800153e <gsm_init+0x54e>
			  		  {
			  		  case 0:
			  			 str =send_to_gsm("ATE0\r");
 800103c:	48a0      	ldr	r0, [pc, #640]	; (80012c0 <gsm_init+0x2d0>)
 800103e:	f000 fd69 	bl	8001b14 <send_to_gsm>
 8001042:	4603      	mov	r3, r0
 8001044:	4a9f      	ldr	r2, [pc, #636]	; (80012c4 <gsm_init+0x2d4>)
 8001046:	6013      	str	r3, [r2, #0]
			  			 printf("ATE0 \n");
 8001048:	489f      	ldr	r0, [pc, #636]	; (80012c8 <gsm_init+0x2d8>)
 800104a:	f007 fd13 	bl	8008a74 <puts>
			  			//if(strncmp(str,"\r\nOK\r\n",6))
			  			 if((strstr(str,"\r\nOK\r\n")!=NULL))
 800104e:	4b9d      	ldr	r3, [pc, #628]	; (80012c4 <gsm_init+0x2d4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	499e      	ldr	r1, [pc, #632]	; (80012cc <gsm_init+0x2dc>)
 8001054:	4618      	mov	r0, r3
 8001056:	f007 fe55 	bl	8008d04 <strstr>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00d      	beq.n	800107c <gsm_init+0x8c>
			  			{
			  				printf("state = %d substate = %d \n",state,substate);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	7bba      	ldrb	r2, [r7, #14]
 8001064:	4619      	mov	r1, r3
 8001066:	489a      	ldr	r0, [pc, #616]	; (80012d0 <gsm_init+0x2e0>)
 8001068:	f007 fc9e 	bl	80089a8 <iprintf>
			  				printf("ATE0 OK \n");
 800106c:	4899      	ldr	r0, [pc, #612]	; (80012d4 <gsm_init+0x2e4>)
 800106e:	f007 fd01 	bl	8008a74 <puts>
			  				  state=1;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
			  				printf("ATE0 ERROR \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 800107a:	e016      	b.n	80010aa <gsm_init+0xba>
			  			  else if(strncmp(str,"\r\nERROR\r\n",6))
 800107c:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <gsm_init+0x2d4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2206      	movs	r2, #6
 8001082:	4995      	ldr	r1, [pc, #596]	; (80012d8 <gsm_init+0x2e8>)
 8001084:	4618      	mov	r0, r3
 8001086:	f007 fe2b 	bl	8008ce0 <strncmp>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <gsm_init+0xba>
			  				printf("state = %d substate = %d \n",state,substate);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	7bba      	ldrb	r2, [r7, #14]
 8001094:	4619      	mov	r1, r3
 8001096:	488e      	ldr	r0, [pc, #568]	; (80012d0 <gsm_init+0x2e0>)
 8001098:	f007 fc86 	bl	80089a8 <iprintf>
			  				printf("ATE0 ERROR \n");
 800109c:	488f      	ldr	r0, [pc, #572]	; (80012dc <gsm_init+0x2ec>)
 800109e:	f007 fce9 	bl	8008a74 <puts>
			  				  state=0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
			  			  break;
 80010aa:	bf00      	nop
			  		  }
			  		  break;
 80010ac:	e247      	b.n	800153e <gsm_init+0x54e>
			  		  printf("case 0 state \n");
			  	  }
			  	  case 1:
			  		  switch(substate)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12e      	bne.n	8001112 <gsm_init+0x122>
			  		  {
			  		  case 0:
			  			  str =send_to_gsm("AT+CMEE=2\r");
 80010b4:	488a      	ldr	r0, [pc, #552]	; (80012e0 <gsm_init+0x2f0>)
 80010b6:	f000 fd2d 	bl	8001b14 <send_to_gsm>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a81      	ldr	r2, [pc, #516]	; (80012c4 <gsm_init+0x2d4>)
 80010be:	6013      	str	r3, [r2, #0]
			  			  printf("CMEE=2 \n");
 80010c0:	4888      	ldr	r0, [pc, #544]	; (80012e4 <gsm_init+0x2f4>)
 80010c2:	f007 fcd7 	bl	8008a74 <puts>
			  			  if(!(strncmp(str,"\r\nOK\r\n",6)))
 80010c6:	4b7f      	ldr	r3, [pc, #508]	; (80012c4 <gsm_init+0x2d4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2206      	movs	r2, #6
 80010cc:	497f      	ldr	r1, [pc, #508]	; (80012cc <gsm_init+0x2dc>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 fe06 	bl	8008ce0 <strncmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <gsm_init+0x106>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	7bba      	ldrb	r2, [r7, #14]
 80010de:	4619      	mov	r1, r3
 80010e0:	487b      	ldr	r0, [pc, #492]	; (80012d0 <gsm_init+0x2e0>)
 80010e2:	f007 fc61 	bl	80089a8 <iprintf>
			  				printf("CMEE=2 OK \n");
 80010e6:	4880      	ldr	r0, [pc, #512]	; (80012e8 <gsm_init+0x2f8>)
 80010e8:	f007 fcc4 	bl	8008a74 <puts>
			  				  state=2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
			  				printf("CMEE=2 OK \n");
			  				  state=0;
			  				  substate=0;

			  			  }
			  			  break;
 80010f4:	e00c      	b.n	8001110 <gsm_init+0x120>
			  				printf("state = %d substate = %d \n",state,substate);
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	7bba      	ldrb	r2, [r7, #14]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4874      	ldr	r0, [pc, #464]	; (80012d0 <gsm_init+0x2e0>)
 80010fe:	f007 fc53 	bl	80089a8 <iprintf>
			  				printf("CMEE=2 OK \n");
 8001102:	4879      	ldr	r0, [pc, #484]	; (80012e8 <gsm_init+0x2f8>)
 8001104:	f007 fcb6 	bl	8008a74 <puts>
			  				  state=0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
			  				  substate=0;
 800110c:	2300      	movs	r3, #0
 800110e:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001110:	bf00      	nop
			  		  }

			  	  case 2:
			  		  switch(substate)
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d13f      	bne.n	8001198 <gsm_init+0x1a8>
			  		  {
			  		  case 0:
			  			  str = send_to_gsm("AT+CPIN?\r");
 8001118:	4874      	ldr	r0, [pc, #464]	; (80012ec <gsm_init+0x2fc>)
 800111a:	f000 fcfb 	bl	8001b14 <send_to_gsm>
 800111e:	4603      	mov	r3, r0
 8001120:	4a68      	ldr	r2, [pc, #416]	; (80012c4 <gsm_init+0x2d4>)
 8001122:	6013      	str	r3, [r2, #0]

			  			 printf("CPIN \n");
 8001124:	4872      	ldr	r0, [pc, #456]	; (80012f0 <gsm_init+0x300>)
 8001126:	f007 fca5 	bl	8008a74 <puts>
			  			  if((strstr(str,"READY")!=NULL))
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <gsm_init+0x2d4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4971      	ldr	r1, [pc, #452]	; (80012f4 <gsm_init+0x304>)
 8001130:	4618      	mov	r0, r3
 8001132:	f007 fde7 	bl	8008d04 <strstr>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00d      	beq.n	8001158 <gsm_init+0x168>
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	7bba      	ldrb	r2, [r7, #14]
 8001140:	4619      	mov	r1, r3
 8001142:	4863      	ldr	r0, [pc, #396]	; (80012d0 <gsm_init+0x2e0>)
 8001144:	f007 fc30 	bl	80089a8 <iprintf>
			  				printf("CPIN READY \n");
 8001148:	486b      	ldr	r0, [pc, #428]	; (80012f8 <gsm_init+0x308>)
 800114a:	f007 fc93 	bl	8008a74 <puts>
			  			      state=3;
 800114e:	2303      	movs	r3, #3
 8001150:	73fb      	strb	r3, [r7, #15]
			  			      substate=0;
 8001152:	2300      	movs	r3, #0
 8001154:	73bb      	strb	r3, [r7, #14]
			  			  {
			  				printf("state = %d substate = %d \n",state,substate);
			  	  			state=0;
			 	  			substate=0;
			  			  }
			  			  break;
 8001156:	e01e      	b.n	8001196 <gsm_init+0x1a6>
			  			  else if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001158:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <gsm_init+0x2d4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2206      	movs	r2, #6
 800115e:	495e      	ldr	r1, [pc, #376]	; (80012d8 <gsm_init+0x2e8>)
 8001160:	4618      	mov	r0, r3
 8001162:	f007 fdbd 	bl	8008ce0 <strncmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10a      	bne.n	8001182 <gsm_init+0x192>
			  				printf("state = %d substate = %d \n",state,substate);
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	4619      	mov	r1, r3
 8001172:	4857      	ldr	r0, [pc, #348]	; (80012d0 <gsm_init+0x2e0>)
 8001174:	f007 fc18 	bl	80089a8 <iprintf>
			  				state=0;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
			  				substate=0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001180:	e009      	b.n	8001196 <gsm_init+0x1a6>
			  				printf("state = %d substate = %d \n",state,substate);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	7bba      	ldrb	r2, [r7, #14]
 8001186:	4619      	mov	r1, r3
 8001188:	4851      	ldr	r0, [pc, #324]	; (80012d0 <gsm_init+0x2e0>)
 800118a:	f007 fc0d 	bl	80089a8 <iprintf>
			  	  			state=0;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
			 	  			substate=0;
 8001192:	2300      	movs	r3, #0
 8001194:	73bb      	strb	r3, [r7, #14]
			  			  break;
 8001196:	bf00      	nop
			  		  }
			  		case 3:
			  			switch(substate)
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 81cf 	bne.w	800153e <gsm_init+0x54e>
			  			{
			  			  case 0:
			  				  str =send_to_gsm("AT+CSQ\r");
 80011a0:	4856      	ldr	r0, [pc, #344]	; (80012fc <gsm_init+0x30c>)
 80011a2:	f000 fcb7 	bl	8001b14 <send_to_gsm>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <gsm_init+0x2d4>)
 80011aa:	6013      	str	r3, [r2, #0]

			  				  printf("CAQ \n");
 80011ac:	4854      	ldr	r0, [pc, #336]	; (8001300 <gsm_init+0x310>)
 80011ae:	f007 fc61 	bl	8008a74 <puts>
			  				  int e=check_signal(str);
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <gsm_init+0x2d4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fa70 	bl	800169c <check_signal>
 80011bc:	6078      	str	r0, [r7, #4]
			  				  if((strstr(str,"OK")!=NULL))
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <gsm_init+0x2d4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4950      	ldr	r1, [pc, #320]	; (8001304 <gsm_init+0x314>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fd9d 	bl	8008d04 <strstr>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01b      	beq.n	8001208 <gsm_init+0x218>
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	7bba      	ldrb	r2, [r7, #14]
 80011d4:	4619      	mov	r1, r3
 80011d6:	483e      	ldr	r0, [pc, #248]	; (80012d0 <gsm_init+0x2e0>)
 80011d8:	f007 fbe6 	bl	80089a8 <iprintf>
			  					  printf("CAQ OK\n");
 80011dc:	484a      	ldr	r0, [pc, #296]	; (8001308 <gsm_init+0x318>)
 80011de:	f007 fc49 	bl	8008a74 <puts>
			  					  if(e==0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <gsm_init+0x208>
			  					  {
			  						  printf("signal OK\n");
 80011e8:	4848      	ldr	r0, [pc, #288]	; (800130c <gsm_init+0x31c>)
 80011ea:	f007 fc43 	bl	8008a74 <puts>
			  						  state=4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73bb      	strb	r3, [r7, #14]
			  				  {
			  					  printf("state = %d substate = %d \n",state,substate);
			  					  state=0;
			  					  substate=0;
			  				  }
			  				  break;
 80011f6:	e011      	b.n	800121c <gsm_init+0x22c>
			  						  printf("signal NOT OK\n");
 80011f8:	4845      	ldr	r0, [pc, #276]	; (8001310 <gsm_init+0x320>)
 80011fa:	f007 fc3b 	bl	8008a74 <puts>
			  						  state=3;
 80011fe:	2303      	movs	r3, #3
 8001200:	73fb      	strb	r3, [r7, #15]
			  						  substate=0;
 8001202:	2300      	movs	r3, #0
 8001204:	73bb      	strb	r3, [r7, #14]
			  				  break;
 8001206:	e009      	b.n	800121c <gsm_init+0x22c>
			  					  printf("state = %d substate = %d \n",state,substate);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	7bba      	ldrb	r2, [r7, #14]
 800120c:	4619      	mov	r1, r3
 800120e:	4830      	ldr	r0, [pc, #192]	; (80012d0 <gsm_init+0x2e0>)
 8001210:	f007 fbca 	bl	80089a8 <iprintf>
			  					  state=0;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
			  					  substate=0;
 8001218:	2300      	movs	r3, #0
 800121a:	73bb      	strb	r3, [r7, #14]
			  				  break;
 800121c:	bf00      	nop
			  			//  case 1:

			  				}
			  			break;
 800121e:	e18e      	b.n	800153e <gsm_init+0x54e>
				  	case 4:
				  	{
				  		switch(substate)
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <gsm_init+0x23c>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d02f      	beq.n	800128a <gsm_init+0x29a>
				  				 state=0;
				  				 substate=0;
				  			 }
				  			 break;
				  		 default:
				  			 break;
 800122a:	e042      	b.n	80012b2 <gsm_init+0x2c2>
				  			  str =send_to_gsm("AT+CREG?\r");
 800122c:	4839      	ldr	r0, [pc, #228]	; (8001314 <gsm_init+0x324>)
 800122e:	f000 fc71 	bl	8001b14 <send_to_gsm>
 8001232:	4603      	mov	r3, r0
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <gsm_init+0x2d4>)
 8001236:	6013      	str	r3, [r2, #0]
				  			  printf("CREG? \n");
 8001238:	4837      	ldr	r0, [pc, #220]	; (8001318 <gsm_init+0x328>)
 800123a:	f007 fc1b 	bl	8008a74 <puts>
				  			  if((strstr(str,"0,1"))||(strstr(str,"0,6")||(strstr(str,"1,6"))))
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <gsm_init+0x2d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4936      	ldr	r1, [pc, #216]	; (800131c <gsm_init+0x32c>)
 8001244:	4618      	mov	r0, r3
 8001246:	f007 fd5d 	bl	8008d04 <strstr>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d111      	bne.n	8001274 <gsm_init+0x284>
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <gsm_init+0x2d4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4932      	ldr	r1, [pc, #200]	; (8001320 <gsm_init+0x330>)
 8001256:	4618      	mov	r0, r3
 8001258:	f007 fd54 	bl	8008d04 <strstr>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d108      	bne.n	8001274 <gsm_init+0x284>
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <gsm_init+0x2d4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	492f      	ldr	r1, [pc, #188]	; (8001324 <gsm_init+0x334>)
 8001268:	4618      	mov	r0, r3
 800126a:	f007 fd4b 	bl	8008d04 <strstr>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <gsm_init+0x294>
				  				  state=5;
 8001274:	2305      	movs	r3, #5
 8001276:	73fb      	strb	r3, [r7, #15]
				  				  substate=0;
 8001278:	2300      	movs	r3, #0
 800127a:	73bb      	strb	r3, [r7, #14]
				  				  printf("match found\n");
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <gsm_init+0x338>)
 800127e:	f007 fbf9 	bl	8008a74 <puts>
				  			  break;
 8001282:	e016      	b.n	80012b2 <gsm_init+0x2c2>
				  				  substate=1;
 8001284:	2301      	movs	r3, #1
 8001286:	73bb      	strb	r3, [r7, #14]
				  			  break;
 8001288:	e013      	b.n	80012b2 <gsm_init+0x2c2>
				  			 if(!(strncmp(str,"\r\nERROR\r\n",6)))
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <gsm_init+0x2d4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2206      	movs	r2, #6
 8001290:	4911      	ldr	r1, [pc, #68]	; (80012d8 <gsm_init+0x2e8>)
 8001292:	4618      	mov	r0, r3
 8001294:	f007 fd24 	bl	8008ce0 <strncmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <gsm_init+0x2b8>
				  				 state=0;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012a6:	e003      	b.n	80012b0 <gsm_init+0x2c0>
				  				 state=0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
				  				 substate=0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73bb      	strb	r3, [r7, #14]
				  			 break;
 80012b0:	bf00      	nop
				  		}
				  		break;
 80012b2:	e144      	b.n	800153e <gsm_init+0x54e>
				  	}

				  	case 5:
				  		switch(substate)
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d038      	beq.n	800132c <gsm_init+0x33c>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d059      	beq.n	8001372 <gsm_init+0x382>
				  				state=0;
				  				substate=0;
				  			}
				  			break;
				  		default:
				  			break;
 80012be:	e071      	b.n	80013a4 <gsm_init+0x3b4>
 80012c0:	0800cee8 	.word	0x0800cee8
 80012c4:	200002cc 	.word	0x200002cc
 80012c8:	0800cef0 	.word	0x0800cef0
 80012cc:	0800cef8 	.word	0x0800cef8
 80012d0:	0800cf00 	.word	0x0800cf00
 80012d4:	0800cf1c 	.word	0x0800cf1c
 80012d8:	0800cf28 	.word	0x0800cf28
 80012dc:	0800cf34 	.word	0x0800cf34
 80012e0:	0800cf40 	.word	0x0800cf40
 80012e4:	0800cf4c 	.word	0x0800cf4c
 80012e8:	0800cf54 	.word	0x0800cf54
 80012ec:	0800cf60 	.word	0x0800cf60
 80012f0:	0800cf6c 	.word	0x0800cf6c
 80012f4:	0800cf74 	.word	0x0800cf74
 80012f8:	0800cf7c 	.word	0x0800cf7c
 80012fc:	0800cf88 	.word	0x0800cf88
 8001300:	0800cf90 	.word	0x0800cf90
 8001304:	0800cf98 	.word	0x0800cf98
 8001308:	0800cf9c 	.word	0x0800cf9c
 800130c:	0800cfa4 	.word	0x0800cfa4
 8001310:	0800cfb0 	.word	0x0800cfb0
 8001314:	0800cfc0 	.word	0x0800cfc0
 8001318:	0800cfcc 	.word	0x0800cfcc
 800131c:	0800cfd4 	.word	0x0800cfd4
 8001320:	0800cfd8 	.word	0x0800cfd8
 8001324:	0800cfdc 	.word	0x0800cfdc
 8001328:	0800cfe0 	.word	0x0800cfe0
				  			str = send_to_gsm("AT+CGREG?\r");
 800132c:	4889      	ldr	r0, [pc, #548]	; (8001554 <gsm_init+0x564>)
 800132e:	f000 fbf1 	bl	8001b14 <send_to_gsm>
 8001332:	4603      	mov	r3, r0
 8001334:	4a88      	ldr	r2, [pc, #544]	; (8001558 <gsm_init+0x568>)
 8001336:	6013      	str	r3, [r2, #0]
				  			if((strstr(str,"0,1"))||(strstr(str,"1,1")))
 8001338:	4b87      	ldr	r3, [pc, #540]	; (8001558 <gsm_init+0x568>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4987      	ldr	r1, [pc, #540]	; (800155c <gsm_init+0x56c>)
 800133e:	4618      	mov	r0, r3
 8001340:	f007 fce0 	bl	8008d04 <strstr>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d108      	bne.n	800135c <gsm_init+0x36c>
 800134a:	4b83      	ldr	r3, [pc, #524]	; (8001558 <gsm_init+0x568>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4984      	ldr	r1, [pc, #528]	; (8001560 <gsm_init+0x570>)
 8001350:	4618      	mov	r0, r3
 8001352:	f007 fcd7 	bl	8008d04 <strstr>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <gsm_init+0x37c>
				  				state=6;
 800135c:	2306      	movs	r3, #6
 800135e:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 8001360:	2300      	movs	r3, #0
 8001362:	73bb      	strb	r3, [r7, #14]
				  				printf("match found\n");
 8001364:	487f      	ldr	r0, [pc, #508]	; (8001564 <gsm_init+0x574>)
 8001366:	f007 fb85 	bl	8008a74 <puts>
				  			break;
 800136a:	e01b      	b.n	80013a4 <gsm_init+0x3b4>
				  				substate=1;
 800136c:	2301      	movs	r3, #1
 800136e:	73bb      	strb	r3, [r7, #14]
				  			break;
 8001370:	e018      	b.n	80013a4 <gsm_init+0x3b4>
				  			str = send_to_gsm("AT+CGREG=1\r");
 8001372:	487d      	ldr	r0, [pc, #500]	; (8001568 <gsm_init+0x578>)
 8001374:	f000 fbce 	bl	8001b14 <send_to_gsm>
 8001378:	4603      	mov	r3, r0
 800137a:	4a77      	ldr	r2, [pc, #476]	; (8001558 <gsm_init+0x568>)
 800137c:	6013      	str	r3, [r2, #0]
				  			if(strstr(str,"OK"))
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <gsm_init+0x568>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	497a      	ldr	r1, [pc, #488]	; (800156c <gsm_init+0x57c>)
 8001384:	4618      	mov	r0, r3
 8001386:	f007 fcbd 	bl	8008d04 <strstr>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <gsm_init+0x3aa>
				  				state=5;
 8001390:	2305      	movs	r3, #5
 8001392:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 8001394:	2300      	movs	r3, #0
 8001396:	73bb      	strb	r3, [r7, #14]
				  			break;
 8001398:	e003      	b.n	80013a2 <gsm_init+0x3b2>
				  				state=0;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
				  				substate=0;
 800139e:	2300      	movs	r3, #0
 80013a0:	73bb      	strb	r3, [r7, #14]
				  			break;
 80013a2:	bf00      	nop
				  		}
				  		break;
 80013a4:	e0cb      	b.n	800153e <gsm_init+0x54e>

				  	case 6:
				  		{
				  			switch(substate)
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d04a      	beq.n	8001442 <gsm_init+0x452>
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	f300 80c6 	bgt.w	800153e <gsm_init+0x54e>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <gsm_init+0x3cc>
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d026      	beq.n	8001408 <gsm_init+0x418>
 80013ba:	e0c0      	b.n	800153e <gsm_init+0x54e>
				  			{
				  			case 0:
				  				str = send_to_gsm("AT+COPS?\r");
 80013bc:	486c      	ldr	r0, [pc, #432]	; (8001570 <gsm_init+0x580>)
 80013be:	f000 fba9 	bl	8001b14 <send_to_gsm>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a64      	ldr	r2, [pc, #400]	; (8001558 <gsm_init+0x568>)
 80013c6:	6013      	str	r3, [r2, #0]

				  				printf("COPS?\n");
 80013c8:	486a      	ldr	r0, [pc, #424]	; (8001574 <gsm_init+0x584>)
 80013ca:	f007 fb53 	bl	8008a74 <puts>
				  				if((strstr(str,"40449")!=NULL))
 80013ce:	4b62      	ldr	r3, [pc, #392]	; (8001558 <gsm_init+0x568>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4969      	ldr	r1, [pc, #420]	; (8001578 <gsm_init+0x588>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f007 fc95 	bl	8008d04 <strstr>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00a      	beq.n	80013f6 <gsm_init+0x406>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	7bba      	ldrb	r2, [r7, #14]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4865      	ldr	r0, [pc, #404]	; (800157c <gsm_init+0x58c>)
 80013e8:	f007 fade 	bl	80089a8 <iprintf>
				  					state=7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	73fb      	strb	r3, [r7, #15]
				  					substate=1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=1;
				  				}
				  				break;
 80013f4:	e044      	b.n	8001480 <gsm_init+0x490>
				  					printf("state = %d substate = %d \n",state,substate);
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	7bba      	ldrb	r2, [r7, #14]
 80013fa:	4619      	mov	r1, r3
 80013fc:	485f      	ldr	r0, [pc, #380]	; (800157c <gsm_init+0x58c>)
 80013fe:	f007 fad3 	bl	80089a8 <iprintf>
				  					substate=1;
 8001402:	2301      	movs	r3, #1
 8001404:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001406:	e03b      	b.n	8001480 <gsm_init+0x490>
				  			case 1:
				  				if((strstr(str,"405854")!=NULL))
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <gsm_init+0x568>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	495c      	ldr	r1, [pc, #368]	; (8001580 <gsm_init+0x590>)
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fc78 	bl	8008d04 <strstr>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <gsm_init+0x440>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	7bba      	ldrb	r2, [r7, #14]
 800141e:	4619      	mov	r1, r3
 8001420:	4856      	ldr	r0, [pc, #344]	; (800157c <gsm_init+0x58c>)
 8001422:	f007 fac1 	bl	80089a8 <iprintf>
				  					state=7;
 8001426:	2307      	movs	r3, #7
 8001428:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800142a:	2300      	movs	r3, #0
 800142c:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					//state=6;
				  					substate=2;
				  				}
				  				break;
 800142e:	e027      	b.n	8001480 <gsm_init+0x490>
				  					printf("state = %d substate = %d \n",state,substate);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	7bba      	ldrb	r2, [r7, #14]
 8001434:	4619      	mov	r1, r3
 8001436:	4851      	ldr	r0, [pc, #324]	; (800157c <gsm_init+0x58c>)
 8001438:	f007 fab6 	bl	80089a8 <iprintf>
				  					substate=2;
 800143c:	2302      	movs	r3, #2
 800143e:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001440:	e01e      	b.n	8001480 <gsm_init+0x490>
				  			case 2:
				  				if((strstr(str,"ERROR")!=NULL))
 8001442:	4b45      	ldr	r3, [pc, #276]	; (8001558 <gsm_init+0x568>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	494f      	ldr	r1, [pc, #316]	; (8001584 <gsm_init+0x594>)
 8001448:	4618      	mov	r0, r3
 800144a:	f007 fc5b 	bl	8008d04 <strstr>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00a      	beq.n	800146a <gsm_init+0x47a>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	7bba      	ldrb	r2, [r7, #14]
 8001458:	4619      	mov	r1, r3
 800145a:	4848      	ldr	r0, [pc, #288]	; (800157c <gsm_init+0x58c>)
 800145c:	f007 faa4 	bl	80089a8 <iprintf>
				  					state=0;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001464:	2300      	movs	r3, #0
 8001466:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 8001468:	e009      	b.n	800147e <gsm_init+0x48e>
				  					printf("state = %d substate = %d \n",state,substate);
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	7bba      	ldrb	r2, [r7, #14]
 800146e:	4619      	mov	r1, r3
 8001470:	4842      	ldr	r0, [pc, #264]	; (800157c <gsm_init+0x58c>)
 8001472:	f007 fa99 	bl	80089a8 <iprintf>
				  					state=0;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800147a:	2300      	movs	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]
				  				break;
 800147e:	bf00      	nop

				  			}
				  			break;
 8001480:	e05d      	b.n	800153e <gsm_init+0x54e>
				  		}
				  		case 7:
				  		{
				  			switch(substate)
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <gsm_init+0x49e>
 8001488:	2b01      	cmp	r3, #1
 800148a:	d029      	beq.n	80014e0 <gsm_init+0x4f0>
 800148c:	e057      	b.n	800153e <gsm_init+0x54e>
				  			{
				  			case 0:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 800148e:	483e      	ldr	r0, [pc, #248]	; (8001588 <gsm_init+0x598>)
 8001490:	f000 fb40 	bl	8001b14 <send_to_gsm>
 8001494:	4603      	mov	r3, r0
 8001496:	4a30      	ldr	r2, [pc, #192]	; (8001558 <gsm_init+0x568>)
 8001498:	6013      	str	r3, [r2, #0]

				  				printf("CGDCONT=1 jio\n");
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <gsm_init+0x59c>)
 800149c:	f007 faea 	bl	8008a74 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <gsm_init+0x568>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2206      	movs	r2, #6
 80014a6:	493a      	ldr	r1, [pc, #232]	; (8001590 <gsm_init+0x5a0>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 fc19 	bl	8008ce0 <strncmp>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10a      	bne.n	80014ca <gsm_init+0x4da>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	7bba      	ldrb	r2, [r7, #14]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4830      	ldr	r0, [pc, #192]	; (800157c <gsm_init+0x58c>)
 80014bc:	f007 fa74 	bl	80089a8 <iprintf>
				  					state=8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=6;
				  					substate=0;
				  				}
				  				break;
 80014c8:	e033      	b.n	8001532 <gsm_init+0x542>
				  					printf("state = %d substate = %d \n",state,substate);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	7bba      	ldrb	r2, [r7, #14]
 80014ce:	4619      	mov	r1, r3
 80014d0:	482a      	ldr	r0, [pc, #168]	; (800157c <gsm_init+0x58c>)
 80014d2:	f007 fa69 	bl	80089a8 <iprintf>
				  					state=6;
 80014d6:	2306      	movs	r3, #6
 80014d8:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]
				  				break;
 80014de:	e028      	b.n	8001532 <gsm_init+0x542>
				  			case 1:
				  				str =send_to_gsm("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 80014e0:	482c      	ldr	r0, [pc, #176]	; (8001594 <gsm_init+0x5a4>)
 80014e2:	f000 fb17 	bl	8001b14 <send_to_gsm>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <gsm_init+0x568>)
 80014ea:	6013      	str	r3, [r2, #0]

				  				printf("CGDCONT=1 airtel\n");
 80014ec:	482a      	ldr	r0, [pc, #168]	; (8001598 <gsm_init+0x5a8>)
 80014ee:	f007 fac1 	bl	8008a74 <puts>
				  				if(!(strncmp(str,"\r\nOK\r\n",6)))
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <gsm_init+0x568>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2206      	movs	r2, #6
 80014f8:	4925      	ldr	r1, [pc, #148]	; (8001590 <gsm_init+0x5a0>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f007 fbf0 	bl	8008ce0 <strncmp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10a      	bne.n	800151c <gsm_init+0x52c>
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	7bba      	ldrb	r2, [r7, #14]
 800150a:	4619      	mov	r1, r3
 800150c:	481b      	ldr	r0, [pc, #108]	; (800157c <gsm_init+0x58c>)
 800150e:	f007 fa4b 	bl	80089a8 <iprintf>
				  					state=8;
 8001512:	2308      	movs	r3, #8
 8001514:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 8001516:	2300      	movs	r3, #0
 8001518:	73bb      	strb	r3, [r7, #14]
				  				{
				  					printf("state = %d substate = %d \n",state,substate);
				  					state=0;
				  					substate=0;
				  				}
				  				break;
 800151a:	e009      	b.n	8001530 <gsm_init+0x540>
				  					printf("state = %d substate = %d \n",state,substate);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	7bba      	ldrb	r2, [r7, #14]
 8001520:	4619      	mov	r1, r3
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <gsm_init+0x58c>)
 8001524:	f007 fa40 	bl	80089a8 <iprintf>
				  					state=0;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
				  					substate=0;
 800152c:	2300      	movs	r3, #0
 800152e:	73bb      	strb	r3, [r7, #14]
				  				break;
 8001530:	bf00      	nop
				  			}

				  			break;
 8001532:	e004      	b.n	800153e <gsm_init+0x54e>

				  		}


				  		default:
				  			printf("completed work \n");
 8001534:	4819      	ldr	r0, [pc, #100]	; (800159c <gsm_init+0x5ac>)
 8001536:	f007 fa9d 	bl	8008a74 <puts>
				  			return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e006      	b.n	800154c <gsm_init+0x55c>
	while(count--)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	60ba      	str	r2, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f ad5d 	bne.w	8001004 <gsm_init+0x14>
			  	  }
	}
	return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	0800cfec 	.word	0x0800cfec
 8001558:	200002cc 	.word	0x200002cc
 800155c:	0800cfd4 	.word	0x0800cfd4
 8001560:	0800cff8 	.word	0x0800cff8
 8001564:	0800cfe0 	.word	0x0800cfe0
 8001568:	0800cffc 	.word	0x0800cffc
 800156c:	0800cf98 	.word	0x0800cf98
 8001570:	0800d008 	.word	0x0800d008
 8001574:	0800d014 	.word	0x0800d014
 8001578:	0800d01c 	.word	0x0800d01c
 800157c:	0800cf00 	.word	0x0800cf00
 8001580:	0800d024 	.word	0x0800d024
 8001584:	0800d02c 	.word	0x0800d02c
 8001588:	0800d034 	.word	0x0800d034
 800158c:	0800d050 	.word	0x0800d050
 8001590:	0800cef8 	.word	0x0800cef8
 8001594:	0800d060 	.word	0x0800d060
 8001598:	0800d084 	.word	0x0800d084
 800159c:	0800d098 	.word	0x0800d098

080015a0 <my_check_server>:


int my_check_server()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	str = send_to_gsm("AT+CIPOPEN?\r");
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <my_check_server+0x50>)
 80015a6:	f000 fab5 	bl	8001b14 <send_to_gsm>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <my_check_server+0x54>)
 80015ae:	6013      	str	r3, [r2, #0]
	if(strstr(str,"139.59.78.252")!=NULL)
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <my_check_server+0x54>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4910      	ldr	r1, [pc, #64]	; (80015f8 <my_check_server+0x58>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 fba4 	bl	8008d04 <strstr>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <my_check_server+0x26>
	{
		return 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e011      	b.n	80015ea <my_check_server+0x4a>

	}
	else
	{
		str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",52102\r");
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <my_check_server+0x5c>)
 80015c8:	f000 faa4 	bl	8001b14 <send_to_gsm>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <my_check_server+0x54>)
 80015d0:	6013      	str	r3, [r2, #0]
		if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <my_check_server+0x54>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	490a      	ldr	r1, [pc, #40]	; (8001600 <my_check_server+0x60>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f007 fb93 	bl	8008d04 <strstr>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <my_check_server+0x48>
		{
			return 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <my_check_server+0x4a>
		}
		else
		{
			return 1;
 80015e8:	2301      	movs	r3, #1
		}

	}
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	0800d0a8 	.word	0x0800d0a8
 80015f4:	200002cc 	.word	0x200002cc
 80015f8:	0800d0b8 	.word	0x0800d0b8
 80015fc:	0800d0c8 	.word	0x0800d0c8
 8001600:	0800d0f4 	.word	0x0800d0f4

08001604 <check_server_connection>:



int check_server_connection()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
	int state=0,substate=0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
	int time_out=30;
 8001612:	231e      	movs	r3, #30
 8001614:	607b      	str	r3, [r7, #4]
	while(time_out)
 8001616:	e02d      	b.n	8001674 <check_server_connection+0x70>
	{
		switch(state)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <check_server_connection+0x22>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d014      	beq.n	800164e <check_server_connection+0x4a>
 8001624:	e026      	b.n	8001674 <check_server_connection+0x70>
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN?\r");
 8001626:	4817      	ldr	r0, [pc, #92]	; (8001684 <check_server_connection+0x80>)
 8001628:	f000 fa74 	bl	8001b14 <send_to_gsm>
 800162c:	4603      	mov	r3, r0
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <check_server_connection+0x84>)
 8001630:	6013      	str	r3, [r2, #0]
			if(strstr(str,"ERROR")!=NULL)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <check_server_connection+0x84>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4915      	ldr	r1, [pc, #84]	; (800168c <check_server_connection+0x88>)
 8001638:	4618      	mov	r0, r3
 800163a:	f007 fb63 	bl	8008d04 <strstr>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <check_server_connection+0x46>
			{
				state=0;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e001      	b.n	800164e <check_server_connection+0x4a>
			}
			else
			{
				substate=1;
 800164a:	2301      	movs	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
			}
		case 1:
			if(strstr(str,"139.59.78.252")!=NULL)
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <check_server_connection+0x84>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	490f      	ldr	r1, [pc, #60]	; (8001690 <check_server_connection+0x8c>)
 8001654:	4618      	mov	r0, r3
 8001656:	f007 fb55 	bl	8008d04 <strstr>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <check_server_connection+0x66>
			{
				printf("tcp connection established\n");
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <check_server_connection+0x90>)
 8001662:	f007 fa07 	bl	8008a74 <puts>
				return 0;
 8001666:	2300      	movs	r3, #0
 8001668:	e008      	b.n	800167c <check_server_connection+0x78>
			}
			else
			{
				printf("tcp connection NOT established\n");
 800166a:	480b      	ldr	r0, [pc, #44]	; (8001698 <check_server_connection+0x94>)
 800166c:	f007 fa02 	bl	8008a74 <puts>
				return 1;
 8001670:	2301      	movs	r3, #1
 8001672:	e003      	b.n	800167c <check_server_connection+0x78>
	while(time_out)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ce      	bne.n	8001618 <check_server_connection+0x14>
			}

		}
	}
	return 1;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0800d0a8 	.word	0x0800d0a8
 8001688:	200002cc 	.word	0x200002cc
 800168c:	0800d02c 	.word	0x0800d02c
 8001690:	0800d0b8 	.word	0x0800d0b8
 8001694:	0800d104 	.word	0x0800d104
 8001698:	0800d120 	.word	0x0800d120

0800169c <check_signal>:


}

int check_signal(char *str)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	char *rssi,*ber;
	int i=0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 80016a8:	e04b      	b.n	8001742 <check_signal+0xa6>
	{
	    if((str[i-1]==' ')&&(str[i-2]==':'))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d120      	bne.n	80016fa <check_signal+0x5e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3b02      	subs	r3, #2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b3a      	cmp	r3, #58	; 0x3a
 80016c4:	d119      	bne.n	80016fa <check_signal+0x5e>
	    {
		if((str[i]>='0')||(str[i]<='9'))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b2f      	cmp	r3, #47	; 0x2f
 80016d0:	d805      	bhi.n	80016de <check_signal+0x42>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b39      	cmp	r3, #57	; 0x39
 80016dc:	d80d      	bhi.n	80016fa <check_signal+0x5e>
		{
			rssi=str+i;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
			printf("rssi %c %c\n",*rssi,*(rssi+1));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4833      	ldr	r0, [pc, #204]	; (80017c4 <check_signal+0x128>)
 80016f6:	f007 f957 	bl	80089a8 <iprintf>
		}
	    }
	    if(str[i-1]==',')
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b2c      	cmp	r3, #44	; 0x2c
 8001706:	d119      	bne.n	800173c <check_signal+0xa0>
	    {
	        	if((str[i]>='0')||(str[i]<='9'))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b2f      	cmp	r3, #47	; 0x2f
 8001712:	d805      	bhi.n	8001720 <check_signal+0x84>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b39      	cmp	r3, #57	; 0x39
 800171e:	d80d      	bhi.n	800173c <check_signal+0xa0>
		        {
		        	ber=str+i;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
		        	printf("ber %c %c\n",*ber,*(ber+1));
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3301      	adds	r3, #1
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <check_signal+0x12c>)
 8001738:	f007 f936 	bl	80089a8 <iprintf>
	        	}

	    }
		i++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3301      	adds	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
	while(*(str+i)!='\0')
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ad      	bne.n	80016aa <check_signal+0xe>
	}
	printf("out rssi %c %c\n",*rssi,*(rssi+1));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	481b      	ldr	r0, [pc, #108]	; (80017cc <check_signal+0x130>)
 800175e:	f007 f923 	bl	80089a8 <iprintf>
	printf("out ber %c %c\n",*ber,*(ber+1));
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	3301      	adds	r3, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4817      	ldr	r0, [pc, #92]	; (80017d0 <check_signal+0x134>)
 8001772:	f007 f919 	bl	80089a8 <iprintf>
	if((*ber=='9')&&(*(ber+1)=='9'))
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b39      	cmp	r3, #57	; 0x39
 800177c:	d11d      	bne.n	80017ba <check_signal+0x11e>
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	3301      	adds	r3, #1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b39      	cmp	r3, #57	; 0x39
 8001786:	d118      	bne.n	80017ba <check_signal+0x11e>
	{
	    if(((*rssi>='2')||(*rssi<'9'))&&((*(rssi+1)>='0')||(*(rssi+1)<='9')))
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b31      	cmp	r3, #49	; 0x31
 800178e:	d803      	bhi.n	8001798 <check_signal+0xfc>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b38      	cmp	r3, #56	; 0x38
 8001796:	d80e      	bhi.n	80017b6 <check_signal+0x11a>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b2f      	cmp	r3, #47	; 0x2f
 80017a0:	d804      	bhi.n	80017ac <check_signal+0x110>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b39      	cmp	r3, #57	; 0x39
 80017aa:	d804      	bhi.n	80017b6 <check_signal+0x11a>
	    {
	    printf("ok");
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <check_signal+0x138>)
 80017ae:	f007 f8fb 	bl	80089a8 <iprintf>
	    return 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e002      	b.n	80017bc <check_signal+0x120>
	    }
	    else
	    {
	    	return 1;;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <check_signal+0x120>
	    }
	}
	else
	{
	    return 1;
 80017ba:	2301      	movs	r3, #1
	}
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0800d150 	.word	0x0800d150
 80017c8:	0800d15c 	.word	0x0800d15c
 80017cc:	0800d168 	.word	0x0800d168
 80017d0:	0800d178 	.word	0x0800d178
 80017d4:	0800d188 	.word	0x0800d188

080017d8 <connect_tcp_server>:

int connect_tcp_server()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
	int state=0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
	int substate=0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
	int count=30;
 80017e6:	231e      	movs	r3, #30
 80017e8:	607b      	str	r3, [r7, #4]
	while(count--)
 80017ea:	e0f3      	b.n	80019d4 <connect_tcp_server+0x1fc>
	{
	switch(state)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f000 8086 	beq.w	8001900 <connect_tcp_server+0x128>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f300 80e7 	bgt.w	80019ca <connect_tcp_server+0x1f2>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <connect_tcp_server+0x32>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d036      	beq.n	8001876 <connect_tcp_server+0x9e>
 8001808:	e0df      	b.n	80019ca <connect_tcp_server+0x1f2>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <connect_tcp_server+0x40>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d017      	beq.n	8001846 <connect_tcp_server+0x6e>
 8001816:	e0dd      	b.n	80019d4 <connect_tcp_server+0x1fc>
	case 0:
	{
		switch(substate)
		{
		case 0:
			str=send_to_gsm("AT+CIPMODE?\r\n");
 8001818:	4875      	ldr	r0, [pc, #468]	; (80019f0 <connect_tcp_server+0x218>)
 800181a:	f000 f97b 	bl	8001b14 <send_to_gsm>
 800181e:	4603      	mov	r3, r0
 8001820:	4a74      	ldr	r2, [pc, #464]	; (80019f4 <connect_tcp_server+0x21c>)
 8001822:	6013      	str	r3, [r2, #0]
			if(strstr(str,"+CIPMODE: 0"))
 8001824:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <connect_tcp_server+0x21c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4973      	ldr	r1, [pc, #460]	; (80019f8 <connect_tcp_server+0x220>)
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fa6a 	bl	8008d04 <strstr>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <connect_tcp_server+0x68>
			{
				state=1;
 8001836:	2301      	movs	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
				substate=0;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=1;
			}
			break;
 800183e:	e019      	b.n	8001874 <connect_tcp_server+0x9c>
				substate=1;
 8001840:	2301      	movs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
			break;
 8001844:	e016      	b.n	8001874 <connect_tcp_server+0x9c>
		case 1:
			str=send_to_gsm("AT+CIPMODE=0\r\n");
 8001846:	486d      	ldr	r0, [pc, #436]	; (80019fc <connect_tcp_server+0x224>)
 8001848:	f000 f964 	bl	8001b14 <send_to_gsm>
 800184c:	4603      	mov	r3, r0
 800184e:	4a69      	ldr	r2, [pc, #420]	; (80019f4 <connect_tcp_server+0x21c>)
 8001850:	6013      	str	r3, [r2, #0]
			if(strstr(str,"OK"))
 8001852:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <connect_tcp_server+0x21c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	496a      	ldr	r1, [pc, #424]	; (8001a00 <connect_tcp_server+0x228>)
 8001858:	4618      	mov	r0, r3
 800185a:	f007 fa53 	bl	8008d04 <strstr>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <connect_tcp_server+0x96>
			{
				state=0;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
				substate=0;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
			}
			else
			{
				substate=0;
			}
			break;
 800186c:	e001      	b.n	8001872 <connect_tcp_server+0x9a>
				substate=0;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
			break;
 8001872:	bf00      	nop
		}
		break;
 8001874:	e0ae      	b.n	80019d4 <connect_tcp_server+0x1fc>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <connect_tcp_server+0xac>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d025      	beq.n	80018ce <connect_tcp_server+0xf6>
 8001882:	e0a7      	b.n	80019d4 <connect_tcp_server+0x1fc>
	case 1:
	{
		switch(substate)
		{
		case 0:
			str = send_to_gsm("AT+NETOPEN\r\n");
 8001884:	485f      	ldr	r0, [pc, #380]	; (8001a04 <connect_tcp_server+0x22c>)
 8001886:	f000 f945 	bl	8001b14 <send_to_gsm>
 800188a:	4603      	mov	r3, r0
 800188c:	4a59      	ldr	r2, [pc, #356]	; (80019f4 <connect_tcp_server+0x21c>)
 800188e:	6013      	str	r3, [r2, #0]

			printf("NETOPEN\n");
 8001890:	485d      	ldr	r0, [pc, #372]	; (8001a08 <connect_tcp_server+0x230>)
 8001892:	f007 f8ef 	bl	8008a74 <puts>
			if(!(strncmp(str,"\r\nOK\r\n",6)))
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <connect_tcp_server+0x21c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2206      	movs	r2, #6
 800189c:	495b      	ldr	r1, [pc, #364]	; (8001a0c <connect_tcp_server+0x234>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 fa1e 	bl	8008ce0 <strncmp>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <connect_tcp_server+0xe6>
			{
				printf("state = %d substate = %d \n",state,substate);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	68f9      	ldr	r1, [r7, #12]
 80018ae:	4858      	ldr	r0, [pc, #352]	; (8001a10 <connect_tcp_server+0x238>)
 80018b0:	f007 f87a 	bl	80089a8 <iprintf>
				state=2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
			else
			{
				printf("state = %d substate = %d \n",state,substate);
				substate=1;
			}
			break;
 80018bc:	e01f      	b.n	80018fe <connect_tcp_server+0x126>
				printf("state = %d substate = %d \n",state,substate);
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	4853      	ldr	r0, [pc, #332]	; (8001a10 <connect_tcp_server+0x238>)
 80018c4:	f007 f870 	bl	80089a8 <iprintf>
				substate=1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
			break;
 80018cc:	e017      	b.n	80018fe <connect_tcp_server+0x126>
		case 1:
			if((strstr(str,"Network is already opened")!=NULL))
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <connect_tcp_server+0x21c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4950      	ldr	r1, [pc, #320]	; (8001a14 <connect_tcp_server+0x23c>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 fa15 	bl	8008d04 <strstr>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <connect_tcp_server+0x11c>
			{
				printf("state = %d substate = %d \n",state,substate);
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	484a      	ldr	r0, [pc, #296]	; (8001a10 <connect_tcp_server+0x238>)
 80018e6:	f007 f85f 	bl	80089a8 <iprintf>
				state=2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
			else
			{
				state=0;
				substate=0;
			}
			break;
 80018f2:	e003      	b.n	80018fc <connect_tcp_server+0x124>
				state=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
				substate=0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
			break;
 80018fc:	bf00      	nop

		}
		break;
 80018fe:	e069      	b.n	80019d4 <connect_tcp_server+0x1fc>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d044      	beq.n	8001990 <connect_tcp_server+0x1b8>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b02      	cmp	r3, #2
 800190a:	dc63      	bgt.n	80019d4 <connect_tcp_server+0x1fc>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <connect_tcp_server+0x142>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d024      	beq.n	8001962 <connect_tcp_server+0x18a>
 8001918:	e05c      	b.n	80019d4 <connect_tcp_server+0x1fc>
	case 2:
	{
		switch(substate)
		{
		case 0:
			str =send_to_gsm("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",52102\r");
 800191a:	483f      	ldr	r0, [pc, #252]	; (8001a18 <connect_tcp_server+0x240>)
 800191c:	f000 f8fa 	bl	8001b14 <send_to_gsm>
 8001920:	4603      	mov	r3, r0
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <connect_tcp_server+0x21c>)
 8001924:	6013      	str	r3, [r2, #0]

			printf("CIPOPEN\n");
 8001926:	483d      	ldr	r0, [pc, #244]	; (8001a1c <connect_tcp_server+0x244>)
 8001928:	f007 f8a4 	bl	8008a74 <puts>
			if((strstr(str,"CIPOPEN: 0,0")!=NULL))
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <connect_tcp_server+0x21c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	493b      	ldr	r1, [pc, #236]	; (8001a20 <connect_tcp_server+0x248>)
 8001932:	4618      	mov	r0, r3
 8001934:	f007 f9e6 	bl	8008d04 <strstr>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <connect_tcp_server+0x17a>
				//if(!(strncmp(str,"\r\n+CIPOPEN: 0,0\r\n",6)))
			{
				printf("state = %d substate = %d \n",state,substate);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	4833      	ldr	r0, [pc, #204]	; (8001a10 <connect_tcp_server+0x238>)
 8001944:	f007 f830 	bl	80089a8 <iprintf>
				state=3;
 8001948:	2303      	movs	r3, #3
 800194a:	60fb      	str	r3, [r7, #12]
				substate=0;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=1;
			}
			break;
 8001950:	e03a      	b.n	80019c8 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	68f9      	ldr	r1, [r7, #12]
 8001956:	482e      	ldr	r0, [pc, #184]	; (8001a10 <connect_tcp_server+0x238>)
 8001958:	f007 f826 	bl	80089a8 <iprintf>
				substate=1;
 800195c:	2301      	movs	r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
			break;
 8001960:	e032      	b.n	80019c8 <connect_tcp_server+0x1f0>
		case 1:
			if(check_server_connection()==0)
 8001962:	f7ff fe4f 	bl	8001604 <check_server_connection>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <connect_tcp_server+0x1a8>
			{
				printf("state = %d substate = %d \n",state,substate);
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	68f9      	ldr	r1, [r7, #12]
 8001970:	4827      	ldr	r0, [pc, #156]	; (8001a10 <connect_tcp_server+0x238>)
 8001972:	f007 f819 	bl	80089a8 <iprintf>
				state=3;
 8001976:	2303      	movs	r3, #3
 8001978:	60fb      	str	r3, [r7, #12]
				substate=0;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				//state=0;
				substate=2;
			}
			break;
 800197e:	e023      	b.n	80019c8 <connect_tcp_server+0x1f0>
				printf("state = %d substate = %d \n",state,substate);
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	4822      	ldr	r0, [pc, #136]	; (8001a10 <connect_tcp_server+0x238>)
 8001986:	f007 f80f 	bl	80089a8 <iprintf>
				substate=2;
 800198a:	2302      	movs	r3, #2
 800198c:	60bb      	str	r3, [r7, #8]
			break;
 800198e:	e01b      	b.n	80019c8 <connect_tcp_server+0x1f0>
		case 2:
			//if((strstr(str,"ERROR")!=NULL))
			if(!(strncmp(str,"\r\nERROR\r\n",6)))
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <connect_tcp_server+0x21c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2206      	movs	r2, #6
 8001996:	4923      	ldr	r1, [pc, #140]	; (8001a24 <connect_tcp_server+0x24c>)
 8001998:	4618      	mov	r0, r3
 800199a:	f007 f9a1 	bl	8008ce0 <strncmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <connect_tcp_server+0x1dc>
			{
				printf("state = %d substate = %d \n",state,substate);
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	68f9      	ldr	r1, [r7, #12]
 80019a8:	4819      	ldr	r0, [pc, #100]	; (8001a10 <connect_tcp_server+0x238>)
 80019aa:	f006 fffd 	bl	80089a8 <iprintf>
				//state=3;
				substate=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
			{
				printf("state = %d substate = %d \n",state,substate);
				state=0;
				substate=0;
			}
			break;
 80019b2:	e008      	b.n	80019c6 <connect_tcp_server+0x1ee>
				printf("state = %d substate = %d \n",state,substate);
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	4815      	ldr	r0, [pc, #84]	; (8001a10 <connect_tcp_server+0x238>)
 80019ba:	f006 fff5 	bl	80089a8 <iprintf>
				state=0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
				substate=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
			break;
 80019c6:	bf00      	nop


		}
		break;
 80019c8:	e004      	b.n	80019d4 <connect_tcp_server+0x1fc>
	}
	default:
		printf("opened successfulyy\n");
 80019ca:	4817      	ldr	r0, [pc, #92]	; (8001a28 <connect_tcp_server+0x250>)
 80019cc:	f007 f852 	bl	8008a74 <puts>
		return 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e009      	b.n	80019e8 <connect_tcp_server+0x210>
	while(count--)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f af06 	bne.w	80017ec <connect_tcp_server+0x14>
	}
}
	printf("Time out\n");
 80019e0:	4812      	ldr	r0, [pc, #72]	; (8001a2c <connect_tcp_server+0x254>)
 80019e2:	f007 f847 	bl	8008a74 <puts>

	return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800d18c 	.word	0x0800d18c
 80019f4:	200002cc 	.word	0x200002cc
 80019f8:	0800d19c 	.word	0x0800d19c
 80019fc:	0800d1a8 	.word	0x0800d1a8
 8001a00:	0800cf98 	.word	0x0800cf98
 8001a04:	0800d1b8 	.word	0x0800d1b8
 8001a08:	0800d1c8 	.word	0x0800d1c8
 8001a0c:	0800cef8 	.word	0x0800cef8
 8001a10:	0800cf00 	.word	0x0800cf00
 8001a14:	0800d1d0 	.word	0x0800d1d0
 8001a18:	0800d0c8 	.word	0x0800d0c8
 8001a1c:	0800d1ec 	.word	0x0800d1ec
 8001a20:	0800d0f4 	.word	0x0800d0f4
 8001a24:	0800cf28 	.word	0x0800cf28
 8001a28:	0800d1f4 	.word	0x0800d1f4
 8001a2c:	0800d208 	.word	0x0800d208

08001a30 <check_signal_quality>:
}



int check_signal_quality()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	str =send_to_gsm("AT+CSQ\r");
 8001a36:	4816      	ldr	r0, [pc, #88]	; (8001a90 <check_signal_quality+0x60>)
 8001a38:	f000 f86c 	bl	8001b14 <send_to_gsm>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <check_signal_quality+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]
	 printf("CAQ \n");
 8001a42:	4815      	ldr	r0, [pc, #84]	; (8001a98 <check_signal_quality+0x68>)
 8001a44:	f007 f816 	bl	8008a74 <puts>
	 int e=check_signal(str);
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <check_signal_quality+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fe25 	bl	800169c <check_signal>
 8001a52:	6078      	str	r0, [r7, #4]
	 if((strstr(str,"OK")!=NULL))
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <check_signal_quality+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4910      	ldr	r1, [pc, #64]	; (8001a9c <check_signal_quality+0x6c>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f007 f952 	bl	8008d04 <strstr>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00f      	beq.n	8001a86 <check_signal_quality+0x56>
	 {
		 printf("CAQ OK\n");
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <check_signal_quality+0x70>)
 8001a68:	f007 f804 	bl	8008a74 <puts>
		 if(e==0)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <check_signal_quality+0x4c>
		 {
			 printf("signal OK\n");
 8001a72:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <check_signal_quality+0x74>)
 8001a74:	f006 fffe 	bl	8008a74 <puts>
			 return 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e005      	b.n	8001a88 <check_signal_quality+0x58>

		 }
		 else
		 {
			 printf("signal NOT OK\n");
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <check_signal_quality+0x78>)
 8001a7e:	f006 fff9 	bl	8008a74 <puts>
			 return 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <check_signal_quality+0x58>
		 }
	 }
	 return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	0800cf88 	.word	0x0800cf88
 8001a94:	200002cc 	.word	0x200002cc
 8001a98:	0800cf90 	.word	0x0800cf90
 8001a9c:	0800cf98 	.word	0x0800cf98
 8001aa0:	0800cf9c 	.word	0x0800cf9c
 8001aa4:	0800cfa4 	.word	0x0800cfa4
 8001aa8:	0800cfb0 	.word	0x0800cfb0

08001aac <get_gsm_init>:


int get_gsm_init()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if(gsm_init()==0)
 8001ab0:	f7ff fa9e 	bl	8000ff0 <gsm_init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <get_gsm_init+0x20>
	{
		if(connect_tcp_server()==0)
 8001aba:	f7ff fe8d 	bl	80017d8 <connect_tcp_server>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <get_gsm_init+0x1c>
				return 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e002      	b.n	8001ace <get_gsm_init+0x22>
			else
				return 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <get_gsm_init+0x22>
	}
	else
	{
		return 1;
 8001acc:	2301      	movs	r3, #1
	}
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <gsm_actual_server>:

void gsm_actual_server()
  {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
      int count = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
     while(count<2)
 8001ade:	e00e      	b.n	8001afe <gsm_actual_server+0x2a>
     {
     if(get_gsm_init() == 0)
 8001ae0:	f7ff ffe4 	bl	8001aac <get_gsm_init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <gsm_actual_server+0x1e>
     {
            gsm_status = 0;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <gsm_actual_server+0x3c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
            break;
 8001af0:	e009      	b.n	8001b06 <gsm_actual_server+0x32>
        }
        else
        {
            count++;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
            gsm_status = 1;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <gsm_actual_server+0x3c>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
     while(count<2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	dded      	ble.n	8001ae0 <gsm_actual_server+0xc>
        }
    }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <send_to_gsm>:

char *send_to_gsm(char * command)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	memset(rx,'\0',sizeof(rx));
 8001b1c:	22c8      	movs	r2, #200	; 0xc8
 8001b1e:	2100      	movs	r1, #0
 8001b20:	480f      	ldr	r0, [pc, #60]	; (8001b60 <send_to_gsm+0x4c>)
 8001b22:	f007 f8d5 	bl	8008cd0 <memset>
	 printf("tx start\n");
 8001b26:	480f      	ldr	r0, [pc, #60]	; (8001b64 <send_to_gsm+0x50>)
 8001b28:	f006 ffa4 	bl	8008a74 <puts>
	 HAL_UART_Transmit_IT(&huart4, (uint8_t *)command,strlen(command));
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7fe fb9f 	bl	8000270 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	480b      	ldr	r0, [pc, #44]	; (8001b68 <send_to_gsm+0x54>)
 8001b3c:	f004 fc30 	bl	80063a0 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive(&huart4, rx, 200,1000);
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	22c8      	movs	r2, #200	; 0xc8
 8001b46:	4906      	ldr	r1, [pc, #24]	; (8001b60 <send_to_gsm+0x4c>)
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <send_to_gsm+0x54>)
 8001b4a:	f004 fb57 	bl	80061fc <HAL_UART_Receive>
	 printf("rx data %s\n",(char *)rx);
 8001b4e:	4904      	ldr	r1, [pc, #16]	; (8001b60 <send_to_gsm+0x4c>)
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <send_to_gsm+0x58>)
 8001b52:	f006 ff29 	bl	80089a8 <iprintf>
	 return (char *)rx;
 8001b56:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <send_to_gsm+0x4c>)
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000204 	.word	0x20000204
 8001b64:	0800d244 	.word	0x0800d244
 8001b68:	20000334 	.word	0x20000334
 8001b6c:	0800d250 	.word	0x0800d250

08001b70 <send_mesg_to_server>:

int send_mesg_to_server(char *mes,int size)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
		char buf[20];
		memset(buf,'\0',sizeof(buf));
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2214      	movs	r2, #20
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f007 f8a4 	bl	8008cd0 <memset>
		sprintf(buf, "AT+CIPSEND=0,%d\r", strlen(mes));
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7fe fb71 	bl	8000270 <strlen>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4922      	ldr	r1, [pc, #136]	; (8001c20 <send_mesg_to_server+0xb0>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 ff74 	bl	8008a84 <siprintf>
		memset(rx,'\0',sizeof(rx));
 8001b9c:	22c8      	movs	r2, #200	; 0xc8
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4820      	ldr	r0, [pc, #128]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001ba2:	f007 f895 	bl	8008cd0 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)buf,16);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2210      	movs	r2, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	481e      	ldr	r0, [pc, #120]	; (8001c28 <send_mesg_to_server+0xb8>)
 8001bb0:	f004 fbf6 	bl	80063a0 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001bb4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bb8:	22c8      	movs	r2, #200	; 0xc8
 8001bba:	491a      	ldr	r1, [pc, #104]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001bbc:	481a      	ldr	r0, [pc, #104]	; (8001c28 <send_mesg_to_server+0xb8>)
 8001bbe:	f004 fb1d 	bl	80061fc <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001bc2:	4918      	ldr	r1, [pc, #96]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001bc4:	4819      	ldr	r0, [pc, #100]	; (8001c2c <send_mesg_to_server+0xbc>)
 8001bc6:	f006 feef 	bl	80089a8 <iprintf>
		memset(rx,'\0',sizeof(rx));
 8001bca:	22c8      	movs	r2, #200	; 0xc8
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4815      	ldr	r0, [pc, #84]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001bd0:	f007 f87e 	bl	8008cd0 <memset>
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)mes,size);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <send_mesg_to_server+0xb8>)
 8001bde:	f004 fbdf 	bl	80063a0 <HAL_UART_Transmit_IT>
		HAL_UART_Receive(&huart4, rx, 200,3000);
 8001be2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001be6:	22c8      	movs	r2, #200	; 0xc8
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001bea:	480f      	ldr	r0, [pc, #60]	; (8001c28 <send_mesg_to_server+0xb8>)
 8001bec:	f004 fb06 	bl	80061fc <HAL_UART_Receive>
		printf("Received data %s\n",rx);
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <send_mesg_to_server+0xbc>)
 8001bf4:	f006 fed8 	bl	80089a8 <iprintf>
		if(strstr((char *)rx,"\r\nOK\r\n")!=NULL)
 8001bf8:	490d      	ldr	r1, [pc, #52]	; (8001c30 <send_mesg_to_server+0xc0>)
 8001bfa:	480a      	ldr	r0, [pc, #40]	; (8001c24 <send_mesg_to_server+0xb4>)
 8001bfc:	f007 f882 	bl	8008d04 <strstr>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <send_mesg_to_server+0xa0>
		{
			printf("mesg send successfully\n");
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <send_mesg_to_server+0xc4>)
 8001c08:	f006 ff34 	bl	8008a74 <puts>
			return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e003      	b.n	8001c18 <send_mesg_to_server+0xa8>
		}
		else
		{
			printf("mesg NOT send\n");
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <send_mesg_to_server+0xc8>)
 8001c12:	f006 ff2f 	bl	8008a74 <puts>
			return 1;
 8001c16:	2301      	movs	r3, #1
		}
	return 1;
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	0800d25c 	.word	0x0800d25c
 8001c24:	20000204 	.word	0x20000204
 8001c28:	20000334 	.word	0x20000334
 8001c2c:	0800d270 	.word	0x0800d270
 8001c30:	0800cef8 	.word	0x0800cef8
 8001c34:	0800d284 	.word	0x0800d284
 8001c38:	0800d29c 	.word	0x0800d29c

08001c3c <W25Q_Delay>:

#define numBLOCK 32  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes
//#define numBLOCK 64
void W25Q_Delay(uint32_t time)

{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

	HAL_Delay(time);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f001 fce5 	bl	8003614 <HAL_Delay>

}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <csLOW>:

void csLOW (void)

{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2110      	movs	r1, #16
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5e:	f002 f837 	bl	8003cd0 <HAL_GPIO_WritePin>

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <csHIGH>:

void csHIGH (void)

{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f002 f82d 	bl	8003cd0 <HAL_GPIO_WritePin>

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)

{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <SPI_Write+0x24>)
 8001c94:	f003 fbf7 	bl	8005486 <HAL_SPI_Transmit>

}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200002d0 	.word	0x200002d0

08001ca4 <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)

{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]

	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <SPI_Read+0x24>)
 8001cba:	f003 fd52 	bl	8005762 <HAL_SPI_Receive>

}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002d0 	.word	0x200002d0

08001ccc <W25Q_Reset>:

/**************************************************************************************************/

void W25Q_Reset (void)

{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

	uint8_t tData[2];

	tData[0] = 0x66;  // enable Reset
 8001cd2:	2366      	movs	r3, #102	; 0x66
 8001cd4:	713b      	strb	r3, [r7, #4]

	tData[1] = 0x99;  // Reset
 8001cd6:	2399      	movs	r3, #153	; 0x99
 8001cd8:	717b      	strb	r3, [r7, #5]

	csLOW();
 8001cda:	f7ff ffba 	bl	8001c52 <csLOW>

	SPI_Write(tData, 2);
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffca 	bl	8001c7c <SPI_Write>

	csHIGH();
 8001ce8:	f7ff ffbd 	bl	8001c66 <csHIGH>

	W25Q_Delay(100);
 8001cec:	2064      	movs	r0, #100	; 0x64
 8001cee:	f7ff ffa5 	bl	8001c3c <W25Q_Delay>

}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <W25Q_ReadID>:

uint32_t W25Q_ReadID (void)

{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0

	uint8_t tData = 0x9F;  // Read JEDEC ID
 8001d00:	239f      	movs	r3, #159	; 0x9f
 8001d02:	71fb      	strb	r3, [r7, #7]

	uint8_t rData[3];

	csLOW();
 8001d04:	f7ff ffa5 	bl	8001c52 <csLOW>

	SPI_Write(&tData, 1);
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ffb5 	bl	8001c7c <SPI_Write>

	SPI_Read(rData, 3);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2103      	movs	r1, #3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffc4 	bl	8001ca4 <SPI_Read>

	csHIGH();
 8001d1c:	f7ff ffa3 	bl	8001c66 <csHIGH>

	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
 8001d20:	793b      	ldrb	r3, [r7, #4]
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	79ba      	ldrb	r2, [r7, #6]
 8001d2c:	4313      	orrs	r3, r2

}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <W25Q_Read>:

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)

{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b088      	sub	sp, #32
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	72fb      	strb	r3, [r7, #11]

	uint8_t tData[5];

	uint32_t memAddr = (startPage*256) + offset;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb

	{

		tData[0] = 0x03;  // enable Read
 8001d50:	2303      	movs	r3, #3
 8001d52:	753b      	strb	r3, [r7, #20]

		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	757b      	strb	r3, [r7, #21]

		tData[2] = (memAddr>>8)&0xFF;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	75bb      	strb	r3, [r7, #22]

		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	75fb      	strb	r3, [r7, #23]

		tData[4] = (memAddr)&0xFF; // LSB of the memory Address

	}

	csLOW();  // pull the CS Low
 8001d6a:	f7ff ff72 	bl	8001c52 <csLOW>

	if (numBLOCK<512)

	{

		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2104      	movs	r1, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff81 	bl	8001c7c <SPI_Write>

		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address

	}

	SPI_Read(rData, size);  // Read the data
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff ff91 	bl	8001ca4 <SPI_Read>

	csHIGH();  // pull the CS High
 8001d82:	f7ff ff70 	bl	8001c66 <csHIGH>

}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)

{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b088      	sub	sp, #32
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	72fb      	strb	r3, [r7, #11]

	uint8_t tData[6];

	uint32_t memAddr = (startPage*256) + offset;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	021a      	lsls	r2, r3, #8
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	4413      	add	r3, r2
 8001da6:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb

	{

		tData[0] = 0x0B;  // enable Fast Read
 8001da8:	230b      	movs	r3, #11
 8001daa:	753b      	strb	r3, [r7, #20]

		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	757b      	strb	r3, [r7, #21]

		tData[2] = (memAddr>>8)&0xFF;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	75bb      	strb	r3, [r7, #22]

		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	75fb      	strb	r3, [r7, #23]

		tData[4] = 0;  // Dummy clock
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	763b      	strb	r3, [r7, #24]

		tData[5] = 0;  // Dummy clock

	}

	csLOW();  // pull the CS Low
 8001dc6:	f7ff ff44 	bl	8001c52 <csLOW>

	if (numBLOCK<512)

	{

		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	2105      	movs	r1, #5
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff53 	bl	8001c7c <SPI_Write>

		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address

	}

	SPI_Read(rData, size);  // Read the data
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f7ff ff63 	bl	8001ca4 <SPI_Read>

	csHIGH();  // pull the CS High
 8001dde:	f7ff ff42 	bl	8001c66 <csHIGH>

}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <write_enable>:

void write_enable (void)

{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0

	uint8_t tData = 0x06;  // enable write
 8001df0:	2306      	movs	r3, #6
 8001df2:	71fb      	strb	r3, [r7, #7]

	csLOW();
 8001df4:	f7ff ff2d 	bl	8001c52 <csLOW>

	SPI_Write(&tData, 1);
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff3d 	bl	8001c7c <SPI_Write>

	csHIGH();
 8001e02:	f7ff ff30 	bl	8001c66 <csHIGH>

	W25Q_Delay(5);  // 5ms delay
 8001e06:	2005      	movs	r0, #5
 8001e08:	f7ff ff18 	bl	8001c3c <W25Q_Delay>

}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <write_disable>:

void write_disable(void)

{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

	uint8_t tData = 0x04;  // disable write
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	71fb      	strb	r3, [r7, #7]

	csLOW();
 8001e1e:	f7ff ff18 	bl	8001c52 <csLOW>

	SPI_Write(&tData, 1);
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff28 	bl	8001c7c <SPI_Write>

	csHIGH();
 8001e2c:	f7ff ff1b 	bl	8001c66 <csHIGH>

	W25Q_Delay(5);  // 5ms delay
 8001e30:	2005      	movs	r0, #5
 8001e32:	f7ff ff03 	bl	8001c3c <W25Q_Delay>

}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)

{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	807b      	strh	r3, [r7, #2]

	if ((size+offset)<256) return size;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	2bff      	cmp	r3, #255	; 0xff
 8001e52:	d801      	bhi.n	8001e58 <bytestowrite+0x1a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	e002      	b.n	8001e5e <bytestowrite+0x20>

	else return 256-offset;
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100

}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)

{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	807b      	strh	r3, [r7, #2]

	if ((size+offset)<4096) return size;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e80:	d201      	bcs.n	8001e86 <bytestomodify+0x1c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	e002      	b.n	8001e8c <bytestomodify+0x22>

	else return 4096-offset;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000

}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)

{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]

	uint8_t tData[6];

	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	031b      	lsls	r3, r3, #12
 8001ea6:	617b      	str	r3, [r7, #20]

	write_enable();
 8001ea8:	f7ff ff9f 	bl	8001dea <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb

	{

		tData[0] = 0x20;  // Erase sector
 8001eac:	2320      	movs	r3, #32
 8001eae:	733b      	strb	r3, [r7, #12]

		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	737b      	strb	r3, [r7, #13]

		tData[2] = (memAddr>>8)&0xFF;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	73bb      	strb	r3, [r7, #14]

		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8001ec6:	f7ff fec4 	bl	8001c52 <csLOW>

		SPI_Write(tData, 4);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2104      	movs	r1, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fed3 	bl	8001c7c <SPI_Write>

		csHIGH();
 8001ed6:	f7ff fec6 	bl	8001c66 <csHIGH>

		csHIGH();  // pull the HIGH

	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 8001eda:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001ede:	f7ff fead 	bl	8001c3c <W25Q_Delay>

	write_disable();
 8001ee2:	f7ff ff97 	bl	8001e14 <write_disable>

}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)

{
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b0d3      	sub	sp, #332	; 0x14c
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8001ef8:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8001efc:	6020      	str	r0, [r4, #0]
 8001efe:	4608      	mov	r0, r1
 8001f00:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001f04:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8001f08:	600a      	str	r2, [r1, #0]
 8001f0a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f0e:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f18:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	801a      	strh	r2, [r3, #0]

	uint8_t tData[266];

	uint32_t startPage = page;
 8001f20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8001f2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f32:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f3c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	3b01      	subs	r3, #1
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t numPages = endPage-startPage+1;
 8001f52:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f56:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint16_t startSector  = startPage/16;
 8001f62:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	uint16_t endSector  = endPage/16;
 8001f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

	uint16_t numSectors = endSector-startSector+1;
 8001f76:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8001f7a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

	for (uint16_t i=0; i<numSectors; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8001f8e:	e00c      	b.n	8001faa <W25Q_Write_Clean+0xbc>

	{

		W25Q_Erase_Sector(startSector++);
 8001f90:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	f8a7 2142 	strh.w	r2, [r7, #322]	; 0x142
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff7c 	bl	8001e98 <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 8001fa0:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8001faa:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8001fae:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3ec      	bcc.n	8001f90 <W25Q_Write_Clean+0xa2>

	}

	uint32_t dataPosition = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// write the data

	for (uint32_t i=0; i<numPages; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001fc2:	e0c0      	b.n	8002146 <W25Q_Write_Clean+0x258>

	{

		uint32_t memAddr = (startPage*256)+offset;
 8001fc4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001fc8:	021a      	lsls	r2, r3, #8
 8001fca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001fce:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		uint16_t bytesremaining  = bytestowrite(size, offset);
 8001fda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001fde:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001fe8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fec:	4611      	mov	r1, r2
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f7ff ff25 	bl	8001e3e <bytestowrite>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

		uint32_t indx = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		write_enable();
 8002000:	f7ff fef3 	bl	8001dea <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb

		{

			tData[0] = 0x02;  // page program
 8002004:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002008:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]

			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002010:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	b2da      	uxtb	r2, r3
 8002018:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800201c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002020:	705a      	strb	r2, [r3, #1]

			tData[2] = (memAddr>>8)&0xFF;
 8002022:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b2da      	uxtb	r2, r3
 800202a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800202e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002032:	709a      	strb	r2, [r3, #2]

			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002034:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002038:	b2da      	uxtb	r2, r3
 800203a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800203e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002042:	70da      	strb	r2, [r3, #3]

			indx = 4;
 8002044:	2304      	movs	r3, #4
 8002046:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

			indx = 5;

		}

		uint16_t bytestosend  = bytesremaining + indx;
 800204a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800204e:	b29a      	uxth	r2, r3
 8002050:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8002054:	4413      	add	r3, r2
 8002056:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8002060:	e01a      	b.n	8002098 <W25Q_Write_Clean+0x1aa>

		{

			tData[indx++] = data[i+dataPosition];
 8002062:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8002066:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800206a:	4413      	add	r3, r2
 800206c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002070:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	441a      	add	r2, r3
 8002078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800207c:	1c59      	adds	r1, r3, #1
 800207e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8002082:	7811      	ldrb	r1, [r2, #0]
 8002084:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002088:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800208c:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 800208e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8002092:	3301      	adds	r3, #1
 8002094:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8002098:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 800209c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3de      	bcc.n	8002062 <W25Q_Write_Clean+0x174>

		}

		if (bytestosend > 250)
 80020a4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80020a8:	2bfa      	cmp	r3, #250	; 0xfa
 80020aa:	d916      	bls.n	80020da <W25Q_Write_Clean+0x1ec>

		{

			csLOW();
 80020ac:	f7ff fdd1 	bl	8001c52 <csLOW>

			SPI_Write(tData, 100);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2164      	movs	r1, #100	; 0x64
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fde0 	bl	8001c7c <SPI_Write>

			SPI_Write(tData+100, bytestosend-100);
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	3364      	adds	r3, #100	; 0x64
 80020c2:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	3a64      	subs	r2, #100	; 0x64
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fdd4 	bl	8001c7c <SPI_Write>

			csHIGH();
 80020d4:	f7ff fdc7 	bl	8001c66 <csHIGH>
 80020d8:	e00c      	b.n	80020f4 <W25Q_Write_Clean+0x206>

		else

		{

			csLOW();
 80020da:	f7ff fdba 	bl	8001c52 <csLOW>

			SPI_Write(tData, bytestosend);
 80020de:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fdc6 	bl	8001c7c <SPI_Write>

			csHIGH();
 80020f0:	f7ff fdb9 	bl	8001c66 <csHIGH>

		}


		startPage++;
 80020f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80020f8:	3301      	adds	r3, #1
 80020fa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

		offset = 0;
 80020fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002102:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]

		size = size-bytesremaining;
 800210a:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800210e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002112:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002116:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800211a:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800211e:	6809      	ldr	r1, [r1, #0]
 8002120:	1a8a      	subs	r2, r1, r2
 8002122:	601a      	str	r2, [r3, #0]

		dataPosition = dataPosition+bytesremaining;
 8002124:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8002128:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800212c:	4413      	add	r3, r2
 800212e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		W25Q_Delay(5);
 8002132:	2005      	movs	r0, #5
 8002134:	f7ff fd82 	bl	8001c3c <W25Q_Delay>

		write_disable();
 8002138:	f7ff fe6c 	bl	8001e14 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 800213c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002140:	3301      	adds	r3, #1
 8002142:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002146:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800214a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800214e:	429a      	cmp	r2, r3
 8002150:	f4ff af38 	bcc.w	8001fc4 <W25Q_Write_Clean+0xd6>

	}

}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)

{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800216e:	f844 0c24 	str.w	r0, [r4, #-36]
 8002172:	4608      	mov	r0, r1
 8002174:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002178:	f841 2c2c 	str.w	r2, [r1, #-44]
 800217c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002180:	f842 3c30 	str.w	r3, [r2, #-48]
 8002184:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002188:	4602      	mov	r2, r0
 800218a:	f823 2c26 	strh.w	r2, [r3, #-38]

	uint16_t startSector  = page/16;
 800218e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002192:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800219c:	f102 020e 	add.w	r2, r2, #14
 80021a0:	8013      	strh	r3, [r2, #0]

	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 80021a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a6:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 80021aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80021b2:	4413      	add	r3, r2
 80021b4:	3b01      	subs	r3, #1
 80021b6:	0a1a      	lsrs	r2, r3, #8
 80021b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021bc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80021c0:	4413      	add	r3, r2
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80021c8:	f102 021e 	add.w	r2, r2, #30
 80021cc:	8013      	strh	r3, [r2, #0]

	uint16_t numSectors = endSector-startSector+1;
 80021ce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80021d2:	f103 031e 	add.w	r3, r3, #30
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80021dc:	f103 030e 	add.w	r3, r3, #14
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80021ec:	f102 021c 	add.w	r2, r2, #28
 80021f0:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];

	uint32_t sectorOffset = ((page%16)*256)+offset;
 80021f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	021a      	lsls	r2, r3, #8
 8002200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002204:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 8002208:	4413      	add	r3, r2
 800220a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800220e:	f102 0208 	add.w	r2, r2, #8
 8002212:	6013      	str	r3, [r2, #0]

	uint32_t dataindx = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800221a:	f102 0204 	add.w	r2, r2, #4
 800221e:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002226:	f102 0202 	add.w	r2, r2, #2
 800222a:	8013      	strh	r3, [r2, #0]
 800222c:	e0a5      	b.n	800237a <W25Q_Write+0x21a>

	{

		uint32_t startPage = startSector*16;
 800222e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002232:	f103 030e 	add.w	r3, r3, #14
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800223e:	f102 0218 	add.w	r2, r2, #24
 8002242:	6013      	str	r3, [r2, #0]

		W25Q_FastRead(startPage, 0, 4096, previousData);
 8002244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002248:	3b1c      	subs	r3, #28
 800224a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224e:	2100      	movs	r1, #0
 8002250:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8002254:	f100 0018 	add.w	r0, r0, #24
 8002258:	6800      	ldr	r0, [r0, #0]
 800225a:	f7ff fd98 	bl	8001d8e <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 800225e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002262:	f103 0308 	add.w	r3, r3, #8
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800226e:	4619      	mov	r1, r3
 8002270:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8002274:	f7ff fdf9 	bl	8001e6a <bytestomodify>
 8002278:	4603      	mov	r3, r0
 800227a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800227e:	f102 0216 	add.w	r2, r2, #22
 8002282:	8013      	strh	r3, [r2, #0]

		for (uint16_t i=0; i<bytesRemaining; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800228a:	8013      	strh	r3, [r2, #0]
 800228c:	e023      	b.n	80022d6 <W25Q_Write+0x176>

		{

			previousData[i+sectorOffset] = data[i+dataindx];
 800228e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002298:	f103 0304 	add.w	r3, r3, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022a4:	f852 2c30 	ldr.w	r2, [r2, #-48]
 80022a8:	441a      	add	r2, r3
 80022aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80022ae:	8819      	ldrh	r1, [r3, #0]
 80022b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80022b4:	f103 0308 	add.w	r3, r3, #8
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	440b      	add	r3, r1
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80022c2:	440b      	add	r3, r1
 80022c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 80022c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80022d4:	8013      	strh	r3, [r2, #0]
 80022d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80022da:	881a      	ldrh	r2, [r3, #0]
 80022dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80022e0:	f103 0316 	add.w	r3, r3, #22
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3d1      	bcc.n	800228e <W25Q_Write+0x12e>

		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 80022ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ee:	3b1c      	subs	r3, #28
 80022f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f4:	2100      	movs	r1, #0
 80022f6:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 80022fa:	f100 0018 	add.w	r0, r0, #24
 80022fe:	6800      	ldr	r0, [r0, #0]
 8002300:	f7ff fdf5 	bl	8001eee <W25Q_Write_Clean>

		startSector++;
 8002304:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002308:	f103 030e 	add.w	r3, r3, #14
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002314:	f102 020e 	add.w	r2, r2, #14
 8002318:	8013      	strh	r3, [r2, #0]

		sectorOffset = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002320:	f102 0208 	add.w	r2, r2, #8
 8002324:	6013      	str	r3, [r2, #0]

		dataindx = dataindx+bytesRemaining;
 8002326:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800232a:	f103 0316 	add.w	r3, r3, #22
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002334:	f102 0204 	add.w	r2, r2, #4
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	4413      	add	r3, r2
 800233c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002340:	f102 0204 	add.w	r2, r2, #4
 8002344:	6013      	str	r3, [r2, #0]

		size = size-bytesRemaining;
 8002346:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800234a:	f103 0316 	add.w	r3, r3, #22
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002354:	4611      	mov	r1, r2
 8002356:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800235a:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 8002364:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002368:	f103 0302 	add.w	r3, r3, #2
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002374:	f102 0202 	add.w	r2, r2, #2
 8002378:	8013      	strh	r3, [r2, #0]
 800237a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800237e:	f103 0302 	add.w	r3, r3, #2
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002388:	f103 031c 	add.w	r3, r3, #28
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	f4ff af4d 	bcc.w	800222e <W25Q_Write+0xce>

	}

}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}
	...

080023a4 <get_gps_data>:
	 {
	gps_status = gpsData(&gps);
	 }
}
int get_gps_data()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
//	memset(gps.Data,'\0',sizeof(gps.Data));
//	char b[1000];
//	memset(b,'\0',sizeof(b));
//	char Rx_buff[750];
//	HAL_UART_Receive(&huart1,(uint8_t*)gps.Data,750,5000);
	int i=HAL_UART_Receive_IT(&huart1,(uint8_t*)gps.Data,750);
 80023aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80023ae:	4913      	ldr	r1, [pc, #76]	; (80023fc <get_gps_data+0x58>)
 80023b0:	4813      	ldr	r0, [pc, #76]	; (8002400 <get_gps_data+0x5c>)
 80023b2:	f004 f863 	bl	800647c <HAL_UART_Receive_IT>
 80023b6:	4603      	mov	r3, r0
 80023b8:	607b      	str	r3, [r7, #4]
	//strcpy(gps.Data,Rx_buff);
	//memset(Rx_buff,'\0',750);
//	HAL_Delay(5000);
		 if(i==0) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d114      	bne.n	80023ea <get_gps_data+0x46>
				printf("status : %d\n",i);
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4810      	ldr	r0, [pc, #64]	; (8002404 <get_gps_data+0x60>)
 80023c4:	f006 faf0 	bl	80089a8 <iprintf>
				printf("received start from MODULE\n");
 80023c8:	480f      	ldr	r0, [pc, #60]	; (8002408 <get_gps_data+0x64>)
 80023ca:	f006 fb53 	bl	8008a74 <puts>
			    printf("%s\n",gps.Data);
 80023ce:	480b      	ldr	r0, [pc, #44]	; (80023fc <get_gps_data+0x58>)
 80023d0:	f006 fb50 	bl	8008a74 <puts>
			    printf("received end  from MODULE\n");
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <get_gps_data+0x68>)
 80023d6:	f006 fb4d 	bl	8008a74 <puts>
			    gps_status = gpsData(&gps);
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <get_gps_data+0x6c>)
 80023dc:	f000 f81e 	bl	800241c <gpsData>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <get_gps_data+0x70>)
 80023e4:	6013      	str	r3, [r2, #0]
			    return 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e003      	b.n	80023f2 <get_gps_data+0x4e>
//		 	  		    	gps_output_flag = gpsData(&gps);
//		 	  		    	return gps_output_flag;
		  }
	else
	{
		printf("received NOT from MODULE\n");
 80023ea:	480b      	ldr	r0, [pc, #44]	; (8002418 <get_gps_data+0x74>)
 80023ec:	f006 fb42 	bl	8008a74 <puts>
		return 1;
 80023f0:	2301      	movs	r3, #1
	}
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000630 	.word	0x20000630
 8002400:	2000043c 	.word	0x2000043c
 8002404:	0800d2c4 	.word	0x0800d2c4
 8002408:	0800d2d4 	.word	0x0800d2d4
 800240c:	0800d2f0 	.word	0x0800d2f0
 8002410:	20000600 	.word	0x20000600
 8002414:	20000004 	.word	0x20000004
 8002418:	0800d30c 	.word	0x0800d30c

0800241c <gpsData>:

int gpsData(gpsdata* data)
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af04      	add	r7, sp, #16
 8002422:	6078      	str	r0, [r7, #4]
	char *current_flag;
	int counter;
	int comma = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
	printf("in func\n");
 8002428:	4859      	ldr	r0, [pc, #356]	; (8002590 <gpsData+0x174>)
 800242a:	f006 fb23 	bl	8008a74 <puts>
	current_flag=strstr(data->Data,"GNGGA");
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3330      	adds	r3, #48	; 0x30
 8002432:	4958      	ldr	r1, [pc, #352]	; (8002594 <gpsData+0x178>)
 8002434:	4618      	mov	r0, r3
 8002436:	f006 fc65 	bl	8008d04 <strstr>
 800243a:	60b8      	str	r0, [r7, #8]
	if(*current_flag=='G')
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b47      	cmp	r3, #71	; 0x47
 8002442:	f040 809c 	bne.w	800257e <gpsData+0x162>
	{
		counter=0;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
		while(*(current_flag+counter)!='*')
 800244a:	e00d      	b.n	8002468 <gpsData+0x4c>
		{
			data->particular_flag_data[counter]=*(current_flag+counter);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	7819      	ldrb	r1, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4413      	add	r3, r2
 800245a:	f203 3382 	addw	r3, r3, #898	; 0x382
 800245e:	460a      	mov	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
			counter++;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
		while(*(current_flag+counter)!='*')
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b2a      	cmp	r3, #42	; 0x2a
 8002472:	d1eb      	bne.n	800244c <gpsData+0x30>
		}
	    printf(" string is %s", data->particular_flag_data);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f203 3382 	addw	r3, r3, #898	; 0x382
 800247a:	4619      	mov	r1, r3
 800247c:	4846      	ldr	r0, [pc, #280]	; (8002598 <gpsData+0x17c>)
 800247e:	f006 fa93 	bl	80089a8 <iprintf>
		sprintf(data->buffer,"%s",data->particular_flag_data);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f203 301e 	addw	r0, r3, #798	; 0x31e
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f203 3382 	addw	r3, r3, #898	; 0x382
 800248e:	461a      	mov	r2, r3
 8002490:	4942      	ldr	r1, [pc, #264]	; (800259c <gpsData+0x180>)
 8002492:	f006 faf7 	bl	8008a84 <siprintf>
		sscanf(data->buffer,"GNGGA,%lf,%lf,%c,%lf,%c,%d,",&data->time,&data->latitude,&data->N_OR_S,&data->longitude,&data->E_OR_W,&data->fix);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f203 341e 	addw	r4, r3, #798	; 0x31e
 800249c:	687d      	ldr	r5, [r7, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0608 	add.w	r6, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3329      	adds	r3, #41	; 0x29
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	3210      	adds	r2, #16
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	312a      	adds	r1, #42	; 0x2a
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	302c      	adds	r0, #44	; 0x2c
 80024b4:	9003      	str	r0, [sp, #12]
 80024b6:	9102      	str	r1, [sp, #8]
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4633      	mov	r3, r6
 80024be:	462a      	mov	r2, r5
 80024c0:	4937      	ldr	r1, [pc, #220]	; (80025a0 <gpsData+0x184>)
 80024c2:	4620      	mov	r0, r4
 80024c4:	f006 fafe 	bl	8008ac4 <siscanf>

		current_flag=strstr(data->Data,"RMC");
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3330      	adds	r3, #48	; 0x30
 80024cc:	4935      	ldr	r1, [pc, #212]	; (80025a4 <gpsData+0x188>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 fc18 	bl	8008d04 <strstr>
 80024d4:	60b8      	str	r0, [r7, #8]
		if(*current_flag=='R')
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b52      	cmp	r3, #82	; 0x52
 80024dc:	d133      	bne.n	8002546 <gpsData+0x12a>
		{
			printf("\nrmc ->%d\n",*current_flag);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4830      	ldr	r0, [pc, #192]	; (80025a8 <gpsData+0x18c>)
 80024e6:	f006 fa5f 	bl	80089a8 <iprintf>
			counter=0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

				while(comma < 9) {
 80024ee:	e00e      	b.n	800250e <gpsData+0xf2>
					if(*(current_flag + counter) == ',')
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4413      	add	r3, r2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b2c      	cmp	r3, #44	; 0x2c
 80024fa:	d102      	bne.n	8002502 <gpsData+0xe6>
						comma++;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3301      	adds	r3, #1
 8002500:	613b      	str	r3, [r7, #16]
					counter++;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
					if(comma == 9)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b09      	cmp	r3, #9
 800250c:	d003      	beq.n	8002516 <gpsData+0xfa>
				while(comma < 9) {
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b08      	cmp	r3, #8
 8002512:	dded      	ble.n	80024f0 <gpsData+0xd4>
 8002514:	e000      	b.n	8002518 <gpsData+0xfc>
						break;
 8002516:	bf00      	nop

				}

					for(int i=counter; i < counter+7; i++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e00e      	b.n	800253c <gpsData+0x120>
					data->Date[i-counter]= *(current_flag+i);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	441a      	add	r2, r3
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	1acb      	subs	r3, r1, r3
 800252a:	7811      	ldrb	r1, [r2, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	460a      	mov	r2, r1
 8002532:	f883 2020 	strb.w	r2, [r3, #32]
					for(int i=counter; i < counter+7; i++)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3306      	adds	r3, #6
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	ddeb      	ble.n	800251e <gpsData+0x102>
		}


		if(data->fix==1||data->fix==2||data->fix==6)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d007      	beq.n	800255e <gpsData+0x142>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	2b02      	cmp	r3, #2
 8002554:	d003      	beq.n	800255e <gpsData+0x142>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	2b06      	cmp	r3, #6
 800255c:	d107      	bne.n	800256e <gpsData+0x152>
		{
			printf("valid fix\n");
 800255e:	4813      	ldr	r0, [pc, #76]	; (80025ac <gpsData+0x190>)
 8002560:	f006 fa88 	bl	8008a74 <puts>
			gps_data_extraction(data);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f827 	bl	80025b8 <gps_data_extraction>
			return 0;
 800256a:	2300      	movs	r3, #0
 800256c:	e00b      	b.n	8002586 <gpsData+0x16a>

		}
		else
		{
			printf("invalid signal no fix\n");
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <gpsData+0x194>)
 8002570:	f006 fa80 	bl	8008a74 <puts>
			data->fix=0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
			return 1;
 800257a:	2301      	movs	r3, #1
 800257c:	e003      	b.n	8002586 <gpsData+0x16a>
		}
	 }
	else
	{
		printf("no data\n");
 800257e:	480d      	ldr	r0, [pc, #52]	; (80025b4 <gpsData+0x198>)
 8002580:	f006 fa78 	bl	8008a74 <puts>
		return 1;
 8002584:	2301      	movs	r3, #1
	}
	return 1;
}
 8002586:	4618      	mov	r0, r3
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258e:	bf00      	nop
 8002590:	0800d328 	.word	0x0800d328
 8002594:	0800d330 	.word	0x0800d330
 8002598:	0800d338 	.word	0x0800d338
 800259c:	0800d348 	.word	0x0800d348
 80025a0:	0800d34c 	.word	0x0800d34c
 80025a4:	0800d368 	.word	0x0800d368
 80025a8:	0800d36c 	.word	0x0800d36c
 80025ac:	0800d378 	.word	0x0800d378
 80025b0:	0800d384 	.word	0x0800d384
 80025b4:	0800d39c 	.word	0x0800d39c

080025b8 <gps_data_extraction>:
void gps_data_extraction(gpsdata* data)
{
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b0a3      	sub	sp, #140	; 0x8c
 80025bc:	af0e      	add	r7, sp, #56	; 0x38
 80025be:	6178      	str	r0, [r7, #20]
	double Deg_Val=0.0,Sec_Val=0.0,lon=0.0,lat=0.0;
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int hr,min,sec;
	lon=data->longitude;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	lat=data->latitude;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002600:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if((data->E_OR_W=='E' || data->N_OR_S=='S')||(data->E_OR_W=='W' || data->N_OR_S=='N'))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800260a:	2b45      	cmp	r3, #69	; 0x45
 800260c:	d00e      	beq.n	800262c <gps_data_extraction+0x74>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002614:	2b53      	cmp	r3, #83	; 0x53
 8002616:	d009      	beq.n	800262c <gps_data_extraction+0x74>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800261e:	2b57      	cmp	r3, #87	; 0x57
 8002620:	d004      	beq.n	800262c <gps_data_extraction+0x74>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002628:	2b4e      	cmp	r3, #78	; 0x4e
 800262a:	d165      	bne.n	80026f8 <gps_data_extraction+0x140>
	{
		// Extract degrees and seconds directly
		Deg_Val = (int)(lon/100); // Extract degrees
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4b89      	ldr	r3, [pc, #548]	; (8002858 <gps_data_extraction+0x2a0>)
 8002632:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002636:	f7fe f909 	bl	800084c <__aeabi_ddiv>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fa89 	bl	8000b58 <__aeabi_d2iz>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ff6b 	bl	8000524 <__aeabi_i2d>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		Sec_Val = fmod(lon, 100); // Extract remaining seconds
 8002656:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8002848 <gps_data_extraction+0x290>
 800265a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800265e:	f00a fafb 	bl	800cc58 <fmod>
 8002662:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
		lon= Deg_Val + Sec_Val / 60.0; // Convert seconds to minutes
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <gps_data_extraction+0x2a4>)
 800266c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002670:	f7fe f8ec 	bl	800084c <__aeabi_ddiv>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800267c:	f7fd fe06 	bl	800028c <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		data->longitude=lon;
 8002688:	6979      	ldr	r1, [r7, #20]
 800268a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800268e:	e9c1 2304 	strd	r2, r3, [r1, #16]

		Deg_Val = (int)(lat/100);
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	4b70      	ldr	r3, [pc, #448]	; (8002858 <gps_data_extraction+0x2a0>)
 8002698:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800269c:	f7fe f8d6 	bl	800084c <__aeabi_ddiv>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa56 	bl	8000b58 <__aeabi_d2iz>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff38 	bl	8000524 <__aeabi_i2d>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		Sec_Val = fmod(lat, 100);
 80026bc:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8002848 <gps_data_extraction+0x290>
 80026c0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80026c4:	f00a fac8 	bl	800cc58 <fmod>
 80026c8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
		lat = Deg_Val + Sec_Val / 60.0;
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	4b62      	ldr	r3, [pc, #392]	; (800285c <gps_data_extraction+0x2a4>)
 80026d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026d6:	f7fe f8b9 	bl	800084c <__aeabi_ddiv>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026e2:	f7fd fdd3 	bl	800028c <__adddf3>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->latitude=lat;
 80026ee:	6979      	ldr	r1, [r7, #20]
 80026f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	hr=(int)((data->time)/10000);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fe:	a354      	add	r3, pc, #336	; (adr r3, 8002850 <gps_data_extraction+0x298>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fe f8a2 	bl	800084c <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe fa22 	bl	8000b58 <__aeabi_d2iz>
 8002714:	4603      	mov	r3, r0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
	min=(int)(data->time-(hr*10000))/100;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f242 7210 	movw	r2, #10000	; 0x2710
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fefb 	bl	8000524 <__aeabi_i2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4620      	mov	r0, r4
 8002734:	4629      	mov	r1, r5
 8002736:	f7fd fda7 	bl	8000288 <__aeabi_dsub>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe fa09 	bl	8000b58 <__aeabi_d2iz>
 8002746:	4603      	mov	r3, r0
 8002748:	4a45      	ldr	r2, [pc, #276]	; (8002860 <gps_data_extraction+0x2a8>)
 800274a:	fb82 1203 	smull	r1, r2, r2, r3
 800274e:	1152      	asrs	r2, r2, #5
 8002750:	17db      	asrs	r3, r3, #31
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	623b      	str	r3, [r7, #32]
	sec=(int)(data->time-((hr*10000)+(min*100)));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	e9d3 4500 	ldrd	r4, r5, [r3]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2164      	movs	r1, #100	; 0x64
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fed7 	bl	8000524 <__aeabi_i2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd fd83 	bl	8000288 <__aeabi_dsub>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe f9e5 	bl	8000b58 <__aeabi_d2iz>
 800278e:	4603      	mov	r3, r0
 8002790:	61fb      	str	r3, [r7, #28]
	int ist_hr = hr + 5;  // 5 hours difference
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3305      	adds	r3, #5
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
	int ist_min = min + 30;  // 30 minutes difference
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	331e      	adds	r3, #30
 800279c:	64bb      	str	r3, [r7, #72]	; 0x48
	if(ist_hr>=24)
 800279e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a0:	2b17      	cmp	r3, #23
 80027a2:	dd02      	ble.n	80027aa <gps_data_extraction+0x1f2>
	{
		ist_hr-=24;
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	3b18      	subs	r3, #24
 80027a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	if (ist_min >= 60)
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	2b3b      	cmp	r3, #59	; 0x3b
 80027ae:	dd05      	ble.n	80027bc <gps_data_extraction+0x204>
	{
		ist_hr++;
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	3301      	adds	r3, #1
 80027b4:	64fb      	str	r3, [r7, #76]	; 0x4c
		ist_min -= 60;
 80027b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b8:	3b3c      	subs	r3, #60	; 0x3c
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
	}

	sprintf(json_str,"$ %lf %c,%lf %c, %02d:%02d:%02d, %c%c/%c%c/%c%c#\n",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,ist_hr,ist_min,sec,data->Date[0],data->Date[1],data->Date[2],data->Date[3],data->Date[4],data->Date[5]);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027c8:	461d      	mov	r5, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027d0:	697c      	ldr	r4, [r7, #20]
 80027d2:	f894 402a 	ldrb.w	r4, [r4, #42]	; 0x2a
 80027d6:	4626      	mov	r6, r4
 80027d8:	697c      	ldr	r4, [r7, #20]
 80027da:	f894 4020 	ldrb.w	r4, [r4, #32]
 80027de:	613c      	str	r4, [r7, #16]
 80027e0:	697c      	ldr	r4, [r7, #20]
 80027e2:	f894 4021 	ldrb.w	r4, [r4, #33]	; 0x21
 80027e6:	60fc      	str	r4, [r7, #12]
 80027e8:	697c      	ldr	r4, [r7, #20]
 80027ea:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
 80027ee:	60bc      	str	r4, [r7, #8]
 80027f0:	697c      	ldr	r4, [r7, #20]
 80027f2:	f894 4023 	ldrb.w	r4, [r4, #35]	; 0x23
 80027f6:	607c      	str	r4, [r7, #4]
 80027f8:	697c      	ldr	r4, [r7, #20]
 80027fa:	f894 4024 	ldrb.w	r4, [r4, #36]	; 0x24
 80027fe:	603c      	str	r4, [r7, #0]
 8002800:	697c      	ldr	r4, [r7, #20]
 8002802:	f894 4025 	ldrb.w	r4, [r4, #37]	; 0x25
 8002806:	940d      	str	r4, [sp, #52]	; 0x34
 8002808:	683c      	ldr	r4, [r7, #0]
 800280a:	940c      	str	r4, [sp, #48]	; 0x30
 800280c:	687c      	ldr	r4, [r7, #4]
 800280e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002810:	68bc      	ldr	r4, [r7, #8]
 8002812:	940a      	str	r4, [sp, #40]	; 0x28
 8002814:	68fc      	ldr	r4, [r7, #12]
 8002816:	9409      	str	r4, [sp, #36]	; 0x24
 8002818:	693c      	ldr	r4, [r7, #16]
 800281a:	9408      	str	r4, [sp, #32]
 800281c:	69fc      	ldr	r4, [r7, #28]
 800281e:	9407      	str	r4, [sp, #28]
 8002820:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002822:	9406      	str	r4, [sp, #24]
 8002824:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002826:	9405      	str	r4, [sp, #20]
 8002828:	9604      	str	r6, [sp, #16]
 800282a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800282e:	9500      	str	r5, [sp, #0]
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	490b      	ldr	r1, [pc, #44]	; (8002864 <gps_data_extraction+0x2ac>)
 8002836:	480c      	ldr	r0, [pc, #48]	; (8002868 <gps_data_extraction+0x2b0>)
 8002838:	f006 f924 	bl	8008a84 <siprintf>
}
 800283c:	bf00      	nop
 800283e:	3754      	adds	r7, #84	; 0x54
 8002840:	46bd      	mov	sp, r7
 8002842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002844:	f3af 8000 	nop.w
 8002848:	00000000 	.word	0x00000000
 800284c:	40590000 	.word	0x40590000
 8002850:	00000000 	.word	0x00000000
 8002854:	40c38800 	.word	0x40c38800
 8002858:	40590000 	.word	0x40590000
 800285c:	404e0000 	.word	0x404e0000
 8002860:	51eb851f 	.word	0x51eb851f
 8002864:	0800d3a4 	.word	0x0800d3a4
 8002868:	2000058c 	.word	0x2000058c

0800286c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002874:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002878:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d013      	beq.n	80028ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002884:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002888:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800288c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002894:	e000      	b.n	8002898 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002896:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002898:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f9      	beq.n	8002896 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80028a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_write>:
#include "stm32l4xx_hal.h"
#define FLASH_START_ADDRESS 0x08080000
#define START_ADDRESS 0x00000000

int _write(int file,char *ptr,int len)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
    int i=0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e009      	b.n	80028e4 <_write+0x2a>
      ITM_SendChar((*ptr++));
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ffc7 	bl	800286c <ITM_SendChar>
    for(i=0;i<len;i++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf1      	blt.n	80028d0 <_write+0x16>
    return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <Read_Flash>:
uint8_t write_size = 50;
gpsdata gps;
extern char *str;

void Read_Flash()
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	while(j<i)
 80028fc:	e033      	b.n	8002966 <Read_Flash+0x6e>
	{
		printf("read from flash\n");
 80028fe:	4828      	ldr	r0, [pc, #160]	; (80029a0 <Read_Flash+0xa8>)
 8002900:	f006 f8b8 	bl	8008a74 <puts>
		memset(rx_buffer,'\0',sizeof(rx_buffer));
 8002904:	2232      	movs	r2, #50	; 0x32
 8002906:	2100      	movs	r1, #0
 8002908:	4826      	ldr	r0, [pc, #152]	; (80029a4 <Read_Flash+0xac>)
 800290a:	f006 f9e1 	bl	8008cd0 <memset>
		W25Q_Read(START_ADDRESS+j,read_offset,sizeof(rx_buffer), (uint8_t*)rx_buffer);
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <Read_Flash+0xb0>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <Read_Flash+0xb4>)
 8002916:	7819      	ldrb	r1, [r3, #0]
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <Read_Flash+0xac>)
 800291a:	2232      	movs	r2, #50	; 0x32
 800291c:	f7ff fa0b 	bl	8001d36 <W25Q_Read>

		printf("read from flash data is %s\n",rx_buffer);
 8002920:	4920      	ldr	r1, [pc, #128]	; (80029a4 <Read_Flash+0xac>)
 8002922:	4823      	ldr	r0, [pc, #140]	; (80029b0 <Read_Flash+0xb8>)
 8002924:	f006 f840 	bl	80089a8 <iprintf>
		mesg_status = send_mesg_to_server(rx_buffer,strlen(rx_buffer)+1);
 8002928:	481e      	ldr	r0, [pc, #120]	; (80029a4 <Read_Flash+0xac>)
 800292a:	f7fd fca1 	bl	8000270 <strlen>
 800292e:	4603      	mov	r3, r0
 8002930:	3301      	adds	r3, #1
 8002932:	4619      	mov	r1, r3
 8002934:	481b      	ldr	r0, [pc, #108]	; (80029a4 <Read_Flash+0xac>)
 8002936:	f7ff f91b 	bl	8001b70 <send_mesg_to_server>
 800293a:	4603      	mov	r3, r0
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <Read_Flash+0xbc>)
 800293e:	6013      	str	r3, [r2, #0]
		if(mesg_status == 1)
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <Read_Flash+0xbc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d015      	beq.n	8002974 <Read_Flash+0x7c>
			break;
		j++;
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <Read_Flash+0xb0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <Read_Flash+0xb0>)
 8002952:	701a      	strb	r2, [r3, #0]

		printf("%d %d\n",i,j);
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <Read_Flash+0xc0>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <Read_Flash+0xb0>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4816      	ldr	r0, [pc, #88]	; (80029bc <Read_Flash+0xc4>)
 8002962:	f006 f821 	bl	80089a8 <iprintf>
	while(j<i)
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <Read_Flash+0xb0>)
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <Read_Flash+0xc0>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d3c5      	bcc.n	80028fe <Read_Flash+0x6>
 8002972:	e000      	b.n	8002976 <Read_Flash+0x7e>
			break;
 8002974:	bf00      	nop
	}
	if(mesg_status == 0)
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <Read_Flash+0xbc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <Read_Flash+0xa4>
	{
		j=0,i=0;
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <Read_Flash+0xb0>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <Read_Flash+0xc0>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
		inactive_count = 0;
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <Read_Flash+0xc8>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
		flash_count = 5;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <Read_Flash+0xcc>)
 8002992:	2205      	movs	r2, #5
 8002994:	601a      	str	r2, [r3, #0]
		gsm_status = 1;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <Read_Flash+0xd0>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
	}
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	0800d3d8 	.word	0x0800d3d8
 80029a4:	20000544 	.word	0x20000544
 80029a8:	200005f1 	.word	0x200005f1
 80029ac:	200005f8 	.word	0x200005f8
 80029b0:	0800d3e8 	.word	0x0800d3e8
 80029b4:	20000008 	.word	0x20000008
 80029b8:	200005f0 	.word	0x200005f0
 80029bc:	0800d404 	.word	0x0800d404
 80029c0:	200005f4 	.word	0x200005f4
 80029c4:	2000000c 	.word	0x2000000c
 80029c8:	20000000 	.word	0x20000000

080029cc <main>:


int main(void)
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d0:	f000 fda4 	bl	800351c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d4:	f000 f908 	bl	8002be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d8:	f000 fa56 	bl	8002e88 <MX_GPIO_Init>
  MX_SPI1_Init();
 80029dc:	f000 f956 	bl	8002c8c <MX_SPI1_Init>
  MX_UART4_Init();
 80029e0:	f000 f992 	bl	8002d08 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80029e4:	f000 f9f0 	bl	8002dc8 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80029e8:	f000 f9be 	bl	8002d68 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80029ec:	f000 fa1c 	bl	8002e28 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  W25Q_Reset();
 80029f0:	f7ff f96c 	bl	8001ccc <W25Q_Reset>
  HAL_Delay(500);
 80029f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029f8:	f000 fe0c 	bl	8003614 <HAL_Delay>

  ID = W25Q_ReadID();
 80029fc:	f7ff f97d 	bl	8001cfa <W25Q_ReadID>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <main+0x1c4>)
 8002a04:	6013      	str	r3, [r2, #0]

  gsm_actual_server();
 8002a06:	f7ff f865 	bl	8001ad4 <gsm_actual_server>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      get_gps_data();
 8002a0a:	f7ff fccb 	bl	80023a4 <get_gps_data>

      printf("json data %s\n",json_str);
 8002a0e:	4961      	ldr	r1, [pc, #388]	; (8002b94 <main+0x1c8>)
 8002a10:	4861      	ldr	r0, [pc, #388]	; (8002b98 <main+0x1cc>)
 8002a12:	f005 ffc9 	bl	80089a8 <iprintf>
      length = strlen(json_str);
 8002a16:	485f      	ldr	r0, [pc, #380]	; (8002b94 <main+0x1c8>)
 8002a18:	f7fd fc2a 	bl	8000270 <strlen>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <main+0x1d0>)
 8002a22:	601a      	str	r2, [r3, #0]
      printf("length of json string %d data %s\n",length,json_str);
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <main+0x1d0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5a      	ldr	r2, [pc, #360]	; (8002b94 <main+0x1c8>)
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	485c      	ldr	r0, [pc, #368]	; (8002ba0 <main+0x1d4>)
 8002a2e:	f005 ffbb 	bl	80089a8 <iprintf>
      printf("gps_status %d\n",gps_status);
 8002a32:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <main+0x1d8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	485b      	ldr	r0, [pc, #364]	; (8002ba8 <main+0x1dc>)
 8002a3a:	f005 ffb5 	bl	80089a8 <iprintf>

      if(gps_status==0)
 8002a3e:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <main+0x1d8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 8099 	bne.w	8002b7a <main+0x1ae>
      {
    	  if(check_signal_quality()==0)
 8002a48:	f7fe fff2 	bl	8001a30 <check_signal_quality>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d143      	bne.n	8002ada <main+0x10e>
    	  {
    		  if(my_check_server()==0)
 8002a52:	f7fe fda5 	bl	80015a0 <my_check_server>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d13a      	bne.n	8002ad2 <main+0x106>
    		  {
    			  if(inactive_count!=0)
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <main+0x1e0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d022      	beq.n	8002aaa <main+0xde>
    			   {
    			   	Read_Flash();
 8002a64:	f7ff ff48 	bl	80028f8 <Read_Flash>
    			   	printf("************Flash sending Done*************\n");
 8002a68:	4851      	ldr	r0, [pc, #324]	; (8002bb0 <main+0x1e4>)
 8002a6a:	f006 f803 	bl	8008a74 <puts>

					if( (j>0) && (j%87 == 0))
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <main+0x1e8>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d019      	beq.n	8002aaa <main+0xde>
 8002a76:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <main+0x1e8>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4a4f      	ldr	r2, [pc, #316]	; (8002bb8 <main+0x1ec>)
 8002a7c:	fba2 1203 	umull	r1, r2, r2, r3
 8002a80:	0912      	lsrs	r2, r2, #4
 8002a82:	2157      	movs	r1, #87	; 0x57
 8002a84:	fb01 f202 	mul.w	r2, r1, r2
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10c      	bne.n	8002aaa <main+0xde>
					{
						W25Q_Erase_Sector((j/87)-1);
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <main+0x1e8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <main+0x1ec>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f9f7 	bl	8001e98 <W25Q_Erase_Sector>

					}
    			   }
    			   	mesg_status = send_mesg_to_server(json_str,length);
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <main+0x1d0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4838      	ldr	r0, [pc, #224]	; (8002b94 <main+0x1c8>)
 8002ab2:	f7ff f85d 	bl	8001b70 <send_mesg_to_server>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <main+0x1f0>)
 8002aba:	6013      	str	r3, [r2, #0]
    			   	gsm_status = 0;
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <main+0x1f4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
    			   	if(mesg_status == 1)
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <main+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10a      	bne.n	8002ae0 <main+0x114>
    			   	{
    			   		gsm_status = 1;
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <main+0x1f4>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e006      	b.n	8002ae0 <main+0x114>
    			   	}
    		  }
    		  else
    		  {
    			  gsm_status = 1;
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <main+0x1f4>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e002      	b.n	8002ae0 <main+0x114>
    		  }
    	    }
    	  else
    	  {
    		  gsm_status = 1;
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <main+0x1f4>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
    	  }

          if((gsm_status==1))
 8002ae0:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <main+0x1f4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d12d      	bne.n	8002b44 <main+0x178>
          {
          	printf("write to flash\n");
 8002ae8:	4836      	ldr	r0, [pc, #216]	; (8002bc4 <main+0x1f8>)
 8002aea:	f005 ffc3 	bl	8008a74 <puts>
          	 current_offset = (length*i);
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <main+0x1fc>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <main+0x1d0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	17da      	asrs	r2, r3, #31
 8002afe:	461c      	mov	r4, r3
 8002b00:	4615      	mov	r5, r2
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <main+0x200>)
 8002b04:	e9c3 4500 	strd	r4, r5, [r3]

     		  W25Q_Write(START_ADDRESS+i,write_offset,write_size,(uint8_t*)json_str);
 8002b08:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <main+0x1fc>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <main+0x204>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b299      	uxth	r1, r3
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <main+0x208>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <main+0x1c8>)
 8002b1c:	f7ff fb20 	bl	8002160 <W25Q_Write>
     		 printf("json string %d data %s\n",length,json_str);
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <main+0x1d0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <main+0x1c8>)
 8002b26:	4619      	mov	r1, r3
 8002b28:	482b      	ldr	r0, [pc, #172]	; (8002bd8 <main+0x20c>)
 8002b2a:	f005 ff3d 	bl	80089a8 <iprintf>

              inactive_count++;
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <main+0x1e0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <main+0x1e0>)
 8002b36:	6013      	str	r3, [r2, #0]
              i++;
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <main+0x1fc>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <main+0x1fc>)
 8002b42:	701a      	strb	r2, [r3, #0]
          }

          if(inactive_count>=flash_count)
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <main+0x1e0>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <main+0x210>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	db1a      	blt.n	8002b86 <main+0x1ba>
          {
          	gsm_status=get_gsm_init();
 8002b50:	f7fe ffac 	bl	8001aac <get_gsm_init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <main+0x1f4>)
 8002b58:	6013      	str	r3, [r2, #0]

              if(gsm_status == 0)
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <main+0x1f4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <main+0x1a2>
              {
                printf("*******************************CONNECTED**********************************\n");
 8002b62:	481f      	ldr	r0, [pc, #124]	; (8002be0 <main+0x214>)
 8002b64:	f005 ff86 	bl	8008a74 <puts>
              	Read_Flash();
 8002b68:	f7ff fec6 	bl	80028f8 <Read_Flash>
 8002b6c:	e00b      	b.n	8002b86 <main+0x1ba>
              }
              else
              {
              	flash_count = flash_count+10;;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <main+0x210>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330a      	adds	r3, #10
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <main+0x210>)
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	e005      	b.n	8002b86 <main+0x1ba>
          }
      }

      else
      {
          printf("gps issue\n");
 8002b7a:	481a      	ldr	r0, [pc, #104]	; (8002be4 <main+0x218>)
 8002b7c:	f005 ff7a 	bl	8008a74 <puts>
          gps_status = 1;
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <main+0x1d8>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
      }

      HAL_Delay(500);
 8002b86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b8a:	f000 fd43 	bl	8003614 <HAL_Delay>
      get_gps_data();
 8002b8e:	e73c      	b.n	8002a0a <main+0x3e>
 8002b90:	20000578 	.word	0x20000578
 8002b94:	2000058c 	.word	0x2000058c
 8002b98:	0800d40c 	.word	0x0800d40c
 8002b9c:	20000588 	.word	0x20000588
 8002ba0:	0800d41c 	.word	0x0800d41c
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	0800d440 	.word	0x0800d440
 8002bac:	200005f4 	.word	0x200005f4
 8002bb0:	0800d450 	.word	0x0800d450
 8002bb4:	200005f1 	.word	0x200005f1
 8002bb8:	2f149903 	.word	0x2f149903
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	0800d47c 	.word	0x0800d47c
 8002bc8:	200005f0 	.word	0x200005f0
 8002bcc:	20000580 	.word	0x20000580
 8002bd0:	200005f9 	.word	0x200005f9
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	0800d48c 	.word	0x0800d48c
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	0800d4a4 	.word	0x0800d4a4
 8002be4:	0800d4f0 	.word	0x0800d4f0

08002be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b096      	sub	sp, #88	; 0x58
 8002bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	2244      	movs	r2, #68	; 0x44
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 f86a 	bl	8008cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c0e:	f001 f885 	bl	8003d1c <HAL_PWREx_ControlVoltageScaling>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c18:	f000 f980 	bl	8002f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c26:	2310      	movs	r3, #16
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c36:	230a      	movs	r3, #10
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c42:	2302      	movs	r3, #2
 8002c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f8bc 	bl	8003dc8 <HAL_RCC_OscConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c56:	f000 f961 	bl	8002f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c5a:	230f      	movs	r3, #15
 8002c5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2104      	movs	r1, #4
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fc84 	bl	8004580 <HAL_RCC_ClockConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c7e:	f000 f94d 	bl	8002f1c <Error_Handler>
  }
}
 8002c82:	bf00      	nop
 8002c84:	3758      	adds	r7, #88	; 0x58
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <MX_SPI1_Init+0x78>)
 8002c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002ca6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002caa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cda:	2207      	movs	r2, #7
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_SPI1_Init+0x74>)
 8002cec:	f002 fb28 	bl	8005340 <HAL_SPI_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cf6:	f000 f911 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200002d0 	.word	0x200002d0
 8002d04:	40013000 	.word	0x40013000

08002d08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <MX_UART4_Init+0x5c>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_UART4_Init+0x58>)
 8002d4c:	f003 fa08 	bl	8006160 <HAL_UART_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002d56:	f000 f8e1 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000334 	.word	0x20000334
 8002d64:	40004c00 	.word	0x40004c00

08002d68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d6e:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <MX_UART5_Init+0x5c>)
 8002d70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d8e:	220c      	movs	r2, #12
 8002d90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <MX_UART5_Init+0x58>)
 8002dac:	f003 f9d8 	bl	8006160 <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002db6:	f000 f8b1 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200003b8 	.word	0x200003b8
 8002dc4:	40005000 	.word	0x40005000

08002dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <MX_USART1_UART_Init+0x5c>)
 8002dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002dd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002dee:	220c      	movs	r2, #12
 8002df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_USART1_UART_Init+0x58>)
 8002e0c:	f003 f9a8 	bl	8006160 <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e16:	f000 f881 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000043c 	.word	0x2000043c
 8002e24:	40013800 	.word	0x40013800

08002e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <MX_USART3_UART_Init+0x5c>)
 8002e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e4e:	220c      	movs	r2, #12
 8002e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_USART3_UART_Init+0x58>)
 8002e6c:	f003 f978 	bl	8006160 <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002e76:	f000 f851 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200004c0 	.word	0x200004c0
 8002e84:	40004800 	.word	0x40004800

08002e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb6:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <MX_GPIO_Init+0x90>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2110      	movs	r1, #16
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eee:	f000 feef 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	4619      	mov	r1, r3
 8002f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0c:	f000 fd36 	bl	800397c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000

08002f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f20:	b672      	cpsid	i
}
 8002f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <Error_Handler+0x8>
	...

08002f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_MspInit+0x44>)
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <HAL_MspInit+0x44>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6613      	str	r3, [r2, #96]	; 0x60
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_MspInit+0x44>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_MspInit+0x44>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_MspInit+0x44>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_MspInit+0x44>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <HAL_SPI_MspInit+0x7c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d128      	bne.n	8002fe4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_SPI_MspInit+0x80>)
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_SPI_MspInit+0x80>)
 8002f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <HAL_SPI_MspInit+0x80>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_SPI_MspInit+0x80>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_SPI_MspInit+0x80>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_SPI_MspInit+0x80>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fc2:	23e0      	movs	r3, #224	; 0xe0
 8002fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe0:	f000 fccc 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013000 	.word	0x40013000
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b0b2      	sub	sp, #200	; 0xc8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800300c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003010:	2288      	movs	r2, #136	; 0x88
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f005 fe5b 	bl	8008cd0 <memset>
  if(huart->Instance==UART4)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4aa1      	ldr	r2, [pc, #644]	; (80032a4 <HAL_UART_MspInit+0x2b0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d144      	bne.n	80030ae <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003024:	2308      	movs	r3, #8
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003028:	2300      	movs	r3, #0
 800302a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800302c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fcc9 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800303c:	f7ff ff6e 	bl	8002f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003040:	4b99      	ldr	r3, [pc, #612]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	4a98      	ldr	r2, [pc, #608]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800304a:	6593      	str	r3, [r2, #88]	; 0x58
 800304c:	4b96      	ldr	r3, [pc, #600]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	4b93      	ldr	r3, [pc, #588]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	4a92      	ldr	r2, [pc, #584]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003064:	4b90      	ldr	r3, [pc, #576]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003070:	2303      	movs	r3, #3
 8003072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003088:	2308      	movs	r3, #8
 800308a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003092:	4619      	mov	r1, r3
 8003094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003098:	f000 fc70 	bl	800397c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	2034      	movs	r0, #52	; 0x34
 80030a2:	f000 fbb6 	bl	8003812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80030a6:	2034      	movs	r0, #52	; 0x34
 80030a8:	f000 fbcf 	bl	800384a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030ac:	e0f5      	b.n	800329a <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==UART5)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7e      	ldr	r2, [pc, #504]	; (80032ac <HAL_UART_MspInit+0x2b8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d165      	bne.n	8003184 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80030b8:	2310      	movs	r3, #16
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80030bc:	2300      	movs	r3, #0
 80030be:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fc7f 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80030d0:	f7ff ff24 	bl	8002f1c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80030d4:	4b74      	ldr	r3, [pc, #464]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4a73      	ldr	r2, [pc, #460]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80030da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ec:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	4a6d      	ldr	r2, [pc, #436]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f8:	4b6b      	ldr	r3, [pc, #428]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003104:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800310a:	f043 0308 	orr.w	r3, r3, #8
 800310e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800311c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003136:	2308      	movs	r3, #8
 8003138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003140:	4619      	mov	r1, r3
 8003142:	485b      	ldr	r0, [pc, #364]	; (80032b0 <HAL_UART_MspInit+0x2bc>)
 8003144:	f000 fc1a 	bl	800397c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003148:	2304      	movs	r3, #4
 800314a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315a:	2303      	movs	r3, #3
 800315c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003160:	2308      	movs	r3, #8
 8003162:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003166:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800316a:	4619      	mov	r1, r3
 800316c:	4851      	ldr	r0, [pc, #324]	; (80032b4 <HAL_UART_MspInit+0x2c0>)
 800316e:	f000 fc05 	bl	800397c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	2035      	movs	r0, #53	; 0x35
 8003178:	f000 fb4b 	bl	8003812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800317c:	2035      	movs	r0, #53	; 0x35
 800317e:	f000 fb64 	bl	800384a <HAL_NVIC_EnableIRQ>
}
 8003182:	e08a      	b.n	800329a <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_UART_MspInit+0x2c4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d145      	bne.n	800321a <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800318e:	2301      	movs	r3, #1
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003192:	2300      	movs	r3, #0
 8003194:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800319a:	4618      	mov	r0, r3
 800319c:	f001 fc14 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 80031a6:	f7ff feb9 	bl	8002f1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	4a3e      	ldr	r2, [pc, #248]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80031b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b4:	6613      	str	r3, [r2, #96]	; 0x60
 80031b6:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80031b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ee:	2303      	movs	r3, #3
 80031f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f4:	2307      	movs	r3, #7
 80031f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031fe:	4619      	mov	r1, r3
 8003200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003204:	f000 fbba 	bl	800397c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003208:	2200      	movs	r2, #0
 800320a:	2100      	movs	r1, #0
 800320c:	2025      	movs	r0, #37	; 0x25
 800320e:	f000 fb00 	bl	8003812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003212:	2025      	movs	r0, #37	; 0x25
 8003214:	f000 fb19 	bl	800384a <HAL_NVIC_EnableIRQ>
}
 8003218:	e03f      	b.n	800329a <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a27      	ldr	r2, [pc, #156]	; (80032bc <HAL_UART_MspInit+0x2c8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d13a      	bne.n	800329a <HAL_UART_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003224:	2304      	movs	r3, #4
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003228:	2300      	movs	r3, #0
 800322a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800322c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003230:	4618      	mov	r0, r3
 8003232:	f001 fbc9 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 800323c:	f7ff fe6e 	bl	8002f1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324a:	6593      	str	r3, [r2, #88]	; 0x58
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_UART_MspInit+0x2b4>)
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003270:	2330      	movs	r3, #48	; 0x30
 8003272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003288:	2307      	movs	r3, #7
 800328a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003292:	4619      	mov	r1, r3
 8003294:	4806      	ldr	r0, [pc, #24]	; (80032b0 <HAL_UART_MspInit+0x2bc>)
 8003296:	f000 fb71 	bl	800397c <HAL_GPIO_Init>
}
 800329a:	bf00      	nop
 800329c:	37c8      	adds	r7, #200	; 0xc8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40004c00 	.word	0x40004c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40005000 	.word	0x40005000
 80032b0:	48000800 	.word	0x48000800
 80032b4:	48000c00 	.word	0x48000c00
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40004800 	.word	0x40004800

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <NMI_Handler+0x4>

080032c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ca:	e7fe      	b.n	80032ca <HardFault_Handler+0x4>

080032cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <MemManage_Handler+0x4>

080032d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <BusFault_Handler+0x4>

080032d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <UsageFault_Handler+0x4>

080032de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800330c:	f000 f962 	bl	80035d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}

08003314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <USART1_IRQHandler+0x10>)
 800331a:	f003 f905 	bl	8006528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000043c 	.word	0x2000043c

08003328 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <UART4_IRQHandler+0x10>)
 800332e:	f003 f8fb 	bl	8006528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000334 	.word	0x20000334

0800333c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <UART5_IRQHandler+0x10>)
 8003342:	f003 f8f1 	bl	8006528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200003b8 	.word	0x200003b8

08003350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_kill>:

int _kill(int pid, int sig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800336a:	f005 fd2b 	bl	8008dc4 <__errno>
 800336e:	4603      	mov	r3, r0
 8003370:	2216      	movs	r2, #22
 8003372:	601a      	str	r2, [r3, #0]
  return -1;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_exit>:

void _exit (int status)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffe7 	bl	8003360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003392:	e7fe      	b.n	8003392 <_exit+0x12>

08003394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a6:	f3af 8000 	nop.w
 80033aa:	4601      	mov	r1, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf0      	blt.n	80033a6 <_read+0x12>
  }

  return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033f6:	605a      	str	r2, [r3, #4]
  return 0;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_isatty>:

int _isatty(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800340e:	2301      	movs	r3, #1
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <_sbrk+0x5c>)
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <_sbrk+0x60>)
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <_sbrk+0x64>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <_sbrk+0x64>)
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <_sbrk+0x68>)
 8003458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d207      	bcs.n	8003478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003468:	f005 fcac 	bl	8008dc4 <__errno>
 800346c:	4603      	mov	r3, r0
 800346e:	220c      	movs	r2, #12
 8003470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	e009      	b.n	800348c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <_sbrk+0x64>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <_sbrk+0x64>)
 8003488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800348a:	68fb      	ldr	r3, [r7, #12]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20018000 	.word	0x20018000
 8003498:	00000400 	.word	0x00000400
 800349c:	200009e8 	.word	0x200009e8
 80034a0:	20000b40 	.word	0x20000b40

080034a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <SystemInit+0x20>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <SystemInit+0x20>)
 80034b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003500 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034cc:	f7ff ffea 	bl	80034a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034d0:	480c      	ldr	r0, [pc, #48]	; (8003504 <LoopForever+0x6>)
  ldr r1, =_edata
 80034d2:	490d      	ldr	r1, [pc, #52]	; (8003508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <LoopForever+0xe>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d8:	e002      	b.n	80034e0 <LoopCopyDataInit>

080034da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034de:	3304      	adds	r3, #4

080034e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e4:	d3f9      	bcc.n	80034da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034e8:	4c0a      	ldr	r4, [pc, #40]	; (8003514 <LoopForever+0x16>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ec:	e001      	b.n	80034f2 <LoopFillZerobss>

080034ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f0:	3204      	adds	r2, #4

080034f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f4:	d3fb      	bcc.n	80034ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034f6:	f005 fc6b 	bl	8008dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034fa:	f7ff fa67 	bl	80029cc <main>

080034fe <LoopForever>:

LoopForever:
    b LoopForever
 80034fe:	e7fe      	b.n	80034fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003508:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800350c:	0800d9b8 	.word	0x0800d9b8
  ldr r2, =_sbss
 8003510:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003514:	20000b3c 	.word	0x20000b3c

08003518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003518:	e7fe      	b.n	8003518 <ADC1_2_IRQHandler>
	...

0800351c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_Init+0x3c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0b      	ldr	r2, [pc, #44]	; (8003558 <HAL_Init+0x3c>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003530:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003532:	2003      	movs	r0, #3
 8003534:	f000 f962 	bl	80037fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003538:	2000      	movs	r0, #0
 800353a:	f000 f80f 	bl	800355c <HAL_InitTick>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	e001      	b.n	800354e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800354a:	f7ff fced 	bl	8002f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800354e:	79fb      	ldrb	r3, [r7, #7]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40022000 	.word	0x40022000

0800355c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_InitTick+0x6c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d023      	beq.n	80035b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_InitTick+0x70>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_InitTick+0x6c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f96d 	bl	8003866 <HAL_SYSTICK_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0f      	cmp	r3, #15
 8003596:	d809      	bhi.n	80035ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003598:	2200      	movs	r2, #0
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f000 f937 	bl	8003812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_InitTick+0x74>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e007      	b.n	80035bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e004      	b.n	80035bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e001      	b.n	80035bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000001c 	.word	0x2000001c
 80035cc:	20000014 	.word	0x20000014
 80035d0:	20000018 	.word	0x20000018

080035d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x20>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_IncTick+0x24>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <HAL_IncTick+0x24>)
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000001c 	.word	0x2000001c
 80035f8:	200009ec 	.word	0x200009ec

080035fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <HAL_GetTick+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	200009ec 	.word	0x200009ec

08003614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800361c:	f7ff ffee 	bl	80035fc <HAL_GetTick>
 8003620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d005      	beq.n	800363a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_Delay+0x44>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800363a:	bf00      	nop
 800363c:	f7ff ffde 	bl	80035fc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	429a      	cmp	r2, r3
 800364a:	d8f7      	bhi.n	800363c <HAL_Delay+0x28>
  {
  }
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000001c 	.word	0x2000001c

0800365c <__NVIC_SetPriorityGrouping>:
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <__NVIC_SetPriorityGrouping+0x44>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003678:	4013      	ands	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368e:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	60d3      	str	r3, [r2, #12]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_GetPriorityGrouping>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <__NVIC_GetPriorityGrouping+0x18>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	f003 0307 	and.w	r3, r3, #7
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_EnableIRQ>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db0b      	blt.n	80036ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	4907      	ldr	r1, [pc, #28]	; (80036f8 <__NVIC_EnableIRQ+0x38>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2001      	movs	r0, #1
 80036e2:	fa00 f202 	lsl.w	r2, r0, r2
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000e100 	.word	0xe000e100

080036fc <__NVIC_SetPriority>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db0a      	blt.n	8003726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	490c      	ldr	r1, [pc, #48]	; (8003748 <__NVIC_SetPriority+0x4c>)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	440b      	add	r3, r1
 8003720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003724:	e00a      	b.n	800373c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4908      	ldr	r1, [pc, #32]	; (800374c <__NVIC_SetPriority+0x50>)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3b04      	subs	r3, #4
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	440b      	add	r3, r1
 800373a:	761a      	strb	r2, [r3, #24]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000e100 	.word	0xe000e100
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <NVIC_EncodePriority>:
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f1c3 0307 	rsb	r3, r3, #7
 800376a:	2b04      	cmp	r3, #4
 800376c:	bf28      	it	cs
 800376e:	2304      	movcs	r3, #4
 8003770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3304      	adds	r3, #4
 8003776:	2b06      	cmp	r3, #6
 8003778:	d902      	bls.n	8003780 <NVIC_EncodePriority+0x30>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3b03      	subs	r3, #3
 800377e:	e000      	b.n	8003782 <NVIC_EncodePriority+0x32>
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003798:	f04f 31ff 	mov.w	r1, #4294967295
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	43d9      	mvns	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	4313      	orrs	r3, r2
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <SysTick_Config>:
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c8:	d301      	bcc.n	80037ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00f      	b.n	80037ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <SysTick_Config+0x40>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d6:	210f      	movs	r1, #15
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f7ff ff8e 	bl	80036fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SysTick_Config+0x40>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SysTick_Config+0x40>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff29 	bl	800365c <__NVIC_SetPriorityGrouping>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003824:	f7ff ff3e 	bl	80036a4 <__NVIC_GetPriorityGrouping>
 8003828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	6978      	ldr	r0, [r7, #20]
 8003830:	f7ff ff8e 	bl	8003750 <NVIC_EncodePriority>
 8003834:	4602      	mov	r2, r0
 8003836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff5d 	bl	80036fc <__NVIC_SetPriority>
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	4603      	mov	r3, r0
 8003852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff31 	bl	80036c0 <__NVIC_EnableIRQ>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ffa2 	bl	80037b8 <SysTick_Config>
 8003874:	4603      	mov	r3, r0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d008      	beq.n	80038a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2204      	movs	r2, #4
 800389a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e022      	b.n	80038ee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 020e 	bic.w	r2, r2, #14
 80038b6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 021c 	and.w	r2, r3, #28
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d005      	beq.n	800391e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	e029      	b.n	8003972 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 020e 	bic.w	r2, r2, #14
 800392c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f003 021c 	and.w	r2, r3, #28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
    }
  }
  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	e17f      	b.n	8003c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8171 	beq.w	8003c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d005      	beq.n	80039bc <HAL_GPIO_Init+0x40>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d118      	bne.n	8003a5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a30:	2201      	movs	r2, #1
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0201 	and.w	r2, r3, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d017      	beq.n	8003a98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2203      	movs	r2, #3
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d123      	bne.n	8003aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	08da      	lsrs	r2, r3, #3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3208      	adds	r2, #8
 8003aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	08da      	lsrs	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80ac 	beq.w	8003c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3a:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b46:	4a5a      	ldr	r2, [pc, #360]	; (8003cb0 <HAL_GPIO_Init+0x334>)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b70:	d025      	beq.n	8003bbe <HAL_GPIO_Init+0x242>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4f      	ldr	r2, [pc, #316]	; (8003cb4 <HAL_GPIO_Init+0x338>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01f      	beq.n	8003bba <HAL_GPIO_Init+0x23e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_GPIO_Init+0x33c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d019      	beq.n	8003bb6 <HAL_GPIO_Init+0x23a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	; (8003cbc <HAL_GPIO_Init+0x340>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0x236>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_GPIO_Init+0x344>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00d      	beq.n	8003bae <HAL_GPIO_Init+0x232>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_GPIO_Init+0x348>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x22e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_GPIO_Init+0x22a>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00c      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	e00a      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003baa:	2305      	movs	r3, #5
 8003bac:	e008      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	e006      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e004      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	f002 0203 	and.w	r2, r2, #3
 8003bc6:	0092      	lsls	r2, r2, #2
 8003bc8:	4093      	lsls	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd0:	4937      	ldr	r1, [pc, #220]	; (8003cb0 <HAL_GPIO_Init+0x334>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c02:	4a32      	ldr	r2, [pc, #200]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c56:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c80:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f ae78 	bne.w	800398c <HAL_GPIO_Init+0x10>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	48000400 	.word	0x48000400
 8003cb8:	48000800 	.word	0x48000800
 8003cbc:	48000c00 	.word	0x48000c00
 8003cc0:	48001000 	.word	0x48001000
 8003cc4:	48001400 	.word	0x48001400
 8003cc8:	48001800 	.word	0x48001800
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40007000 	.word	0x40007000

08003d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2a:	d130      	bne.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d038      	beq.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d42:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2232      	movs	r2, #50	; 0x32
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0c9b      	lsrs	r3, r3, #18
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d60:	e002      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d102      	bne.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f2      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d110      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d007      	beq.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003daa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	20000014 	.word	0x20000014
 8003dc4:	431bde83 	.word	0x431bde83

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e3ca      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dda:	4b97      	ldr	r3, [pc, #604]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de4:	4b94      	ldr	r3, [pc, #592]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80e4 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_RCC_OscConfig+0x4a>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f040 808b 	bne.w	8003f20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	f040 8087 	bne.w	8003f20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e12:	4b89      	ldr	r3, [pc, #548]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCC_OscConfig+0x62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e3a2      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	4b82      	ldr	r3, [pc, #520]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_RCC_OscConfig+0x7c>
 8003e3a:	4b7f      	ldr	r3, [pc, #508]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e42:	e005      	b.n	8003e50 <HAL_RCC_OscConfig+0x88>
 8003e44:	4b7c      	ldr	r3, [pc, #496]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d223      	bcs.n	8003e9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fd55 	bl	8004908 <RCC_SetFlashLatencyFromMSIRange>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e383      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e68:	4b73      	ldr	r3, [pc, #460]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a72      	ldr	r2, [pc, #456]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	f043 0308 	orr.w	r3, r3, #8
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b70      	ldr	r3, [pc, #448]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	496d      	ldr	r1, [pc, #436]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4968      	ldr	r1, [pc, #416]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
 8003e9a:	e025      	b.n	8003ee8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9c:	4b66      	ldr	r3, [pc, #408]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a65      	ldr	r2, [pc, #404]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	f043 0308 	orr.w	r3, r3, #8
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4960      	ldr	r1, [pc, #384]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	495b      	ldr	r1, [pc, #364]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fd15 	bl	8004908 <RCC_SetFlashLatencyFromMSIRange>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e343      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ee8:	f000 fc4a 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b52      	ldr	r3, [pc, #328]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	4950      	ldr	r1, [pc, #320]	; (800403c <HAL_RCC_OscConfig+0x274>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	4a4e      	ldr	r2, [pc, #312]	; (8004040 <HAL_RCC_OscConfig+0x278>)
 8003f06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f08:	4b4e      	ldr	r3, [pc, #312]	; (8004044 <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fb25 	bl	800355c <HAL_InitTick>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d052      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	e327      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d032      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f28:	4b43      	ldr	r3, [pc, #268]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f34:	f7ff fb62 	bl	80035fc <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f3c:	f7ff fb5e 	bl	80035fc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e310      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4e:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f5a:	4b37      	ldr	r3, [pc, #220]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a36      	ldr	r2, [pc, #216]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f60:	f043 0308 	orr.w	r3, r3, #8
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4931      	ldr	r1, [pc, #196]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f78:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	492c      	ldr	r1, [pc, #176]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e01a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a29      	ldr	r2, [pc, #164]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f9a:	f7ff fb2f 	bl	80035fc <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa2:	f7ff fb2b 	bl	80035fc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e2dd      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fb4:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x1da>
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d074      	beq.n	80040ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x21a>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d10e      	bne.n	8003ffa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d064      	beq.n	80040b8 <HAL_RCC_OscConfig+0x2f0>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d160      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e2ba      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x24a>
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e026      	b.n	8004060 <HAL_RCC_OscConfig+0x298>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401a:	d115      	bne.n	8004048 <HAL_RCC_OscConfig+0x280>
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 8004022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a02      	ldr	r2, [pc, #8]	; (8004038 <HAL_RCC_OscConfig+0x270>)
 800402e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e014      	b.n	8004060 <HAL_RCC_OscConfig+0x298>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	0800d508 	.word	0x0800d508
 8004040:	20000014 	.word	0x20000014
 8004044:	20000018 	.word	0x20000018
 8004048:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a9f      	ldr	r2, [pc, #636]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b9d      	ldr	r3, [pc, #628]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a9c      	ldr	r2, [pc, #624]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7ff fac8 	bl	80035fc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7ff fac4 	bl	80035fc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e276      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004082:	4b92      	ldr	r3, [pc, #584]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x2a8>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7ff fab4 	bl	80035fc <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7ff fab0 	bl	80035fc <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e262      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040aa:	4b88      	ldr	r3, [pc, #544]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x2d0>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d060      	beq.n	8004188 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_OscConfig+0x310>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d116      	bne.n	8004106 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	4b7c      	ldr	r3, [pc, #496]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_OscConfig+0x328>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e23f      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	4973      	ldr	r1, [pc, #460]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004104:	e040      	b.n	8004188 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d023      	beq.n	8004156 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800410e:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6e      	ldr	r2, [pc, #440]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7ff fa6f 	bl	80035fc <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004122:	f7ff fa6b 	bl	80035fc <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e21d      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004134:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	495f      	ldr	r1, [pc, #380]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
 8004154:	e018      	b.n	8004188 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5c      	ldr	r2, [pc, #368]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800415c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7ff fa4b 	bl	80035fc <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7ff fa47 	bl	80035fc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1f9      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800417c:	4b53      	ldr	r3, [pc, #332]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03c      	beq.n	800420e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419c:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7ff fa26 	bl	80035fc <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b4:	f7ff fa22 	bl	80035fc <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1d4      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c6:	4b41      	ldr	r3, [pc, #260]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <HAL_RCC_OscConfig+0x3ec>
 80041d4:	e01b      	b.n	800420e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041dc:	4a3b      	ldr	r2, [pc, #236]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7ff fa09 	bl	80035fc <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ee:	f7ff fa05 	bl	80035fc <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1b7      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ef      	bne.n	80041ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a6 	beq.w	8004368 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
 8004238:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <HAL_RCC_OscConfig+0x508>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004254:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCC_OscConfig+0x508>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_RCC_OscConfig+0x508>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7ff f9cc 	bl	80035fc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7ff f9c8 	bl	80035fc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e17a      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_RCC_OscConfig+0x508>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d108      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4d8>
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800429e:	e029      	b.n	80042f4 <HAL_RCC_OscConfig+0x52c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d115      	bne.n	80042d4 <HAL_RCC_OscConfig+0x50c>
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a03      	ldr	r2, [pc, #12]	; (80042cc <HAL_RCC_OscConfig+0x504>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x52c>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	4b9c      	ldr	r3, [pc, #624]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	4a9b      	ldr	r2, [pc, #620]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e4:	4b98      	ldr	r3, [pc, #608]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a97      	ldr	r2, [pc, #604]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d016      	beq.n	800432a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7ff f97e 	bl	80035fc <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7ff f97a 	bl	80035fc <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e12a      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	4b8b      	ldr	r3, [pc, #556]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ed      	beq.n	8004304 <HAL_RCC_OscConfig+0x53c>
 8004328:	e015      	b.n	8004356 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7ff f967 	bl	80035fc <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7ff f963 	bl	80035fc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e113      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004348:	4b7f      	ldr	r3, [pc, #508]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ed      	bne.n	8004332 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004356:	7ffb      	ldrb	r3, [r7, #31]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d105      	bne.n	8004368 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435c:	4b7a      	ldr	r3, [pc, #488]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	4a79      	ldr	r2, [pc, #484]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004366:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80fe 	beq.w	800456e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	2b02      	cmp	r3, #2
 8004378:	f040 80d0 	bne.w	800451c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800437c:	4b72      	ldr	r3, [pc, #456]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0203 	and.w	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d130      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	3b01      	subs	r3, #1
 800439c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d127      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d11f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043bc:	2a07      	cmp	r2, #7
 80043be:	bf14      	ite	ne
 80043c0:	2201      	movne	r2, #1
 80043c2:	2200      	moveq	r2, #0
 80043c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d113      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d06e      	beq.n	80044d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d069      	beq.n	80044cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043f8:	4b53      	ldr	r3, [pc, #332]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004404:	4b50      	ldr	r3, [pc, #320]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0ad      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a4b      	ldr	r2, [pc, #300]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004420:	f7ff f8ec 	bl	80035fc <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7ff f8e8 	bl	80035fc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e09a      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443a:	4b43      	ldr	r3, [pc, #268]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004446:	4b40      	ldr	r3, [pc, #256]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCC_OscConfig+0x784>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004456:	3a01      	subs	r2, #1
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004460:	0212      	lsls	r2, r2, #8
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004468:	0852      	lsrs	r2, r2, #1
 800446a:	3a01      	subs	r2, #1
 800446c:	0552      	lsls	r2, r2, #21
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004474:	0852      	lsrs	r2, r2, #1
 8004476:	3a01      	subs	r2, #1
 8004478:	0652      	lsls	r2, r2, #25
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004480:	0912      	lsrs	r2, r2, #4
 8004482:	0452      	lsls	r2, r2, #17
 8004484:	430a      	orrs	r2, r1
 8004486:	4930      	ldr	r1, [pc, #192]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004496:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 800449e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044a4:	f7ff f8aa 	bl	80035fc <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7ff f8a6 	bl	80035fc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e058      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	4b22      	ldr	r3, [pc, #136]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ca:	e050      	b.n	800456e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e04f      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d148      	bne.n	800456e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044f4:	f7ff f882 	bl	80035fc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7ff f87e 	bl	80035fc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e030      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x734>
 800451a:	e028      	b.n	800456e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d023      	beq.n	800456a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <HAL_RCC_OscConfig+0x780>)
 8004528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7ff f865 	bl	80035fc <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	e00c      	b.n	8004550 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7ff f861 	bl	80035fc <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d905      	bls.n	8004550 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e013      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
 8004548:	40021000 	.word	0x40021000
 800454c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ec      	bne.n	8004536 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	4905      	ldr	r1, [pc, #20]	; (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_OscConfig+0x7b4>)
 8004564:	4013      	ands	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
 8004568:	e001      	b.n	800456e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	feeefffc 	.word	0xfeeefffc

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0e7      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b75      	ldr	r3, [pc, #468]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d910      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b72      	ldr	r3, [pc, #456]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0207 	bic.w	r2, r3, #7
 80045aa:	4970      	ldr	r1, [pc, #448]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b6e      	ldr	r3, [pc, #440]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0cf      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b66      	ldr	r3, [pc, #408]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	429a      	cmp	r2, r3
 80045de:	d908      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b63      	ldr	r3, [pc, #396]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4960      	ldr	r1, [pc, #384]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d04c      	beq.n	8004698 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d121      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0a6      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461e:	4b54      	ldr	r3, [pc, #336]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e09a      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004636:	4b4e      	ldr	r3, [pc, #312]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e08e      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004646:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e086      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004656:	4b46      	ldr	r3, [pc, #280]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 0203 	bic.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4943      	ldr	r1, [pc, #268]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fe ffc8 	bl	80035fc <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	e00a      	b.n	8004686 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7fe ffc4 	bl	80035fc <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e06e      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 020c 	and.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	429a      	cmp	r2, r3
 8004696:	d1eb      	bne.n	8004670 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d208      	bcs.n	80046c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	492b      	ldr	r1, [pc, #172]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c6:	4b29      	ldr	r3, [pc, #164]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d210      	bcs.n	80046f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 0207 	bic.w	r2, r3, #7
 80046dc:	4923      	ldr	r1, [pc, #140]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e036      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4918      	ldr	r1, [pc, #96]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4910      	ldr	r1, [pc, #64]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004734:	f000 f824 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	490b      	ldr	r1, [pc, #44]	; (8004774 <HAL_RCC_ClockConfig+0x1f4>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
 8004750:	4a09      	ldr	r2, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1f8>)
 8004752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1fc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe feff 	bl	800355c <HAL_InitTick>
 800475e:	4603      	mov	r3, r0
 8004760:	72fb      	strb	r3, [r7, #11]

  return status;
 8004762:	7afb      	ldrb	r3, [r7, #11]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40022000 	.word	0x40022000
 8004770:	40021000 	.word	0x40021000
 8004774:	0800d508 	.word	0x0800d508
 8004778:	20000014 	.word	0x20000014
 800477c:	20000018 	.word	0x20000018

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478e:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x34>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d121      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d11e      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047b4:	4b34      	ldr	r3, [pc, #208]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e005      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047dc:	4a2b      	ldr	r2, [pc, #172]	; (800488c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10d      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e004      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d101      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <HAL_RCC_GetSysClockFreq+0x114>)
 8004806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d134      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d003      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0xa6>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d003      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0xac>
 8004824:	e005      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <HAL_RCC_GetSysClockFreq+0x110>)
 8004828:	617b      	str	r3, [r7, #20]
      break;
 800482a:	e005      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_RCC_GetSysClockFreq+0x114>)
 800482e:	617b      	str	r3, [r7, #20]
      break;
 8004830:	e002      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	617b      	str	r3, [r7, #20]
      break;
 8004836:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	fb03 f202 	mul.w	r2, r3, r2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	0e5b      	lsrs	r3, r3, #25
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	3301      	adds	r3, #1
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004878:	69bb      	ldr	r3, [r7, #24]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	0800d520 	.word	0x0800d520
 8004890:	00f42400 	.word	0x00f42400
 8004894:	007a1200 	.word	0x007a1200

08004898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <HAL_RCC_GetHCLKFreq+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000014 	.word	0x20000014

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048b4:	f7ff fff0 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	0800d518 	.word	0x0800d518

080048dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048e0:	f7ff ffda 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0adb      	lsrs	r3, r3, #11
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4904      	ldr	r1, [pc, #16]	; (8004904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	0800d518 	.word	0x0800d518

08004908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004914:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004920:	f7ff f9ee 	bl	8003d00 <HAL_PWREx_GetVoltageRange>
 8004924:	6178      	str	r0, [r7, #20]
 8004926:	e014      	b.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004932:	6593      	str	r3, [r2, #88]	; 0x58
 8004934:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004940:	f7ff f9de 	bl	8003d00 <HAL_PWREx_GetVoltageRange>
 8004944:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004946:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004958:	d10b      	bne.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d919      	bls.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2ba0      	cmp	r3, #160	; 0xa0
 8004964:	d902      	bls.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004966:	2302      	movs	r3, #2
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e013      	b.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800496c:	2301      	movs	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e010      	b.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d902      	bls.n	800497e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004978:	2303      	movs	r3, #3
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	e00a      	b.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b80      	cmp	r3, #128	; 0x80
 8004982:	d102      	bne.n	800498a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004984:	2302      	movs	r3, #2
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	e004      	b.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b70      	cmp	r3, #112	; 0x70
 800498e:	d101      	bne.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004990:	2301      	movs	r3, #1
 8004992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 0207 	bic.w	r2, r3, #7
 800499c:	4909      	ldr	r1, [pc, #36]	; (80049c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d001      	beq.n	80049b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40022000 	.word	0x40022000

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d0:	2300      	movs	r3, #0
 80049d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049d4:	2300      	movs	r3, #0
 80049d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d041      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ec:	d02a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049f2:	d824      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049fe:	d81e      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a08:	d010      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a0a:	e018      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a0c:	4b86      	ldr	r3, [pc, #536]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a85      	ldr	r2, [pc, #532]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a18:	e015      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fabb 	bl	8004f9c <RCCEx_PLLSAI1_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a2a:	e00c      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3320      	adds	r3, #32
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fba6 	bl	8005184 <RCCEx_PLLSAI2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	74fb      	strb	r3, [r7, #19]
      break;
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a4c:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5a:	4973      	ldr	r1, [pc, #460]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d041      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a7c:	d02a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a82:	d824      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a88:	d008      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a8e:	d81e      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a98:	d010      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a9a:	e018      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a9c:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a61      	ldr	r2, [pc, #388]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa8:	e015      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fa73 	bl	8004f9c <RCCEx_PLLSAI1_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aba:	e00c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3320      	adds	r3, #32
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fb5e 	bl	8005184 <RCCEx_PLLSAI2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004adc:	4b52      	ldr	r3, [pc, #328]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aea:	494f      	ldr	r1, [pc, #316]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004af2:	e001      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a0 	beq.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	4a40      	ldr	r2, [pc, #256]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b2c:	4b3e      	ldr	r3, [pc, #248]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3c:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a3a      	ldr	r2, [pc, #232]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b48:	f7fe fd58 	bl	80035fc <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b4e:	e009      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fe fd54 	bl	80035fc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	74fb      	strb	r3, [r7, #19]
        break;
 8004b62:	e005      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b64:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ef      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d15c      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b76:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01f      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d019      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fe fd13 	bl	80035fc <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd8:	e00b      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fe fd0f 	bl	80035fc <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d902      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ec      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c16:	4904      	ldr	r1, [pc, #16]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c1e:	e009      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	74bb      	strb	r3, [r7, #18]
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c34:	7c7b      	ldrb	r3, [r7, #17]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4b9e      	ldr	r3, [pc, #632]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4a9d      	ldr	r2, [pc, #628]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c52:	4b98      	ldr	r3, [pc, #608]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f023 0203 	bic.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	4994      	ldr	r1, [pc, #592]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c74:	4b8f      	ldr	r3, [pc, #572]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 020c 	bic.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	498c      	ldr	r1, [pc, #560]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c96:	4b87      	ldr	r3, [pc, #540]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	4983      	ldr	r1, [pc, #524]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb8:	4b7e      	ldr	r3, [pc, #504]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	497b      	ldr	r1, [pc, #492]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cda:	4b76      	ldr	r3, [pc, #472]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	4972      	ldr	r1, [pc, #456]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cfc:	4b6d      	ldr	r3, [pc, #436]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	496a      	ldr	r1, [pc, #424]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d1e:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2c:	4961      	ldr	r1, [pc, #388]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d40:	4b5c      	ldr	r3, [pc, #368]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4e:	4959      	ldr	r1, [pc, #356]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d62:	4b54      	ldr	r3, [pc, #336]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	4950      	ldr	r1, [pc, #320]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d84:	4b4b      	ldr	r3, [pc, #300]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	4948      	ldr	r1, [pc, #288]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004da6:	4b43      	ldr	r3, [pc, #268]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	493f      	ldr	r1, [pc, #252]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d028      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dc8:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd6:	4937      	ldr	r1, [pc, #220]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de6:	d106      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de8:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4a31      	ldr	r2, [pc, #196]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df2:	60d3      	str	r3, [r2, #12]
 8004df4:	e011      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dfe:	d10c      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f8c8 	bl	8004f9c <RCCEx_PLLSAI1_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d028      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	491f      	ldr	r1, [pc, #124]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e50:	60d3      	str	r3, [r2, #12]
 8004e52:	e011      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2101      	movs	r1, #1
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f899 	bl	8004f9c <RCCEx_PLLSAI1_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e92:	4908      	ldr	r1, [pc, #32]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a02      	ldr	r2, [pc, #8]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eae:	60d3      	str	r3, [r2, #12]
 8004eb0:	e014      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f867 	bl	8004f9c <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02f      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef6:	4928      	ldr	r1, [pc, #160]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f06:	d10d      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f844 	bl	8004f9c <RCCEx_PLLSAI1_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d014      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	74bb      	strb	r3, [r7, #18]
 8004f22:	e011      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3320      	adds	r3, #32
 8004f32:	2102      	movs	r1, #2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f925 	bl	8005184 <RCCEx_PLLSAI2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f54:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f62:	490d      	ldr	r1, [pc, #52]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f86:	4904      	ldr	r1, [pc, #16]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000

08004f9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004faa:	4b75      	ldr	r3, [pc, #468]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fb6:	4b72      	ldr	r3, [pc, #456]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0203 	and.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fce:	4b6c      	ldr	r3, [pc, #432]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d047      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e044      	b.n	8005072 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d018      	beq.n	8005022 <RCCEx_PLLSAI1_Config+0x86>
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d825      	bhi.n	8005040 <RCCEx_PLLSAI1_Config+0xa4>
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d002      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0x62>
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d009      	beq.n	8005010 <RCCEx_PLLSAI1_Config+0x74>
 8004ffc:	e020      	b.n	8005040 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ffe:	4b60      	ldr	r3, [pc, #384]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11d      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500e:	e01a      	b.n	8005046 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005010:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d116      	bne.n	800504a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005020:	e013      	b.n	800504a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005022:	4b57      	ldr	r3, [pc, #348]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800502e:	4b54      	ldr	r3, [pc, #336]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800503e:	e006      	b.n	800504e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e004      	b.n	8005050 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005046:	bf00      	nop
 8005048:	e002      	b.n	8005050 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800504e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	430b      	orrs	r3, r1
 800506c:	4944      	ldr	r1, [pc, #272]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506e:	4313      	orrs	r3, r2
 8005070:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d17d      	bne.n	8005174 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005078:	4b41      	ldr	r3, [pc, #260]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a40      	ldr	r2, [pc, #256]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fe faba 	bl	80035fc <HAL_GetTick>
 8005088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800508a:	e009      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800508c:	f7fe fab6 	bl	80035fc <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d902      	bls.n	80050a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	73fb      	strb	r3, [r7, #15]
        break;
 800509e:	e005      	b.n	80050ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050a0:	4b37      	ldr	r3, [pc, #220]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ef      	bne.n	800508c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d160      	bne.n	8005174 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d111      	bne.n	80050dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6892      	ldr	r2, [r2, #8]
 80050c8:	0211      	lsls	r1, r2, #8
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	0912      	lsrs	r2, r2, #4
 80050d0:	0452      	lsls	r2, r2, #17
 80050d2:	430a      	orrs	r2, r1
 80050d4:	492a      	ldr	r1, [pc, #168]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]
 80050da:	e027      	b.n	800512c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d112      	bne.n	8005108 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6892      	ldr	r2, [r2, #8]
 80050f2:	0211      	lsls	r1, r2, #8
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6912      	ldr	r2, [r2, #16]
 80050f8:	0852      	lsrs	r2, r2, #1
 80050fa:	3a01      	subs	r2, #1
 80050fc:	0552      	lsls	r2, r2, #21
 80050fe:	430a      	orrs	r2, r1
 8005100:	491f      	ldr	r1, [pc, #124]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	610b      	str	r3, [r1, #16]
 8005106:	e011      	b.n	800512c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005110:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
 8005118:	0211      	lsls	r1, r2, #8
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6952      	ldr	r2, [r2, #20]
 800511e:	0852      	lsrs	r2, r2, #1
 8005120:	3a01      	subs	r2, #1
 8005122:	0652      	lsls	r2, r2, #25
 8005124:	430a      	orrs	r2, r1
 8005126:	4916      	ldr	r1, [pc, #88]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005136:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fe fa60 	bl	80035fc <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005140:	f7fe fa5c 	bl	80035fc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
          break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	4904      	ldr	r1, [pc, #16]	; (8005180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000

08005184 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005192:	4b6a      	ldr	r3, [pc, #424]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800519e:	4b67      	ldr	r3, [pc, #412]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0203 	and.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
       ||
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051b6:	4b61      	ldr	r3, [pc, #388]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	091b      	lsrs	r3, r3, #4
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
       ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d047      	beq.n	800525a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	e044      	b.n	800525a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d018      	beq.n	800520a <RCCEx_PLLSAI2_Config+0x86>
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d825      	bhi.n	8005228 <RCCEx_PLLSAI2_Config+0xa4>
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d002      	beq.n	80051e6 <RCCEx_PLLSAI2_Config+0x62>
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d009      	beq.n	80051f8 <RCCEx_PLLSAI2_Config+0x74>
 80051e4:	e020      	b.n	8005228 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051e6:	4b55      	ldr	r3, [pc, #340]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11d      	bne.n	800522e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f6:	e01a      	b.n	800522e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051f8:	4b50      	ldr	r3, [pc, #320]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e013      	b.n	8005232 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800520a:	4b4c      	ldr	r3, [pc, #304]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005216:	4b49      	ldr	r3, [pc, #292]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005226:	e006      	b.n	8005236 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	e004      	b.n	8005238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005236:	bf00      	nop
    }

    if(status == HAL_OK)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6819      	ldr	r1, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	430b      	orrs	r3, r1
 8005254:	4939      	ldr	r1, [pc, #228]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005256:	4313      	orrs	r3, r2
 8005258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d167      	bne.n	8005330 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005260:	4b36      	ldr	r3, [pc, #216]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a35      	ldr	r2, [pc, #212]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526c:	f7fe f9c6 	bl	80035fc <HAL_GetTick>
 8005270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005272:	e009      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005274:	f7fe f9c2 	bl	80035fc <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d902      	bls.n	8005288 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	73fb      	strb	r3, [r7, #15]
        break;
 8005286:	e005      	b.n	8005294 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ef      	bne.n	8005274 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d14a      	bne.n	8005330 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d111      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052a0:	4b26      	ldr	r3, [pc, #152]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	0211      	lsls	r1, r2, #8
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68d2      	ldr	r2, [r2, #12]
 80052b6:	0912      	lsrs	r2, r2, #4
 80052b8:	0452      	lsls	r2, r2, #17
 80052ba:	430a      	orrs	r2, r1
 80052bc:	491f      	ldr	r1, [pc, #124]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	614b      	str	r3, [r1, #20]
 80052c2:	e011      	b.n	80052e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6892      	ldr	r2, [r2, #8]
 80052d4:	0211      	lsls	r1, r2, #8
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6912      	ldr	r2, [r2, #16]
 80052da:	0852      	lsrs	r2, r2, #1
 80052dc:	3a01      	subs	r2, #1
 80052de:	0652      	lsls	r2, r2, #25
 80052e0:	430a      	orrs	r2, r1
 80052e2:	4916      	ldr	r1, [pc, #88]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f4:	f7fe f982 	bl	80035fc <HAL_GetTick>
 80052f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052fa:	e009      	b.n	8005310 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052fc:	f7fe f97e 	bl	80035fc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d902      	bls.n	8005310 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	73fb      	strb	r3, [r7, #15]
          break;
 800530e:	e005      	b.n	800531c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ef      	beq.n	80052fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	4904      	ldr	r1, [pc, #16]	; (800533c <RCCEx_PLLSAI2_Config+0x1b8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000

08005340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e095      	b.n	800547e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005362:	d009      	beq.n	8005378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	61da      	str	r2, [r3, #28]
 800536a:	e005      	b.n	8005378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fd fdec 	bl	8002f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b8:	d902      	bls.n	80053c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e002      	b.n	80053c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ce:	d007      	beq.n	80053e0 <HAL_SPI_Init+0xa0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	ea42 0103 	orr.w	r1, r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	f003 0204 	and.w	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800545c:	ea42 0103 	orr.w	r1, r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_SPI_Transmit+0x22>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e158      	b.n	800575a <HAL_SPI_Transmit+0x2d4>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b0:	f7fe f8a4 	bl	80035fc <HAL_GetTick>
 80054b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
 80054c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ca:	e13d      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Transmit+0x52>
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054dc:	e134      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2203      	movs	r2, #3
 80054e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	d10f      	bne.n	800554a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005548:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d007      	beq.n	8005568 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005570:	d94b      	bls.n	800560a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0xfa>
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d13e      	bne.n	80055fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	1c9a      	adds	r2, r3, #2
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055a4:	e02b      	b.n	80055fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d112      	bne.n	80055da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055d8:	e011      	b.n	80055fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055da:	f7fe f80f 	bl	80035fc <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d803      	bhi.n	80055f2 <HAL_SPI_Transmit+0x16c>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d102      	bne.n	80055f8 <HAL_SPI_Transmit+0x172>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055fc:	e0a4      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ce      	bne.n	80055a6 <HAL_SPI_Transmit+0x120>
 8005608:	e07c      	b.n	8005704 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_SPI_Transmit+0x192>
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d170      	bne.n	80056fa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d912      	bls.n	8005648 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	881a      	ldrh	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b02      	subs	r3, #2
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005646:	e058      	b.n	80056fa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800566e:	e044      	b.n	80056fa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	d12b      	bne.n	80056d6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d912      	bls.n	80056ae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b02      	subs	r3, #2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ac:	e025      	b.n	80056fa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d4:	e011      	b.n	80056fa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fd ff91 	bl	80035fc <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Transmit+0x268>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Transmit+0x26e>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f8:	e026      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1b5      	bne.n	8005670 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fce3 	bl	80060d4 <SPI_EndRxTxTransaction>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e000      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005758:	7ffb      	ldrb	r3, [r7, #31]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b088      	sub	sp, #32
 8005766:	af02      	add	r7, sp, #8
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d112      	bne.n	80057a6 <HAL_SPI_Receive+0x44>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10e      	bne.n	80057a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2204      	movs	r2, #4
 800578c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f910 	bl	80059c2 <HAL_SPI_TransmitReceive>
 80057a2:	4603      	mov	r3, r0
 80057a4:	e109      	b.n	80059ba <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SPI_Receive+0x52>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e102      	b.n	80059ba <HAL_SPI_Receive+0x258>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fd ff1e 	bl	80035fc <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d2:	e0e9      	b.n	80059a8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Receive+0x7e>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e4:	e0e0      	b.n	80059a8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005830:	d908      	bls.n	8005844 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	e007      	b.n	8005854 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585c:	d10f      	bne.n	800587e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800587c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d007      	beq.n	800589c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a4:	d867      	bhi.n	8005976 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058a6:	e030      	b.n	800590a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d117      	bne.n	80058e6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f103 020c 	add.w	r2, r3, #12
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058e4:	e011      	b.n	800590a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e6:	f7fd fe89 	bl	80035fc <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d803      	bhi.n	80058fe <HAL_SPI_Receive+0x19c>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d102      	bne.n	8005904 <HAL_SPI_Receive+0x1a2>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005908:	e04e      	b.n	80059a8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1c8      	bne.n	80058a8 <HAL_SPI_Receive+0x146>
 8005916:	e034      	b.n	8005982 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d115      	bne.n	8005952 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	b292      	uxth	r2, r2
 8005932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005950:	e011      	b.n	8005976 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005952:	f7fd fe53 	bl	80035fc <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d803      	bhi.n	800596a <HAL_SPI_Receive+0x208>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d102      	bne.n	8005970 <HAL_SPI_Receive+0x20e>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005974:	e018      	b.n	80059a8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1ca      	bne.n	8005918 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fb4c 	bl	8006024 <SPI_EndRxTransaction>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
 80059a4:	e000      	b.n	80059a8 <HAL_SPI_Receive+0x246>
  }

error :
 80059a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b08a      	sub	sp, #40	; 0x28
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059d0:	2301      	movs	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x26>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e1fb      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x41e>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059f0:	f7fd fe04 	bl	80035fc <HAL_GetTick>
 80059f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a04:	887b      	ldrh	r3, [r7, #2]
 8005a06:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a0c:	7efb      	ldrb	r3, [r7, #27]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d00e      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x6e>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a18:	d106      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x66>
 8005a22:	7efb      	ldrb	r3, [r7, #27]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d003      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a2e:	e1cd      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x80>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x80>
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a48:	e1c0      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d003      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2205      	movs	r2, #5
 8005a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	887a      	ldrh	r2, [r7, #2]
 8005a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	887a      	ldrh	r2, [r7, #2]
 8005a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	887a      	ldrh	r2, [r7, #2]
 8005a8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa0:	d802      	bhi.n	8005aa8 <HAL_SPI_TransmitReceive+0xe6>
 8005aa2:	8a3b      	ldrh	r3, [r7, #16]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d908      	bls.n	8005aba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e007      	b.n	8005aca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d007      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af0:	d97c      	bls.n	8005bec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x13e>
 8005afa:	8a7b      	ldrh	r3, [r7, #18]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d169      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b24:	e056      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d11b      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x1aa>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x1aa>
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d113      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d11c      	bne.n	8005bb4 <HAL_SPI_TransmitReceive+0x1f2>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	b292      	uxth	r2, r2
 8005b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	1c9a      	adds	r2, r3, #2
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bb4:	f7fd fd22 	bl	80035fc <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d807      	bhi.n	8005bd4 <HAL_SPI_TransmitReceive+0x212>
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d003      	beq.n	8005bd4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bd2:	e0fb      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1a3      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x164>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d19d      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x164>
 8005bea:	e0df      	b.n	8005dac <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x23a>
 8005bf4:	8a7b      	ldrh	r3, [r7, #18]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	f040 80cb 	bne.w	8005d92 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d912      	bls.n	8005c2c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	881a      	ldrh	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b02      	subs	r3, #2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c2a:	e0b2      	b.n	8005d92 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c52:	e09e      	b.n	8005d92 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d134      	bne.n	8005ccc <HAL_SPI_TransmitReceive+0x30a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02f      	beq.n	8005ccc <HAL_SPI_TransmitReceive+0x30a>
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d12c      	bne.n	8005ccc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d912      	bls.n	8005ca2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	1c9a      	adds	r2, r3, #2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b02      	subs	r3, #2
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca0:	e012      	b.n	8005cc8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d148      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x3aa>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d042      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d923      	bls.n	8005d3a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b02      	subs	r3, #2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d81f      	bhi.n	8005d68 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	e016      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f103 020c 	add.w	r2, r3, #12
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d6c:	f7fd fc46 	bl	80035fc <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d803      	bhi.n	8005d84 <HAL_SPI_TransmitReceive+0x3c2>
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d102      	bne.n	8005d8a <HAL_SPI_TransmitReceive+0x3c8>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d90:	e01c      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f47f af5b 	bne.w	8005c54 <HAL_SPI_TransmitReceive+0x292>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f47f af54 	bne.w	8005c54 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f98f 	bl	80060d4 <SPI_EndRxTxTransaction>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	661a      	str	r2, [r3, #96]	; 0x60
 8005dc8:	e000      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005dca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3728      	adds	r7, #40	; 0x28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005df8:	f7fd fc00 	bl	80035fc <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	4413      	add	r3, r2
 8005e06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e08:	f7fd fbf8 	bl	80035fc <HAL_GetTick>
 8005e0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e0e:	4b39      	ldr	r3, [pc, #228]	; (8005ef4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	015b      	lsls	r3, r3, #5
 8005e14:	0d1b      	lsrs	r3, r3, #20
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	fb02 f303 	mul.w	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e1e:	e054      	b.n	8005eca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d050      	beq.n	8005eca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e28:	f7fd fbe8 	bl	80035fc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d902      	bls.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d13d      	bne.n	8005eba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e56:	d111      	bne.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	d004      	beq.n	8005e6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6a:	d107      	bne.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e84:	d10f      	bne.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e017      	b.n	8005eea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d19b      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000014 	.word	0x20000014

08005ef8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f0a:	f7fd fb77 	bl	80035fc <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	4413      	add	r3, r2
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f1a:	f7fd fb6f 	bl	80035fc <HAL_GetTick>
 8005f1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f28:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	00da      	lsls	r2, r3, #3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	0d1b      	lsrs	r3, r3, #20
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f40:	e060      	b.n	8006004 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f48:	d107      	bne.n	8005f5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d050      	beq.n	8006004 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f62:	f7fd fb4b 	bl	80035fc <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d902      	bls.n	8005f78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d13d      	bne.n	8005ff4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f90:	d111      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9a:	d004      	beq.n	8005fa6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa4:	d107      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbe:	d10f      	bne.n	8005fe0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e010      	b.n	8006016 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	3b01      	subs	r3, #1
 8006002:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4013      	ands	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d196      	bne.n	8005f42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000014 	.word	0x20000014

08006024 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006038:	d111      	bne.n	800605e <SPI_EndRxTransaction+0x3a>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006042:	d004      	beq.n	800604e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604c:	d107      	bne.n	800605e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff febd 	bl	8005de8 <SPI_WaitFlagStateUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e023      	b.n	80060cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608c:	d11d      	bne.n	80060ca <SPI_EndRxTransaction+0xa6>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006096:	d004      	beq.n	80060a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d113      	bne.n	80060ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ff22 	bl	8005ef8 <SPI_WaitFifoStateUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e000      	b.n	80060cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ff03 	bl	8005ef8 <SPI_WaitFifoStateUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e027      	b.n	8006158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	2180      	movs	r1, #128	; 0x80
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fe68 	bl	8005de8 <SPI_WaitFlagStateUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e014      	b.n	8006158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fedc 	bl	8005ef8 <SPI_WaitFifoStateUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e000      	b.n	8006158 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e040      	b.n	80061f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc ff36 	bl	8002ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	; 0x24
 800618c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fcce 	bl	8006b40 <UART_SetConfig>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e022      	b.n	80061f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 ff7a 	bl	80070b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f801 	bl	80071f4 <UART_CheckIdleState>
 80061f2:	4603      	mov	r3, r0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006210:	2b20      	cmp	r3, #32
 8006212:	f040 80bf 	bne.w	8006394 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_UART_Receive+0x26>
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0b7      	b.n	8006396 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_UART_Receive+0x38>
 8006230:	2302      	movs	r3, #2
 8006232:	e0b0      	b.n	8006396 <HAL_UART_Receive+0x19a>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2222      	movs	r2, #34	; 0x22
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006250:	f7fd f9d4 	bl	80035fc <HAL_GetTick>
 8006254:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626e:	d10e      	bne.n	800628e <HAL_UART_Receive+0x92>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <HAL_UART_Receive+0x88>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800627e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006282:	e02d      	b.n	80062e0 <HAL_UART_Receive+0xe4>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	22ff      	movs	r2, #255	; 0xff
 8006288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800628c:	e028      	b.n	80062e0 <HAL_UART_Receive+0xe4>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <HAL_UART_Receive+0xb6>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <HAL_UART_Receive+0xac>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062a6:	e01b      	b.n	80062e0 <HAL_UART_Receive+0xe4>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	227f      	movs	r2, #127	; 0x7f
 80062ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062b0:	e016      	b.n	80062e0 <HAL_UART_Receive+0xe4>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ba:	d10d      	bne.n	80062d8 <HAL_UART_Receive+0xdc>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_UART_Receive+0xd2>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	227f      	movs	r2, #127	; 0x7f
 80062c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062cc:	e008      	b.n	80062e0 <HAL_UART_Receive+0xe4>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	223f      	movs	r2, #63	; 0x3f
 80062d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d6:	e003      	b.n	80062e0 <HAL_UART_Receive+0xe4>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f0:	d108      	bne.n	8006304 <HAL_UART_Receive+0x108>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e003      	b.n	800630c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006314:	e033      	b.n	800637e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	2120      	movs	r1, #32
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 ffb0 	bl	8007286 <UART_WaitOnFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e032      	b.n	8006396 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800633c:	b29a      	uxth	r2, r3
 800633e:	8a7b      	ldrh	r3, [r7, #18]
 8006340:	4013      	ands	r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	3302      	adds	r3, #2
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00d      	b.n	800636c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006356:	b29b      	uxth	r3, r3
 8006358:	b2da      	uxtb	r2, r3
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4013      	ands	r3, r2
 8006360:	b2da      	uxtb	r2, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1c5      	bne.n	8006316 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b08b      	sub	sp, #44	; 0x2c
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d156      	bne.n	8006464 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_UART_Transmit_IT+0x22>
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e04f      	b.n	8006466 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_UART_Transmit_IT+0x34>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e048      	b.n	8006466 <HAL_UART_Transmit_IT+0xc6>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	88fa      	ldrh	r2, [r7, #6]
 80063ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2221      	movs	r2, #33	; 0x21
 8006404:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	d107      	bne.n	8006420 <HAL_UART_Transmit_IT+0x80>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a16      	ldr	r2, [pc, #88]	; (8006474 <HAL_UART_Transmit_IT+0xd4>)
 800641c:	669a      	str	r2, [r3, #104]	; 0x68
 800641e:	e002      	b.n	8006426 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <HAL_UART_Transmit_IT+0xd8>)
 8006424:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	613b      	str	r3, [r7, #16]
   return(result);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	69f9      	ldr	r1, [r7, #28]
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	61bb      	str	r3, [r7, #24]
   return(result);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	372c      	adds	r7, #44	; 0x2c
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	0800774f 	.word	0x0800774f
 8006478:	08007697 	.word	0x08007697

0800647c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648e:	2b20      	cmp	r3, #32
 8006490:	d142      	bne.n	8006518 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Receive_IT+0x22>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e03b      	b.n	800651a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Receive_IT+0x34>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e034      	b.n	800651a <HAL_UART_Receive_IT+0x9e>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a18      	ldr	r2, [pc, #96]	; (8006524 <HAL_UART_Receive_IT+0xa8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01f      	beq.n	8006508 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	613b      	str	r3, [r7, #16]
   return(result);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	61bb      	str	r3, [r7, #24]
   return(result);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	461a      	mov	r2, r3
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 ff7e 	bl	8007410 <UART_Start_Receive_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	e000      	b.n	800651a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006518:	2302      	movs	r3, #2
  }
}
 800651a:	4618      	mov	r0, r3
 800651c:	3728      	adds	r7, #40	; 0x28
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40008000 	.word	0x40008000

08006528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b0ba      	sub	sp, #232	; 0xe8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800654e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006552:	f640 030f 	movw	r3, #2063	; 0x80f
 8006556:	4013      	ands	r3, r2
 8006558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800655c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d115      	bne.n	8006590 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00f      	beq.n	8006590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 82a6 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
      }
      return;
 800658e:	e2a0      	b.n	8006ad2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8117 	beq.w	80067c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065aa:	4b85      	ldr	r3, [pc, #532]	; (80067c0 <HAL_UART_IRQHandler+0x298>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 810a 	beq.w	80067c8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d011      	beq.n	80065e4 <HAL_UART_IRQHandler+0xbc>
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2201      	movs	r2, #1
 80065d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065da:	f043 0201 	orr.w	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d011      	beq.n	8006614 <HAL_UART_IRQHandler+0xec>
 80065f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2202      	movs	r2, #2
 8006602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660a:	f043 0204 	orr.w	r2, r3, #4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d011      	beq.n	8006644 <HAL_UART_IRQHandler+0x11c>
 8006620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2204      	movs	r2, #4
 8006632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663a:	f043 0202 	orr.w	r2, r3, #2
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d017      	beq.n	8006680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2208      	movs	r2, #8
 800666e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006676:	f043 0208 	orr.w	r2, r3, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006688:	2b00      	cmp	r3, #0
 800668a:	d012      	beq.n	80066b2 <HAL_UART_IRQHandler+0x18a>
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 820c 	beq.w	8006ad6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006706:	2b00      	cmp	r3, #0
 8006708:	d04f      	beq.n	80067aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 ff4a 	bl	80075a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d141      	bne.n	80067a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800674a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800674e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1d9      	bne.n	800671e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	2b00      	cmp	r3, #0
 8006770:	d013      	beq.n	800679a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <HAL_UART_IRQHandler+0x29c>)
 8006778:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	4618      	mov	r0, r3
 8006780:	f7fd f8bb 	bl	80038fa <HAL_DMA_Abort_IT>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d017      	beq.n	80067ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	e00f      	b.n	80067ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9ba 	bl	8006b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	e00b      	b.n	80067ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9b6 	bl	8006b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	e007      	b.n	80067ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9b2 	bl	8006b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067b8:	e18d      	b.n	8006ad6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ba:	bf00      	nop
    return;
 80067bc:	e18b      	b.n	8006ad6 <HAL_UART_IRQHandler+0x5ae>
 80067be:	bf00      	nop
 80067c0:	04000120 	.word	0x04000120
 80067c4:	0800766b 	.word	0x0800766b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	f040 8146 	bne.w	8006a5e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 813f 	beq.w	8006a5e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8138 	beq.w	8006a5e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2210      	movs	r2, #16
 80067f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	f040 80b4 	bne.w	800696e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 815f 	beq.w	8006ada <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006826:	429a      	cmp	r2, r3
 8006828:	f080 8157 	bcs.w	8006ada <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 8085 	bne.w	8006952 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800685c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006876:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800687e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800688a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1da      	bne.n	8006848 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e1      	bne.n	8006892 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e3      	bne.n	80068ce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006934:	65bb      	str	r3, [r7, #88]	; 0x58
 8006936:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800693a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e4      	bne.n	8006912 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694c:	4618      	mov	r0, r3
 800694e:	f7fc ff96 	bl	800387e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800695e:	b29b      	uxth	r3, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8de 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800696c:	e0b5      	b.n	8006ada <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800697a:	b29b      	uxth	r3, r3
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a7 	beq.w	8006ade <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80a2 	beq.w	8006ade <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
 80069be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e4      	bne.n	800699a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	623b      	str	r3, [r7, #32]
   return(result);
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069f4:	633a      	str	r2, [r7, #48]	; 0x30
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e3      	bne.n	80069d0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e4      	bne.n	8006a1a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f866 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a5c:	e03f      	b.n	8006ade <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00e      	beq.n	8006a88 <HAL_UART_IRQHandler+0x560>
 8006a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f84e 	bl	8007b22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a86:	e02d      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01c      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
    }
    return;
 8006ab0:	e017      	b.n	8006ae2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d012      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
 8006abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fe9f 	bl	800780e <UART_EndTransmit_IT>
    return;
 8006ad0:	e008      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ad2:	bf00      	nop
 8006ad4:	e006      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ad6:	bf00      	nop
 8006ad8:	e004      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ae2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ae4:	37e8      	adds	r7, #232	; 0xe8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b44:	b08a      	sub	sp, #40	; 0x28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4ba4      	ldr	r3, [pc, #656]	; (8006e00 <UART_SetConfig+0x2c0>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	6812      	ldr	r2, [r2, #0]
 8006b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a99      	ldr	r2, [pc, #612]	; (8006e04 <UART_SetConfig+0x2c4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a90      	ldr	r2, [pc, #576]	; (8006e08 <UART_SetConfig+0x2c8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d126      	bne.n	8006c18 <UART_SetConfig+0xd8>
 8006bca:	4b90      	ldr	r3, [pc, #576]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d81b      	bhi.n	8006c10 <UART_SetConfig+0xd0>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <UART_SetConfig+0xa0>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006bf1 	.word	0x08006bf1
 8006be4:	08006c01 	.word	0x08006c01
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c09 	.word	0x08006c09
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf6:	e116      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e112      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c06:	e10e      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0e:	e10a      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c16:	e106      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7c      	ldr	r2, [pc, #496]	; (8006e10 <UART_SetConfig+0x2d0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d138      	bne.n	8006c94 <UART_SetConfig+0x154>
 8006c22:	4b7a      	ldr	r3, [pc, #488]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	f003 030c 	and.w	r3, r3, #12
 8006c2c:	2b0c      	cmp	r3, #12
 8006c2e:	d82d      	bhi.n	8006c8c <UART_SetConfig+0x14c>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0xf8>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c6d 	.word	0x08006c6d
 8006c3c:	08006c8d 	.word	0x08006c8d
 8006c40:	08006c8d 	.word	0x08006c8d
 8006c44:	08006c8d 	.word	0x08006c8d
 8006c48:	08006c7d 	.word	0x08006c7d
 8006c4c:	08006c8d 	.word	0x08006c8d
 8006c50:	08006c8d 	.word	0x08006c8d
 8006c54:	08006c8d 	.word	0x08006c8d
 8006c58:	08006c75 	.word	0x08006c75
 8006c5c:	08006c8d 	.word	0x08006c8d
 8006c60:	08006c8d 	.word	0x08006c8d
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006c85 	.word	0x08006c85
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e0d8      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c74:	2302      	movs	r3, #2
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e0d4      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e0d0      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c84:	2308      	movs	r3, #8
 8006c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8a:	e0cc      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c92:	e0c8      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a5e      	ldr	r2, [pc, #376]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d125      	bne.n	8006cea <UART_SetConfig+0x1aa>
 8006c9e:	4b5b      	ldr	r3, [pc, #364]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ca8:	2b30      	cmp	r3, #48	; 0x30
 8006caa:	d016      	beq.n	8006cda <UART_SetConfig+0x19a>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d818      	bhi.n	8006ce2 <UART_SetConfig+0x1a2>
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d00a      	beq.n	8006cca <UART_SetConfig+0x18a>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d814      	bhi.n	8006ce2 <UART_SetConfig+0x1a2>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <UART_SetConfig+0x182>
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d008      	beq.n	8006cd2 <UART_SetConfig+0x192>
 8006cc0:	e00f      	b.n	8006ce2 <UART_SetConfig+0x1a2>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc8:	e0ad      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd0:	e0a9      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006cd2:	2304      	movs	r3, #4
 8006cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd8:	e0a5      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006cda:	2308      	movs	r3, #8
 8006cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce0:	e0a1      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce8:	e09d      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a4a      	ldr	r2, [pc, #296]	; (8006e18 <UART_SetConfig+0x2d8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d125      	bne.n	8006d40 <UART_SetConfig+0x200>
 8006cf4:	4b45      	ldr	r3, [pc, #276]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8006d00:	d016      	beq.n	8006d30 <UART_SetConfig+0x1f0>
 8006d02:	2bc0      	cmp	r3, #192	; 0xc0
 8006d04:	d818      	bhi.n	8006d38 <UART_SetConfig+0x1f8>
 8006d06:	2b80      	cmp	r3, #128	; 0x80
 8006d08:	d00a      	beq.n	8006d20 <UART_SetConfig+0x1e0>
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d814      	bhi.n	8006d38 <UART_SetConfig+0x1f8>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <UART_SetConfig+0x1d8>
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d008      	beq.n	8006d28 <UART_SetConfig+0x1e8>
 8006d16:	e00f      	b.n	8006d38 <UART_SetConfig+0x1f8>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e082      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d20:	2302      	movs	r3, #2
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	e07e      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2e:	e07a      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e076      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e072      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a35      	ldr	r2, [pc, #212]	; (8006e1c <UART_SetConfig+0x2dc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d12a      	bne.n	8006da0 <UART_SetConfig+0x260>
 8006d4a:	4b30      	ldr	r3, [pc, #192]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d58:	d01a      	beq.n	8006d90 <UART_SetConfig+0x250>
 8006d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5e:	d81b      	bhi.n	8006d98 <UART_SetConfig+0x258>
 8006d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d64:	d00c      	beq.n	8006d80 <UART_SetConfig+0x240>
 8006d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6a:	d815      	bhi.n	8006d98 <UART_SetConfig+0x258>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <UART_SetConfig+0x238>
 8006d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d74:	d008      	beq.n	8006d88 <UART_SetConfig+0x248>
 8006d76:	e00f      	b.n	8006d98 <UART_SetConfig+0x258>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7e:	e052      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d80:	2302      	movs	r3, #2
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d86:	e04e      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8e:	e04a      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d90:	2308      	movs	r3, #8
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d96:	e046      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9e:	e042      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <UART_SetConfig+0x2c4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d13a      	bne.n	8006e20 <UART_SetConfig+0x2e0>
 8006daa:	4b18      	ldr	r3, [pc, #96]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006db8:	d01a      	beq.n	8006df0 <UART_SetConfig+0x2b0>
 8006dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dbe:	d81b      	bhi.n	8006df8 <UART_SetConfig+0x2b8>
 8006dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc4:	d00c      	beq.n	8006de0 <UART_SetConfig+0x2a0>
 8006dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dca:	d815      	bhi.n	8006df8 <UART_SetConfig+0x2b8>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <UART_SetConfig+0x298>
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd4:	d008      	beq.n	8006de8 <UART_SetConfig+0x2a8>
 8006dd6:	e00f      	b.n	8006df8 <UART_SetConfig+0x2b8>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e022      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006de0:	2302      	movs	r3, #2
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e01e      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dee:	e01a      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df6:	e016      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfe:	e012      	b.n	8006e26 <UART_SetConfig+0x2e6>
 8006e00:	efff69f3 	.word	0xefff69f3
 8006e04:	40008000 	.word	0x40008000
 8006e08:	40013800 	.word	0x40013800
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	40004400 	.word	0x40004400
 8006e14:	40004800 	.word	0x40004800
 8006e18:	40004c00 	.word	0x40004c00
 8006e1c:	40005000 	.word	0x40005000
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a9f      	ldr	r2, [pc, #636]	; (80070a8 <UART_SetConfig+0x568>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d17a      	bne.n	8006f26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d824      	bhi.n	8006e82 <UART_SetConfig+0x342>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <UART_SetConfig+0x300>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e83 	.word	0x08006e83
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e83 	.word	0x08006e83
 8006e50:	08006e73 	.word	0x08006e73
 8006e54:	08006e83 	.word	0x08006e83
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e83 	.word	0x08006e83
 8006e60:	08006e7b 	.word	0x08006e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fd fd24 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8006e68:	61f8      	str	r0, [r7, #28]
        break;
 8006e6a:	e010      	b.n	8006e8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e6c:	4b8f      	ldr	r3, [pc, #572]	; (80070ac <UART_SetConfig+0x56c>)
 8006e6e:	61fb      	str	r3, [r7, #28]
        break;
 8006e70:	e00d      	b.n	8006e8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e72:	f7fd fc85 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8006e76:	61f8      	str	r0, [r7, #28]
        break;
 8006e78:	e009      	b.n	8006e8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7e:	61fb      	str	r3, [r7, #28]
        break;
 8006e80:	e005      	b.n	8006e8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80fb 	beq.w	800708c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d305      	bcc.n	8006eb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d903      	bls.n	8006eba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006eb8:	e0e8      	b.n	800708c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	461c      	mov	r4, r3
 8006ec0:	4615      	mov	r5, r2
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	022b      	lsls	r3, r5, #8
 8006ecc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ed0:	0222      	lsls	r2, r4, #8
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	6849      	ldr	r1, [r1, #4]
 8006ed6:	0849      	lsrs	r1, r1, #1
 8006ed8:	2000      	movs	r0, #0
 8006eda:	4688      	mov	r8, r1
 8006edc:	4681      	mov	r9, r0
 8006ede:	eb12 0a08 	adds.w	sl, r2, r8
 8006ee2:	eb43 0b09 	adc.w	fp, r3, r9
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	4650      	mov	r0, sl
 8006ef6:	4659      	mov	r1, fp
 8006ef8:	f7f9 fec6 	bl	8000c88 <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4613      	mov	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0a:	d308      	bcc.n	8006f1e <UART_SetConfig+0x3de>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f12:	d204      	bcs.n	8006f1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	e0b6      	b.n	800708c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f24:	e0b2      	b.n	800708c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2e:	d15e      	bne.n	8006fee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d828      	bhi.n	8006f8a <UART_SetConfig+0x44a>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <UART_SetConfig+0x400>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	08006f8b 	.word	0x08006f8b
 8006f50:	08006f7b 	.word	0x08006f7b
 8006f54:	08006f8b 	.word	0x08006f8b
 8006f58:	08006f8b 	.word	0x08006f8b
 8006f5c:	08006f8b 	.word	0x08006f8b
 8006f60:	08006f83 	.word	0x08006f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f64:	f7fd fca4 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8006f68:	61f8      	str	r0, [r7, #28]
        break;
 8006f6a:	e014      	b.n	8006f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6c:	f7fd fcb6 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 8006f70:	61f8      	str	r0, [r7, #28]
        break;
 8006f72:	e010      	b.n	8006f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f74:	4b4d      	ldr	r3, [pc, #308]	; (80070ac <UART_SetConfig+0x56c>)
 8006f76:	61fb      	str	r3, [r7, #28]
        break;
 8006f78:	e00d      	b.n	8006f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fd fc01 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8006f7e:	61f8      	str	r0, [r7, #28]
        break;
 8006f80:	e009      	b.n	8006f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f86:	61fb      	str	r3, [r7, #28]
        break;
 8006f88:	e005      	b.n	8006f96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d077      	beq.n	800708c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	005a      	lsls	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	441a      	add	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b0f      	cmp	r3, #15
 8006fb6:	d916      	bls.n	8006fe6 <UART_SetConfig+0x4a6>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d212      	bcs.n	8006fe6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f023 030f 	bic.w	r3, r3, #15
 8006fc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	8afb      	ldrh	r3, [r7, #22]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	8afa      	ldrh	r2, [r7, #22]
 8006fe2:	60da      	str	r2, [r3, #12]
 8006fe4:	e052      	b.n	800708c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fec:	e04e      	b.n	800708c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d827      	bhi.n	8007046 <UART_SetConfig+0x506>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x4bc>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fd fc46 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8007024:	61f8      	str	r0, [r7, #28]
        break;
 8007026:	e014      	b.n	8007052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fd fc58 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 800702c:	61f8      	str	r0, [r7, #28]
        break;
 800702e:	e010      	b.n	8007052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <UART_SetConfig+0x56c>)
 8007032:	61fb      	str	r3, [r7, #28]
        break;
 8007034:	e00d      	b.n	8007052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fd fba3 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800703a:	61f8      	str	r0, [r7, #28]
        break;
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	61fb      	str	r3, [r7, #28]
        break;
 8007044:	e005      	b.n	8007052 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007050:	bf00      	nop
    }

    if (pclk != 0U)
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d019      	beq.n	800708c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	085a      	lsrs	r2, r3, #1
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	441a      	add	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b0f      	cmp	r3, #15
 8007070:	d909      	bls.n	8007086 <UART_SetConfig+0x546>
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d205      	bcs.n	8007086 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60da      	str	r2, [r3, #12]
 8007084:	e002      	b.n	800708c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007098:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800709c:	4618      	mov	r0, r3
 800709e:	3728      	adds	r7, #40	; 0x28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a6:	bf00      	nop
 80070a8:	40008000 	.word	0x40008000
 80070ac:	00f42400 	.word	0x00f42400

080070b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	f003 0310 	and.w	r3, r3, #16
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01a      	beq.n	80071c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ae:	d10a      	bne.n	80071c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]
  }
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007204:	f7fc f9fa 	bl	80035fc <HAL_GetTick>
 8007208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b08      	cmp	r3, #8
 8007216:	d10e      	bne.n	8007236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f82d 	bl	8007286 <UART_WaitOnFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e023      	b.n	800727e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b04      	cmp	r3, #4
 8007242:	d10e      	bne.n	8007262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f817 	bl	8007286 <UART_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e00d      	b.n	800727e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b09c      	sub	sp, #112	; 0x70
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007296:	e0a5      	b.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	f000 80a1 	beq.w	80073e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a2:	f7fc f9ab 	bl	80035fc <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80072b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d13e      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072cc:	667b      	str	r3, [r7, #100]	; 0x64
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e6      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3308      	adds	r3, #8
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	663b      	str	r3, [r7, #96]	; 0x60
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800730a:	64ba      	str	r2, [r7, #72]	; 0x48
 800730c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e5      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e067      	b.n	8007406 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d04f      	beq.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007352:	d147      	bne.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800735c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3308      	adds	r3, #8
 8007396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	613b      	str	r3, [r7, #16]
   return(result);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073b0:	623a      	str	r2, [r7, #32]
 80073b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e5      	bne.n	8007390 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e010      	b.n	8007406 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4013      	ands	r3, r2
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	bf0c      	ite	eq
 80073f4:	2301      	moveq	r3, #1
 80073f6:	2300      	movne	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	429a      	cmp	r2, r3
 8007400:	f43f af4a 	beq.w	8007298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3770      	adds	r7, #112	; 0x70
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007410:	b480      	push	{r7}
 8007412:	b097      	sub	sp, #92	; 0x5c
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007442:	d10e      	bne.n	8007462 <UART_Start_Receive_IT+0x52>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d105      	bne.n	8007458 <UART_Start_Receive_IT+0x48>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007456:	e02d      	b.n	80074b4 <UART_Start_Receive_IT+0xa4>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	22ff      	movs	r2, #255	; 0xff
 800745c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007460:	e028      	b.n	80074b4 <UART_Start_Receive_IT+0xa4>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10d      	bne.n	8007486 <UART_Start_Receive_IT+0x76>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <UART_Start_Receive_IT+0x6c>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	22ff      	movs	r2, #255	; 0xff
 8007476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800747a:	e01b      	b.n	80074b4 <UART_Start_Receive_IT+0xa4>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	227f      	movs	r2, #127	; 0x7f
 8007480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007484:	e016      	b.n	80074b4 <UART_Start_Receive_IT+0xa4>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748e:	d10d      	bne.n	80074ac <UART_Start_Receive_IT+0x9c>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <UART_Start_Receive_IT+0x92>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	227f      	movs	r2, #127	; 0x7f
 800749c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a0:	e008      	b.n	80074b4 <UART_Start_Receive_IT+0xa4>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	223f      	movs	r2, #63	; 0x3f
 80074a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074aa:	e003      	b.n	80074b4 <UART_Start_Receive_IT+0xa4>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2222      	movs	r2, #34	; 0x22
 80074c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	657b      	str	r3, [r7, #84]	; 0x54
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80074e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fe:	d107      	bne.n	8007510 <UART_Start_Receive_IT+0x100>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4a24      	ldr	r2, [pc, #144]	; (800759c <UART_Start_Receive_IT+0x18c>)
 800750c:	665a      	str	r2, [r3, #100]	; 0x64
 800750e:	e002      	b.n	8007516 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a23      	ldr	r2, [pc, #140]	; (80075a0 <UART_Start_Receive_IT+0x190>)
 8007514:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d019      	beq.n	800755a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
 8007546:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800754a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_Start_Receive_IT+0x116>
 8007558:	e018      	b.n	800758c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	613b      	str	r3, [r7, #16]
   return(result);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f043 0320 	orr.w	r3, r3, #32
 800756e:	653b      	str	r3, [r7, #80]	; 0x50
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69f9      	ldr	r1, [r7, #28]
 800757e:	6a3a      	ldr	r2, [r7, #32]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	61bb      	str	r3, [r7, #24]
   return(result);
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e6      	bne.n	800755a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	375c      	adds	r7, #92	; 0x5c
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	080079c3 	.word	0x080079c3
 80075a0:	08007863 	.word	0x08007863

080075a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b095      	sub	sp, #84	; 0x54
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
 80075cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e6      	bne.n	80075ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e5      	bne.n	80075de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007616:	2b01      	cmp	r3, #1
 8007618:	d118      	bne.n	800764c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	60bb      	str	r3, [r7, #8]
   return(result);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f023 0310 	bic.w	r3, r3, #16
 800762e:	647b      	str	r3, [r7, #68]	; 0x44
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6979      	ldr	r1, [r7, #20]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	613b      	str	r3, [r7, #16]
   return(result);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e6      	bne.n	800761a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800765e:	bf00      	nop
 8007660:	3754      	adds	r7, #84	; 0x54
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff fa43 	bl	8006b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768e:	bf00      	nop
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007696:	b480      	push	{r7}
 8007698:	b08f      	sub	sp, #60	; 0x3c
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a2:	2b21      	cmp	r3, #33	; 0x21
 80076a4:	d14d      	bne.n	8007742 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d132      	bne.n	8007718 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e6      	bne.n	80076b2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	633b      	str	r3, [r7, #48]	; 0x30
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6979      	ldr	r1, [r7, #20]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	613b      	str	r3, [r7, #16]
   return(result);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e6      	bne.n	80076e4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007716:	e014      	b.n	8007742 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	b292      	uxth	r2, r2
 8007724:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007742:	bf00      	nop
 8007744:	373c      	adds	r7, #60	; 0x3c
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800774e:	b480      	push	{r7}
 8007750:	b091      	sub	sp, #68	; 0x44
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800775a:	2b21      	cmp	r3, #33	; 0x21
 800775c:	d151      	bne.n	8007802 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d132      	bne.n	80077d0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	623b      	str	r3, [r7, #32]
   return(result);
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800777e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	633b      	str	r3, [r7, #48]	; 0x30
 800778a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800778e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	69b9      	ldr	r1, [r7, #24]
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	617b      	str	r3, [r7, #20]
   return(result);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077ce:	e018      	b.n	8007802 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	881a      	ldrh	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e2:	b292      	uxth	r2, r2
 80077e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	1c9a      	adds	r2, r3, #2
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007802:	bf00      	nop
 8007804:	3744      	adds	r7, #68	; 0x44
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b088      	sub	sp, #32
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60bb      	str	r3, [r7, #8]
   return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff f949 	bl	8006aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800785a:	bf00      	nop
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b096      	sub	sp, #88	; 0x58
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007870:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007878:	2b22      	cmp	r3, #34	; 0x22
 800787a:	f040 8094 	bne.w	80079a6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007884:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007888:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800788c:	b2d9      	uxtb	r1, r3
 800788e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007892:	b2da      	uxtb	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007898:	400a      	ands	r2, r1
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d179      	bne.n	80079ba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078da:	653b      	str	r3, [r7, #80]	; 0x50
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e4:	647b      	str	r3, [r7, #68]	; 0x44
 80078e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e6      	bne.n	80078c6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	623b      	str	r3, [r7, #32]
   return(result);
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	f023 0301 	bic.w	r3, r3, #1
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007918:	633a      	str	r2, [r7, #48]	; 0x30
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800791e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e5      	bne.n	80078f8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793c:	2b01      	cmp	r3, #1
 800793e:	d12e      	bne.n	800799e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	60fb      	str	r3, [r7, #12]
   return(result);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0310 	bic.w	r3, r3, #16
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b10      	cmp	r3, #16
 8007984:	d103      	bne.n	800798e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2210      	movs	r2, #16
 800798c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff f8c6 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800799c:	e00d      	b.n	80079ba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff f8ae 	bl	8006b00 <HAL_UART_RxCpltCallback>
}
 80079a4:	e009      	b.n	80079ba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	8b1b      	ldrh	r3, [r3, #24]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0208 	orr.w	r2, r2, #8
 80079b6:	b292      	uxth	r2, r2
 80079b8:	831a      	strh	r2, [r3, #24]
}
 80079ba:	bf00      	nop
 80079bc:	3758      	adds	r7, #88	; 0x58
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b096      	sub	sp, #88	; 0x58
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d8:	2b22      	cmp	r3, #34	; 0x22
 80079da:	f040 8094 	bne.w	8007b06 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ec:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80079ee:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80079f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079f6:	4013      	ands	r3, r2
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	1c9a      	adds	r2, r3, #2
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d179      	bne.n	8007b1a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a44:	643b      	str	r3, [r7, #64]	; 0x40
 8007a46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f023 0301 	bic.w	r3, r3, #1
 8007a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d12e      	bne.n	8007afe <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f023 0310 	bic.w	r3, r3, #16
 8007aba:	647b      	str	r3, [r7, #68]	; 0x44
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6979      	ldr	r1, [r7, #20]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d103      	bne.n	8007aee <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2210      	movs	r2, #16
 8007aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff f816 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007afc:	e00d      	b.n	8007b1a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fe fffe 	bl	8006b00 <HAL_UART_RxCpltCallback>
}
 8007b04:	e009      	b.n	8007b1a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	8b1b      	ldrh	r3, [r3, #24]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	b292      	uxth	r2, r2
 8007b18:	831a      	strh	r2, [r3, #24]
}
 8007b1a:	bf00      	nop
 8007b1c:	3758      	adds	r7, #88	; 0x58
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <__cvt>:
 8007b36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3a:	ec55 4b10 	vmov	r4, r5, d0
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	460e      	mov	r6, r1
 8007b42:	4619      	mov	r1, r3
 8007b44:	462b      	mov	r3, r5
 8007b46:	bfbb      	ittet	lt
 8007b48:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b4c:	461d      	movlt	r5, r3
 8007b4e:	2300      	movge	r3, #0
 8007b50:	232d      	movlt	r3, #45	; 0x2d
 8007b52:	700b      	strb	r3, [r1, #0]
 8007b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b56:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b5a:	4691      	mov	r9, r2
 8007b5c:	f023 0820 	bic.w	r8, r3, #32
 8007b60:	bfbc      	itt	lt
 8007b62:	4622      	movlt	r2, r4
 8007b64:	4614      	movlt	r4, r2
 8007b66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b6a:	d005      	beq.n	8007b78 <__cvt+0x42>
 8007b6c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b70:	d100      	bne.n	8007b74 <__cvt+0x3e>
 8007b72:	3601      	adds	r6, #1
 8007b74:	2102      	movs	r1, #2
 8007b76:	e000      	b.n	8007b7a <__cvt+0x44>
 8007b78:	2103      	movs	r1, #3
 8007b7a:	ab03      	add	r3, sp, #12
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	ab02      	add	r3, sp, #8
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	ec45 4b10 	vmov	d0, r4, r5
 8007b86:	4653      	mov	r3, sl
 8007b88:	4632      	mov	r2, r6
 8007b8a:	f001 f9d9 	bl	8008f40 <_dtoa_r>
 8007b8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b92:	4607      	mov	r7, r0
 8007b94:	d102      	bne.n	8007b9c <__cvt+0x66>
 8007b96:	f019 0f01 	tst.w	r9, #1
 8007b9a:	d022      	beq.n	8007be2 <__cvt+0xac>
 8007b9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ba0:	eb07 0906 	add.w	r9, r7, r6
 8007ba4:	d110      	bne.n	8007bc8 <__cvt+0x92>
 8007ba6:	783b      	ldrb	r3, [r7, #0]
 8007ba8:	2b30      	cmp	r3, #48	; 0x30
 8007baa:	d10a      	bne.n	8007bc2 <__cvt+0x8c>
 8007bac:	2200      	movs	r2, #0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bb8:	b918      	cbnz	r0, 8007bc2 <__cvt+0x8c>
 8007bba:	f1c6 0601 	rsb	r6, r6, #1
 8007bbe:	f8ca 6000 	str.w	r6, [sl]
 8007bc2:	f8da 3000 	ldr.w	r3, [sl]
 8007bc6:	4499      	add	r9, r3
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd4:	b108      	cbz	r0, 8007bda <__cvt+0xa4>
 8007bd6:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bda:	2230      	movs	r2, #48	; 0x30
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	454b      	cmp	r3, r9
 8007be0:	d307      	bcc.n	8007bf2 <__cvt+0xbc>
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007be6:	1bdb      	subs	r3, r3, r7
 8007be8:	4638      	mov	r0, r7
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	b004      	add	sp, #16
 8007bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf2:	1c59      	adds	r1, r3, #1
 8007bf4:	9103      	str	r1, [sp, #12]
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e7f0      	b.n	8007bdc <__cvt+0xa6>

08007bfa <__exponent>:
 8007bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	bfb8      	it	lt
 8007c02:	4249      	neglt	r1, r1
 8007c04:	f803 2b02 	strb.w	r2, [r3], #2
 8007c08:	bfb4      	ite	lt
 8007c0a:	222d      	movlt	r2, #45	; 0x2d
 8007c0c:	222b      	movge	r2, #43	; 0x2b
 8007c0e:	2909      	cmp	r1, #9
 8007c10:	7042      	strb	r2, [r0, #1]
 8007c12:	dd2a      	ble.n	8007c6a <__exponent+0x70>
 8007c14:	f10d 0207 	add.w	r2, sp, #7
 8007c18:	4617      	mov	r7, r2
 8007c1a:	260a      	movs	r6, #10
 8007c1c:	4694      	mov	ip, r2
 8007c1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c22:	fb06 1415 	mls	r4, r6, r5, r1
 8007c26:	3430      	adds	r4, #48	; 0x30
 8007c28:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	2c63      	cmp	r4, #99	; 0x63
 8007c30:	f102 32ff 	add.w	r2, r2, #4294967295
 8007c34:	4629      	mov	r1, r5
 8007c36:	dcf1      	bgt.n	8007c1c <__exponent+0x22>
 8007c38:	3130      	adds	r1, #48	; 0x30
 8007c3a:	f1ac 0402 	sub.w	r4, ip, #2
 8007c3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c42:	1c41      	adds	r1, r0, #1
 8007c44:	4622      	mov	r2, r4
 8007c46:	42ba      	cmp	r2, r7
 8007c48:	d30a      	bcc.n	8007c60 <__exponent+0x66>
 8007c4a:	f10d 0209 	add.w	r2, sp, #9
 8007c4e:	eba2 020c 	sub.w	r2, r2, ip
 8007c52:	42bc      	cmp	r4, r7
 8007c54:	bf88      	it	hi
 8007c56:	2200      	movhi	r2, #0
 8007c58:	4413      	add	r3, r2
 8007c5a:	1a18      	subs	r0, r3, r0
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c60:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c64:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c68:	e7ed      	b.n	8007c46 <__exponent+0x4c>
 8007c6a:	2330      	movs	r3, #48	; 0x30
 8007c6c:	3130      	adds	r1, #48	; 0x30
 8007c6e:	7083      	strb	r3, [r0, #2]
 8007c70:	70c1      	strb	r1, [r0, #3]
 8007c72:	1d03      	adds	r3, r0, #4
 8007c74:	e7f1      	b.n	8007c5a <__exponent+0x60>
	...

08007c78 <_printf_float>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	ed2d 8b02 	vpush	{d8}
 8007c80:	b08d      	sub	sp, #52	; 0x34
 8007c82:	460c      	mov	r4, r1
 8007c84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c88:	4616      	mov	r6, r2
 8007c8a:	461f      	mov	r7, r3
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	f001 f84f 	bl	8008d30 <_localeconv_r>
 8007c92:	f8d0 a000 	ldr.w	sl, [r0]
 8007c96:	4650      	mov	r0, sl
 8007c98:	f7f8 faea 	bl	8000270 <strlen>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cac:	3307      	adds	r3, #7
 8007cae:	f023 0307 	bic.w	r3, r3, #7
 8007cb2:	f103 0208 	add.w	r2, r3, #8
 8007cb6:	f8c8 2000 	str.w	r2, [r8]
 8007cba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cc8:	ee08 0a10 	vmov	s16, r0
 8007ccc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cd4:	4b9e      	ldr	r3, [pc, #632]	; (8007f50 <_printf_float+0x2d8>)
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	f7f8 ff27 	bl	8000b2c <__aeabi_dcmpun>
 8007cde:	bb88      	cbnz	r0, 8007d44 <_printf_float+0xcc>
 8007ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce4:	4b9a      	ldr	r3, [pc, #616]	; (8007f50 <_printf_float+0x2d8>)
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	f7f8 ff01 	bl	8000af0 <__aeabi_dcmple>
 8007cee:	bb48      	cbnz	r0, 8007d44 <_printf_float+0xcc>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7f8 fef0 	bl	8000adc <__aeabi_dcmplt>
 8007cfc:	b110      	cbz	r0, 8007d04 <_printf_float+0x8c>
 8007cfe:	232d      	movs	r3, #45	; 0x2d
 8007d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d04:	4a93      	ldr	r2, [pc, #588]	; (8007f54 <_printf_float+0x2dc>)
 8007d06:	4b94      	ldr	r3, [pc, #592]	; (8007f58 <_printf_float+0x2e0>)
 8007d08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d0c:	bf94      	ite	ls
 8007d0e:	4690      	movls	r8, r2
 8007d10:	4698      	movhi	r8, r3
 8007d12:	2303      	movs	r3, #3
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	9b05      	ldr	r3, [sp, #20]
 8007d18:	f023 0304 	bic.w	r3, r3, #4
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	f04f 0900 	mov.w	r9, #0
 8007d22:	9700      	str	r7, [sp, #0]
 8007d24:	4633      	mov	r3, r6
 8007d26:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f9da 	bl	80080e4 <_printf_common>
 8007d30:	3001      	adds	r0, #1
 8007d32:	f040 8090 	bne.w	8007e56 <_printf_float+0x1de>
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	b00d      	add	sp, #52	; 0x34
 8007d3c:	ecbd 8b02 	vpop	{d8}
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	4640      	mov	r0, r8
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	f7f8 feee 	bl	8000b2c <__aeabi_dcmpun>
 8007d50:	b140      	cbz	r0, 8007d64 <_printf_float+0xec>
 8007d52:	464b      	mov	r3, r9
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfbc      	itt	lt
 8007d58:	232d      	movlt	r3, #45	; 0x2d
 8007d5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d5e:	4a7f      	ldr	r2, [pc, #508]	; (8007f5c <_printf_float+0x2e4>)
 8007d60:	4b7f      	ldr	r3, [pc, #508]	; (8007f60 <_printf_float+0x2e8>)
 8007d62:	e7d1      	b.n	8007d08 <_printf_float+0x90>
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d6a:	9206      	str	r2, [sp, #24]
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	d13f      	bne.n	8007df0 <_printf_float+0x178>
 8007d70:	2306      	movs	r3, #6
 8007d72:	6063      	str	r3, [r4, #4]
 8007d74:	9b05      	ldr	r3, [sp, #20]
 8007d76:	6861      	ldr	r1, [r4, #4]
 8007d78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	ab0a      	add	r3, sp, #40	; 0x28
 8007d82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d86:	ab09      	add	r3, sp, #36	; 0x24
 8007d88:	ec49 8b10 	vmov	d0, r8, r9
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	6022      	str	r2, [r4, #0]
 8007d90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d94:	4628      	mov	r0, r5
 8007d96:	f7ff fece 	bl	8007b36 <__cvt>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d9e:	2b47      	cmp	r3, #71	; 0x47
 8007da0:	4680      	mov	r8, r0
 8007da2:	d108      	bne.n	8007db6 <_printf_float+0x13e>
 8007da4:	1cc8      	adds	r0, r1, #3
 8007da6:	db02      	blt.n	8007dae <_printf_float+0x136>
 8007da8:	6863      	ldr	r3, [r4, #4]
 8007daa:	4299      	cmp	r1, r3
 8007dac:	dd41      	ble.n	8007e32 <_printf_float+0x1ba>
 8007dae:	f1ab 0302 	sub.w	r3, fp, #2
 8007db2:	fa5f fb83 	uxtb.w	fp, r3
 8007db6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dba:	d820      	bhi.n	8007dfe <_printf_float+0x186>
 8007dbc:	3901      	subs	r1, #1
 8007dbe:	465a      	mov	r2, fp
 8007dc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dc4:	9109      	str	r1, [sp, #36]	; 0x24
 8007dc6:	f7ff ff18 	bl	8007bfa <__exponent>
 8007dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dcc:	1813      	adds	r3, r2, r0
 8007dce:	2a01      	cmp	r2, #1
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	dc02      	bgt.n	8007ddc <_printf_float+0x164>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	07d2      	lsls	r2, r2, #31
 8007dda:	d501      	bpl.n	8007de0 <_printf_float+0x168>
 8007ddc:	3301      	adds	r3, #1
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d09c      	beq.n	8007d22 <_printf_float+0xaa>
 8007de8:	232d      	movs	r3, #45	; 0x2d
 8007dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dee:	e798      	b.n	8007d22 <_printf_float+0xaa>
 8007df0:	9a06      	ldr	r2, [sp, #24]
 8007df2:	2a47      	cmp	r2, #71	; 0x47
 8007df4:	d1be      	bne.n	8007d74 <_printf_float+0xfc>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1bc      	bne.n	8007d74 <_printf_float+0xfc>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e7b9      	b.n	8007d72 <_printf_float+0xfa>
 8007dfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e02:	d118      	bne.n	8007e36 <_printf_float+0x1be>
 8007e04:	2900      	cmp	r1, #0
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	dd0b      	ble.n	8007e22 <_printf_float+0x1aa>
 8007e0a:	6121      	str	r1, [r4, #16]
 8007e0c:	b913      	cbnz	r3, 8007e14 <_printf_float+0x19c>
 8007e0e:	6822      	ldr	r2, [r4, #0]
 8007e10:	07d0      	lsls	r0, r2, #31
 8007e12:	d502      	bpl.n	8007e1a <_printf_float+0x1a2>
 8007e14:	3301      	adds	r3, #1
 8007e16:	440b      	add	r3, r1
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e1c:	f04f 0900 	mov.w	r9, #0
 8007e20:	e7de      	b.n	8007de0 <_printf_float+0x168>
 8007e22:	b913      	cbnz	r3, 8007e2a <_printf_float+0x1b2>
 8007e24:	6822      	ldr	r2, [r4, #0]
 8007e26:	07d2      	lsls	r2, r2, #31
 8007e28:	d501      	bpl.n	8007e2e <_printf_float+0x1b6>
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	e7f4      	b.n	8007e18 <_printf_float+0x1a0>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e7f2      	b.n	8007e18 <_printf_float+0x1a0>
 8007e32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	db05      	blt.n	8007e48 <_printf_float+0x1d0>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	6121      	str	r1, [r4, #16]
 8007e40:	07d8      	lsls	r0, r3, #31
 8007e42:	d5ea      	bpl.n	8007e1a <_printf_float+0x1a2>
 8007e44:	1c4b      	adds	r3, r1, #1
 8007e46:	e7e7      	b.n	8007e18 <_printf_float+0x1a0>
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	bfd4      	ite	le
 8007e4c:	f1c1 0202 	rsble	r2, r1, #2
 8007e50:	2201      	movgt	r2, #1
 8007e52:	4413      	add	r3, r2
 8007e54:	e7e0      	b.n	8007e18 <_printf_float+0x1a0>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	055a      	lsls	r2, r3, #21
 8007e5a:	d407      	bmi.n	8007e6c <_printf_float+0x1f4>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	4642      	mov	r2, r8
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	d12c      	bne.n	8007ec4 <_printf_float+0x24c>
 8007e6a:	e764      	b.n	8007d36 <_printf_float+0xbe>
 8007e6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e70:	f240 80e0 	bls.w	8008034 <_printf_float+0x3bc>
 8007e74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f7f8 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d034      	beq.n	8007eee <_printf_float+0x276>
 8007e84:	4a37      	ldr	r2, [pc, #220]	; (8007f64 <_printf_float+0x2ec>)
 8007e86:	2301      	movs	r3, #1
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af51 	beq.w	8007d36 <_printf_float+0xbe>
 8007e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	db02      	blt.n	8007ea2 <_printf_float+0x22a>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	07d8      	lsls	r0, r3, #31
 8007ea0:	d510      	bpl.n	8007ec4 <_printf_float+0x24c>
 8007ea2:	ee18 3a10 	vmov	r3, s16
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af41 	beq.w	8007d36 <_printf_float+0xbe>
 8007eb4:	f04f 0800 	mov.w	r8, #0
 8007eb8:	f104 091a 	add.w	r9, r4, #26
 8007ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	4543      	cmp	r3, r8
 8007ec2:	dc09      	bgt.n	8007ed8 <_printf_float+0x260>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	079b      	lsls	r3, r3, #30
 8007ec8:	f100 8107 	bmi.w	80080da <_printf_float+0x462>
 8007ecc:	68e0      	ldr	r0, [r4, #12]
 8007ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed0:	4298      	cmp	r0, r3
 8007ed2:	bfb8      	it	lt
 8007ed4:	4618      	movlt	r0, r3
 8007ed6:	e730      	b.n	8007d3a <_printf_float+0xc2>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	464a      	mov	r2, r9
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	f43f af27 	beq.w	8007d36 <_printf_float+0xbe>
 8007ee8:	f108 0801 	add.w	r8, r8, #1
 8007eec:	e7e6      	b.n	8007ebc <_printf_float+0x244>
 8007eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc39      	bgt.n	8007f68 <_printf_float+0x2f0>
 8007ef4:	4a1b      	ldr	r2, [pc, #108]	; (8007f64 <_printf_float+0x2ec>)
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b8      	blx	r7
 8007efe:	3001      	adds	r0, #1
 8007f00:	f43f af19 	beq.w	8007d36 <_printf_float+0xbe>
 8007f04:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d102      	bne.n	8007f12 <_printf_float+0x29a>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	07d9      	lsls	r1, r3, #31
 8007f10:	d5d8      	bpl.n	8007ec4 <_printf_float+0x24c>
 8007f12:	ee18 3a10 	vmov	r3, s16
 8007f16:	4652      	mov	r2, sl
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	f43f af09 	beq.w	8007d36 <_printf_float+0xbe>
 8007f24:	f04f 0900 	mov.w	r9, #0
 8007f28:	f104 0a1a 	add.w	sl, r4, #26
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	425b      	negs	r3, r3
 8007f30:	454b      	cmp	r3, r9
 8007f32:	dc01      	bgt.n	8007f38 <_printf_float+0x2c0>
 8007f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f36:	e792      	b.n	8007e5e <_printf_float+0x1e6>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	f43f aef7 	beq.w	8007d36 <_printf_float+0xbe>
 8007f48:	f109 0901 	add.w	r9, r9, #1
 8007f4c:	e7ee      	b.n	8007f2c <_printf_float+0x2b4>
 8007f4e:	bf00      	nop
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	0800d550 	.word	0x0800d550
 8007f58:	0800d554 	.word	0x0800d554
 8007f5c:	0800d558 	.word	0x0800d558
 8007f60:	0800d55c 	.word	0x0800d55c
 8007f64:	0800d8e8 	.word	0x0800d8e8
 8007f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	bfa8      	it	ge
 8007f70:	461a      	movge	r2, r3
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	4691      	mov	r9, r2
 8007f76:	dc37      	bgt.n	8007fe8 <_printf_float+0x370>
 8007f78:	f04f 0b00 	mov.w	fp, #0
 8007f7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f80:	f104 021a 	add.w	r2, r4, #26
 8007f84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f86:	9305      	str	r3, [sp, #20]
 8007f88:	eba3 0309 	sub.w	r3, r3, r9
 8007f8c:	455b      	cmp	r3, fp
 8007f8e:	dc33      	bgt.n	8007ff8 <_printf_float+0x380>
 8007f90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f94:	429a      	cmp	r2, r3
 8007f96:	db3b      	blt.n	8008010 <_printf_float+0x398>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07da      	lsls	r2, r3, #31
 8007f9c:	d438      	bmi.n	8008010 <_printf_float+0x398>
 8007f9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fa2:	eba2 0903 	sub.w	r9, r2, r3
 8007fa6:	9b05      	ldr	r3, [sp, #20]
 8007fa8:	1ad2      	subs	r2, r2, r3
 8007faa:	4591      	cmp	r9, r2
 8007fac:	bfa8      	it	ge
 8007fae:	4691      	movge	r9, r2
 8007fb0:	f1b9 0f00 	cmp.w	r9, #0
 8007fb4:	dc35      	bgt.n	8008022 <_printf_float+0x3aa>
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fbe:	f104 0a1a 	add.w	sl, r4, #26
 8007fc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	eba3 0309 	sub.w	r3, r3, r9
 8007fcc:	4543      	cmp	r3, r8
 8007fce:	f77f af79 	ble.w	8007ec4 <_printf_float+0x24c>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	f43f aeaa 	beq.w	8007d36 <_printf_float+0xbe>
 8007fe2:	f108 0801 	add.w	r8, r8, #1
 8007fe6:	e7ec      	b.n	8007fc2 <_printf_float+0x34a>
 8007fe8:	4613      	mov	r3, r2
 8007fea:	4631      	mov	r1, r6
 8007fec:	4642      	mov	r2, r8
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d1c0      	bne.n	8007f78 <_printf_float+0x300>
 8007ff6:	e69e      	b.n	8007d36 <_printf_float+0xbe>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	9205      	str	r2, [sp, #20]
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f ae97 	beq.w	8007d36 <_printf_float+0xbe>
 8008008:	9a05      	ldr	r2, [sp, #20]
 800800a:	f10b 0b01 	add.w	fp, fp, #1
 800800e:	e7b9      	b.n	8007f84 <_printf_float+0x30c>
 8008010:	ee18 3a10 	vmov	r3, s16
 8008014:	4652      	mov	r2, sl
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	d1be      	bne.n	8007f9e <_printf_float+0x326>
 8008020:	e689      	b.n	8007d36 <_printf_float+0xbe>
 8008022:	9a05      	ldr	r2, [sp, #20]
 8008024:	464b      	mov	r3, r9
 8008026:	4442      	add	r2, r8
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	d1c1      	bne.n	8007fb6 <_printf_float+0x33e>
 8008032:	e680      	b.n	8007d36 <_printf_float+0xbe>
 8008034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008036:	2a01      	cmp	r2, #1
 8008038:	dc01      	bgt.n	800803e <_printf_float+0x3c6>
 800803a:	07db      	lsls	r3, r3, #31
 800803c:	d53a      	bpl.n	80080b4 <_printf_float+0x43c>
 800803e:	2301      	movs	r3, #1
 8008040:	4642      	mov	r2, r8
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	f43f ae74 	beq.w	8007d36 <_printf_float+0xbe>
 800804e:	ee18 3a10 	vmov	r3, s16
 8008052:	4652      	mov	r2, sl
 8008054:	4631      	mov	r1, r6
 8008056:	4628      	mov	r0, r5
 8008058:	47b8      	blx	r7
 800805a:	3001      	adds	r0, #1
 800805c:	f43f ae6b 	beq.w	8007d36 <_printf_float+0xbe>
 8008060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008064:	2200      	movs	r2, #0
 8008066:	2300      	movs	r3, #0
 8008068:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800806c:	f7f8 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008070:	b9d8      	cbnz	r0, 80080aa <_printf_float+0x432>
 8008072:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008076:	f108 0201 	add.w	r2, r8, #1
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d10e      	bne.n	80080a2 <_printf_float+0x42a>
 8008084:	e657      	b.n	8007d36 <_printf_float+0xbe>
 8008086:	2301      	movs	r3, #1
 8008088:	4652      	mov	r2, sl
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae50 	beq.w	8007d36 <_printf_float+0xbe>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809c:	3b01      	subs	r3, #1
 800809e:	4543      	cmp	r3, r8
 80080a0:	dcf1      	bgt.n	8008086 <_printf_float+0x40e>
 80080a2:	464b      	mov	r3, r9
 80080a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080a8:	e6da      	b.n	8007e60 <_printf_float+0x1e8>
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	f104 0a1a 	add.w	sl, r4, #26
 80080b2:	e7f2      	b.n	800809a <_printf_float+0x422>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4642      	mov	r2, r8
 80080b8:	e7df      	b.n	800807a <_printf_float+0x402>
 80080ba:	2301      	movs	r3, #1
 80080bc:	464a      	mov	r2, r9
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f ae36 	beq.w	8007d36 <_printf_float+0xbe>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	4543      	cmp	r3, r8
 80080d6:	dcf0      	bgt.n	80080ba <_printf_float+0x442>
 80080d8:	e6f8      	b.n	8007ecc <_printf_float+0x254>
 80080da:	f04f 0800 	mov.w	r8, #0
 80080de:	f104 0919 	add.w	r9, r4, #25
 80080e2:	e7f4      	b.n	80080ce <_printf_float+0x456>

080080e4 <_printf_common>:
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4616      	mov	r6, r2
 80080ea:	4699      	mov	r9, r3
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	690b      	ldr	r3, [r1, #16]
 80080f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bfb8      	it	lt
 80080f8:	4613      	movlt	r3, r2
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008100:	4607      	mov	r7, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b10a      	cbz	r2, 800810a <_printf_common+0x26>
 8008106:	3301      	adds	r3, #1
 8008108:	6033      	str	r3, [r6, #0]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	0699      	lsls	r1, r3, #26
 800810e:	bf42      	ittt	mi
 8008110:	6833      	ldrmi	r3, [r6, #0]
 8008112:	3302      	addmi	r3, #2
 8008114:	6033      	strmi	r3, [r6, #0]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	f015 0506 	ands.w	r5, r5, #6
 800811c:	d106      	bne.n	800812c <_printf_common+0x48>
 800811e:	f104 0a19 	add.w	sl, r4, #25
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	6832      	ldr	r2, [r6, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc26      	bgt.n	800817a <_printf_common+0x96>
 800812c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008130:	1e13      	subs	r3, r2, #0
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	bf18      	it	ne
 8008136:	2301      	movne	r3, #1
 8008138:	0692      	lsls	r2, r2, #26
 800813a:	d42b      	bmi.n	8008194 <_printf_common+0xb0>
 800813c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d01e      	beq.n	8008188 <_printf_common+0xa4>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	6922      	ldr	r2, [r4, #16]
 800814e:	f003 0306 	and.w	r3, r3, #6
 8008152:	2b04      	cmp	r3, #4
 8008154:	bf02      	ittt	eq
 8008156:	68e5      	ldreq	r5, [r4, #12]
 8008158:	6833      	ldreq	r3, [r6, #0]
 800815a:	1aed      	subeq	r5, r5, r3
 800815c:	68a3      	ldr	r3, [r4, #8]
 800815e:	bf0c      	ite	eq
 8008160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008164:	2500      	movne	r5, #0
 8008166:	4293      	cmp	r3, r2
 8008168:	bfc4      	itt	gt
 800816a:	1a9b      	subgt	r3, r3, r2
 800816c:	18ed      	addgt	r5, r5, r3
 800816e:	2600      	movs	r6, #0
 8008170:	341a      	adds	r4, #26
 8008172:	42b5      	cmp	r5, r6
 8008174:	d11a      	bne.n	80081ac <_printf_common+0xc8>
 8008176:	2000      	movs	r0, #0
 8008178:	e008      	b.n	800818c <_printf_common+0xa8>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4649      	mov	r1, r9
 8008180:	4638      	mov	r0, r7
 8008182:	47c0      	blx	r8
 8008184:	3001      	adds	r0, #1
 8008186:	d103      	bne.n	8008190 <_printf_common+0xac>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	3501      	adds	r5, #1
 8008192:	e7c6      	b.n	8008122 <_printf_common+0x3e>
 8008194:	18e1      	adds	r1, r4, r3
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	2030      	movs	r0, #48	; 0x30
 800819a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800819e:	4422      	add	r2, r4
 80081a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a8:	3302      	adds	r3, #2
 80081aa:	e7c7      	b.n	800813c <_printf_common+0x58>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4622      	mov	r2, r4
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0e6      	beq.n	8008188 <_printf_common+0xa4>
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7d9      	b.n	8008172 <_printf_common+0x8e>
	...

080081c0 <_printf_i>:
 80081c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	7e0f      	ldrb	r7, [r1, #24]
 80081c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081c8:	2f78      	cmp	r7, #120	; 0x78
 80081ca:	4691      	mov	r9, r2
 80081cc:	4680      	mov	r8, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	469a      	mov	sl, r3
 80081d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081d6:	d807      	bhi.n	80081e8 <_printf_i+0x28>
 80081d8:	2f62      	cmp	r7, #98	; 0x62
 80081da:	d80a      	bhi.n	80081f2 <_printf_i+0x32>
 80081dc:	2f00      	cmp	r7, #0
 80081de:	f000 80d4 	beq.w	800838a <_printf_i+0x1ca>
 80081e2:	2f58      	cmp	r7, #88	; 0x58
 80081e4:	f000 80c0 	beq.w	8008368 <_printf_i+0x1a8>
 80081e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f0:	e03a      	b.n	8008268 <_printf_i+0xa8>
 80081f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081f6:	2b15      	cmp	r3, #21
 80081f8:	d8f6      	bhi.n	80081e8 <_printf_i+0x28>
 80081fa:	a101      	add	r1, pc, #4	; (adr r1, 8008200 <_printf_i+0x40>)
 80081fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008200:	08008259 	.word	0x08008259
 8008204:	0800826d 	.word	0x0800826d
 8008208:	080081e9 	.word	0x080081e9
 800820c:	080081e9 	.word	0x080081e9
 8008210:	080081e9 	.word	0x080081e9
 8008214:	080081e9 	.word	0x080081e9
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080081e9 	.word	0x080081e9
 8008220:	080081e9 	.word	0x080081e9
 8008224:	080081e9 	.word	0x080081e9
 8008228:	080081e9 	.word	0x080081e9
 800822c:	08008371 	.word	0x08008371
 8008230:	08008299 	.word	0x08008299
 8008234:	0800832b 	.word	0x0800832b
 8008238:	080081e9 	.word	0x080081e9
 800823c:	080081e9 	.word	0x080081e9
 8008240:	08008393 	.word	0x08008393
 8008244:	080081e9 	.word	0x080081e9
 8008248:	08008299 	.word	0x08008299
 800824c:	080081e9 	.word	0x080081e9
 8008250:	080081e9 	.word	0x080081e9
 8008254:	08008333 	.word	0x08008333
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008268:	2301      	movs	r3, #1
 800826a:	e09f      	b.n	80083ac <_printf_i+0x1ec>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	0607      	lsls	r7, r0, #24
 8008272:	f103 0104 	add.w	r1, r3, #4
 8008276:	6029      	str	r1, [r5, #0]
 8008278:	d501      	bpl.n	800827e <_printf_i+0xbe>
 800827a:	681e      	ldr	r6, [r3, #0]
 800827c:	e003      	b.n	8008286 <_printf_i+0xc6>
 800827e:	0646      	lsls	r6, r0, #25
 8008280:	d5fb      	bpl.n	800827a <_printf_i+0xba>
 8008282:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008286:	2e00      	cmp	r6, #0
 8008288:	da03      	bge.n	8008292 <_printf_i+0xd2>
 800828a:	232d      	movs	r3, #45	; 0x2d
 800828c:	4276      	negs	r6, r6
 800828e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008292:	485a      	ldr	r0, [pc, #360]	; (80083fc <_printf_i+0x23c>)
 8008294:	230a      	movs	r3, #10
 8008296:	e012      	b.n	80082be <_printf_i+0xfe>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	1d19      	adds	r1, r3, #4
 800829e:	6029      	str	r1, [r5, #0]
 80082a0:	0605      	lsls	r5, r0, #24
 80082a2:	d501      	bpl.n	80082a8 <_printf_i+0xe8>
 80082a4:	681e      	ldr	r6, [r3, #0]
 80082a6:	e002      	b.n	80082ae <_printf_i+0xee>
 80082a8:	0641      	lsls	r1, r0, #25
 80082aa:	d5fb      	bpl.n	80082a4 <_printf_i+0xe4>
 80082ac:	881e      	ldrh	r6, [r3, #0]
 80082ae:	4853      	ldr	r0, [pc, #332]	; (80083fc <_printf_i+0x23c>)
 80082b0:	2f6f      	cmp	r7, #111	; 0x6f
 80082b2:	bf0c      	ite	eq
 80082b4:	2308      	moveq	r3, #8
 80082b6:	230a      	movne	r3, #10
 80082b8:	2100      	movs	r1, #0
 80082ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082be:	6865      	ldr	r5, [r4, #4]
 80082c0:	60a5      	str	r5, [r4, #8]
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	bfa2      	ittt	ge
 80082c6:	6821      	ldrge	r1, [r4, #0]
 80082c8:	f021 0104 	bicge.w	r1, r1, #4
 80082cc:	6021      	strge	r1, [r4, #0]
 80082ce:	b90e      	cbnz	r6, 80082d4 <_printf_i+0x114>
 80082d0:	2d00      	cmp	r5, #0
 80082d2:	d04b      	beq.n	800836c <_printf_i+0x1ac>
 80082d4:	4615      	mov	r5, r2
 80082d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80082da:	fb03 6711 	mls	r7, r3, r1, r6
 80082de:	5dc7      	ldrb	r7, [r0, r7]
 80082e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e4:	4637      	mov	r7, r6
 80082e6:	42bb      	cmp	r3, r7
 80082e8:	460e      	mov	r6, r1
 80082ea:	d9f4      	bls.n	80082d6 <_printf_i+0x116>
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d10b      	bne.n	8008308 <_printf_i+0x148>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	07de      	lsls	r6, r3, #31
 80082f4:	d508      	bpl.n	8008308 <_printf_i+0x148>
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	6861      	ldr	r1, [r4, #4]
 80082fa:	4299      	cmp	r1, r3
 80082fc:	bfde      	ittt	le
 80082fe:	2330      	movle	r3, #48	; 0x30
 8008300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008308:	1b52      	subs	r2, r2, r5
 800830a:	6122      	str	r2, [r4, #16]
 800830c:	f8cd a000 	str.w	sl, [sp]
 8008310:	464b      	mov	r3, r9
 8008312:	aa03      	add	r2, sp, #12
 8008314:	4621      	mov	r1, r4
 8008316:	4640      	mov	r0, r8
 8008318:	f7ff fee4 	bl	80080e4 <_printf_common>
 800831c:	3001      	adds	r0, #1
 800831e:	d14a      	bne.n	80083b6 <_printf_i+0x1f6>
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	b004      	add	sp, #16
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	f043 0320 	orr.w	r3, r3, #32
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	4833      	ldr	r0, [pc, #204]	; (8008400 <_printf_i+0x240>)
 8008334:	2778      	movs	r7, #120	; 0x78
 8008336:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	6829      	ldr	r1, [r5, #0]
 800833e:	061f      	lsls	r7, r3, #24
 8008340:	f851 6b04 	ldr.w	r6, [r1], #4
 8008344:	d402      	bmi.n	800834c <_printf_i+0x18c>
 8008346:	065f      	lsls	r7, r3, #25
 8008348:	bf48      	it	mi
 800834a:	b2b6      	uxthmi	r6, r6
 800834c:	07df      	lsls	r7, r3, #31
 800834e:	bf48      	it	mi
 8008350:	f043 0320 	orrmi.w	r3, r3, #32
 8008354:	6029      	str	r1, [r5, #0]
 8008356:	bf48      	it	mi
 8008358:	6023      	strmi	r3, [r4, #0]
 800835a:	b91e      	cbnz	r6, 8008364 <_printf_i+0x1a4>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	f023 0320 	bic.w	r3, r3, #32
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	2310      	movs	r3, #16
 8008366:	e7a7      	b.n	80082b8 <_printf_i+0xf8>
 8008368:	4824      	ldr	r0, [pc, #144]	; (80083fc <_printf_i+0x23c>)
 800836a:	e7e4      	b.n	8008336 <_printf_i+0x176>
 800836c:	4615      	mov	r5, r2
 800836e:	e7bd      	b.n	80082ec <_printf_i+0x12c>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	6826      	ldr	r6, [r4, #0]
 8008374:	6961      	ldr	r1, [r4, #20]
 8008376:	1d18      	adds	r0, r3, #4
 8008378:	6028      	str	r0, [r5, #0]
 800837a:	0635      	lsls	r5, r6, #24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	d501      	bpl.n	8008384 <_printf_i+0x1c4>
 8008380:	6019      	str	r1, [r3, #0]
 8008382:	e002      	b.n	800838a <_printf_i+0x1ca>
 8008384:	0670      	lsls	r0, r6, #25
 8008386:	d5fb      	bpl.n	8008380 <_printf_i+0x1c0>
 8008388:	8019      	strh	r1, [r3, #0]
 800838a:	2300      	movs	r3, #0
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	4615      	mov	r5, r2
 8008390:	e7bc      	b.n	800830c <_printf_i+0x14c>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	1d1a      	adds	r2, r3, #4
 8008396:	602a      	str	r2, [r5, #0]
 8008398:	681d      	ldr	r5, [r3, #0]
 800839a:	6862      	ldr	r2, [r4, #4]
 800839c:	2100      	movs	r1, #0
 800839e:	4628      	mov	r0, r5
 80083a0:	f7f7 ff16 	bl	80001d0 <memchr>
 80083a4:	b108      	cbz	r0, 80083aa <_printf_i+0x1ea>
 80083a6:	1b40      	subs	r0, r0, r5
 80083a8:	6060      	str	r0, [r4, #4]
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	2300      	movs	r3, #0
 80083b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b4:	e7aa      	b.n	800830c <_printf_i+0x14c>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4649      	mov	r1, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	47d0      	blx	sl
 80083c0:	3001      	adds	r0, #1
 80083c2:	d0ad      	beq.n	8008320 <_printf_i+0x160>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	079b      	lsls	r3, r3, #30
 80083c8:	d413      	bmi.n	80083f2 <_printf_i+0x232>
 80083ca:	68e0      	ldr	r0, [r4, #12]
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	4298      	cmp	r0, r3
 80083d0:	bfb8      	it	lt
 80083d2:	4618      	movlt	r0, r3
 80083d4:	e7a6      	b.n	8008324 <_printf_i+0x164>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4632      	mov	r2, r6
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	47d0      	blx	sl
 80083e0:	3001      	adds	r0, #1
 80083e2:	d09d      	beq.n	8008320 <_printf_i+0x160>
 80083e4:	3501      	adds	r5, #1
 80083e6:	68e3      	ldr	r3, [r4, #12]
 80083e8:	9903      	ldr	r1, [sp, #12]
 80083ea:	1a5b      	subs	r3, r3, r1
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dcf2      	bgt.n	80083d6 <_printf_i+0x216>
 80083f0:	e7eb      	b.n	80083ca <_printf_i+0x20a>
 80083f2:	2500      	movs	r5, #0
 80083f4:	f104 0619 	add.w	r6, r4, #25
 80083f8:	e7f5      	b.n	80083e6 <_printf_i+0x226>
 80083fa:	bf00      	nop
 80083fc:	0800d560 	.word	0x0800d560
 8008400:	0800d571 	.word	0x0800d571

08008404 <_scanf_float>:
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	b087      	sub	sp, #28
 800840a:	4617      	mov	r7, r2
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	688b      	ldr	r3, [r1, #8]
 8008410:	1e5a      	subs	r2, r3, #1
 8008412:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008416:	bf83      	ittte	hi
 8008418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800841c:	195b      	addhi	r3, r3, r5
 800841e:	9302      	strhi	r3, [sp, #8]
 8008420:	2300      	movls	r3, #0
 8008422:	bf86      	itte	hi
 8008424:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008428:	608b      	strhi	r3, [r1, #8]
 800842a:	9302      	strls	r3, [sp, #8]
 800842c:	680b      	ldr	r3, [r1, #0]
 800842e:	468b      	mov	fp, r1
 8008430:	2500      	movs	r5, #0
 8008432:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008436:	f84b 3b1c 	str.w	r3, [fp], #28
 800843a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800843e:	4680      	mov	r8, r0
 8008440:	460c      	mov	r4, r1
 8008442:	465e      	mov	r6, fp
 8008444:	46aa      	mov	sl, r5
 8008446:	46a9      	mov	r9, r5
 8008448:	9501      	str	r5, [sp, #4]
 800844a:	68a2      	ldr	r2, [r4, #8]
 800844c:	b152      	cbz	r2, 8008464 <_scanf_float+0x60>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b4e      	cmp	r3, #78	; 0x4e
 8008454:	d864      	bhi.n	8008520 <_scanf_float+0x11c>
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d83c      	bhi.n	80084d4 <_scanf_float+0xd0>
 800845a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800845e:	b2c8      	uxtb	r0, r1
 8008460:	280e      	cmp	r0, #14
 8008462:	d93a      	bls.n	80084da <_scanf_float+0xd6>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	d003      	beq.n	8008472 <_scanf_float+0x6e>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008476:	f1ba 0f01 	cmp.w	sl, #1
 800847a:	f200 8113 	bhi.w	80086a4 <_scanf_float+0x2a0>
 800847e:	455e      	cmp	r6, fp
 8008480:	f200 8105 	bhi.w	800868e <_scanf_float+0x28a>
 8008484:	2501      	movs	r5, #1
 8008486:	4628      	mov	r0, r5
 8008488:	b007      	add	sp, #28
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008492:	2a0d      	cmp	r2, #13
 8008494:	d8e6      	bhi.n	8008464 <_scanf_float+0x60>
 8008496:	a101      	add	r1, pc, #4	; (adr r1, 800849c <_scanf_float+0x98>)
 8008498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800849c:	080085db 	.word	0x080085db
 80084a0:	08008465 	.word	0x08008465
 80084a4:	08008465 	.word	0x08008465
 80084a8:	08008465 	.word	0x08008465
 80084ac:	0800863b 	.word	0x0800863b
 80084b0:	08008613 	.word	0x08008613
 80084b4:	08008465 	.word	0x08008465
 80084b8:	08008465 	.word	0x08008465
 80084bc:	080085e9 	.word	0x080085e9
 80084c0:	08008465 	.word	0x08008465
 80084c4:	08008465 	.word	0x08008465
 80084c8:	08008465 	.word	0x08008465
 80084cc:	08008465 	.word	0x08008465
 80084d0:	080085a1 	.word	0x080085a1
 80084d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084d8:	e7db      	b.n	8008492 <_scanf_float+0x8e>
 80084da:	290e      	cmp	r1, #14
 80084dc:	d8c2      	bhi.n	8008464 <_scanf_float+0x60>
 80084de:	a001      	add	r0, pc, #4	; (adr r0, 80084e4 <_scanf_float+0xe0>)
 80084e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084e4:	08008593 	.word	0x08008593
 80084e8:	08008465 	.word	0x08008465
 80084ec:	08008593 	.word	0x08008593
 80084f0:	08008627 	.word	0x08008627
 80084f4:	08008465 	.word	0x08008465
 80084f8:	08008541 	.word	0x08008541
 80084fc:	0800857d 	.word	0x0800857d
 8008500:	0800857d 	.word	0x0800857d
 8008504:	0800857d 	.word	0x0800857d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800857d 	.word	0x0800857d
 8008510:	0800857d 	.word	0x0800857d
 8008514:	0800857d 	.word	0x0800857d
 8008518:	0800857d 	.word	0x0800857d
 800851c:	0800857d 	.word	0x0800857d
 8008520:	2b6e      	cmp	r3, #110	; 0x6e
 8008522:	d809      	bhi.n	8008538 <_scanf_float+0x134>
 8008524:	2b60      	cmp	r3, #96	; 0x60
 8008526:	d8b2      	bhi.n	800848e <_scanf_float+0x8a>
 8008528:	2b54      	cmp	r3, #84	; 0x54
 800852a:	d077      	beq.n	800861c <_scanf_float+0x218>
 800852c:	2b59      	cmp	r3, #89	; 0x59
 800852e:	d199      	bne.n	8008464 <_scanf_float+0x60>
 8008530:	2d07      	cmp	r5, #7
 8008532:	d197      	bne.n	8008464 <_scanf_float+0x60>
 8008534:	2508      	movs	r5, #8
 8008536:	e029      	b.n	800858c <_scanf_float+0x188>
 8008538:	2b74      	cmp	r3, #116	; 0x74
 800853a:	d06f      	beq.n	800861c <_scanf_float+0x218>
 800853c:	2b79      	cmp	r3, #121	; 0x79
 800853e:	e7f6      	b.n	800852e <_scanf_float+0x12a>
 8008540:	6821      	ldr	r1, [r4, #0]
 8008542:	05c8      	lsls	r0, r1, #23
 8008544:	d51a      	bpl.n	800857c <_scanf_float+0x178>
 8008546:	9b02      	ldr	r3, [sp, #8]
 8008548:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800854c:	6021      	str	r1, [r4, #0]
 800854e:	f109 0901 	add.w	r9, r9, #1
 8008552:	b11b      	cbz	r3, 800855c <_scanf_float+0x158>
 8008554:	3b01      	subs	r3, #1
 8008556:	3201      	adds	r2, #1
 8008558:	9302      	str	r3, [sp, #8]
 800855a:	60a2      	str	r2, [r4, #8]
 800855c:	68a3      	ldr	r3, [r4, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	60a3      	str	r3, [r4, #8]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	3301      	adds	r3, #1
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3b01      	subs	r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	f340 8084 	ble.w	800867c <_scanf_float+0x278>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	e766      	b.n	800844a <_scanf_float+0x46>
 800857c:	eb1a 0f05 	cmn.w	sl, r5
 8008580:	f47f af70 	bne.w	8008464 <_scanf_float+0x60>
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	f806 3b01 	strb.w	r3, [r6], #1
 8008590:	e7e4      	b.n	800855c <_scanf_float+0x158>
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	0610      	lsls	r0, r2, #24
 8008596:	f57f af65 	bpl.w	8008464 <_scanf_float+0x60>
 800859a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859e:	e7f4      	b.n	800858a <_scanf_float+0x186>
 80085a0:	f1ba 0f00 	cmp.w	sl, #0
 80085a4:	d10e      	bne.n	80085c4 <_scanf_float+0x1c0>
 80085a6:	f1b9 0f00 	cmp.w	r9, #0
 80085aa:	d10e      	bne.n	80085ca <_scanf_float+0x1c6>
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085b6:	d108      	bne.n	80085ca <_scanf_float+0x1c6>
 80085b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085bc:	6022      	str	r2, [r4, #0]
 80085be:	f04f 0a01 	mov.w	sl, #1
 80085c2:	e7e3      	b.n	800858c <_scanf_float+0x188>
 80085c4:	f1ba 0f02 	cmp.w	sl, #2
 80085c8:	d055      	beq.n	8008676 <_scanf_float+0x272>
 80085ca:	2d01      	cmp	r5, #1
 80085cc:	d002      	beq.n	80085d4 <_scanf_float+0x1d0>
 80085ce:	2d04      	cmp	r5, #4
 80085d0:	f47f af48 	bne.w	8008464 <_scanf_float+0x60>
 80085d4:	3501      	adds	r5, #1
 80085d6:	b2ed      	uxtb	r5, r5
 80085d8:	e7d8      	b.n	800858c <_scanf_float+0x188>
 80085da:	f1ba 0f01 	cmp.w	sl, #1
 80085de:	f47f af41 	bne.w	8008464 <_scanf_float+0x60>
 80085e2:	f04f 0a02 	mov.w	sl, #2
 80085e6:	e7d1      	b.n	800858c <_scanf_float+0x188>
 80085e8:	b97d      	cbnz	r5, 800860a <_scanf_float+0x206>
 80085ea:	f1b9 0f00 	cmp.w	r9, #0
 80085ee:	f47f af3c 	bne.w	800846a <_scanf_float+0x66>
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085fc:	f47f af39 	bne.w	8008472 <_scanf_float+0x6e>
 8008600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008604:	6022      	str	r2, [r4, #0]
 8008606:	2501      	movs	r5, #1
 8008608:	e7c0      	b.n	800858c <_scanf_float+0x188>
 800860a:	2d03      	cmp	r5, #3
 800860c:	d0e2      	beq.n	80085d4 <_scanf_float+0x1d0>
 800860e:	2d05      	cmp	r5, #5
 8008610:	e7de      	b.n	80085d0 <_scanf_float+0x1cc>
 8008612:	2d02      	cmp	r5, #2
 8008614:	f47f af26 	bne.w	8008464 <_scanf_float+0x60>
 8008618:	2503      	movs	r5, #3
 800861a:	e7b7      	b.n	800858c <_scanf_float+0x188>
 800861c:	2d06      	cmp	r5, #6
 800861e:	f47f af21 	bne.w	8008464 <_scanf_float+0x60>
 8008622:	2507      	movs	r5, #7
 8008624:	e7b2      	b.n	800858c <_scanf_float+0x188>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	0591      	lsls	r1, r2, #22
 800862a:	f57f af1b 	bpl.w	8008464 <_scanf_float+0x60>
 800862e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008632:	6022      	str	r2, [r4, #0]
 8008634:	f8cd 9004 	str.w	r9, [sp, #4]
 8008638:	e7a8      	b.n	800858c <_scanf_float+0x188>
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008640:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008644:	d006      	beq.n	8008654 <_scanf_float+0x250>
 8008646:	0550      	lsls	r0, r2, #21
 8008648:	f57f af0c 	bpl.w	8008464 <_scanf_float+0x60>
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	f43f af0f 	beq.w	8008472 <_scanf_float+0x6e>
 8008654:	0591      	lsls	r1, r2, #22
 8008656:	bf58      	it	pl
 8008658:	9901      	ldrpl	r1, [sp, #4]
 800865a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800865e:	bf58      	it	pl
 8008660:	eba9 0101 	subpl.w	r1, r9, r1
 8008664:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008668:	bf58      	it	pl
 800866a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800866e:	6022      	str	r2, [r4, #0]
 8008670:	f04f 0900 	mov.w	r9, #0
 8008674:	e78a      	b.n	800858c <_scanf_float+0x188>
 8008676:	f04f 0a03 	mov.w	sl, #3
 800867a:	e787      	b.n	800858c <_scanf_float+0x188>
 800867c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008680:	4639      	mov	r1, r7
 8008682:	4640      	mov	r0, r8
 8008684:	4798      	blx	r3
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f aedf 	beq.w	800844a <_scanf_float+0x46>
 800868c:	e6ea      	b.n	8008464 <_scanf_float+0x60>
 800868e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008696:	463a      	mov	r2, r7
 8008698:	4640      	mov	r0, r8
 800869a:	4798      	blx	r3
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	3b01      	subs	r3, #1
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	e6ec      	b.n	800847e <_scanf_float+0x7a>
 80086a4:	1e6b      	subs	r3, r5, #1
 80086a6:	2b06      	cmp	r3, #6
 80086a8:	d825      	bhi.n	80086f6 <_scanf_float+0x2f2>
 80086aa:	2d02      	cmp	r5, #2
 80086ac:	d836      	bhi.n	800871c <_scanf_float+0x318>
 80086ae:	455e      	cmp	r6, fp
 80086b0:	f67f aee8 	bls.w	8008484 <_scanf_float+0x80>
 80086b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086bc:	463a      	mov	r2, r7
 80086be:	4640      	mov	r0, r8
 80086c0:	4798      	blx	r3
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	e7f1      	b.n	80086ae <_scanf_float+0x2aa>
 80086ca:	9802      	ldr	r0, [sp, #8]
 80086cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	463a      	mov	r2, r7
 80086d8:	4640      	mov	r0, r8
 80086da:	4798      	blx	r3
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	3b01      	subs	r3, #1
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086e6:	fa5f fa8a 	uxtb.w	sl, sl
 80086ea:	f1ba 0f02 	cmp.w	sl, #2
 80086ee:	d1ec      	bne.n	80086ca <_scanf_float+0x2c6>
 80086f0:	3d03      	subs	r5, #3
 80086f2:	b2ed      	uxtb	r5, r5
 80086f4:	1b76      	subs	r6, r6, r5
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	05da      	lsls	r2, r3, #23
 80086fa:	d52f      	bpl.n	800875c <_scanf_float+0x358>
 80086fc:	055b      	lsls	r3, r3, #21
 80086fe:	d510      	bpl.n	8008722 <_scanf_float+0x31e>
 8008700:	455e      	cmp	r6, fp
 8008702:	f67f aebf 	bls.w	8008484 <_scanf_float+0x80>
 8008706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800870a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800870e:	463a      	mov	r2, r7
 8008710:	4640      	mov	r0, r8
 8008712:	4798      	blx	r3
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	3b01      	subs	r3, #1
 8008718:	6123      	str	r3, [r4, #16]
 800871a:	e7f1      	b.n	8008700 <_scanf_float+0x2fc>
 800871c:	46aa      	mov	sl, r5
 800871e:	9602      	str	r6, [sp, #8]
 8008720:	e7df      	b.n	80086e2 <_scanf_float+0x2de>
 8008722:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008726:	6923      	ldr	r3, [r4, #16]
 8008728:	2965      	cmp	r1, #101	; 0x65
 800872a:	f103 33ff 	add.w	r3, r3, #4294967295
 800872e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	d00c      	beq.n	8008750 <_scanf_float+0x34c>
 8008736:	2945      	cmp	r1, #69	; 0x45
 8008738:	d00a      	beq.n	8008750 <_scanf_float+0x34c>
 800873a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800873e:	463a      	mov	r2, r7
 8008740:	4640      	mov	r0, r8
 8008742:	4798      	blx	r3
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800874a:	3b01      	subs	r3, #1
 800874c:	1eb5      	subs	r5, r6, #2
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008754:	463a      	mov	r2, r7
 8008756:	4640      	mov	r0, r8
 8008758:	4798      	blx	r3
 800875a:	462e      	mov	r6, r5
 800875c:	6825      	ldr	r5, [r4, #0]
 800875e:	f015 0510 	ands.w	r5, r5, #16
 8008762:	d158      	bne.n	8008816 <_scanf_float+0x412>
 8008764:	7035      	strb	r5, [r6, #0]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800876c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008770:	d11c      	bne.n	80087ac <_scanf_float+0x3a8>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	454b      	cmp	r3, r9
 8008776:	eba3 0209 	sub.w	r2, r3, r9
 800877a:	d124      	bne.n	80087c6 <_scanf_float+0x3c2>
 800877c:	2200      	movs	r2, #0
 800877e:	4659      	mov	r1, fp
 8008780:	4640      	mov	r0, r8
 8008782:	f002 fd89 	bl	800b298 <_strtod_r>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	6821      	ldr	r1, [r4, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f011 0f02 	tst.w	r1, #2
 8008790:	ec57 6b10 	vmov	r6, r7, d0
 8008794:	f103 0204 	add.w	r2, r3, #4
 8008798:	d020      	beq.n	80087dc <_scanf_float+0x3d8>
 800879a:	9903      	ldr	r1, [sp, #12]
 800879c:	600a      	str	r2, [r1, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	e9c3 6700 	strd	r6, r7, [r3]
 80087a4:	68e3      	ldr	r3, [r4, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60e3      	str	r3, [r4, #12]
 80087aa:	e66c      	b.n	8008486 <_scanf_float+0x82>
 80087ac:	9b04      	ldr	r3, [sp, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0e4      	beq.n	800877c <_scanf_float+0x378>
 80087b2:	9905      	ldr	r1, [sp, #20]
 80087b4:	230a      	movs	r3, #10
 80087b6:	462a      	mov	r2, r5
 80087b8:	3101      	adds	r1, #1
 80087ba:	4640      	mov	r0, r8
 80087bc:	f002 fdf4 	bl	800b3a8 <_strtol_r>
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	9e05      	ldr	r6, [sp, #20]
 80087c4:	1ac2      	subs	r2, r0, r3
 80087c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087ca:	429e      	cmp	r6, r3
 80087cc:	bf28      	it	cs
 80087ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087d2:	4912      	ldr	r1, [pc, #72]	; (800881c <_scanf_float+0x418>)
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 f955 	bl	8008a84 <siprintf>
 80087da:	e7cf      	b.n	800877c <_scanf_float+0x378>
 80087dc:	f011 0f04 	tst.w	r1, #4
 80087e0:	9903      	ldr	r1, [sp, #12]
 80087e2:	600a      	str	r2, [r1, #0]
 80087e4:	d1db      	bne.n	800879e <_scanf_float+0x39a>
 80087e6:	f8d3 8000 	ldr.w	r8, [r3]
 80087ea:	ee10 2a10 	vmov	r2, s0
 80087ee:	ee10 0a10 	vmov	r0, s0
 80087f2:	463b      	mov	r3, r7
 80087f4:	4639      	mov	r1, r7
 80087f6:	f7f8 f999 	bl	8000b2c <__aeabi_dcmpun>
 80087fa:	b128      	cbz	r0, 8008808 <_scanf_float+0x404>
 80087fc:	4808      	ldr	r0, [pc, #32]	; (8008820 <_scanf_float+0x41c>)
 80087fe:	f000 fb0f 	bl	8008e20 <nanf>
 8008802:	ed88 0a00 	vstr	s0, [r8]
 8008806:	e7cd      	b.n	80087a4 <_scanf_float+0x3a0>
 8008808:	4630      	mov	r0, r6
 800880a:	4639      	mov	r1, r7
 800880c:	f7f8 f9ec 	bl	8000be8 <__aeabi_d2f>
 8008810:	f8c8 0000 	str.w	r0, [r8]
 8008814:	e7c6      	b.n	80087a4 <_scanf_float+0x3a0>
 8008816:	2500      	movs	r5, #0
 8008818:	e635      	b.n	8008486 <_scanf_float+0x82>
 800881a:	bf00      	nop
 800881c:	0800d582 	.word	0x0800d582
 8008820:	0800d930 	.word	0x0800d930

08008824 <std>:
 8008824:	2300      	movs	r3, #0
 8008826:	b510      	push	{r4, lr}
 8008828:	4604      	mov	r4, r0
 800882a:	e9c0 3300 	strd	r3, r3, [r0]
 800882e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008832:	6083      	str	r3, [r0, #8]
 8008834:	8181      	strh	r1, [r0, #12]
 8008836:	6643      	str	r3, [r0, #100]	; 0x64
 8008838:	81c2      	strh	r2, [r0, #14]
 800883a:	6183      	str	r3, [r0, #24]
 800883c:	4619      	mov	r1, r3
 800883e:	2208      	movs	r2, #8
 8008840:	305c      	adds	r0, #92	; 0x5c
 8008842:	f000 fa45 	bl	8008cd0 <memset>
 8008846:	4b0d      	ldr	r3, [pc, #52]	; (800887c <std+0x58>)
 8008848:	6263      	str	r3, [r4, #36]	; 0x24
 800884a:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <std+0x5c>)
 800884c:	62a3      	str	r3, [r4, #40]	; 0x28
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <std+0x60>)
 8008850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008852:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <std+0x64>)
 8008854:	6323      	str	r3, [r4, #48]	; 0x30
 8008856:	4b0d      	ldr	r3, [pc, #52]	; (800888c <std+0x68>)
 8008858:	6224      	str	r4, [r4, #32]
 800885a:	429c      	cmp	r4, r3
 800885c:	d006      	beq.n	800886c <std+0x48>
 800885e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008862:	4294      	cmp	r4, r2
 8008864:	d002      	beq.n	800886c <std+0x48>
 8008866:	33d0      	adds	r3, #208	; 0xd0
 8008868:	429c      	cmp	r4, r3
 800886a:	d105      	bne.n	8008878 <std+0x54>
 800886c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008874:	f000 bad0 	b.w	8008e18 <__retarget_lock_init_recursive>
 8008878:	bd10      	pop	{r4, pc}
 800887a:	bf00      	nop
 800887c:	08008b1d 	.word	0x08008b1d
 8008880:	08008b43 	.word	0x08008b43
 8008884:	08008b7b 	.word	0x08008b7b
 8008888:	08008b9f 	.word	0x08008b9f
 800888c:	200009f0 	.word	0x200009f0

08008890 <stdio_exit_handler>:
 8008890:	4a02      	ldr	r2, [pc, #8]	; (800889c <stdio_exit_handler+0xc>)
 8008892:	4903      	ldr	r1, [pc, #12]	; (80088a0 <stdio_exit_handler+0x10>)
 8008894:	4803      	ldr	r0, [pc, #12]	; (80088a4 <stdio_exit_handler+0x14>)
 8008896:	f000 b869 	b.w	800896c <_fwalk_sglue>
 800889a:	bf00      	nop
 800889c:	20000020 	.word	0x20000020
 80088a0:	0800c031 	.word	0x0800c031
 80088a4:	2000002c 	.word	0x2000002c

080088a8 <cleanup_stdio>:
 80088a8:	6841      	ldr	r1, [r0, #4]
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <cleanup_stdio+0x34>)
 80088ac:	4299      	cmp	r1, r3
 80088ae:	b510      	push	{r4, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	d001      	beq.n	80088b8 <cleanup_stdio+0x10>
 80088b4:	f003 fbbc 	bl	800c030 <_fflush_r>
 80088b8:	68a1      	ldr	r1, [r4, #8]
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <cleanup_stdio+0x38>)
 80088bc:	4299      	cmp	r1, r3
 80088be:	d002      	beq.n	80088c6 <cleanup_stdio+0x1e>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f003 fbb5 	bl	800c030 <_fflush_r>
 80088c6:	68e1      	ldr	r1, [r4, #12]
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <cleanup_stdio+0x3c>)
 80088ca:	4299      	cmp	r1, r3
 80088cc:	d004      	beq.n	80088d8 <cleanup_stdio+0x30>
 80088ce:	4620      	mov	r0, r4
 80088d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d4:	f003 bbac 	b.w	800c030 <_fflush_r>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	200009f0 	.word	0x200009f0
 80088e0:	20000a58 	.word	0x20000a58
 80088e4:	20000ac0 	.word	0x20000ac0

080088e8 <global_stdio_init.part.0>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <global_stdio_init.part.0+0x30>)
 80088ec:	4c0b      	ldr	r4, [pc, #44]	; (800891c <global_stdio_init.part.0+0x34>)
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <global_stdio_init.part.0+0x38>)
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	4620      	mov	r0, r4
 80088f4:	2200      	movs	r2, #0
 80088f6:	2104      	movs	r1, #4
 80088f8:	f7ff ff94 	bl	8008824 <std>
 80088fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008900:	2201      	movs	r2, #1
 8008902:	2109      	movs	r1, #9
 8008904:	f7ff ff8e 	bl	8008824 <std>
 8008908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800890c:	2202      	movs	r2, #2
 800890e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008912:	2112      	movs	r1, #18
 8008914:	f7ff bf86 	b.w	8008824 <std>
 8008918:	20000b28 	.word	0x20000b28
 800891c:	200009f0 	.word	0x200009f0
 8008920:	08008891 	.word	0x08008891

08008924 <__sfp_lock_acquire>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__sfp_lock_acquire+0x8>)
 8008926:	f000 ba78 	b.w	8008e1a <__retarget_lock_acquire_recursive>
 800892a:	bf00      	nop
 800892c:	20000b31 	.word	0x20000b31

08008930 <__sfp_lock_release>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sfp_lock_release+0x8>)
 8008932:	f000 ba73 	b.w	8008e1c <__retarget_lock_release_recursive>
 8008936:	bf00      	nop
 8008938:	20000b31 	.word	0x20000b31

0800893c <__sinit>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	f7ff fff0 	bl	8008924 <__sfp_lock_acquire>
 8008944:	6a23      	ldr	r3, [r4, #32]
 8008946:	b11b      	cbz	r3, 8008950 <__sinit+0x14>
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	f7ff bff0 	b.w	8008930 <__sfp_lock_release>
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <__sinit+0x28>)
 8008952:	6223      	str	r3, [r4, #32]
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <__sinit+0x2c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f5      	bne.n	8008948 <__sinit+0xc>
 800895c:	f7ff ffc4 	bl	80088e8 <global_stdio_init.part.0>
 8008960:	e7f2      	b.n	8008948 <__sinit+0xc>
 8008962:	bf00      	nop
 8008964:	080088a9 	.word	0x080088a9
 8008968:	20000b28 	.word	0x20000b28

0800896c <_fwalk_sglue>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	4607      	mov	r7, r0
 8008972:	4688      	mov	r8, r1
 8008974:	4614      	mov	r4, r2
 8008976:	2600      	movs	r6, #0
 8008978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800897c:	f1b9 0901 	subs.w	r9, r9, #1
 8008980:	d505      	bpl.n	800898e <_fwalk_sglue+0x22>
 8008982:	6824      	ldr	r4, [r4, #0]
 8008984:	2c00      	cmp	r4, #0
 8008986:	d1f7      	bne.n	8008978 <_fwalk_sglue+0xc>
 8008988:	4630      	mov	r0, r6
 800898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d907      	bls.n	80089a4 <_fwalk_sglue+0x38>
 8008994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008998:	3301      	adds	r3, #1
 800899a:	d003      	beq.n	80089a4 <_fwalk_sglue+0x38>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	47c0      	blx	r8
 80089a2:	4306      	orrs	r6, r0
 80089a4:	3568      	adds	r5, #104	; 0x68
 80089a6:	e7e9      	b.n	800897c <_fwalk_sglue+0x10>

080089a8 <iprintf>:
 80089a8:	b40f      	push	{r0, r1, r2, r3}
 80089aa:	b507      	push	{r0, r1, r2, lr}
 80089ac:	4906      	ldr	r1, [pc, #24]	; (80089c8 <iprintf+0x20>)
 80089ae:	ab04      	add	r3, sp, #16
 80089b0:	6808      	ldr	r0, [r1, #0]
 80089b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b6:	6881      	ldr	r1, [r0, #8]
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	f003 f84b 	bl	800ba54 <_vfiprintf_r>
 80089be:	b003      	add	sp, #12
 80089c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c4:	b004      	add	sp, #16
 80089c6:	4770      	bx	lr
 80089c8:	20000078 	.word	0x20000078

080089cc <_puts_r>:
 80089cc:	6a03      	ldr	r3, [r0, #32]
 80089ce:	b570      	push	{r4, r5, r6, lr}
 80089d0:	6884      	ldr	r4, [r0, #8]
 80089d2:	4605      	mov	r5, r0
 80089d4:	460e      	mov	r6, r1
 80089d6:	b90b      	cbnz	r3, 80089dc <_puts_r+0x10>
 80089d8:	f7ff ffb0 	bl	800893c <__sinit>
 80089dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d405      	bmi.n	80089ee <_puts_r+0x22>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	0598      	lsls	r0, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_puts_r+0x22>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f000 fa16 	bl	8008e1a <__retarget_lock_acquire_recursive>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	0719      	lsls	r1, r3, #28
 80089f2:	d513      	bpl.n	8008a1c <_puts_r+0x50>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	b18b      	cbz	r3, 8008a1c <_puts_r+0x50>
 80089f8:	3e01      	subs	r6, #1
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a00:	3b01      	subs	r3, #1
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	b9e9      	cbnz	r1, 8008a42 <_puts_r+0x76>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da2e      	bge.n	8008a68 <_puts_r+0x9c>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	210a      	movs	r1, #10
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 f8c9 	bl	8008ba6 <__swbuf_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	d007      	beq.n	8008a28 <_puts_r+0x5c>
 8008a18:	250a      	movs	r5, #10
 8008a1a:	e007      	b.n	8008a2c <_puts_r+0x60>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f8fe 	bl	8008c20 <__swsetup_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d0e7      	beq.n	80089f8 <_puts_r+0x2c>
 8008a28:	f04f 35ff 	mov.w	r5, #4294967295
 8008a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a2e:	07da      	lsls	r2, r3, #31
 8008a30:	d405      	bmi.n	8008a3e <_puts_r+0x72>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	059b      	lsls	r3, r3, #22
 8008a36:	d402      	bmi.n	8008a3e <_puts_r+0x72>
 8008a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3a:	f000 f9ef 	bl	8008e1c <__retarget_lock_release_recursive>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da04      	bge.n	8008a50 <_puts_r+0x84>
 8008a46:	69a2      	ldr	r2, [r4, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	dc06      	bgt.n	8008a5a <_puts_r+0x8e>
 8008a4c:	290a      	cmp	r1, #10
 8008a4e:	d004      	beq.n	8008a5a <_puts_r+0x8e>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	7019      	strb	r1, [r3, #0]
 8008a58:	e7cf      	b.n	80089fa <_puts_r+0x2e>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f000 f8a2 	bl	8008ba6 <__swbuf_r>
 8008a62:	3001      	adds	r0, #1
 8008a64:	d1c9      	bne.n	80089fa <_puts_r+0x2e>
 8008a66:	e7df      	b.n	8008a28 <_puts_r+0x5c>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	250a      	movs	r5, #10
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	701d      	strb	r5, [r3, #0]
 8008a72:	e7db      	b.n	8008a2c <_puts_r+0x60>

08008a74 <puts>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <puts+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f7ff bfa7 	b.w	80089cc <_puts_r>
 8008a7e:	bf00      	nop
 8008a80:	20000078 	.word	0x20000078

08008a84 <siprintf>:
 8008a84:	b40e      	push	{r1, r2, r3}
 8008a86:	b500      	push	{lr}
 8008a88:	b09c      	sub	sp, #112	; 0x70
 8008a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a8c:	9002      	str	r0, [sp, #8]
 8008a8e:	9006      	str	r0, [sp, #24]
 8008a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a94:	4809      	ldr	r0, [pc, #36]	; (8008abc <siprintf+0x38>)
 8008a96:	9107      	str	r1, [sp, #28]
 8008a98:	9104      	str	r1, [sp, #16]
 8008a9a:	4909      	ldr	r1, [pc, #36]	; (8008ac0 <siprintf+0x3c>)
 8008a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa0:	9105      	str	r1, [sp, #20]
 8008aa2:	6800      	ldr	r0, [r0, #0]
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	a902      	add	r1, sp, #8
 8008aa8:	f002 fcda 	bl	800b460 <_svfiprintf_r>
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	b01c      	add	sp, #112	; 0x70
 8008ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab8:	b003      	add	sp, #12
 8008aba:	4770      	bx	lr
 8008abc:	20000078 	.word	0x20000078
 8008ac0:	ffff0208 	.word	0xffff0208

08008ac4 <siscanf>:
 8008ac4:	b40e      	push	{r1, r2, r3}
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	b09f      	sub	sp, #124	; 0x7c
 8008aca:	ac21      	add	r4, sp, #132	; 0x84
 8008acc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008ad0:	f854 2b04 	ldr.w	r2, [r4], #4
 8008ad4:	9201      	str	r2, [sp, #4]
 8008ad6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008ada:	9004      	str	r0, [sp, #16]
 8008adc:	9008      	str	r0, [sp, #32]
 8008ade:	f7f7 fbc7 	bl	8000270 <strlen>
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <siscanf+0x50>)
 8008ae4:	9005      	str	r0, [sp, #20]
 8008ae6:	9009      	str	r0, [sp, #36]	; 0x24
 8008ae8:	930d      	str	r3, [sp, #52]	; 0x34
 8008aea:	480b      	ldr	r0, [pc, #44]	; (8008b18 <siscanf+0x54>)
 8008aec:	9a01      	ldr	r2, [sp, #4]
 8008aee:	6800      	ldr	r0, [r0, #0]
 8008af0:	9403      	str	r4, [sp, #12]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9311      	str	r3, [sp, #68]	; 0x44
 8008af6:	9316      	str	r3, [sp, #88]	; 0x58
 8008af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008afc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008b00:	a904      	add	r1, sp, #16
 8008b02:	4623      	mov	r3, r4
 8008b04:	f002 fe04 	bl	800b710 <__ssvfiscanf_r>
 8008b08:	b01f      	add	sp, #124	; 0x7c
 8008b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b0e:	b003      	add	sp, #12
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	20000078 	.word	0x20000078

08008b1c <__sread>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	460c      	mov	r4, r1
 8008b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b24:	f000 f92a 	bl	8008d7c <_read_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	bfab      	itete	ge
 8008b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b30:	181b      	addge	r3, r3, r0
 8008b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b36:	bfac      	ite	ge
 8008b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b3a:	81a3      	strhlt	r3, [r4, #12]
 8008b3c:	bd10      	pop	{r4, pc}

08008b3e <__seofread>:
 8008b3e:	2000      	movs	r0, #0
 8008b40:	4770      	bx	lr

08008b42 <__swrite>:
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	461f      	mov	r7, r3
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	05db      	lsls	r3, r3, #23
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4616      	mov	r6, r2
 8008b52:	d505      	bpl.n	8008b60 <__swrite+0x1e>
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f000 f8fc 	bl	8008d58 <_lseek_r>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	4628      	mov	r0, r5
 8008b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	f000 b913 	b.w	8008da0 <_write_r>

08008b7a <__sseek>:
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 f8e9 	bl	8008d58 <_lseek_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	bf15      	itete	ne
 8008b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b96:	81a3      	strheq	r3, [r4, #12]
 8008b98:	bf18      	it	ne
 8008b9a:	81a3      	strhne	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__sclose>:
 8008b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba2:	f000 b8c9 	b.w	8008d38 <_close_r>

08008ba6 <__swbuf_r>:
 8008ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba8:	460e      	mov	r6, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	4605      	mov	r5, r0
 8008bae:	b118      	cbz	r0, 8008bb8 <__swbuf_r+0x12>
 8008bb0:	6a03      	ldr	r3, [r0, #32]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <__swbuf_r+0x12>
 8008bb4:	f7ff fec2 	bl	800893c <__sinit>
 8008bb8:	69a3      	ldr	r3, [r4, #24]
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	071a      	lsls	r2, r3, #28
 8008bc0:	d525      	bpl.n	8008c0e <__swbuf_r+0x68>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	b31b      	cbz	r3, 8008c0e <__swbuf_r+0x68>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	6922      	ldr	r2, [r4, #16]
 8008bca:	1a98      	subs	r0, r3, r2
 8008bcc:	6963      	ldr	r3, [r4, #20]
 8008bce:	b2f6      	uxtb	r6, r6
 8008bd0:	4283      	cmp	r3, r0
 8008bd2:	4637      	mov	r7, r6
 8008bd4:	dc04      	bgt.n	8008be0 <__swbuf_r+0x3a>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f003 fa29 	bl	800c030 <_fflush_r>
 8008bde:	b9e0      	cbnz	r0, 8008c1a <__swbuf_r+0x74>
 8008be0:	68a3      	ldr	r3, [r4, #8]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	60a3      	str	r3, [r4, #8]
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	701e      	strb	r6, [r3, #0]
 8008bee:	6962      	ldr	r2, [r4, #20]
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d004      	beq.n	8008c00 <__swbuf_r+0x5a>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	07db      	lsls	r3, r3, #31
 8008bfa:	d506      	bpl.n	8008c0a <__swbuf_r+0x64>
 8008bfc:	2e0a      	cmp	r6, #10
 8008bfe:	d104      	bne.n	8008c0a <__swbuf_r+0x64>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	f003 fa14 	bl	800c030 <_fflush_r>
 8008c08:	b938      	cbnz	r0, 8008c1a <__swbuf_r+0x74>
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f805 	bl	8008c20 <__swsetup_r>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d0d5      	beq.n	8008bc6 <__swbuf_r+0x20>
 8008c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c1e:	e7f4      	b.n	8008c0a <__swbuf_r+0x64>

08008c20 <__swsetup_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <__swsetup_r+0xac>)
 8008c24:	4605      	mov	r5, r0
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	460c      	mov	r4, r1
 8008c2a:	b118      	cbz	r0, 8008c34 <__swsetup_r+0x14>
 8008c2c:	6a03      	ldr	r3, [r0, #32]
 8008c2e:	b90b      	cbnz	r3, 8008c34 <__swsetup_r+0x14>
 8008c30:	f7ff fe84 	bl	800893c <__sinit>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c3a:	0718      	lsls	r0, r3, #28
 8008c3c:	d422      	bmi.n	8008c84 <__swsetup_r+0x64>
 8008c3e:	06d9      	lsls	r1, r3, #27
 8008c40:	d407      	bmi.n	8008c52 <__swsetup_r+0x32>
 8008c42:	2309      	movs	r3, #9
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	e034      	b.n	8008cbc <__swsetup_r+0x9c>
 8008c52:	0758      	lsls	r0, r3, #29
 8008c54:	d512      	bpl.n	8008c7c <__swsetup_r+0x5c>
 8008c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c58:	b141      	cbz	r1, 8008c6c <__swsetup_r+0x4c>
 8008c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d002      	beq.n	8008c68 <__swsetup_r+0x48>
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 ff5e 	bl	8009b24 <_free_r>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6363      	str	r3, [r4, #52]	; 0x34
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	2300      	movs	r3, #0
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f043 0308 	orr.w	r3, r3, #8
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	b94b      	cbnz	r3, 8008c9c <__swsetup_r+0x7c>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c92:	d003      	beq.n	8008c9c <__swsetup_r+0x7c>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f003 fa18 	bl	800c0cc <__smakebuf_r>
 8008c9c:	89a0      	ldrh	r0, [r4, #12]
 8008c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca2:	f010 0301 	ands.w	r3, r0, #1
 8008ca6:	d00a      	beq.n	8008cbe <__swsetup_r+0x9e>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60a3      	str	r3, [r4, #8]
 8008cac:	6963      	ldr	r3, [r4, #20]
 8008cae:	425b      	negs	r3, r3
 8008cb0:	61a3      	str	r3, [r4, #24]
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	b943      	cbnz	r3, 8008cc8 <__swsetup_r+0xa8>
 8008cb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cba:	d1c4      	bne.n	8008c46 <__swsetup_r+0x26>
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	0781      	lsls	r1, r0, #30
 8008cc0:	bf58      	it	pl
 8008cc2:	6963      	ldrpl	r3, [r4, #20]
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	e7f4      	b.n	8008cb2 <__swsetup_r+0x92>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7f7      	b.n	8008cbc <__swsetup_r+0x9c>
 8008ccc:	20000078 	.word	0x20000078

08008cd0 <memset>:
 8008cd0:	4402      	add	r2, r0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <strncmp>:
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	b16a      	cbz	r2, 8008d00 <strncmp+0x20>
 8008ce4:	3901      	subs	r1, #1
 8008ce6:	1884      	adds	r4, r0, r2
 8008ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d103      	bne.n	8008cfc <strncmp+0x1c>
 8008cf4:	42a0      	cmp	r0, r4
 8008cf6:	d001      	beq.n	8008cfc <strncmp+0x1c>
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d1f5      	bne.n	8008ce8 <strncmp+0x8>
 8008cfc:	1ad0      	subs	r0, r2, r3
 8008cfe:	bd10      	pop	{r4, pc}
 8008d00:	4610      	mov	r0, r2
 8008d02:	e7fc      	b.n	8008cfe <strncmp+0x1e>

08008d04 <strstr>:
 8008d04:	780a      	ldrb	r2, [r1, #0]
 8008d06:	b570      	push	{r4, r5, r6, lr}
 8008d08:	b96a      	cbnz	r2, 8008d26 <strstr+0x22>
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d109      	bne.n	8008d24 <strstr+0x20>
 8008d10:	460c      	mov	r4, r1
 8008d12:	4605      	mov	r5, r0
 8008d14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0f6      	beq.n	8008d0a <strstr+0x6>
 8008d1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008d20:	429e      	cmp	r6, r3
 8008d22:	d0f7      	beq.n	8008d14 <strstr+0x10>
 8008d24:	3001      	adds	r0, #1
 8008d26:	7803      	ldrb	r3, [r0, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1ef      	bne.n	8008d0c <strstr+0x8>
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	e7ec      	b.n	8008d0a <strstr+0x6>

08008d30 <_localeconv_r>:
 8008d30:	4800      	ldr	r0, [pc, #0]	; (8008d34 <_localeconv_r+0x4>)
 8008d32:	4770      	bx	lr
 8008d34:	2000016c 	.word	0x2000016c

08008d38 <_close_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	; (8008d54 <_close_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7fa fb43 	bl	80033ce <_close>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_close_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_close_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000b2c 	.word	0x20000b2c

08008d58 <_lseek_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	; (8008d78 <_lseek_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7fa fb58 	bl	800341c <_lseek>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_lseek_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_lseek_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000b2c 	.word	0x20000b2c

08008d7c <_read_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_read_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7fa fb02 	bl	8003394 <_read>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_read_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_read_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000b2c 	.word	0x20000b2c

08008da0 <_write_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d07      	ldr	r5, [pc, #28]	; (8008dc0 <_write_r+0x20>)
 8008da4:	4604      	mov	r4, r0
 8008da6:	4608      	mov	r0, r1
 8008da8:	4611      	mov	r1, r2
 8008daa:	2200      	movs	r2, #0
 8008dac:	602a      	str	r2, [r5, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f7f9 fd83 	bl	80028ba <_write>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_write_r+0x1e>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_write_r+0x1e>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20000b2c 	.word	0x20000b2c

08008dc4 <__errno>:
 8008dc4:	4b01      	ldr	r3, [pc, #4]	; (8008dcc <__errno+0x8>)
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20000078 	.word	0x20000078

08008dd0 <__libc_init_array>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4d0d      	ldr	r5, [pc, #52]	; (8008e08 <__libc_init_array+0x38>)
 8008dd4:	4c0d      	ldr	r4, [pc, #52]	; (8008e0c <__libc_init_array+0x3c>)
 8008dd6:	1b64      	subs	r4, r4, r5
 8008dd8:	10a4      	asrs	r4, r4, #2
 8008dda:	2600      	movs	r6, #0
 8008ddc:	42a6      	cmp	r6, r4
 8008dde:	d109      	bne.n	8008df4 <__libc_init_array+0x24>
 8008de0:	4d0b      	ldr	r5, [pc, #44]	; (8008e10 <__libc_init_array+0x40>)
 8008de2:	4c0c      	ldr	r4, [pc, #48]	; (8008e14 <__libc_init_array+0x44>)
 8008de4:	f004 f874 	bl	800ced0 <_init>
 8008de8:	1b64      	subs	r4, r4, r5
 8008dea:	10a4      	asrs	r4, r4, #2
 8008dec:	2600      	movs	r6, #0
 8008dee:	42a6      	cmp	r6, r4
 8008df0:	d105      	bne.n	8008dfe <__libc_init_array+0x2e>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df8:	4798      	blx	r3
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	e7ee      	b.n	8008ddc <__libc_init_array+0xc>
 8008dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e02:	4798      	blx	r3
 8008e04:	3601      	adds	r6, #1
 8008e06:	e7f2      	b.n	8008dee <__libc_init_array+0x1e>
 8008e08:	0800d9b0 	.word	0x0800d9b0
 8008e0c:	0800d9b0 	.word	0x0800d9b0
 8008e10:	0800d9b0 	.word	0x0800d9b0
 8008e14:	0800d9b4 	.word	0x0800d9b4

08008e18 <__retarget_lock_init_recursive>:
 8008e18:	4770      	bx	lr

08008e1a <__retarget_lock_acquire_recursive>:
 8008e1a:	4770      	bx	lr

08008e1c <__retarget_lock_release_recursive>:
 8008e1c:	4770      	bx	lr
	...

08008e20 <nanf>:
 8008e20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e28 <nanf+0x8>
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	7fc00000 	.word	0x7fc00000

08008e2c <quorem>:
 8008e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	6903      	ldr	r3, [r0, #16]
 8008e32:	690c      	ldr	r4, [r1, #16]
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	4607      	mov	r7, r0
 8008e38:	db7e      	blt.n	8008f38 <quorem+0x10c>
 8008e3a:	3c01      	subs	r4, #1
 8008e3c:	f101 0814 	add.w	r8, r1, #20
 8008e40:	f100 0514 	add.w	r5, r0, #20
 8008e44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e52:	3301      	adds	r3, #1
 8008e54:	429a      	cmp	r2, r3
 8008e56:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e62:	d331      	bcc.n	8008ec8 <quorem+0x9c>
 8008e64:	f04f 0e00 	mov.w	lr, #0
 8008e68:	4640      	mov	r0, r8
 8008e6a:	46ac      	mov	ip, r5
 8008e6c:	46f2      	mov	sl, lr
 8008e6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e72:	b293      	uxth	r3, r2
 8008e74:	fb06 e303 	mla	r3, r6, r3, lr
 8008e78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e7c:	0c1a      	lsrs	r2, r3, #16
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ebaa 0303 	sub.w	r3, sl, r3
 8008e84:	f8dc a000 	ldr.w	sl, [ip]
 8008e88:	fa13 f38a 	uxtah	r3, r3, sl
 8008e8c:	fb06 220e 	mla	r2, r6, lr, r2
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	9b00      	ldr	r3, [sp, #0]
 8008e94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e98:	b292      	uxth	r2, r2
 8008e9a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ea2:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ea6:	4581      	cmp	r9, r0
 8008ea8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eac:	f84c 3b04 	str.w	r3, [ip], #4
 8008eb0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008eb4:	d2db      	bcs.n	8008e6e <quorem+0x42>
 8008eb6:	f855 300b 	ldr.w	r3, [r5, fp]
 8008eba:	b92b      	cbnz	r3, 8008ec8 <quorem+0x9c>
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	3b04      	subs	r3, #4
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	d32c      	bcc.n	8008f20 <quorem+0xf4>
 8008ec6:	613c      	str	r4, [r7, #16]
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f001 f9f1 	bl	800a2b0 <__mcmp>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	db22      	blt.n	8008f18 <quorem+0xec>
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008edc:	f8d1 c000 	ldr.w	ip, [r1]
 8008ee0:	b293      	uxth	r3, r2
 8008ee2:	1ac3      	subs	r3, r0, r3
 8008ee4:	0c12      	lsrs	r2, r2, #16
 8008ee6:	fa13 f38c 	uxtah	r3, r3, ip
 8008eea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008eee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ef8:	45c1      	cmp	r9, r8
 8008efa:	f841 3b04 	str.w	r3, [r1], #4
 8008efe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f02:	d2e9      	bcs.n	8008ed8 <quorem+0xac>
 8008f04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f0c:	b922      	cbnz	r2, 8008f18 <quorem+0xec>
 8008f0e:	3b04      	subs	r3, #4
 8008f10:	429d      	cmp	r5, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	d30a      	bcc.n	8008f2c <quorem+0x100>
 8008f16:	613c      	str	r4, [r7, #16]
 8008f18:	4630      	mov	r0, r6
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	6812      	ldr	r2, [r2, #0]
 8008f22:	3b04      	subs	r3, #4
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	d1ce      	bne.n	8008ec6 <quorem+0x9a>
 8008f28:	3c01      	subs	r4, #1
 8008f2a:	e7c9      	b.n	8008ec0 <quorem+0x94>
 8008f2c:	6812      	ldr	r2, [r2, #0]
 8008f2e:	3b04      	subs	r3, #4
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	d1f0      	bne.n	8008f16 <quorem+0xea>
 8008f34:	3c01      	subs	r4, #1
 8008f36:	e7eb      	b.n	8008f10 <quorem+0xe4>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e7ee      	b.n	8008f1a <quorem+0xee>
 8008f3c:	0000      	movs	r0, r0
	...

08008f40 <_dtoa_r>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	ed2d 8b04 	vpush	{d8-d9}
 8008f48:	69c5      	ldr	r5, [r0, #28]
 8008f4a:	b093      	sub	sp, #76	; 0x4c
 8008f4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f50:	ec57 6b10 	vmov	r6, r7, d0
 8008f54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f58:	9107      	str	r1, [sp, #28]
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f60:	b975      	cbnz	r5, 8008f80 <_dtoa_r+0x40>
 8008f62:	2010      	movs	r0, #16
 8008f64:	f000 fe2a 	bl	8009bbc <malloc>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	61e0      	str	r0, [r4, #28]
 8008f6c:	b920      	cbnz	r0, 8008f78 <_dtoa_r+0x38>
 8008f6e:	4bae      	ldr	r3, [pc, #696]	; (8009228 <_dtoa_r+0x2e8>)
 8008f70:	21ef      	movs	r1, #239	; 0xef
 8008f72:	48ae      	ldr	r0, [pc, #696]	; (800922c <_dtoa_r+0x2ec>)
 8008f74:	f003 f9bc 	bl	800c2f0 <__assert_func>
 8008f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f7c:	6005      	str	r5, [r0, #0]
 8008f7e:	60c5      	str	r5, [r0, #12]
 8008f80:	69e3      	ldr	r3, [r4, #28]
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	b151      	cbz	r1, 8008f9c <_dtoa_r+0x5c>
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	604a      	str	r2, [r1, #4]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4093      	lsls	r3, r2
 8008f8e:	608b      	str	r3, [r1, #8]
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 ff07 	bl	8009da4 <_Bfree>
 8008f96:	69e3      	ldr	r3, [r4, #28]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	1e3b      	subs	r3, r7, #0
 8008f9e:	bfbb      	ittet	lt
 8008fa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fa4:	9303      	strlt	r3, [sp, #12]
 8008fa6:	2300      	movge	r3, #0
 8008fa8:	2201      	movlt	r2, #1
 8008faa:	bfac      	ite	ge
 8008fac:	f8c8 3000 	strge.w	r3, [r8]
 8008fb0:	f8c8 2000 	strlt.w	r2, [r8]
 8008fb4:	4b9e      	ldr	r3, [pc, #632]	; (8009230 <_dtoa_r+0x2f0>)
 8008fb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008fba:	ea33 0308 	bics.w	r3, r3, r8
 8008fbe:	d11b      	bne.n	8008ff8 <_dtoa_r+0xb8>
 8008fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008fcc:	4333      	orrs	r3, r6
 8008fce:	f000 8593 	beq.w	8009af8 <_dtoa_r+0xbb8>
 8008fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd4:	b963      	cbnz	r3, 8008ff0 <_dtoa_r+0xb0>
 8008fd6:	4b97      	ldr	r3, [pc, #604]	; (8009234 <_dtoa_r+0x2f4>)
 8008fd8:	e027      	b.n	800902a <_dtoa_r+0xea>
 8008fda:	4b97      	ldr	r3, [pc, #604]	; (8009238 <_dtoa_r+0x2f8>)
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	9800      	ldr	r0, [sp, #0]
 8008fe6:	b013      	add	sp, #76	; 0x4c
 8008fe8:	ecbd 8b04 	vpop	{d8-d9}
 8008fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff0:	4b90      	ldr	r3, [pc, #576]	; (8009234 <_dtoa_r+0x2f4>)
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	3303      	adds	r3, #3
 8008ff6:	e7f3      	b.n	8008fe0 <_dtoa_r+0xa0>
 8008ff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	ec51 0b17 	vmov	r0, r1, d7
 8009002:	eeb0 8a47 	vmov.f32	s16, s14
 8009006:	eef0 8a67 	vmov.f32	s17, s15
 800900a:	2300      	movs	r3, #0
 800900c:	f7f7 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009010:	4681      	mov	r9, r0
 8009012:	b160      	cbz	r0, 800902e <_dtoa_r+0xee>
 8009014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009016:	2301      	movs	r3, #1
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8568 	beq.w	8009af2 <_dtoa_r+0xbb2>
 8009022:	4b86      	ldr	r3, [pc, #536]	; (800923c <_dtoa_r+0x2fc>)
 8009024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	3b01      	subs	r3, #1
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	e7da      	b.n	8008fe4 <_dtoa_r+0xa4>
 800902e:	aa10      	add	r2, sp, #64	; 0x40
 8009030:	a911      	add	r1, sp, #68	; 0x44
 8009032:	4620      	mov	r0, r4
 8009034:	eeb0 0a48 	vmov.f32	s0, s16
 8009038:	eef0 0a68 	vmov.f32	s1, s17
 800903c:	f001 fa4e 	bl	800a4dc <__d2b>
 8009040:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009044:	4682      	mov	sl, r0
 8009046:	2d00      	cmp	r5, #0
 8009048:	d07f      	beq.n	800914a <_dtoa_r+0x20a>
 800904a:	ee18 3a90 	vmov	r3, s17
 800904e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009052:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009056:	ec51 0b18 	vmov	r0, r1, d8
 800905a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800905e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009062:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009066:	4619      	mov	r1, r3
 8009068:	2200      	movs	r2, #0
 800906a:	4b75      	ldr	r3, [pc, #468]	; (8009240 <_dtoa_r+0x300>)
 800906c:	f7f7 f90c 	bl	8000288 <__aeabi_dsub>
 8009070:	a367      	add	r3, pc, #412	; (adr r3, 8009210 <_dtoa_r+0x2d0>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f7f7 fabf 	bl	80005f8 <__aeabi_dmul>
 800907a:	a367      	add	r3, pc, #412	; (adr r3, 8009218 <_dtoa_r+0x2d8>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 f904 	bl	800028c <__adddf3>
 8009084:	4606      	mov	r6, r0
 8009086:	4628      	mov	r0, r5
 8009088:	460f      	mov	r7, r1
 800908a:	f7f7 fa4b 	bl	8000524 <__aeabi_i2d>
 800908e:	a364      	add	r3, pc, #400	; (adr r3, 8009220 <_dtoa_r+0x2e0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4630      	mov	r0, r6
 800909e:	4639      	mov	r1, r7
 80090a0:	f7f7 f8f4 	bl	800028c <__adddf3>
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	f7f7 fd56 	bl	8000b58 <__aeabi_d2iz>
 80090ac:	2200      	movs	r2, #0
 80090ae:	4683      	mov	fp, r0
 80090b0:	2300      	movs	r3, #0
 80090b2:	4630      	mov	r0, r6
 80090b4:	4639      	mov	r1, r7
 80090b6:	f7f7 fd11 	bl	8000adc <__aeabi_dcmplt>
 80090ba:	b148      	cbz	r0, 80090d0 <_dtoa_r+0x190>
 80090bc:	4658      	mov	r0, fp
 80090be:	f7f7 fa31 	bl	8000524 <__aeabi_i2d>
 80090c2:	4632      	mov	r2, r6
 80090c4:	463b      	mov	r3, r7
 80090c6:	f7f7 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ca:	b908      	cbnz	r0, 80090d0 <_dtoa_r+0x190>
 80090cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090d0:	f1bb 0f16 	cmp.w	fp, #22
 80090d4:	d857      	bhi.n	8009186 <_dtoa_r+0x246>
 80090d6:	4b5b      	ldr	r3, [pc, #364]	; (8009244 <_dtoa_r+0x304>)
 80090d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	ec51 0b18 	vmov	r0, r1, d8
 80090e4:	f7f7 fcfa 	bl	8000adc <__aeabi_dcmplt>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d04e      	beq.n	800918a <_dtoa_r+0x24a>
 80090ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090f0:	2300      	movs	r3, #0
 80090f2:	930c      	str	r3, [sp, #48]	; 0x30
 80090f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090f6:	1b5b      	subs	r3, r3, r5
 80090f8:	1e5a      	subs	r2, r3, #1
 80090fa:	bf45      	ittet	mi
 80090fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009100:	9305      	strmi	r3, [sp, #20]
 8009102:	2300      	movpl	r3, #0
 8009104:	2300      	movmi	r3, #0
 8009106:	9206      	str	r2, [sp, #24]
 8009108:	bf54      	ite	pl
 800910a:	9305      	strpl	r3, [sp, #20]
 800910c:	9306      	strmi	r3, [sp, #24]
 800910e:	f1bb 0f00 	cmp.w	fp, #0
 8009112:	db3c      	blt.n	800918e <_dtoa_r+0x24e>
 8009114:	9b06      	ldr	r3, [sp, #24]
 8009116:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800911a:	445b      	add	r3, fp
 800911c:	9306      	str	r3, [sp, #24]
 800911e:	2300      	movs	r3, #0
 8009120:	9308      	str	r3, [sp, #32]
 8009122:	9b07      	ldr	r3, [sp, #28]
 8009124:	2b09      	cmp	r3, #9
 8009126:	d868      	bhi.n	80091fa <_dtoa_r+0x2ba>
 8009128:	2b05      	cmp	r3, #5
 800912a:	bfc4      	itt	gt
 800912c:	3b04      	subgt	r3, #4
 800912e:	9307      	strgt	r3, [sp, #28]
 8009130:	9b07      	ldr	r3, [sp, #28]
 8009132:	f1a3 0302 	sub.w	r3, r3, #2
 8009136:	bfcc      	ite	gt
 8009138:	2500      	movgt	r5, #0
 800913a:	2501      	movle	r5, #1
 800913c:	2b03      	cmp	r3, #3
 800913e:	f200 8085 	bhi.w	800924c <_dtoa_r+0x30c>
 8009142:	e8df f003 	tbb	[pc, r3]
 8009146:	3b2e      	.short	0x3b2e
 8009148:	5839      	.short	0x5839
 800914a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800914e:	441d      	add	r5, r3
 8009150:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009154:	2b20      	cmp	r3, #32
 8009156:	bfc1      	itttt	gt
 8009158:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800915c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009160:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009164:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009168:	bfd6      	itet	le
 800916a:	f1c3 0320 	rsble	r3, r3, #32
 800916e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009172:	fa06 f003 	lslle.w	r0, r6, r3
 8009176:	f7f7 f9c5 	bl	8000504 <__aeabi_ui2d>
 800917a:	2201      	movs	r2, #1
 800917c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009180:	3d01      	subs	r5, #1
 8009182:	920e      	str	r2, [sp, #56]	; 0x38
 8009184:	e76f      	b.n	8009066 <_dtoa_r+0x126>
 8009186:	2301      	movs	r3, #1
 8009188:	e7b3      	b.n	80090f2 <_dtoa_r+0x1b2>
 800918a:	900c      	str	r0, [sp, #48]	; 0x30
 800918c:	e7b2      	b.n	80090f4 <_dtoa_r+0x1b4>
 800918e:	9b05      	ldr	r3, [sp, #20]
 8009190:	eba3 030b 	sub.w	r3, r3, fp
 8009194:	9305      	str	r3, [sp, #20]
 8009196:	f1cb 0300 	rsb	r3, fp, #0
 800919a:	9308      	str	r3, [sp, #32]
 800919c:	2300      	movs	r3, #0
 800919e:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a0:	e7bf      	b.n	8009122 <_dtoa_r+0x1e2>
 80091a2:	2300      	movs	r3, #0
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dc52      	bgt.n	8009252 <_dtoa_r+0x312>
 80091ac:	2301      	movs	r3, #1
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	461a      	mov	r2, r3
 80091b4:	920a      	str	r2, [sp, #40]	; 0x28
 80091b6:	e00b      	b.n	80091d0 <_dtoa_r+0x290>
 80091b8:	2301      	movs	r3, #1
 80091ba:	e7f3      	b.n	80091a4 <_dtoa_r+0x264>
 80091bc:	2300      	movs	r3, #0
 80091be:	9309      	str	r3, [sp, #36]	; 0x24
 80091c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c2:	445b      	add	r3, fp
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	3301      	adds	r3, #1
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	bfb8      	it	lt
 80091ce:	2301      	movlt	r3, #1
 80091d0:	69e0      	ldr	r0, [r4, #28]
 80091d2:	2100      	movs	r1, #0
 80091d4:	2204      	movs	r2, #4
 80091d6:	f102 0614 	add.w	r6, r2, #20
 80091da:	429e      	cmp	r6, r3
 80091dc:	d93d      	bls.n	800925a <_dtoa_r+0x31a>
 80091de:	6041      	str	r1, [r0, #4]
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fd9f 	bl	8009d24 <_Balloc>
 80091e6:	9000      	str	r0, [sp, #0]
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d139      	bne.n	8009260 <_dtoa_r+0x320>
 80091ec:	4b16      	ldr	r3, [pc, #88]	; (8009248 <_dtoa_r+0x308>)
 80091ee:	4602      	mov	r2, r0
 80091f0:	f240 11af 	movw	r1, #431	; 0x1af
 80091f4:	e6bd      	b.n	8008f72 <_dtoa_r+0x32>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e7e1      	b.n	80091be <_dtoa_r+0x27e>
 80091fa:	2501      	movs	r5, #1
 80091fc:	2300      	movs	r3, #0
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	9509      	str	r5, [sp, #36]	; 0x24
 8009202:	f04f 33ff 	mov.w	r3, #4294967295
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	2200      	movs	r2, #0
 800920c:	2312      	movs	r3, #18
 800920e:	e7d1      	b.n	80091b4 <_dtoa_r+0x274>
 8009210:	636f4361 	.word	0x636f4361
 8009214:	3fd287a7 	.word	0x3fd287a7
 8009218:	8b60c8b3 	.word	0x8b60c8b3
 800921c:	3fc68a28 	.word	0x3fc68a28
 8009220:	509f79fb 	.word	0x509f79fb
 8009224:	3fd34413 	.word	0x3fd34413
 8009228:	0800d594 	.word	0x0800d594
 800922c:	0800d5ab 	.word	0x0800d5ab
 8009230:	7ff00000 	.word	0x7ff00000
 8009234:	0800d590 	.word	0x0800d590
 8009238:	0800d587 	.word	0x0800d587
 800923c:	0800d8e9 	.word	0x0800d8e9
 8009240:	3ff80000 	.word	0x3ff80000
 8009244:	0800d698 	.word	0x0800d698
 8009248:	0800d603 	.word	0x0800d603
 800924c:	2301      	movs	r3, #1
 800924e:	9309      	str	r3, [sp, #36]	; 0x24
 8009250:	e7d7      	b.n	8009202 <_dtoa_r+0x2c2>
 8009252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	e7ba      	b.n	80091d0 <_dtoa_r+0x290>
 800925a:	3101      	adds	r1, #1
 800925c:	0052      	lsls	r2, r2, #1
 800925e:	e7ba      	b.n	80091d6 <_dtoa_r+0x296>
 8009260:	69e3      	ldr	r3, [r4, #28]
 8009262:	9a00      	ldr	r2, [sp, #0]
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	2b0e      	cmp	r3, #14
 800926a:	f200 80a8 	bhi.w	80093be <_dtoa_r+0x47e>
 800926e:	2d00      	cmp	r5, #0
 8009270:	f000 80a5 	beq.w	80093be <_dtoa_r+0x47e>
 8009274:	f1bb 0f00 	cmp.w	fp, #0
 8009278:	dd38      	ble.n	80092ec <_dtoa_r+0x3ac>
 800927a:	4bc0      	ldr	r3, [pc, #768]	; (800957c <_dtoa_r+0x63c>)
 800927c:	f00b 020f 	and.w	r2, fp, #15
 8009280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009284:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009288:	e9d3 6700 	ldrd	r6, r7, [r3]
 800928c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009290:	d019      	beq.n	80092c6 <_dtoa_r+0x386>
 8009292:	4bbb      	ldr	r3, [pc, #748]	; (8009580 <_dtoa_r+0x640>)
 8009294:	ec51 0b18 	vmov	r0, r1, d8
 8009298:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800929c:	f7f7 fad6 	bl	800084c <__aeabi_ddiv>
 80092a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a4:	f008 080f 	and.w	r8, r8, #15
 80092a8:	2503      	movs	r5, #3
 80092aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009580 <_dtoa_r+0x640>
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	d10a      	bne.n	80092ca <_dtoa_r+0x38a>
 80092b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b8:	4632      	mov	r2, r6
 80092ba:	463b      	mov	r3, r7
 80092bc:	f7f7 fac6 	bl	800084c <__aeabi_ddiv>
 80092c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092c4:	e02b      	b.n	800931e <_dtoa_r+0x3de>
 80092c6:	2502      	movs	r5, #2
 80092c8:	e7ef      	b.n	80092aa <_dtoa_r+0x36a>
 80092ca:	f018 0f01 	tst.w	r8, #1
 80092ce:	d008      	beq.n	80092e2 <_dtoa_r+0x3a2>
 80092d0:	4630      	mov	r0, r6
 80092d2:	4639      	mov	r1, r7
 80092d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	3501      	adds	r5, #1
 80092de:	4606      	mov	r6, r0
 80092e0:	460f      	mov	r7, r1
 80092e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092e6:	f109 0908 	add.w	r9, r9, #8
 80092ea:	e7e0      	b.n	80092ae <_dtoa_r+0x36e>
 80092ec:	f000 809f 	beq.w	800942e <_dtoa_r+0x4ee>
 80092f0:	f1cb 0600 	rsb	r6, fp, #0
 80092f4:	4ba1      	ldr	r3, [pc, #644]	; (800957c <_dtoa_r+0x63c>)
 80092f6:	4fa2      	ldr	r7, [pc, #648]	; (8009580 <_dtoa_r+0x640>)
 80092f8:	f006 020f 	and.w	r2, r6, #15
 80092fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	ec51 0b18 	vmov	r0, r1, d8
 8009308:	f7f7 f976 	bl	80005f8 <__aeabi_dmul>
 800930c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009310:	1136      	asrs	r6, r6, #4
 8009312:	2300      	movs	r3, #0
 8009314:	2502      	movs	r5, #2
 8009316:	2e00      	cmp	r6, #0
 8009318:	d17e      	bne.n	8009418 <_dtoa_r+0x4d8>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1d0      	bne.n	80092c0 <_dtoa_r+0x380>
 800931e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009320:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8084 	beq.w	8009432 <_dtoa_r+0x4f2>
 800932a:	4b96      	ldr	r3, [pc, #600]	; (8009584 <_dtoa_r+0x644>)
 800932c:	2200      	movs	r2, #0
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f7 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8009336:	2800      	cmp	r0, #0
 8009338:	d07b      	beq.n	8009432 <_dtoa_r+0x4f2>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d078      	beq.n	8009432 <_dtoa_r+0x4f2>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd39      	ble.n	80093ba <_dtoa_r+0x47a>
 8009346:	4b90      	ldr	r3, [pc, #576]	; (8009588 <_dtoa_r+0x648>)
 8009348:	2200      	movs	r2, #0
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f7 f953 	bl	80005f8 <__aeabi_dmul>
 8009352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009356:	9e01      	ldr	r6, [sp, #4]
 8009358:	f10b 37ff 	add.w	r7, fp, #4294967295
 800935c:	3501      	adds	r5, #1
 800935e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009362:	4628      	mov	r0, r5
 8009364:	f7f7 f8de 	bl	8000524 <__aeabi_i2d>
 8009368:	4642      	mov	r2, r8
 800936a:	464b      	mov	r3, r9
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	4b86      	ldr	r3, [pc, #536]	; (800958c <_dtoa_r+0x64c>)
 8009372:	2200      	movs	r2, #0
 8009374:	f7f6 ff8a 	bl	800028c <__adddf3>
 8009378:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800937c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009380:	9303      	str	r3, [sp, #12]
 8009382:	2e00      	cmp	r6, #0
 8009384:	d158      	bne.n	8009438 <_dtoa_r+0x4f8>
 8009386:	4b82      	ldr	r3, [pc, #520]	; (8009590 <_dtoa_r+0x650>)
 8009388:	2200      	movs	r2, #0
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f6 ff7b 	bl	8000288 <__aeabi_dsub>
 8009392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009396:	4680      	mov	r8, r0
 8009398:	4689      	mov	r9, r1
 800939a:	f7f7 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f040 8296 	bne.w	80098d0 <_dtoa_r+0x990>
 80093a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80093a8:	4640      	mov	r0, r8
 80093aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f7 fb94 	bl	8000adc <__aeabi_dcmplt>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f040 8289 	bne.w	80098cc <_dtoa_r+0x98c>
 80093ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f2c0 814e 	blt.w	8009662 <_dtoa_r+0x722>
 80093c6:	f1bb 0f0e 	cmp.w	fp, #14
 80093ca:	f300 814a 	bgt.w	8009662 <_dtoa_r+0x722>
 80093ce:	4b6b      	ldr	r3, [pc, #428]	; (800957c <_dtoa_r+0x63c>)
 80093d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f280 80dc 	bge.w	8009598 <_dtoa_r+0x658>
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f300 80d8 	bgt.w	8009598 <_dtoa_r+0x658>
 80093e8:	f040 826f 	bne.w	80098ca <_dtoa_r+0x98a>
 80093ec:	4b68      	ldr	r3, [pc, #416]	; (8009590 <_dtoa_r+0x650>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 f900 	bl	80005f8 <__aeabi_dmul>
 80093f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093fc:	f7f7 fb82 	bl	8000b04 <__aeabi_dcmpge>
 8009400:	9e04      	ldr	r6, [sp, #16]
 8009402:	4637      	mov	r7, r6
 8009404:	2800      	cmp	r0, #0
 8009406:	f040 8245 	bne.w	8009894 <_dtoa_r+0x954>
 800940a:	9d00      	ldr	r5, [sp, #0]
 800940c:	2331      	movs	r3, #49	; 0x31
 800940e:	f805 3b01 	strb.w	r3, [r5], #1
 8009412:	f10b 0b01 	add.w	fp, fp, #1
 8009416:	e241      	b.n	800989c <_dtoa_r+0x95c>
 8009418:	07f2      	lsls	r2, r6, #31
 800941a:	d505      	bpl.n	8009428 <_dtoa_r+0x4e8>
 800941c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	3501      	adds	r5, #1
 8009426:	2301      	movs	r3, #1
 8009428:	1076      	asrs	r6, r6, #1
 800942a:	3708      	adds	r7, #8
 800942c:	e773      	b.n	8009316 <_dtoa_r+0x3d6>
 800942e:	2502      	movs	r5, #2
 8009430:	e775      	b.n	800931e <_dtoa_r+0x3de>
 8009432:	9e04      	ldr	r6, [sp, #16]
 8009434:	465f      	mov	r7, fp
 8009436:	e792      	b.n	800935e <_dtoa_r+0x41e>
 8009438:	9900      	ldr	r1, [sp, #0]
 800943a:	4b50      	ldr	r3, [pc, #320]	; (800957c <_dtoa_r+0x63c>)
 800943c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009440:	4431      	add	r1, r6
 8009442:	9102      	str	r1, [sp, #8]
 8009444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009446:	eeb0 9a47 	vmov.f32	s18, s14
 800944a:	eef0 9a67 	vmov.f32	s19, s15
 800944e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009452:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009456:	2900      	cmp	r1, #0
 8009458:	d044      	beq.n	80094e4 <_dtoa_r+0x5a4>
 800945a:	494e      	ldr	r1, [pc, #312]	; (8009594 <_dtoa_r+0x654>)
 800945c:	2000      	movs	r0, #0
 800945e:	f7f7 f9f5 	bl	800084c <__aeabi_ddiv>
 8009462:	ec53 2b19 	vmov	r2, r3, d9
 8009466:	f7f6 ff0f 	bl	8000288 <__aeabi_dsub>
 800946a:	9d00      	ldr	r5, [sp, #0]
 800946c:	ec41 0b19 	vmov	d9, r0, r1
 8009470:	4649      	mov	r1, r9
 8009472:	4640      	mov	r0, r8
 8009474:	f7f7 fb70 	bl	8000b58 <__aeabi_d2iz>
 8009478:	4606      	mov	r6, r0
 800947a:	f7f7 f853 	bl	8000524 <__aeabi_i2d>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4640      	mov	r0, r8
 8009484:	4649      	mov	r1, r9
 8009486:	f7f6 feff 	bl	8000288 <__aeabi_dsub>
 800948a:	3630      	adds	r6, #48	; 0x30
 800948c:	f805 6b01 	strb.w	r6, [r5], #1
 8009490:	ec53 2b19 	vmov	r2, r3, d9
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	f7f7 fb20 	bl	8000adc <__aeabi_dcmplt>
 800949c:	2800      	cmp	r0, #0
 800949e:	d164      	bne.n	800956a <_dtoa_r+0x62a>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	4937      	ldr	r1, [pc, #220]	; (8009584 <_dtoa_r+0x644>)
 80094a6:	2000      	movs	r0, #0
 80094a8:	f7f6 feee 	bl	8000288 <__aeabi_dsub>
 80094ac:	ec53 2b19 	vmov	r2, r3, d9
 80094b0:	f7f7 fb14 	bl	8000adc <__aeabi_dcmplt>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	f040 80b6 	bne.w	8009626 <_dtoa_r+0x6e6>
 80094ba:	9b02      	ldr	r3, [sp, #8]
 80094bc:	429d      	cmp	r5, r3
 80094be:	f43f af7c 	beq.w	80093ba <_dtoa_r+0x47a>
 80094c2:	4b31      	ldr	r3, [pc, #196]	; (8009588 <_dtoa_r+0x648>)
 80094c4:	ec51 0b19 	vmov	r0, r1, d9
 80094c8:	2200      	movs	r2, #0
 80094ca:	f7f7 f895 	bl	80005f8 <__aeabi_dmul>
 80094ce:	4b2e      	ldr	r3, [pc, #184]	; (8009588 <_dtoa_r+0x648>)
 80094d0:	ec41 0b19 	vmov	d9, r0, r1
 80094d4:	2200      	movs	r2, #0
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f7 f88d 	bl	80005f8 <__aeabi_dmul>
 80094de:	4680      	mov	r8, r0
 80094e0:	4689      	mov	r9, r1
 80094e2:	e7c5      	b.n	8009470 <_dtoa_r+0x530>
 80094e4:	ec51 0b17 	vmov	r0, r1, d7
 80094e8:	f7f7 f886 	bl	80005f8 <__aeabi_dmul>
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	9d00      	ldr	r5, [sp, #0]
 80094f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094f2:	ec41 0b19 	vmov	d9, r0, r1
 80094f6:	4649      	mov	r1, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	f7f7 fb2d 	bl	8000b58 <__aeabi_d2iz>
 80094fe:	4606      	mov	r6, r0
 8009500:	f7f7 f810 	bl	8000524 <__aeabi_i2d>
 8009504:	3630      	adds	r6, #48	; 0x30
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4640      	mov	r0, r8
 800950c:	4649      	mov	r1, r9
 800950e:	f7f6 febb 	bl	8000288 <__aeabi_dsub>
 8009512:	f805 6b01 	strb.w	r6, [r5], #1
 8009516:	9b02      	ldr	r3, [sp, #8]
 8009518:	429d      	cmp	r5, r3
 800951a:	4680      	mov	r8, r0
 800951c:	4689      	mov	r9, r1
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	d124      	bne.n	800956e <_dtoa_r+0x62e>
 8009524:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <_dtoa_r+0x654>)
 8009526:	ec51 0b19 	vmov	r0, r1, d9
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f7 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800953a:	2800      	cmp	r0, #0
 800953c:	d173      	bne.n	8009626 <_dtoa_r+0x6e6>
 800953e:	ec53 2b19 	vmov	r2, r3, d9
 8009542:	4914      	ldr	r1, [pc, #80]	; (8009594 <_dtoa_r+0x654>)
 8009544:	2000      	movs	r0, #0
 8009546:	f7f6 fe9f 	bl	8000288 <__aeabi_dsub>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4640      	mov	r0, r8
 8009550:	4649      	mov	r1, r9
 8009552:	f7f7 fac3 	bl	8000adc <__aeabi_dcmplt>
 8009556:	2800      	cmp	r0, #0
 8009558:	f43f af2f 	beq.w	80093ba <_dtoa_r+0x47a>
 800955c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800955e:	1e6b      	subs	r3, r5, #1
 8009560:	930f      	str	r3, [sp, #60]	; 0x3c
 8009562:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009566:	2b30      	cmp	r3, #48	; 0x30
 8009568:	d0f8      	beq.n	800955c <_dtoa_r+0x61c>
 800956a:	46bb      	mov	fp, r7
 800956c:	e04a      	b.n	8009604 <_dtoa_r+0x6c4>
 800956e:	4b06      	ldr	r3, [pc, #24]	; (8009588 <_dtoa_r+0x648>)
 8009570:	f7f7 f842 	bl	80005f8 <__aeabi_dmul>
 8009574:	4680      	mov	r8, r0
 8009576:	4689      	mov	r9, r1
 8009578:	e7bd      	b.n	80094f6 <_dtoa_r+0x5b6>
 800957a:	bf00      	nop
 800957c:	0800d698 	.word	0x0800d698
 8009580:	0800d670 	.word	0x0800d670
 8009584:	3ff00000 	.word	0x3ff00000
 8009588:	40240000 	.word	0x40240000
 800958c:	401c0000 	.word	0x401c0000
 8009590:	40140000 	.word	0x40140000
 8009594:	3fe00000 	.word	0x3fe00000
 8009598:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800959c:	9d00      	ldr	r5, [sp, #0]
 800959e:	4642      	mov	r2, r8
 80095a0:	464b      	mov	r3, r9
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f7 f951 	bl	800084c <__aeabi_ddiv>
 80095aa:	f7f7 fad5 	bl	8000b58 <__aeabi_d2iz>
 80095ae:	9001      	str	r0, [sp, #4]
 80095b0:	f7f6 ffb8 	bl	8000524 <__aeabi_i2d>
 80095b4:	4642      	mov	r2, r8
 80095b6:	464b      	mov	r3, r9
 80095b8:	f7f7 f81e 	bl	80005f8 <__aeabi_dmul>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4630      	mov	r0, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	f7f6 fe60 	bl	8000288 <__aeabi_dsub>
 80095c8:	9e01      	ldr	r6, [sp, #4]
 80095ca:	9f04      	ldr	r7, [sp, #16]
 80095cc:	3630      	adds	r6, #48	; 0x30
 80095ce:	f805 6b01 	strb.w	r6, [r5], #1
 80095d2:	9e00      	ldr	r6, [sp, #0]
 80095d4:	1bae      	subs	r6, r5, r6
 80095d6:	42b7      	cmp	r7, r6
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	d134      	bne.n	8009648 <_dtoa_r+0x708>
 80095de:	f7f6 fe55 	bl	800028c <__adddf3>
 80095e2:	4642      	mov	r2, r8
 80095e4:	464b      	mov	r3, r9
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	f7f7 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 80095ee:	b9c8      	cbnz	r0, 8009624 <_dtoa_r+0x6e4>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80095fc:	b110      	cbz	r0, 8009604 <_dtoa_r+0x6c4>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	07db      	lsls	r3, r3, #31
 8009602:	d40f      	bmi.n	8009624 <_dtoa_r+0x6e4>
 8009604:	4651      	mov	r1, sl
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fbcc 	bl	8009da4 <_Bfree>
 800960c:	2300      	movs	r3, #0
 800960e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009610:	702b      	strb	r3, [r5, #0]
 8009612:	f10b 0301 	add.w	r3, fp, #1
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800961a:	2b00      	cmp	r3, #0
 800961c:	f43f ace2 	beq.w	8008fe4 <_dtoa_r+0xa4>
 8009620:	601d      	str	r5, [r3, #0]
 8009622:	e4df      	b.n	8008fe4 <_dtoa_r+0xa4>
 8009624:	465f      	mov	r7, fp
 8009626:	462b      	mov	r3, r5
 8009628:	461d      	mov	r5, r3
 800962a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800962e:	2a39      	cmp	r2, #57	; 0x39
 8009630:	d106      	bne.n	8009640 <_dtoa_r+0x700>
 8009632:	9a00      	ldr	r2, [sp, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d1f7      	bne.n	8009628 <_dtoa_r+0x6e8>
 8009638:	9900      	ldr	r1, [sp, #0]
 800963a:	2230      	movs	r2, #48	; 0x30
 800963c:	3701      	adds	r7, #1
 800963e:	700a      	strb	r2, [r1, #0]
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	3201      	adds	r2, #1
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e790      	b.n	800956a <_dtoa_r+0x62a>
 8009648:	4ba3      	ldr	r3, [pc, #652]	; (80098d8 <_dtoa_r+0x998>)
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 ffd4 	bl	80005f8 <__aeabi_dmul>
 8009650:	2200      	movs	r2, #0
 8009652:	2300      	movs	r3, #0
 8009654:	4606      	mov	r6, r0
 8009656:	460f      	mov	r7, r1
 8009658:	f7f7 fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800965c:	2800      	cmp	r0, #0
 800965e:	d09e      	beq.n	800959e <_dtoa_r+0x65e>
 8009660:	e7d0      	b.n	8009604 <_dtoa_r+0x6c4>
 8009662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009664:	2a00      	cmp	r2, #0
 8009666:	f000 80ca 	beq.w	80097fe <_dtoa_r+0x8be>
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	2a01      	cmp	r2, #1
 800966e:	f300 80ad 	bgt.w	80097cc <_dtoa_r+0x88c>
 8009672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009674:	2a00      	cmp	r2, #0
 8009676:	f000 80a5 	beq.w	80097c4 <_dtoa_r+0x884>
 800967a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800967e:	9e08      	ldr	r6, [sp, #32]
 8009680:	9d05      	ldr	r5, [sp, #20]
 8009682:	9a05      	ldr	r2, [sp, #20]
 8009684:	441a      	add	r2, r3
 8009686:	9205      	str	r2, [sp, #20]
 8009688:	9a06      	ldr	r2, [sp, #24]
 800968a:	2101      	movs	r1, #1
 800968c:	441a      	add	r2, r3
 800968e:	4620      	mov	r0, r4
 8009690:	9206      	str	r2, [sp, #24]
 8009692:	f000 fc87 	bl	8009fa4 <__i2b>
 8009696:	4607      	mov	r7, r0
 8009698:	b165      	cbz	r5, 80096b4 <_dtoa_r+0x774>
 800969a:	9b06      	ldr	r3, [sp, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	dd09      	ble.n	80096b4 <_dtoa_r+0x774>
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	9a05      	ldr	r2, [sp, #20]
 80096a4:	bfa8      	it	ge
 80096a6:	462b      	movge	r3, r5
 80096a8:	1ad2      	subs	r2, r2, r3
 80096aa:	9205      	str	r2, [sp, #20]
 80096ac:	9a06      	ldr	r2, [sp, #24]
 80096ae:	1aed      	subs	r5, r5, r3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	9306      	str	r3, [sp, #24]
 80096b4:	9b08      	ldr	r3, [sp, #32]
 80096b6:	b1f3      	cbz	r3, 80096f6 <_dtoa_r+0x7b6>
 80096b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 80a3 	beq.w	8009806 <_dtoa_r+0x8c6>
 80096c0:	2e00      	cmp	r6, #0
 80096c2:	dd10      	ble.n	80096e6 <_dtoa_r+0x7a6>
 80096c4:	4639      	mov	r1, r7
 80096c6:	4632      	mov	r2, r6
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fd2b 	bl	800a124 <__pow5mult>
 80096ce:	4652      	mov	r2, sl
 80096d0:	4601      	mov	r1, r0
 80096d2:	4607      	mov	r7, r0
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fc7b 	bl	8009fd0 <__multiply>
 80096da:	4651      	mov	r1, sl
 80096dc:	4680      	mov	r8, r0
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 fb60 	bl	8009da4 <_Bfree>
 80096e4:	46c2      	mov	sl, r8
 80096e6:	9b08      	ldr	r3, [sp, #32]
 80096e8:	1b9a      	subs	r2, r3, r6
 80096ea:	d004      	beq.n	80096f6 <_dtoa_r+0x7b6>
 80096ec:	4651      	mov	r1, sl
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 fd18 	bl	800a124 <__pow5mult>
 80096f4:	4682      	mov	sl, r0
 80096f6:	2101      	movs	r1, #1
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fc53 	bl	8009fa4 <__i2b>
 80096fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	4606      	mov	r6, r0
 8009704:	f340 8081 	ble.w	800980a <_dtoa_r+0x8ca>
 8009708:	461a      	mov	r2, r3
 800970a:	4601      	mov	r1, r0
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fd09 	bl	800a124 <__pow5mult>
 8009712:	9b07      	ldr	r3, [sp, #28]
 8009714:	2b01      	cmp	r3, #1
 8009716:	4606      	mov	r6, r0
 8009718:	dd7a      	ble.n	8009810 <_dtoa_r+0x8d0>
 800971a:	f04f 0800 	mov.w	r8, #0
 800971e:	6933      	ldr	r3, [r6, #16]
 8009720:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009724:	6918      	ldr	r0, [r3, #16]
 8009726:	f000 fbef 	bl	8009f08 <__hi0bits>
 800972a:	f1c0 0020 	rsb	r0, r0, #32
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	4418      	add	r0, r3
 8009732:	f010 001f 	ands.w	r0, r0, #31
 8009736:	f000 8094 	beq.w	8009862 <_dtoa_r+0x922>
 800973a:	f1c0 0320 	rsb	r3, r0, #32
 800973e:	2b04      	cmp	r3, #4
 8009740:	f340 8085 	ble.w	800984e <_dtoa_r+0x90e>
 8009744:	9b05      	ldr	r3, [sp, #20]
 8009746:	f1c0 001c 	rsb	r0, r0, #28
 800974a:	4403      	add	r3, r0
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	9b06      	ldr	r3, [sp, #24]
 8009750:	4403      	add	r3, r0
 8009752:	4405      	add	r5, r0
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	9b05      	ldr	r3, [sp, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dd05      	ble.n	8009768 <_dtoa_r+0x828>
 800975c:	4651      	mov	r1, sl
 800975e:	461a      	mov	r2, r3
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fd39 	bl	800a1d8 <__lshift>
 8009766:	4682      	mov	sl, r0
 8009768:	9b06      	ldr	r3, [sp, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	dd05      	ble.n	800977a <_dtoa_r+0x83a>
 800976e:	4631      	mov	r1, r6
 8009770:	461a      	mov	r2, r3
 8009772:	4620      	mov	r0, r4
 8009774:	f000 fd30 	bl	800a1d8 <__lshift>
 8009778:	4606      	mov	r6, r0
 800977a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d072      	beq.n	8009866 <_dtoa_r+0x926>
 8009780:	4631      	mov	r1, r6
 8009782:	4650      	mov	r0, sl
 8009784:	f000 fd94 	bl	800a2b0 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	da6c      	bge.n	8009866 <_dtoa_r+0x926>
 800978c:	2300      	movs	r3, #0
 800978e:	4651      	mov	r1, sl
 8009790:	220a      	movs	r2, #10
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fb28 	bl	8009de8 <__multadd>
 8009798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800979e:	4682      	mov	sl, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 81b0 	beq.w	8009b06 <_dtoa_r+0xbc6>
 80097a6:	2300      	movs	r3, #0
 80097a8:	4639      	mov	r1, r7
 80097aa:	220a      	movs	r2, #10
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 fb1b 	bl	8009de8 <__multadd>
 80097b2:	9b01      	ldr	r3, [sp, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	4607      	mov	r7, r0
 80097b8:	f300 8096 	bgt.w	80098e8 <_dtoa_r+0x9a8>
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	dc59      	bgt.n	8009876 <_dtoa_r+0x936>
 80097c2:	e091      	b.n	80098e8 <_dtoa_r+0x9a8>
 80097c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097ca:	e758      	b.n	800967e <_dtoa_r+0x73e>
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	1e5e      	subs	r6, r3, #1
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	42b3      	cmp	r3, r6
 80097d4:	bfbf      	itttt	lt
 80097d6:	9b08      	ldrlt	r3, [sp, #32]
 80097d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80097da:	9608      	strlt	r6, [sp, #32]
 80097dc:	1af3      	sublt	r3, r6, r3
 80097de:	bfb4      	ite	lt
 80097e0:	18d2      	addlt	r2, r2, r3
 80097e2:	1b9e      	subge	r6, r3, r6
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	bfbc      	itt	lt
 80097e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80097ea:	2600      	movlt	r6, #0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfb7      	itett	lt
 80097f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80097f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80097f8:	1a9d      	sublt	r5, r3, r2
 80097fa:	2300      	movlt	r3, #0
 80097fc:	e741      	b.n	8009682 <_dtoa_r+0x742>
 80097fe:	9e08      	ldr	r6, [sp, #32]
 8009800:	9d05      	ldr	r5, [sp, #20]
 8009802:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009804:	e748      	b.n	8009698 <_dtoa_r+0x758>
 8009806:	9a08      	ldr	r2, [sp, #32]
 8009808:	e770      	b.n	80096ec <_dtoa_r+0x7ac>
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2b01      	cmp	r3, #1
 800980e:	dc19      	bgt.n	8009844 <_dtoa_r+0x904>
 8009810:	9b02      	ldr	r3, [sp, #8]
 8009812:	b9bb      	cbnz	r3, 8009844 <_dtoa_r+0x904>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800981a:	b99b      	cbnz	r3, 8009844 <_dtoa_r+0x904>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009822:	0d1b      	lsrs	r3, r3, #20
 8009824:	051b      	lsls	r3, r3, #20
 8009826:	b183      	cbz	r3, 800984a <_dtoa_r+0x90a>
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	3301      	adds	r3, #1
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	9b06      	ldr	r3, [sp, #24]
 8009830:	3301      	adds	r3, #1
 8009832:	9306      	str	r3, [sp, #24]
 8009834:	f04f 0801 	mov.w	r8, #1
 8009838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	f47f af6f 	bne.w	800971e <_dtoa_r+0x7de>
 8009840:	2001      	movs	r0, #1
 8009842:	e774      	b.n	800972e <_dtoa_r+0x7ee>
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	e7f6      	b.n	8009838 <_dtoa_r+0x8f8>
 800984a:	4698      	mov	r8, r3
 800984c:	e7f4      	b.n	8009838 <_dtoa_r+0x8f8>
 800984e:	d082      	beq.n	8009756 <_dtoa_r+0x816>
 8009850:	9a05      	ldr	r2, [sp, #20]
 8009852:	331c      	adds	r3, #28
 8009854:	441a      	add	r2, r3
 8009856:	9205      	str	r2, [sp, #20]
 8009858:	9a06      	ldr	r2, [sp, #24]
 800985a:	441a      	add	r2, r3
 800985c:	441d      	add	r5, r3
 800985e:	9206      	str	r2, [sp, #24]
 8009860:	e779      	b.n	8009756 <_dtoa_r+0x816>
 8009862:	4603      	mov	r3, r0
 8009864:	e7f4      	b.n	8009850 <_dtoa_r+0x910>
 8009866:	9b04      	ldr	r3, [sp, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	dc37      	bgt.n	80098dc <_dtoa_r+0x99c>
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	2b02      	cmp	r3, #2
 8009870:	dd34      	ble.n	80098dc <_dtoa_r+0x99c>
 8009872:	9b04      	ldr	r3, [sp, #16]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	b963      	cbnz	r3, 8009894 <_dtoa_r+0x954>
 800987a:	4631      	mov	r1, r6
 800987c:	2205      	movs	r2, #5
 800987e:	4620      	mov	r0, r4
 8009880:	f000 fab2 	bl	8009de8 <__multadd>
 8009884:	4601      	mov	r1, r0
 8009886:	4606      	mov	r6, r0
 8009888:	4650      	mov	r0, sl
 800988a:	f000 fd11 	bl	800a2b0 <__mcmp>
 800988e:	2800      	cmp	r0, #0
 8009890:	f73f adbb 	bgt.w	800940a <_dtoa_r+0x4ca>
 8009894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009896:	9d00      	ldr	r5, [sp, #0]
 8009898:	ea6f 0b03 	mvn.w	fp, r3
 800989c:	f04f 0800 	mov.w	r8, #0
 80098a0:	4631      	mov	r1, r6
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 fa7e 	bl	8009da4 <_Bfree>
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	f43f aeab 	beq.w	8009604 <_dtoa_r+0x6c4>
 80098ae:	f1b8 0f00 	cmp.w	r8, #0
 80098b2:	d005      	beq.n	80098c0 <_dtoa_r+0x980>
 80098b4:	45b8      	cmp	r8, r7
 80098b6:	d003      	beq.n	80098c0 <_dtoa_r+0x980>
 80098b8:	4641      	mov	r1, r8
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 fa72 	bl	8009da4 <_Bfree>
 80098c0:	4639      	mov	r1, r7
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fa6e 	bl	8009da4 <_Bfree>
 80098c8:	e69c      	b.n	8009604 <_dtoa_r+0x6c4>
 80098ca:	2600      	movs	r6, #0
 80098cc:	4637      	mov	r7, r6
 80098ce:	e7e1      	b.n	8009894 <_dtoa_r+0x954>
 80098d0:	46bb      	mov	fp, r7
 80098d2:	4637      	mov	r7, r6
 80098d4:	e599      	b.n	800940a <_dtoa_r+0x4ca>
 80098d6:	bf00      	nop
 80098d8:	40240000 	.word	0x40240000
 80098dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 80c8 	beq.w	8009a74 <_dtoa_r+0xb34>
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	2d00      	cmp	r5, #0
 80098ea:	dd05      	ble.n	80098f8 <_dtoa_r+0x9b8>
 80098ec:	4639      	mov	r1, r7
 80098ee:	462a      	mov	r2, r5
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fc71 	bl	800a1d8 <__lshift>
 80098f6:	4607      	mov	r7, r0
 80098f8:	f1b8 0f00 	cmp.w	r8, #0
 80098fc:	d05b      	beq.n	80099b6 <_dtoa_r+0xa76>
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 fa0f 	bl	8009d24 <_Balloc>
 8009906:	4605      	mov	r5, r0
 8009908:	b928      	cbnz	r0, 8009916 <_dtoa_r+0x9d6>
 800990a:	4b83      	ldr	r3, [pc, #524]	; (8009b18 <_dtoa_r+0xbd8>)
 800990c:	4602      	mov	r2, r0
 800990e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009912:	f7ff bb2e 	b.w	8008f72 <_dtoa_r+0x32>
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	f107 010c 	add.w	r1, r7, #12
 8009920:	300c      	adds	r0, #12
 8009922:	f002 fccf 	bl	800c2c4 <memcpy>
 8009926:	2201      	movs	r2, #1
 8009928:	4629      	mov	r1, r5
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fc54 	bl	800a1d8 <__lshift>
 8009930:	9b00      	ldr	r3, [sp, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	e9dd 2300 	ldrd	r2, r3, [sp]
 800993a:	4413      	add	r3, r2
 800993c:	9308      	str	r3, [sp, #32]
 800993e:	9b02      	ldr	r3, [sp, #8]
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	46b8      	mov	r8, r7
 8009946:	9306      	str	r3, [sp, #24]
 8009948:	4607      	mov	r7, r0
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	4631      	mov	r1, r6
 800994e:	3b01      	subs	r3, #1
 8009950:	4650      	mov	r0, sl
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	f7ff fa6a 	bl	8008e2c <quorem>
 8009958:	4641      	mov	r1, r8
 800995a:	9002      	str	r0, [sp, #8]
 800995c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009960:	4650      	mov	r0, sl
 8009962:	f000 fca5 	bl	800a2b0 <__mcmp>
 8009966:	463a      	mov	r2, r7
 8009968:	9005      	str	r0, [sp, #20]
 800996a:	4631      	mov	r1, r6
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fcbb 	bl	800a2e8 <__mdiff>
 8009972:	68c2      	ldr	r2, [r0, #12]
 8009974:	4605      	mov	r5, r0
 8009976:	bb02      	cbnz	r2, 80099ba <_dtoa_r+0xa7a>
 8009978:	4601      	mov	r1, r0
 800997a:	4650      	mov	r0, sl
 800997c:	f000 fc98 	bl	800a2b0 <__mcmp>
 8009980:	4602      	mov	r2, r0
 8009982:	4629      	mov	r1, r5
 8009984:	4620      	mov	r0, r4
 8009986:	9209      	str	r2, [sp, #36]	; 0x24
 8009988:	f000 fa0c 	bl	8009da4 <_Bfree>
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009990:	9d04      	ldr	r5, [sp, #16]
 8009992:	ea43 0102 	orr.w	r1, r3, r2
 8009996:	9b06      	ldr	r3, [sp, #24]
 8009998:	4319      	orrs	r1, r3
 800999a:	d110      	bne.n	80099be <_dtoa_r+0xa7e>
 800999c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099a0:	d029      	beq.n	80099f6 <_dtoa_r+0xab6>
 80099a2:	9b05      	ldr	r3, [sp, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dd02      	ble.n	80099ae <_dtoa_r+0xa6e>
 80099a8:	9b02      	ldr	r3, [sp, #8]
 80099aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	f883 9000 	strb.w	r9, [r3]
 80099b4:	e774      	b.n	80098a0 <_dtoa_r+0x960>
 80099b6:	4638      	mov	r0, r7
 80099b8:	e7ba      	b.n	8009930 <_dtoa_r+0x9f0>
 80099ba:	2201      	movs	r2, #1
 80099bc:	e7e1      	b.n	8009982 <_dtoa_r+0xa42>
 80099be:	9b05      	ldr	r3, [sp, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db04      	blt.n	80099ce <_dtoa_r+0xa8e>
 80099c4:	9907      	ldr	r1, [sp, #28]
 80099c6:	430b      	orrs	r3, r1
 80099c8:	9906      	ldr	r1, [sp, #24]
 80099ca:	430b      	orrs	r3, r1
 80099cc:	d120      	bne.n	8009a10 <_dtoa_r+0xad0>
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	dded      	ble.n	80099ae <_dtoa_r+0xa6e>
 80099d2:	4651      	mov	r1, sl
 80099d4:	2201      	movs	r2, #1
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 fbfe 	bl	800a1d8 <__lshift>
 80099dc:	4631      	mov	r1, r6
 80099de:	4682      	mov	sl, r0
 80099e0:	f000 fc66 	bl	800a2b0 <__mcmp>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	dc03      	bgt.n	80099f0 <_dtoa_r+0xab0>
 80099e8:	d1e1      	bne.n	80099ae <_dtoa_r+0xa6e>
 80099ea:	f019 0f01 	tst.w	r9, #1
 80099ee:	d0de      	beq.n	80099ae <_dtoa_r+0xa6e>
 80099f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099f4:	d1d8      	bne.n	80099a8 <_dtoa_r+0xa68>
 80099f6:	9a01      	ldr	r2, [sp, #4]
 80099f8:	2339      	movs	r3, #57	; 0x39
 80099fa:	7013      	strb	r3, [r2, #0]
 80099fc:	462b      	mov	r3, r5
 80099fe:	461d      	mov	r5, r3
 8009a00:	3b01      	subs	r3, #1
 8009a02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a06:	2a39      	cmp	r2, #57	; 0x39
 8009a08:	d06c      	beq.n	8009ae4 <_dtoa_r+0xba4>
 8009a0a:	3201      	adds	r2, #1
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	e747      	b.n	80098a0 <_dtoa_r+0x960>
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	dd07      	ble.n	8009a24 <_dtoa_r+0xae4>
 8009a14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a18:	d0ed      	beq.n	80099f6 <_dtoa_r+0xab6>
 8009a1a:	9a01      	ldr	r2, [sp, #4]
 8009a1c:	f109 0301 	add.w	r3, r9, #1
 8009a20:	7013      	strb	r3, [r2, #0]
 8009a22:	e73d      	b.n	80098a0 <_dtoa_r+0x960>
 8009a24:	9b04      	ldr	r3, [sp, #16]
 8009a26:	9a08      	ldr	r2, [sp, #32]
 8009a28:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d043      	beq.n	8009ab8 <_dtoa_r+0xb78>
 8009a30:	4651      	mov	r1, sl
 8009a32:	2300      	movs	r3, #0
 8009a34:	220a      	movs	r2, #10
 8009a36:	4620      	mov	r0, r4
 8009a38:	f000 f9d6 	bl	8009de8 <__multadd>
 8009a3c:	45b8      	cmp	r8, r7
 8009a3e:	4682      	mov	sl, r0
 8009a40:	f04f 0300 	mov.w	r3, #0
 8009a44:	f04f 020a 	mov.w	r2, #10
 8009a48:	4641      	mov	r1, r8
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	d107      	bne.n	8009a5e <_dtoa_r+0xb1e>
 8009a4e:	f000 f9cb 	bl	8009de8 <__multadd>
 8009a52:	4680      	mov	r8, r0
 8009a54:	4607      	mov	r7, r0
 8009a56:	9b04      	ldr	r3, [sp, #16]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	e775      	b.n	800994a <_dtoa_r+0xa0a>
 8009a5e:	f000 f9c3 	bl	8009de8 <__multadd>
 8009a62:	4639      	mov	r1, r7
 8009a64:	4680      	mov	r8, r0
 8009a66:	2300      	movs	r3, #0
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f9bc 	bl	8009de8 <__multadd>
 8009a70:	4607      	mov	r7, r0
 8009a72:	e7f0      	b.n	8009a56 <_dtoa_r+0xb16>
 8009a74:	9b04      	ldr	r3, [sp, #16]
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	9d00      	ldr	r5, [sp, #0]
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4650      	mov	r0, sl
 8009a7e:	f7ff f9d5 	bl	8008e2c <quorem>
 8009a82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	f805 9b01 	strb.w	r9, [r5], #1
 8009a8c:	1aea      	subs	r2, r5, r3
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	4293      	cmp	r3, r2
 8009a92:	dd07      	ble.n	8009aa4 <_dtoa_r+0xb64>
 8009a94:	4651      	mov	r1, sl
 8009a96:	2300      	movs	r3, #0
 8009a98:	220a      	movs	r2, #10
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 f9a4 	bl	8009de8 <__multadd>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	e7ea      	b.n	8009a7a <_dtoa_r+0xb3a>
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfc8      	it	gt
 8009aaa:	461d      	movgt	r5, r3
 8009aac:	9b00      	ldr	r3, [sp, #0]
 8009aae:	bfd8      	it	le
 8009ab0:	2501      	movle	r5, #1
 8009ab2:	441d      	add	r5, r3
 8009ab4:	f04f 0800 	mov.w	r8, #0
 8009ab8:	4651      	mov	r1, sl
 8009aba:	2201      	movs	r2, #1
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fb8b 	bl	800a1d8 <__lshift>
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	f000 fbf3 	bl	800a2b0 <__mcmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	dc96      	bgt.n	80099fc <_dtoa_r+0xabc>
 8009ace:	d102      	bne.n	8009ad6 <_dtoa_r+0xb96>
 8009ad0:	f019 0f01 	tst.w	r9, #1
 8009ad4:	d192      	bne.n	80099fc <_dtoa_r+0xabc>
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	461d      	mov	r5, r3
 8009ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ade:	2a30      	cmp	r2, #48	; 0x30
 8009ae0:	d0fa      	beq.n	8009ad8 <_dtoa_r+0xb98>
 8009ae2:	e6dd      	b.n	80098a0 <_dtoa_r+0x960>
 8009ae4:	9a00      	ldr	r2, [sp, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d189      	bne.n	80099fe <_dtoa_r+0xabe>
 8009aea:	f10b 0b01 	add.w	fp, fp, #1
 8009aee:	2331      	movs	r3, #49	; 0x31
 8009af0:	e796      	b.n	8009a20 <_dtoa_r+0xae0>
 8009af2:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <_dtoa_r+0xbdc>)
 8009af4:	f7ff ba99 	b.w	800902a <_dtoa_r+0xea>
 8009af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f47f aa6d 	bne.w	8008fda <_dtoa_r+0x9a>
 8009b00:	4b07      	ldr	r3, [pc, #28]	; (8009b20 <_dtoa_r+0xbe0>)
 8009b02:	f7ff ba92 	b.w	800902a <_dtoa_r+0xea>
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dcb5      	bgt.n	8009a78 <_dtoa_r+0xb38>
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	f73f aeb1 	bgt.w	8009876 <_dtoa_r+0x936>
 8009b14:	e7b0      	b.n	8009a78 <_dtoa_r+0xb38>
 8009b16:	bf00      	nop
 8009b18:	0800d603 	.word	0x0800d603
 8009b1c:	0800d8e8 	.word	0x0800d8e8
 8009b20:	0800d587 	.word	0x0800d587

08009b24 <_free_r>:
 8009b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b26:	2900      	cmp	r1, #0
 8009b28:	d044      	beq.n	8009bb4 <_free_r+0x90>
 8009b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2e:	9001      	str	r0, [sp, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f1a1 0404 	sub.w	r4, r1, #4
 8009b36:	bfb8      	it	lt
 8009b38:	18e4      	addlt	r4, r4, r3
 8009b3a:	f000 f8e7 	bl	8009d0c <__malloc_lock>
 8009b3e:	4a1e      	ldr	r2, [pc, #120]	; (8009bb8 <_free_r+0x94>)
 8009b40:	9801      	ldr	r0, [sp, #4]
 8009b42:	6813      	ldr	r3, [r2, #0]
 8009b44:	b933      	cbnz	r3, 8009b54 <_free_r+0x30>
 8009b46:	6063      	str	r3, [r4, #4]
 8009b48:	6014      	str	r4, [r2, #0]
 8009b4a:	b003      	add	sp, #12
 8009b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b50:	f000 b8e2 	b.w	8009d18 <__malloc_unlock>
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	d908      	bls.n	8009b6a <_free_r+0x46>
 8009b58:	6825      	ldr	r5, [r4, #0]
 8009b5a:	1961      	adds	r1, r4, r5
 8009b5c:	428b      	cmp	r3, r1
 8009b5e:	bf01      	itttt	eq
 8009b60:	6819      	ldreq	r1, [r3, #0]
 8009b62:	685b      	ldreq	r3, [r3, #4]
 8009b64:	1949      	addeq	r1, r1, r5
 8009b66:	6021      	streq	r1, [r4, #0]
 8009b68:	e7ed      	b.n	8009b46 <_free_r+0x22>
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	b10b      	cbz	r3, 8009b74 <_free_r+0x50>
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d9fa      	bls.n	8009b6a <_free_r+0x46>
 8009b74:	6811      	ldr	r1, [r2, #0]
 8009b76:	1855      	adds	r5, r2, r1
 8009b78:	42a5      	cmp	r5, r4
 8009b7a:	d10b      	bne.n	8009b94 <_free_r+0x70>
 8009b7c:	6824      	ldr	r4, [r4, #0]
 8009b7e:	4421      	add	r1, r4
 8009b80:	1854      	adds	r4, r2, r1
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	6011      	str	r1, [r2, #0]
 8009b86:	d1e0      	bne.n	8009b4a <_free_r+0x26>
 8009b88:	681c      	ldr	r4, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	6053      	str	r3, [r2, #4]
 8009b8e:	440c      	add	r4, r1
 8009b90:	6014      	str	r4, [r2, #0]
 8009b92:	e7da      	b.n	8009b4a <_free_r+0x26>
 8009b94:	d902      	bls.n	8009b9c <_free_r+0x78>
 8009b96:	230c      	movs	r3, #12
 8009b98:	6003      	str	r3, [r0, #0]
 8009b9a:	e7d6      	b.n	8009b4a <_free_r+0x26>
 8009b9c:	6825      	ldr	r5, [r4, #0]
 8009b9e:	1961      	adds	r1, r4, r5
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	bf04      	itt	eq
 8009ba4:	6819      	ldreq	r1, [r3, #0]
 8009ba6:	685b      	ldreq	r3, [r3, #4]
 8009ba8:	6063      	str	r3, [r4, #4]
 8009baa:	bf04      	itt	eq
 8009bac:	1949      	addeq	r1, r1, r5
 8009bae:	6021      	streq	r1, [r4, #0]
 8009bb0:	6054      	str	r4, [r2, #4]
 8009bb2:	e7ca      	b.n	8009b4a <_free_r+0x26>
 8009bb4:	b003      	add	sp, #12
 8009bb6:	bd30      	pop	{r4, r5, pc}
 8009bb8:	20000b34 	.word	0x20000b34

08009bbc <malloc>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <malloc+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f000 b823 	b.w	8009c0c <_malloc_r>
 8009bc6:	bf00      	nop
 8009bc8:	20000078 	.word	0x20000078

08009bcc <sbrk_aligned>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	4e0e      	ldr	r6, [pc, #56]	; (8009c08 <sbrk_aligned+0x3c>)
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	6831      	ldr	r1, [r6, #0]
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	b911      	cbnz	r1, 8009bde <sbrk_aligned+0x12>
 8009bd8:	f002 fb64 	bl	800c2a4 <_sbrk_r>
 8009bdc:	6030      	str	r0, [r6, #0]
 8009bde:	4621      	mov	r1, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	f002 fb5f 	bl	800c2a4 <_sbrk_r>
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	d00a      	beq.n	8009c00 <sbrk_aligned+0x34>
 8009bea:	1cc4      	adds	r4, r0, #3
 8009bec:	f024 0403 	bic.w	r4, r4, #3
 8009bf0:	42a0      	cmp	r0, r4
 8009bf2:	d007      	beq.n	8009c04 <sbrk_aligned+0x38>
 8009bf4:	1a21      	subs	r1, r4, r0
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f002 fb54 	bl	800c2a4 <_sbrk_r>
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d101      	bne.n	8009c04 <sbrk_aligned+0x38>
 8009c00:	f04f 34ff 	mov.w	r4, #4294967295
 8009c04:	4620      	mov	r0, r4
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	20000b38 	.word	0x20000b38

08009c0c <_malloc_r>:
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	1ccd      	adds	r5, r1, #3
 8009c12:	f025 0503 	bic.w	r5, r5, #3
 8009c16:	3508      	adds	r5, #8
 8009c18:	2d0c      	cmp	r5, #12
 8009c1a:	bf38      	it	cc
 8009c1c:	250c      	movcc	r5, #12
 8009c1e:	2d00      	cmp	r5, #0
 8009c20:	4607      	mov	r7, r0
 8009c22:	db01      	blt.n	8009c28 <_malloc_r+0x1c>
 8009c24:	42a9      	cmp	r1, r5
 8009c26:	d905      	bls.n	8009c34 <_malloc_r+0x28>
 8009c28:	230c      	movs	r3, #12
 8009c2a:	603b      	str	r3, [r7, #0]
 8009c2c:	2600      	movs	r6, #0
 8009c2e:	4630      	mov	r0, r6
 8009c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d08 <_malloc_r+0xfc>
 8009c38:	f000 f868 	bl	8009d0c <__malloc_lock>
 8009c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c40:	461c      	mov	r4, r3
 8009c42:	bb5c      	cbnz	r4, 8009c9c <_malloc_r+0x90>
 8009c44:	4629      	mov	r1, r5
 8009c46:	4638      	mov	r0, r7
 8009c48:	f7ff ffc0 	bl	8009bcc <sbrk_aligned>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	4604      	mov	r4, r0
 8009c50:	d155      	bne.n	8009cfe <_malloc_r+0xf2>
 8009c52:	f8d8 4000 	ldr.w	r4, [r8]
 8009c56:	4626      	mov	r6, r4
 8009c58:	2e00      	cmp	r6, #0
 8009c5a:	d145      	bne.n	8009ce8 <_malloc_r+0xdc>
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	d048      	beq.n	8009cf2 <_malloc_r+0xe6>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	4631      	mov	r1, r6
 8009c64:	4638      	mov	r0, r7
 8009c66:	eb04 0903 	add.w	r9, r4, r3
 8009c6a:	f002 fb1b 	bl	800c2a4 <_sbrk_r>
 8009c6e:	4581      	cmp	r9, r0
 8009c70:	d13f      	bne.n	8009cf2 <_malloc_r+0xe6>
 8009c72:	6821      	ldr	r1, [r4, #0]
 8009c74:	1a6d      	subs	r5, r5, r1
 8009c76:	4629      	mov	r1, r5
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff ffa7 	bl	8009bcc <sbrk_aligned>
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d037      	beq.n	8009cf2 <_malloc_r+0xe6>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	442b      	add	r3, r5
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	f8d8 3000 	ldr.w	r3, [r8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d038      	beq.n	8009d02 <_malloc_r+0xf6>
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	42a2      	cmp	r2, r4
 8009c94:	d12b      	bne.n	8009cee <_malloc_r+0xe2>
 8009c96:	2200      	movs	r2, #0
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	e00f      	b.n	8009cbc <_malloc_r+0xb0>
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	1b52      	subs	r2, r2, r5
 8009ca0:	d41f      	bmi.n	8009ce2 <_malloc_r+0xd6>
 8009ca2:	2a0b      	cmp	r2, #11
 8009ca4:	d917      	bls.n	8009cd6 <_malloc_r+0xca>
 8009ca6:	1961      	adds	r1, r4, r5
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	6025      	str	r5, [r4, #0]
 8009cac:	bf18      	it	ne
 8009cae:	6059      	strne	r1, [r3, #4]
 8009cb0:	6863      	ldr	r3, [r4, #4]
 8009cb2:	bf08      	it	eq
 8009cb4:	f8c8 1000 	streq.w	r1, [r8]
 8009cb8:	5162      	str	r2, [r4, r5]
 8009cba:	604b      	str	r3, [r1, #4]
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	f104 060b 	add.w	r6, r4, #11
 8009cc2:	f000 f829 	bl	8009d18 <__malloc_unlock>
 8009cc6:	f026 0607 	bic.w	r6, r6, #7
 8009cca:	1d23      	adds	r3, r4, #4
 8009ccc:	1af2      	subs	r2, r6, r3
 8009cce:	d0ae      	beq.n	8009c2e <_malloc_r+0x22>
 8009cd0:	1b9b      	subs	r3, r3, r6
 8009cd2:	50a3      	str	r3, [r4, r2]
 8009cd4:	e7ab      	b.n	8009c2e <_malloc_r+0x22>
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	6862      	ldr	r2, [r4, #4]
 8009cda:	d1dd      	bne.n	8009c98 <_malloc_r+0x8c>
 8009cdc:	f8c8 2000 	str.w	r2, [r8]
 8009ce0:	e7ec      	b.n	8009cbc <_malloc_r+0xb0>
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	6864      	ldr	r4, [r4, #4]
 8009ce6:	e7ac      	b.n	8009c42 <_malloc_r+0x36>
 8009ce8:	4634      	mov	r4, r6
 8009cea:	6876      	ldr	r6, [r6, #4]
 8009cec:	e7b4      	b.n	8009c58 <_malloc_r+0x4c>
 8009cee:	4613      	mov	r3, r2
 8009cf0:	e7cc      	b.n	8009c8c <_malloc_r+0x80>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	603b      	str	r3, [r7, #0]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f000 f80e 	bl	8009d18 <__malloc_unlock>
 8009cfc:	e797      	b.n	8009c2e <_malloc_r+0x22>
 8009cfe:	6025      	str	r5, [r4, #0]
 8009d00:	e7dc      	b.n	8009cbc <_malloc_r+0xb0>
 8009d02:	605b      	str	r3, [r3, #4]
 8009d04:	deff      	udf	#255	; 0xff
 8009d06:	bf00      	nop
 8009d08:	20000b34 	.word	0x20000b34

08009d0c <__malloc_lock>:
 8009d0c:	4801      	ldr	r0, [pc, #4]	; (8009d14 <__malloc_lock+0x8>)
 8009d0e:	f7ff b884 	b.w	8008e1a <__retarget_lock_acquire_recursive>
 8009d12:	bf00      	nop
 8009d14:	20000b30 	.word	0x20000b30

08009d18 <__malloc_unlock>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__malloc_unlock+0x8>)
 8009d1a:	f7ff b87f 	b.w	8008e1c <__retarget_lock_release_recursive>
 8009d1e:	bf00      	nop
 8009d20:	20000b30 	.word	0x20000b30

08009d24 <_Balloc>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	69c6      	ldr	r6, [r0, #28]
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	b976      	cbnz	r6, 8009d4c <_Balloc+0x28>
 8009d2e:	2010      	movs	r0, #16
 8009d30:	f7ff ff44 	bl	8009bbc <malloc>
 8009d34:	4602      	mov	r2, r0
 8009d36:	61e0      	str	r0, [r4, #28]
 8009d38:	b920      	cbnz	r0, 8009d44 <_Balloc+0x20>
 8009d3a:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <_Balloc+0x78>)
 8009d3c:	4818      	ldr	r0, [pc, #96]	; (8009da0 <_Balloc+0x7c>)
 8009d3e:	216b      	movs	r1, #107	; 0x6b
 8009d40:	f002 fad6 	bl	800c2f0 <__assert_func>
 8009d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d48:	6006      	str	r6, [r0, #0]
 8009d4a:	60c6      	str	r6, [r0, #12]
 8009d4c:	69e6      	ldr	r6, [r4, #28]
 8009d4e:	68f3      	ldr	r3, [r6, #12]
 8009d50:	b183      	cbz	r3, 8009d74 <_Balloc+0x50>
 8009d52:	69e3      	ldr	r3, [r4, #28]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d5a:	b9b8      	cbnz	r0, 8009d8c <_Balloc+0x68>
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8009d62:	1d72      	adds	r2, r6, #5
 8009d64:	0092      	lsls	r2, r2, #2
 8009d66:	4620      	mov	r0, r4
 8009d68:	f002 fae0 	bl	800c32c <_calloc_r>
 8009d6c:	b160      	cbz	r0, 8009d88 <_Balloc+0x64>
 8009d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d72:	e00e      	b.n	8009d92 <_Balloc+0x6e>
 8009d74:	2221      	movs	r2, #33	; 0x21
 8009d76:	2104      	movs	r1, #4
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f002 fad7 	bl	800c32c <_calloc_r>
 8009d7e:	69e3      	ldr	r3, [r4, #28]
 8009d80:	60f0      	str	r0, [r6, #12]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e4      	bne.n	8009d52 <_Balloc+0x2e>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	6802      	ldr	r2, [r0, #0]
 8009d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d92:	2300      	movs	r3, #0
 8009d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d98:	e7f7      	b.n	8009d8a <_Balloc+0x66>
 8009d9a:	bf00      	nop
 8009d9c:	0800d594 	.word	0x0800d594
 8009da0:	0800d614 	.word	0x0800d614

08009da4 <_Bfree>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	69c6      	ldr	r6, [r0, #28]
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	b976      	cbnz	r6, 8009dcc <_Bfree+0x28>
 8009dae:	2010      	movs	r0, #16
 8009db0:	f7ff ff04 	bl	8009bbc <malloc>
 8009db4:	4602      	mov	r2, r0
 8009db6:	61e8      	str	r0, [r5, #28]
 8009db8:	b920      	cbnz	r0, 8009dc4 <_Bfree+0x20>
 8009dba:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <_Bfree+0x3c>)
 8009dbc:	4809      	ldr	r0, [pc, #36]	; (8009de4 <_Bfree+0x40>)
 8009dbe:	218f      	movs	r1, #143	; 0x8f
 8009dc0:	f002 fa96 	bl	800c2f0 <__assert_func>
 8009dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dc8:	6006      	str	r6, [r0, #0]
 8009dca:	60c6      	str	r6, [r0, #12]
 8009dcc:	b13c      	cbz	r4, 8009dde <_Bfree+0x3a>
 8009dce:	69eb      	ldr	r3, [r5, #28]
 8009dd0:	6862      	ldr	r2, [r4, #4]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dd8:	6021      	str	r1, [r4, #0]
 8009dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	0800d594 	.word	0x0800d594
 8009de4:	0800d614 	.word	0x0800d614

08009de8 <__multadd>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	690d      	ldr	r5, [r1, #16]
 8009dee:	4607      	mov	r7, r0
 8009df0:	460c      	mov	r4, r1
 8009df2:	461e      	mov	r6, r3
 8009df4:	f101 0c14 	add.w	ip, r1, #20
 8009df8:	2000      	movs	r0, #0
 8009dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8009dfe:	b299      	uxth	r1, r3
 8009e00:	fb02 6101 	mla	r1, r2, r1, r6
 8009e04:	0c1e      	lsrs	r6, r3, #16
 8009e06:	0c0b      	lsrs	r3, r1, #16
 8009e08:	fb02 3306 	mla	r3, r2, r6, r3
 8009e0c:	b289      	uxth	r1, r1
 8009e0e:	3001      	adds	r0, #1
 8009e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e14:	4285      	cmp	r5, r0
 8009e16:	f84c 1b04 	str.w	r1, [ip], #4
 8009e1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e1e:	dcec      	bgt.n	8009dfa <__multadd+0x12>
 8009e20:	b30e      	cbz	r6, 8009e66 <__multadd+0x7e>
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	42ab      	cmp	r3, r5
 8009e26:	dc19      	bgt.n	8009e5c <__multadd+0x74>
 8009e28:	6861      	ldr	r1, [r4, #4]
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	3101      	adds	r1, #1
 8009e2e:	f7ff ff79 	bl	8009d24 <_Balloc>
 8009e32:	4680      	mov	r8, r0
 8009e34:	b928      	cbnz	r0, 8009e42 <__multadd+0x5a>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <__multadd+0x84>)
 8009e3a:	480d      	ldr	r0, [pc, #52]	; (8009e70 <__multadd+0x88>)
 8009e3c:	21ba      	movs	r1, #186	; 0xba
 8009e3e:	f002 fa57 	bl	800c2f0 <__assert_func>
 8009e42:	6922      	ldr	r2, [r4, #16]
 8009e44:	3202      	adds	r2, #2
 8009e46:	f104 010c 	add.w	r1, r4, #12
 8009e4a:	0092      	lsls	r2, r2, #2
 8009e4c:	300c      	adds	r0, #12
 8009e4e:	f002 fa39 	bl	800c2c4 <memcpy>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff ffa5 	bl	8009da4 <_Bfree>
 8009e5a:	4644      	mov	r4, r8
 8009e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e60:	3501      	adds	r5, #1
 8009e62:	615e      	str	r6, [r3, #20]
 8009e64:	6125      	str	r5, [r4, #16]
 8009e66:	4620      	mov	r0, r4
 8009e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6c:	0800d603 	.word	0x0800d603
 8009e70:	0800d614 	.word	0x0800d614

08009e74 <__s2b>:
 8009e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e78:	460c      	mov	r4, r1
 8009e7a:	4615      	mov	r5, r2
 8009e7c:	461f      	mov	r7, r3
 8009e7e:	2209      	movs	r2, #9
 8009e80:	3308      	adds	r3, #8
 8009e82:	4606      	mov	r6, r0
 8009e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e88:	2100      	movs	r1, #0
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	db09      	blt.n	8009ea4 <__s2b+0x30>
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7ff ff47 	bl	8009d24 <_Balloc>
 8009e96:	b940      	cbnz	r0, 8009eaa <__s2b+0x36>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	4b19      	ldr	r3, [pc, #100]	; (8009f00 <__s2b+0x8c>)
 8009e9c:	4819      	ldr	r0, [pc, #100]	; (8009f04 <__s2b+0x90>)
 8009e9e:	21d3      	movs	r1, #211	; 0xd3
 8009ea0:	f002 fa26 	bl	800c2f0 <__assert_func>
 8009ea4:	0052      	lsls	r2, r2, #1
 8009ea6:	3101      	adds	r1, #1
 8009ea8:	e7f0      	b.n	8009e8c <__s2b+0x18>
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	6143      	str	r3, [r0, #20]
 8009eae:	2d09      	cmp	r5, #9
 8009eb0:	f04f 0301 	mov.w	r3, #1
 8009eb4:	6103      	str	r3, [r0, #16]
 8009eb6:	dd16      	ble.n	8009ee6 <__s2b+0x72>
 8009eb8:	f104 0909 	add.w	r9, r4, #9
 8009ebc:	46c8      	mov	r8, r9
 8009ebe:	442c      	add	r4, r5
 8009ec0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	3b30      	subs	r3, #48	; 0x30
 8009ec8:	220a      	movs	r2, #10
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff8c 	bl	8009de8 <__multadd>
 8009ed0:	45a0      	cmp	r8, r4
 8009ed2:	d1f5      	bne.n	8009ec0 <__s2b+0x4c>
 8009ed4:	f1a5 0408 	sub.w	r4, r5, #8
 8009ed8:	444c      	add	r4, r9
 8009eda:	1b2d      	subs	r5, r5, r4
 8009edc:	1963      	adds	r3, r4, r5
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	db04      	blt.n	8009eec <__s2b+0x78>
 8009ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee6:	340a      	adds	r4, #10
 8009ee8:	2509      	movs	r5, #9
 8009eea:	e7f6      	b.n	8009eda <__s2b+0x66>
 8009eec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ef0:	4601      	mov	r1, r0
 8009ef2:	3b30      	subs	r3, #48	; 0x30
 8009ef4:	220a      	movs	r2, #10
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff76 	bl	8009de8 <__multadd>
 8009efc:	e7ee      	b.n	8009edc <__s2b+0x68>
 8009efe:	bf00      	nop
 8009f00:	0800d603 	.word	0x0800d603
 8009f04:	0800d614 	.word	0x0800d614

08009f08 <__hi0bits>:
 8009f08:	0c03      	lsrs	r3, r0, #16
 8009f0a:	041b      	lsls	r3, r3, #16
 8009f0c:	b9d3      	cbnz	r3, 8009f44 <__hi0bits+0x3c>
 8009f0e:	0400      	lsls	r0, r0, #16
 8009f10:	2310      	movs	r3, #16
 8009f12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f16:	bf04      	itt	eq
 8009f18:	0200      	lsleq	r0, r0, #8
 8009f1a:	3308      	addeq	r3, #8
 8009f1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f20:	bf04      	itt	eq
 8009f22:	0100      	lsleq	r0, r0, #4
 8009f24:	3304      	addeq	r3, #4
 8009f26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f2a:	bf04      	itt	eq
 8009f2c:	0080      	lsleq	r0, r0, #2
 8009f2e:	3302      	addeq	r3, #2
 8009f30:	2800      	cmp	r0, #0
 8009f32:	db05      	blt.n	8009f40 <__hi0bits+0x38>
 8009f34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f38:	f103 0301 	add.w	r3, r3, #1
 8009f3c:	bf08      	it	eq
 8009f3e:	2320      	moveq	r3, #32
 8009f40:	4618      	mov	r0, r3
 8009f42:	4770      	bx	lr
 8009f44:	2300      	movs	r3, #0
 8009f46:	e7e4      	b.n	8009f12 <__hi0bits+0xa>

08009f48 <__lo0bits>:
 8009f48:	6803      	ldr	r3, [r0, #0]
 8009f4a:	f013 0207 	ands.w	r2, r3, #7
 8009f4e:	d00c      	beq.n	8009f6a <__lo0bits+0x22>
 8009f50:	07d9      	lsls	r1, r3, #31
 8009f52:	d422      	bmi.n	8009f9a <__lo0bits+0x52>
 8009f54:	079a      	lsls	r2, r3, #30
 8009f56:	bf49      	itett	mi
 8009f58:	085b      	lsrmi	r3, r3, #1
 8009f5a:	089b      	lsrpl	r3, r3, #2
 8009f5c:	6003      	strmi	r3, [r0, #0]
 8009f5e:	2201      	movmi	r2, #1
 8009f60:	bf5c      	itt	pl
 8009f62:	6003      	strpl	r3, [r0, #0]
 8009f64:	2202      	movpl	r2, #2
 8009f66:	4610      	mov	r0, r2
 8009f68:	4770      	bx	lr
 8009f6a:	b299      	uxth	r1, r3
 8009f6c:	b909      	cbnz	r1, 8009f72 <__lo0bits+0x2a>
 8009f6e:	0c1b      	lsrs	r3, r3, #16
 8009f70:	2210      	movs	r2, #16
 8009f72:	b2d9      	uxtb	r1, r3
 8009f74:	b909      	cbnz	r1, 8009f7a <__lo0bits+0x32>
 8009f76:	3208      	adds	r2, #8
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	0719      	lsls	r1, r3, #28
 8009f7c:	bf04      	itt	eq
 8009f7e:	091b      	lsreq	r3, r3, #4
 8009f80:	3204      	addeq	r2, #4
 8009f82:	0799      	lsls	r1, r3, #30
 8009f84:	bf04      	itt	eq
 8009f86:	089b      	lsreq	r3, r3, #2
 8009f88:	3202      	addeq	r2, #2
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d403      	bmi.n	8009f96 <__lo0bits+0x4e>
 8009f8e:	085b      	lsrs	r3, r3, #1
 8009f90:	f102 0201 	add.w	r2, r2, #1
 8009f94:	d003      	beq.n	8009f9e <__lo0bits+0x56>
 8009f96:	6003      	str	r3, [r0, #0]
 8009f98:	e7e5      	b.n	8009f66 <__lo0bits+0x1e>
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	e7e3      	b.n	8009f66 <__lo0bits+0x1e>
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	e7e1      	b.n	8009f66 <__lo0bits+0x1e>
	...

08009fa4 <__i2b>:
 8009fa4:	b510      	push	{r4, lr}
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	2101      	movs	r1, #1
 8009faa:	f7ff febb 	bl	8009d24 <_Balloc>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	b928      	cbnz	r0, 8009fbe <__i2b+0x1a>
 8009fb2:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <__i2b+0x24>)
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <__i2b+0x28>)
 8009fb6:	f240 1145 	movw	r1, #325	; 0x145
 8009fba:	f002 f999 	bl	800c2f0 <__assert_func>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	6144      	str	r4, [r0, #20]
 8009fc2:	6103      	str	r3, [r0, #16]
 8009fc4:	bd10      	pop	{r4, pc}
 8009fc6:	bf00      	nop
 8009fc8:	0800d603 	.word	0x0800d603
 8009fcc:	0800d614 	.word	0x0800d614

08009fd0 <__multiply>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	4691      	mov	r9, r2
 8009fd6:	690a      	ldr	r2, [r1, #16]
 8009fd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	bfb8      	it	lt
 8009fe0:	460b      	movlt	r3, r1
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	bfbc      	itt	lt
 8009fe6:	464c      	movlt	r4, r9
 8009fe8:	4699      	movlt	r9, r3
 8009fea:	6927      	ldr	r7, [r4, #16]
 8009fec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ff0:	68a3      	ldr	r3, [r4, #8]
 8009ff2:	6861      	ldr	r1, [r4, #4]
 8009ff4:	eb07 060a 	add.w	r6, r7, sl
 8009ff8:	42b3      	cmp	r3, r6
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	bfb8      	it	lt
 8009ffe:	3101      	addlt	r1, #1
 800a000:	f7ff fe90 	bl	8009d24 <_Balloc>
 800a004:	b930      	cbnz	r0, 800a014 <__multiply+0x44>
 800a006:	4602      	mov	r2, r0
 800a008:	4b44      	ldr	r3, [pc, #272]	; (800a11c <__multiply+0x14c>)
 800a00a:	4845      	ldr	r0, [pc, #276]	; (800a120 <__multiply+0x150>)
 800a00c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a010:	f002 f96e 	bl	800c2f0 <__assert_func>
 800a014:	f100 0514 	add.w	r5, r0, #20
 800a018:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a01c:	462b      	mov	r3, r5
 800a01e:	2200      	movs	r2, #0
 800a020:	4543      	cmp	r3, r8
 800a022:	d321      	bcc.n	800a068 <__multiply+0x98>
 800a024:	f104 0314 	add.w	r3, r4, #20
 800a028:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a02c:	f109 0314 	add.w	r3, r9, #20
 800a030:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a034:	9202      	str	r2, [sp, #8]
 800a036:	1b3a      	subs	r2, r7, r4
 800a038:	3a15      	subs	r2, #21
 800a03a:	f022 0203 	bic.w	r2, r2, #3
 800a03e:	3204      	adds	r2, #4
 800a040:	f104 0115 	add.w	r1, r4, #21
 800a044:	428f      	cmp	r7, r1
 800a046:	bf38      	it	cc
 800a048:	2204      	movcc	r2, #4
 800a04a:	9201      	str	r2, [sp, #4]
 800a04c:	9a02      	ldr	r2, [sp, #8]
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	429a      	cmp	r2, r3
 800a052:	d80c      	bhi.n	800a06e <__multiply+0x9e>
 800a054:	2e00      	cmp	r6, #0
 800a056:	dd03      	ble.n	800a060 <__multiply+0x90>
 800a058:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d05b      	beq.n	800a118 <__multiply+0x148>
 800a060:	6106      	str	r6, [r0, #16]
 800a062:	b005      	add	sp, #20
 800a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a068:	f843 2b04 	str.w	r2, [r3], #4
 800a06c:	e7d8      	b.n	800a020 <__multiply+0x50>
 800a06e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a072:	f1ba 0f00 	cmp.w	sl, #0
 800a076:	d024      	beq.n	800a0c2 <__multiply+0xf2>
 800a078:	f104 0e14 	add.w	lr, r4, #20
 800a07c:	46a9      	mov	r9, r5
 800a07e:	f04f 0c00 	mov.w	ip, #0
 800a082:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a086:	f8d9 1000 	ldr.w	r1, [r9]
 800a08a:	fa1f fb82 	uxth.w	fp, r2
 800a08e:	b289      	uxth	r1, r1
 800a090:	fb0a 110b 	mla	r1, sl, fp, r1
 800a094:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a098:	f8d9 2000 	ldr.w	r2, [r9]
 800a09c:	4461      	add	r1, ip
 800a09e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0aa:	b289      	uxth	r1, r1
 800a0ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0b0:	4577      	cmp	r7, lr
 800a0b2:	f849 1b04 	str.w	r1, [r9], #4
 800a0b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0ba:	d8e2      	bhi.n	800a082 <__multiply+0xb2>
 800a0bc:	9a01      	ldr	r2, [sp, #4]
 800a0be:	f845 c002 	str.w	ip, [r5, r2]
 800a0c2:	9a03      	ldr	r2, [sp, #12]
 800a0c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	f1b9 0f00 	cmp.w	r9, #0
 800a0ce:	d021      	beq.n	800a114 <__multiply+0x144>
 800a0d0:	6829      	ldr	r1, [r5, #0]
 800a0d2:	f104 0c14 	add.w	ip, r4, #20
 800a0d6:	46ae      	mov	lr, r5
 800a0d8:	f04f 0a00 	mov.w	sl, #0
 800a0dc:	f8bc b000 	ldrh.w	fp, [ip]
 800a0e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0e4:	fb09 220b 	mla	r2, r9, fp, r2
 800a0e8:	4452      	add	r2, sl
 800a0ea:	b289      	uxth	r1, r1
 800a0ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0f0:	f84e 1b04 	str.w	r1, [lr], #4
 800a0f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a0f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0fc:	f8be 1000 	ldrh.w	r1, [lr]
 800a100:	fb09 110a 	mla	r1, r9, sl, r1
 800a104:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a108:	4567      	cmp	r7, ip
 800a10a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a10e:	d8e5      	bhi.n	800a0dc <__multiply+0x10c>
 800a110:	9a01      	ldr	r2, [sp, #4]
 800a112:	50a9      	str	r1, [r5, r2]
 800a114:	3504      	adds	r5, #4
 800a116:	e799      	b.n	800a04c <__multiply+0x7c>
 800a118:	3e01      	subs	r6, #1
 800a11a:	e79b      	b.n	800a054 <__multiply+0x84>
 800a11c:	0800d603 	.word	0x0800d603
 800a120:	0800d614 	.word	0x0800d614

0800a124 <__pow5mult>:
 800a124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a128:	4615      	mov	r5, r2
 800a12a:	f012 0203 	ands.w	r2, r2, #3
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	d007      	beq.n	800a144 <__pow5mult+0x20>
 800a134:	4c25      	ldr	r4, [pc, #148]	; (800a1cc <__pow5mult+0xa8>)
 800a136:	3a01      	subs	r2, #1
 800a138:	2300      	movs	r3, #0
 800a13a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a13e:	f7ff fe53 	bl	8009de8 <__multadd>
 800a142:	4607      	mov	r7, r0
 800a144:	10ad      	asrs	r5, r5, #2
 800a146:	d03d      	beq.n	800a1c4 <__pow5mult+0xa0>
 800a148:	69f4      	ldr	r4, [r6, #28]
 800a14a:	b97c      	cbnz	r4, 800a16c <__pow5mult+0x48>
 800a14c:	2010      	movs	r0, #16
 800a14e:	f7ff fd35 	bl	8009bbc <malloc>
 800a152:	4602      	mov	r2, r0
 800a154:	61f0      	str	r0, [r6, #28]
 800a156:	b928      	cbnz	r0, 800a164 <__pow5mult+0x40>
 800a158:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <__pow5mult+0xac>)
 800a15a:	481e      	ldr	r0, [pc, #120]	; (800a1d4 <__pow5mult+0xb0>)
 800a15c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a160:	f002 f8c6 	bl	800c2f0 <__assert_func>
 800a164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a168:	6004      	str	r4, [r0, #0]
 800a16a:	60c4      	str	r4, [r0, #12]
 800a16c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a174:	b94c      	cbnz	r4, 800a18a <__pow5mult+0x66>
 800a176:	f240 2171 	movw	r1, #625	; 0x271
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ff12 	bl	8009fa4 <__i2b>
 800a180:	2300      	movs	r3, #0
 800a182:	f8c8 0008 	str.w	r0, [r8, #8]
 800a186:	4604      	mov	r4, r0
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	f04f 0900 	mov.w	r9, #0
 800a18e:	07eb      	lsls	r3, r5, #31
 800a190:	d50a      	bpl.n	800a1a8 <__pow5mult+0x84>
 800a192:	4639      	mov	r1, r7
 800a194:	4622      	mov	r2, r4
 800a196:	4630      	mov	r0, r6
 800a198:	f7ff ff1a 	bl	8009fd0 <__multiply>
 800a19c:	4639      	mov	r1, r7
 800a19e:	4680      	mov	r8, r0
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff fdff 	bl	8009da4 <_Bfree>
 800a1a6:	4647      	mov	r7, r8
 800a1a8:	106d      	asrs	r5, r5, #1
 800a1aa:	d00b      	beq.n	800a1c4 <__pow5mult+0xa0>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	b938      	cbnz	r0, 800a1c0 <__pow5mult+0x9c>
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f7ff ff0b 	bl	8009fd0 <__multiply>
 800a1ba:	6020      	str	r0, [r4, #0]
 800a1bc:	f8c0 9000 	str.w	r9, [r0]
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	e7e4      	b.n	800a18e <__pow5mult+0x6a>
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800d760 	.word	0x0800d760
 800a1d0:	0800d594 	.word	0x0800d594
 800a1d4:	0800d614 	.word	0x0800d614

0800a1d8 <__lshift>:
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	460c      	mov	r4, r1
 800a1de:	6849      	ldr	r1, [r1, #4]
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	4691      	mov	r9, r2
 800a1ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1f0:	f108 0601 	add.w	r6, r8, #1
 800a1f4:	42b3      	cmp	r3, r6
 800a1f6:	db0b      	blt.n	800a210 <__lshift+0x38>
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff fd93 	bl	8009d24 <_Balloc>
 800a1fe:	4605      	mov	r5, r0
 800a200:	b948      	cbnz	r0, 800a216 <__lshift+0x3e>
 800a202:	4602      	mov	r2, r0
 800a204:	4b28      	ldr	r3, [pc, #160]	; (800a2a8 <__lshift+0xd0>)
 800a206:	4829      	ldr	r0, [pc, #164]	; (800a2ac <__lshift+0xd4>)
 800a208:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a20c:	f002 f870 	bl	800c2f0 <__assert_func>
 800a210:	3101      	adds	r1, #1
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	e7ee      	b.n	800a1f4 <__lshift+0x1c>
 800a216:	2300      	movs	r3, #0
 800a218:	f100 0114 	add.w	r1, r0, #20
 800a21c:	f100 0210 	add.w	r2, r0, #16
 800a220:	4618      	mov	r0, r3
 800a222:	4553      	cmp	r3, sl
 800a224:	db33      	blt.n	800a28e <__lshift+0xb6>
 800a226:	6920      	ldr	r0, [r4, #16]
 800a228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a22c:	f104 0314 	add.w	r3, r4, #20
 800a230:	f019 091f 	ands.w	r9, r9, #31
 800a234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a23c:	d02b      	beq.n	800a296 <__lshift+0xbe>
 800a23e:	f1c9 0e20 	rsb	lr, r9, #32
 800a242:	468a      	mov	sl, r1
 800a244:	2200      	movs	r2, #0
 800a246:	6818      	ldr	r0, [r3, #0]
 800a248:	fa00 f009 	lsl.w	r0, r0, r9
 800a24c:	4310      	orrs	r0, r2
 800a24e:	f84a 0b04 	str.w	r0, [sl], #4
 800a252:	f853 2b04 	ldr.w	r2, [r3], #4
 800a256:	459c      	cmp	ip, r3
 800a258:	fa22 f20e 	lsr.w	r2, r2, lr
 800a25c:	d8f3      	bhi.n	800a246 <__lshift+0x6e>
 800a25e:	ebac 0304 	sub.w	r3, ip, r4
 800a262:	3b15      	subs	r3, #21
 800a264:	f023 0303 	bic.w	r3, r3, #3
 800a268:	3304      	adds	r3, #4
 800a26a:	f104 0015 	add.w	r0, r4, #21
 800a26e:	4584      	cmp	ip, r0
 800a270:	bf38      	it	cc
 800a272:	2304      	movcc	r3, #4
 800a274:	50ca      	str	r2, [r1, r3]
 800a276:	b10a      	cbz	r2, 800a27c <__lshift+0xa4>
 800a278:	f108 0602 	add.w	r6, r8, #2
 800a27c:	3e01      	subs	r6, #1
 800a27e:	4638      	mov	r0, r7
 800a280:	612e      	str	r6, [r5, #16]
 800a282:	4621      	mov	r1, r4
 800a284:	f7ff fd8e 	bl	8009da4 <_Bfree>
 800a288:	4628      	mov	r0, r5
 800a28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a292:	3301      	adds	r3, #1
 800a294:	e7c5      	b.n	800a222 <__lshift+0x4a>
 800a296:	3904      	subs	r1, #4
 800a298:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2a0:	459c      	cmp	ip, r3
 800a2a2:	d8f9      	bhi.n	800a298 <__lshift+0xc0>
 800a2a4:	e7ea      	b.n	800a27c <__lshift+0xa4>
 800a2a6:	bf00      	nop
 800a2a8:	0800d603 	.word	0x0800d603
 800a2ac:	0800d614 	.word	0x0800d614

0800a2b0 <__mcmp>:
 800a2b0:	b530      	push	{r4, r5, lr}
 800a2b2:	6902      	ldr	r2, [r0, #16]
 800a2b4:	690c      	ldr	r4, [r1, #16]
 800a2b6:	1b12      	subs	r2, r2, r4
 800a2b8:	d10e      	bne.n	800a2d8 <__mcmp+0x28>
 800a2ba:	f100 0314 	add.w	r3, r0, #20
 800a2be:	3114      	adds	r1, #20
 800a2c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2d0:	42a5      	cmp	r5, r4
 800a2d2:	d003      	beq.n	800a2dc <__mcmp+0x2c>
 800a2d4:	d305      	bcc.n	800a2e2 <__mcmp+0x32>
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	4610      	mov	r0, r2
 800a2da:	bd30      	pop	{r4, r5, pc}
 800a2dc:	4283      	cmp	r3, r0
 800a2de:	d3f3      	bcc.n	800a2c8 <__mcmp+0x18>
 800a2e0:	e7fa      	b.n	800a2d8 <__mcmp+0x28>
 800a2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e6:	e7f7      	b.n	800a2d8 <__mcmp+0x28>

0800a2e8 <__mdiff>:
 800a2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4690      	mov	r8, r2
 800a2f6:	f7ff ffdb 	bl	800a2b0 <__mcmp>
 800a2fa:	1e05      	subs	r5, r0, #0
 800a2fc:	d110      	bne.n	800a320 <__mdiff+0x38>
 800a2fe:	4629      	mov	r1, r5
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff fd0f 	bl	8009d24 <_Balloc>
 800a306:	b930      	cbnz	r0, 800a316 <__mdiff+0x2e>
 800a308:	4b3a      	ldr	r3, [pc, #232]	; (800a3f4 <__mdiff+0x10c>)
 800a30a:	4602      	mov	r2, r0
 800a30c:	f240 2137 	movw	r1, #567	; 0x237
 800a310:	4839      	ldr	r0, [pc, #228]	; (800a3f8 <__mdiff+0x110>)
 800a312:	f001 ffed 	bl	800c2f0 <__assert_func>
 800a316:	2301      	movs	r3, #1
 800a318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a31c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	bfa4      	itt	ge
 800a322:	4643      	movge	r3, r8
 800a324:	46a0      	movge	r8, r4
 800a326:	4630      	mov	r0, r6
 800a328:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a32c:	bfa6      	itte	ge
 800a32e:	461c      	movge	r4, r3
 800a330:	2500      	movge	r5, #0
 800a332:	2501      	movlt	r5, #1
 800a334:	f7ff fcf6 	bl	8009d24 <_Balloc>
 800a338:	b920      	cbnz	r0, 800a344 <__mdiff+0x5c>
 800a33a:	4b2e      	ldr	r3, [pc, #184]	; (800a3f4 <__mdiff+0x10c>)
 800a33c:	4602      	mov	r2, r0
 800a33e:	f240 2145 	movw	r1, #581	; 0x245
 800a342:	e7e5      	b.n	800a310 <__mdiff+0x28>
 800a344:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a348:	6926      	ldr	r6, [r4, #16]
 800a34a:	60c5      	str	r5, [r0, #12]
 800a34c:	f104 0914 	add.w	r9, r4, #20
 800a350:	f108 0514 	add.w	r5, r8, #20
 800a354:	f100 0e14 	add.w	lr, r0, #20
 800a358:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a35c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a360:	f108 0210 	add.w	r2, r8, #16
 800a364:	46f2      	mov	sl, lr
 800a366:	2100      	movs	r1, #0
 800a368:	f859 3b04 	ldr.w	r3, [r9], #4
 800a36c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a370:	fa11 f88b 	uxtah	r8, r1, fp
 800a374:	b299      	uxth	r1, r3
 800a376:	0c1b      	lsrs	r3, r3, #16
 800a378:	eba8 0801 	sub.w	r8, r8, r1
 800a37c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a380:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a384:	fa1f f888 	uxth.w	r8, r8
 800a388:	1419      	asrs	r1, r3, #16
 800a38a:	454e      	cmp	r6, r9
 800a38c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a390:	f84a 3b04 	str.w	r3, [sl], #4
 800a394:	d8e8      	bhi.n	800a368 <__mdiff+0x80>
 800a396:	1b33      	subs	r3, r6, r4
 800a398:	3b15      	subs	r3, #21
 800a39a:	f023 0303 	bic.w	r3, r3, #3
 800a39e:	3304      	adds	r3, #4
 800a3a0:	3415      	adds	r4, #21
 800a3a2:	42a6      	cmp	r6, r4
 800a3a4:	bf38      	it	cc
 800a3a6:	2304      	movcc	r3, #4
 800a3a8:	441d      	add	r5, r3
 800a3aa:	4473      	add	r3, lr
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	462e      	mov	r6, r5
 800a3b0:	4566      	cmp	r6, ip
 800a3b2:	d30e      	bcc.n	800a3d2 <__mdiff+0xea>
 800a3b4:	f10c 0203 	add.w	r2, ip, #3
 800a3b8:	1b52      	subs	r2, r2, r5
 800a3ba:	f022 0203 	bic.w	r2, r2, #3
 800a3be:	3d03      	subs	r5, #3
 800a3c0:	45ac      	cmp	ip, r5
 800a3c2:	bf38      	it	cc
 800a3c4:	2200      	movcc	r2, #0
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a3cc:	b17a      	cbz	r2, 800a3ee <__mdiff+0x106>
 800a3ce:	6107      	str	r7, [r0, #16]
 800a3d0:	e7a4      	b.n	800a31c <__mdiff+0x34>
 800a3d2:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3d6:	fa11 f288 	uxtah	r2, r1, r8
 800a3da:	1414      	asrs	r4, r2, #16
 800a3dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3e0:	b292      	uxth	r2, r2
 800a3e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3e6:	f84e 2b04 	str.w	r2, [lr], #4
 800a3ea:	1421      	asrs	r1, r4, #16
 800a3ec:	e7e0      	b.n	800a3b0 <__mdiff+0xc8>
 800a3ee:	3f01      	subs	r7, #1
 800a3f0:	e7ea      	b.n	800a3c8 <__mdiff+0xe0>
 800a3f2:	bf00      	nop
 800a3f4:	0800d603 	.word	0x0800d603
 800a3f8:	0800d614 	.word	0x0800d614

0800a3fc <__ulp>:
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	ed8d 0b00 	vstr	d0, [sp]
 800a402:	9a01      	ldr	r2, [sp, #4]
 800a404:	4b0f      	ldr	r3, [pc, #60]	; (800a444 <__ulp+0x48>)
 800a406:	4013      	ands	r3, r2
 800a408:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc08      	bgt.n	800a422 <__ulp+0x26>
 800a410:	425b      	negs	r3, r3
 800a412:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a416:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a41a:	da04      	bge.n	800a426 <__ulp+0x2a>
 800a41c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a420:	4113      	asrs	r3, r2
 800a422:	2200      	movs	r2, #0
 800a424:	e008      	b.n	800a438 <__ulp+0x3c>
 800a426:	f1a2 0314 	sub.w	r3, r2, #20
 800a42a:	2b1e      	cmp	r3, #30
 800a42c:	bfda      	itte	le
 800a42e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a432:	40da      	lsrle	r2, r3
 800a434:	2201      	movgt	r2, #1
 800a436:	2300      	movs	r3, #0
 800a438:	4619      	mov	r1, r3
 800a43a:	4610      	mov	r0, r2
 800a43c:	ec41 0b10 	vmov	d0, r0, r1
 800a440:	b002      	add	sp, #8
 800a442:	4770      	bx	lr
 800a444:	7ff00000 	.word	0x7ff00000

0800a448 <__b2d>:
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	6906      	ldr	r6, [r0, #16]
 800a44e:	f100 0814 	add.w	r8, r0, #20
 800a452:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a456:	1f37      	subs	r7, r6, #4
 800a458:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7ff fd53 	bl	8009f08 <__hi0bits>
 800a462:	f1c0 0320 	rsb	r3, r0, #32
 800a466:	280a      	cmp	r0, #10
 800a468:	600b      	str	r3, [r1, #0]
 800a46a:	491b      	ldr	r1, [pc, #108]	; (800a4d8 <__b2d+0x90>)
 800a46c:	dc15      	bgt.n	800a49a <__b2d+0x52>
 800a46e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a472:	fa22 f30c 	lsr.w	r3, r2, ip
 800a476:	45b8      	cmp	r8, r7
 800a478:	ea43 0501 	orr.w	r5, r3, r1
 800a47c:	bf34      	ite	cc
 800a47e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a482:	2300      	movcs	r3, #0
 800a484:	3015      	adds	r0, #21
 800a486:	fa02 f000 	lsl.w	r0, r2, r0
 800a48a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a48e:	4303      	orrs	r3, r0
 800a490:	461c      	mov	r4, r3
 800a492:	ec45 4b10 	vmov	d0, r4, r5
 800a496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a49a:	45b8      	cmp	r8, r7
 800a49c:	bf3a      	itte	cc
 800a49e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4a2:	f1a6 0708 	subcc.w	r7, r6, #8
 800a4a6:	2300      	movcs	r3, #0
 800a4a8:	380b      	subs	r0, #11
 800a4aa:	d012      	beq.n	800a4d2 <__b2d+0x8a>
 800a4ac:	f1c0 0120 	rsb	r1, r0, #32
 800a4b0:	fa23 f401 	lsr.w	r4, r3, r1
 800a4b4:	4082      	lsls	r2, r0
 800a4b6:	4322      	orrs	r2, r4
 800a4b8:	4547      	cmp	r7, r8
 800a4ba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a4be:	bf8c      	ite	hi
 800a4c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4c4:	2200      	movls	r2, #0
 800a4c6:	4083      	lsls	r3, r0
 800a4c8:	40ca      	lsrs	r2, r1
 800a4ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	e7de      	b.n	800a490 <__b2d+0x48>
 800a4d2:	ea42 0501 	orr.w	r5, r2, r1
 800a4d6:	e7db      	b.n	800a490 <__b2d+0x48>
 800a4d8:	3ff00000 	.word	0x3ff00000

0800a4dc <__d2b>:
 800a4dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	ec59 8b10 	vmov	r8, r9, d0
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	f7ff fc1b 	bl	8009d24 <_Balloc>
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	b930      	cbnz	r0, 800a500 <__d2b+0x24>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	4b24      	ldr	r3, [pc, #144]	; (800a588 <__d2b+0xac>)
 800a4f6:	4825      	ldr	r0, [pc, #148]	; (800a58c <__d2b+0xb0>)
 800a4f8:	f240 310f 	movw	r1, #783	; 0x30f
 800a4fc:	f001 fef8 	bl	800c2f0 <__assert_func>
 800a500:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a504:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a508:	bb2d      	cbnz	r5, 800a556 <__d2b+0x7a>
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	f1b8 0300 	subs.w	r3, r8, #0
 800a510:	d026      	beq.n	800a560 <__d2b+0x84>
 800a512:	4668      	mov	r0, sp
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	f7ff fd17 	bl	8009f48 <__lo0bits>
 800a51a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a51e:	b1e8      	cbz	r0, 800a55c <__d2b+0x80>
 800a520:	f1c0 0320 	rsb	r3, r0, #32
 800a524:	fa02 f303 	lsl.w	r3, r2, r3
 800a528:	430b      	orrs	r3, r1
 800a52a:	40c2      	lsrs	r2, r0
 800a52c:	6163      	str	r3, [r4, #20]
 800a52e:	9201      	str	r2, [sp, #4]
 800a530:	9b01      	ldr	r3, [sp, #4]
 800a532:	61a3      	str	r3, [r4, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	bf14      	ite	ne
 800a538:	2202      	movne	r2, #2
 800a53a:	2201      	moveq	r2, #1
 800a53c:	6122      	str	r2, [r4, #16]
 800a53e:	b1bd      	cbz	r5, 800a570 <__d2b+0x94>
 800a540:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a544:	4405      	add	r5, r0
 800a546:	603d      	str	r5, [r7, #0]
 800a548:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a54c:	6030      	str	r0, [r6, #0]
 800a54e:	4620      	mov	r0, r4
 800a550:	b003      	add	sp, #12
 800a552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a55a:	e7d6      	b.n	800a50a <__d2b+0x2e>
 800a55c:	6161      	str	r1, [r4, #20]
 800a55e:	e7e7      	b.n	800a530 <__d2b+0x54>
 800a560:	a801      	add	r0, sp, #4
 800a562:	f7ff fcf1 	bl	8009f48 <__lo0bits>
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	6163      	str	r3, [r4, #20]
 800a56a:	3020      	adds	r0, #32
 800a56c:	2201      	movs	r2, #1
 800a56e:	e7e5      	b.n	800a53c <__d2b+0x60>
 800a570:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a578:	6038      	str	r0, [r7, #0]
 800a57a:	6918      	ldr	r0, [r3, #16]
 800a57c:	f7ff fcc4 	bl	8009f08 <__hi0bits>
 800a580:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a584:	e7e2      	b.n	800a54c <__d2b+0x70>
 800a586:	bf00      	nop
 800a588:	0800d603 	.word	0x0800d603
 800a58c:	0800d614 	.word	0x0800d614

0800a590 <__ratio>:
 800a590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	4688      	mov	r8, r1
 800a596:	4669      	mov	r1, sp
 800a598:	4681      	mov	r9, r0
 800a59a:	f7ff ff55 	bl	800a448 <__b2d>
 800a59e:	a901      	add	r1, sp, #4
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	ec55 4b10 	vmov	r4, r5, d0
 800a5a6:	f7ff ff4f 	bl	800a448 <__b2d>
 800a5aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a5b2:	eba3 0c02 	sub.w	ip, r3, r2
 800a5b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a5c0:	ec51 0b10 	vmov	r0, r1, d0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bfd6      	itet	le
 800a5c8:	460a      	movle	r2, r1
 800a5ca:	462a      	movgt	r2, r5
 800a5cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5d0:	468b      	mov	fp, r1
 800a5d2:	462f      	mov	r7, r5
 800a5d4:	bfd4      	ite	le
 800a5d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a5da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5de:	4620      	mov	r0, r4
 800a5e0:	ee10 2a10 	vmov	r2, s0
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f6 f930 	bl	800084c <__aeabi_ddiv>
 800a5ec:	ec41 0b10 	vmov	d0, r0, r1
 800a5f0:	b003      	add	sp, #12
 800a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5f6 <__copybits>:
 800a5f6:	3901      	subs	r1, #1
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	1149      	asrs	r1, r1, #5
 800a5fc:	6914      	ldr	r4, [r2, #16]
 800a5fe:	3101      	adds	r1, #1
 800a600:	f102 0314 	add.w	r3, r2, #20
 800a604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a608:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a60c:	1f05      	subs	r5, r0, #4
 800a60e:	42a3      	cmp	r3, r4
 800a610:	d30c      	bcc.n	800a62c <__copybits+0x36>
 800a612:	1aa3      	subs	r3, r4, r2
 800a614:	3b11      	subs	r3, #17
 800a616:	f023 0303 	bic.w	r3, r3, #3
 800a61a:	3211      	adds	r2, #17
 800a61c:	42a2      	cmp	r2, r4
 800a61e:	bf88      	it	hi
 800a620:	2300      	movhi	r3, #0
 800a622:	4418      	add	r0, r3
 800a624:	2300      	movs	r3, #0
 800a626:	4288      	cmp	r0, r1
 800a628:	d305      	bcc.n	800a636 <__copybits+0x40>
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a630:	f845 6f04 	str.w	r6, [r5, #4]!
 800a634:	e7eb      	b.n	800a60e <__copybits+0x18>
 800a636:	f840 3b04 	str.w	r3, [r0], #4
 800a63a:	e7f4      	b.n	800a626 <__copybits+0x30>

0800a63c <__any_on>:
 800a63c:	f100 0214 	add.w	r2, r0, #20
 800a640:	6900      	ldr	r0, [r0, #16]
 800a642:	114b      	asrs	r3, r1, #5
 800a644:	4298      	cmp	r0, r3
 800a646:	b510      	push	{r4, lr}
 800a648:	db11      	blt.n	800a66e <__any_on+0x32>
 800a64a:	dd0a      	ble.n	800a662 <__any_on+0x26>
 800a64c:	f011 011f 	ands.w	r1, r1, #31
 800a650:	d007      	beq.n	800a662 <__any_on+0x26>
 800a652:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a656:	fa24 f001 	lsr.w	r0, r4, r1
 800a65a:	fa00 f101 	lsl.w	r1, r0, r1
 800a65e:	428c      	cmp	r4, r1
 800a660:	d10b      	bne.n	800a67a <__any_on+0x3e>
 800a662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a666:	4293      	cmp	r3, r2
 800a668:	d803      	bhi.n	800a672 <__any_on+0x36>
 800a66a:	2000      	movs	r0, #0
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	4603      	mov	r3, r0
 800a670:	e7f7      	b.n	800a662 <__any_on+0x26>
 800a672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a676:	2900      	cmp	r1, #0
 800a678:	d0f5      	beq.n	800a666 <__any_on+0x2a>
 800a67a:	2001      	movs	r0, #1
 800a67c:	e7f6      	b.n	800a66c <__any_on+0x30>

0800a67e <sulp>:
 800a67e:	b570      	push	{r4, r5, r6, lr}
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	ec45 4b10 	vmov	d0, r4, r5
 800a688:	4616      	mov	r6, r2
 800a68a:	f7ff feb7 	bl	800a3fc <__ulp>
 800a68e:	ec51 0b10 	vmov	r0, r1, d0
 800a692:	b17e      	cbz	r6, 800a6b4 <sulp+0x36>
 800a694:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a698:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd09      	ble.n	800a6b4 <sulp+0x36>
 800a6a0:	051b      	lsls	r3, r3, #20
 800a6a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a6a6:	2400      	movs	r4, #0
 800a6a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	462b      	mov	r3, r5
 800a6b0:	f7f5 ffa2 	bl	80005f8 <__aeabi_dmul>
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6b8 <_strtod_l>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	ed2d 8b02 	vpush	{d8}
 800a6c0:	b09b      	sub	sp, #108	; 0x6c
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	9213      	str	r2, [sp, #76]	; 0x4c
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	9216      	str	r2, [sp, #88]	; 0x58
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	f04f 0800 	mov.w	r8, #0
 800a6d0:	f04f 0900 	mov.w	r9, #0
 800a6d4:	460a      	mov	r2, r1
 800a6d6:	9215      	str	r2, [sp, #84]	; 0x54
 800a6d8:	7811      	ldrb	r1, [r2, #0]
 800a6da:	292b      	cmp	r1, #43	; 0x2b
 800a6dc:	d04c      	beq.n	800a778 <_strtod_l+0xc0>
 800a6de:	d83a      	bhi.n	800a756 <_strtod_l+0x9e>
 800a6e0:	290d      	cmp	r1, #13
 800a6e2:	d834      	bhi.n	800a74e <_strtod_l+0x96>
 800a6e4:	2908      	cmp	r1, #8
 800a6e6:	d834      	bhi.n	800a752 <_strtod_l+0x9a>
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	d03d      	beq.n	800a768 <_strtod_l+0xb0>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	920a      	str	r2, [sp, #40]	; 0x28
 800a6f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a6f2:	7832      	ldrb	r2, [r6, #0]
 800a6f4:	2a30      	cmp	r2, #48	; 0x30
 800a6f6:	f040 80b4 	bne.w	800a862 <_strtod_l+0x1aa>
 800a6fa:	7872      	ldrb	r2, [r6, #1]
 800a6fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a700:	2a58      	cmp	r2, #88	; 0x58
 800a702:	d170      	bne.n	800a7e6 <_strtod_l+0x12e>
 800a704:	9302      	str	r3, [sp, #8]
 800a706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	ab16      	add	r3, sp, #88	; 0x58
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	4a8e      	ldr	r2, [pc, #568]	; (800a948 <_strtod_l+0x290>)
 800a710:	ab17      	add	r3, sp, #92	; 0x5c
 800a712:	a915      	add	r1, sp, #84	; 0x54
 800a714:	4620      	mov	r0, r4
 800a716:	f001 fe87 	bl	800c428 <__gethex>
 800a71a:	f010 070f 	ands.w	r7, r0, #15
 800a71e:	4605      	mov	r5, r0
 800a720:	d005      	beq.n	800a72e <_strtod_l+0x76>
 800a722:	2f06      	cmp	r7, #6
 800a724:	d12a      	bne.n	800a77c <_strtod_l+0xc4>
 800a726:	3601      	adds	r6, #1
 800a728:	2300      	movs	r3, #0
 800a72a:	9615      	str	r6, [sp, #84]	; 0x54
 800a72c:	930a      	str	r3, [sp, #40]	; 0x28
 800a72e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a730:	2b00      	cmp	r3, #0
 800a732:	f040 857f 	bne.w	800b234 <_strtod_l+0xb7c>
 800a736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a738:	b1db      	cbz	r3, 800a772 <_strtod_l+0xba>
 800a73a:	4642      	mov	r2, r8
 800a73c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a740:	ec43 2b10 	vmov	d0, r2, r3
 800a744:	b01b      	add	sp, #108	; 0x6c
 800a746:	ecbd 8b02 	vpop	{d8}
 800a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74e:	2920      	cmp	r1, #32
 800a750:	d1cc      	bne.n	800a6ec <_strtod_l+0x34>
 800a752:	3201      	adds	r2, #1
 800a754:	e7bf      	b.n	800a6d6 <_strtod_l+0x1e>
 800a756:	292d      	cmp	r1, #45	; 0x2d
 800a758:	d1c8      	bne.n	800a6ec <_strtod_l+0x34>
 800a75a:	2101      	movs	r1, #1
 800a75c:	910a      	str	r1, [sp, #40]	; 0x28
 800a75e:	1c51      	adds	r1, r2, #1
 800a760:	9115      	str	r1, [sp, #84]	; 0x54
 800a762:	7852      	ldrb	r2, [r2, #1]
 800a764:	2a00      	cmp	r2, #0
 800a766:	d1c3      	bne.n	800a6f0 <_strtod_l+0x38>
 800a768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a76a:	9515      	str	r5, [sp, #84]	; 0x54
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f040 855f 	bne.w	800b230 <_strtod_l+0xb78>
 800a772:	4642      	mov	r2, r8
 800a774:	464b      	mov	r3, r9
 800a776:	e7e3      	b.n	800a740 <_strtod_l+0x88>
 800a778:	2100      	movs	r1, #0
 800a77a:	e7ef      	b.n	800a75c <_strtod_l+0xa4>
 800a77c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a77e:	b13a      	cbz	r2, 800a790 <_strtod_l+0xd8>
 800a780:	2135      	movs	r1, #53	; 0x35
 800a782:	a818      	add	r0, sp, #96	; 0x60
 800a784:	f7ff ff37 	bl	800a5f6 <__copybits>
 800a788:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7ff fb0a 	bl	8009da4 <_Bfree>
 800a790:	3f01      	subs	r7, #1
 800a792:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a794:	2f04      	cmp	r7, #4
 800a796:	d806      	bhi.n	800a7a6 <_strtod_l+0xee>
 800a798:	e8df f007 	tbb	[pc, r7]
 800a79c:	201d0314 	.word	0x201d0314
 800a7a0:	14          	.byte	0x14
 800a7a1:	00          	.byte	0x00
 800a7a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a7a6:	05e9      	lsls	r1, r5, #23
 800a7a8:	bf48      	it	mi
 800a7aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a7ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7b2:	0d1b      	lsrs	r3, r3, #20
 800a7b4:	051b      	lsls	r3, r3, #20
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1b9      	bne.n	800a72e <_strtod_l+0x76>
 800a7ba:	f7fe fb03 	bl	8008dc4 <__errno>
 800a7be:	2322      	movs	r3, #34	; 0x22
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	e7b4      	b.n	800a72e <_strtod_l+0x76>
 800a7c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a7c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a7cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a7d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a7d4:	e7e7      	b.n	800a7a6 <_strtod_l+0xee>
 800a7d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a950 <_strtod_l+0x298>
 800a7da:	e7e4      	b.n	800a7a6 <_strtod_l+0xee>
 800a7dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a7e0:	f04f 38ff 	mov.w	r8, #4294967295
 800a7e4:	e7df      	b.n	800a7a6 <_strtod_l+0xee>
 800a7e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	9215      	str	r2, [sp, #84]	; 0x54
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b30      	cmp	r3, #48	; 0x30
 800a7f0:	d0f9      	beq.n	800a7e6 <_strtod_l+0x12e>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d09b      	beq.n	800a72e <_strtod_l+0x76>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	f04f 0a00 	mov.w	sl, #0
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a800:	930b      	str	r3, [sp, #44]	; 0x2c
 800a802:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a806:	46d3      	mov	fp, sl
 800a808:	220a      	movs	r2, #10
 800a80a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a80c:	7806      	ldrb	r6, [r0, #0]
 800a80e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a812:	b2d9      	uxtb	r1, r3
 800a814:	2909      	cmp	r1, #9
 800a816:	d926      	bls.n	800a866 <_strtod_l+0x1ae>
 800a818:	494c      	ldr	r1, [pc, #304]	; (800a94c <_strtod_l+0x294>)
 800a81a:	2201      	movs	r2, #1
 800a81c:	f7fe fa60 	bl	8008ce0 <strncmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	d030      	beq.n	800a886 <_strtod_l+0x1ce>
 800a824:	2000      	movs	r0, #0
 800a826:	4632      	mov	r2, r6
 800a828:	9005      	str	r0, [sp, #20]
 800a82a:	465e      	mov	r6, fp
 800a82c:	4603      	mov	r3, r0
 800a82e:	2a65      	cmp	r2, #101	; 0x65
 800a830:	d001      	beq.n	800a836 <_strtod_l+0x17e>
 800a832:	2a45      	cmp	r2, #69	; 0x45
 800a834:	d113      	bne.n	800a85e <_strtod_l+0x1a6>
 800a836:	b91e      	cbnz	r6, 800a840 <_strtod_l+0x188>
 800a838:	9a04      	ldr	r2, [sp, #16]
 800a83a:	4302      	orrs	r2, r0
 800a83c:	d094      	beq.n	800a768 <_strtod_l+0xb0>
 800a83e:	2600      	movs	r6, #0
 800a840:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a842:	1c6a      	adds	r2, r5, #1
 800a844:	9215      	str	r2, [sp, #84]	; 0x54
 800a846:	786a      	ldrb	r2, [r5, #1]
 800a848:	2a2b      	cmp	r2, #43	; 0x2b
 800a84a:	d074      	beq.n	800a936 <_strtod_l+0x27e>
 800a84c:	2a2d      	cmp	r2, #45	; 0x2d
 800a84e:	d078      	beq.n	800a942 <_strtod_l+0x28a>
 800a850:	f04f 0c00 	mov.w	ip, #0
 800a854:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a858:	2909      	cmp	r1, #9
 800a85a:	d97f      	bls.n	800a95c <_strtod_l+0x2a4>
 800a85c:	9515      	str	r5, [sp, #84]	; 0x54
 800a85e:	2700      	movs	r7, #0
 800a860:	e09e      	b.n	800a9a0 <_strtod_l+0x2e8>
 800a862:	2300      	movs	r3, #0
 800a864:	e7c8      	b.n	800a7f8 <_strtod_l+0x140>
 800a866:	f1bb 0f08 	cmp.w	fp, #8
 800a86a:	bfd8      	it	le
 800a86c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a86e:	f100 0001 	add.w	r0, r0, #1
 800a872:	bfda      	itte	le
 800a874:	fb02 3301 	mlale	r3, r2, r1, r3
 800a878:	9309      	strle	r3, [sp, #36]	; 0x24
 800a87a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a87e:	f10b 0b01 	add.w	fp, fp, #1
 800a882:	9015      	str	r0, [sp, #84]	; 0x54
 800a884:	e7c1      	b.n	800a80a <_strtod_l+0x152>
 800a886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	9215      	str	r2, [sp, #84]	; 0x54
 800a88c:	785a      	ldrb	r2, [r3, #1]
 800a88e:	f1bb 0f00 	cmp.w	fp, #0
 800a892:	d037      	beq.n	800a904 <_strtod_l+0x24c>
 800a894:	9005      	str	r0, [sp, #20]
 800a896:	465e      	mov	r6, fp
 800a898:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d912      	bls.n	800a8c6 <_strtod_l+0x20e>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e7c4      	b.n	800a82e <_strtod_l+0x176>
 800a8a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	9215      	str	r2, [sp, #84]	; 0x54
 800a8aa:	785a      	ldrb	r2, [r3, #1]
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	2a30      	cmp	r2, #48	; 0x30
 800a8b0:	d0f8      	beq.n	800a8a4 <_strtod_l+0x1ec>
 800a8b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	f200 84c1 	bhi.w	800b23e <_strtod_l+0xb86>
 800a8bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8be:	9005      	str	r0, [sp, #20]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	3a30      	subs	r2, #48	; 0x30
 800a8c8:	f100 0301 	add.w	r3, r0, #1
 800a8cc:	d014      	beq.n	800a8f8 <_strtod_l+0x240>
 800a8ce:	9905      	ldr	r1, [sp, #20]
 800a8d0:	4419      	add	r1, r3
 800a8d2:	9105      	str	r1, [sp, #20]
 800a8d4:	4633      	mov	r3, r6
 800a8d6:	eb00 0c06 	add.w	ip, r0, r6
 800a8da:	210a      	movs	r1, #10
 800a8dc:	4563      	cmp	r3, ip
 800a8de:	d113      	bne.n	800a908 <_strtod_l+0x250>
 800a8e0:	1833      	adds	r3, r6, r0
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	f106 0601 	add.w	r6, r6, #1
 800a8e8:	4406      	add	r6, r0
 800a8ea:	dc1a      	bgt.n	800a922 <_strtod_l+0x26a>
 800a8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ee:	230a      	movs	r3, #10
 800a8f0:	fb03 2301 	mla	r3, r3, r1, r2
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a8fa:	1c51      	adds	r1, r2, #1
 800a8fc:	9115      	str	r1, [sp, #84]	; 0x54
 800a8fe:	7852      	ldrb	r2, [r2, #1]
 800a900:	4618      	mov	r0, r3
 800a902:	e7c9      	b.n	800a898 <_strtod_l+0x1e0>
 800a904:	4658      	mov	r0, fp
 800a906:	e7d2      	b.n	800a8ae <_strtod_l+0x1f6>
 800a908:	2b08      	cmp	r3, #8
 800a90a:	f103 0301 	add.w	r3, r3, #1
 800a90e:	dc03      	bgt.n	800a918 <_strtod_l+0x260>
 800a910:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a912:	434f      	muls	r7, r1
 800a914:	9709      	str	r7, [sp, #36]	; 0x24
 800a916:	e7e1      	b.n	800a8dc <_strtod_l+0x224>
 800a918:	2b10      	cmp	r3, #16
 800a91a:	bfd8      	it	le
 800a91c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a920:	e7dc      	b.n	800a8dc <_strtod_l+0x224>
 800a922:	2e10      	cmp	r6, #16
 800a924:	bfdc      	itt	le
 800a926:	230a      	movle	r3, #10
 800a928:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a92c:	e7e3      	b.n	800a8f6 <_strtod_l+0x23e>
 800a92e:	2300      	movs	r3, #0
 800a930:	9305      	str	r3, [sp, #20]
 800a932:	2301      	movs	r3, #1
 800a934:	e780      	b.n	800a838 <_strtod_l+0x180>
 800a936:	f04f 0c00 	mov.w	ip, #0
 800a93a:	1caa      	adds	r2, r5, #2
 800a93c:	9215      	str	r2, [sp, #84]	; 0x54
 800a93e:	78aa      	ldrb	r2, [r5, #2]
 800a940:	e788      	b.n	800a854 <_strtod_l+0x19c>
 800a942:	f04f 0c01 	mov.w	ip, #1
 800a946:	e7f8      	b.n	800a93a <_strtod_l+0x282>
 800a948:	0800d770 	.word	0x0800d770
 800a94c:	0800d76c 	.word	0x0800d76c
 800a950:	7ff00000 	.word	0x7ff00000
 800a954:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a956:	1c51      	adds	r1, r2, #1
 800a958:	9115      	str	r1, [sp, #84]	; 0x54
 800a95a:	7852      	ldrb	r2, [r2, #1]
 800a95c:	2a30      	cmp	r2, #48	; 0x30
 800a95e:	d0f9      	beq.n	800a954 <_strtod_l+0x29c>
 800a960:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a964:	2908      	cmp	r1, #8
 800a966:	f63f af7a 	bhi.w	800a85e <_strtod_l+0x1a6>
 800a96a:	3a30      	subs	r2, #48	; 0x30
 800a96c:	9208      	str	r2, [sp, #32]
 800a96e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a970:	920c      	str	r2, [sp, #48]	; 0x30
 800a972:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a974:	1c57      	adds	r7, r2, #1
 800a976:	9715      	str	r7, [sp, #84]	; 0x54
 800a978:	7852      	ldrb	r2, [r2, #1]
 800a97a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a97e:	f1be 0f09 	cmp.w	lr, #9
 800a982:	d938      	bls.n	800a9f6 <_strtod_l+0x33e>
 800a984:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a986:	1a7f      	subs	r7, r7, r1
 800a988:	2f08      	cmp	r7, #8
 800a98a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a98e:	dc03      	bgt.n	800a998 <_strtod_l+0x2e0>
 800a990:	9908      	ldr	r1, [sp, #32]
 800a992:	428f      	cmp	r7, r1
 800a994:	bfa8      	it	ge
 800a996:	460f      	movge	r7, r1
 800a998:	f1bc 0f00 	cmp.w	ip, #0
 800a99c:	d000      	beq.n	800a9a0 <_strtod_l+0x2e8>
 800a99e:	427f      	negs	r7, r7
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	d14f      	bne.n	800aa44 <_strtod_l+0x38c>
 800a9a4:	9904      	ldr	r1, [sp, #16]
 800a9a6:	4301      	orrs	r1, r0
 800a9a8:	f47f aec1 	bne.w	800a72e <_strtod_l+0x76>
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f47f aedb 	bne.w	800a768 <_strtod_l+0xb0>
 800a9b2:	2a69      	cmp	r2, #105	; 0x69
 800a9b4:	d029      	beq.n	800aa0a <_strtod_l+0x352>
 800a9b6:	dc26      	bgt.n	800aa06 <_strtod_l+0x34e>
 800a9b8:	2a49      	cmp	r2, #73	; 0x49
 800a9ba:	d026      	beq.n	800aa0a <_strtod_l+0x352>
 800a9bc:	2a4e      	cmp	r2, #78	; 0x4e
 800a9be:	f47f aed3 	bne.w	800a768 <_strtod_l+0xb0>
 800a9c2:	499b      	ldr	r1, [pc, #620]	; (800ac30 <_strtod_l+0x578>)
 800a9c4:	a815      	add	r0, sp, #84	; 0x54
 800a9c6:	f001 ff6f 	bl	800c8a8 <__match>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f43f aecc 	beq.w	800a768 <_strtod_l+0xb0>
 800a9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b28      	cmp	r3, #40	; 0x28
 800a9d6:	d12f      	bne.n	800aa38 <_strtod_l+0x380>
 800a9d8:	4996      	ldr	r1, [pc, #600]	; (800ac34 <_strtod_l+0x57c>)
 800a9da:	aa18      	add	r2, sp, #96	; 0x60
 800a9dc:	a815      	add	r0, sp, #84	; 0x54
 800a9de:	f001 ff77 	bl	800c8d0 <__hexnan>
 800a9e2:	2805      	cmp	r0, #5
 800a9e4:	d128      	bne.n	800aa38 <_strtod_l+0x380>
 800a9e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a9f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a9f4:	e69b      	b.n	800a72e <_strtod_l+0x76>
 800a9f6:	9f08      	ldr	r7, [sp, #32]
 800a9f8:	210a      	movs	r1, #10
 800a9fa:	fb01 2107 	mla	r1, r1, r7, r2
 800a9fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aa02:	9208      	str	r2, [sp, #32]
 800aa04:	e7b5      	b.n	800a972 <_strtod_l+0x2ba>
 800aa06:	2a6e      	cmp	r2, #110	; 0x6e
 800aa08:	e7d9      	b.n	800a9be <_strtod_l+0x306>
 800aa0a:	498b      	ldr	r1, [pc, #556]	; (800ac38 <_strtod_l+0x580>)
 800aa0c:	a815      	add	r0, sp, #84	; 0x54
 800aa0e:	f001 ff4b 	bl	800c8a8 <__match>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	f43f aea8 	beq.w	800a768 <_strtod_l+0xb0>
 800aa18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa1a:	4988      	ldr	r1, [pc, #544]	; (800ac3c <_strtod_l+0x584>)
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	a815      	add	r0, sp, #84	; 0x54
 800aa20:	9315      	str	r3, [sp, #84]	; 0x54
 800aa22:	f001 ff41 	bl	800c8a8 <__match>
 800aa26:	b910      	cbnz	r0, 800aa2e <_strtod_l+0x376>
 800aa28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9315      	str	r3, [sp, #84]	; 0x54
 800aa2e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ac4c <_strtod_l+0x594>
 800aa32:	f04f 0800 	mov.w	r8, #0
 800aa36:	e67a      	b.n	800a72e <_strtod_l+0x76>
 800aa38:	4881      	ldr	r0, [pc, #516]	; (800ac40 <_strtod_l+0x588>)
 800aa3a:	f001 fc51 	bl	800c2e0 <nan>
 800aa3e:	ec59 8b10 	vmov	r8, r9, d0
 800aa42:	e674      	b.n	800a72e <_strtod_l+0x76>
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa48:	1afb      	subs	r3, r7, r3
 800aa4a:	f1bb 0f00 	cmp.w	fp, #0
 800aa4e:	bf08      	it	eq
 800aa50:	46b3      	moveq	fp, r6
 800aa52:	2e10      	cmp	r6, #16
 800aa54:	9308      	str	r3, [sp, #32]
 800aa56:	4635      	mov	r5, r6
 800aa58:	bfa8      	it	ge
 800aa5a:	2510      	movge	r5, #16
 800aa5c:	f7f5 fd52 	bl	8000504 <__aeabi_ui2d>
 800aa60:	2e09      	cmp	r6, #9
 800aa62:	4680      	mov	r8, r0
 800aa64:	4689      	mov	r9, r1
 800aa66:	dd13      	ble.n	800aa90 <_strtod_l+0x3d8>
 800aa68:	4b76      	ldr	r3, [pc, #472]	; (800ac44 <_strtod_l+0x58c>)
 800aa6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa72:	f7f5 fdc1 	bl	80005f8 <__aeabi_dmul>
 800aa76:	4680      	mov	r8, r0
 800aa78:	4650      	mov	r0, sl
 800aa7a:	4689      	mov	r9, r1
 800aa7c:	f7f5 fd42 	bl	8000504 <__aeabi_ui2d>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4640      	mov	r0, r8
 800aa86:	4649      	mov	r1, r9
 800aa88:	f7f5 fc00 	bl	800028c <__adddf3>
 800aa8c:	4680      	mov	r8, r0
 800aa8e:	4689      	mov	r9, r1
 800aa90:	2e0f      	cmp	r6, #15
 800aa92:	dc38      	bgt.n	800ab06 <_strtod_l+0x44e>
 800aa94:	9b08      	ldr	r3, [sp, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f43f ae49 	beq.w	800a72e <_strtod_l+0x76>
 800aa9c:	dd24      	ble.n	800aae8 <_strtod_l+0x430>
 800aa9e:	2b16      	cmp	r3, #22
 800aaa0:	dc0b      	bgt.n	800aaba <_strtod_l+0x402>
 800aaa2:	4968      	ldr	r1, [pc, #416]	; (800ac44 <_strtod_l+0x58c>)
 800aaa4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aaa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	f7f5 fda2 	bl	80005f8 <__aeabi_dmul>
 800aab4:	4680      	mov	r8, r0
 800aab6:	4689      	mov	r9, r1
 800aab8:	e639      	b.n	800a72e <_strtod_l+0x76>
 800aaba:	9a08      	ldr	r2, [sp, #32]
 800aabc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aac0:	4293      	cmp	r3, r2
 800aac2:	db20      	blt.n	800ab06 <_strtod_l+0x44e>
 800aac4:	4c5f      	ldr	r4, [pc, #380]	; (800ac44 <_strtod_l+0x58c>)
 800aac6:	f1c6 060f 	rsb	r6, r6, #15
 800aaca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aace:	4642      	mov	r2, r8
 800aad0:	464b      	mov	r3, r9
 800aad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aad6:	f7f5 fd8f 	bl	80005f8 <__aeabi_dmul>
 800aada:	9b08      	ldr	r3, [sp, #32]
 800aadc:	1b9e      	subs	r6, r3, r6
 800aade:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aae2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aae6:	e7e3      	b.n	800aab0 <_strtod_l+0x3f8>
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	3316      	adds	r3, #22
 800aaec:	db0b      	blt.n	800ab06 <_strtod_l+0x44e>
 800aaee:	9b05      	ldr	r3, [sp, #20]
 800aaf0:	1bdf      	subs	r7, r3, r7
 800aaf2:	4b54      	ldr	r3, [pc, #336]	; (800ac44 <_strtod_l+0x58c>)
 800aaf4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aaf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aafc:	4640      	mov	r0, r8
 800aafe:	4649      	mov	r1, r9
 800ab00:	f7f5 fea4 	bl	800084c <__aeabi_ddiv>
 800ab04:	e7d6      	b.n	800aab4 <_strtod_l+0x3fc>
 800ab06:	9b08      	ldr	r3, [sp, #32]
 800ab08:	1b75      	subs	r5, r6, r5
 800ab0a:	441d      	add	r5, r3
 800ab0c:	2d00      	cmp	r5, #0
 800ab0e:	dd70      	ble.n	800abf2 <_strtod_l+0x53a>
 800ab10:	f015 030f 	ands.w	r3, r5, #15
 800ab14:	d00a      	beq.n	800ab2c <_strtod_l+0x474>
 800ab16:	494b      	ldr	r1, [pc, #300]	; (800ac44 <_strtod_l+0x58c>)
 800ab18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab1c:	4642      	mov	r2, r8
 800ab1e:	464b      	mov	r3, r9
 800ab20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab24:	f7f5 fd68 	bl	80005f8 <__aeabi_dmul>
 800ab28:	4680      	mov	r8, r0
 800ab2a:	4689      	mov	r9, r1
 800ab2c:	f035 050f 	bics.w	r5, r5, #15
 800ab30:	d04d      	beq.n	800abce <_strtod_l+0x516>
 800ab32:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ab36:	dd22      	ble.n	800ab7e <_strtod_l+0x4c6>
 800ab38:	2500      	movs	r5, #0
 800ab3a:	46ab      	mov	fp, r5
 800ab3c:	9509      	str	r5, [sp, #36]	; 0x24
 800ab3e:	9505      	str	r5, [sp, #20]
 800ab40:	2322      	movs	r3, #34	; 0x22
 800ab42:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ac4c <_strtod_l+0x594>
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	f04f 0800 	mov.w	r8, #0
 800ab4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f43f aded 	beq.w	800a72e <_strtod_l+0x76>
 800ab54:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff f924 	bl	8009da4 <_Bfree>
 800ab5c:	9905      	ldr	r1, [sp, #20]
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7ff f920 	bl	8009da4 <_Bfree>
 800ab64:	4659      	mov	r1, fp
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff f91c 	bl	8009da4 <_Bfree>
 800ab6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff f918 	bl	8009da4 <_Bfree>
 800ab74:	4629      	mov	r1, r5
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff f914 	bl	8009da4 <_Bfree>
 800ab7c:	e5d7      	b.n	800a72e <_strtod_l+0x76>
 800ab7e:	4b32      	ldr	r3, [pc, #200]	; (800ac48 <_strtod_l+0x590>)
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	2300      	movs	r3, #0
 800ab84:	112d      	asrs	r5, r5, #4
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	469a      	mov	sl, r3
 800ab8c:	2d01      	cmp	r5, #1
 800ab8e:	dc21      	bgt.n	800abd4 <_strtod_l+0x51c>
 800ab90:	b10b      	cbz	r3, 800ab96 <_strtod_l+0x4de>
 800ab92:	4680      	mov	r8, r0
 800ab94:	4689      	mov	r9, r1
 800ab96:	492c      	ldr	r1, [pc, #176]	; (800ac48 <_strtod_l+0x590>)
 800ab98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ab9c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aba0:	4642      	mov	r2, r8
 800aba2:	464b      	mov	r3, r9
 800aba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba8:	f7f5 fd26 	bl	80005f8 <__aeabi_dmul>
 800abac:	4b27      	ldr	r3, [pc, #156]	; (800ac4c <_strtod_l+0x594>)
 800abae:	460a      	mov	r2, r1
 800abb0:	400b      	ands	r3, r1
 800abb2:	4927      	ldr	r1, [pc, #156]	; (800ac50 <_strtod_l+0x598>)
 800abb4:	428b      	cmp	r3, r1
 800abb6:	4680      	mov	r8, r0
 800abb8:	d8be      	bhi.n	800ab38 <_strtod_l+0x480>
 800abba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800abbe:	428b      	cmp	r3, r1
 800abc0:	bf86      	itte	hi
 800abc2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ac54 <_strtod_l+0x59c>
 800abc6:	f04f 38ff 	movhi.w	r8, #4294967295
 800abca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800abce:	2300      	movs	r3, #0
 800abd0:	9304      	str	r3, [sp, #16]
 800abd2:	e07b      	b.n	800accc <_strtod_l+0x614>
 800abd4:	07ea      	lsls	r2, r5, #31
 800abd6:	d505      	bpl.n	800abe4 <_strtod_l+0x52c>
 800abd8:	9b04      	ldr	r3, [sp, #16]
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f7f5 fd0b 	bl	80005f8 <__aeabi_dmul>
 800abe2:	2301      	movs	r3, #1
 800abe4:	9a04      	ldr	r2, [sp, #16]
 800abe6:	3208      	adds	r2, #8
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	106d      	asrs	r5, r5, #1
 800abee:	9204      	str	r2, [sp, #16]
 800abf0:	e7cc      	b.n	800ab8c <_strtod_l+0x4d4>
 800abf2:	d0ec      	beq.n	800abce <_strtod_l+0x516>
 800abf4:	426d      	negs	r5, r5
 800abf6:	f015 020f 	ands.w	r2, r5, #15
 800abfa:	d00a      	beq.n	800ac12 <_strtod_l+0x55a>
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <_strtod_l+0x58c>)
 800abfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac02:	4640      	mov	r0, r8
 800ac04:	4649      	mov	r1, r9
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f7f5 fe1f 	bl	800084c <__aeabi_ddiv>
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4689      	mov	r9, r1
 800ac12:	112d      	asrs	r5, r5, #4
 800ac14:	d0db      	beq.n	800abce <_strtod_l+0x516>
 800ac16:	2d1f      	cmp	r5, #31
 800ac18:	dd1e      	ble.n	800ac58 <_strtod_l+0x5a0>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	46ab      	mov	fp, r5
 800ac1e:	9509      	str	r5, [sp, #36]	; 0x24
 800ac20:	9505      	str	r5, [sp, #20]
 800ac22:	2322      	movs	r3, #34	; 0x22
 800ac24:	f04f 0800 	mov.w	r8, #0
 800ac28:	f04f 0900 	mov.w	r9, #0
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	e78d      	b.n	800ab4c <_strtod_l+0x494>
 800ac30:	0800d55d 	.word	0x0800d55d
 800ac34:	0800d784 	.word	0x0800d784
 800ac38:	0800d555 	.word	0x0800d555
 800ac3c:	0800d58a 	.word	0x0800d58a
 800ac40:	0800d930 	.word	0x0800d930
 800ac44:	0800d698 	.word	0x0800d698
 800ac48:	0800d670 	.word	0x0800d670
 800ac4c:	7ff00000 	.word	0x7ff00000
 800ac50:	7ca00000 	.word	0x7ca00000
 800ac54:	7fefffff 	.word	0x7fefffff
 800ac58:	f015 0310 	ands.w	r3, r5, #16
 800ac5c:	bf18      	it	ne
 800ac5e:	236a      	movne	r3, #106	; 0x6a
 800ac60:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b004 <_strtod_l+0x94c>
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	07ea      	lsls	r2, r5, #31
 800ac6e:	d504      	bpl.n	800ac7a <_strtod_l+0x5c2>
 800ac70:	e9da 2300 	ldrd	r2, r3, [sl]
 800ac74:	f7f5 fcc0 	bl	80005f8 <__aeabi_dmul>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	106d      	asrs	r5, r5, #1
 800ac7c:	f10a 0a08 	add.w	sl, sl, #8
 800ac80:	d1f4      	bne.n	800ac6c <_strtod_l+0x5b4>
 800ac82:	b10b      	cbz	r3, 800ac88 <_strtod_l+0x5d0>
 800ac84:	4680      	mov	r8, r0
 800ac86:	4689      	mov	r9, r1
 800ac88:	9b04      	ldr	r3, [sp, #16]
 800ac8a:	b1bb      	cbz	r3, 800acbc <_strtod_l+0x604>
 800ac8c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ac90:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	4649      	mov	r1, r9
 800ac98:	dd10      	ble.n	800acbc <_strtod_l+0x604>
 800ac9a:	2b1f      	cmp	r3, #31
 800ac9c:	f340 811e 	ble.w	800aedc <_strtod_l+0x824>
 800aca0:	2b34      	cmp	r3, #52	; 0x34
 800aca2:	bfde      	ittt	le
 800aca4:	f04f 33ff 	movle.w	r3, #4294967295
 800aca8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800acac:	4093      	lslle	r3, r2
 800acae:	f04f 0800 	mov.w	r8, #0
 800acb2:	bfcc      	ite	gt
 800acb4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800acb8:	ea03 0901 	andle.w	r9, r3, r1
 800acbc:	2200      	movs	r2, #0
 800acbe:	2300      	movs	r3, #0
 800acc0:	4640      	mov	r0, r8
 800acc2:	4649      	mov	r1, r9
 800acc4:	f7f5 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1a6      	bne.n	800ac1a <_strtod_l+0x562>
 800accc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acd2:	4633      	mov	r3, r6
 800acd4:	465a      	mov	r2, fp
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7ff f8cc 	bl	8009e74 <__s2b>
 800acdc:	9009      	str	r0, [sp, #36]	; 0x24
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f af2a 	beq.w	800ab38 <_strtod_l+0x480>
 800ace4:	9a08      	ldr	r2, [sp, #32]
 800ace6:	9b05      	ldr	r3, [sp, #20]
 800ace8:	2a00      	cmp	r2, #0
 800acea:	eba3 0307 	sub.w	r3, r3, r7
 800acee:	bfa8      	it	ge
 800acf0:	2300      	movge	r3, #0
 800acf2:	930c      	str	r3, [sp, #48]	; 0x30
 800acf4:	2500      	movs	r5, #0
 800acf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800acfa:	9312      	str	r3, [sp, #72]	; 0x48
 800acfc:	46ab      	mov	fp, r5
 800acfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad00:	4620      	mov	r0, r4
 800ad02:	6859      	ldr	r1, [r3, #4]
 800ad04:	f7ff f80e 	bl	8009d24 <_Balloc>
 800ad08:	9005      	str	r0, [sp, #20]
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f43f af18 	beq.w	800ab40 <_strtod_l+0x488>
 800ad10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad12:	691a      	ldr	r2, [r3, #16]
 800ad14:	3202      	adds	r2, #2
 800ad16:	f103 010c 	add.w	r1, r3, #12
 800ad1a:	0092      	lsls	r2, r2, #2
 800ad1c:	300c      	adds	r0, #12
 800ad1e:	f001 fad1 	bl	800c2c4 <memcpy>
 800ad22:	ec49 8b10 	vmov	d0, r8, r9
 800ad26:	aa18      	add	r2, sp, #96	; 0x60
 800ad28:	a917      	add	r1, sp, #92	; 0x5c
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7ff fbd6 	bl	800a4dc <__d2b>
 800ad30:	ec49 8b18 	vmov	d8, r8, r9
 800ad34:	9016      	str	r0, [sp, #88]	; 0x58
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f43f af02 	beq.w	800ab40 <_strtod_l+0x488>
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f7ff f930 	bl	8009fa4 <__i2b>
 800ad44:	4683      	mov	fp, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f43f aefa 	beq.w	800ab40 <_strtod_l+0x488>
 800ad4c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	bfab      	itete	ge
 800ad54:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ad56:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ad58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ad5a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ad5e:	bfac      	ite	ge
 800ad60:	eb06 0a03 	addge.w	sl, r6, r3
 800ad64:	1b9f      	sublt	r7, r3, r6
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	1af6      	subs	r6, r6, r3
 800ad6a:	4416      	add	r6, r2
 800ad6c:	4ba0      	ldr	r3, [pc, #640]	; (800aff0 <_strtod_l+0x938>)
 800ad6e:	3e01      	subs	r6, #1
 800ad70:	429e      	cmp	r6, r3
 800ad72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad76:	f280 80c4 	bge.w	800af02 <_strtod_l+0x84a>
 800ad7a:	1b9b      	subs	r3, r3, r6
 800ad7c:	2b1f      	cmp	r3, #31
 800ad7e:	eba2 0203 	sub.w	r2, r2, r3
 800ad82:	f04f 0101 	mov.w	r1, #1
 800ad86:	f300 80b0 	bgt.w	800aeea <_strtod_l+0x832>
 800ad8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8e:	930e      	str	r3, [sp, #56]	; 0x38
 800ad90:	2300      	movs	r3, #0
 800ad92:	930d      	str	r3, [sp, #52]	; 0x34
 800ad94:	eb0a 0602 	add.w	r6, sl, r2
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	45b2      	cmp	sl, r6
 800ad9c:	4417      	add	r7, r2
 800ad9e:	441f      	add	r7, r3
 800ada0:	4653      	mov	r3, sl
 800ada2:	bfa8      	it	ge
 800ada4:	4633      	movge	r3, r6
 800ada6:	42bb      	cmp	r3, r7
 800ada8:	bfa8      	it	ge
 800adaa:	463b      	movge	r3, r7
 800adac:	2b00      	cmp	r3, #0
 800adae:	bfc2      	ittt	gt
 800adb0:	1af6      	subgt	r6, r6, r3
 800adb2:	1aff      	subgt	r7, r7, r3
 800adb4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800adb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adba:	2b00      	cmp	r3, #0
 800adbc:	dd17      	ble.n	800adee <_strtod_l+0x736>
 800adbe:	4659      	mov	r1, fp
 800adc0:	461a      	mov	r2, r3
 800adc2:	4620      	mov	r0, r4
 800adc4:	f7ff f9ae 	bl	800a124 <__pow5mult>
 800adc8:	4683      	mov	fp, r0
 800adca:	2800      	cmp	r0, #0
 800adcc:	f43f aeb8 	beq.w	800ab40 <_strtod_l+0x488>
 800add0:	4601      	mov	r1, r0
 800add2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800add4:	4620      	mov	r0, r4
 800add6:	f7ff f8fb 	bl	8009fd0 <__multiply>
 800adda:	900b      	str	r0, [sp, #44]	; 0x2c
 800addc:	2800      	cmp	r0, #0
 800adde:	f43f aeaf 	beq.w	800ab40 <_strtod_l+0x488>
 800ade2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ade4:	4620      	mov	r0, r4
 800ade6:	f7fe ffdd 	bl	8009da4 <_Bfree>
 800adea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adec:	9316      	str	r3, [sp, #88]	; 0x58
 800adee:	2e00      	cmp	r6, #0
 800adf0:	f300 808c 	bgt.w	800af0c <_strtod_l+0x854>
 800adf4:	9b08      	ldr	r3, [sp, #32]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dd08      	ble.n	800ae0c <_strtod_l+0x754>
 800adfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adfc:	9905      	ldr	r1, [sp, #20]
 800adfe:	4620      	mov	r0, r4
 800ae00:	f7ff f990 	bl	800a124 <__pow5mult>
 800ae04:	9005      	str	r0, [sp, #20]
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f43f ae9a 	beq.w	800ab40 <_strtod_l+0x488>
 800ae0c:	2f00      	cmp	r7, #0
 800ae0e:	dd08      	ble.n	800ae22 <_strtod_l+0x76a>
 800ae10:	9905      	ldr	r1, [sp, #20]
 800ae12:	463a      	mov	r2, r7
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7ff f9df 	bl	800a1d8 <__lshift>
 800ae1a:	9005      	str	r0, [sp, #20]
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f43f ae8f 	beq.w	800ab40 <_strtod_l+0x488>
 800ae22:	f1ba 0f00 	cmp.w	sl, #0
 800ae26:	dd08      	ble.n	800ae3a <_strtod_l+0x782>
 800ae28:	4659      	mov	r1, fp
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f7ff f9d3 	bl	800a1d8 <__lshift>
 800ae32:	4683      	mov	fp, r0
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f43f ae83 	beq.w	800ab40 <_strtod_l+0x488>
 800ae3a:	9a05      	ldr	r2, [sp, #20]
 800ae3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7ff fa52 	bl	800a2e8 <__mdiff>
 800ae44:	4605      	mov	r5, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f43f ae7a 	beq.w	800ab40 <_strtod_l+0x488>
 800ae4c:	68c3      	ldr	r3, [r0, #12]
 800ae4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae50:	2300      	movs	r3, #0
 800ae52:	60c3      	str	r3, [r0, #12]
 800ae54:	4659      	mov	r1, fp
 800ae56:	f7ff fa2b 	bl	800a2b0 <__mcmp>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	da60      	bge.n	800af20 <_strtod_l+0x868>
 800ae5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae60:	ea53 0308 	orrs.w	r3, r3, r8
 800ae64:	f040 8084 	bne.w	800af70 <_strtod_l+0x8b8>
 800ae68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d17f      	bne.n	800af70 <_strtod_l+0x8b8>
 800ae70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae74:	0d1b      	lsrs	r3, r3, #20
 800ae76:	051b      	lsls	r3, r3, #20
 800ae78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae7c:	d978      	bls.n	800af70 <_strtod_l+0x8b8>
 800ae7e:	696b      	ldr	r3, [r5, #20]
 800ae80:	b913      	cbnz	r3, 800ae88 <_strtod_l+0x7d0>
 800ae82:	692b      	ldr	r3, [r5, #16]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	dd73      	ble.n	800af70 <_strtod_l+0x8b8>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f7ff f9a3 	bl	800a1d8 <__lshift>
 800ae92:	4659      	mov	r1, fp
 800ae94:	4605      	mov	r5, r0
 800ae96:	f7ff fa0b 	bl	800a2b0 <__mcmp>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	dd68      	ble.n	800af70 <_strtod_l+0x8b8>
 800ae9e:	9904      	ldr	r1, [sp, #16]
 800aea0:	4a54      	ldr	r2, [pc, #336]	; (800aff4 <_strtod_l+0x93c>)
 800aea2:	464b      	mov	r3, r9
 800aea4:	2900      	cmp	r1, #0
 800aea6:	f000 8084 	beq.w	800afb2 <_strtod_l+0x8fa>
 800aeaa:	ea02 0109 	and.w	r1, r2, r9
 800aeae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aeb2:	dc7e      	bgt.n	800afb2 <_strtod_l+0x8fa>
 800aeb4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aeb8:	f77f aeb3 	ble.w	800ac22 <_strtod_l+0x56a>
 800aebc:	4b4e      	ldr	r3, [pc, #312]	; (800aff8 <_strtod_l+0x940>)
 800aebe:	4640      	mov	r0, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	2200      	movs	r2, #0
 800aec4:	f7f5 fb98 	bl	80005f8 <__aeabi_dmul>
 800aec8:	4b4a      	ldr	r3, [pc, #296]	; (800aff4 <_strtod_l+0x93c>)
 800aeca:	400b      	ands	r3, r1
 800aecc:	4680      	mov	r8, r0
 800aece:	4689      	mov	r9, r1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f47f ae3f 	bne.w	800ab54 <_strtod_l+0x49c>
 800aed6:	2322      	movs	r3, #34	; 0x22
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	e63b      	b.n	800ab54 <_strtod_l+0x49c>
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295
 800aee0:	fa02 f303 	lsl.w	r3, r2, r3
 800aee4:	ea03 0808 	and.w	r8, r3, r8
 800aee8:	e6e8      	b.n	800acbc <_strtod_l+0x604>
 800aeea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aeee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aef2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aef6:	36e2      	adds	r6, #226	; 0xe2
 800aef8:	fa01 f306 	lsl.w	r3, r1, r6
 800aefc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800af00:	e748      	b.n	800ad94 <_strtod_l+0x6dc>
 800af02:	2100      	movs	r1, #0
 800af04:	2301      	movs	r3, #1
 800af06:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800af0a:	e743      	b.n	800ad94 <_strtod_l+0x6dc>
 800af0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af0e:	4632      	mov	r2, r6
 800af10:	4620      	mov	r0, r4
 800af12:	f7ff f961 	bl	800a1d8 <__lshift>
 800af16:	9016      	str	r0, [sp, #88]	; 0x58
 800af18:	2800      	cmp	r0, #0
 800af1a:	f47f af6b 	bne.w	800adf4 <_strtod_l+0x73c>
 800af1e:	e60f      	b.n	800ab40 <_strtod_l+0x488>
 800af20:	46ca      	mov	sl, r9
 800af22:	d171      	bne.n	800b008 <_strtod_l+0x950>
 800af24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af2a:	b352      	cbz	r2, 800af82 <_strtod_l+0x8ca>
 800af2c:	4a33      	ldr	r2, [pc, #204]	; (800affc <_strtod_l+0x944>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d12a      	bne.n	800af88 <_strtod_l+0x8d0>
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	4641      	mov	r1, r8
 800af36:	b1fb      	cbz	r3, 800af78 <_strtod_l+0x8c0>
 800af38:	4b2e      	ldr	r3, [pc, #184]	; (800aff4 <_strtod_l+0x93c>)
 800af3a:	ea09 0303 	and.w	r3, r9, r3
 800af3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af42:	f04f 32ff 	mov.w	r2, #4294967295
 800af46:	d81a      	bhi.n	800af7e <_strtod_l+0x8c6>
 800af48:	0d1b      	lsrs	r3, r3, #20
 800af4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af4e:	fa02 f303 	lsl.w	r3, r2, r3
 800af52:	4299      	cmp	r1, r3
 800af54:	d118      	bne.n	800af88 <_strtod_l+0x8d0>
 800af56:	4b2a      	ldr	r3, [pc, #168]	; (800b000 <_strtod_l+0x948>)
 800af58:	459a      	cmp	sl, r3
 800af5a:	d102      	bne.n	800af62 <_strtod_l+0x8aa>
 800af5c:	3101      	adds	r1, #1
 800af5e:	f43f adef 	beq.w	800ab40 <_strtod_l+0x488>
 800af62:	4b24      	ldr	r3, [pc, #144]	; (800aff4 <_strtod_l+0x93c>)
 800af64:	ea0a 0303 	and.w	r3, sl, r3
 800af68:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af6c:	f04f 0800 	mov.w	r8, #0
 800af70:	9b04      	ldr	r3, [sp, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1a2      	bne.n	800aebc <_strtod_l+0x804>
 800af76:	e5ed      	b.n	800ab54 <_strtod_l+0x49c>
 800af78:	f04f 33ff 	mov.w	r3, #4294967295
 800af7c:	e7e9      	b.n	800af52 <_strtod_l+0x89a>
 800af7e:	4613      	mov	r3, r2
 800af80:	e7e7      	b.n	800af52 <_strtod_l+0x89a>
 800af82:	ea53 0308 	orrs.w	r3, r3, r8
 800af86:	d08a      	beq.n	800ae9e <_strtod_l+0x7e6>
 800af88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af8a:	b1e3      	cbz	r3, 800afc6 <_strtod_l+0x90e>
 800af8c:	ea13 0f0a 	tst.w	r3, sl
 800af90:	d0ee      	beq.n	800af70 <_strtod_l+0x8b8>
 800af92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af94:	9a04      	ldr	r2, [sp, #16]
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	b1c3      	cbz	r3, 800afce <_strtod_l+0x916>
 800af9c:	f7ff fb6f 	bl	800a67e <sulp>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	ec51 0b18 	vmov	r0, r1, d8
 800afa8:	f7f5 f970 	bl	800028c <__adddf3>
 800afac:	4680      	mov	r8, r0
 800afae:	4689      	mov	r9, r1
 800afb0:	e7de      	b.n	800af70 <_strtod_l+0x8b8>
 800afb2:	4013      	ands	r3, r2
 800afb4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800afb8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800afbc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800afc0:	f04f 38ff 	mov.w	r8, #4294967295
 800afc4:	e7d4      	b.n	800af70 <_strtod_l+0x8b8>
 800afc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afc8:	ea13 0f08 	tst.w	r3, r8
 800afcc:	e7e0      	b.n	800af90 <_strtod_l+0x8d8>
 800afce:	f7ff fb56 	bl	800a67e <sulp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	ec51 0b18 	vmov	r0, r1, d8
 800afda:	f7f5 f955 	bl	8000288 <__aeabi_dsub>
 800afde:	2200      	movs	r2, #0
 800afe0:	2300      	movs	r3, #0
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	f7f5 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800afea:	2800      	cmp	r0, #0
 800afec:	d0c0      	beq.n	800af70 <_strtod_l+0x8b8>
 800afee:	e618      	b.n	800ac22 <_strtod_l+0x56a>
 800aff0:	fffffc02 	.word	0xfffffc02
 800aff4:	7ff00000 	.word	0x7ff00000
 800aff8:	39500000 	.word	0x39500000
 800affc:	000fffff 	.word	0x000fffff
 800b000:	7fefffff 	.word	0x7fefffff
 800b004:	0800d798 	.word	0x0800d798
 800b008:	4659      	mov	r1, fp
 800b00a:	4628      	mov	r0, r5
 800b00c:	f7ff fac0 	bl	800a590 <__ratio>
 800b010:	ec57 6b10 	vmov	r6, r7, d0
 800b014:	ee10 0a10 	vmov	r0, s0
 800b018:	2200      	movs	r2, #0
 800b01a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fd66 	bl	8000af0 <__aeabi_dcmple>
 800b024:	2800      	cmp	r0, #0
 800b026:	d071      	beq.n	800b10c <_strtod_l+0xa54>
 800b028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d17c      	bne.n	800b128 <_strtod_l+0xa70>
 800b02e:	f1b8 0f00 	cmp.w	r8, #0
 800b032:	d15a      	bne.n	800b0ea <_strtod_l+0xa32>
 800b034:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d15d      	bne.n	800b0f8 <_strtod_l+0xa40>
 800b03c:	4b90      	ldr	r3, [pc, #576]	; (800b280 <_strtod_l+0xbc8>)
 800b03e:	2200      	movs	r2, #0
 800b040:	4630      	mov	r0, r6
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 fd4a 	bl	8000adc <__aeabi_dcmplt>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d15c      	bne.n	800b106 <_strtod_l+0xa4e>
 800b04c:	4630      	mov	r0, r6
 800b04e:	4639      	mov	r1, r7
 800b050:	4b8c      	ldr	r3, [pc, #560]	; (800b284 <_strtod_l+0xbcc>)
 800b052:	2200      	movs	r2, #0
 800b054:	f7f5 fad0 	bl	80005f8 <__aeabi_dmul>
 800b058:	4606      	mov	r6, r0
 800b05a:	460f      	mov	r7, r1
 800b05c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b060:	9606      	str	r6, [sp, #24]
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b068:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b06c:	4b86      	ldr	r3, [pc, #536]	; (800b288 <_strtod_l+0xbd0>)
 800b06e:	ea0a 0303 	and.w	r3, sl, r3
 800b072:	930d      	str	r3, [sp, #52]	; 0x34
 800b074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b076:	4b85      	ldr	r3, [pc, #532]	; (800b28c <_strtod_l+0xbd4>)
 800b078:	429a      	cmp	r2, r3
 800b07a:	f040 8090 	bne.w	800b19e <_strtod_l+0xae6>
 800b07e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b082:	ec49 8b10 	vmov	d0, r8, r9
 800b086:	f7ff f9b9 	bl	800a3fc <__ulp>
 800b08a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b08e:	ec51 0b10 	vmov	r0, r1, d0
 800b092:	f7f5 fab1 	bl	80005f8 <__aeabi_dmul>
 800b096:	4642      	mov	r2, r8
 800b098:	464b      	mov	r3, r9
 800b09a:	f7f5 f8f7 	bl	800028c <__adddf3>
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4979      	ldr	r1, [pc, #484]	; (800b288 <_strtod_l+0xbd0>)
 800b0a2:	4a7b      	ldr	r2, [pc, #492]	; (800b290 <_strtod_l+0xbd8>)
 800b0a4:	4019      	ands	r1, r3
 800b0a6:	4291      	cmp	r1, r2
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	d944      	bls.n	800b136 <_strtod_l+0xa7e>
 800b0ac:	ee18 2a90 	vmov	r2, s17
 800b0b0:	4b78      	ldr	r3, [pc, #480]	; (800b294 <_strtod_l+0xbdc>)
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d104      	bne.n	800b0c0 <_strtod_l+0xa08>
 800b0b6:	ee18 3a10 	vmov	r3, s16
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	f43f ad40 	beq.w	800ab40 <_strtod_l+0x488>
 800b0c0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b294 <_strtod_l+0xbdc>
 800b0c4:	f04f 38ff 	mov.w	r8, #4294967295
 800b0c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fe fe6a 	bl	8009da4 <_Bfree>
 800b0d0:	9905      	ldr	r1, [sp, #20]
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7fe fe66 	bl	8009da4 <_Bfree>
 800b0d8:	4659      	mov	r1, fp
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7fe fe62 	bl	8009da4 <_Bfree>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f7fe fe5e 	bl	8009da4 <_Bfree>
 800b0e8:	e609      	b.n	800acfe <_strtod_l+0x646>
 800b0ea:	f1b8 0f01 	cmp.w	r8, #1
 800b0ee:	d103      	bne.n	800b0f8 <_strtod_l+0xa40>
 800b0f0:	f1b9 0f00 	cmp.w	r9, #0
 800b0f4:	f43f ad95 	beq.w	800ac22 <_strtod_l+0x56a>
 800b0f8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b250 <_strtod_l+0xb98>
 800b0fc:	4f60      	ldr	r7, [pc, #384]	; (800b280 <_strtod_l+0xbc8>)
 800b0fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b102:	2600      	movs	r6, #0
 800b104:	e7ae      	b.n	800b064 <_strtod_l+0x9ac>
 800b106:	4f5f      	ldr	r7, [pc, #380]	; (800b284 <_strtod_l+0xbcc>)
 800b108:	2600      	movs	r6, #0
 800b10a:	e7a7      	b.n	800b05c <_strtod_l+0x9a4>
 800b10c:	4b5d      	ldr	r3, [pc, #372]	; (800b284 <_strtod_l+0xbcc>)
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	2200      	movs	r2, #0
 800b114:	f7f5 fa70 	bl	80005f8 <__aeabi_dmul>
 800b118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d09c      	beq.n	800b05c <_strtod_l+0x9a4>
 800b122:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b126:	e79d      	b.n	800b064 <_strtod_l+0x9ac>
 800b128:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b258 <_strtod_l+0xba0>
 800b12c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b130:	ec57 6b17 	vmov	r6, r7, d7
 800b134:	e796      	b.n	800b064 <_strtod_l+0x9ac>
 800b136:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	46ca      	mov	sl, r9
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1c2      	bne.n	800b0c8 <_strtod_l+0xa10>
 800b142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b148:	0d1b      	lsrs	r3, r3, #20
 800b14a:	051b      	lsls	r3, r3, #20
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d1bb      	bne.n	800b0c8 <_strtod_l+0xa10>
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 fdb0 	bl	8000cb8 <__aeabi_d2lz>
 800b158:	f7f5 fa20 	bl	800059c <__aeabi_l2d>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 f890 	bl	8000288 <__aeabi_dsub>
 800b168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b16a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b16e:	ea43 0308 	orr.w	r3, r3, r8
 800b172:	4313      	orrs	r3, r2
 800b174:	4606      	mov	r6, r0
 800b176:	460f      	mov	r7, r1
 800b178:	d054      	beq.n	800b224 <_strtod_l+0xb6c>
 800b17a:	a339      	add	r3, pc, #228	; (adr r3, 800b260 <_strtod_l+0xba8>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7f5 fcac 	bl	8000adc <__aeabi_dcmplt>
 800b184:	2800      	cmp	r0, #0
 800b186:	f47f ace5 	bne.w	800ab54 <_strtod_l+0x49c>
 800b18a:	a337      	add	r3, pc, #220	; (adr r3, 800b268 <_strtod_l+0xbb0>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fcc0 	bl	8000b18 <__aeabi_dcmpgt>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d095      	beq.n	800b0c8 <_strtod_l+0xa10>
 800b19c:	e4da      	b.n	800ab54 <_strtod_l+0x49c>
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	b333      	cbz	r3, 800b1f0 <_strtod_l+0xb38>
 800b1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1a8:	d822      	bhi.n	800b1f0 <_strtod_l+0xb38>
 800b1aa:	a331      	add	r3, pc, #196	; (adr r3, 800b270 <_strtod_l+0xbb8>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	4639      	mov	r1, r7
 800b1b4:	f7f5 fc9c 	bl	8000af0 <__aeabi_dcmple>
 800b1b8:	b1a0      	cbz	r0, 800b1e4 <_strtod_l+0xb2c>
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7f5 fcf3 	bl	8000ba8 <__aeabi_d2uiz>
 800b1c2:	2801      	cmp	r0, #1
 800b1c4:	bf38      	it	cc
 800b1c6:	2001      	movcc	r0, #1
 800b1c8:	f7f5 f99c 	bl	8000504 <__aeabi_ui2d>
 800b1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	bb23      	cbnz	r3, 800b21e <_strtod_l+0xb66>
 800b1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1d8:	9010      	str	r0, [sp, #64]	; 0x40
 800b1da:	9311      	str	r3, [sp, #68]	; 0x44
 800b1dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b1f8:	eef0 0a68 	vmov.f32	s1, s17
 800b1fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b200:	f7ff f8fc 	bl	800a3fc <__ulp>
 800b204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b208:	ec53 2b10 	vmov	r2, r3, d0
 800b20c:	f7f5 f9f4 	bl	80005f8 <__aeabi_dmul>
 800b210:	ec53 2b18 	vmov	r2, r3, d8
 800b214:	f7f5 f83a 	bl	800028c <__adddf3>
 800b218:	4680      	mov	r8, r0
 800b21a:	4689      	mov	r9, r1
 800b21c:	e78d      	b.n	800b13a <_strtod_l+0xa82>
 800b21e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b222:	e7db      	b.n	800b1dc <_strtod_l+0xb24>
 800b224:	a314      	add	r3, pc, #80	; (adr r3, 800b278 <_strtod_l+0xbc0>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f5 fc57 	bl	8000adc <__aeabi_dcmplt>
 800b22e:	e7b3      	b.n	800b198 <_strtod_l+0xae0>
 800b230:	2300      	movs	r3, #0
 800b232:	930a      	str	r3, [sp, #40]	; 0x28
 800b234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	f7ff ba7c 	b.w	800a736 <_strtod_l+0x7e>
 800b23e:	2a65      	cmp	r2, #101	; 0x65
 800b240:	f43f ab75 	beq.w	800a92e <_strtod_l+0x276>
 800b244:	2a45      	cmp	r2, #69	; 0x45
 800b246:	f43f ab72 	beq.w	800a92e <_strtod_l+0x276>
 800b24a:	2301      	movs	r3, #1
 800b24c:	f7ff bbaa 	b.w	800a9a4 <_strtod_l+0x2ec>
 800b250:	00000000 	.word	0x00000000
 800b254:	bff00000 	.word	0xbff00000
 800b258:	00000000 	.word	0x00000000
 800b25c:	3ff00000 	.word	0x3ff00000
 800b260:	94a03595 	.word	0x94a03595
 800b264:	3fdfffff 	.word	0x3fdfffff
 800b268:	35afe535 	.word	0x35afe535
 800b26c:	3fe00000 	.word	0x3fe00000
 800b270:	ffc00000 	.word	0xffc00000
 800b274:	41dfffff 	.word	0x41dfffff
 800b278:	94a03595 	.word	0x94a03595
 800b27c:	3fcfffff 	.word	0x3fcfffff
 800b280:	3ff00000 	.word	0x3ff00000
 800b284:	3fe00000 	.word	0x3fe00000
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	7fe00000 	.word	0x7fe00000
 800b290:	7c9fffff 	.word	0x7c9fffff
 800b294:	7fefffff 	.word	0x7fefffff

0800b298 <_strtod_r>:
 800b298:	4b01      	ldr	r3, [pc, #4]	; (800b2a0 <_strtod_r+0x8>)
 800b29a:	f7ff ba0d 	b.w	800a6b8 <_strtod_l>
 800b29e:	bf00      	nop
 800b2a0:	2000007c 	.word	0x2000007c

0800b2a4 <_strtol_l.constprop.0>:
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2aa:	d001      	beq.n	800b2b0 <_strtol_l.constprop.0+0xc>
 800b2ac:	2b24      	cmp	r3, #36	; 0x24
 800b2ae:	d906      	bls.n	800b2be <_strtol_l.constprop.0+0x1a>
 800b2b0:	f7fd fd88 	bl	8008dc4 <__errno>
 800b2b4:	2316      	movs	r3, #22
 800b2b6:	6003      	str	r3, [r0, #0]
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b3a4 <_strtol_l.constprop.0+0x100>
 800b2c2:	460d      	mov	r5, r1
 800b2c4:	462e      	mov	r6, r5
 800b2c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b2ce:	f017 0708 	ands.w	r7, r7, #8
 800b2d2:	d1f7      	bne.n	800b2c4 <_strtol_l.constprop.0+0x20>
 800b2d4:	2c2d      	cmp	r4, #45	; 0x2d
 800b2d6:	d132      	bne.n	800b33e <_strtol_l.constprop.0+0x9a>
 800b2d8:	782c      	ldrb	r4, [r5, #0]
 800b2da:	2701      	movs	r7, #1
 800b2dc:	1cb5      	adds	r5, r6, #2
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d05b      	beq.n	800b39a <_strtol_l.constprop.0+0xf6>
 800b2e2:	2b10      	cmp	r3, #16
 800b2e4:	d109      	bne.n	800b2fa <_strtol_l.constprop.0+0x56>
 800b2e6:	2c30      	cmp	r4, #48	; 0x30
 800b2e8:	d107      	bne.n	800b2fa <_strtol_l.constprop.0+0x56>
 800b2ea:	782c      	ldrb	r4, [r5, #0]
 800b2ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2f0:	2c58      	cmp	r4, #88	; 0x58
 800b2f2:	d14d      	bne.n	800b390 <_strtol_l.constprop.0+0xec>
 800b2f4:	786c      	ldrb	r4, [r5, #1]
 800b2f6:	2310      	movs	r3, #16
 800b2f8:	3502      	adds	r5, #2
 800b2fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800b302:	f04f 0e00 	mov.w	lr, #0
 800b306:	fbb8 f9f3 	udiv	r9, r8, r3
 800b30a:	4676      	mov	r6, lr
 800b30c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b310:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b314:	f1bc 0f09 	cmp.w	ip, #9
 800b318:	d816      	bhi.n	800b348 <_strtol_l.constprop.0+0xa4>
 800b31a:	4664      	mov	r4, ip
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	dd24      	ble.n	800b36a <_strtol_l.constprop.0+0xc6>
 800b320:	f1be 3fff 	cmp.w	lr, #4294967295
 800b324:	d008      	beq.n	800b338 <_strtol_l.constprop.0+0x94>
 800b326:	45b1      	cmp	r9, r6
 800b328:	d31c      	bcc.n	800b364 <_strtol_l.constprop.0+0xc0>
 800b32a:	d101      	bne.n	800b330 <_strtol_l.constprop.0+0x8c>
 800b32c:	45a2      	cmp	sl, r4
 800b32e:	db19      	blt.n	800b364 <_strtol_l.constprop.0+0xc0>
 800b330:	fb06 4603 	mla	r6, r6, r3, r4
 800b334:	f04f 0e01 	mov.w	lr, #1
 800b338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b33c:	e7e8      	b.n	800b310 <_strtol_l.constprop.0+0x6c>
 800b33e:	2c2b      	cmp	r4, #43	; 0x2b
 800b340:	bf04      	itt	eq
 800b342:	782c      	ldrbeq	r4, [r5, #0]
 800b344:	1cb5      	addeq	r5, r6, #2
 800b346:	e7ca      	b.n	800b2de <_strtol_l.constprop.0+0x3a>
 800b348:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b34c:	f1bc 0f19 	cmp.w	ip, #25
 800b350:	d801      	bhi.n	800b356 <_strtol_l.constprop.0+0xb2>
 800b352:	3c37      	subs	r4, #55	; 0x37
 800b354:	e7e2      	b.n	800b31c <_strtol_l.constprop.0+0x78>
 800b356:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b35a:	f1bc 0f19 	cmp.w	ip, #25
 800b35e:	d804      	bhi.n	800b36a <_strtol_l.constprop.0+0xc6>
 800b360:	3c57      	subs	r4, #87	; 0x57
 800b362:	e7db      	b.n	800b31c <_strtol_l.constprop.0+0x78>
 800b364:	f04f 3eff 	mov.w	lr, #4294967295
 800b368:	e7e6      	b.n	800b338 <_strtol_l.constprop.0+0x94>
 800b36a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b36e:	d105      	bne.n	800b37c <_strtol_l.constprop.0+0xd8>
 800b370:	2322      	movs	r3, #34	; 0x22
 800b372:	6003      	str	r3, [r0, #0]
 800b374:	4646      	mov	r6, r8
 800b376:	b942      	cbnz	r2, 800b38a <_strtol_l.constprop.0+0xe6>
 800b378:	4630      	mov	r0, r6
 800b37a:	e79e      	b.n	800b2ba <_strtol_l.constprop.0+0x16>
 800b37c:	b107      	cbz	r7, 800b380 <_strtol_l.constprop.0+0xdc>
 800b37e:	4276      	negs	r6, r6
 800b380:	2a00      	cmp	r2, #0
 800b382:	d0f9      	beq.n	800b378 <_strtol_l.constprop.0+0xd4>
 800b384:	f1be 0f00 	cmp.w	lr, #0
 800b388:	d000      	beq.n	800b38c <_strtol_l.constprop.0+0xe8>
 800b38a:	1e69      	subs	r1, r5, #1
 800b38c:	6011      	str	r1, [r2, #0]
 800b38e:	e7f3      	b.n	800b378 <_strtol_l.constprop.0+0xd4>
 800b390:	2430      	movs	r4, #48	; 0x30
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1b1      	bne.n	800b2fa <_strtol_l.constprop.0+0x56>
 800b396:	2308      	movs	r3, #8
 800b398:	e7af      	b.n	800b2fa <_strtol_l.constprop.0+0x56>
 800b39a:	2c30      	cmp	r4, #48	; 0x30
 800b39c:	d0a5      	beq.n	800b2ea <_strtol_l.constprop.0+0x46>
 800b39e:	230a      	movs	r3, #10
 800b3a0:	e7ab      	b.n	800b2fa <_strtol_l.constprop.0+0x56>
 800b3a2:	bf00      	nop
 800b3a4:	0800d7c1 	.word	0x0800d7c1

0800b3a8 <_strtol_r>:
 800b3a8:	f7ff bf7c 	b.w	800b2a4 <_strtol_l.constprop.0>

0800b3ac <__ssputs_r>:
 800b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	688e      	ldr	r6, [r1, #8]
 800b3b2:	461f      	mov	r7, r3
 800b3b4:	42be      	cmp	r6, r7
 800b3b6:	680b      	ldr	r3, [r1, #0]
 800b3b8:	4682      	mov	sl, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	4690      	mov	r8, r2
 800b3be:	d82c      	bhi.n	800b41a <__ssputs_r+0x6e>
 800b3c0:	898a      	ldrh	r2, [r1, #12]
 800b3c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3c6:	d026      	beq.n	800b416 <__ssputs_r+0x6a>
 800b3c8:	6965      	ldr	r5, [r4, #20]
 800b3ca:	6909      	ldr	r1, [r1, #16]
 800b3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3d0:	eba3 0901 	sub.w	r9, r3, r1
 800b3d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3d8:	1c7b      	adds	r3, r7, #1
 800b3da:	444b      	add	r3, r9
 800b3dc:	106d      	asrs	r5, r5, #1
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	bf38      	it	cc
 800b3e2:	461d      	movcc	r5, r3
 800b3e4:	0553      	lsls	r3, r2, #21
 800b3e6:	d527      	bpl.n	800b438 <__ssputs_r+0x8c>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7fe fc0f 	bl	8009c0c <_malloc_r>
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	b360      	cbz	r0, 800b44c <__ssputs_r+0xa0>
 800b3f2:	6921      	ldr	r1, [r4, #16]
 800b3f4:	464a      	mov	r2, r9
 800b3f6:	f000 ff65 	bl	800c2c4 <memcpy>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b404:	81a3      	strh	r3, [r4, #12]
 800b406:	6126      	str	r6, [r4, #16]
 800b408:	6165      	str	r5, [r4, #20]
 800b40a:	444e      	add	r6, r9
 800b40c:	eba5 0509 	sub.w	r5, r5, r9
 800b410:	6026      	str	r6, [r4, #0]
 800b412:	60a5      	str	r5, [r4, #8]
 800b414:	463e      	mov	r6, r7
 800b416:	42be      	cmp	r6, r7
 800b418:	d900      	bls.n	800b41c <__ssputs_r+0x70>
 800b41a:	463e      	mov	r6, r7
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	4632      	mov	r2, r6
 800b420:	4641      	mov	r1, r8
 800b422:	f000 ff02 	bl	800c22a <memmove>
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	1b9b      	subs	r3, r3, r6
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	4433      	add	r3, r6
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	2000      	movs	r0, #0
 800b434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b438:	462a      	mov	r2, r5
 800b43a:	f001 faf6 	bl	800ca2a <_realloc_r>
 800b43e:	4606      	mov	r6, r0
 800b440:	2800      	cmp	r0, #0
 800b442:	d1e0      	bne.n	800b406 <__ssputs_r+0x5a>
 800b444:	6921      	ldr	r1, [r4, #16]
 800b446:	4650      	mov	r0, sl
 800b448:	f7fe fb6c 	bl	8009b24 <_free_r>
 800b44c:	230c      	movs	r3, #12
 800b44e:	f8ca 3000 	str.w	r3, [sl]
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	e7e9      	b.n	800b434 <__ssputs_r+0x88>

0800b460 <_svfiprintf_r>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	4698      	mov	r8, r3
 800b466:	898b      	ldrh	r3, [r1, #12]
 800b468:	061b      	lsls	r3, r3, #24
 800b46a:	b09d      	sub	sp, #116	; 0x74
 800b46c:	4607      	mov	r7, r0
 800b46e:	460d      	mov	r5, r1
 800b470:	4614      	mov	r4, r2
 800b472:	d50e      	bpl.n	800b492 <_svfiprintf_r+0x32>
 800b474:	690b      	ldr	r3, [r1, #16]
 800b476:	b963      	cbnz	r3, 800b492 <_svfiprintf_r+0x32>
 800b478:	2140      	movs	r1, #64	; 0x40
 800b47a:	f7fe fbc7 	bl	8009c0c <_malloc_r>
 800b47e:	6028      	str	r0, [r5, #0]
 800b480:	6128      	str	r0, [r5, #16]
 800b482:	b920      	cbnz	r0, 800b48e <_svfiprintf_r+0x2e>
 800b484:	230c      	movs	r3, #12
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	f04f 30ff 	mov.w	r0, #4294967295
 800b48c:	e0d0      	b.n	800b630 <_svfiprintf_r+0x1d0>
 800b48e:	2340      	movs	r3, #64	; 0x40
 800b490:	616b      	str	r3, [r5, #20]
 800b492:	2300      	movs	r3, #0
 800b494:	9309      	str	r3, [sp, #36]	; 0x24
 800b496:	2320      	movs	r3, #32
 800b498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a0:	2330      	movs	r3, #48	; 0x30
 800b4a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b648 <_svfiprintf_r+0x1e8>
 800b4a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4aa:	f04f 0901 	mov.w	r9, #1
 800b4ae:	4623      	mov	r3, r4
 800b4b0:	469a      	mov	sl, r3
 800b4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b6:	b10a      	cbz	r2, 800b4bc <_svfiprintf_r+0x5c>
 800b4b8:	2a25      	cmp	r2, #37	; 0x25
 800b4ba:	d1f9      	bne.n	800b4b0 <_svfiprintf_r+0x50>
 800b4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c0:	d00b      	beq.n	800b4da <_svfiprintf_r+0x7a>
 800b4c2:	465b      	mov	r3, fp
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f7ff ff6f 	bl	800b3ac <__ssputs_r>
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f000 80a9 	beq.w	800b626 <_svfiprintf_r+0x1c6>
 800b4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d6:	445a      	add	r2, fp
 800b4d8:	9209      	str	r2, [sp, #36]	; 0x24
 800b4da:	f89a 3000 	ldrb.w	r3, [sl]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 80a1 	beq.w	800b626 <_svfiprintf_r+0x1c6>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ee:	f10a 0a01 	add.w	sl, sl, #1
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	9307      	str	r3, [sp, #28]
 800b4f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4fa:	931a      	str	r3, [sp, #104]	; 0x68
 800b4fc:	4654      	mov	r4, sl
 800b4fe:	2205      	movs	r2, #5
 800b500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b504:	4850      	ldr	r0, [pc, #320]	; (800b648 <_svfiprintf_r+0x1e8>)
 800b506:	f7f4 fe63 	bl	80001d0 <memchr>
 800b50a:	9a04      	ldr	r2, [sp, #16]
 800b50c:	b9d8      	cbnz	r0, 800b546 <_svfiprintf_r+0xe6>
 800b50e:	06d0      	lsls	r0, r2, #27
 800b510:	bf44      	itt	mi
 800b512:	2320      	movmi	r3, #32
 800b514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b518:	0711      	lsls	r1, r2, #28
 800b51a:	bf44      	itt	mi
 800b51c:	232b      	movmi	r3, #43	; 0x2b
 800b51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b522:	f89a 3000 	ldrb.w	r3, [sl]
 800b526:	2b2a      	cmp	r3, #42	; 0x2a
 800b528:	d015      	beq.n	800b556 <_svfiprintf_r+0xf6>
 800b52a:	9a07      	ldr	r2, [sp, #28]
 800b52c:	4654      	mov	r4, sl
 800b52e:	2000      	movs	r0, #0
 800b530:	f04f 0c0a 	mov.w	ip, #10
 800b534:	4621      	mov	r1, r4
 800b536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b53a:	3b30      	subs	r3, #48	; 0x30
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	d94d      	bls.n	800b5dc <_svfiprintf_r+0x17c>
 800b540:	b1b0      	cbz	r0, 800b570 <_svfiprintf_r+0x110>
 800b542:	9207      	str	r2, [sp, #28]
 800b544:	e014      	b.n	800b570 <_svfiprintf_r+0x110>
 800b546:	eba0 0308 	sub.w	r3, r0, r8
 800b54a:	fa09 f303 	lsl.w	r3, r9, r3
 800b54e:	4313      	orrs	r3, r2
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	46a2      	mov	sl, r4
 800b554:	e7d2      	b.n	800b4fc <_svfiprintf_r+0x9c>
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	1d19      	adds	r1, r3, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	9103      	str	r1, [sp, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfbb      	ittet	lt
 800b562:	425b      	neglt	r3, r3
 800b564:	f042 0202 	orrlt.w	r2, r2, #2
 800b568:	9307      	strge	r3, [sp, #28]
 800b56a:	9307      	strlt	r3, [sp, #28]
 800b56c:	bfb8      	it	lt
 800b56e:	9204      	strlt	r2, [sp, #16]
 800b570:	7823      	ldrb	r3, [r4, #0]
 800b572:	2b2e      	cmp	r3, #46	; 0x2e
 800b574:	d10c      	bne.n	800b590 <_svfiprintf_r+0x130>
 800b576:	7863      	ldrb	r3, [r4, #1]
 800b578:	2b2a      	cmp	r3, #42	; 0x2a
 800b57a:	d134      	bne.n	800b5e6 <_svfiprintf_r+0x186>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	9203      	str	r2, [sp, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	bfb8      	it	lt
 800b588:	f04f 33ff 	movlt.w	r3, #4294967295
 800b58c:	3402      	adds	r4, #2
 800b58e:	9305      	str	r3, [sp, #20]
 800b590:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b658 <_svfiprintf_r+0x1f8>
 800b594:	7821      	ldrb	r1, [r4, #0]
 800b596:	2203      	movs	r2, #3
 800b598:	4650      	mov	r0, sl
 800b59a:	f7f4 fe19 	bl	80001d0 <memchr>
 800b59e:	b138      	cbz	r0, 800b5b0 <_svfiprintf_r+0x150>
 800b5a0:	9b04      	ldr	r3, [sp, #16]
 800b5a2:	eba0 000a 	sub.w	r0, r0, sl
 800b5a6:	2240      	movs	r2, #64	; 0x40
 800b5a8:	4082      	lsls	r2, r0
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	3401      	adds	r4, #1
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b4:	4825      	ldr	r0, [pc, #148]	; (800b64c <_svfiprintf_r+0x1ec>)
 800b5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ba:	2206      	movs	r2, #6
 800b5bc:	f7f4 fe08 	bl	80001d0 <memchr>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d038      	beq.n	800b636 <_svfiprintf_r+0x1d6>
 800b5c4:	4b22      	ldr	r3, [pc, #136]	; (800b650 <_svfiprintf_r+0x1f0>)
 800b5c6:	bb1b      	cbnz	r3, 800b610 <_svfiprintf_r+0x1b0>
 800b5c8:	9b03      	ldr	r3, [sp, #12]
 800b5ca:	3307      	adds	r3, #7
 800b5cc:	f023 0307 	bic.w	r3, r3, #7
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	9303      	str	r3, [sp, #12]
 800b5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d6:	4433      	add	r3, r6
 800b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5da:	e768      	b.n	800b4ae <_svfiprintf_r+0x4e>
 800b5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	e7a6      	b.n	800b534 <_svfiprintf_r+0xd4>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	3401      	adds	r4, #1
 800b5ea:	9305      	str	r3, [sp, #20]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	f04f 0c0a 	mov.w	ip, #10
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f8:	3a30      	subs	r2, #48	; 0x30
 800b5fa:	2a09      	cmp	r2, #9
 800b5fc:	d903      	bls.n	800b606 <_svfiprintf_r+0x1a6>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0c6      	beq.n	800b590 <_svfiprintf_r+0x130>
 800b602:	9105      	str	r1, [sp, #20]
 800b604:	e7c4      	b.n	800b590 <_svfiprintf_r+0x130>
 800b606:	fb0c 2101 	mla	r1, ip, r1, r2
 800b60a:	4604      	mov	r4, r0
 800b60c:	2301      	movs	r3, #1
 800b60e:	e7f0      	b.n	800b5f2 <_svfiprintf_r+0x192>
 800b610:	ab03      	add	r3, sp, #12
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	462a      	mov	r2, r5
 800b616:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <_svfiprintf_r+0x1f4>)
 800b618:	a904      	add	r1, sp, #16
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7fc fb2c 	bl	8007c78 <_printf_float>
 800b620:	1c42      	adds	r2, r0, #1
 800b622:	4606      	mov	r6, r0
 800b624:	d1d6      	bne.n	800b5d4 <_svfiprintf_r+0x174>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	065b      	lsls	r3, r3, #25
 800b62a:	f53f af2d 	bmi.w	800b488 <_svfiprintf_r+0x28>
 800b62e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b630:	b01d      	add	sp, #116	; 0x74
 800b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b636:	ab03      	add	r3, sp, #12
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	462a      	mov	r2, r5
 800b63c:	4b05      	ldr	r3, [pc, #20]	; (800b654 <_svfiprintf_r+0x1f4>)
 800b63e:	a904      	add	r1, sp, #16
 800b640:	4638      	mov	r0, r7
 800b642:	f7fc fdbd 	bl	80081c0 <_printf_i>
 800b646:	e7eb      	b.n	800b620 <_svfiprintf_r+0x1c0>
 800b648:	0800d8c1 	.word	0x0800d8c1
 800b64c:	0800d8cb 	.word	0x0800d8cb
 800b650:	08007c79 	.word	0x08007c79
 800b654:	0800b3ad 	.word	0x0800b3ad
 800b658:	0800d8c7 	.word	0x0800d8c7

0800b65c <_sungetc_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	1c4b      	adds	r3, r1, #1
 800b660:	4614      	mov	r4, r2
 800b662:	d103      	bne.n	800b66c <_sungetc_r+0x10>
 800b664:	f04f 35ff 	mov.w	r5, #4294967295
 800b668:	4628      	mov	r0, r5
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	8993      	ldrh	r3, [r2, #12]
 800b66e:	f023 0320 	bic.w	r3, r3, #32
 800b672:	8193      	strh	r3, [r2, #12]
 800b674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b676:	6852      	ldr	r2, [r2, #4]
 800b678:	b2cd      	uxtb	r5, r1
 800b67a:	b18b      	cbz	r3, 800b6a0 <_sungetc_r+0x44>
 800b67c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b67e:	4293      	cmp	r3, r2
 800b680:	dd08      	ble.n	800b694 <_sungetc_r+0x38>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	1e5a      	subs	r2, r3, #1
 800b686:	6022      	str	r2, [r4, #0]
 800b688:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b68c:	6863      	ldr	r3, [r4, #4]
 800b68e:	3301      	adds	r3, #1
 800b690:	6063      	str	r3, [r4, #4]
 800b692:	e7e9      	b.n	800b668 <_sungetc_r+0xc>
 800b694:	4621      	mov	r1, r4
 800b696:	f000 fd8e 	bl	800c1b6 <__submore>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d0f1      	beq.n	800b682 <_sungetc_r+0x26>
 800b69e:	e7e1      	b.n	800b664 <_sungetc_r+0x8>
 800b6a0:	6921      	ldr	r1, [r4, #16]
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	b151      	cbz	r1, 800b6bc <_sungetc_r+0x60>
 800b6a6:	4299      	cmp	r1, r3
 800b6a8:	d208      	bcs.n	800b6bc <_sungetc_r+0x60>
 800b6aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b6ae:	42a9      	cmp	r1, r5
 800b6b0:	d104      	bne.n	800b6bc <_sungetc_r+0x60>
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	3201      	adds	r2, #1
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	6062      	str	r2, [r4, #4]
 800b6ba:	e7d5      	b.n	800b668 <_sungetc_r+0xc>
 800b6bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b6c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6ca:	4623      	mov	r3, r4
 800b6cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e7dc      	b.n	800b690 <_sungetc_r+0x34>

0800b6d6 <__ssrefill_r>:
 800b6d6:	b510      	push	{r4, lr}
 800b6d8:	460c      	mov	r4, r1
 800b6da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b6dc:	b169      	cbz	r1, 800b6fa <__ssrefill_r+0x24>
 800b6de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	d001      	beq.n	800b6ea <__ssrefill_r+0x14>
 800b6e6:	f7fe fa1d 	bl	8009b24 <_free_r>
 800b6ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6ec:	6063      	str	r3, [r4, #4]
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	6360      	str	r0, [r4, #52]	; 0x34
 800b6f2:	b113      	cbz	r3, 800b6fa <__ssrefill_r+0x24>
 800b6f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6f6:	6023      	str	r3, [r4, #0]
 800b6f8:	bd10      	pop	{r4, pc}
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	2300      	movs	r3, #0
 800b700:	6063      	str	r3, [r4, #4]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f043 0320 	orr.w	r3, r3, #32
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	f04f 30ff 	mov.w	r0, #4294967295
 800b70e:	e7f3      	b.n	800b6f8 <__ssrefill_r+0x22>

0800b710 <__ssvfiscanf_r>:
 800b710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b71a:	2100      	movs	r1, #0
 800b71c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b720:	49a6      	ldr	r1, [pc, #664]	; (800b9bc <__ssvfiscanf_r+0x2ac>)
 800b722:	91a0      	str	r1, [sp, #640]	; 0x280
 800b724:	f10d 0804 	add.w	r8, sp, #4
 800b728:	49a5      	ldr	r1, [pc, #660]	; (800b9c0 <__ssvfiscanf_r+0x2b0>)
 800b72a:	4fa6      	ldr	r7, [pc, #664]	; (800b9c4 <__ssvfiscanf_r+0x2b4>)
 800b72c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b9c8 <__ssvfiscanf_r+0x2b8>
 800b730:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b734:	4606      	mov	r6, r0
 800b736:	91a1      	str	r1, [sp, #644]	; 0x284
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	7813      	ldrb	r3, [r2, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 815a 	beq.w	800b9f6 <__ssvfiscanf_r+0x2e6>
 800b742:	5cf9      	ldrb	r1, [r7, r3]
 800b744:	f011 0108 	ands.w	r1, r1, #8
 800b748:	f102 0501 	add.w	r5, r2, #1
 800b74c:	d019      	beq.n	800b782 <__ssvfiscanf_r+0x72>
 800b74e:	6863      	ldr	r3, [r4, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	dd0f      	ble.n	800b774 <__ssvfiscanf_r+0x64>
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	5cba      	ldrb	r2, [r7, r2]
 800b75a:	0712      	lsls	r2, r2, #28
 800b75c:	d401      	bmi.n	800b762 <__ssvfiscanf_r+0x52>
 800b75e:	462a      	mov	r2, r5
 800b760:	e7eb      	b.n	800b73a <__ssvfiscanf_r+0x2a>
 800b762:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b764:	3201      	adds	r2, #1
 800b766:	9245      	str	r2, [sp, #276]	; 0x114
 800b768:	6862      	ldr	r2, [r4, #4]
 800b76a:	3301      	adds	r3, #1
 800b76c:	3a01      	subs	r2, #1
 800b76e:	6062      	str	r2, [r4, #4]
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	e7ec      	b.n	800b74e <__ssvfiscanf_r+0x3e>
 800b774:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b776:	4621      	mov	r1, r4
 800b778:	4630      	mov	r0, r6
 800b77a:	4798      	blx	r3
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d0e9      	beq.n	800b754 <__ssvfiscanf_r+0x44>
 800b780:	e7ed      	b.n	800b75e <__ssvfiscanf_r+0x4e>
 800b782:	2b25      	cmp	r3, #37	; 0x25
 800b784:	d012      	beq.n	800b7ac <__ssvfiscanf_r+0x9c>
 800b786:	469a      	mov	sl, r3
 800b788:	6863      	ldr	r3, [r4, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f340 8091 	ble.w	800b8b2 <__ssvfiscanf_r+0x1a2>
 800b790:	6822      	ldr	r2, [r4, #0]
 800b792:	7813      	ldrb	r3, [r2, #0]
 800b794:	4553      	cmp	r3, sl
 800b796:	f040 812e 	bne.w	800b9f6 <__ssvfiscanf_r+0x2e6>
 800b79a:	6863      	ldr	r3, [r4, #4]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	6063      	str	r3, [r4, #4]
 800b7a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b7a2:	3201      	adds	r2, #1
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	6022      	str	r2, [r4, #0]
 800b7a8:	9345      	str	r3, [sp, #276]	; 0x114
 800b7aa:	e7d8      	b.n	800b75e <__ssvfiscanf_r+0x4e>
 800b7ac:	9141      	str	r1, [sp, #260]	; 0x104
 800b7ae:	9143      	str	r1, [sp, #268]	; 0x10c
 800b7b0:	7853      	ldrb	r3, [r2, #1]
 800b7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b4:	bf02      	ittt	eq
 800b7b6:	2310      	moveq	r3, #16
 800b7b8:	1c95      	addeq	r5, r2, #2
 800b7ba:	9341      	streq	r3, [sp, #260]	; 0x104
 800b7bc:	220a      	movs	r2, #10
 800b7be:	46aa      	mov	sl, r5
 800b7c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b7c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b7c8:	2b09      	cmp	r3, #9
 800b7ca:	d91c      	bls.n	800b806 <__ssvfiscanf_r+0xf6>
 800b7cc:	487e      	ldr	r0, [pc, #504]	; (800b9c8 <__ssvfiscanf_r+0x2b8>)
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	f7f4 fcfe 	bl	80001d0 <memchr>
 800b7d4:	b138      	cbz	r0, 800b7e6 <__ssvfiscanf_r+0xd6>
 800b7d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7d8:	eba0 0009 	sub.w	r0, r0, r9
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4083      	lsls	r3, r0
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	9341      	str	r3, [sp, #260]	; 0x104
 800b7e4:	4655      	mov	r5, sl
 800b7e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7ea:	2b78      	cmp	r3, #120	; 0x78
 800b7ec:	d806      	bhi.n	800b7fc <__ssvfiscanf_r+0xec>
 800b7ee:	2b57      	cmp	r3, #87	; 0x57
 800b7f0:	d810      	bhi.n	800b814 <__ssvfiscanf_r+0x104>
 800b7f2:	2b25      	cmp	r3, #37	; 0x25
 800b7f4:	d0c7      	beq.n	800b786 <__ssvfiscanf_r+0x76>
 800b7f6:	d857      	bhi.n	800b8a8 <__ssvfiscanf_r+0x198>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d065      	beq.n	800b8c8 <__ssvfiscanf_r+0x1b8>
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800b800:	230a      	movs	r3, #10
 800b802:	9342      	str	r3, [sp, #264]	; 0x108
 800b804:	e076      	b.n	800b8f4 <__ssvfiscanf_r+0x1e4>
 800b806:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b808:	fb02 1103 	mla	r1, r2, r3, r1
 800b80c:	3930      	subs	r1, #48	; 0x30
 800b80e:	9143      	str	r1, [sp, #268]	; 0x10c
 800b810:	4655      	mov	r5, sl
 800b812:	e7d4      	b.n	800b7be <__ssvfiscanf_r+0xae>
 800b814:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b818:	2a20      	cmp	r2, #32
 800b81a:	d8ef      	bhi.n	800b7fc <__ssvfiscanf_r+0xec>
 800b81c:	a101      	add	r1, pc, #4	; (adr r1, 800b824 <__ssvfiscanf_r+0x114>)
 800b81e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b822:	bf00      	nop
 800b824:	0800b8d7 	.word	0x0800b8d7
 800b828:	0800b7fd 	.word	0x0800b7fd
 800b82c:	0800b7fd 	.word	0x0800b7fd
 800b830:	0800b935 	.word	0x0800b935
 800b834:	0800b7fd 	.word	0x0800b7fd
 800b838:	0800b7fd 	.word	0x0800b7fd
 800b83c:	0800b7fd 	.word	0x0800b7fd
 800b840:	0800b7fd 	.word	0x0800b7fd
 800b844:	0800b7fd 	.word	0x0800b7fd
 800b848:	0800b7fd 	.word	0x0800b7fd
 800b84c:	0800b7fd 	.word	0x0800b7fd
 800b850:	0800b94b 	.word	0x0800b94b
 800b854:	0800b931 	.word	0x0800b931
 800b858:	0800b8af 	.word	0x0800b8af
 800b85c:	0800b8af 	.word	0x0800b8af
 800b860:	0800b8af 	.word	0x0800b8af
 800b864:	0800b7fd 	.word	0x0800b7fd
 800b868:	0800b8ed 	.word	0x0800b8ed
 800b86c:	0800b7fd 	.word	0x0800b7fd
 800b870:	0800b7fd 	.word	0x0800b7fd
 800b874:	0800b7fd 	.word	0x0800b7fd
 800b878:	0800b7fd 	.word	0x0800b7fd
 800b87c:	0800b95b 	.word	0x0800b95b
 800b880:	0800b929 	.word	0x0800b929
 800b884:	0800b8cf 	.word	0x0800b8cf
 800b888:	0800b7fd 	.word	0x0800b7fd
 800b88c:	0800b7fd 	.word	0x0800b7fd
 800b890:	0800b957 	.word	0x0800b957
 800b894:	0800b7fd 	.word	0x0800b7fd
 800b898:	0800b931 	.word	0x0800b931
 800b89c:	0800b7fd 	.word	0x0800b7fd
 800b8a0:	0800b7fd 	.word	0x0800b7fd
 800b8a4:	0800b8d7 	.word	0x0800b8d7
 800b8a8:	3b45      	subs	r3, #69	; 0x45
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d8a6      	bhi.n	800b7fc <__ssvfiscanf_r+0xec>
 800b8ae:	2305      	movs	r3, #5
 800b8b0:	e01f      	b.n	800b8f2 <__ssvfiscanf_r+0x1e2>
 800b8b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4798      	blx	r3
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	f43f af68 	beq.w	800b790 <__ssvfiscanf_r+0x80>
 800b8c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f040 808d 	bne.w	800b9e2 <__ssvfiscanf_r+0x2d2>
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	e08f      	b.n	800b9ee <__ssvfiscanf_r+0x2de>
 800b8ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8d0:	f042 0220 	orr.w	r2, r2, #32
 800b8d4:	9241      	str	r2, [sp, #260]	; 0x104
 800b8d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8dc:	9241      	str	r2, [sp, #260]	; 0x104
 800b8de:	2210      	movs	r2, #16
 800b8e0:	2b6f      	cmp	r3, #111	; 0x6f
 800b8e2:	9242      	str	r2, [sp, #264]	; 0x108
 800b8e4:	bf34      	ite	cc
 800b8e6:	2303      	movcc	r3, #3
 800b8e8:	2304      	movcs	r3, #4
 800b8ea:	e002      	b.n	800b8f2 <__ssvfiscanf_r+0x1e2>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9342      	str	r3, [sp, #264]	; 0x108
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8f4:	6863      	ldr	r3, [r4, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	dd3d      	ble.n	800b976 <__ssvfiscanf_r+0x266>
 800b8fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8fc:	0659      	lsls	r1, r3, #25
 800b8fe:	d404      	bmi.n	800b90a <__ssvfiscanf_r+0x1fa>
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	781a      	ldrb	r2, [r3, #0]
 800b904:	5cba      	ldrb	r2, [r7, r2]
 800b906:	0712      	lsls	r2, r2, #28
 800b908:	d43c      	bmi.n	800b984 <__ssvfiscanf_r+0x274>
 800b90a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	dc4b      	bgt.n	800b9a8 <__ssvfiscanf_r+0x298>
 800b910:	466b      	mov	r3, sp
 800b912:	4622      	mov	r2, r4
 800b914:	a941      	add	r1, sp, #260	; 0x104
 800b916:	4630      	mov	r0, r6
 800b918:	f000 f9b6 	bl	800bc88 <_scanf_chars>
 800b91c:	2801      	cmp	r0, #1
 800b91e:	d06a      	beq.n	800b9f6 <__ssvfiscanf_r+0x2e6>
 800b920:	2802      	cmp	r0, #2
 800b922:	f47f af1c 	bne.w	800b75e <__ssvfiscanf_r+0x4e>
 800b926:	e7cb      	b.n	800b8c0 <__ssvfiscanf_r+0x1b0>
 800b928:	2308      	movs	r3, #8
 800b92a:	9342      	str	r3, [sp, #264]	; 0x108
 800b92c:	2304      	movs	r3, #4
 800b92e:	e7e0      	b.n	800b8f2 <__ssvfiscanf_r+0x1e2>
 800b930:	220a      	movs	r2, #10
 800b932:	e7d5      	b.n	800b8e0 <__ssvfiscanf_r+0x1d0>
 800b934:	4629      	mov	r1, r5
 800b936:	4640      	mov	r0, r8
 800b938:	f000 fc04 	bl	800c144 <__sccl>
 800b93c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b942:	9341      	str	r3, [sp, #260]	; 0x104
 800b944:	4605      	mov	r5, r0
 800b946:	2301      	movs	r3, #1
 800b948:	e7d3      	b.n	800b8f2 <__ssvfiscanf_r+0x1e2>
 800b94a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b950:	9341      	str	r3, [sp, #260]	; 0x104
 800b952:	2300      	movs	r3, #0
 800b954:	e7cd      	b.n	800b8f2 <__ssvfiscanf_r+0x1e2>
 800b956:	2302      	movs	r3, #2
 800b958:	e7cb      	b.n	800b8f2 <__ssvfiscanf_r+0x1e2>
 800b95a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b95c:	06c3      	lsls	r3, r0, #27
 800b95e:	f53f aefe 	bmi.w	800b75e <__ssvfiscanf_r+0x4e>
 800b962:	9b00      	ldr	r3, [sp, #0]
 800b964:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b966:	1d19      	adds	r1, r3, #4
 800b968:	9100      	str	r1, [sp, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	07c0      	lsls	r0, r0, #31
 800b96e:	bf4c      	ite	mi
 800b970:	801a      	strhmi	r2, [r3, #0]
 800b972:	601a      	strpl	r2, [r3, #0]
 800b974:	e6f3      	b.n	800b75e <__ssvfiscanf_r+0x4e>
 800b976:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b978:	4621      	mov	r1, r4
 800b97a:	4630      	mov	r0, r6
 800b97c:	4798      	blx	r3
 800b97e:	2800      	cmp	r0, #0
 800b980:	d0bb      	beq.n	800b8fa <__ssvfiscanf_r+0x1ea>
 800b982:	e79d      	b.n	800b8c0 <__ssvfiscanf_r+0x1b0>
 800b984:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b986:	3201      	adds	r2, #1
 800b988:	9245      	str	r2, [sp, #276]	; 0x114
 800b98a:	6862      	ldr	r2, [r4, #4]
 800b98c:	3a01      	subs	r2, #1
 800b98e:	2a00      	cmp	r2, #0
 800b990:	6062      	str	r2, [r4, #4]
 800b992:	dd02      	ble.n	800b99a <__ssvfiscanf_r+0x28a>
 800b994:	3301      	adds	r3, #1
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	e7b2      	b.n	800b900 <__ssvfiscanf_r+0x1f0>
 800b99a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b99c:	4621      	mov	r1, r4
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4798      	blx	r3
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d0ac      	beq.n	800b900 <__ssvfiscanf_r+0x1f0>
 800b9a6:	e78b      	b.n	800b8c0 <__ssvfiscanf_r+0x1b0>
 800b9a8:	2b04      	cmp	r3, #4
 800b9aa:	dc0f      	bgt.n	800b9cc <__ssvfiscanf_r+0x2bc>
 800b9ac:	466b      	mov	r3, sp
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	a941      	add	r1, sp, #260	; 0x104
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f000 f9c2 	bl	800bd3c <_scanf_i>
 800b9b8:	e7b0      	b.n	800b91c <__ssvfiscanf_r+0x20c>
 800b9ba:	bf00      	nop
 800b9bc:	0800b65d 	.word	0x0800b65d
 800b9c0:	0800b6d7 	.word	0x0800b6d7
 800b9c4:	0800d7c1 	.word	0x0800d7c1
 800b9c8:	0800d8c7 	.word	0x0800d8c7
 800b9cc:	4b0b      	ldr	r3, [pc, #44]	; (800b9fc <__ssvfiscanf_r+0x2ec>)
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f43f aec5 	beq.w	800b75e <__ssvfiscanf_r+0x4e>
 800b9d4:	466b      	mov	r3, sp
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	a941      	add	r1, sp, #260	; 0x104
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7fc fd12 	bl	8008404 <_scanf_float>
 800b9e0:	e79c      	b.n	800b91c <__ssvfiscanf_r+0x20c>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b9e8:	bf18      	it	ne
 800b9ea:	f04f 30ff 	movne.w	r0, #4294967295
 800b9ee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b9f8:	e7f9      	b.n	800b9ee <__ssvfiscanf_r+0x2de>
 800b9fa:	bf00      	nop
 800b9fc:	08008405 	.word	0x08008405

0800ba00 <__sfputc_r>:
 800ba00:	6893      	ldr	r3, [r2, #8]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	b410      	push	{r4}
 800ba08:	6093      	str	r3, [r2, #8]
 800ba0a:	da08      	bge.n	800ba1e <__sfputc_r+0x1e>
 800ba0c:	6994      	ldr	r4, [r2, #24]
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	db01      	blt.n	800ba16 <__sfputc_r+0x16>
 800ba12:	290a      	cmp	r1, #10
 800ba14:	d103      	bne.n	800ba1e <__sfputc_r+0x1e>
 800ba16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba1a:	f7fd b8c4 	b.w	8008ba6 <__swbuf_r>
 800ba1e:	6813      	ldr	r3, [r2, #0]
 800ba20:	1c58      	adds	r0, r3, #1
 800ba22:	6010      	str	r0, [r2, #0]
 800ba24:	7019      	strb	r1, [r3, #0]
 800ba26:	4608      	mov	r0, r1
 800ba28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <__sfputs_r>:
 800ba2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba30:	4606      	mov	r6, r0
 800ba32:	460f      	mov	r7, r1
 800ba34:	4614      	mov	r4, r2
 800ba36:	18d5      	adds	r5, r2, r3
 800ba38:	42ac      	cmp	r4, r5
 800ba3a:	d101      	bne.n	800ba40 <__sfputs_r+0x12>
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e007      	b.n	800ba50 <__sfputs_r+0x22>
 800ba40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba44:	463a      	mov	r2, r7
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ffda 	bl	800ba00 <__sfputc_r>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d1f3      	bne.n	800ba38 <__sfputs_r+0xa>
 800ba50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba54 <_vfiprintf_r>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	460d      	mov	r5, r1
 800ba5a:	b09d      	sub	sp, #116	; 0x74
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	4698      	mov	r8, r3
 800ba60:	4606      	mov	r6, r0
 800ba62:	b118      	cbz	r0, 800ba6c <_vfiprintf_r+0x18>
 800ba64:	6a03      	ldr	r3, [r0, #32]
 800ba66:	b90b      	cbnz	r3, 800ba6c <_vfiprintf_r+0x18>
 800ba68:	f7fc ff68 	bl	800893c <__sinit>
 800ba6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6e:	07d9      	lsls	r1, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_vfiprintf_r+0x2a>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	059a      	lsls	r2, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_vfiprintf_r+0x2a>
 800ba78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7a:	f7fd f9ce 	bl	8008e1a <__retarget_lock_acquire_recursive>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	071b      	lsls	r3, r3, #28
 800ba82:	d501      	bpl.n	800ba88 <_vfiprintf_r+0x34>
 800ba84:	692b      	ldr	r3, [r5, #16]
 800ba86:	b99b      	cbnz	r3, 800bab0 <_vfiprintf_r+0x5c>
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7fd f8c8 	bl	8008c20 <__swsetup_r>
 800ba90:	b170      	cbz	r0, 800bab0 <_vfiprintf_r+0x5c>
 800ba92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba94:	07dc      	lsls	r4, r3, #31
 800ba96:	d504      	bpl.n	800baa2 <_vfiprintf_r+0x4e>
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	b01d      	add	sp, #116	; 0x74
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	0598      	lsls	r0, r3, #22
 800baa6:	d4f7      	bmi.n	800ba98 <_vfiprintf_r+0x44>
 800baa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baaa:	f7fd f9b7 	bl	8008e1c <__retarget_lock_release_recursive>
 800baae:	e7f3      	b.n	800ba98 <_vfiprintf_r+0x44>
 800bab0:	2300      	movs	r3, #0
 800bab2:	9309      	str	r3, [sp, #36]	; 0x24
 800bab4:	2320      	movs	r3, #32
 800bab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baba:	f8cd 800c 	str.w	r8, [sp, #12]
 800babe:	2330      	movs	r3, #48	; 0x30
 800bac0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc74 <_vfiprintf_r+0x220>
 800bac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bac8:	f04f 0901 	mov.w	r9, #1
 800bacc:	4623      	mov	r3, r4
 800bace:	469a      	mov	sl, r3
 800bad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad4:	b10a      	cbz	r2, 800bada <_vfiprintf_r+0x86>
 800bad6:	2a25      	cmp	r2, #37	; 0x25
 800bad8:	d1f9      	bne.n	800bace <_vfiprintf_r+0x7a>
 800bada:	ebba 0b04 	subs.w	fp, sl, r4
 800bade:	d00b      	beq.n	800baf8 <_vfiprintf_r+0xa4>
 800bae0:	465b      	mov	r3, fp
 800bae2:	4622      	mov	r2, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7ff ffa1 	bl	800ba2e <__sfputs_r>
 800baec:	3001      	adds	r0, #1
 800baee:	f000 80a9 	beq.w	800bc44 <_vfiprintf_r+0x1f0>
 800baf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baf4:	445a      	add	r2, fp
 800baf6:	9209      	str	r2, [sp, #36]	; 0x24
 800baf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 80a1 	beq.w	800bc44 <_vfiprintf_r+0x1f0>
 800bb02:	2300      	movs	r3, #0
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb0c:	f10a 0a01 	add.w	sl, sl, #1
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	9307      	str	r3, [sp, #28]
 800bb14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb18:	931a      	str	r3, [sp, #104]	; 0x68
 800bb1a:	4654      	mov	r4, sl
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb22:	4854      	ldr	r0, [pc, #336]	; (800bc74 <_vfiprintf_r+0x220>)
 800bb24:	f7f4 fb54 	bl	80001d0 <memchr>
 800bb28:	9a04      	ldr	r2, [sp, #16]
 800bb2a:	b9d8      	cbnz	r0, 800bb64 <_vfiprintf_r+0x110>
 800bb2c:	06d1      	lsls	r1, r2, #27
 800bb2e:	bf44      	itt	mi
 800bb30:	2320      	movmi	r3, #32
 800bb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb36:	0713      	lsls	r3, r2, #28
 800bb38:	bf44      	itt	mi
 800bb3a:	232b      	movmi	r3, #43	; 0x2b
 800bb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb40:	f89a 3000 	ldrb.w	r3, [sl]
 800bb44:	2b2a      	cmp	r3, #42	; 0x2a
 800bb46:	d015      	beq.n	800bb74 <_vfiprintf_r+0x120>
 800bb48:	9a07      	ldr	r2, [sp, #28]
 800bb4a:	4654      	mov	r4, sl
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f04f 0c0a 	mov.w	ip, #10
 800bb52:	4621      	mov	r1, r4
 800bb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb58:	3b30      	subs	r3, #48	; 0x30
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d94d      	bls.n	800bbfa <_vfiprintf_r+0x1a6>
 800bb5e:	b1b0      	cbz	r0, 800bb8e <_vfiprintf_r+0x13a>
 800bb60:	9207      	str	r2, [sp, #28]
 800bb62:	e014      	b.n	800bb8e <_vfiprintf_r+0x13a>
 800bb64:	eba0 0308 	sub.w	r3, r0, r8
 800bb68:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	46a2      	mov	sl, r4
 800bb72:	e7d2      	b.n	800bb1a <_vfiprintf_r+0xc6>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	1d19      	adds	r1, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	9103      	str	r1, [sp, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	bfbb      	ittet	lt
 800bb80:	425b      	neglt	r3, r3
 800bb82:	f042 0202 	orrlt.w	r2, r2, #2
 800bb86:	9307      	strge	r3, [sp, #28]
 800bb88:	9307      	strlt	r3, [sp, #28]
 800bb8a:	bfb8      	it	lt
 800bb8c:	9204      	strlt	r2, [sp, #16]
 800bb8e:	7823      	ldrb	r3, [r4, #0]
 800bb90:	2b2e      	cmp	r3, #46	; 0x2e
 800bb92:	d10c      	bne.n	800bbae <_vfiprintf_r+0x15a>
 800bb94:	7863      	ldrb	r3, [r4, #1]
 800bb96:	2b2a      	cmp	r3, #42	; 0x2a
 800bb98:	d134      	bne.n	800bc04 <_vfiprintf_r+0x1b0>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	9203      	str	r2, [sp, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfb8      	it	lt
 800bba6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbaa:	3402      	adds	r4, #2
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc84 <_vfiprintf_r+0x230>
 800bbb2:	7821      	ldrb	r1, [r4, #0]
 800bbb4:	2203      	movs	r2, #3
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	f7f4 fb0a 	bl	80001d0 <memchr>
 800bbbc:	b138      	cbz	r0, 800bbce <_vfiprintf_r+0x17a>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	eba0 000a 	sub.w	r0, r0, sl
 800bbc4:	2240      	movs	r2, #64	; 0x40
 800bbc6:	4082      	lsls	r2, r0
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	3401      	adds	r4, #1
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd2:	4829      	ldr	r0, [pc, #164]	; (800bc78 <_vfiprintf_r+0x224>)
 800bbd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbd8:	2206      	movs	r2, #6
 800bbda:	f7f4 faf9 	bl	80001d0 <memchr>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d03f      	beq.n	800bc62 <_vfiprintf_r+0x20e>
 800bbe2:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <_vfiprintf_r+0x228>)
 800bbe4:	bb1b      	cbnz	r3, 800bc2e <_vfiprintf_r+0x1da>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	3307      	adds	r3, #7
 800bbea:	f023 0307 	bic.w	r3, r3, #7
 800bbee:	3308      	adds	r3, #8
 800bbf0:	9303      	str	r3, [sp, #12]
 800bbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf4:	443b      	add	r3, r7
 800bbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf8:	e768      	b.n	800bacc <_vfiprintf_r+0x78>
 800bbfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbfe:	460c      	mov	r4, r1
 800bc00:	2001      	movs	r0, #1
 800bc02:	e7a6      	b.n	800bb52 <_vfiprintf_r+0xfe>
 800bc04:	2300      	movs	r3, #0
 800bc06:	3401      	adds	r4, #1
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	4620      	mov	r0, r4
 800bc12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc16:	3a30      	subs	r2, #48	; 0x30
 800bc18:	2a09      	cmp	r2, #9
 800bc1a:	d903      	bls.n	800bc24 <_vfiprintf_r+0x1d0>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0c6      	beq.n	800bbae <_vfiprintf_r+0x15a>
 800bc20:	9105      	str	r1, [sp, #20]
 800bc22:	e7c4      	b.n	800bbae <_vfiprintf_r+0x15a>
 800bc24:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc28:	4604      	mov	r4, r0
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e7f0      	b.n	800bc10 <_vfiprintf_r+0x1bc>
 800bc2e:	ab03      	add	r3, sp, #12
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	462a      	mov	r2, r5
 800bc34:	4b12      	ldr	r3, [pc, #72]	; (800bc80 <_vfiprintf_r+0x22c>)
 800bc36:	a904      	add	r1, sp, #16
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7fc f81d 	bl	8007c78 <_printf_float>
 800bc3e:	4607      	mov	r7, r0
 800bc40:	1c78      	adds	r0, r7, #1
 800bc42:	d1d6      	bne.n	800bbf2 <_vfiprintf_r+0x19e>
 800bc44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc46:	07d9      	lsls	r1, r3, #31
 800bc48:	d405      	bmi.n	800bc56 <_vfiprintf_r+0x202>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_vfiprintf_r+0x202>
 800bc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc52:	f7fd f8e3 	bl	8008e1c <__retarget_lock_release_recursive>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	065b      	lsls	r3, r3, #25
 800bc5a:	f53f af1d 	bmi.w	800ba98 <_vfiprintf_r+0x44>
 800bc5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc60:	e71c      	b.n	800ba9c <_vfiprintf_r+0x48>
 800bc62:	ab03      	add	r3, sp, #12
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	462a      	mov	r2, r5
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <_vfiprintf_r+0x22c>)
 800bc6a:	a904      	add	r1, sp, #16
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7fc faa7 	bl	80081c0 <_printf_i>
 800bc72:	e7e4      	b.n	800bc3e <_vfiprintf_r+0x1ea>
 800bc74:	0800d8c1 	.word	0x0800d8c1
 800bc78:	0800d8cb 	.word	0x0800d8cb
 800bc7c:	08007c79 	.word	0x08007c79
 800bc80:	0800ba2f 	.word	0x0800ba2f
 800bc84:	0800d8c7 	.word	0x0800d8c7

0800bc88 <_scanf_chars>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	4615      	mov	r5, r2
 800bc8e:	688a      	ldr	r2, [r1, #8]
 800bc90:	4680      	mov	r8, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	b932      	cbnz	r2, 800bca4 <_scanf_chars+0x1c>
 800bc96:	698a      	ldr	r2, [r1, #24]
 800bc98:	2a00      	cmp	r2, #0
 800bc9a:	bf0c      	ite	eq
 800bc9c:	2201      	moveq	r2, #1
 800bc9e:	f04f 32ff 	movne.w	r2, #4294967295
 800bca2:	608a      	str	r2, [r1, #8]
 800bca4:	6822      	ldr	r2, [r4, #0]
 800bca6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bd38 <_scanf_chars+0xb0>
 800bcaa:	06d1      	lsls	r1, r2, #27
 800bcac:	bf5f      	itttt	pl
 800bcae:	681a      	ldrpl	r2, [r3, #0]
 800bcb0:	1d11      	addpl	r1, r2, #4
 800bcb2:	6019      	strpl	r1, [r3, #0]
 800bcb4:	6816      	ldrpl	r6, [r2, #0]
 800bcb6:	2700      	movs	r7, #0
 800bcb8:	69a0      	ldr	r0, [r4, #24]
 800bcba:	b188      	cbz	r0, 800bce0 <_scanf_chars+0x58>
 800bcbc:	2801      	cmp	r0, #1
 800bcbe:	d107      	bne.n	800bcd0 <_scanf_chars+0x48>
 800bcc0:	682a      	ldr	r2, [r5, #0]
 800bcc2:	7811      	ldrb	r1, [r2, #0]
 800bcc4:	6962      	ldr	r2, [r4, #20]
 800bcc6:	5c52      	ldrb	r2, [r2, r1]
 800bcc8:	b952      	cbnz	r2, 800bce0 <_scanf_chars+0x58>
 800bcca:	2f00      	cmp	r7, #0
 800bccc:	d031      	beq.n	800bd32 <_scanf_chars+0xaa>
 800bcce:	e022      	b.n	800bd16 <_scanf_chars+0x8e>
 800bcd0:	2802      	cmp	r0, #2
 800bcd2:	d120      	bne.n	800bd16 <_scanf_chars+0x8e>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bcdc:	071b      	lsls	r3, r3, #28
 800bcde:	d41a      	bmi.n	800bd16 <_scanf_chars+0x8e>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	06da      	lsls	r2, r3, #27
 800bce4:	bf5e      	ittt	pl
 800bce6:	682b      	ldrpl	r3, [r5, #0]
 800bce8:	781b      	ldrbpl	r3, [r3, #0]
 800bcea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bcee:	682a      	ldr	r2, [r5, #0]
 800bcf0:	686b      	ldr	r3, [r5, #4]
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	602a      	str	r2, [r5, #0]
 800bcf6:	68a2      	ldr	r2, [r4, #8]
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	3a01      	subs	r2, #1
 800bcfc:	606b      	str	r3, [r5, #4]
 800bcfe:	3701      	adds	r7, #1
 800bd00:	60a2      	str	r2, [r4, #8]
 800bd02:	b142      	cbz	r2, 800bd16 <_scanf_chars+0x8e>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dcd7      	bgt.n	800bcb8 <_scanf_chars+0x30>
 800bd08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4798      	blx	r3
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d0d0      	beq.n	800bcb8 <_scanf_chars+0x30>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	f013 0310 	ands.w	r3, r3, #16
 800bd1c:	d105      	bne.n	800bd2a <_scanf_chars+0xa2>
 800bd1e:	68e2      	ldr	r2, [r4, #12]
 800bd20:	3201      	adds	r2, #1
 800bd22:	60e2      	str	r2, [r4, #12]
 800bd24:	69a2      	ldr	r2, [r4, #24]
 800bd26:	b102      	cbz	r2, 800bd2a <_scanf_chars+0xa2>
 800bd28:	7033      	strb	r3, [r6, #0]
 800bd2a:	6923      	ldr	r3, [r4, #16]
 800bd2c:	443b      	add	r3, r7
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	2000      	movs	r0, #0
 800bd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd36:	bf00      	nop
 800bd38:	0800d7c1 	.word	0x0800d7c1

0800bd3c <_scanf_i>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	4698      	mov	r8, r3
 800bd42:	4b74      	ldr	r3, [pc, #464]	; (800bf14 <_scanf_i+0x1d8>)
 800bd44:	460c      	mov	r4, r1
 800bd46:	4682      	mov	sl, r0
 800bd48:	4616      	mov	r6, r2
 800bd4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	ab03      	add	r3, sp, #12
 800bd52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd56:	4b70      	ldr	r3, [pc, #448]	; (800bf18 <_scanf_i+0x1dc>)
 800bd58:	69a1      	ldr	r1, [r4, #24]
 800bd5a:	4a70      	ldr	r2, [pc, #448]	; (800bf1c <_scanf_i+0x1e0>)
 800bd5c:	2903      	cmp	r1, #3
 800bd5e:	bf18      	it	ne
 800bd60:	461a      	movne	r2, r3
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	9201      	str	r2, [sp, #4]
 800bd66:	1e5a      	subs	r2, r3, #1
 800bd68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd6c:	bf88      	it	hi
 800bd6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd72:	4627      	mov	r7, r4
 800bd74:	bf82      	ittt	hi
 800bd76:	eb03 0905 	addhi.w	r9, r3, r5
 800bd7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd7e:	60a3      	strhi	r3, [r4, #8]
 800bd80:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bd84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bd88:	bf98      	it	ls
 800bd8a:	f04f 0900 	movls.w	r9, #0
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	463d      	mov	r5, r7
 800bd92:	f04f 0b00 	mov.w	fp, #0
 800bd96:	6831      	ldr	r1, [r6, #0]
 800bd98:	ab03      	add	r3, sp, #12
 800bd9a:	7809      	ldrb	r1, [r1, #0]
 800bd9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bda0:	2202      	movs	r2, #2
 800bda2:	f7f4 fa15 	bl	80001d0 <memchr>
 800bda6:	b328      	cbz	r0, 800bdf4 <_scanf_i+0xb8>
 800bda8:	f1bb 0f01 	cmp.w	fp, #1
 800bdac:	d159      	bne.n	800be62 <_scanf_i+0x126>
 800bdae:	6862      	ldr	r2, [r4, #4]
 800bdb0:	b92a      	cbnz	r2, 800bdbe <_scanf_i+0x82>
 800bdb2:	6822      	ldr	r2, [r4, #0]
 800bdb4:	2308      	movs	r3, #8
 800bdb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdba:	6063      	str	r3, [r4, #4]
 800bdbc:	6022      	str	r2, [r4, #0]
 800bdbe:	6822      	ldr	r2, [r4, #0]
 800bdc0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bdc4:	6022      	str	r2, [r4, #0]
 800bdc6:	68a2      	ldr	r2, [r4, #8]
 800bdc8:	1e51      	subs	r1, r2, #1
 800bdca:	60a1      	str	r1, [r4, #8]
 800bdcc:	b192      	cbz	r2, 800bdf4 <_scanf_i+0xb8>
 800bdce:	6832      	ldr	r2, [r6, #0]
 800bdd0:	1c51      	adds	r1, r2, #1
 800bdd2:	6031      	str	r1, [r6, #0]
 800bdd4:	7812      	ldrb	r2, [r2, #0]
 800bdd6:	f805 2b01 	strb.w	r2, [r5], #1
 800bdda:	6872      	ldr	r2, [r6, #4]
 800bddc:	3a01      	subs	r2, #1
 800bdde:	2a00      	cmp	r2, #0
 800bde0:	6072      	str	r2, [r6, #4]
 800bde2:	dc07      	bgt.n	800bdf4 <_scanf_i+0xb8>
 800bde4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bde8:	4631      	mov	r1, r6
 800bdea:	4650      	mov	r0, sl
 800bdec:	4790      	blx	r2
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f040 8085 	bne.w	800befe <_scanf_i+0x1c2>
 800bdf4:	f10b 0b01 	add.w	fp, fp, #1
 800bdf8:	f1bb 0f03 	cmp.w	fp, #3
 800bdfc:	d1cb      	bne.n	800bd96 <_scanf_i+0x5a>
 800bdfe:	6863      	ldr	r3, [r4, #4]
 800be00:	b90b      	cbnz	r3, 800be06 <_scanf_i+0xca>
 800be02:	230a      	movs	r3, #10
 800be04:	6063      	str	r3, [r4, #4]
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	4945      	ldr	r1, [pc, #276]	; (800bf20 <_scanf_i+0x1e4>)
 800be0a:	6960      	ldr	r0, [r4, #20]
 800be0c:	1ac9      	subs	r1, r1, r3
 800be0e:	f000 f999 	bl	800c144 <__sccl>
 800be12:	f04f 0b00 	mov.w	fp, #0
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d03d      	beq.n	800be9a <_scanf_i+0x15e>
 800be1e:	6831      	ldr	r1, [r6, #0]
 800be20:	6960      	ldr	r0, [r4, #20]
 800be22:	f891 c000 	ldrb.w	ip, [r1]
 800be26:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d035      	beq.n	800be9a <_scanf_i+0x15e>
 800be2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be32:	d124      	bne.n	800be7e <_scanf_i+0x142>
 800be34:	0510      	lsls	r0, r2, #20
 800be36:	d522      	bpl.n	800be7e <_scanf_i+0x142>
 800be38:	f10b 0b01 	add.w	fp, fp, #1
 800be3c:	f1b9 0f00 	cmp.w	r9, #0
 800be40:	d003      	beq.n	800be4a <_scanf_i+0x10e>
 800be42:	3301      	adds	r3, #1
 800be44:	f109 39ff 	add.w	r9, r9, #4294967295
 800be48:	60a3      	str	r3, [r4, #8]
 800be4a:	6873      	ldr	r3, [r6, #4]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	6073      	str	r3, [r6, #4]
 800be52:	dd1b      	ble.n	800be8c <_scanf_i+0x150>
 800be54:	6833      	ldr	r3, [r6, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	6033      	str	r3, [r6, #0]
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	60a3      	str	r3, [r4, #8]
 800be60:	e7d9      	b.n	800be16 <_scanf_i+0xda>
 800be62:	f1bb 0f02 	cmp.w	fp, #2
 800be66:	d1ae      	bne.n	800bdc6 <_scanf_i+0x8a>
 800be68:	6822      	ldr	r2, [r4, #0]
 800be6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be72:	d1bf      	bne.n	800bdf4 <_scanf_i+0xb8>
 800be74:	2310      	movs	r3, #16
 800be76:	6063      	str	r3, [r4, #4]
 800be78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be7c:	e7a2      	b.n	800bdc4 <_scanf_i+0x88>
 800be7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be82:	6022      	str	r2, [r4, #0]
 800be84:	780b      	ldrb	r3, [r1, #0]
 800be86:	f805 3b01 	strb.w	r3, [r5], #1
 800be8a:	e7de      	b.n	800be4a <_scanf_i+0x10e>
 800be8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be90:	4631      	mov	r1, r6
 800be92:	4650      	mov	r0, sl
 800be94:	4798      	blx	r3
 800be96:	2800      	cmp	r0, #0
 800be98:	d0df      	beq.n	800be5a <_scanf_i+0x11e>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	05d9      	lsls	r1, r3, #23
 800be9e:	d50d      	bpl.n	800bebc <_scanf_i+0x180>
 800bea0:	42bd      	cmp	r5, r7
 800bea2:	d909      	bls.n	800beb8 <_scanf_i+0x17c>
 800bea4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800beac:	4632      	mov	r2, r6
 800beae:	4650      	mov	r0, sl
 800beb0:	4798      	blx	r3
 800beb2:	f105 39ff 	add.w	r9, r5, #4294967295
 800beb6:	464d      	mov	r5, r9
 800beb8:	42bd      	cmp	r5, r7
 800beba:	d028      	beq.n	800bf0e <_scanf_i+0x1d2>
 800bebc:	6822      	ldr	r2, [r4, #0]
 800bebe:	f012 0210 	ands.w	r2, r2, #16
 800bec2:	d113      	bne.n	800beec <_scanf_i+0x1b0>
 800bec4:	702a      	strb	r2, [r5, #0]
 800bec6:	6863      	ldr	r3, [r4, #4]
 800bec8:	9e01      	ldr	r6, [sp, #4]
 800beca:	4639      	mov	r1, r7
 800becc:	4650      	mov	r0, sl
 800bece:	47b0      	blx	r6
 800bed0:	f8d8 3000 	ldr.w	r3, [r8]
 800bed4:	6821      	ldr	r1, [r4, #0]
 800bed6:	1d1a      	adds	r2, r3, #4
 800bed8:	f8c8 2000 	str.w	r2, [r8]
 800bedc:	f011 0f20 	tst.w	r1, #32
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	d00f      	beq.n	800bf04 <_scanf_i+0x1c8>
 800bee4:	6018      	str	r0, [r3, #0]
 800bee6:	68e3      	ldr	r3, [r4, #12]
 800bee8:	3301      	adds	r3, #1
 800beea:	60e3      	str	r3, [r4, #12]
 800beec:	6923      	ldr	r3, [r4, #16]
 800beee:	1bed      	subs	r5, r5, r7
 800bef0:	445d      	add	r5, fp
 800bef2:	442b      	add	r3, r5
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	2000      	movs	r0, #0
 800bef8:	b007      	add	sp, #28
 800befa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befe:	f04f 0b00 	mov.w	fp, #0
 800bf02:	e7ca      	b.n	800be9a <_scanf_i+0x15e>
 800bf04:	07ca      	lsls	r2, r1, #31
 800bf06:	bf4c      	ite	mi
 800bf08:	8018      	strhmi	r0, [r3, #0]
 800bf0a:	6018      	strpl	r0, [r3, #0]
 800bf0c:	e7eb      	b.n	800bee6 <_scanf_i+0x1aa>
 800bf0e:	2001      	movs	r0, #1
 800bf10:	e7f2      	b.n	800bef8 <_scanf_i+0x1bc>
 800bf12:	bf00      	nop
 800bf14:	0800d4fc 	.word	0x0800d4fc
 800bf18:	0800cb6d 	.word	0x0800cb6d
 800bf1c:	0800b3a9 	.word	0x0800b3a9
 800bf20:	0800d8e2 	.word	0x0800d8e2

0800bf24 <__sflush_r>:
 800bf24:	898a      	ldrh	r2, [r1, #12]
 800bf26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	0710      	lsls	r0, r2, #28
 800bf2e:	460c      	mov	r4, r1
 800bf30:	d458      	bmi.n	800bfe4 <__sflush_r+0xc0>
 800bf32:	684b      	ldr	r3, [r1, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dc05      	bgt.n	800bf44 <__sflush_r+0x20>
 800bf38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	dc02      	bgt.n	800bf44 <__sflush_r+0x20>
 800bf3e:	2000      	movs	r0, #0
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf46:	2e00      	cmp	r6, #0
 800bf48:	d0f9      	beq.n	800bf3e <__sflush_r+0x1a>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf50:	682f      	ldr	r7, [r5, #0]
 800bf52:	6a21      	ldr	r1, [r4, #32]
 800bf54:	602b      	str	r3, [r5, #0]
 800bf56:	d032      	beq.n	800bfbe <__sflush_r+0x9a>
 800bf58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	075a      	lsls	r2, r3, #29
 800bf5e:	d505      	bpl.n	800bf6c <__sflush_r+0x48>
 800bf60:	6863      	ldr	r3, [r4, #4]
 800bf62:	1ac0      	subs	r0, r0, r3
 800bf64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf66:	b10b      	cbz	r3, 800bf6c <__sflush_r+0x48>
 800bf68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf6a:	1ac0      	subs	r0, r0, r3
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4602      	mov	r2, r0
 800bf70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf72:	6a21      	ldr	r1, [r4, #32]
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b0      	blx	r6
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	d106      	bne.n	800bf8c <__sflush_r+0x68>
 800bf7e:	6829      	ldr	r1, [r5, #0]
 800bf80:	291d      	cmp	r1, #29
 800bf82:	d82b      	bhi.n	800bfdc <__sflush_r+0xb8>
 800bf84:	4a29      	ldr	r2, [pc, #164]	; (800c02c <__sflush_r+0x108>)
 800bf86:	410a      	asrs	r2, r1
 800bf88:	07d6      	lsls	r6, r2, #31
 800bf8a:	d427      	bmi.n	800bfdc <__sflush_r+0xb8>
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	6062      	str	r2, [r4, #4]
 800bf90:	04d9      	lsls	r1, r3, #19
 800bf92:	6922      	ldr	r2, [r4, #16]
 800bf94:	6022      	str	r2, [r4, #0]
 800bf96:	d504      	bpl.n	800bfa2 <__sflush_r+0x7e>
 800bf98:	1c42      	adds	r2, r0, #1
 800bf9a:	d101      	bne.n	800bfa0 <__sflush_r+0x7c>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b903      	cbnz	r3, 800bfa2 <__sflush_r+0x7e>
 800bfa0:	6560      	str	r0, [r4, #84]	; 0x54
 800bfa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfa4:	602f      	str	r7, [r5, #0]
 800bfa6:	2900      	cmp	r1, #0
 800bfa8:	d0c9      	beq.n	800bf3e <__sflush_r+0x1a>
 800bfaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfae:	4299      	cmp	r1, r3
 800bfb0:	d002      	beq.n	800bfb8 <__sflush_r+0x94>
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f7fd fdb6 	bl	8009b24 <_free_r>
 800bfb8:	2000      	movs	r0, #0
 800bfba:	6360      	str	r0, [r4, #52]	; 0x34
 800bfbc:	e7c0      	b.n	800bf40 <__sflush_r+0x1c>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b0      	blx	r6
 800bfc4:	1c41      	adds	r1, r0, #1
 800bfc6:	d1c8      	bne.n	800bf5a <__sflush_r+0x36>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0c5      	beq.n	800bf5a <__sflush_r+0x36>
 800bfce:	2b1d      	cmp	r3, #29
 800bfd0:	d001      	beq.n	800bfd6 <__sflush_r+0xb2>
 800bfd2:	2b16      	cmp	r3, #22
 800bfd4:	d101      	bne.n	800bfda <__sflush_r+0xb6>
 800bfd6:	602f      	str	r7, [r5, #0]
 800bfd8:	e7b1      	b.n	800bf3e <__sflush_r+0x1a>
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	e7ad      	b.n	800bf40 <__sflush_r+0x1c>
 800bfe4:	690f      	ldr	r7, [r1, #16]
 800bfe6:	2f00      	cmp	r7, #0
 800bfe8:	d0a9      	beq.n	800bf3e <__sflush_r+0x1a>
 800bfea:	0793      	lsls	r3, r2, #30
 800bfec:	680e      	ldr	r6, [r1, #0]
 800bfee:	bf08      	it	eq
 800bff0:	694b      	ldreq	r3, [r1, #20]
 800bff2:	600f      	str	r7, [r1, #0]
 800bff4:	bf18      	it	ne
 800bff6:	2300      	movne	r3, #0
 800bff8:	eba6 0807 	sub.w	r8, r6, r7
 800bffc:	608b      	str	r3, [r1, #8]
 800bffe:	f1b8 0f00 	cmp.w	r8, #0
 800c002:	dd9c      	ble.n	800bf3e <__sflush_r+0x1a>
 800c004:	6a21      	ldr	r1, [r4, #32]
 800c006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c008:	4643      	mov	r3, r8
 800c00a:	463a      	mov	r2, r7
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b0      	blx	r6
 800c010:	2800      	cmp	r0, #0
 800c012:	dc06      	bgt.n	800c022 <__sflush_r+0xfe>
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295
 800c020:	e78e      	b.n	800bf40 <__sflush_r+0x1c>
 800c022:	4407      	add	r7, r0
 800c024:	eba8 0800 	sub.w	r8, r8, r0
 800c028:	e7e9      	b.n	800bffe <__sflush_r+0xda>
 800c02a:	bf00      	nop
 800c02c:	dfbffffe 	.word	0xdfbffffe

0800c030 <_fflush_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	690b      	ldr	r3, [r1, #16]
 800c034:	4605      	mov	r5, r0
 800c036:	460c      	mov	r4, r1
 800c038:	b913      	cbnz	r3, 800c040 <_fflush_r+0x10>
 800c03a:	2500      	movs	r5, #0
 800c03c:	4628      	mov	r0, r5
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	b118      	cbz	r0, 800c04a <_fflush_r+0x1a>
 800c042:	6a03      	ldr	r3, [r0, #32]
 800c044:	b90b      	cbnz	r3, 800c04a <_fflush_r+0x1a>
 800c046:	f7fc fc79 	bl	800893c <__sinit>
 800c04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0f3      	beq.n	800c03a <_fflush_r+0xa>
 800c052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c054:	07d0      	lsls	r0, r2, #31
 800c056:	d404      	bmi.n	800c062 <_fflush_r+0x32>
 800c058:	0599      	lsls	r1, r3, #22
 800c05a:	d402      	bmi.n	800c062 <_fflush_r+0x32>
 800c05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c05e:	f7fc fedc 	bl	8008e1a <__retarget_lock_acquire_recursive>
 800c062:	4628      	mov	r0, r5
 800c064:	4621      	mov	r1, r4
 800c066:	f7ff ff5d 	bl	800bf24 <__sflush_r>
 800c06a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c06c:	07da      	lsls	r2, r3, #31
 800c06e:	4605      	mov	r5, r0
 800c070:	d4e4      	bmi.n	800c03c <_fflush_r+0xc>
 800c072:	89a3      	ldrh	r3, [r4, #12]
 800c074:	059b      	lsls	r3, r3, #22
 800c076:	d4e1      	bmi.n	800c03c <_fflush_r+0xc>
 800c078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c07a:	f7fc fecf 	bl	8008e1c <__retarget_lock_release_recursive>
 800c07e:	e7dd      	b.n	800c03c <_fflush_r+0xc>

0800c080 <__swhatbuf_r>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	460c      	mov	r4, r1
 800c084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c088:	2900      	cmp	r1, #0
 800c08a:	b096      	sub	sp, #88	; 0x58
 800c08c:	4615      	mov	r5, r2
 800c08e:	461e      	mov	r6, r3
 800c090:	da0d      	bge.n	800c0ae <__swhatbuf_r+0x2e>
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c098:	f04f 0100 	mov.w	r1, #0
 800c09c:	bf0c      	ite	eq
 800c09e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0a2:	2340      	movne	r3, #64	; 0x40
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	6031      	str	r1, [r6, #0]
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	b016      	add	sp, #88	; 0x58
 800c0ac:	bd70      	pop	{r4, r5, r6, pc}
 800c0ae:	466a      	mov	r2, sp
 800c0b0:	f000 f8d6 	bl	800c260 <_fstat_r>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	dbec      	blt.n	800c092 <__swhatbuf_r+0x12>
 800c0b8:	9901      	ldr	r1, [sp, #4]
 800c0ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0c2:	4259      	negs	r1, r3
 800c0c4:	4159      	adcs	r1, r3
 800c0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ca:	e7eb      	b.n	800c0a4 <__swhatbuf_r+0x24>

0800c0cc <__smakebuf_r>:
 800c0cc:	898b      	ldrh	r3, [r1, #12]
 800c0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0d0:	079d      	lsls	r5, r3, #30
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	d507      	bpl.n	800c0e8 <__smakebuf_r+0x1c>
 800c0d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	6123      	str	r3, [r4, #16]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	6163      	str	r3, [r4, #20]
 800c0e4:	b002      	add	sp, #8
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	ab01      	add	r3, sp, #4
 800c0ea:	466a      	mov	r2, sp
 800c0ec:	f7ff ffc8 	bl	800c080 <__swhatbuf_r>
 800c0f0:	9900      	ldr	r1, [sp, #0]
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7fd fd89 	bl	8009c0c <_malloc_r>
 800c0fa:	b948      	cbnz	r0, 800c110 <__smakebuf_r+0x44>
 800c0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c100:	059a      	lsls	r2, r3, #22
 800c102:	d4ef      	bmi.n	800c0e4 <__smakebuf_r+0x18>
 800c104:	f023 0303 	bic.w	r3, r3, #3
 800c108:	f043 0302 	orr.w	r3, r3, #2
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	e7e3      	b.n	800c0d8 <__smakebuf_r+0xc>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	6020      	str	r0, [r4, #0]
 800c114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	9b00      	ldr	r3, [sp, #0]
 800c11c:	6163      	str	r3, [r4, #20]
 800c11e:	9b01      	ldr	r3, [sp, #4]
 800c120:	6120      	str	r0, [r4, #16]
 800c122:	b15b      	cbz	r3, 800c13c <__smakebuf_r+0x70>
 800c124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c128:	4630      	mov	r0, r6
 800c12a:	f000 f8ab 	bl	800c284 <_isatty_r>
 800c12e:	b128      	cbz	r0, 800c13c <__smakebuf_r+0x70>
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	f023 0303 	bic.w	r3, r3, #3
 800c136:	f043 0301 	orr.w	r3, r3, #1
 800c13a:	81a3      	strh	r3, [r4, #12]
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	431d      	orrs	r5, r3
 800c140:	81a5      	strh	r5, [r4, #12]
 800c142:	e7cf      	b.n	800c0e4 <__smakebuf_r+0x18>

0800c144 <__sccl>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	780b      	ldrb	r3, [r1, #0]
 800c148:	4604      	mov	r4, r0
 800c14a:	2b5e      	cmp	r3, #94	; 0x5e
 800c14c:	bf0b      	itete	eq
 800c14e:	784b      	ldrbeq	r3, [r1, #1]
 800c150:	1c4a      	addne	r2, r1, #1
 800c152:	1c8a      	addeq	r2, r1, #2
 800c154:	2100      	movne	r1, #0
 800c156:	bf08      	it	eq
 800c158:	2101      	moveq	r1, #1
 800c15a:	3801      	subs	r0, #1
 800c15c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c160:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c164:	42a8      	cmp	r0, r5
 800c166:	d1fb      	bne.n	800c160 <__sccl+0x1c>
 800c168:	b90b      	cbnz	r3, 800c16e <__sccl+0x2a>
 800c16a:	1e50      	subs	r0, r2, #1
 800c16c:	bd70      	pop	{r4, r5, r6, pc}
 800c16e:	f081 0101 	eor.w	r1, r1, #1
 800c172:	54e1      	strb	r1, [r4, r3]
 800c174:	4610      	mov	r0, r2
 800c176:	4602      	mov	r2, r0
 800c178:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c17c:	2d2d      	cmp	r5, #45	; 0x2d
 800c17e:	d005      	beq.n	800c18c <__sccl+0x48>
 800c180:	2d5d      	cmp	r5, #93	; 0x5d
 800c182:	d016      	beq.n	800c1b2 <__sccl+0x6e>
 800c184:	2d00      	cmp	r5, #0
 800c186:	d0f1      	beq.n	800c16c <__sccl+0x28>
 800c188:	462b      	mov	r3, r5
 800c18a:	e7f2      	b.n	800c172 <__sccl+0x2e>
 800c18c:	7846      	ldrb	r6, [r0, #1]
 800c18e:	2e5d      	cmp	r6, #93	; 0x5d
 800c190:	d0fa      	beq.n	800c188 <__sccl+0x44>
 800c192:	42b3      	cmp	r3, r6
 800c194:	dcf8      	bgt.n	800c188 <__sccl+0x44>
 800c196:	3002      	adds	r0, #2
 800c198:	461a      	mov	r2, r3
 800c19a:	3201      	adds	r2, #1
 800c19c:	4296      	cmp	r6, r2
 800c19e:	54a1      	strb	r1, [r4, r2]
 800c1a0:	dcfb      	bgt.n	800c19a <__sccl+0x56>
 800c1a2:	1af2      	subs	r2, r6, r3
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	1c5d      	adds	r5, r3, #1
 800c1a8:	42b3      	cmp	r3, r6
 800c1aa:	bfa8      	it	ge
 800c1ac:	2200      	movge	r2, #0
 800c1ae:	18ab      	adds	r3, r5, r2
 800c1b0:	e7e1      	b.n	800c176 <__sccl+0x32>
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	e7da      	b.n	800c16c <__sccl+0x28>

0800c1b6 <__submore>:
 800c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c1be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c2:	4299      	cmp	r1, r3
 800c1c4:	d11d      	bne.n	800c202 <__submore+0x4c>
 800c1c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c1ca:	f7fd fd1f 	bl	8009c0c <_malloc_r>
 800c1ce:	b918      	cbnz	r0, 800c1d8 <__submore+0x22>
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1dc:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1de:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c1e2:	6360      	str	r0, [r4, #52]	; 0x34
 800c1e4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c1e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1ec:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c1f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1f4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c1f8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c1fc:	6020      	str	r0, [r4, #0]
 800c1fe:	2000      	movs	r0, #0
 800c200:	e7e8      	b.n	800c1d4 <__submore+0x1e>
 800c202:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c204:	0077      	lsls	r7, r6, #1
 800c206:	463a      	mov	r2, r7
 800c208:	f000 fc0f 	bl	800ca2a <_realloc_r>
 800c20c:	4605      	mov	r5, r0
 800c20e:	2800      	cmp	r0, #0
 800c210:	d0de      	beq.n	800c1d0 <__submore+0x1a>
 800c212:	eb00 0806 	add.w	r8, r0, r6
 800c216:	4601      	mov	r1, r0
 800c218:	4632      	mov	r2, r6
 800c21a:	4640      	mov	r0, r8
 800c21c:	f000 f852 	bl	800c2c4 <memcpy>
 800c220:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c224:	f8c4 8000 	str.w	r8, [r4]
 800c228:	e7e9      	b.n	800c1fe <__submore+0x48>

0800c22a <memmove>:
 800c22a:	4288      	cmp	r0, r1
 800c22c:	b510      	push	{r4, lr}
 800c22e:	eb01 0402 	add.w	r4, r1, r2
 800c232:	d902      	bls.n	800c23a <memmove+0x10>
 800c234:	4284      	cmp	r4, r0
 800c236:	4623      	mov	r3, r4
 800c238:	d807      	bhi.n	800c24a <memmove+0x20>
 800c23a:	1e43      	subs	r3, r0, #1
 800c23c:	42a1      	cmp	r1, r4
 800c23e:	d008      	beq.n	800c252 <memmove+0x28>
 800c240:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c244:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c248:	e7f8      	b.n	800c23c <memmove+0x12>
 800c24a:	4402      	add	r2, r0
 800c24c:	4601      	mov	r1, r0
 800c24e:	428a      	cmp	r2, r1
 800c250:	d100      	bne.n	800c254 <memmove+0x2a>
 800c252:	bd10      	pop	{r4, pc}
 800c254:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c258:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c25c:	e7f7      	b.n	800c24e <memmove+0x24>
	...

0800c260 <_fstat_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d07      	ldr	r5, [pc, #28]	; (800c280 <_fstat_r+0x20>)
 800c264:	2300      	movs	r3, #0
 800c266:	4604      	mov	r4, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	4611      	mov	r1, r2
 800c26c:	602b      	str	r3, [r5, #0]
 800c26e:	f7f7 f8ba 	bl	80033e6 <_fstat>
 800c272:	1c43      	adds	r3, r0, #1
 800c274:	d102      	bne.n	800c27c <_fstat_r+0x1c>
 800c276:	682b      	ldr	r3, [r5, #0]
 800c278:	b103      	cbz	r3, 800c27c <_fstat_r+0x1c>
 800c27a:	6023      	str	r3, [r4, #0]
 800c27c:	bd38      	pop	{r3, r4, r5, pc}
 800c27e:	bf00      	nop
 800c280:	20000b2c 	.word	0x20000b2c

0800c284 <_isatty_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d06      	ldr	r5, [pc, #24]	; (800c2a0 <_isatty_r+0x1c>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	f7f7 f8b9 	bl	8003406 <_isatty>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_isatty_r+0x1a>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_isatty_r+0x1a>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	20000b2c 	.word	0x20000b2c

0800c2a4 <_sbrk_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d06      	ldr	r5, [pc, #24]	; (800c2c0 <_sbrk_r+0x1c>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	602b      	str	r3, [r5, #0]
 800c2b0:	f7f7 f8c2 	bl	8003438 <_sbrk>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_sbrk_r+0x1a>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_sbrk_r+0x1a>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	20000b2c 	.word	0x20000b2c

0800c2c4 <memcpy>:
 800c2c4:	440a      	add	r2, r1
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2cc:	d100      	bne.n	800c2d0 <memcpy+0xc>
 800c2ce:	4770      	bx	lr
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2da:	4291      	cmp	r1, r2
 800c2dc:	d1f9      	bne.n	800c2d2 <memcpy+0xe>
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <nan>:
 800c2e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2e8 <nan+0x8>
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	7ff80000 	.word	0x7ff80000

0800c2f0 <__assert_func>:
 800c2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2f2:	4614      	mov	r4, r2
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	4b09      	ldr	r3, [pc, #36]	; (800c31c <__assert_func+0x2c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	68d8      	ldr	r0, [r3, #12]
 800c2fe:	b14c      	cbz	r4, 800c314 <__assert_func+0x24>
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <__assert_func+0x30>)
 800c302:	9100      	str	r1, [sp, #0]
 800c304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c308:	4906      	ldr	r1, [pc, #24]	; (800c324 <__assert_func+0x34>)
 800c30a:	462b      	mov	r3, r5
 800c30c:	f000 fc3e 	bl	800cb8c <fiprintf>
 800c310:	f000 fc4e 	bl	800cbb0 <abort>
 800c314:	4b04      	ldr	r3, [pc, #16]	; (800c328 <__assert_func+0x38>)
 800c316:	461c      	mov	r4, r3
 800c318:	e7f3      	b.n	800c302 <__assert_func+0x12>
 800c31a:	bf00      	nop
 800c31c:	20000078 	.word	0x20000078
 800c320:	0800d8f5 	.word	0x0800d8f5
 800c324:	0800d902 	.word	0x0800d902
 800c328:	0800d930 	.word	0x0800d930

0800c32c <_calloc_r>:
 800c32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c32e:	fba1 2402 	umull	r2, r4, r1, r2
 800c332:	b94c      	cbnz	r4, 800c348 <_calloc_r+0x1c>
 800c334:	4611      	mov	r1, r2
 800c336:	9201      	str	r2, [sp, #4]
 800c338:	f7fd fc68 	bl	8009c0c <_malloc_r>
 800c33c:	9a01      	ldr	r2, [sp, #4]
 800c33e:	4605      	mov	r5, r0
 800c340:	b930      	cbnz	r0, 800c350 <_calloc_r+0x24>
 800c342:	4628      	mov	r0, r5
 800c344:	b003      	add	sp, #12
 800c346:	bd30      	pop	{r4, r5, pc}
 800c348:	220c      	movs	r2, #12
 800c34a:	6002      	str	r2, [r0, #0]
 800c34c:	2500      	movs	r5, #0
 800c34e:	e7f8      	b.n	800c342 <_calloc_r+0x16>
 800c350:	4621      	mov	r1, r4
 800c352:	f7fc fcbd 	bl	8008cd0 <memset>
 800c356:	e7f4      	b.n	800c342 <_calloc_r+0x16>

0800c358 <rshift>:
 800c358:	6903      	ldr	r3, [r0, #16]
 800c35a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c35e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c362:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c366:	f100 0414 	add.w	r4, r0, #20
 800c36a:	dd45      	ble.n	800c3f8 <rshift+0xa0>
 800c36c:	f011 011f 	ands.w	r1, r1, #31
 800c370:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c374:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c378:	d10c      	bne.n	800c394 <rshift+0x3c>
 800c37a:	f100 0710 	add.w	r7, r0, #16
 800c37e:	4629      	mov	r1, r5
 800c380:	42b1      	cmp	r1, r6
 800c382:	d334      	bcc.n	800c3ee <rshift+0x96>
 800c384:	1a9b      	subs	r3, r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	1eea      	subs	r2, r5, #3
 800c38a:	4296      	cmp	r6, r2
 800c38c:	bf38      	it	cc
 800c38e:	2300      	movcc	r3, #0
 800c390:	4423      	add	r3, r4
 800c392:	e015      	b.n	800c3c0 <rshift+0x68>
 800c394:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c398:	f1c1 0820 	rsb	r8, r1, #32
 800c39c:	40cf      	lsrs	r7, r1
 800c39e:	f105 0e04 	add.w	lr, r5, #4
 800c3a2:	46a1      	mov	r9, r4
 800c3a4:	4576      	cmp	r6, lr
 800c3a6:	46f4      	mov	ip, lr
 800c3a8:	d815      	bhi.n	800c3d6 <rshift+0x7e>
 800c3aa:	1a9a      	subs	r2, r3, r2
 800c3ac:	0092      	lsls	r2, r2, #2
 800c3ae:	3a04      	subs	r2, #4
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	42ae      	cmp	r6, r5
 800c3b4:	bf38      	it	cc
 800c3b6:	2200      	movcc	r2, #0
 800c3b8:	18a3      	adds	r3, r4, r2
 800c3ba:	50a7      	str	r7, [r4, r2]
 800c3bc:	b107      	cbz	r7, 800c3c0 <rshift+0x68>
 800c3be:	3304      	adds	r3, #4
 800c3c0:	1b1a      	subs	r2, r3, r4
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3c8:	bf08      	it	eq
 800c3ca:	2300      	moveq	r3, #0
 800c3cc:	6102      	str	r2, [r0, #16]
 800c3ce:	bf08      	it	eq
 800c3d0:	6143      	streq	r3, [r0, #20]
 800c3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3d6:	f8dc c000 	ldr.w	ip, [ip]
 800c3da:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3de:	ea4c 0707 	orr.w	r7, ip, r7
 800c3e2:	f849 7b04 	str.w	r7, [r9], #4
 800c3e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3ea:	40cf      	lsrs	r7, r1
 800c3ec:	e7da      	b.n	800c3a4 <rshift+0x4c>
 800c3ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3f6:	e7c3      	b.n	800c380 <rshift+0x28>
 800c3f8:	4623      	mov	r3, r4
 800c3fa:	e7e1      	b.n	800c3c0 <rshift+0x68>

0800c3fc <__hexdig_fun>:
 800c3fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c400:	2b09      	cmp	r3, #9
 800c402:	d802      	bhi.n	800c40a <__hexdig_fun+0xe>
 800c404:	3820      	subs	r0, #32
 800c406:	b2c0      	uxtb	r0, r0
 800c408:	4770      	bx	lr
 800c40a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c40e:	2b05      	cmp	r3, #5
 800c410:	d801      	bhi.n	800c416 <__hexdig_fun+0x1a>
 800c412:	3847      	subs	r0, #71	; 0x47
 800c414:	e7f7      	b.n	800c406 <__hexdig_fun+0xa>
 800c416:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	d801      	bhi.n	800c422 <__hexdig_fun+0x26>
 800c41e:	3827      	subs	r0, #39	; 0x27
 800c420:	e7f1      	b.n	800c406 <__hexdig_fun+0xa>
 800c422:	2000      	movs	r0, #0
 800c424:	4770      	bx	lr
	...

0800c428 <__gethex>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	4617      	mov	r7, r2
 800c42e:	680a      	ldr	r2, [r1, #0]
 800c430:	b085      	sub	sp, #20
 800c432:	f102 0b02 	add.w	fp, r2, #2
 800c436:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c43a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c43e:	4681      	mov	r9, r0
 800c440:	468a      	mov	sl, r1
 800c442:	9302      	str	r3, [sp, #8]
 800c444:	32fe      	adds	r2, #254	; 0xfe
 800c446:	eb02 030b 	add.w	r3, r2, fp
 800c44a:	46d8      	mov	r8, fp
 800c44c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	2830      	cmp	r0, #48	; 0x30
 800c454:	d0f7      	beq.n	800c446 <__gethex+0x1e>
 800c456:	f7ff ffd1 	bl	800c3fc <__hexdig_fun>
 800c45a:	4604      	mov	r4, r0
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d138      	bne.n	800c4d2 <__gethex+0xaa>
 800c460:	49a7      	ldr	r1, [pc, #668]	; (800c700 <__gethex+0x2d8>)
 800c462:	2201      	movs	r2, #1
 800c464:	4640      	mov	r0, r8
 800c466:	f7fc fc3b 	bl	8008ce0 <strncmp>
 800c46a:	4606      	mov	r6, r0
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d169      	bne.n	800c544 <__gethex+0x11c>
 800c470:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c474:	465d      	mov	r5, fp
 800c476:	f7ff ffc1 	bl	800c3fc <__hexdig_fun>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d064      	beq.n	800c548 <__gethex+0x120>
 800c47e:	465a      	mov	r2, fp
 800c480:	7810      	ldrb	r0, [r2, #0]
 800c482:	2830      	cmp	r0, #48	; 0x30
 800c484:	4690      	mov	r8, r2
 800c486:	f102 0201 	add.w	r2, r2, #1
 800c48a:	d0f9      	beq.n	800c480 <__gethex+0x58>
 800c48c:	f7ff ffb6 	bl	800c3fc <__hexdig_fun>
 800c490:	2301      	movs	r3, #1
 800c492:	fab0 f480 	clz	r4, r0
 800c496:	0964      	lsrs	r4, r4, #5
 800c498:	465e      	mov	r6, fp
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	4642      	mov	r2, r8
 800c49e:	4615      	mov	r5, r2
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	7828      	ldrb	r0, [r5, #0]
 800c4a4:	f7ff ffaa 	bl	800c3fc <__hexdig_fun>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d1f8      	bne.n	800c49e <__gethex+0x76>
 800c4ac:	4994      	ldr	r1, [pc, #592]	; (800c700 <__gethex+0x2d8>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7fc fc15 	bl	8008ce0 <strncmp>
 800c4b6:	b978      	cbnz	r0, 800c4d8 <__gethex+0xb0>
 800c4b8:	b946      	cbnz	r6, 800c4cc <__gethex+0xa4>
 800c4ba:	1c6e      	adds	r6, r5, #1
 800c4bc:	4632      	mov	r2, r6
 800c4be:	4615      	mov	r5, r2
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	7828      	ldrb	r0, [r5, #0]
 800c4c4:	f7ff ff9a 	bl	800c3fc <__hexdig_fun>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d1f8      	bne.n	800c4be <__gethex+0x96>
 800c4cc:	1b73      	subs	r3, r6, r5
 800c4ce:	009e      	lsls	r6, r3, #2
 800c4d0:	e004      	b.n	800c4dc <__gethex+0xb4>
 800c4d2:	2400      	movs	r4, #0
 800c4d4:	4626      	mov	r6, r4
 800c4d6:	e7e1      	b.n	800c49c <__gethex+0x74>
 800c4d8:	2e00      	cmp	r6, #0
 800c4da:	d1f7      	bne.n	800c4cc <__gethex+0xa4>
 800c4dc:	782b      	ldrb	r3, [r5, #0]
 800c4de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4e2:	2b50      	cmp	r3, #80	; 0x50
 800c4e4:	d13d      	bne.n	800c562 <__gethex+0x13a>
 800c4e6:	786b      	ldrb	r3, [r5, #1]
 800c4e8:	2b2b      	cmp	r3, #43	; 0x2b
 800c4ea:	d02f      	beq.n	800c54c <__gethex+0x124>
 800c4ec:	2b2d      	cmp	r3, #45	; 0x2d
 800c4ee:	d031      	beq.n	800c554 <__gethex+0x12c>
 800c4f0:	1c69      	adds	r1, r5, #1
 800c4f2:	f04f 0b00 	mov.w	fp, #0
 800c4f6:	7808      	ldrb	r0, [r1, #0]
 800c4f8:	f7ff ff80 	bl	800c3fc <__hexdig_fun>
 800c4fc:	1e42      	subs	r2, r0, #1
 800c4fe:	b2d2      	uxtb	r2, r2
 800c500:	2a18      	cmp	r2, #24
 800c502:	d82e      	bhi.n	800c562 <__gethex+0x13a>
 800c504:	f1a0 0210 	sub.w	r2, r0, #16
 800c508:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c50c:	f7ff ff76 	bl	800c3fc <__hexdig_fun>
 800c510:	f100 3cff 	add.w	ip, r0, #4294967295
 800c514:	fa5f fc8c 	uxtb.w	ip, ip
 800c518:	f1bc 0f18 	cmp.w	ip, #24
 800c51c:	d91d      	bls.n	800c55a <__gethex+0x132>
 800c51e:	f1bb 0f00 	cmp.w	fp, #0
 800c522:	d000      	beq.n	800c526 <__gethex+0xfe>
 800c524:	4252      	negs	r2, r2
 800c526:	4416      	add	r6, r2
 800c528:	f8ca 1000 	str.w	r1, [sl]
 800c52c:	b1dc      	cbz	r4, 800c566 <__gethex+0x13e>
 800c52e:	9b01      	ldr	r3, [sp, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	bf14      	ite	ne
 800c534:	f04f 0800 	movne.w	r8, #0
 800c538:	f04f 0806 	moveq.w	r8, #6
 800c53c:	4640      	mov	r0, r8
 800c53e:	b005      	add	sp, #20
 800c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c544:	4645      	mov	r5, r8
 800c546:	4626      	mov	r6, r4
 800c548:	2401      	movs	r4, #1
 800c54a:	e7c7      	b.n	800c4dc <__gethex+0xb4>
 800c54c:	f04f 0b00 	mov.w	fp, #0
 800c550:	1ca9      	adds	r1, r5, #2
 800c552:	e7d0      	b.n	800c4f6 <__gethex+0xce>
 800c554:	f04f 0b01 	mov.w	fp, #1
 800c558:	e7fa      	b.n	800c550 <__gethex+0x128>
 800c55a:	230a      	movs	r3, #10
 800c55c:	fb03 0002 	mla	r0, r3, r2, r0
 800c560:	e7d0      	b.n	800c504 <__gethex+0xdc>
 800c562:	4629      	mov	r1, r5
 800c564:	e7e0      	b.n	800c528 <__gethex+0x100>
 800c566:	eba5 0308 	sub.w	r3, r5, r8
 800c56a:	3b01      	subs	r3, #1
 800c56c:	4621      	mov	r1, r4
 800c56e:	2b07      	cmp	r3, #7
 800c570:	dc0a      	bgt.n	800c588 <__gethex+0x160>
 800c572:	4648      	mov	r0, r9
 800c574:	f7fd fbd6 	bl	8009d24 <_Balloc>
 800c578:	4604      	mov	r4, r0
 800c57a:	b940      	cbnz	r0, 800c58e <__gethex+0x166>
 800c57c:	4b61      	ldr	r3, [pc, #388]	; (800c704 <__gethex+0x2dc>)
 800c57e:	4602      	mov	r2, r0
 800c580:	21e4      	movs	r1, #228	; 0xe4
 800c582:	4861      	ldr	r0, [pc, #388]	; (800c708 <__gethex+0x2e0>)
 800c584:	f7ff feb4 	bl	800c2f0 <__assert_func>
 800c588:	3101      	adds	r1, #1
 800c58a:	105b      	asrs	r3, r3, #1
 800c58c:	e7ef      	b.n	800c56e <__gethex+0x146>
 800c58e:	f100 0a14 	add.w	sl, r0, #20
 800c592:	2300      	movs	r3, #0
 800c594:	495a      	ldr	r1, [pc, #360]	; (800c700 <__gethex+0x2d8>)
 800c596:	f8cd a004 	str.w	sl, [sp, #4]
 800c59a:	469b      	mov	fp, r3
 800c59c:	45a8      	cmp	r8, r5
 800c59e:	d342      	bcc.n	800c626 <__gethex+0x1fe>
 800c5a0:	9801      	ldr	r0, [sp, #4]
 800c5a2:	f840 bb04 	str.w	fp, [r0], #4
 800c5a6:	eba0 000a 	sub.w	r0, r0, sl
 800c5aa:	1080      	asrs	r0, r0, #2
 800c5ac:	6120      	str	r0, [r4, #16]
 800c5ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c5b2:	4658      	mov	r0, fp
 800c5b4:	f7fd fca8 	bl	8009f08 <__hi0bits>
 800c5b8:	683d      	ldr	r5, [r7, #0]
 800c5ba:	eba8 0000 	sub.w	r0, r8, r0
 800c5be:	42a8      	cmp	r0, r5
 800c5c0:	dd59      	ble.n	800c676 <__gethex+0x24e>
 800c5c2:	eba0 0805 	sub.w	r8, r0, r5
 800c5c6:	4641      	mov	r1, r8
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f7fe f837 	bl	800a63c <__any_on>
 800c5ce:	4683      	mov	fp, r0
 800c5d0:	b1b8      	cbz	r0, 800c602 <__gethex+0x1da>
 800c5d2:	f108 33ff 	add.w	r3, r8, #4294967295
 800c5d6:	1159      	asrs	r1, r3, #5
 800c5d8:	f003 021f 	and.w	r2, r3, #31
 800c5dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5e0:	f04f 0b01 	mov.w	fp, #1
 800c5e4:	fa0b f202 	lsl.w	r2, fp, r2
 800c5e8:	420a      	tst	r2, r1
 800c5ea:	d00a      	beq.n	800c602 <__gethex+0x1da>
 800c5ec:	455b      	cmp	r3, fp
 800c5ee:	dd06      	ble.n	800c5fe <__gethex+0x1d6>
 800c5f0:	f1a8 0102 	sub.w	r1, r8, #2
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f7fe f821 	bl	800a63c <__any_on>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d138      	bne.n	800c670 <__gethex+0x248>
 800c5fe:	f04f 0b02 	mov.w	fp, #2
 800c602:	4641      	mov	r1, r8
 800c604:	4620      	mov	r0, r4
 800c606:	f7ff fea7 	bl	800c358 <rshift>
 800c60a:	4446      	add	r6, r8
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	42b3      	cmp	r3, r6
 800c610:	da41      	bge.n	800c696 <__gethex+0x26e>
 800c612:	4621      	mov	r1, r4
 800c614:	4648      	mov	r0, r9
 800c616:	f7fd fbc5 	bl	8009da4 <_Bfree>
 800c61a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c61c:	2300      	movs	r3, #0
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c624:	e78a      	b.n	800c53c <__gethex+0x114>
 800c626:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c62a:	2a2e      	cmp	r2, #46	; 0x2e
 800c62c:	d014      	beq.n	800c658 <__gethex+0x230>
 800c62e:	2b20      	cmp	r3, #32
 800c630:	d106      	bne.n	800c640 <__gethex+0x218>
 800c632:	9b01      	ldr	r3, [sp, #4]
 800c634:	f843 bb04 	str.w	fp, [r3], #4
 800c638:	f04f 0b00 	mov.w	fp, #0
 800c63c:	9301      	str	r3, [sp, #4]
 800c63e:	465b      	mov	r3, fp
 800c640:	7828      	ldrb	r0, [r5, #0]
 800c642:	9303      	str	r3, [sp, #12]
 800c644:	f7ff feda 	bl	800c3fc <__hexdig_fun>
 800c648:	9b03      	ldr	r3, [sp, #12]
 800c64a:	f000 000f 	and.w	r0, r0, #15
 800c64e:	4098      	lsls	r0, r3
 800c650:	ea4b 0b00 	orr.w	fp, fp, r0
 800c654:	3304      	adds	r3, #4
 800c656:	e7a1      	b.n	800c59c <__gethex+0x174>
 800c658:	45a8      	cmp	r8, r5
 800c65a:	d8e8      	bhi.n	800c62e <__gethex+0x206>
 800c65c:	2201      	movs	r2, #1
 800c65e:	4628      	mov	r0, r5
 800c660:	9303      	str	r3, [sp, #12]
 800c662:	f7fc fb3d 	bl	8008ce0 <strncmp>
 800c666:	4926      	ldr	r1, [pc, #152]	; (800c700 <__gethex+0x2d8>)
 800c668:	9b03      	ldr	r3, [sp, #12]
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d1df      	bne.n	800c62e <__gethex+0x206>
 800c66e:	e795      	b.n	800c59c <__gethex+0x174>
 800c670:	f04f 0b03 	mov.w	fp, #3
 800c674:	e7c5      	b.n	800c602 <__gethex+0x1da>
 800c676:	da0b      	bge.n	800c690 <__gethex+0x268>
 800c678:	eba5 0800 	sub.w	r8, r5, r0
 800c67c:	4621      	mov	r1, r4
 800c67e:	4642      	mov	r2, r8
 800c680:	4648      	mov	r0, r9
 800c682:	f7fd fda9 	bl	800a1d8 <__lshift>
 800c686:	eba6 0608 	sub.w	r6, r6, r8
 800c68a:	4604      	mov	r4, r0
 800c68c:	f100 0a14 	add.w	sl, r0, #20
 800c690:	f04f 0b00 	mov.w	fp, #0
 800c694:	e7ba      	b.n	800c60c <__gethex+0x1e4>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	42b3      	cmp	r3, r6
 800c69a:	dd73      	ble.n	800c784 <__gethex+0x35c>
 800c69c:	1b9e      	subs	r6, r3, r6
 800c69e:	42b5      	cmp	r5, r6
 800c6a0:	dc34      	bgt.n	800c70c <__gethex+0x2e4>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d023      	beq.n	800c6f0 <__gethex+0x2c8>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d025      	beq.n	800c6f8 <__gethex+0x2d0>
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d115      	bne.n	800c6dc <__gethex+0x2b4>
 800c6b0:	42b5      	cmp	r5, r6
 800c6b2:	d113      	bne.n	800c6dc <__gethex+0x2b4>
 800c6b4:	2d01      	cmp	r5, #1
 800c6b6:	d10b      	bne.n	800c6d0 <__gethex+0x2a8>
 800c6b8:	9a02      	ldr	r2, [sp, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	2301      	movs	r3, #1
 800c6c0:	6123      	str	r3, [r4, #16]
 800c6c2:	f8ca 3000 	str.w	r3, [sl]
 800c6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c6cc:	601c      	str	r4, [r3, #0]
 800c6ce:	e735      	b.n	800c53c <__gethex+0x114>
 800c6d0:	1e69      	subs	r1, r5, #1
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f7fd ffb2 	bl	800a63c <__any_on>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1ed      	bne.n	800c6b8 <__gethex+0x290>
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4648      	mov	r0, r9
 800c6e0:	f7fd fb60 	bl	8009da4 <_Bfree>
 800c6e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6013      	str	r3, [r2, #0]
 800c6ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c6ee:	e725      	b.n	800c53c <__gethex+0x114>
 800c6f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1f2      	bne.n	800c6dc <__gethex+0x2b4>
 800c6f6:	e7df      	b.n	800c6b8 <__gethex+0x290>
 800c6f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1dc      	bne.n	800c6b8 <__gethex+0x290>
 800c6fe:	e7ed      	b.n	800c6dc <__gethex+0x2b4>
 800c700:	0800d76c 	.word	0x0800d76c
 800c704:	0800d603 	.word	0x0800d603
 800c708:	0800d931 	.word	0x0800d931
 800c70c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c710:	f1bb 0f00 	cmp.w	fp, #0
 800c714:	d133      	bne.n	800c77e <__gethex+0x356>
 800c716:	f1b8 0f00 	cmp.w	r8, #0
 800c71a:	d004      	beq.n	800c726 <__gethex+0x2fe>
 800c71c:	4641      	mov	r1, r8
 800c71e:	4620      	mov	r0, r4
 800c720:	f7fd ff8c 	bl	800a63c <__any_on>
 800c724:	4683      	mov	fp, r0
 800c726:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c72a:	2301      	movs	r3, #1
 800c72c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c730:	f008 081f 	and.w	r8, r8, #31
 800c734:	fa03 f308 	lsl.w	r3, r3, r8
 800c738:	4213      	tst	r3, r2
 800c73a:	4631      	mov	r1, r6
 800c73c:	4620      	mov	r0, r4
 800c73e:	bf18      	it	ne
 800c740:	f04b 0b02 	orrne.w	fp, fp, #2
 800c744:	1bad      	subs	r5, r5, r6
 800c746:	f7ff fe07 	bl	800c358 <rshift>
 800c74a:	687e      	ldr	r6, [r7, #4]
 800c74c:	f04f 0802 	mov.w	r8, #2
 800c750:	f1bb 0f00 	cmp.w	fp, #0
 800c754:	d04a      	beq.n	800c7ec <__gethex+0x3c4>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d016      	beq.n	800c78a <__gethex+0x362>
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d018      	beq.n	800c792 <__gethex+0x36a>
 800c760:	2b01      	cmp	r3, #1
 800c762:	d109      	bne.n	800c778 <__gethex+0x350>
 800c764:	f01b 0f02 	tst.w	fp, #2
 800c768:	d006      	beq.n	800c778 <__gethex+0x350>
 800c76a:	f8da 3000 	ldr.w	r3, [sl]
 800c76e:	ea4b 0b03 	orr.w	fp, fp, r3
 800c772:	f01b 0f01 	tst.w	fp, #1
 800c776:	d10f      	bne.n	800c798 <__gethex+0x370>
 800c778:	f048 0810 	orr.w	r8, r8, #16
 800c77c:	e036      	b.n	800c7ec <__gethex+0x3c4>
 800c77e:	f04f 0b01 	mov.w	fp, #1
 800c782:	e7d0      	b.n	800c726 <__gethex+0x2fe>
 800c784:	f04f 0801 	mov.w	r8, #1
 800c788:	e7e2      	b.n	800c750 <__gethex+0x328>
 800c78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c78c:	f1c3 0301 	rsb	r3, r3, #1
 800c790:	930f      	str	r3, [sp, #60]	; 0x3c
 800c792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c794:	2b00      	cmp	r3, #0
 800c796:	d0ef      	beq.n	800c778 <__gethex+0x350>
 800c798:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c79c:	f104 0214 	add.w	r2, r4, #20
 800c7a0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c7a4:	9301      	str	r3, [sp, #4]
 800c7a6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	4694      	mov	ip, r2
 800c7ae:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7b2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c7b6:	d01e      	beq.n	800c7f6 <__gethex+0x3ce>
 800c7b8:	3101      	adds	r1, #1
 800c7ba:	f8cc 1000 	str.w	r1, [ip]
 800c7be:	f1b8 0f02 	cmp.w	r8, #2
 800c7c2:	f104 0214 	add.w	r2, r4, #20
 800c7c6:	d13d      	bne.n	800c844 <__gethex+0x41c>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	42ab      	cmp	r3, r5
 800c7ce:	d10b      	bne.n	800c7e8 <__gethex+0x3c0>
 800c7d0:	1169      	asrs	r1, r5, #5
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f005 051f 	and.w	r5, r5, #31
 800c7d8:	fa03 f505 	lsl.w	r5, r3, r5
 800c7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e0:	421d      	tst	r5, r3
 800c7e2:	bf18      	it	ne
 800c7e4:	f04f 0801 	movne.w	r8, #1
 800c7e8:	f048 0820 	orr.w	r8, r8, #32
 800c7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ee:	601c      	str	r4, [r3, #0]
 800c7f0:	9b02      	ldr	r3, [sp, #8]
 800c7f2:	601e      	str	r6, [r3, #0]
 800c7f4:	e6a2      	b.n	800c53c <__gethex+0x114>
 800c7f6:	4290      	cmp	r0, r2
 800c7f8:	f842 3c04 	str.w	r3, [r2, #-4]
 800c7fc:	d8d6      	bhi.n	800c7ac <__gethex+0x384>
 800c7fe:	68a2      	ldr	r2, [r4, #8]
 800c800:	4593      	cmp	fp, r2
 800c802:	db17      	blt.n	800c834 <__gethex+0x40c>
 800c804:	6861      	ldr	r1, [r4, #4]
 800c806:	4648      	mov	r0, r9
 800c808:	3101      	adds	r1, #1
 800c80a:	f7fd fa8b 	bl	8009d24 <_Balloc>
 800c80e:	4682      	mov	sl, r0
 800c810:	b918      	cbnz	r0, 800c81a <__gethex+0x3f2>
 800c812:	4b1b      	ldr	r3, [pc, #108]	; (800c880 <__gethex+0x458>)
 800c814:	4602      	mov	r2, r0
 800c816:	2184      	movs	r1, #132	; 0x84
 800c818:	e6b3      	b.n	800c582 <__gethex+0x15a>
 800c81a:	6922      	ldr	r2, [r4, #16]
 800c81c:	3202      	adds	r2, #2
 800c81e:	f104 010c 	add.w	r1, r4, #12
 800c822:	0092      	lsls	r2, r2, #2
 800c824:	300c      	adds	r0, #12
 800c826:	f7ff fd4d 	bl	800c2c4 <memcpy>
 800c82a:	4621      	mov	r1, r4
 800c82c:	4648      	mov	r0, r9
 800c82e:	f7fd fab9 	bl	8009da4 <_Bfree>
 800c832:	4654      	mov	r4, sl
 800c834:	6922      	ldr	r2, [r4, #16]
 800c836:	1c51      	adds	r1, r2, #1
 800c838:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c83c:	6121      	str	r1, [r4, #16]
 800c83e:	2101      	movs	r1, #1
 800c840:	6151      	str	r1, [r2, #20]
 800c842:	e7bc      	b.n	800c7be <__gethex+0x396>
 800c844:	6921      	ldr	r1, [r4, #16]
 800c846:	4559      	cmp	r1, fp
 800c848:	dd0b      	ble.n	800c862 <__gethex+0x43a>
 800c84a:	2101      	movs	r1, #1
 800c84c:	4620      	mov	r0, r4
 800c84e:	f7ff fd83 	bl	800c358 <rshift>
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	3601      	adds	r6, #1
 800c856:	42b3      	cmp	r3, r6
 800c858:	f6ff aedb 	blt.w	800c612 <__gethex+0x1ea>
 800c85c:	f04f 0801 	mov.w	r8, #1
 800c860:	e7c2      	b.n	800c7e8 <__gethex+0x3c0>
 800c862:	f015 051f 	ands.w	r5, r5, #31
 800c866:	d0f9      	beq.n	800c85c <__gethex+0x434>
 800c868:	9b01      	ldr	r3, [sp, #4]
 800c86a:	441a      	add	r2, r3
 800c86c:	f1c5 0520 	rsb	r5, r5, #32
 800c870:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c874:	f7fd fb48 	bl	8009f08 <__hi0bits>
 800c878:	42a8      	cmp	r0, r5
 800c87a:	dbe6      	blt.n	800c84a <__gethex+0x422>
 800c87c:	e7ee      	b.n	800c85c <__gethex+0x434>
 800c87e:	bf00      	nop
 800c880:	0800d603 	.word	0x0800d603

0800c884 <L_shift>:
 800c884:	f1c2 0208 	rsb	r2, r2, #8
 800c888:	0092      	lsls	r2, r2, #2
 800c88a:	b570      	push	{r4, r5, r6, lr}
 800c88c:	f1c2 0620 	rsb	r6, r2, #32
 800c890:	6843      	ldr	r3, [r0, #4]
 800c892:	6804      	ldr	r4, [r0, #0]
 800c894:	fa03 f506 	lsl.w	r5, r3, r6
 800c898:	432c      	orrs	r4, r5
 800c89a:	40d3      	lsrs	r3, r2
 800c89c:	6004      	str	r4, [r0, #0]
 800c89e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8a2:	4288      	cmp	r0, r1
 800c8a4:	d3f4      	bcc.n	800c890 <L_shift+0xc>
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}

0800c8a8 <__match>:
 800c8a8:	b530      	push	{r4, r5, lr}
 800c8aa:	6803      	ldr	r3, [r0, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8b2:	b914      	cbnz	r4, 800c8ba <__match+0x12>
 800c8b4:	6003      	str	r3, [r0, #0]
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	bd30      	pop	{r4, r5, pc}
 800c8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8c2:	2d19      	cmp	r5, #25
 800c8c4:	bf98      	it	ls
 800c8c6:	3220      	addls	r2, #32
 800c8c8:	42a2      	cmp	r2, r4
 800c8ca:	d0f0      	beq.n	800c8ae <__match+0x6>
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e7f3      	b.n	800c8b8 <__match+0x10>

0800c8d0 <__hexnan>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	680b      	ldr	r3, [r1, #0]
 800c8d6:	6801      	ldr	r1, [r0, #0]
 800c8d8:	115e      	asrs	r6, r3, #5
 800c8da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8de:	f013 031f 	ands.w	r3, r3, #31
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	bf18      	it	ne
 800c8e6:	3604      	addne	r6, #4
 800c8e8:	2500      	movs	r5, #0
 800c8ea:	1f37      	subs	r7, r6, #4
 800c8ec:	4682      	mov	sl, r0
 800c8ee:	4690      	mov	r8, r2
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8f6:	46b9      	mov	r9, r7
 800c8f8:	463c      	mov	r4, r7
 800c8fa:	9502      	str	r5, [sp, #8]
 800c8fc:	46ab      	mov	fp, r5
 800c8fe:	784a      	ldrb	r2, [r1, #1]
 800c900:	1c4b      	adds	r3, r1, #1
 800c902:	9303      	str	r3, [sp, #12]
 800c904:	b342      	cbz	r2, 800c958 <__hexnan+0x88>
 800c906:	4610      	mov	r0, r2
 800c908:	9105      	str	r1, [sp, #20]
 800c90a:	9204      	str	r2, [sp, #16]
 800c90c:	f7ff fd76 	bl	800c3fc <__hexdig_fun>
 800c910:	2800      	cmp	r0, #0
 800c912:	d14f      	bne.n	800c9b4 <__hexnan+0xe4>
 800c914:	9a04      	ldr	r2, [sp, #16]
 800c916:	9905      	ldr	r1, [sp, #20]
 800c918:	2a20      	cmp	r2, #32
 800c91a:	d818      	bhi.n	800c94e <__hexnan+0x7e>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	459b      	cmp	fp, r3
 800c920:	dd13      	ble.n	800c94a <__hexnan+0x7a>
 800c922:	454c      	cmp	r4, r9
 800c924:	d206      	bcs.n	800c934 <__hexnan+0x64>
 800c926:	2d07      	cmp	r5, #7
 800c928:	dc04      	bgt.n	800c934 <__hexnan+0x64>
 800c92a:	462a      	mov	r2, r5
 800c92c:	4649      	mov	r1, r9
 800c92e:	4620      	mov	r0, r4
 800c930:	f7ff ffa8 	bl	800c884 <L_shift>
 800c934:	4544      	cmp	r4, r8
 800c936:	d950      	bls.n	800c9da <__hexnan+0x10a>
 800c938:	2300      	movs	r3, #0
 800c93a:	f1a4 0904 	sub.w	r9, r4, #4
 800c93e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c942:	f8cd b008 	str.w	fp, [sp, #8]
 800c946:	464c      	mov	r4, r9
 800c948:	461d      	mov	r5, r3
 800c94a:	9903      	ldr	r1, [sp, #12]
 800c94c:	e7d7      	b.n	800c8fe <__hexnan+0x2e>
 800c94e:	2a29      	cmp	r2, #41	; 0x29
 800c950:	d155      	bne.n	800c9fe <__hexnan+0x12e>
 800c952:	3102      	adds	r1, #2
 800c954:	f8ca 1000 	str.w	r1, [sl]
 800c958:	f1bb 0f00 	cmp.w	fp, #0
 800c95c:	d04f      	beq.n	800c9fe <__hexnan+0x12e>
 800c95e:	454c      	cmp	r4, r9
 800c960:	d206      	bcs.n	800c970 <__hexnan+0xa0>
 800c962:	2d07      	cmp	r5, #7
 800c964:	dc04      	bgt.n	800c970 <__hexnan+0xa0>
 800c966:	462a      	mov	r2, r5
 800c968:	4649      	mov	r1, r9
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff ff8a 	bl	800c884 <L_shift>
 800c970:	4544      	cmp	r4, r8
 800c972:	d934      	bls.n	800c9de <__hexnan+0x10e>
 800c974:	f1a8 0204 	sub.w	r2, r8, #4
 800c978:	4623      	mov	r3, r4
 800c97a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c97e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c982:	429f      	cmp	r7, r3
 800c984:	d2f9      	bcs.n	800c97a <__hexnan+0xaa>
 800c986:	1b3b      	subs	r3, r7, r4
 800c988:	f023 0303 	bic.w	r3, r3, #3
 800c98c:	3304      	adds	r3, #4
 800c98e:	3e03      	subs	r6, #3
 800c990:	3401      	adds	r4, #1
 800c992:	42a6      	cmp	r6, r4
 800c994:	bf38      	it	cc
 800c996:	2304      	movcc	r3, #4
 800c998:	4443      	add	r3, r8
 800c99a:	2200      	movs	r2, #0
 800c99c:	f843 2b04 	str.w	r2, [r3], #4
 800c9a0:	429f      	cmp	r7, r3
 800c9a2:	d2fb      	bcs.n	800c99c <__hexnan+0xcc>
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	b91b      	cbnz	r3, 800c9b0 <__hexnan+0xe0>
 800c9a8:	4547      	cmp	r7, r8
 800c9aa:	d126      	bne.n	800c9fa <__hexnan+0x12a>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	603b      	str	r3, [r7, #0]
 800c9b0:	2005      	movs	r0, #5
 800c9b2:	e025      	b.n	800ca00 <__hexnan+0x130>
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	2d08      	cmp	r5, #8
 800c9b8:	f10b 0b01 	add.w	fp, fp, #1
 800c9bc:	dd06      	ble.n	800c9cc <__hexnan+0xfc>
 800c9be:	4544      	cmp	r4, r8
 800c9c0:	d9c3      	bls.n	800c94a <__hexnan+0x7a>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9c8:	2501      	movs	r5, #1
 800c9ca:	3c04      	subs	r4, #4
 800c9cc:	6822      	ldr	r2, [r4, #0]
 800c9ce:	f000 000f 	and.w	r0, r0, #15
 800c9d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c9d6:	6020      	str	r0, [r4, #0]
 800c9d8:	e7b7      	b.n	800c94a <__hexnan+0x7a>
 800c9da:	2508      	movs	r5, #8
 800c9dc:	e7b5      	b.n	800c94a <__hexnan+0x7a>
 800c9de:	9b01      	ldr	r3, [sp, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0df      	beq.n	800c9a4 <__hexnan+0xd4>
 800c9e4:	f1c3 0320 	rsb	r3, r3, #32
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	40da      	lsrs	r2, r3
 800c9ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	f846 3c04 	str.w	r3, [r6, #-4]
 800c9f8:	e7d4      	b.n	800c9a4 <__hexnan+0xd4>
 800c9fa:	3f04      	subs	r7, #4
 800c9fc:	e7d2      	b.n	800c9a4 <__hexnan+0xd4>
 800c9fe:	2004      	movs	r0, #4
 800ca00:	b007      	add	sp, #28
 800ca02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca06 <__ascii_mbtowc>:
 800ca06:	b082      	sub	sp, #8
 800ca08:	b901      	cbnz	r1, 800ca0c <__ascii_mbtowc+0x6>
 800ca0a:	a901      	add	r1, sp, #4
 800ca0c:	b142      	cbz	r2, 800ca20 <__ascii_mbtowc+0x1a>
 800ca0e:	b14b      	cbz	r3, 800ca24 <__ascii_mbtowc+0x1e>
 800ca10:	7813      	ldrb	r3, [r2, #0]
 800ca12:	600b      	str	r3, [r1, #0]
 800ca14:	7812      	ldrb	r2, [r2, #0]
 800ca16:	1e10      	subs	r0, r2, #0
 800ca18:	bf18      	it	ne
 800ca1a:	2001      	movne	r0, #1
 800ca1c:	b002      	add	sp, #8
 800ca1e:	4770      	bx	lr
 800ca20:	4610      	mov	r0, r2
 800ca22:	e7fb      	b.n	800ca1c <__ascii_mbtowc+0x16>
 800ca24:	f06f 0001 	mvn.w	r0, #1
 800ca28:	e7f8      	b.n	800ca1c <__ascii_mbtowc+0x16>

0800ca2a <_realloc_r>:
 800ca2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4614      	mov	r4, r2
 800ca32:	460e      	mov	r6, r1
 800ca34:	b921      	cbnz	r1, 800ca40 <_realloc_r+0x16>
 800ca36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	f7fd b8e6 	b.w	8009c0c <_malloc_r>
 800ca40:	b92a      	cbnz	r2, 800ca4e <_realloc_r+0x24>
 800ca42:	f7fd f86f 	bl	8009b24 <_free_r>
 800ca46:	4625      	mov	r5, r4
 800ca48:	4628      	mov	r0, r5
 800ca4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4e:	f000 f8b6 	bl	800cbbe <_malloc_usable_size_r>
 800ca52:	4284      	cmp	r4, r0
 800ca54:	4607      	mov	r7, r0
 800ca56:	d802      	bhi.n	800ca5e <_realloc_r+0x34>
 800ca58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca5c:	d812      	bhi.n	800ca84 <_realloc_r+0x5a>
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4640      	mov	r0, r8
 800ca62:	f7fd f8d3 	bl	8009c0c <_malloc_r>
 800ca66:	4605      	mov	r5, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0ed      	beq.n	800ca48 <_realloc_r+0x1e>
 800ca6c:	42bc      	cmp	r4, r7
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4631      	mov	r1, r6
 800ca72:	bf28      	it	cs
 800ca74:	463a      	movcs	r2, r7
 800ca76:	f7ff fc25 	bl	800c2c4 <memcpy>
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	f7fd f851 	bl	8009b24 <_free_r>
 800ca82:	e7e1      	b.n	800ca48 <_realloc_r+0x1e>
 800ca84:	4635      	mov	r5, r6
 800ca86:	e7df      	b.n	800ca48 <_realloc_r+0x1e>

0800ca88 <_strtoul_l.constprop.0>:
 800ca88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca8c:	4f36      	ldr	r7, [pc, #216]	; (800cb68 <_strtoul_l.constprop.0+0xe0>)
 800ca8e:	4686      	mov	lr, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	4628      	mov	r0, r5
 800ca94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca98:	5d3e      	ldrb	r6, [r7, r4]
 800ca9a:	f016 0608 	ands.w	r6, r6, #8
 800ca9e:	d1f8      	bne.n	800ca92 <_strtoul_l.constprop.0+0xa>
 800caa0:	2c2d      	cmp	r4, #45	; 0x2d
 800caa2:	d130      	bne.n	800cb06 <_strtoul_l.constprop.0+0x7e>
 800caa4:	782c      	ldrb	r4, [r5, #0]
 800caa6:	2601      	movs	r6, #1
 800caa8:	1c85      	adds	r5, r0, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d057      	beq.n	800cb5e <_strtoul_l.constprop.0+0xd6>
 800caae:	2b10      	cmp	r3, #16
 800cab0:	d109      	bne.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cab2:	2c30      	cmp	r4, #48	; 0x30
 800cab4:	d107      	bne.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cab6:	7828      	ldrb	r0, [r5, #0]
 800cab8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cabc:	2858      	cmp	r0, #88	; 0x58
 800cabe:	d149      	bne.n	800cb54 <_strtoul_l.constprop.0+0xcc>
 800cac0:	786c      	ldrb	r4, [r5, #1]
 800cac2:	2310      	movs	r3, #16
 800cac4:	3502      	adds	r5, #2
 800cac6:	f04f 38ff 	mov.w	r8, #4294967295
 800caca:	2700      	movs	r7, #0
 800cacc:	fbb8 f8f3 	udiv	r8, r8, r3
 800cad0:	fb03 f908 	mul.w	r9, r3, r8
 800cad4:	ea6f 0909 	mvn.w	r9, r9
 800cad8:	4638      	mov	r0, r7
 800cada:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cade:	f1bc 0f09 	cmp.w	ip, #9
 800cae2:	d815      	bhi.n	800cb10 <_strtoul_l.constprop.0+0x88>
 800cae4:	4664      	mov	r4, ip
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	dd23      	ble.n	800cb32 <_strtoul_l.constprop.0+0xaa>
 800caea:	f1b7 3fff 	cmp.w	r7, #4294967295
 800caee:	d007      	beq.n	800cb00 <_strtoul_l.constprop.0+0x78>
 800caf0:	4580      	cmp	r8, r0
 800caf2:	d31b      	bcc.n	800cb2c <_strtoul_l.constprop.0+0xa4>
 800caf4:	d101      	bne.n	800cafa <_strtoul_l.constprop.0+0x72>
 800caf6:	45a1      	cmp	r9, r4
 800caf8:	db18      	blt.n	800cb2c <_strtoul_l.constprop.0+0xa4>
 800cafa:	fb00 4003 	mla	r0, r0, r3, r4
 800cafe:	2701      	movs	r7, #1
 800cb00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb04:	e7e9      	b.n	800cada <_strtoul_l.constprop.0+0x52>
 800cb06:	2c2b      	cmp	r4, #43	; 0x2b
 800cb08:	bf04      	itt	eq
 800cb0a:	782c      	ldrbeq	r4, [r5, #0]
 800cb0c:	1c85      	addeq	r5, r0, #2
 800cb0e:	e7cc      	b.n	800caaa <_strtoul_l.constprop.0+0x22>
 800cb10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb14:	f1bc 0f19 	cmp.w	ip, #25
 800cb18:	d801      	bhi.n	800cb1e <_strtoul_l.constprop.0+0x96>
 800cb1a:	3c37      	subs	r4, #55	; 0x37
 800cb1c:	e7e3      	b.n	800cae6 <_strtoul_l.constprop.0+0x5e>
 800cb1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb22:	f1bc 0f19 	cmp.w	ip, #25
 800cb26:	d804      	bhi.n	800cb32 <_strtoul_l.constprop.0+0xaa>
 800cb28:	3c57      	subs	r4, #87	; 0x57
 800cb2a:	e7dc      	b.n	800cae6 <_strtoul_l.constprop.0+0x5e>
 800cb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb30:	e7e6      	b.n	800cb00 <_strtoul_l.constprop.0+0x78>
 800cb32:	1c7b      	adds	r3, r7, #1
 800cb34:	d106      	bne.n	800cb44 <_strtoul_l.constprop.0+0xbc>
 800cb36:	2322      	movs	r3, #34	; 0x22
 800cb38:	f8ce 3000 	str.w	r3, [lr]
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	b932      	cbnz	r2, 800cb4e <_strtoul_l.constprop.0+0xc6>
 800cb40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb44:	b106      	cbz	r6, 800cb48 <_strtoul_l.constprop.0+0xc0>
 800cb46:	4240      	negs	r0, r0
 800cb48:	2a00      	cmp	r2, #0
 800cb4a:	d0f9      	beq.n	800cb40 <_strtoul_l.constprop.0+0xb8>
 800cb4c:	b107      	cbz	r7, 800cb50 <_strtoul_l.constprop.0+0xc8>
 800cb4e:	1e69      	subs	r1, r5, #1
 800cb50:	6011      	str	r1, [r2, #0]
 800cb52:	e7f5      	b.n	800cb40 <_strtoul_l.constprop.0+0xb8>
 800cb54:	2430      	movs	r4, #48	; 0x30
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1b5      	bne.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cb5a:	2308      	movs	r3, #8
 800cb5c:	e7b3      	b.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cb5e:	2c30      	cmp	r4, #48	; 0x30
 800cb60:	d0a9      	beq.n	800cab6 <_strtoul_l.constprop.0+0x2e>
 800cb62:	230a      	movs	r3, #10
 800cb64:	e7af      	b.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cb66:	bf00      	nop
 800cb68:	0800d7c1 	.word	0x0800d7c1

0800cb6c <_strtoul_r>:
 800cb6c:	f7ff bf8c 	b.w	800ca88 <_strtoul_l.constprop.0>

0800cb70 <__ascii_wctomb>:
 800cb70:	b149      	cbz	r1, 800cb86 <__ascii_wctomb+0x16>
 800cb72:	2aff      	cmp	r2, #255	; 0xff
 800cb74:	bf85      	ittet	hi
 800cb76:	238a      	movhi	r3, #138	; 0x8a
 800cb78:	6003      	strhi	r3, [r0, #0]
 800cb7a:	700a      	strbls	r2, [r1, #0]
 800cb7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb80:	bf98      	it	ls
 800cb82:	2001      	movls	r0, #1
 800cb84:	4770      	bx	lr
 800cb86:	4608      	mov	r0, r1
 800cb88:	4770      	bx	lr
	...

0800cb8c <fiprintf>:
 800cb8c:	b40e      	push	{r1, r2, r3}
 800cb8e:	b503      	push	{r0, r1, lr}
 800cb90:	4601      	mov	r1, r0
 800cb92:	ab03      	add	r3, sp, #12
 800cb94:	4805      	ldr	r0, [pc, #20]	; (800cbac <fiprintf+0x20>)
 800cb96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9a:	6800      	ldr	r0, [r0, #0]
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	f7fe ff59 	bl	800ba54 <_vfiprintf_r>
 800cba2:	b002      	add	sp, #8
 800cba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba8:	b003      	add	sp, #12
 800cbaa:	4770      	bx	lr
 800cbac:	20000078 	.word	0x20000078

0800cbb0 <abort>:
 800cbb0:	b508      	push	{r3, lr}
 800cbb2:	2006      	movs	r0, #6
 800cbb4:	f000 f834 	bl	800cc20 <raise>
 800cbb8:	2001      	movs	r0, #1
 800cbba:	f7f6 fbe1 	bl	8003380 <_exit>

0800cbbe <_malloc_usable_size_r>:
 800cbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbc2:	1f18      	subs	r0, r3, #4
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	bfbc      	itt	lt
 800cbc8:	580b      	ldrlt	r3, [r1, r0]
 800cbca:	18c0      	addlt	r0, r0, r3
 800cbcc:	4770      	bx	lr

0800cbce <_raise_r>:
 800cbce:	291f      	cmp	r1, #31
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	d904      	bls.n	800cbe2 <_raise_r+0x14>
 800cbd8:	2316      	movs	r3, #22
 800cbda:	6003      	str	r3, [r0, #0]
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	bd38      	pop	{r3, r4, r5, pc}
 800cbe2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cbe4:	b112      	cbz	r2, 800cbec <_raise_r+0x1e>
 800cbe6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbea:	b94b      	cbnz	r3, 800cc00 <_raise_r+0x32>
 800cbec:	4620      	mov	r0, r4
 800cbee:	f000 f831 	bl	800cc54 <_getpid_r>
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbfc:	f000 b818 	b.w	800cc30 <_kill_r>
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d00a      	beq.n	800cc1a <_raise_r+0x4c>
 800cc04:	1c59      	adds	r1, r3, #1
 800cc06:	d103      	bne.n	800cc10 <_raise_r+0x42>
 800cc08:	2316      	movs	r3, #22
 800cc0a:	6003      	str	r3, [r0, #0]
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	e7e7      	b.n	800cbe0 <_raise_r+0x12>
 800cc10:	2400      	movs	r4, #0
 800cc12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc16:	4628      	mov	r0, r5
 800cc18:	4798      	blx	r3
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	e7e0      	b.n	800cbe0 <_raise_r+0x12>
	...

0800cc20 <raise>:
 800cc20:	4b02      	ldr	r3, [pc, #8]	; (800cc2c <raise+0xc>)
 800cc22:	4601      	mov	r1, r0
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	f7ff bfd2 	b.w	800cbce <_raise_r>
 800cc2a:	bf00      	nop
 800cc2c:	20000078 	.word	0x20000078

0800cc30 <_kill_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d07      	ldr	r5, [pc, #28]	; (800cc50 <_kill_r+0x20>)
 800cc34:	2300      	movs	r3, #0
 800cc36:	4604      	mov	r4, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	f7f6 fb8f 	bl	8003360 <_kill>
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	d102      	bne.n	800cc4c <_kill_r+0x1c>
 800cc46:	682b      	ldr	r3, [r5, #0]
 800cc48:	b103      	cbz	r3, 800cc4c <_kill_r+0x1c>
 800cc4a:	6023      	str	r3, [r4, #0]
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000b2c 	.word	0x20000b2c

0800cc54 <_getpid_r>:
 800cc54:	f7f6 bb7c 	b.w	8003350 <_getpid>

0800cc58 <fmod>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	ed2d 8b02 	vpush	{d8}
 800cc5e:	ec57 6b10 	vmov	r6, r7, d0
 800cc62:	ec55 4b11 	vmov	r4, r5, d1
 800cc66:	f000 f825 	bl	800ccb4 <__ieee754_fmod>
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	eeb0 8a40 	vmov.f32	s16, s0
 800cc76:	eef0 8a60 	vmov.f32	s17, s1
 800cc7a:	f7f3 ff57 	bl	8000b2c <__aeabi_dcmpun>
 800cc7e:	b990      	cbnz	r0, 800cca6 <fmod+0x4e>
 800cc80:	2200      	movs	r2, #0
 800cc82:	2300      	movs	r3, #0
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc8c:	b158      	cbz	r0, 800cca6 <fmod+0x4e>
 800cc8e:	f7fc f899 	bl	8008dc4 <__errno>
 800cc92:	2321      	movs	r3, #33	; 0x21
 800cc94:	6003      	str	r3, [r0, #0]
 800cc96:	2200      	movs	r2, #0
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f7f3 fdd5 	bl	800084c <__aeabi_ddiv>
 800cca2:	ec41 0b18 	vmov	d8, r0, r1
 800cca6:	eeb0 0a48 	vmov.f32	s0, s16
 800ccaa:	eef0 0a68 	vmov.f32	s1, s17
 800ccae:	ecbd 8b02 	vpop	{d8}
 800ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccb4 <__ieee754_fmod>:
 800ccb4:	ec53 2b11 	vmov	r2, r3, d1
 800ccb8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800ccbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc0:	ea5c 0402 	orrs.w	r4, ip, r2
 800ccc4:	ec51 0b10 	vmov	r0, r1, d0
 800ccc8:	ee11 7a10 	vmov	r7, s2
 800cccc:	ee11 ea10 	vmov	lr, s2
 800ccd0:	461e      	mov	r6, r3
 800ccd2:	d00c      	beq.n	800ccee <__ieee754_fmod+0x3a>
 800ccd4:	4c78      	ldr	r4, [pc, #480]	; (800ceb8 <__ieee754_fmod+0x204>)
 800ccd6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ccda:	45a0      	cmp	r8, r4
 800ccdc:	4689      	mov	r9, r1
 800ccde:	dc06      	bgt.n	800ccee <__ieee754_fmod+0x3a>
 800cce0:	4254      	negs	r4, r2
 800cce2:	4d76      	ldr	r5, [pc, #472]	; (800cebc <__ieee754_fmod+0x208>)
 800cce4:	4314      	orrs	r4, r2
 800cce6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800ccea:	42ac      	cmp	r4, r5
 800ccec:	d909      	bls.n	800cd02 <__ieee754_fmod+0x4e>
 800ccee:	f7f3 fc83 	bl	80005f8 <__aeabi_dmul>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	f7f3 fda9 	bl	800084c <__aeabi_ddiv>
 800ccfa:	ec41 0b10 	vmov	d0, r0, r1
 800ccfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd02:	45e0      	cmp	r8, ip
 800cd04:	ee10 aa10 	vmov	sl, s0
 800cd08:	ee10 4a10 	vmov	r4, s0
 800cd0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cd10:	dc09      	bgt.n	800cd26 <__ieee754_fmod+0x72>
 800cd12:	dbf2      	blt.n	800ccfa <__ieee754_fmod+0x46>
 800cd14:	4290      	cmp	r0, r2
 800cd16:	d3f0      	bcc.n	800ccfa <__ieee754_fmod+0x46>
 800cd18:	d105      	bne.n	800cd26 <__ieee754_fmod+0x72>
 800cd1a:	4b69      	ldr	r3, [pc, #420]	; (800cec0 <__ieee754_fmod+0x20c>)
 800cd1c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cd20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd24:	e7e9      	b.n	800ccfa <__ieee754_fmod+0x46>
 800cd26:	4a65      	ldr	r2, [pc, #404]	; (800cebc <__ieee754_fmod+0x208>)
 800cd28:	ea19 0f02 	tst.w	r9, r2
 800cd2c:	d148      	bne.n	800cdc0 <__ieee754_fmod+0x10c>
 800cd2e:	f1b8 0f00 	cmp.w	r8, #0
 800cd32:	d13d      	bne.n	800cdb0 <__ieee754_fmod+0xfc>
 800cd34:	4963      	ldr	r1, [pc, #396]	; (800cec4 <__ieee754_fmod+0x210>)
 800cd36:	4653      	mov	r3, sl
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	dc36      	bgt.n	800cdaa <__ieee754_fmod+0xf6>
 800cd3c:	4216      	tst	r6, r2
 800cd3e:	d14f      	bne.n	800cde0 <__ieee754_fmod+0x12c>
 800cd40:	f1bc 0f00 	cmp.w	ip, #0
 800cd44:	d144      	bne.n	800cdd0 <__ieee754_fmod+0x11c>
 800cd46:	4a5f      	ldr	r2, [pc, #380]	; (800cec4 <__ieee754_fmod+0x210>)
 800cd48:	463b      	mov	r3, r7
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	dc3d      	bgt.n	800cdca <__ieee754_fmod+0x116>
 800cd4e:	485e      	ldr	r0, [pc, #376]	; (800cec8 <__ieee754_fmod+0x214>)
 800cd50:	4281      	cmp	r1, r0
 800cd52:	db4a      	blt.n	800cdea <__ieee754_fmod+0x136>
 800cd54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd5c:	485a      	ldr	r0, [pc, #360]	; (800cec8 <__ieee754_fmod+0x214>)
 800cd5e:	4282      	cmp	r2, r0
 800cd60:	db57      	blt.n	800ce12 <__ieee754_fmod+0x15e>
 800cd62:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cd66:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cd6a:	1a89      	subs	r1, r1, r2
 800cd6c:	1b98      	subs	r0, r3, r6
 800cd6e:	eba4 070e 	sub.w	r7, r4, lr
 800cd72:	2900      	cmp	r1, #0
 800cd74:	d162      	bne.n	800ce3c <__ieee754_fmod+0x188>
 800cd76:	4574      	cmp	r4, lr
 800cd78:	bf38      	it	cc
 800cd7a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	bfa4      	itt	ge
 800cd82:	463c      	movge	r4, r7
 800cd84:	4603      	movge	r3, r0
 800cd86:	ea53 0104 	orrs.w	r1, r3, r4
 800cd8a:	d0c6      	beq.n	800cd1a <__ieee754_fmod+0x66>
 800cd8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd90:	db69      	blt.n	800ce66 <__ieee754_fmod+0x1b2>
 800cd92:	494d      	ldr	r1, [pc, #308]	; (800cec8 <__ieee754_fmod+0x214>)
 800cd94:	428a      	cmp	r2, r1
 800cd96:	db6c      	blt.n	800ce72 <__ieee754_fmod+0x1be>
 800cd98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd9c:	432b      	orrs	r3, r5
 800cd9e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cda2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cda6:	4620      	mov	r0, r4
 800cda8:	e7a7      	b.n	800ccfa <__ieee754_fmod+0x46>
 800cdaa:	3901      	subs	r1, #1
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	e7c3      	b.n	800cd38 <__ieee754_fmod+0x84>
 800cdb0:	4945      	ldr	r1, [pc, #276]	; (800cec8 <__ieee754_fmod+0x214>)
 800cdb2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	ddc0      	ble.n	800cd3c <__ieee754_fmod+0x88>
 800cdba:	3901      	subs	r1, #1
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	e7fa      	b.n	800cdb6 <__ieee754_fmod+0x102>
 800cdc0:	ea4f 5128 	mov.w	r1, r8, asr #20
 800cdc4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cdc8:	e7b8      	b.n	800cd3c <__ieee754_fmod+0x88>
 800cdca:	3a01      	subs	r2, #1
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	e7bc      	b.n	800cd4a <__ieee754_fmod+0x96>
 800cdd0:	4a3d      	ldr	r2, [pc, #244]	; (800cec8 <__ieee754_fmod+0x214>)
 800cdd2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	ddb9      	ble.n	800cd4e <__ieee754_fmod+0x9a>
 800cdda:	3a01      	subs	r2, #1
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	e7fa      	b.n	800cdd6 <__ieee754_fmod+0x122>
 800cde0:	ea4f 522c 	mov.w	r2, ip, asr #20
 800cde4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cde8:	e7b1      	b.n	800cd4e <__ieee754_fmod+0x9a>
 800cdea:	1a40      	subs	r0, r0, r1
 800cdec:	281f      	cmp	r0, #31
 800cdee:	dc0a      	bgt.n	800ce06 <__ieee754_fmod+0x152>
 800cdf0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800cdf4:	fa08 f800 	lsl.w	r8, r8, r0
 800cdf8:	fa2a f303 	lsr.w	r3, sl, r3
 800cdfc:	ea43 0308 	orr.w	r3, r3, r8
 800ce00:	fa0a f400 	lsl.w	r4, sl, r0
 800ce04:	e7aa      	b.n	800cd5c <__ieee754_fmod+0xa8>
 800ce06:	4b31      	ldr	r3, [pc, #196]	; (800cecc <__ieee754_fmod+0x218>)
 800ce08:	1a5b      	subs	r3, r3, r1
 800ce0a:	fa0a f303 	lsl.w	r3, sl, r3
 800ce0e:	2400      	movs	r4, #0
 800ce10:	e7a4      	b.n	800cd5c <__ieee754_fmod+0xa8>
 800ce12:	1a80      	subs	r0, r0, r2
 800ce14:	281f      	cmp	r0, #31
 800ce16:	dc0a      	bgt.n	800ce2e <__ieee754_fmod+0x17a>
 800ce18:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ce1c:	fa0c fc00 	lsl.w	ip, ip, r0
 800ce20:	fa27 f606 	lsr.w	r6, r7, r6
 800ce24:	ea46 060c 	orr.w	r6, r6, ip
 800ce28:	fa07 fe00 	lsl.w	lr, r7, r0
 800ce2c:	e79d      	b.n	800cd6a <__ieee754_fmod+0xb6>
 800ce2e:	4e27      	ldr	r6, [pc, #156]	; (800cecc <__ieee754_fmod+0x218>)
 800ce30:	1ab6      	subs	r6, r6, r2
 800ce32:	fa07 f606 	lsl.w	r6, r7, r6
 800ce36:	f04f 0e00 	mov.w	lr, #0
 800ce3a:	e796      	b.n	800cd6a <__ieee754_fmod+0xb6>
 800ce3c:	4574      	cmp	r4, lr
 800ce3e:	bf38      	it	cc
 800ce40:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ce44:	2800      	cmp	r0, #0
 800ce46:	da05      	bge.n	800ce54 <__ieee754_fmod+0x1a0>
 800ce48:	0fe0      	lsrs	r0, r4, #31
 800ce4a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ce4e:	0064      	lsls	r4, r4, #1
 800ce50:	3901      	subs	r1, #1
 800ce52:	e78b      	b.n	800cd6c <__ieee754_fmod+0xb8>
 800ce54:	ea50 0307 	orrs.w	r3, r0, r7
 800ce58:	f43f af5f 	beq.w	800cd1a <__ieee754_fmod+0x66>
 800ce5c:	0ffb      	lsrs	r3, r7, #31
 800ce5e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ce62:	007c      	lsls	r4, r7, #1
 800ce64:	e7f4      	b.n	800ce50 <__ieee754_fmod+0x19c>
 800ce66:	0fe1      	lsrs	r1, r4, #31
 800ce68:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ce6c:	0064      	lsls	r4, r4, #1
 800ce6e:	3a01      	subs	r2, #1
 800ce70:	e78c      	b.n	800cd8c <__ieee754_fmod+0xd8>
 800ce72:	1a89      	subs	r1, r1, r2
 800ce74:	2914      	cmp	r1, #20
 800ce76:	dc0a      	bgt.n	800ce8e <__ieee754_fmod+0x1da>
 800ce78:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ce7c:	fa03 f202 	lsl.w	r2, r3, r2
 800ce80:	40cc      	lsrs	r4, r1
 800ce82:	4322      	orrs	r2, r4
 800ce84:	410b      	asrs	r3, r1
 800ce86:	ea43 0105 	orr.w	r1, r3, r5
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	e735      	b.n	800ccfa <__ieee754_fmod+0x46>
 800ce8e:	291f      	cmp	r1, #31
 800ce90:	dc07      	bgt.n	800cea2 <__ieee754_fmod+0x1ee>
 800ce92:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ce96:	40cc      	lsrs	r4, r1
 800ce98:	fa03 f202 	lsl.w	r2, r3, r2
 800ce9c:	4322      	orrs	r2, r4
 800ce9e:	462b      	mov	r3, r5
 800cea0:	e7f1      	b.n	800ce86 <__ieee754_fmod+0x1d2>
 800cea2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800cea6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ceaa:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800ceae:	32e2      	adds	r2, #226	; 0xe2
 800ceb0:	fa43 f202 	asr.w	r2, r3, r2
 800ceb4:	e7f3      	b.n	800ce9e <__ieee754_fmod+0x1ea>
 800ceb6:	bf00      	nop
 800ceb8:	7fefffff 	.word	0x7fefffff
 800cebc:	7ff00000 	.word	0x7ff00000
 800cec0:	0800d998 	.word	0x0800d998
 800cec4:	fffffbed 	.word	0xfffffbed
 800cec8:	fffffc02 	.word	0xfffffc02
 800cecc:	fffffbe2 	.word	0xfffffbe2

0800ced0 <_init>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr

0800cedc <_fini>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	bf00      	nop
 800cee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cee2:	bc08      	pop	{r3}
 800cee4:	469e      	mov	lr, r3
 800cee6:	4770      	bx	lr
